using entity_framework.Models.bike_1;
using entity_framework.Models.cre_Doc_Tracking_DB;
using entity_framework.Models.county_public_safety;
using entity_framework.Models.candidate_poll;
using entity_framework.Models.climbing;
using entity_framework.Models.browser_web;
using entity_framework.Models.cinema;
using entity_framework.Models.company_1;
using entity_framework.Models.cre_Docs_and_Epenses;
using entity_framework.Models.csu_1;
using entity_framework.Models.allergy_1;
using entity_framework.Models.customer_complaints;
using entity_framework.Models.cre_Doc_Control_Systems;
using entity_framework.Models.baseball_1;
using entity_framework.Models.cre_Theme_park;
using entity_framework.Models.college_3;
using entity_framework.Models.customer_deliveries;
using entity_framework.Models.club_1;
using entity_framework.Models.customers_and_addresses;

using Microsoft.EntityFrameworkCore;

class Program {

static void TestBike1Context() { var context = new Bike1Context(); 
 var tests = new (object, string)[] {
(context.Weathers.Where(row => row.MaxTemperatureF > 85).Select(row => new { row.Date }).ToList(), "SELECT date FROM weather WHERE max_temperature_f > 85"),
(context.Stations.Where(row => row.Lat < 37.5).Select(row => new { row.Name }).ToList(), "SELECT name FROM station WHERE lat < 37.5"),
(context.Stations.GroupBy(row => new { row.City }).Select(group => new { group.Key.City, MaxLat = group.Select(row => row.Lat).Max() }).ToList(), "SELECT city , max(lat) FROM station GROUP BY city"),
(context.Trips.OrderBy(row => row.Id).Select(row => new { row.StartStationName, row.EndStationName }).Take(3).ToList(), "SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3"),
(context.Stations.Where(row => row.City == "San Jose").GroupBy(row => 1).Select(group => new { AverageLat = group.Select(row => row.Lat).Average(), AverageLong = group.Select(row => row.Long).Average() }).ToList(), "SELECT avg(lat) , avg(long) FROM station WHERE city = \"San Jose\""),
(context.Trips.OrderBy(row => row.Duration).Select(row => new { row.Id }).Take(1).ToList(), "SELECT id FROM trip ORDER BY duration LIMIT 1"),
(context.Trips.Where(row => row.BikeId == 636).GroupBy(row => 1).Select(group => new { SumDuration = group.Select(row => row.Duration).Sum(), MaxDuration = group.Select(row => row.Duration).Max() }).ToList(), "SELECT sum(duration) , max(duration) FROM trip WHERE bike_id = 636"),
(context.Weathers.Where(row => EF.Functions.Like(row.Date, "8/%")).GroupBy(row => new { row.ZipCode }).Select(group => new { group.Key.ZipCode, AverageMeanTemperatureF = group.Select(row => row.MeanTemperatureF).Average() }).ToList(), "SELECT zip_code , avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"),
(context.Trips.Select(row => row.BikeId).Distinct().Count(), "SELECT count(DISTINCT bike_id) FROM trip"),
(context.Stations.Select(row => row.City).Distinct().Count(), "SELECT count(DISTINCT city) FROM station"),
(context.Stations.Where(row => row.City == "Mountain View").Count(), "SELECT COUNT(*) FROM station WHERE city = \"Mountain View\""),
(context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BikesAvailable == 7).Select(row => new { row.T1.Name }).Distinct().ToList(), "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7"),
(context.Trips.Where(row => EF.Functions.Like(row.StartDate, "8/%")).GroupBy(row => new { row.StartStationName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StartStationName, group.First().StartStationId }).Take(1).ToList(), "SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"),
(context.Trips.Where(row => row.ZipCode == 94002).GroupBy(row => new { row.BikeId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BikeId }).Take(1).ToList(), "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1"),
(context.Weathers.Where(row => row.MeanHumidity > 50 && row.MeanVisibilityMiles > 8).Count(), "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8"),
(context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Duration).Select(row => new { row.T1.Lat, row.T1.Long, row.T1.City }).Take(1).ToList(), "SELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1"),
(context.Stations.Where(row => row.City == "San Francisco").Select(row => row.Id).Intersect(context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Average(row => row.BikesAvailable) > 10).Select(group => group.Key.StationId)).ToList(), "SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10"),
(context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StationId }).Where(group => group.Average(row => row.T2.BikesAvailable) > 14).Select(group => new { group.First().T1.Name, group.First().T1.Id }).Union(context.Stations.Where(row => EF.Functions.Like(row.InstallationDate, "12/%")).Select(row => new { row.Name, row.Id })).ToList(), "SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available) > 14 UNION SELECT name , id FROM station WHERE installation_date LIKE \"12/%\""),
(context.Weathers.Where(row => row.ZipCode == 94107).GroupBy(row => new { row.CloudCover }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CloudCover }).Take(3).ToList(), "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3"),
(context.Weathers.GroupBy(row => new { row.ZipCode }).OrderBy(group => group.Average(row => row.MeanSeaLevelPressureInches)).Select(group => new { group.Key.ZipCode }).Take(1).ToList(), "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1"),
(context.Statuses.Where(row => !context.Stations.Where(row => row.City == "Palo Alto").Select(row => row.Id).Contains(row.StationId)).Select(row => row.BikesAvailable).Average(), "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city = \"Palo Alto\")"),
(context.Stations.Where(row => !context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Max(row => row.BikesAvailable) > 10).Select(group => group.Key.StationId).Contains(row.Id)).Select(row => (double) row.Long).Average(), "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available) > 10)"),
(context.Weathers.Where(row => row.MaxTemperatureF >= 80).Select(row => new { row.Date, row.ZipCode }).ToList(), "SELECT date , zip_code FROM weather WHERE max_temperature_f >= 80"),
(context.Trips.Join(context.Weathers, T1 => T1.ZipCode, T2 => T2.ZipCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ZipCode }).Where(group => group.Average(row => row.T2.MeanTemperatureF) > 60).Select(group => new { group.First().T1.Id }).ToList(), "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f) > 60"),
(context.Weathers.Where(row => row.MaxWindSpeedMph >= 25).GroupBy(row => new { row.ZipCode }).Select(group => new { group.Key.ZipCode, Count = group.Count() }).ToList(), "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code"),
(context.Weathers.Where(row => row.MinDewPointF < context.Weathers.Where(row => row.ZipCode == 94107).Select(row => row.MinDewPointF).Min()).Select(row => new { row.Date, row.ZipCode }).ToList(), "SELECT date , zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)"),
(context.Trips.Join(context.Stations, T1 => T1.EndStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Id, row.T2.InstallationDate }).ToList(), "SELECT T1.id , T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id"),
(context.Trips.Join(context.Stations, T1 => T1.StartStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.DockCount).Select(row => new { row.T1.Id }).Take(1).ToList(), "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1"),
(context.Trips.Join(context.Stations, T1 => T1.EndStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City != "San Francisco").Count(), "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != \"San Francisco\""),
(context.Weathers.Where(row => row.ZipCode == 94107 && row.Events != "Fog" && row.Events != "Rain").Select(row => new { row.Date }).ToList(), "SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\""),
(context.Stations.Where(row => row.Lat > 37.4).Select(row => row.Id).Except(context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Min(row => row.BikesAvailable) < 7).Select(group => group.Key.StationId)).ToList(), "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available) < 7"),
(context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StationId }).Where(group => group.Average(row => row.T2.BikesAvailable) > 10).Select(group => group.First().T1.Name).Except(context.Stations.Where(row => row.City == "San Jose").Select(row => row.Name)).ToList(), "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\""),
(context.Stations.OrderBy(row => row.Lat).Select(row => new { row.Name, row.Lat, row.City }).Take(1).ToList(), "SELECT name , lat , city FROM station ORDER BY lat LIMIT 1"),
(context.Weathers.OrderByDescending(row => row.MaxGustSpeedMph).Select(row => new { row.Date, row.MeanTemperatureF, row.MeanHumidity }).Take(3).ToList(), "SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"),
(context.Stations.GroupBy(row => new { row.City }).Where(group => group.Count() >= 15).Select(group => new { group.Key.City, Count = group.Count() }).ToList(), "SELECT city , COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15"),
(context.Trips.GroupBy(row => new { row.StartStationName }).Where(group => group.Count() >= 200).Select(group => new { group.First().StartStationId, group.Key.StartStationName }).ToList(), "SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200"),
(context.Weathers.GroupBy(row => new { row.ZipCode }).Where(group => group.Average(row => row.MeanVisibilityMiles) < 10).Select(group => new { group.Key.ZipCode }).ToList(), "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles) < 10"),
(context.Stations.GroupBy(row => new { row.City }).OrderByDescending(group => group.Max(row => row.Lat)).Select(group => new { group.Key.City }).ToList(), "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC"),
(context.Weathers.OrderByDescending(row => row.CloudCover).Select(row => new { row.Date, row.CloudCover }).Take(5).ToList(), "SELECT date , cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5"),
(context.Trips.OrderByDescending(row => row.Duration).Select(row => new { row.Id, row.Duration }).Take(3).ToList(), "SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3"),
(context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StartStationId }).Select(group => new { group.First().T1.Name, group.First().T1.Long, AverageDuration = group.Select(row => row.T2.Duration).Average() }).ToList(), "SELECT T1.name , T1.long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id"),
(context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.EndStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.EndStationId }).Select(group => new { group.OrderBy(row => row.T2.Duration).First().T1.Name, group.OrderBy(row => row.T2.Duration).First().T1.Lat, MinDuration = group.Select(row => row.T2.Duration).Min() }).ToList(), "SELECT T1.name , T1.lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id"),
(context.Trips.Where(row => row.Duration < 100).Select(row => new { row.StartStationName }).Distinct().ToList(), "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100"),
(context.Weathers.Select(row => row.ZipCode).Distinct().Except(context.Weathers.Where(row => row.MaxDewPointF >= 70).Select(row => row.ZipCode).Distinct()).ToList(), "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70"),
(context.Trips.Where(row => row.Duration >= context.Trips.Where(row => row.ZipCode == 94103).Select(row => row.Duration).Average()).Select(row => new { row.Id }).ToList(), "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = 94103)"),
(context.Weathers.Where(row => row.MeanSeaLevelPressureInches >= 30.3 && row.MeanSeaLevelPressureInches <= 31).Select(row => new { row.Date }).ToList(), "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31"),
(context.Weathers.Select(row => new { row.Date, Diff = row.MaxTemperatureF - row.MinTemperatureF }).OrderBy(row => row.Diff).Take(1).ToList(), "SELECT date , max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1"),
(context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BikesAvailable > 12).Select(row => new { row.T1.Id, row.T1.Name }).Distinct().ToList(), "SELECT DISTINCT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12"),
(context.Weathers.GroupBy(row => new { row.ZipCode }).Where(group => group.Average(row => row.MeanHumidity) < 70).Select(group => group.Key.ZipCode).Intersect(context.Trips.GroupBy(row => new { row.ZipCode }).Where(group => group.Count() >= 100).Select(group => group.Key.ZipCode)).ToList(), "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*) >= 100"),
(context.Stations.Where(row => row.City == "Palo Alto").Select(row => row.Name).Except(context.Trips.GroupBy(row => new { row.EndStationName }).Where(group => group.Count() > 100).Select(group => group.Key.EndStationName)).ToList(), "SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 100"),
(context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).Join(context.Trips, joined => joined.T2.Id, T4 => T4.Id, (joined, T4) => new { joined.T1, joined.T2, T4 }).Join(context.Stations, joined => joined.T4.EndStationId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, joined.T4, T3 }).Where(row => row.T1.City == "Mountain View" && row.T3.City == "Palo Alto").Count(), "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = \"Mountain View\" AND T3.city = \"Palo Alto\""),
(context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => 1).Select(group => new { AverageLat = group.Select(row => row.T1.Lat).Average(), AverageLong = group.Select(row => row.T1.Long).Average() }).ToList(), "SELECT avg(T1.lat) , avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id"),
(context.Statuses.Where(row => !context.Stations.Where(row => row.City == "Palo Alto").Select(row => row.Id).Contains(row.StationId)).Select(row => row.BikesAvailable).Average(), "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city = \"Palo Alto\")"),
(context.Trips.Where(row => row.Duration >= context.Trips.Where(row => row.ZipCode == 94103).Select(row => row.Duration).Average()).Select(row => new { row.Id }).ToList(), "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = 94103)"),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestCreDocTrackingDbContext() { var context = new CreDocTrackingDbContext(); 
 var tests = new (object, string)[] {
(context.RefCalendars.Count(), "SELECT count(*) FROM Ref_calendar"),
(context.RefCalendars.Select(row => new { row.CalendarDate, row.DayNumber }).ToList(), "SELECT calendar_date , day_Number FROM Ref_calendar"),
(context.RefDocumentTypes.Count(), "SELECT count(*) FROM Ref_document_types"),
(context.RefDocumentTypes.Select(row => new { row.DocumentTypeCode, row.DocumentTypeName }).ToList(), "SELECT document_type_code , document_type_name FROM Ref_document_types"),
(context.RefDocumentTypes.Where(row => row.DocumentTypeCode == "RV").Select(row => new { row.DocumentTypeName, row.DocumentTypeDescription }).ToList(), "SELECT document_type_name , document_type_description FROM Ref_document_types WHERE document_type_code = \"RV\""),
(context.RefDocumentTypes.Where(row => row.DocumentTypeName == "Paper").Select(row => new { row.DocumentTypeCode }).ToList(), "SELECT document_type_code FROM Ref_document_types WHERE document_type_name = \"Paper\""),
(context.AllDocuments.Where(row => row.DocumentTypeCode == "CV" || row.DocumentTypeCode == "BK").Count(), "SELECT count(*) FROM All_documents WHERE document_type_code = \"CV\" OR document_type_code = \"BK\""),
(context.AllDocuments.Where(row => row.DocumentName == "Marry CV").Select(row => new { row.DateStored }).ToList(), "SELECT date_stored FROM All_documents WHERE Document_name = \"Marry CV\""),
(context.AllDocuments.Join(context.RefCalendars, T1 => T1.DateStored, T2 => T2.CalendarDate, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.DayNumber, row.T1.DateStored }).ToList(), "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date"),
(context.AllDocuments.Join(context.RefDocumentTypes, T1 => T1.DocumentTypeCode, T2 => T2.DocumentTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DocumentName == "How to read a book").Select(row => new { row.T2.DocumentTypeName }).ToList(), "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code WHERE T1.document_name = \"How to read a book\""),
(context.RefLocations.Count(), "SELECT count(*) FROM Ref_locations"),
(context.RefLocations.Select(row => new { row.LocationCode, row.LocationName }).ToList(), "SELECT location_code , location_name FROM Ref_locations"),
(context.RefLocations.Where(row => row.LocationCode == "x").Select(row => new { row.LocationName, row.LocationDescription }).ToList(), "SELECT location_name , location_description FROM Ref_locations WHERE location_code = \"x\""),
(context.RefLocations.Where(row => row.LocationName == "Canada").Select(row => new { row.LocationCode }).ToList(), "SELECT location_code FROM Ref_locations WHERE location_name = \"Canada\""),
(context.Roles.Count(), "SELECT count(*) FROM ROLES"),
(context.Roles.Select(row => new { row.RoleCode, row.RoleName, row.RoleDescription }).ToList(), "SELECT role_code , role_name , role_description FROM ROLES"),
(context.Roles.Where(row => row.RoleCode == "MG").Select(row => new { row.RoleName, row.RoleDescription }).ToList(), "SELECT role_name , role_description FROM ROLES WHERE role_code = \"MG\""),
(context.Roles.Where(row => row.RoleName == "Proof Reader").Select(row => new { row.RoleDescription }).ToList(), "SELECT role_description FROM ROLES WHERE role_name = \"Proof Reader\""),
(context.Employees.Count(), "SELECT count(*) FROM Employees"),
(context.Employees.Where(row => row.EmployeeName == "Armani").Select(row => new { row.EmployeeName, row.RoleCode, row.DateOfBirth }).ToList(), "SELECT employee_name , role_code , date_of_birth FROM Employees WHERE employee_Name = \'Armani\'"),
(context.Employees.Where(row => row.EmployeeName == "Ebba").Select(row => new { row.EmployeeId }).ToList(), "SELECT employee_ID FROM Employees WHERE employee_name = \"Ebba\""),
(context.Employees.Where(row => row.RoleCode == "HR").Select(row => new { row.EmployeeName }).ToList(), "SELECT employee_name FROM Employees WHERE role_code = \"HR\""),
(context.Employees.GroupBy(row => new { row.RoleCode }).Select(group => new { group.Key.RoleCode, Count = group.Count() }).ToList(), "SELECT role_code , count(*) FROM Employees GROUP BY role_code"),
(context.Employees.GroupBy(row => new { row.RoleCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.RoleCode }).Take(1).ToList(), "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"),
(context.Employees.GroupBy(row => new { row.RoleCode }).Where(group => group.Count() >= 3).Select(group => new { group.Key.RoleCode }).ToList(), "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*) >= 3"),
(context.Employees.GroupBy(row => new { row.RoleCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.RoleCode }).Take(1).ToList(), "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1"),
(context.Employees.Join(context.Roles, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.EmployeeName == "Ebba").Select(row => new { row.T2.RoleName, row.T2.RoleDescription }).ToList(), "SELECT T2.role_name , T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T1.employee_name = \"Ebba\""),
(context.Employees.Join(context.Roles, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.RoleName == "Editor").Select(row => new { row.T1.EmployeeName }).ToList(), "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = \"Editor\""),
(context.Employees.Join(context.Roles, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.RoleName == "Human Resource" || row.T2.RoleName == "Manager").Select(row => new { row.T1.EmployeeId }).ToList(), "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = \"Human Resource\" OR T2.role_name = \"Manager\""),
(context.DocumentLocations.Select(row => new { row.LocationCode }).Distinct().ToList(), "SELECT DISTINCT location_code FROM Document_locations"),
(context.AllDocuments.Join(context.DocumentLocations, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Join(context.RefLocations, joined => joined.T2.LocationCode, T3 => T3.LocationCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.DocumentName == "Robin CV").Select(row => new { row.T3.LocationName }).ToList(), "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = \"Robin CV\""),
(context.DocumentLocations.Select(row => new { row.LocationCode, row.DateInLocationFrom, row.DateInLocatonTo }).ToList(), "SELECT location_code , date_in_location_from , date_in_locaton_to FROM Document_locations"),
(context.DocumentLocations.Join(context.AllDocuments, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == "Robin CV").Select(row => new { row.T1.DateInLocationFrom, row.T1.DateInLocatonTo }).ToList(), "SELECT T1.date_in_location_from , T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Robin CV\""),
(context.DocumentLocations.GroupBy(row => new { row.LocationCode }).Select(group => new { group.Key.LocationCode, Count = group.Count() }).ToList(), "SELECT location_code , count(*) FROM Document_locations GROUP BY location_code"),
(context.DocumentLocations.GroupBy(row => new { row.LocationCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.LocationCode }).Take(1).ToList(), "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1"),
(context.DocumentLocations.GroupBy(row => new { row.LocationCode }).Where(group => group.Count() >= 3).Select(group => new { group.Key.LocationCode }).ToList(), "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*) >= 3"),
(context.DocumentLocations.Join(context.RefLocations, T1 => T1.LocationCode, T2 => T2.LocationCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.LocationCode }).OrderBy(group => group.Count()).Select(group => new { group.First().T2.LocationName, group.Key.LocationCode }).Take(1).ToList(), "SELECT T2.location_name , T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1"),
(context.DocumentsToBeDestroyeds.Join(context.Employees, T1 => T1.DestructionAuthorisedByEmployeeId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Join(context.Employees, joined => joined.T1.DestroyedByEmployeeId, T3 => T3.EmployeeId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { T2EmployeeName = row.T2.EmployeeName, T3EmployeeName = row.T3.EmployeeName }).ToList(), "SELECT T2.employee_name , T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;"),
(context.DocumentsToBeDestroyeds.GroupBy(row => new { row.DestructionAuthorisedByEmployeeId }).Select(group => new { group.Key.DestructionAuthorisedByEmployeeId, Count = group.Count() }).ToList(), "SELECT Destruction_Authorised_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID"),
(context.DocumentsToBeDestroyeds.GroupBy(row => new { row.DestroyedByEmployeeId }).Select(group => new { group.Key.DestroyedByEmployeeId, Count = group.Count() }).ToList(), "SELECT Destroyed_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID"),
(context.Employees.Select(row => row.EmployeeId).Except(context.DocumentsToBeDestroyeds.Select(row => row.DestructionAuthorisedByEmployeeId)).ToList(), "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"),
(context.DocumentsToBeDestroyeds.Select(row => new { row.DestructionAuthorisedByEmployeeId }).Distinct().ToList(), "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"),
(context.DocumentsToBeDestroyeds.Select(row => new { row.DestroyedByEmployeeId }).Distinct().ToList(), "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed"),
(context.Employees.Select(row => row.EmployeeId).Except(context.DocumentsToBeDestroyeds.Select(row => row.DestroyedByEmployeeId)).ToList(), "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed"),
(context.DocumentsToBeDestroyeds.Select(row => row.DestroyedByEmployeeId).Union(context.DocumentsToBeDestroyeds.Select(row => row.DestructionAuthorisedByEmployeeId)).ToList(), "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestCountyPublicSafetyContext() { var context = new CountyPublicSafetyContext(); 
 var tests = new (object, string)[] {
(context.CountyPublicSafeties.Count(), "SELECT count(*) FROM county_public_safety"),
(context.CountyPublicSafeties.OrderByDescending(row => row.Population).Select(row => new { row.Name }).ToList(), "SELECT Name FROM county_public_safety ORDER BY Population DESC"),
(context.CountyPublicSafeties.Where(row => row.Location != "East").Select(row => new { row.PoliceForce }).Distinct().ToList(), "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\""),
(context.CountyPublicSafeties.GroupBy(row => 1).Select(group => new { MinCrimeRate = group.Select(row => row.CrimeRate).Min(), MaxCrimeRate = group.Select(row => row.CrimeRate).Max() }).ToList(), "SELECT min(Crime_rate) , max(Crime_rate) FROM county_public_safety"),
(context.CountyPublicSafeties.OrderBy(row => row.PoliceOfficers).Select(row => new { row.CrimeRate }).ToList(), "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC"),
(context.Cities.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList(), "SELECT Name FROM city ORDER BY Name ASC"),
(context.Cities.Where(row => row.Black > 10).Select(row => new { row.Hispanic }).ToList(), "SELECT Hispanic FROM city WHERE Black > 10"),
(context.CountyPublicSafeties.OrderByDescending(row => row.Population).Select(row => new { row.Name }).Take(1).ToList(), "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"),
(context.Cities.OrderByDescending(row => row.White).Select(row => new { row.Name }).Take(5).ToList(), "SELECT Name FROM city ORDER BY White DESC LIMIT 5"),
(context.Cities.Join(context.CountyPublicSafeties, T1 => T1.CountyId, T2 => T2.CountyId, (T1, T2) => new { T1, T2 }).Select(row => new { T1Name = row.T1.Name, T2Name = row.T2.Name }).ToList(), "SELECT T1.Name , T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID"),
(context.Cities.Join(context.CountyPublicSafeties, T1 => T1.CountyId, T2 => T2.CountyId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.White, row.T2.CrimeRate }).ToList(), "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID"),
(context.Cities.Where(row => row.CountyId == context.CountyPublicSafeties.OrderByDescending(row => row.PoliceOfficers).Select(row => row.CountyId).Take(1).First()).Select(row => new { row.Name }).ToList(), "SELECT name FROM city WHERE county_ID = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)"),
(context.Cities.Where(row => context.CountyPublicSafeties.Where(row => row.Population > 20000).Select(row => row.CountyId).Contains(row.CountyId)).Count(), "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)"),
(context.Cities.Join(context.CountyPublicSafeties, T1 => T1.CountyId, T2 => T2.CountyId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.White > 90).Select(row => new { row.T2.CrimeRate }).ToList(), "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90"),
(context.CountyPublicSafeties.GroupBy(row => new { row.PoliceForce }).Select(group => new { group.Key.PoliceForce, Count = group.Count() }).ToList(), "SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force"),
(context.CountyPublicSafeties.GroupBy(row => new { row.Location }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Location }).Take(1).ToList(), "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"),
(context.CountyPublicSafeties.Where(row => !context.Cities.Select(row => row.CountyId).Contains(row.CountyId)).Select(row => new { row.Name }).ToList(), "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)"),
(context.CountyPublicSafeties.Where(row => row.Location == "East").Select(row => row.PoliceForce).Intersect(context.CountyPublicSafeties.Where(row => row.Location == "West").Select(row => row.PoliceForce)).ToList(), "SELECT Police_force FROM county_public_safety WHERE LOCATION = \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION = \"West\""),
(context.Cities.Where(row => context.CountyPublicSafeties.Where(row => row.CrimeRate < 100).Select(row => row.CountyId).Contains(row.CountyId)).Select(row => new { row.Name }).ToList(), "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)"),
(context.CountyPublicSafeties.OrderByDescending(row => row.Population).Select(row => new { row.CaseBurden }).ToList(), "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC"),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestCandidatePollContext() { var context = new CandidatePollContext(); 
 var tests = new (object, string)[] {
(context.Candidates.Count(), "SELECT count(*) FROM candidate"),
(context.Candidates.GroupBy(row => new { row.PollSource }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PollSource }).Take(1).ToList(), "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1"),
(context.Candidates.OrderByDescending(row => row.SupportRate).Select(row => new { row.SupportRate }).Take(3).ToList(), "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"),
(context.Candidates.OrderBy(row => row.OpposeRate).Select(row => new { row.CandidateId }).Take(1).ToList(), "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1"),
(context.Candidates.OrderBy(row => row.UnsureRate).Select(row => new { row.SupportRate, row.ConsiderRate, row.OpposeRate }).ToList(), "SELECT Support_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY unsure_rate"),
(context.Candidates.OrderByDescending(row => row.OpposeRate).Select(row => new { row.PollSource }).Take(1).ToList(), "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1"),
(context.People.OrderBy(row => row.DateOfBirth).Select(row => new { row.Name }).ToList(), "SELECT name FROM people ORDER BY date_of_birth"),
(context.People.Where(row => row.Sex == "M").GroupBy(row => 1).Select(group => new { AverageHeight = group.Select(row => row.Height).Average(), AverageWeight = group.Select(row => row.Weight).Average() }).ToList(), "SELECT avg(height) , avg(weight) FROM people WHERE sex = \'M\'"),
(context.People.Where(row => row.Height > 200 || row.Height < 190).Select(row => new { row.Name }).ToList(), "SELECT name FROM people WHERE height > 200 OR height < 190"),
(context.People.GroupBy(row => new { row.Sex }).Select(group => new { AverageWeight = group.Select(row => row.Weight).Average(), MinWeight = group.Select(row => row.Weight).Min(), group.Key.Sex }).ToList(), "SELECT avg(weight) , min(weight) , sex FROM people GROUP BY sex"),
(context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t2.SupportRate).Select(row => new { row.t1.Name, row.t1.Sex }).Take(1).ToList(), "SELECT t1.name , t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1"),
(context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.Sex }).Select(group => new { group.OrderBy(row => row.t2.OpposeRate).First().t1.Name, group.Key.Sex, MinOpposeRate = group.Select(row => row.t2.OpposeRate).Min() }).ToList(), "SELECT t1.name , t1.sex , min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex"),
(context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.Sex }).OrderByDescending(group => group.Average(row => row.t2.UnsureRate)).Select(group => new { group.Key.Sex }).Take(1).ToList(), "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1"),
(context.People.Where(row => !context.Candidates.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList(), "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)"),
(context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.SupportRate < row.t2.OpposeRate).Select(row => new { row.t1.Name }).ToList(), "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate < t2.oppose_rate"),
(context.People.Where(row => row.Weight > 85).GroupBy(row => new { row.Sex }).Select(group => new { Count = group.Count(), group.Key.Sex }).ToList(), "SELECT count(*) , sex FROM people WHERE weight > 85 GROUP BY sex"),
(context.Candidates.GroupBy(row => 1).Select(group => new { MaxSupportRate = group.Select(row => row.SupportRate).Max(), MinConsiderRate = group.Select(row => row.ConsiderRate).Min(), MinOpposeRate = group.Select(row => row.OpposeRate).Min() }).ToList(), "SELECT max(support_rate) , min(consider_rate) , min(oppose_rate) FROM candidate"),
(context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Sex == "F").OrderBy(row => row.t1.Name).Select(row => new { row.t1.Name }).ToList(), "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = \'F\' ORDER BY t1.name"),
(context.People.Where(row => row.Height < context.People.Select(row => (double) row.Height).Average()).Select(row => new { row.Name }).ToList(), "SELECT name FROM people WHERE height < (SELECT avg(height) FROM people)"),
(context.People.ToList(), "SELECT * FROM people"),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestClimbingContext() { var context = new ClimbingContext(); 
 var tests = new (object, string)[] {
(context.Climbers.Count(), "SELECT count(*) FROM climber"),
(context.Climbers.OrderByDescending(row => row.Points).Select(row => new { row.Name }).ToList(), "SELECT Name FROM climber ORDER BY Points DESC"),
(context.Climbers.Where(row => row.Country != "Switzerland").Select(row => new { row.Name }).ToList(), "SELECT Name FROM climber WHERE Country != \"Switzerland\""),
(context.Climbers.Where(row => row.Country == "United Kingdom").Select(row => row.Points).Max(), "SELECT max(Points) FROM climber WHERE Country = \"United Kingdom\""),
(context.Climbers.Select(row => row.Country).Distinct().Count(), "SELECT COUNT(DISTINCT Country) FROM climber"),
(context.Mountains.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList(), "SELECT Name FROM mountain ORDER BY Name ASC"),
(context.Mountains.Where(row => row.Height > 5000).Select(row => new { row.Country }).ToList(), "SELECT Country FROM mountain WHERE Height > 5000"),
(context.Mountains.OrderByDescending(row => row.Height).Select(row => new { row.Name }).Take(1).ToList(), "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"),
(context.Mountains.OrderByDescending(row => row.Prominence).Select(row => new { row.Range }).Distinct().Take(3).ToList(), "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3"),
(context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Select(row => new { T1Name = row.T1.Name, T2Name = row.T2.Name }).ToList(), "SELECT T1.Name , T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID"),
(context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name, row.T2.Height }).ToList(), "SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID"),
(context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Points).Select(row => new { row.T2.Height }).Take(1).ToList(), "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1"),
(context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Country == "West Germany").Select(row => new { row.T2.Name }).Distinct().ToList(), "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = \"West Germany\""),
(context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country == "Uganda").Select(row => new { row.T1.Time }).ToList(), "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = \"Uganda\""),
(context.Climbers.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList(), "SELECT Country , COUNT(*) FROM climber GROUP BY Country"),
(context.Mountains.GroupBy(row => new { row.Country }).Where(group => group.Count() > 1).Select(group => new { group.Key.Country }).ToList(), "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1"),
(context.Mountains.Where(row => !context.Climbers.Select(row => row.MountainId).Contains(row.MountainId)).Select(row => new { row.Name }).ToList(), "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)"),
(context.Mountains.Where(row => row.Height > 5600).Select(row => row.Country).Intersect(context.Mountains.Where(row => row.Height < 5200).Select(row => row.Country)).ToList(), "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200"),
(context.Mountains.GroupBy(row => new { row.Range }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Range }).Take(1).ToList(), "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1"),
(context.Mountains.Where(row => row.Height > 5000 || row.Prominence > 1000).Select(row => new { row.Name }).ToList(), "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000"),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestBrowserWebContext() { var context = new BrowserWebContext(); 
 var tests = new (object, string)[] {
(context.Browsers.Where(row => row.MarketShare >= 5).Count(), "SELECT count(*) FROM browser WHERE market_share >= 5"),
(context.Browsers.OrderByDescending(row => row.MarketShare).Select(row => new { row.Name }).ToList(), "SELECT name FROM browser ORDER BY market_share DESC"),
(context.Browsers.Select(row => new { row.Id, row.Name, row.MarketShare }).ToList(), "SELECT id , name , market_share FROM browser"),
(context.Browsers.GroupBy(row => 1).Select(group => new { MaxMarketShare = group.Select(row => row.MarketShare).Max(), MinMarketShare = group.Select(row => row.MarketShare).Min(), AverageMarketShare = group.Select(row => row.MarketShare).Average() }).ToList(), "SELECT max(market_share) , min(market_share) , avg(market_share) FROM browser"),
(context.Browsers.Where(row => row.Name == "Safari").Select(row => new { row.Id, row.MarketShare }).ToList(), "SELECT id , market_share FROM browser WHERE name = \'Safari\'"),
(context.WebClientAccelerators.Where(row => row.Connection != "Broadband").Select(row => new { row.Name, row.OperatingSystem }).ToList(), "SELECT name , operating_system FROM web_client_accelerator WHERE CONNECTION != \'Broadband\'"),
(context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T2.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == "CProxy" && row.T2.CompatibleSinceYear > 1998).Select(row => new { row.T1.Name }).ToList(), "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = \'CProxy\' AND T2.compatible_since_year > 1998"),
(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList(), "SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count(*) >= 2"),
(context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name }).Take(1).ToList(), "SELECT T1.id , T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"),
(context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == "CACHEbox" && row.T2.Name == "Internet Explorer").Select(row => new { row.T1.CompatibleSinceYear }).ToList(), "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = \'CACHEbox\' AND T2.name = \'Internet Explorer\'"),
(context.WebClientAccelerators.Select(row => row.Client).Distinct().Count(), "SELECT count(DISTINCT client) FROM web_client_accelerator"),
(context.WebClientAccelerators.Where(row => !context.AcceleratorCompatibleBrowsers.Select(row => row.AcceleratorId).Contains(row.Id)).Count(), "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );"),
(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.MarketShare > 15).Select(row => new { row.T1.Name }).Distinct().ToList(), "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15;"),
(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == "CACHEbox").Select(row => row.T3.Name).Intersect(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == "Fasterfox").Select(row => row.T3.Name)).ToList(), "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = \'CACHEbox\' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = \'Fasterfox\'"),
(context.WebClientAccelerators.Select(row => new { row.Name, row.OperatingSystem }).Except(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == "Opera").Select(row => new { row.T1.Name, row.T1.OperatingSystem })).ToList(), "SELECT name , operating_system FROM web_client_accelerator EXCEPT SELECT T1.name , T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = \'Opera\'"),
(context.WebClientAccelerators.Where(row => EF.Functions.Like(row.Name, "%Opera%")).Select(row => new { row.Name }).ToList(), "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\""),
(context.WebClientAccelerators.GroupBy(row => new { row.OperatingSystem }).Select(group => new { group.Key.OperatingSystem, Count = group.Count() }).ToList(), "SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system"),
(context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T1.CompatibleSinceYear).Select(row => new { T2Name = row.T2.Name, T3Name = row.T3.Name }).ToList(), "SELECT T2.name , T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id ORDER BY T1.compatible_since_year DESC"),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestCinemaContext() { var context = new CinemaContext(); 
 var tests = new (object, string)[] {
(context.Cinemas.Select(row => row.Location).Except(context.Cinemas.Where(row => row.Capacity > 800).Select(row => row.Location)).ToList(), "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800"),
(context.Cinemas.Where(row => row.OpenningYear == 2010).Select(row => row.Location).Intersect(context.Cinemas.Where(row => row.OpenningYear == 2011).Select(row => row.Location)).ToList(), "SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011"),
(context.Cinemas.Count(), "SELECT count(*) FROM cinema"),
(context.Cinemas.Select(row => new { row.Name, row.OpenningYear, row.Capacity }).ToList(), "SELECT name , openning_year , capacity FROM cinema"),
(context.Cinemas.Where(row => row.Capacity > context.Cinemas.Select(row => row.Capacity).Average()).Select(row => new { row.Name, row.Location }).ToList(), "SELECT name , LOCATION FROM cinema WHERE capacity > (SELECT avg(capacity) FROM cinema)"),
(context.Cinemas.Select(row => new { row.Location }).Distinct().ToList(), "SELECT DISTINCT LOCATION FROM cinema"),
(context.Cinemas.OrderByDescending(row => row.OpenningYear).Select(row => new { row.Name, row.OpenningYear }).ToList(), "SELECT name , openning_year FROM cinema ORDER BY openning_year DESC"),
(context.Cinemas.OrderByDescending(row => row.Capacity).Select(row => new { row.Name, row.Location }).Take(1).ToList(), "SELECT name , LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1"),
(context.Cinemas.Where(row => row.OpenningYear >= 2011).GroupBy(row => 1).Select(group => new { AverageCapacity = group.Select(row => row.Capacity).Average(), MinCapacity = group.Select(row => row.Capacity).Min(), MaxCapacity = group.Select(row => row.Capacity).Max() }).ToList(), "SELECT avg(capacity) , min(capacity) , max(capacity) FROM cinema WHERE openning_year >= 2011"),
(context.Cinemas.GroupBy(row => new { row.Location }).Select(group => new { group.Key.Location, Count = group.Count() }).ToList(), "SELECT LOCATION , count(*) FROM cinema GROUP BY LOCATION"),
(context.Cinemas.Where(row => row.OpenningYear >= 2010).GroupBy(row => new { row.Location }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Location }).Take(1).ToList(), "SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1"),
(context.Cinemas.Where(row => row.Capacity > 300).GroupBy(row => new { row.Location }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Location }).ToList(), "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) >= 2"),
(context.Films.Select(row => new { row.Title, row.DirectedBy }).ToList(), "SELECT title , directed_by FROM film"),
(context.Films.Select(row => new { row.DirectedBy }).Distinct().ToList(), "SELECT DISTINCT directed_by FROM film"),
(context.Films.GroupBy(row => new { row.DirectedBy }).Select(group => new { group.Key.DirectedBy, Count = group.Count() }).ToList(), "SELECT directed_by , count(*) FROM film GROUP BY directed_by"),
(context.Schedules.Join(context.Cinemas, T1 => T1.CinemaId, T2 => T2.CinemaId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CinemaId }).Select(group => new { group.First().T2.Name, SumShowTimesPerDay = group.Select(row => row.T1.ShowTimesPerDay).Sum() }).ToList(), "SELECT T2.name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id"),
(context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FilmId }).Select(group => new { group.OrderByDescending(row => row.T1.Price).First().T2.Title, MaxPrice = group.Select(row => row.T1.Price).Max() }).ToList(), "SELECT T2.title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id"),
(context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).Join(context.Cinemas, joined => joined.T1.CinemaId, T3 => T3.CinemaId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Name, row.T2.Title, row.T1.Date, row.T1.Price }).ToList(), "SELECT T3.name , T2.title , T1.date , T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id"),
(context.Films.Where(row => !context.Schedules.Select(row => row.FilmId).Contains(row.FilmId)).Select(row => new { row.Title, row.DirectedBy }).ToList(), "SELECT title , directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)"),
(context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DirectedBy }).OrderByDescending(group => group.Sum(row => row.T1.ShowTimesPerDay)).Select(group => new { group.Key.DirectedBy }).Take(1).ToList(), "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1"),
(context.Cinemas.Where(row => row.Capacity > 300).GroupBy(row => new { row.Location }).Where(group => group.Count() > 1).Select(group => new { group.Key.Location }).ToList(), "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) > 1"),
(context.Films.Where(row => EF.Functions.Like(row.Title, "%Dummy%")).Count(), "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\""),
(context.Cinemas.Where(row => row.Capacity > context.Cinemas.Select(row => row.Capacity).Average()).Select(row => new { row.Name, row.Location }).ToList(), "SELECT name , LOCATION FROM cinema WHERE capacity > (SELECT avg(capacity) FROM cinema)"),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestCompany1Context() { var context = new Company1Context(); 
 var tests = new (object, string)[] {
(context.Departments.OrderBy(row => row.MgrStartDate).Select(row => new { row.Dname }).ToList(), "SELECT dname FROM department ORDER BY mgr_start_date"),
(context.Dependents.Where(row => row.Relationship == "Spouse").Select(row => new { row.DependentName }).ToList(), "SELECT Dependent_name FROM dependent WHERE relationship = \'Spouse\'"),
(context.Dependents.Where(row => row.Sex == "F").Count(), "SELECT count(*) FROM dependent WHERE sex = \'F\'"),
(context.Departments.Join(context.DeptLocations, t1 => t1.Dnumber, t2 => t2.Dnumber, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Dlocation == "Houston").Select(row => new { row.t1.Dname }).ToList(), "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber WHERE t2.dlocation = \'Houston\'"),
(context.Employees.Where(row => row.Salary > 30000).Select(row => new { row.Fname, row.Lname }).ToList(), "SELECT fname , lname FROM employee WHERE salary > 30000"),
(context.Employees.Where(row => row.Salary < 50000).GroupBy(row => new { row.Sex }).Select(group => new { Count = group.Count(), group.Key.Sex }).ToList(), "SELECT count(*) , sex FROM employee WHERE salary < 50000 GROUP BY sex"),
(context.Employees.OrderBy(row => row.Bdate).Select(row => new { row.Fname, row.Lname, row.Address }).ToList(), "SELECT fname , lname , address FROM employee ORDER BY Bdate"),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestCreDocsAndEpensesContext() { var context = new CreDocsAndEpensesContext(); 
 var tests = new (object, string)[] {
(context.Accounts.Count(), "SELECT count(*) FROM Accounts"),
(context.Accounts.Select(row => new { row.AccountId, row.AccountDetails }).ToList(), "SELECT account_id , account_details FROM Accounts"),
(context.Statements.Count(), "SELECT count(*) FROM Statements"),
(context.Statements.Select(row => new { row.StatementId, row.StatementDetails }).ToList(), "SELECT STATEMENT_ID , statement_details FROM Statements"),
(context.Accounts.Join(context.Statements, T1 => T1.StatementId, T2 => T2.StatementId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.StatementId, row.T2.StatementDetails, row.T1.AccountDetails }).ToList(), "SELECT T1.statement_id , T2.statement_details , T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id"),
(context.Accounts.GroupBy(row => new { row.StatementId }).Select(group => new { group.Key.StatementId, Count = group.Count() }).ToList(), "SELECT STATEMENT_ID , count(*) FROM Accounts GROUP BY STATEMENT_ID"),
(context.Accounts.Join(context.Statements, T1 => T1.StatementId, T2 => T2.StatementId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StatementId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StatementId, group.First().T2.StatementDetails }).Take(1).ToList(), "SELECT T1.statement_id , T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1"),
(context.Documents.Count(), "SELECT count(*) FROM Documents"),
(context.Documents.Where(row => row.DocumentName == "Noel CV" || row.DocumentName == "King Book").Select(row => new { row.DocumentTypeCode, row.DocumentName, row.DocumentDescription }).ToList(), "SELECT document_type_code , document_name , document_description FROM Documents WHERE document_name = \'Noel CV\' OR document_name = \'King Book\'"),
(context.Documents.Select(row => new { row.DocumentId, row.DocumentName }).ToList(), "SELECT document_id , document_name FROM Documents"),
(context.Documents.Where(row => row.DocumentTypeCode == "BK").Select(row => new { row.DocumentName, row.DocumentId }).ToList(), "SELECT document_name , document_id FROM Documents WHERE document_type_code = \"BK\""),
(context.Documents.Where(row => row.DocumentTypeCode == "BK").GroupBy(row => new { row.ProjectId }).Select(group => new { Count = group.Count(), group.Key.ProjectId }).ToList(), "SELECT count(*) , project_id FROM Documents WHERE document_type_code = \"BK\" GROUP BY project_id"),
(context.Documents.Join(context.Projects, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ProjectDetails == "Graph Database project").Select(row => new { row.T1.DocumentName, row.T1.DocumentDate }).ToList(), "SELECT document_name , document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = \'Graph Database project\'"),
(context.Documents.GroupBy(row => new { row.ProjectId }).Select(group => new { group.Key.ProjectId, Count = group.Count() }).ToList(), "SELECT project_id , count(*) FROM Documents GROUP BY project_id"),
(context.Documents.GroupBy(row => new { row.ProjectId }).OrderBy(group => group.Count()).Select(group => new { group.Key.ProjectId }).Take(1).ToList(), "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1"),
(context.Documents.GroupBy(row => new { row.ProjectId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProjectId }).ToList(), "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*) >= 2"),
(context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Select(group => new { group.Key.DocumentTypeCode, Count = group.Count() }).ToList(), "SELECT document_type_code , count(*) FROM Documents GROUP BY document_type_code"),
(context.Documents.GroupBy(row => new { row.DocumentTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DocumentTypeCode }).Take(1).ToList(), "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"),
(context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Where(group => group.Count() < 3).Select(group => new { group.Key.DocumentTypeCode }).ToList(), "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*) < 3"),
(context.Statements.Join(context.Documents, T1 => T1.StatementId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StatementDetails == "Private Project").Select(row => new { row.T1.StatementDetails, row.T2.DocumentName }).ToList(), "SELECT T1.statement_details , T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id = T2.document_id WHERE T1.statement_details = \'Private Project\'"),
(context.RefDocumentTypes.Select(row => new { row.DocumentTypeCode, row.DocumentTypeName, row.DocumentTypeDescription }).ToList(), "SELECT document_type_code , document_type_name , document_type_description FROM Ref_document_types"),
(context.RefDocumentTypes.Where(row => row.DocumentTypeName == "Film").Select(row => new { row.DocumentTypeDescription }).ToList(), "SELECT document_type_description FROM Ref_document_types WHERE document_type_name = \"Film\""),
(context.RefDocumentTypes.Join(context.Documents, T1 => T1.DocumentTypeCode, T2 => T2.DocumentTypeCode, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.DocumentTypeName, row.T1.DocumentTypeDescription, row.T2.DocumentDate }).ToList(), "SELECT T1.document_type_name , T1.document_type_description , T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code"),
(context.Projects.Count(), "SELECT count(*) FROM Projects"),
(context.Projects.Select(row => new { row.ProjectId, row.ProjectDetails }).ToList(), "SELECT project_id , project_details FROM Projects"),
(context.Projects.Join(context.Documents, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProjectId }).Where(group => group.Count() > 2).Select(group => new { group.Key.ProjectId, group.First().T1.ProjectDetails }).ToList(), "SELECT T1.project_id , T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING count(*) > 2"),
(context.Projects.Join(context.Documents, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == "King Book").Select(row => new { row.T1.ProjectDetails }).ToList(), "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id WHERE T2.document_name = \"King Book\""),
(context.RefBudgetCodes.Count(), "SELECT count(*) FROM Ref_budget_codes"),
(context.RefBudgetCodes.Select(row => new { row.BudgetTypeCode, row.BudgetTypeDescription }).ToList(), "SELECT budget_type_code , budget_type_description FROM Ref_budget_codes"),
(context.RefBudgetCodes.Where(row => row.BudgetTypeCode == "ORG").Select(row => new { row.BudgetTypeDescription }).ToList(), "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code = \"ORG\""),
(context.DocumentsWithExpenses.Count(), "SELECT count(*) FROM Documents_with_expenses"),
(context.DocumentsWithExpenses.Where(row => row.BudgetTypeCode == "SF").Select(row => new { row.DocumentId }).ToList(), "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code = \'SF\'"),
(context.DocumentsWithExpenses.Join(context.RefBudgetCodes, T1 => T1.BudgetTypeCode, T2 => T2.BudgetTypeCode, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.BudgetTypeCode, row.T2.BudgetTypeDescription, row.T1.DocumentId }).ToList(), "SELECT T2.budget_type_code , T2.budget_type_description , T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code"),
(context.DocumentsWithExpenses.Join(context.RefBudgetCodes, T1 => T1.BudgetTypeCode, T2 => T2.BudgetTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeDescription == "Government").Select(row => new { row.T1.DocumentId }).ToList(), "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE T2.budget_type_Description = \"Government\""),
(context.DocumentsWithExpenses.GroupBy(row => new { row.BudgetTypeCode }).Select(group => new { group.Key.BudgetTypeCode, Count = group.Count() }).ToList(), "SELECT budget_type_code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code"),
(context.DocumentsWithExpenses.GroupBy(row => new { row.BudgetTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BudgetTypeCode }).Take(1).ToList(), "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1"),
(context.Documents.Select(row => row.DocumentId).Except(context.DocumentsWithExpenses.Select(row => row.DocumentId)).ToList(), "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses"),
(context.Documents.Where(row => row.DocumentTypeCode == "CV").Select(row => row.DocumentId).Except(context.DocumentsWithExpenses.Select(row => row.DocumentId)).ToList(), "SELECT document_id FROM Documents WHERE document_type_code = \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses"),
(context.Documents.Join(context.DocumentsWithExpenses, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.DocumentName, "%s%")).Select(row => new { row.T1.DocumentId }).ToList(), "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name LIKE \'%s%\'"),
(context.Documents.Where(row => !context.DocumentsWithExpenses.Select(row => row.DocumentId).Contains(row.DocumentId)).Count(), "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )"),
(context.Documents.Join(context.DocumentsWithExpenses, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeCode == "GV").Select(row => row.T1.DocumentDate).Intersect(context.Documents.Join(context.DocumentsWithExpenses, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeCode == "SF").Select(row => row.T1.DocumentDate)).ToList(), "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = \'GV\' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = \'SF\'"),
(new List<string> { context.Accounts.Select(row => row.AccountDetails.ToString()).Max() }.Union(context.Accounts.Where(row => EF.Functions.Like(row.AccountDetails.ToString(), "%5%")).Select(row => row.AccountDetails.ToString())).ToList(), "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\""),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestCsu1Context() { var context = new Csu1Context(); 
 var tests = new (object, string)[] {
(context.Campuses.Where(row => row.County == "Los Angeles").Select(row => new { row.Campus1 }).ToList(), "SELECT campus FROM campuses WHERE county = \"Los Angeles\""),
(context.Campuses.Where(row => row.Location == "Chico").Select(row => new { row.Campus1 }).ToList(), "SELECT campus FROM campuses WHERE LOCATION = \"Chico\""),
(context.Campuses.Where(row => row.Year == 1958).Select(row => new { row.Campus1 }).ToList(), "SELECT campus FROM campuses WHERE YEAR = 1958"),
(context.Campuses.Where(row => row.Year < 1800).Select(row => new { row.Campus1 }).ToList(), "SELECT campus FROM campuses WHERE YEAR < 1800"),
(context.Campuses.Where(row => row.Year >= 1935 && row.Year <= 1939).Select(row => new { row.Campus1 }).ToList(), "SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939"),
(context.Campuses.Where(row => row.Location == "Northridge" && row.County == "Los Angeles").Select(row => row.Campus1).Union(context.Campuses.Where(row => row.Location == "San Francisco" && row.County == "San Francisco").Select(row => row.Campus1)).ToList(), "SELECT campus FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION = \"San Francisco\" AND county = \"San Francisco\""),
(context.Campuses.Join(context.CsuFees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == "San Jose State University" && row.T2.Year == 1996).Select(row => new { row.T2.CampusFee }).ToList(), "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND T2.year = 1996"),
(context.Campuses.Join(context.CsuFees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == "San Francisco State University" && row.T2.Year == 1996).Select(row => new { row.T2.CampusFee }).ToList(), "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND T2.year = 1996"),
(context.CsuFees.Where(row => row.CampusFee > context.CsuFees.Select(row => row.CampusFee).Average()).Count(), "SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)"),
(context.Campuses.Where(row => row.County == "Los Angeles" && row.Year > 1950).Select(row => new { row.Campus1 }).ToList(), "SELECT campus FROM campuses WHERE county = \"Los Angeles\" AND YEAR > 1950"),
(context.Degrees.GroupBy(row => new { row.Year }).OrderByDescending(group => group.Sum(row => row.Degrees)).Select(group => new { group.Key.Year }).Take(1).ToList(), "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1"),
(context.Degrees.GroupBy(row => new { row.Campus }).OrderByDescending(group => group.Sum(row => row.Degrees)).Select(group => new { group.Key.Campus }).Take(1).ToList(), "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1"),
(context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2003).OrderByDescending(row => row.T2.Faculty1).Select(row => new { row.T1.Campus1 }).Take(1).ToList(), "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 ORDER BY T2.faculty DESC LIMIT 1"),
(context.CsuFees.Where(row => row.CampusFee > context.CsuFees.Select(row => row.CampusFee).Average()).Count(), "SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)"),
(context.CsuFees.Where(row => row.Year == 1996).Select(row => row.CampusFee).Average(), "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 1996"),
(context.CsuFees.Where(row => row.Year == 2005).Select(row => row.CampusFee).Average(), "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 2005"),
(context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year >= 1998 && row.T2.Year <= 2002).GroupBy(row => new { row.T1.Campus1 }).Select(group => new { group.Key.Campus1, SumDegrees = group.Select(row => row.T2.Degrees).Sum() }).ToList(), "SELECT T1.campus , sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T2.year >= 1998 AND T2.year <= 2002 GROUP BY T1.campus"),
(context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.County == "Orange" && row.T2.Year >= 2000).GroupBy(row => new { row.T1.Campus1 }).Select(group => new { group.Key.Campus1, SumDegrees = group.Select(row => row.T2.Degrees).Sum() }).ToList(), "SELECT T1.campus , sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T1.county = \"Orange\" AND T2.year >= 2000 GROUP BY T1.campus"),
(context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2002 && row.T2.Faculty1 > context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2002 && row.T1.County == "Orange").Select(row => row.T2.Faculty1).Max()).Select(row => new { row.T1.Campus1 }).ToList(), "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND faculty > (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = \"Orange\")"),
(context.Campuses.Join(context.Enrollments, t1 => t1.Id, t2 => t2.Campus, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Year == 1956 && row.t2.TotalEnrollmentAy > 400 && row.t2.FteAy > 200).Select(row => new { row.t1.Campus1 }).ToList(), "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200"),
(context.Campuses.Where(row => row.County == "Los Angeles").Count(), "SELECT count(*) FROM campuses WHERE county = \"Los Angeles\""),
(context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == "San Jose State University" && row.T2.Year == 2000).Select(row => new { row.T2.Degrees }).ToList(), "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 2000"),
(context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == "San Francisco State University" && row.T2.Year == 2001).Select(row => new { row.T2.Degrees }).ToList(), "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND t2.year = 2001"),
(context.Faculties.Where(row => row.Year == 2002).Select(row => row.Faculty1).Sum(), "SELECT sum(faculty) FROM faculty WHERE YEAR = 2002"),
(context.Faculties.Join(context.Campuses, T1 => T1.Campus, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2002 && row.T2.Campus1 == "Long Beach State University").Select(row => new { row.T1.Faculty1 }).ToList(), "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2002 AND T2.campus = \"Long Beach State University\""),
(context.Faculties.Join(context.Campuses, T1 => T1.Campus, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2004 && row.T2.Campus1 == "San Francisco State University").Select(row => new { row.T1.Faculty1 }).ToList(), "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2004 AND T2.campus = \"San Francisco State University\""),
(context.Campuses.Join(context.Faculties, t1 => t1.Id, t2 => t2.Campus, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Faculty1 >= 600 && row.t2.Faculty1 <= 1000 && row.t1.Year == 2004).Select(row => new { row.t1.Campus1 }).ToList(), "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T1.year = 2004"),
(context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Join(context.Degrees, joined => new { Pair1 = joined.T1.Id, Pair2 = joined.T2.Year }, T3 => new { Pair1 = T3.Campus, Pair2 = T3.Year }, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Year == 2002).OrderByDescending(row => row.T3.Degrees).Select(row => new { row.T2.Faculty1 }).Take(1).ToList(), "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1"),
(context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Join(context.Degrees, joined => new { Pair1 = joined.T1.Id, Pair2 = joined.T2.Year }, T3 => new { Pair1 = T3.Campus, Pair2 = T3.Year }, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Year == 2001).OrderBy(row => row.T3.Degrees).Select(row => new { row.T2.Faculty1 }).Take(1).ToList(), "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2001 ORDER BY t3.degrees LIMIT 1"),
(context.DisciplineEnrollments.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Year == 2004 && row.t2.Campus1 == "San Jose State University").Select(row => row.t1.Undergraduate).Sum(), "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Jose State University\""),
(context.DisciplineEnrollments.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Year == 2004 && row.t2.Campus1 == "San Francisco State University").Select(row => row.t1.Graduate).Sum(), "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Francisco State University\""),
(context.CsuFees.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Campus1 == "San Francisco State University" && row.t1.Year == 2000).Select(row => new { row.t1.CampusFee }).ToList(), "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Francisco State University\" AND t1.year = 2000"),
(context.CsuFees.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Campus1 == "San Jose State University" && row.t1.Year == 2000).Select(row => new { row.t1.CampusFee }).ToList(), "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Jose State University\" AND t1.year = 2000"),
(context.Campuses.Count(), "SELECT count(*) FROM campuses"),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestAllergy1Context() { var context = new Allergy1Context(); 
 var tests = new (object, string)[] {
(context.AllergyTypes.Select(row => row.Allergy).Distinct().Count(), "SELECT count(DISTINCT allergy) FROM Allergy_type"),
(context.AllergyTypes.Select(row => row.AllergyType1).Distinct().Count(), "SELECT count(DISTINCT allergytype) FROM Allergy_type"),
(context.AllergyTypes.Select(row => new { row.AllergyType1 }).Distinct().ToList(), "SELECT DISTINCT allergytype FROM Allergy_type"),
(context.AllergyTypes.Select(row => new { row.Allergy, row.AllergyType1 }).ToList(), "SELECT allergy , allergytype FROM Allergy_type"),
(context.AllergyTypes.Where(row => row.AllergyType1 == "food").Select(row => new { row.Allergy }).Distinct().ToList(), "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = \"food\""),
(context.AllergyTypes.Where(row => row.Allergy == "Cat").Select(row => new { row.AllergyType1 }).ToList(), "SELECT allergytype FROM Allergy_type WHERE allergy = \"Cat\""),
(context.AllergyTypes.Where(row => row.AllergyType1 == "animal").Count(), "SELECT count(*) FROM Allergy_type WHERE allergytype = \"animal\""),
(context.AllergyTypes.GroupBy(row => new { row.AllergyType1 }).Select(group => new { group.Key.AllergyType1, Count = group.Count() }).ToList(), "SELECT allergytype , count(*) FROM Allergy_type GROUP BY allergytype"),
(context.AllergyTypes.GroupBy(row => new { row.AllergyType1 }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AllergyType1 }).Take(1).ToList(), "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1"),
(context.AllergyTypes.GroupBy(row => new { row.AllergyType1 }).OrderBy(group => group.Count()).Select(group => new { group.Key.AllergyType1 }).Take(1).ToList(), "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1"),
(context.Students.Count(), "SELECT count(*) FROM Student"),
(context.Students.Select(row => new { row.Fname, row.Lname }).ToList(), "SELECT Fname , Lname FROM Student"),
(context.Students.Select(row => row.Advisor).Distinct().Count(), "SELECT count(DISTINCT advisor) FROM Student"),
(context.Students.Select(row => new { row.Major }).Distinct().ToList(), "SELECT DISTINCT Major FROM Student"),
(context.Students.Select(row => new { row.CityCode }).Distinct().ToList(), "SELECT DISTINCT city_code FROM Student"),
(context.Students.Where(row => row.Sex == "F").Select(row => new { row.Fname, row.Lname, row.Age }).ToList(), "SELECT Fname , Lname , Age FROM Student WHERE Sex = \'F\'"),
(context.Students.Where(row => row.Sex == "M").Select(row => new { row.StuId }).ToList(), "SELECT StuID FROM Student WHERE Sex = \'M\'"),
(context.Students.Where(row => row.Age == 18).Count(), "SELECT count(*) FROM Student WHERE age = 18"),
(context.Students.Where(row => row.Age > 20).Select(row => new { row.StuId }).ToList(), "SELECT StuID FROM Student WHERE age > 20"),
(context.Students.Where(row => row.Lname == "Kim").Select(row => new { row.CityCode }).ToList(), "SELECT city_code FROM Student WHERE LName = \"Kim\""),
(context.Students.Where(row => row.StuId == 1004).Select(row => new { row.Advisor }).ToList(), "SELECT Advisor FROM Student WHERE StuID = 1004"),
(context.Students.Where(row => row.CityCode == "HKG" || row.CityCode == "CHI").Count(), "SELECT count(*) FROM Student WHERE city_code = \"HKG\" OR city_code = \"CHI\""),
(context.Students.GroupBy(row => 1).Select(group => new { MinAge = group.Select(row => row.Age).Min(), AverageAge = group.Select(row => row.Age).Average(), MaxAge = group.Select(row => row.Age).Max() }).ToList(), "SELECT min(age) , avg(age) , max(age) FROM Student"),
(context.Students.Where(row => row.Age == context.Students.Select(row => row.Age).Min()).Select(row => new { row.Lname }).ToList(), "SELECT LName FROM Student WHERE age = (SELECT min(age) FROM Student)"),
(context.Students.Where(row => row.Age == context.Students.Select(row => row.Age).Max()).Select(row => new { row.StuId }).ToList(), "SELECT StuID FROM Student WHERE age = (SELECT max(age) FROM Student)"),
(context.Students.GroupBy(row => new { row.Major }).Select(group => new { group.Key.Major, Count = group.Count() }).ToList(), "SELECT major , count(*) FROM Student GROUP BY major"),
(context.Students.GroupBy(row => new { row.Major }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Major }).Take(1).ToList(), "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1"),
(context.Students.GroupBy(row => new { row.Age }).Select(group => new { group.Key.Age, Count = group.Count() }).ToList(), "SELECT age , count(*) FROM Student GROUP BY age"),
(context.Students.GroupBy(row => new { row.Sex }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), group.Key.Sex }).ToList(), "SELECT avg(age) , sex FROM Student GROUP BY sex"),
(context.Students.GroupBy(row => new { row.CityCode }).Select(group => new { group.Key.CityCode, Count = group.Count() }).ToList(), "SELECT city_code , count(*) FROM Student GROUP BY city_code"),
(context.Students.GroupBy(row => new { row.Advisor }).Select(group => new { group.Key.Advisor, Count = group.Count() }).ToList(), "SELECT advisor , count(*) FROM Student GROUP BY advisor"),
(context.Students.GroupBy(row => new { row.Advisor }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Advisor }).Take(1).ToList(), "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1"),
(context.HasAllergies.Where(row => row.Allergy == "Cat").Count(), "SELECT count(*) FROM Has_allergy WHERE Allergy = \"Cat\""),
(context.HasAllergies.GroupBy(row => new { row.StuId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.StuId }).ToList(), "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*) >= 2"),
(context.Students.Select(row => row.StuId).Except(context.HasAllergies.Select(row => row.StuId)).ToList(), "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy"),
(context.HasAllergies.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Sex == "F" && row.T1.Allergy == "Milk" || row.T1.Allergy == "Eggs").Count(), "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = \"F\" AND T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\""),
(context.HasAllergies.GroupBy(row => new { row.Allergy }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Allergy }).Take(1).ToList(), "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"),
(context.HasAllergies.GroupBy(row => new { row.Allergy }).Select(group => new { group.Key.Allergy, Count = group.Count() }).ToList(), "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy"),
(context.Students.Where(row => context.HasAllergies.Where(row => row.Allergy == "Milk").Select(row => row.StuId).Intersect(context.HasAllergies.Where(row => row.Allergy == "Cat").Select(row => row.StuId)).Contains(row.StuId)).Select(row => new { row.Lname, row.Age }).ToList(), "SELECT lname , age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")"),
(context.AllergyTypes.Join(context.HasAllergies, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Fname == "Lisa").OrderBy(row => row.T1.Allergy).Select(row => new { row.T1.Allergy, row.T1.AllergyType1 }).ToList(), "SELECT T1.Allergy , T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" ORDER BY T1.Allergy"),
(context.Students.Where(row => context.HasAllergies.Where(row => row.Allergy == "Milk").Select(row => row.StuId).Except(context.HasAllergies.Where(row => row.Allergy == "Cat").Select(row => row.StuId)).Contains(row.StuId)).Select(row => new { row.Fname, row.Sex }).ToList(), "SELECT fname , sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")"),
(context.Students.Join(context.HasAllergies, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Allergy == "Milk" || row.T2.Allergy == "Cat").Select(row => new { row.T1.Fname, row.T1.CityCode }).Distinct().ToList(), "SELECT DISTINCT T1.fname , T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = \"Milk\" OR T2.Allergy = \"Cat\""),
(context.Students.Where(row => !context.HasAllergies.Where(row => row.Allergy == "Soy").Select(row => row.StuId).Contains(row.StuId)).Select(row => new { row.Fname, row.Major }).ToList(), "SELECT fname , major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Soy\")"),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestCustomerComplaintsContext() { var context = new CustomerComplaintsContext(); 
 var tests = new (object, string)[] {
(context.Customers.Count(), "SELECT count(*) FROM customers"),
(context.Customers.OrderBy(row => row.EmailAddress).ThenBy(row => row.PhoneNumber).Select(row => new { row.EmailAddress, row.PhoneNumber }).ToList(), "SELECT email_address , phone_number FROM customers ORDER BY email_address , phone_number"),
(context.Customers.Where(row => row.CustomerTypeCode == "Good Credit Rating").GroupBy(row => new { row.TownCity }).OrderBy(group => group.Count()).Select(group => new { group.Key.TownCity }).Take(1).ToList(), "SELECT town_city FROM customers WHERE customer_type_code = \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1"),
(context.Products.Join(context.Complaints, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ProductName }).Select(group => new { group.Key.ProductName, Count = group.Count() }).ToList(), "SELECT t1.product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name"),
(context.Customers.Join(context.Complaints, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.CustomerId }).OrderBy(group => group.Count()).Select(group => new { group.First().t1.EmailAddress }).Take(1).ToList(), "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1"),
(context.Products.Join(context.Complaints, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).SelectMany(s => context.Customers, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.CustomerId }).OrderBy(group => group.Count()).Select(group => new { group.First().t1.ProductName }).Distinct().Take(1).ToList(), "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1"),
(context.Customers.Join(context.Complaints, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t2.DateComplaintRaised).Select(row => new { row.t1.PhoneNumber }).Take(1).ToList(), "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1"),
(context.Customers.Where(row => !context.Complaints.Select(row => row.CustomerId).Contains(row.CustomerId)).Select(row => new { row.EmailAddress, row.PhoneNumber }).ToList(), "SELECT email_address , phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)"),
(context.Customers.Select(row => row.PhoneNumber).Union(context.Staff.Select(row => row.PhoneNumber)).ToList(), "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff"),
(context.Products.Where(row => row.ProductName == "Chocolate").Select(row => new { row.ProductDescription }).ToList(), "SELECT product_description FROM products WHERE product_name = \"Chocolate\""),
(context.Products.OrderByDescending(row => (double) row.ProductPrice).Select(row => new { row.ProductName, row.ProductCategoryCode }).Take(1).ToList(), "SELECT product_name , product_category_code FROM products ORDER BY product_price DESC LIMIT 1"),
(context.Products.Where(row => !context.Complaints.Select(row => row.ProductId).Contains(row.ProductId)).Select(row => new { row.ProductPrice }).ToList(), "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)"),
(context.Products.GroupBy(row => new { row.ProductCategoryCode }).Select(group => new { AverageProductPrice = group.Select(row => (double) row.ProductPrice).Average(), group.Key.ProductCategoryCode }).ToList(), "SELECT avg(product_price) , product_category_code FROM products GROUP BY product_category_code"),
(context.Staff.Join(context.Complaints, t1 => t1.StaffId, t2 => t2.StaffId, (t1, t2) => new { t1, t2 }).Join(context.Products, joined => joined.t2.ProductId, t3 => t3.ProductId, (joined, t3) => new { joined.t1, joined.t2, t3 }).OrderBy(row => (double) row.t3.ProductPrice).Select(row => new { row.t1.LastName }).Take(1).ToList(), "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id JOIN products AS t3 ON t2.product_id = t3.product_id ORDER BY t3.product_price LIMIT 1"),
(context.Complaints.GroupBy(row => new { row.ComplaintStatusCode }).Where(group => group.Count() > 3).Select(group => new { group.Key.ComplaintStatusCode }).ToList(), "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*) > 3"),
(context.Staff.Where(row => EF.Functions.Like(row.EmailAddress, "%wrau%")).Select(row => new { row.LastName }).ToList(), "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\""),
(context.Customers.GroupBy(row => new { row.CustomerTypeCode }).Select(group => new { Count = group.Count() }).OrderByDescending(group => group.Count).Take(1), "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1"),
(context.Staff.Join(context.Complaints, t1 => t1.StaffId, t2 => t2.StaffId, (t1, t2) => new { t1, t2 }).OrderBy(row => row.t2.DateComplaintRaised).Select(row => new { row.t1.LastName }).Take(1).ToList(), "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1"),
(context.Complaints.Select(row => row.ComplaintTypeCode).Distinct().Count(), "SELECT count(DISTINCT complaint_type_code) FROM complaints"),
(context.Customers.Where(row => row.EmailAddress == "vbogisich@example.org").Select(row => new { row.AddressLine1, row.AddressLine2 }).ToList(), "SELECT address_line_1 , address_line_2 FROM customers WHERE email_address = \"vbogisich@example.org\""),
(context.Complaints.Where(row => row.ComplaintTypeCode == "Product Failure").GroupBy(row => new { row.ComplaintStatusCode }).Select(group => new { group.Key.ComplaintStatusCode, Count = group.Count() }).ToList(), "SELECT complaint_status_code , count(*) FROM complaints WHERE complaint_type_code = \"Product Failure\" GROUP BY complaint_status_code"),
(context.Staff.Join(context.Complaints, t1 => t1.StaffId, t2 => t2.StaffId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.StaffId }).OrderBy(group => group.Count()).Select(group => new { group.First().t1.FirstName }).Take(5).ToList(), "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5"),
(context.Customers.GroupBy(row => new { row.State }).OrderBy(group => group.Count()).Select(group => new { group.Key.State }).Take(1).ToList(), "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1"),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestCreDocControlSystemsContext() { var context = new CreDocControlSystemsContext(); 
 var tests = new (object, string)[] {
(context.RefDocumentStatuses.Select(row => new { row.DocumentStatusCode }).ToList(), "SELECT document_status_code FROM Ref_Document_Status;"),
(context.RefDocumentStatuses.Where(row => row.DocumentStatusCode == "working").Select(row => new { row.DocumentStatusDescription }).ToList(), "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";"),
(context.RefDocumentTypes.Select(row => new { row.DocumentTypeCode }).ToList(), "SELECT document_type_code FROM Ref_Document_Types;"),
(context.RefDocumentTypes.Where(row => row.DocumentTypeCode == "Paper").Select(row => new { row.DocumentTypeDescription }).ToList(), "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";"),
(context.RefShippingAgents.Select(row => new { row.ShippingAgentName }).ToList(), "SELECT shipping_agent_name FROM Ref_Shipping_Agents;"),
(context.RefShippingAgents.Where(row => row.ShippingAgentName == "UPS").Select(row => new { row.ShippingAgentCode }).ToList(), "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";"),
(context.Roles.Select(row => new { row.RoleCode }).ToList(), "SELECT role_code FROM ROLES;"),
(context.Roles.Where(row => row.RoleCode == "ED").Select(row => new { row.RoleDescription }).ToList(), "SELECT role_description FROM ROLES WHERE role_code = \"ED\";"),
(context.Employees.Count(), "SELECT count(*) FROM Employees;"),
(context.Roles.Join(context.Employees, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EmployeeName == "Koby").Select(row => new { row.T1.RoleDescription }).ToList(), "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";"),
(context.Documents.Select(row => new { row.DocumentId, row.ReceiptDate }).ToList(), "SELECT document_id , receipt_date FROM Documents;"),
(context.Roles.Join(context.Employees, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.RoleCode }).Select(group => new { group.First().T1.RoleDescription, group.Key.RoleCode, Count = group.Count() }).ToList(), "SELECT T1.role_description , T2.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;"),
(context.Roles.Join(context.Employees, Roles => Roles.RoleCode, Employees => Employees.RoleCode, (Roles, Employees) => new { Roles, Employees }).GroupBy(row => new { row.Employees.RoleCode }).Select(group => new { group.First().Roles.RoleDescription, CountEmployeeId = group.Select(row => row.Employees.EmployeeId).Count() }).Where(group => group.CountEmployeeId > 1).ToList(), "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id) > 1;"),
(context.RefDocumentStatuses.Join(context.Documents, RefDocumentStatuses => RefDocumentStatuses.DocumentStatusCode, Documents => Documents.DocumentStatusCode, (RefDocumentStatuses, Documents) => new { RefDocumentStatuses, Documents }).Where(row => row.Documents.DocumentId == 1).Select(row => new { row.RefDocumentStatuses.DocumentStatusDescription }).ToList(), "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;"),
(context.Documents.Where(row => row.DocumentStatusCode == "done").Count(), "SELECT count(*) FROM Documents WHERE document_status_code = \"done\";"),
(context.Documents.Where(row => row.DocumentId == 2).Select(row => new { row.DocumentTypeCode }).ToList(), "SELECT document_type_code FROM Documents WHERE document_id = 2;"),
(context.Documents.Where(row => row.DocumentStatusCode == "done" && row.DocumentTypeCode == "Paper").Select(row => new { row.DocumentId }).ToList(), "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";"),
(context.RefShippingAgents.Join(context.Documents, RefShippingAgents => RefShippingAgents.ShippingAgentCode, Documents => Documents.ShippingAgentCode, (RefShippingAgents, Documents) => new { RefShippingAgents, Documents }).Where(row => row.Documents.DocumentId == 2).Select(row => new { row.RefShippingAgents.ShippingAgentName }).ToList(), "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;"),
(context.RefShippingAgents.Join(context.Documents, RefShippingAgents => RefShippingAgents.ShippingAgentCode, Documents => Documents.ShippingAgentCode, (RefShippingAgents, Documents) => new { RefShippingAgents, Documents }).Where(row => row.RefShippingAgents.ShippingAgentName == "USPS").Count(), "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"),
(context.RefShippingAgents.Join(context.Documents, RefShippingAgents => RefShippingAgents.ShippingAgentCode, Documents => Documents.ShippingAgentCode, (RefShippingAgents, Documents) => new { RefShippingAgents, Documents }).GroupBy(row => new { row.RefShippingAgents.ShippingAgentCode }).Select(group => new { group.First().RefShippingAgents.ShippingAgentName, CountDocumentId = group.Select(row => row.Documents.DocumentId).Count() }).OrderByDescending(group => group.CountDocumentId).Take(1).ToList(), "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;"),
(context.Documents.Where(row => row.DocumentId == 3).Select(row => new { row.ReceiptDate }).ToList(), "SELECT receipt_date FROM Documents WHERE document_id = 3;"),
(context.Addresses.Join(context.DocumentsMaileds, Addresses => Addresses.AddressId, DocumentsMaileds => DocumentsMaileds.MailedToAddressId, (Addresses, DocumentsMaileds) => new { Addresses, DocumentsMaileds }).Where(row => row.DocumentsMaileds.DocumentId == 4).Select(row => new { row.Addresses.AddressDetails }).ToList(), "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;"),
(context.DocumentsMaileds.Where(row => row.DocumentId == 7).Select(row => new { row.MailingDate }).ToList(), "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;"),
(context.Documents.Where(row => row.DocumentStatusCode == "done" && row.DocumentTypeCode == "Paper").Select(row => row.DocumentId).Except(context.Documents.Join(context.RefShippingAgents, Documents => Documents.ShippingAgentCode, RefShippingAgents => RefShippingAgents.ShippingAgentCode, (Documents, RefShippingAgents) => new { Documents, RefShippingAgents }).Where(row => row.RefShippingAgents.ShippingAgentName == "USPS").Select(row => row.Documents.DocumentId)).ToList(), "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"),
(context.Documents.Where(row => row.DocumentStatusCode == "done" && row.DocumentTypeCode == "Paper").Select(row => row.DocumentId).Intersect(context.Documents.Join(context.RefShippingAgents, Documents => Documents.ShippingAgentCode, RefShippingAgents => RefShippingAgents.ShippingAgentCode, (Documents, RefShippingAgents) => new { Documents, RefShippingAgents }).Where(row => row.RefShippingAgents.ShippingAgentName == "USPS").Select(row => row.Documents.DocumentId)).ToList(), "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"),
(context.DocumentDrafts.Where(row => row.DocumentId == 7).Select(row => new { row.DraftDetails }).ToList(), "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;"),
(context.DraftCopies.Where(row => row.DocumentId == 2).Count(), "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;"),
(context.DraftCopies.GroupBy(row => new { row.DocumentId }).Select(group => new { group.Key.DocumentId, CountCopyNumber = group.Select(row => row.CopyNumber).Count() }).OrderByDescending(group => group.CountCopyNumber).Take(1).ToList(), "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;"),
(context.DraftCopies.GroupBy(row => new { row.DocumentId }).Select(group => new { group.Key.DocumentId, Count = group.Count() }).Where(group => group.Count > 1).ToList(), "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*) > 1;"),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestBaseball1Context() { var context = new Baseball1Context(); 
 var tests = new (object, string)[] {
(context.Colleges.Join(context.PlayerColleges, T1 => T1.CollegeId, T2 => T2.CollegeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CollegeId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.NameFull, group.Key.CollegeId }).Take(1).ToList(), "SELECT T1.name_full , T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;"),
(context.Salaries.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == "Boston Red Stockings").Select(row => row.T1.Salary1).Average(), "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = \'Boston Red Stockings\'"),
(context.Players.Join(context.AllStars, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 1998).Select(row => new { row.T1.NameFirst, row.T1.NameLast }).ToList(), "SELECT name_first , name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE YEAR = 1998"),
(context.Players.Join(context.AllStars, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PlayerId }).Select(group => new { group.First().T1.NameFirst, group.First().T1.NameLast, group.Key.PlayerId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList(), "SELECT T1.name_first , T1.name_last , T1.player_id , count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;"),
(context.HallOfFames.GroupBy(row => new { row.Yearid }).Select(group => new { group.Key.Yearid, Count = group.Count() }).ToList(), "SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid;"),
(context.HomeGames.GroupBy(row => new { row.Year }).Select(group => new { group.Key.Year, AverageAttendance = group.Select(row => row.Attendance).Average() }).ToList(), "SELECT YEAR , avg(attendance) FROM home_game GROUP BY YEAR;"),
(context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2014).GroupBy(row => new { row.T1.TeamId }).OrderByDescending(group => group.Average(row => row.T1.Attendance)).Select(group => new { group.Key.TeamId, group.First().T2.Rank }).Take(1).ToList(), "SELECT T2.team_id , T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T1.year = 2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;"),
(context.Players.Join(context.ManagerAwards, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.PlayerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.NameFirst, group.First().T1.NameLast, group.Key.PlayerId }).Take(1).ToList(), "SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;"),
(context.Parks.Where(row => row.State == "NY").Count(), "SELECT count(*) FROM park WHERE state = \'NY\';"),
(context.Players.Join(context.PlayerAwards, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PlayerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.NameFirst, group.First().T1.NameLast, group.Key.PlayerId }).Take(3).ToList(), "SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;"),
(context.Players.GroupBy(row => new { row.BirthCountry }).OrderBy(group => group.Count()).Select(group => new { group.Key.BirthCountry }).Take(3).ToList(), "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;"),
(context.Players.Where(row => row.DeathYear == "").Select(row => new { row.NameFirst, row.NameLast }).ToList(), "SELECT name_first , name_last FROM player WHERE death_year = \'\';"),
(context.Players.Where(row => row.BirthCountry == "USA" && row.Bats == "R").Count(), "SELECT count(*) FROM player WHERE birth_country = \'USA\' AND bats = \'R\';"),
(context.Players.Join(context.PlayerColleges, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Join(context.Colleges, joined => joined.T2.CollegeId, T3 => T3.CollegeId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.NameFull == "Yale University").Select(row => row.T1.Height).Average(), "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T3.college_id = T2.college_id WHERE T3.name_full = \'Yale University\';"),
(context.Teams.Join(context.Salaries, T1 => T1.TeamId, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TeamId }).Select(group => new { group.OrderByDescending(row => row.T2.Salary1).First().T1.Name, group.Key.TeamId, MaxSalary1 = group.Select(row => row.T2.Salary1).Max() }).ToList(), "SELECT T1.name , T1.team_id , max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id;"),
(context.Teams.Join(context.Salaries, T1 => T1.TeamId, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TeamId }).OrderBy(group => group.Average(row => row.T2.Salary1)).Select(group => new { group.First().T1.Name, group.Key.TeamId }).Take(1).ToList(), "SELECT T1.name , T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;"),
(context.Players.SelectMany(s => context.PlayerAwards, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 1960).Select(row => new { row.T1.NameFirst, row.T1.NameLast }).Intersect(context.Players.SelectMany(s => context.PlayerAwards, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 1961).Select(row => new { row.T1.NameFirst, row.T1.NameLast })).ToList(), "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1961"),
(context.Players.Where(row => row.Weight > 220 || row.Height < 75).Select(row => new { row.NameFirst, row.NameLast }).ToList(), "SELECT name_first , name_last FROM player WHERE weight > 220 OR height < 75"),
(context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == "Boston Red Stockings").Select(row => row.T1.Wins).Max(), "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = \'Boston Red Stockings\';"),
(context.Postseasons.Join(context.Teams, T1 => T1.TeamIdLoser, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == "Boston Red Stockings" && row.T1.Year == 2009).Count(), "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = \'Boston Red Stockings\' AND T1.year = 2009;"),
(context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2008).GroupBy(row => new { row.T1.TeamIdWinner }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name, group.Key.TeamIdWinner }).Take(1).ToList(), "SELECT T2.name , T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;"),
(context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == "Boston Red Stockings").GroupBy(row => new { row.T1.Year }).Select(group => new { Count = group.Count(), group.Key.Year }).ToList(), "SELECT count(*) , T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = \'Boston Red Stockings\' GROUP BY T1.year"),
(context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == "Boston Red Stockings").Union(context.Postseasons.Join(context.Teams, T1 => T1.TeamIdLoser, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == "Boston Red Stockings")).Count(), "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = \'Boston Red Stockings\' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = \'Boston Red Stockings\' );"),
(context.Postseasons.Where(row => row.Year == 1885 && row.Ties == 1).Count(), "SELECT count(*) FROM postseason WHERE YEAR = 1885 AND ties = 1;"),
(context.Salaries.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == "Boston Red Stockings" && row.T1.Year == 2010).Select(row => row.T1.Salary1).Sum(), "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = \'Boston Red Stockings\' AND T1.year = 2010"),
(context.Salaries.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == "Boston Red Stockings" && row.T1.Year == 2000).Count(), "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = \'Boston Red Stockings\' AND T1.year = 2000"),
(context.Salaries.Where(row => row.Year == 2001).OrderByDescending(row => row.Salary1).Select(row => new { row.Salary1 }).Take(3).ToList(), "SELECT salary FROM salary WHERE YEAR = 2001 ORDER BY salary DESC LIMIT 3;"),
(context.Salaries.Where(row => row.Year == 2010).Select(row => row.Salary1).Union(context.Salaries.Where(row => row.Year == 2001).Select(row => row.Salary1)).ToList(), "SELECT salary FROM salary WHERE YEAR = 2010 UNION SELECT salary FROM salary WHERE YEAR = 2001"),
(context.HallOfFames.GroupBy(row => new { row.Yearid }).OrderBy(group => group.Count()).Select(group => new { group.Key.Yearid }).Take(1).ToList(), "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;"),
(context.Parks.Where(row => row.City == "Atlanta").Count(), "SELECT count(*) FROM park WHERE city = \'Atlanta\';"),
(context.HomeGames.Join(context.Parks, T1 => T1.ParkId, T2 => T2.ParkId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 1907 && row.T2.ParkName == "Columbia Park").Count(), "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 1907 AND T2.park_name = \'Columbia Park\';"),
(context.HomeGames.Join(context.Parks, T1 => T1.ParkId, T2 => T2.ParkId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2000 && row.T2.City == "Atlanta").Count(), "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2000 AND T2.city = \'Atlanta\';"),
(context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == "Boston Red Stockings" && row.T1.Year >= 2000 && row.T1.Year <= 2010).Select(row => row.T1.Attendance).Sum(), "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = \'Boston Red Stockings\' AND T1.year BETWEEN 2000 AND 2010;"),
(context.Salaries.Join(context.Players, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.NameFirst == "Len" && row.T2.NameLast == "Barker" && row.T1.Year >= 1985 && row.T1.Year <= 1990).Select(row => row.T1.Salary1).Sum(), "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = \'Len\' AND T2.name_last = \'Barker\' AND T1.year BETWEEN 1985 AND 1990;"),
(context.Salaries.Join(context.Players, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Join(context.Teams, joined => joined.T1.TeamId, T3 => T3.TeamIdBr, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Year == 2005 && row.T3.Name == "Washington Nationals").Select(row => new { row.T2.NameFirst, row.T2.NameLast }).Intersect(context.Salaries.Join(context.Players, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Join(context.Teams, joined => joined.T1.TeamId, T3 => T3.TeamIdBr, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Year == 2007 && row.T3.Name == "Washington Nationals").Select(row => new { row.T2.NameFirst, row.T2.NameLast })).ToList(), "SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = \'Washington Nationals\' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = \'Washington Nationals\'"),
(context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == "Boston Red Stockings" && row.T1.Year >= 1990 && row.T1.Year <= 2000).Select(row => row.T1.Games).Sum(), "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = \'Boston Red Stockings\' AND T1.year BETWEEN 1990 AND 2000;"),
(context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 1980).OrderBy(row => row.T1.Attendance).Select(row => new { row.T2.Name }).Take(1).ToList(), "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;"),
(context.Parks.GroupBy(row => new { row.State }).Where(group => group.Count() > 2).Select(group => new { group.Key.State }).ToList(), "SELECT state FROM park GROUP BY state HAVING count(*) > 2;"),
(context.TeamFranchises.Where(row => row.Active == "Y").Count(), "SELECT count(*) FROM team_franchise WHERE active = \'Y\';"),
(context.Parks.GroupBy(row => new { row.City }).Where(group => group.Count() >= 2 && group.Count() <= 4).Select(group => new { group.Key.City }).ToList(), "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;"),
(context.HomeGames.Join(context.Parks, T1 => T1.ParkId, T2 => T2.ParkId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2008).OrderByDescending(row => row.T1.Attendance).Select(row => new { row.T2.ParkName }).Take(1).ToList(), "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;"),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestCreThemeParkContext() { var context = new CreThemeParkContext(); 
 var tests = new (object, string)[] {
(context.Hotels.Count(), "SELECT count(*) FROM HOTELS"),
(context.Hotels.Select(row => new { row.PriceRange }).ToList(), "SELECT price_range FROM HOTELS"),
(context.Locations.Select(row => new { row.LocationName }).Distinct().ToList(), "SELECT DISTINCT Location_Name FROM LOCATIONS"),
(context.Staff.Select(row => new { row.Name, row.OtherDetails }).ToList(), "SELECT Name , Other_Details FROM Staff"),
(context.Visitors.Select(row => new { row.TouristDetails }).ToList(), "SELECT Tourist_Details FROM VISITORS"),
(context.Hotels.Where(row => row.StarRatingCode == "5").Select(row => new { row.PriceRange }).ToList(), "SELECT price_range FROM HOTELS WHERE star_rating_code = \"5\""),
(context.Hotels.Where(row => row.StarRatingCode == "5" && row.PetsAllowedYn == true).Select(row => (double) row.PriceRange).Average(), "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code = \"5\" AND pets_allowed_yn = 1"),
(context.Locations.Where(row => row.LocationName == "UK Gallery").Select(row => new { row.Address }).ToList(), "SELECT Address FROM LOCATIONS WHERE Location_Name = \"UK Gallery\""),
(context.Locations.Where(row => row.LocationName == "UK Gallery").Select(row => new { row.OtherDetails }).ToList(), "SELECT Other_Details FROM LOCATIONS WHERE Location_Name = \"UK Gallery\""),
(context.Locations.Where(row => EF.Functions.Like(row.LocationName, "%film%")).Select(row => new { row.LocationName }).ToList(), "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\""),
(context.Photos.Select(row => row.Name).Distinct().Count(), "SELECT count(DISTINCT Name) FROM PHOTOS"),
(context.Visits.Select(row => new { row.VisitDate }).Distinct().ToList(), "SELECT DISTINCT Visit_Date FROM VISITS"),
(context.TouristAttractions.Where(row => row.HowToGetThere == "bus").Select(row => new { row.Name }).ToList(), "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\""),
(context.TouristAttractions.Where(row => row.HowToGetThere == "bus" || row.HowToGetThere == "walk").Select(row => new { row.Name, row.OpeningHours }).ToList(), "SELECT Name , Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\" OR How_to_Get_There = \"walk\""),
(context.Hotels.Join(context.RefHotelStarRatings, T1 => T1.StarRatingCode, T2 => T2.StarRatingCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PriceRange > 10000).Select(row => new { row.T2.StarRatingDescription }).ToList(), "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.price_range > 10000"),
(context.Museums.Join(context.TouristAttractions, T1 => T1.MuseumId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.MuseumDetails, row.T2.OpeningHours }).ToList(), "SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID"),
(context.Photos.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == "game1").Select(row => new { row.T2.Name }).ToList(), "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = \"game1\""),
(context.Photos.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == "film festival").Select(row => new { row.T1.Name, row.T1.Description }).ToList(), "SELECT T1.Name , T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"film festival\""),
(context.RoyalFamilies.Join(context.TouristAttractions, T1 => T1.RoyalFamilyId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.RoyalFamilyDetails, row.T2.HowToGetThere }).ToList(), "SELECT T1.Royal_Family_Details , T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID"),
(context.Shops.Join(context.TouristAttractions, T1 => T1.ShopId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.HowToGetThere == "walk").Select(row => new { row.T1.ShopDetails }).ToList(), "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\""),
(context.Staff.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == "US museum").Select(row => new { row.T1.Name }).ToList(), "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"US museum\""),
(context.StreetMarkets.Join(context.TouristAttractions, T1 => T1.MarketId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.HowToGetThere == "walk" || row.T2.HowToGetThere == "bus").Select(row => new { row.T1.MarketDetails }).ToList(), "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\" OR T2.How_to_Get_There = \"bus\""),
(context.Visitors.Join(context.Visits, T1 => T1.TouristId, T2 => T2.TouristId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.TouristDetails == "Vincent").Select(row => new { row.T2.VisitDate, row.T2.VisitDetails }).ToList(), "SELECT T2.Visit_Date , T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE T1.Tourist_Details = \"Vincent\""),
(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Join(context.Visitors, joined => joined.T2.TouristId, T3 => T3.TouristId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.TouristDetails == "Vincent").Select(row => new { row.T1.Name }).ToList(), "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = \"Vincent\""),
(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == "Vincent" || row.T2.TouristDetails == "Vivian").Select(row => new { row.T1.Name, row.T3.VisitDate }).ToList(), "SELECT T1.Name , T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" OR T2.Tourist_Details = \"Vivian\""),
(context.Hotels.GroupBy(row => new { row.StarRatingCode }).Select(group => new { group.Key.StarRatingCode, AveragePriceRange = group.Select(row => row.PriceRange).Average() }).ToList(), "SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code"),
(context.Hotels.GroupBy(row => new { row.PetsAllowedYn }).Select(group => new { group.Key.PetsAllowedYn, AveragePriceRange = group.Select(row => row.PriceRange).Average() }).ToList(), "SELECT pets_allowed_yn , avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn"),
(context.Hotels.OrderBy(row => row.PriceRange).Select(row => new { row.HotelId, row.StarRatingCode }).ToList(), "SELECT hotel_id , star_rating_code FROM HOTELS ORDER BY price_range ASC"),
(context.Hotels.OrderByDescending(row => row.PriceRange).Select(row => new { row.OtherHotelDetails }).Take(3).ToList(), "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3"),
(context.Hotels.OrderBy(row => row.PriceRange).Select(row => new { row.OtherHotelDetails, row.StarRatingCode }).Take(3).ToList(), "SELECT other_hotel_details , star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3"),
(context.TouristAttractions.GroupBy(row => new { row.HowToGetThere }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.HowToGetThere }).Take(1).ToList(), "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1"),
(context.RefAttractionTypes.Join(context.TouristAttractions, T1 => T1.AttractionTypeCode, T2 => T2.AttractionTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AttractionTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.AttractionTypeDescription, group.Key.AttractionTypeCode }).Take(1).ToList(), "SELECT T1.Attraction_Type_Description , T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"),
(context.TouristAttractions.GroupBy(row => new { row.HowToGetThere }).Select(group => new { group.Key.HowToGetThere, Count = group.Count() }).ToList(), "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There"),
(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId, Count = group.Count() }).ToList(), "SELECT T1.Name , T2.Tourist_Attraction_ID , COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID"),
(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId }).ToList(), "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) >= 2"),
(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Where(group => group.Count() <= 1).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId }).ToList(), "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) <= 1"),
(context.Locations.Join(context.TouristAttractions, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Address == "660 Shea Crescent" || row.T2.HowToGetThere == "walk").Select(row => new { row.T2.Name }).ToList(), "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"660 Shea Crescent\" OR T2.How_to_Get_There = \"walk\""),
(context.Locations.Join(context.TouristAttractions, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Address == "254 Ottilie Junction" || row.T2.HowToGetThere == "bus").Select(row => new { row.T2.Name }).ToList(), "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"254 Ottilie Junction\" OR T2.How_to_Get_There = \"bus\""),
(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == "Vincent").Select(row => row.T1.Name).Intersect(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == "Marcelle").Select(row => row.T1.Name)).ToList(), "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Marcelle\""),
(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == "Alison").Select(row => row.T1.Name).Except(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == "Rosalind").Select(row => row.T1.Name)).ToList(), "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Rosalind\""),
(context.Visitors.Where(row => !context.Visits.Select(row => row.TouristId).Contains(row.TouristId)).Count(), "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )"),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestCollege3Context() { var context = new College3Context(); 
 var tests = new (object, string)[] {
(context.Courses.Count(), "SELECT count(*) FROM COURSE"),
(context.Courses.Where(row => row.Credits > 2).Count(), "SELECT count(*) FROM COURSE WHERE Credits > 2"),
(context.Courses.Where(row => row.Credits == 1).Select(row => new { row.Cname }).ToList(), "SELECT CName FROM COURSE WHERE Credits = 1"),
(context.Courses.Where(row => row.Days == "MTW").Select(row => new { row.Cname }).ToList(), "SELECT CName FROM COURSE WHERE Days = \"MTW\""),
(context.Departments.Where(row => row.Division == "AS").Count(), "SELECT count(*) FROM DEPARTMENT WHERE Division = \"AS\""),
(context.Departments.Where(row => row.Room == 268).Select(row => new { row.Dphone }).ToList(), "SELECT DPhone FROM DEPARTMENT WHERE Room = 268"),
(context.EnrolledIns.Where(row => row.Grade == "B").Select(row => row.StuId).Distinct().Count(), "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade = \"B\""),
(context.Gradeconversions.GroupBy(row => 1).Select(group => new { MaxGradepoint = group.Select(row => row.Gradepoint).Max(), MinGradepoint = group.Select(row => row.Gradepoint).Min() }).ToList(), "SELECT max(gradepoint) , min(gradepoint) FROM GRADECONVERSION"),
(context.Students.Where(row => EF.Functions.Like(row.Fname, "%a%")).Select(row => new { row.Fname }).Distinct().ToList(), "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE \'%a%\'"),
(context.Faculties.Where(row => row.Sex == "M" && row.Building == "NEB").Select(row => new { row.Fname, row.Lname }).ToList(), "SELECT Fname , Lname FROM FACULTY WHERE sex = \"M\" AND Building = \"NEB\""),
(context.Faculties.Where(row => row.Rank == "Professor" && row.Building == "NEB").Select(row => new { row.Room }).ToList(), "SELECT Room FROM FACULTY WHERE Rank = \"Professor\" AND Building = \"NEB\""),
(context.Departments.Where(row => row.Building == "Mergenthaler").Select(row => new { row.Dname }).ToList(), "SELECT DName FROM DEPARTMENT WHERE Building = \"Mergenthaler\""),
(context.Courses.OrderBy(row => row.Credits).ToList(), "SELECT * FROM COURSE ORDER BY Credits"),
(context.Courses.OrderBy(row => row.Credits).Select(row => new { row.Cname }).ToList(), "SELECT CName FROM COURSE ORDER BY Credits"),
(context.Students.OrderByDescending(row => row.Age).Select(row => new { row.Fname }).ToList(), "SELECT Fname FROM STUDENT ORDER BY Age DESC"),
(context.Students.Where(row => row.Sex == "F").OrderByDescending(row => row.Age).Select(row => new { row.Lname }).ToList(), "SELECT LName FROM STUDENT WHERE Sex = \"F\" ORDER BY Age DESC"),
(context.Faculties.Where(row => row.Building == "Barton").OrderBy(row => row.Lname).Select(row => new { row.Lname }).ToList(), "SELECT Lname FROM FACULTY WHERE Building = \"Barton\" ORDER BY Lname"),
(context.Faculties.Where(row => row.Rank == "Professor").OrderBy(row => row.Fname).Select(row => new { row.Fname }).ToList(), "SELECT Fname FROM FACULTY WHERE Rank = \"Professor\" ORDER BY Fname"),
(context.Departments.Join(context.MinorIns, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Dno }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Dname }).Take(1).ToList(), "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1"),
(context.Departments.Select(row => row.Dname).Except(context.Departments.Join(context.MinorIns, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Dname)).ToList(), "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO"),
(context.Departments.Join(context.MemberOfs, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Dno }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.Dname }).Take(1).ToList(), "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1"),
(context.Faculties.GroupBy(row => new { row.Rank }).OrderBy(group => group.Count()).Select(group => new { group.Key.Rank }).Take(1).ToList(), "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1"),
(context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Instructor }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Fname, group.First().T2.Lname }).Take(3).ToList(), "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3"),
(context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Instructor }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Building }).Take(1).ToList(), "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1"),
(context.Courses.Join(context.EnrolledIns, T1 => T1.Cid, T2 => T2.Cid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Cid }).Where(group => group.Count() >= 5).Select(group => new { group.First().T1.Cname }).ToList(), "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT(*) >= 5"),
(context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Cname == "COMPUTER LITERACY").Select(row => new { row.T2.Fname, row.T2.Lname }).ToList(), "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE T1.CName = \"COMPUTER LITERACY\""),
(context.Courses.Join(context.Departments, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Cname == "INTRODUCTION TO COMPUTER SCIENCE").Select(row => new { row.T2.Dname, row.T2.Room }).ToList(), "SELECT T2.Dname , T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = \"INTRODUCTION TO COMPUTER SCIENCE\""),
(context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Fname, row.T3.Lname, row.T2.Gradepoint }).ToList(), "SELECT T3.Fname , T3.LName , T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID"),
(context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Gradepoint >= 3.8).Select(row => new { row.T3.Fname }).Distinct().ToList(), "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T2.gradepoint >= 3.8"),
(context.Faculties.Join(context.MemberOfs, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Dno == 520).Select(row => new { row.T1.Fname, row.T1.Lname }).ToList(), "SELECT T1.Fname , T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520"),
(context.MinorIns.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Dno == 140).Select(row => new { row.T2.Fname, row.T2.Lname }).ToList(), "SELECT T2.Fname , T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE T1.DNO = 140"),
(context.Departments.Join(context.MemberOfs, T1 => T1.Dno, T3 => T3.Dno, (T1, T3) => new { T1, T3 }).Join(context.Faculties, joined => joined.T3.FacId, T2 => T2.FacId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T1.Dname == "Computer Science").Select(row => new { row.T2.Lname }).ToList(), "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = \"Computer Science\""),
(context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Lname == "Smith").Select(row => (double) row.T2.Gradepoint).Average(), "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = \"Smith\""),
(context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CityCode == "NYC").GroupBy(row => 1).Select(group => new { MaxGradepointT2 = group.Select(row => row.T2.Gradepoint).Max(), MinGradepointT2 = group.Select(row => row.T2.Gradepoint).Min() }).ToList(), "SELECT max(T2.gradepoint) , min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = \"NYC\""),
(context.Courses.Where(row => row.Credits == 3).Select(row => row.Cname).Union(context.Courses.Where(row => row.Credits == 1 && row.Hours == "4").Select(row => row.Cname)).ToList(), "SELECT CName FROM COURSE WHERE Credits = 3 UNION SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4"),
(context.Departments.Where(row => row.Division == "AS").Select(row => row.Dname).Union(context.Departments.Where(row => row.Division == "EN" && row.Building == "NEB").Select(row => row.Dname)).ToList(), "SELECT DName FROM DEPARTMENT WHERE Division = \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division = \"EN\" AND Building = \"NEB\""),
(context.Students.Where(row => !context.EnrolledIns.Select(row => row.StuId).Contains(row.StuId)).Select(row => new { row.Fname }).ToList(), "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)"),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestCustomerDeliveriesContext() { var context = new CustomerDeliveriesContext(); 
 var tests = new (object, string)[] {
(context.ActualOrders.Where(row => row.OrderStatusCode == "Success").Select(row => new { row.ActualOrderId }).ToList(), "SELECT actual_order_id FROM actual_orders WHERE order_status_code = \'Success\'"),
(context.Products.Join(context.RegularOrderProducts, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ProductId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.ProductName, group.First().t1.ProductPrice }).Take(1).ToList(), "SELECT t1.product_name , t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1"),
(context.Customers.Count(), "SELECT count(*) FROM customers"),
(context.Customers.Select(row => row.PaymentMethod).Distinct().Count(), "SELECT count(DISTINCT payment_method) FROM customers"),
(context.Trucks.OrderBy(row => row.TruckLicenceNumber).Select(row => new { row.TruckDetails }).ToList(), "SELECT truck_details FROM trucks ORDER BY truck_licence_number"),
(context.Products.OrderByDescending(row => (double) row.ProductPrice).Select(row => new { row.ProductName }).Take(1).ToList(), "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1"),
(context.Customers.Select(row => row.CustomerName).Except(context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.StateProvinceCounty == "California").Select(row => row.t1.CustomerName)).ToList(), "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = \'California\'"),
(context.Customers.Where(row => row.PaymentMethod == "Visa").Select(row => new { row.CustomerEmail, row.CustomerName }).ToList(), "SELECT customer_email , customer_name FROM customers WHERE payment_method = \'Visa\'"),
(context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.StateProvinceCounty == "California").Select(row => new { row.t1.CustomerName, row.t1.CustomerPhone }).ToList(), "SELECT t1.customer_name , t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = \'California\'"),
(context.Addresses.Where(row => !context.Employees.Select(row => row.EmployeeAddressId).Contains(row.AddressId)).Select(row => new { row.StateProvinceCounty }).ToList(), "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)"),
(context.Customers.OrderBy(row => row.DateBecameCustomer).Select(row => new { row.CustomerName, row.CustomerPhone, row.CustomerEmail }).ToList(), "SELECT customer_name , customer_phone , customer_email FROM Customers ORDER BY date_became_customer"),
(context.Customers.OrderBy(row => row.DateBecameCustomer).Select(row => new { row.CustomerName }).Take(5).ToList(), "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5"),
(context.Customers.GroupBy(row => new { row.PaymentMethod }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PaymentMethod }).Take(1).ToList(), "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1"),
(context.DeliveryRoutes.OrderBy(row => row.RouteName).Select(row => new { row.RouteName }).ToList(), "SELECT route_name FROM Delivery_Routes ORDER BY route_name"),
(context.DeliveryRoutes.Join(context.DeliveryRouteLocations, t1 => t1.RouteId, t2 => t2.RouteId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.RouteId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.RouteName }).Take(1).ToList(), "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id = t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1"),
(context.CustomerAddresses.Join(context.Addresses, t1 => t1.AddressId, t2 => t2.AddressId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.StateProvinceCounty }).Select(group => new { group.Key.StateProvinceCounty, Count = group.Count() }).ToList(), "SELECT t2.state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county"),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestClub1Context() { var context = new Club1Context(); 
 var tests = new (object, string)[] {
(context.Clubs.Count(), "SELECT count(*) FROM club"),
(context.Clubs.Select(row => new { row.ClubName }).ToList(), "SELECT clubname FROM club"),
(context.Students.Count(), "SELECT count(*) FROM student"),
(context.Students.Select(row => new { row.Fname }).Distinct().ToList(), "SELECT DISTINCT fname FROM student"),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == "Bootup Baltimore").Select(row => new { row.t3.Lname }).ToList(), "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == "Hopkins Student Enterprises").Select(row => new { row.t3.Lname }).ToList(), "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == "Tennis Club").Count(), "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == "Pen and Paper Gaming").Count(), "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Pen and Paper Gaming\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == "Linda" && row.t3.Lname == "Smith").Count(), "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Linda\" AND t3.lname = \"Smith\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == "Tracy" && row.t3.Lname == "Kim").Count(), "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Tracy\" AND t3.lname = \"Kim\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == "Bootup Baltimore" && row.t3.Sex == "F").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList(), "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.sex = \"F\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == "Hopkins Student Enterprises" && row.t3.Sex == "M").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList(), "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t3.sex = \"M\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == "Bootup Baltimore" && row.t3.Major == "600").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList(), "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.major = \"600\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Major == "600").GroupBy(row => new { row.t1.ClubName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ClubName }).Take(1).ToList(), "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.major = \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Sex == "F").GroupBy(row => new { row.t1.ClubName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ClubName }).Take(1).ToList(), "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.sex = \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"),
(context.Clubs.Where(row => row.ClubName == "Tennis Club").Select(row => new { row.ClubDesc }).ToList(), "SELECT clubdesc FROM club WHERE clubname = \"Tennis Club\""),
(context.Clubs.Where(row => row.ClubName == "Pen and Paper Gaming").Select(row => new { row.ClubDesc }).ToList(), "SELECT clubdesc FROM club WHERE clubname = \"Pen and Paper Gaming\""),
(context.Clubs.Where(row => row.ClubName == "Tennis Club").Select(row => new { row.ClubLocation }).ToList(), "SELECT clublocation FROM club WHERE clubname = \"Tennis Club\""),
(context.Clubs.Where(row => row.ClubName == "Pen and Paper Gaming").Select(row => new { row.ClubLocation }).ToList(), "SELECT clublocation FROM club WHERE clubname = \"Pen and Paper Gaming\""),
(context.Clubs.Where(row => row.ClubName == "Hopkins Student Enterprises").Select(row => new { row.ClubLocation }).ToList(), "SELECT clublocation FROM club WHERE clubname = \"Hopkins Student Enterprises\""),
(context.Clubs.Where(row => row.ClubLocation == "AKW").Select(row => new { row.ClubName }).ToList(), "SELECT clubname FROM club WHERE clublocation = \"AKW\""),
(context.Clubs.Where(row => row.ClubLocation == "HHH").Count(), "SELECT count(*) FROM club WHERE clublocation = \"HHH\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == "Bootup Baltimore" && row.t2.Position == "President").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList(), "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t2.position = \"President\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == "Hopkins Student Enterprises" && row.t2.Position == "CTO").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList(), "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t2.position = \"CTO\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ClubName == "Bootup Baltimore").Select(row => row.t2.Position).Distinct().Count(), "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE t1.clubname = \"Bootup Baltimore\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == "Bootup Baltimore" && row.t3.Age > 18).Count(), "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.age > 18"),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == "Bootup Baltimore" && row.t3.Age < 18).Count(), "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.age < 18"),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.CityCode == "BAL").Select(row => new { row.t1.ClubName }).Distinct().ToList(), "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = \"BAL\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.CityCode == "HOU").Select(row => new { row.t1.ClubName }).Distinct().ToList(), "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = \"HOU\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == "Eric" && row.t3.Lname == "Tai").Select(row => row.t1.ClubName).Distinct().Count(), "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Eric\" AND t3.lname = \"Tai\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == "Davis" && row.t3.Lname == "Steven").Select(row => new { row.t1.ClubName }).Distinct().ToList(), "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Davis\" AND t3.lname = \"Steven\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Advisor == 1121).Select(row => new { row.t1.ClubName }).Distinct().ToList(), "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.advisor = 1121"),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == "Bootup Baltimore").Select(row => row.t3.Age).Average(), "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == "Hopkins Student Enterprises").Select(row => row.t3.Age).Average(), "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\""),
(context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == "Tennis Club").Select(row => row.t3.Age).Average(), "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\""),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void TestCustomersAndAddressesContext() { var context = new CustomersAndAddressesContext(); 
 var tests = new (object, string)[] {
(context.Customers.Select(row => new { row.CustomerName }).ToList(), "SELECT customer_name FROM customers"),
(context.Customers.Count(), "SELECT count(*) FROM customers"),
(context.OrderItems.Select(row => row.OrderQuantity).ToList().Select(value => double.Parse(value)).ToList().Average(), "SELECT avg(order_quantity) FROM order_items"),
(context.Customers.Where(row => row.PaymentMethod == "Cash").Select(row => new { row.CustomerName }).ToList(), "SELECT customer_name FROM customers WHERE payment_method = \"Cash\""),
(context.Customers.Where(row => row.CustomerId >= 10 && row.CustomerId <= 20).Select(row => new { row.DateBecameCustomer }).ToList(), "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20"),
(context.Customers.GroupBy(row => new { row.PaymentMethod }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PaymentMethod }).Take(1).ToList(), "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1"),
(context.Customers.Where(row => row.PaymentMethod == context.Customers.GroupBy(row => new { row.PaymentMethod }).OrderByDescending(group => group.Count()).Select(group => group.Key.PaymentMethod).Take(1).First()).Select(row => new { row.CustomerName }).ToList(), "SELECT customer_name FROM customers WHERE payment_method = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)"),
(context.Customers.Select(row => new { row.PaymentMethod }).Distinct().ToList(), "SELECT DISTINCT payment_method FROM customers"),
(context.Products.Select(row => new { row.ProductDetails }).Distinct().ToList(), "SELECT DISTINCT product_details FROM products"),
(context.Customers.Where(row => EF.Functions.Like(row.CustomerName, "%Alex%")).Select(row => new { row.CustomerName }).ToList(), "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\""),
(context.Products.Where(row => EF.Functions.Like(row.ProductDetails, "%Latte%") || EF.Functions.Like(row.ProductDetails, "%Americano%")).Select(row => new { row.ProductDetails }).ToList(), "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\""),
(context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.CustomerName == "Maudie Kertzmann").Select(row => new { row.t3.AddressContent }).ToList(), "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.customer_name = \"Maudie Kertzmann\""),
(context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.City == "Lake Geovannyton").Count(), "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = \"Lake Geovannyton\""),
(context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.StateProvinceCounty == "Colorado").Select(row => new { row.t1.CustomerName }).ToList(), "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = \"Colorado\""),
(context.Addresses.Where(row => !context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Select(row => row.t3.City).Distinct().Contains(row.City)).Select(row => new { row.City }).ToList(), "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id)"),
(context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.City }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.City }).Take(1).ToList(), "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1"),
(context.Addresses.Select(row => new { row.City }).Distinct().ToList(), "SELECT DISTINCT city FROM addresses"),
(context.Addresses.Where(row => row.ZipPostcode == "255").Select(row => new { row.City }).ToList(), "SELECT city FROM addresses WHERE zip_postcode = 255"),
(context.Addresses.Where(row => EF.Functions.Like(row.ZipPostcode, "4%")).Select(row => new { row.StateProvinceCounty, row.Country }).ToList(), "SELECT state_province_county , country FROM addresses WHERE zip_postcode LIKE \"4%\""),
(context.Addresses.GroupBy(row => new { row.Country }).Where(group => group.Count(row => row.AddressId != null) > 4).Select(group => new { group.Key.Country }).ToList(), "SELECT country FROM addresses GROUP BY country HAVING count(address_id) > 4"),
(context.CustomerContactChannels.GroupBy(row => new { row.ChannelCode }).Where(group => group.Count(row => row.CustomerId != null) < 5).Select(group => new { group.Key.ChannelCode }).ToList(), "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id) < 5"),
(context.Customers.Join(context.CustomerContactChannels, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.CustomerName == "Tillman Ernser").Select(row => new { row.t2.ChannelCode }).Distinct().ToList(), "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\""),};

 for (int i = 0; i < tests.Length; ++i) { var (linq_query, sql_query) = tests[i];

  try { Tester.Test(linq_query, sql_query, context); } catch(Exception e) { Console.WriteLine($"Query {sql_query} failed "); throw e; } } }
static void Main() {
Console.WriteLine("Running tests for Bike1Context");
 TestBike1Context();
Console.WriteLine("Running tests for CreDocTrackingDbContext");
 TestCreDocTrackingDbContext();
Console.WriteLine("Running tests for CountyPublicSafetyContext");
 TestCountyPublicSafetyContext();
Console.WriteLine("Running tests for CandidatePollContext");
 TestCandidatePollContext();
Console.WriteLine("Running tests for ClimbingContext");
 TestClimbingContext();
Console.WriteLine("Running tests for BrowserWebContext");
 TestBrowserWebContext();
Console.WriteLine("Running tests for CinemaContext");
 TestCinemaContext();
Console.WriteLine("Running tests for Company1Context");
 TestCompany1Context();
Console.WriteLine("Running tests for CreDocsAndEpensesContext");
 TestCreDocsAndEpensesContext();
Console.WriteLine("Running tests for Csu1Context");
 TestCsu1Context();
Console.WriteLine("Running tests for Allergy1Context");
 TestAllergy1Context();
Console.WriteLine("Running tests for CustomerComplaintsContext");
 TestCustomerComplaintsContext();
Console.WriteLine("Running tests for CreDocControlSystemsContext");
 TestCreDocControlSystemsContext();
Console.WriteLine("Running tests for Baseball1Context");
 TestBaseball1Context();
Console.WriteLine("Running tests for CreThemeParkContext");
 TestCreThemeParkContext();
Console.WriteLine("Running tests for College3Context");
 TestCollege3Context();
Console.WriteLine("Running tests for CustomerDeliveriesContext");
 TestCustomerDeliveriesContext();
Console.WriteLine("Running tests for Club1Context");
 TestClub1Context();
Console.WriteLine("Running tests for CustomersAndAddressesContext");
 TestCustomersAndAddressesContext();

}
}