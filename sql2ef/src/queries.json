[
  {
    "id": "d7c13bead831ea08051e7d4a7c7e0727da2c898e35a44826ba35314d72b48429",
    "sql": "SELECT count(*) FROM browser WHERE market_share >= 5",
    "linq": "context.Browsers.Where(row => row.MarketShare >= 5).Count();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0a7db54f9d5d9d2aefec92eb4f6b695625c862b52b7e296ea7af364960b6dd03",
    "sql": "SELECT name FROM browser ORDER BY market_share DESC",
    "linq": "context.Browsers.OrderByDescending(row => row.MarketShare).Select(row => new { row.Name }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "64ab7ef876772fcc7e168a85ea15d4589076a61ff906ba7a7da631a1f3b498b0",
    "sql": "SELECT id , name , market_share FROM browser",
    "linq": "context.Browsers.Select(row => new { row.Id, row.Name, row.MarketShare }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "472a7f376e52eb21f7c62b0e7f0c0eb673fbf8c62c205410131d2863815f5e58",
    "sql": "SELECT max(market_share) , min(market_share) , avg(market_share) FROM browser",
    "linq": "context.Browsers.GroupBy(row => 1).Select(group => new { MaxMarketShare = group.Select(row => row.MarketShare).Max(), MinMarketShare = group.Select(row => row.MarketShare).Min(), AverageMarketShare = group.Select(row => row.MarketShare).Average() }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a02d2bf62a27ec7cd3256fb162d74a966224821a1378106223d0910e00e6c486",
    "sql": "SELECT id , market_share FROM browser WHERE name = 'Safari'",
    "linq": "context.Browsers.Where(row => row.Name == \"Safari\").Select(row => new { row.Id, row.MarketShare }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "89b03e2f752f997f03bbe713e73d19726c2dc57b0c217da761328f03a26ff57d",
    "sql": "SELECT name , operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
    "linq": "context.WebClientAccelerators.Where(row => row.Connection != \"Broadband\").Select(row => new { row.Name, row.OperatingSystem }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "088054bf460983e1715f98ff3b59e0570fa16137874794e3c86ec40f551b2304",
    "sql": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998",
    "linq": "context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T2.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"CProxy\" && row.T2.CompatibleSinceYear > 1998).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c57996475d63337dead7e8071c85b0ed7adee484c6f6fc85dc3c276c43a2f0a2",
    "sql": "SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count(*) >= 2",
    "linq": "context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6dfdbac237078cc5cc23061206457a0d0cf651742b6f18802fb3bdb6536bcaea",
    "sql": "SELECT T1.id , T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name }).Take(1).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aac69ad957d54a2f06a3fc3fbc776d10dcf224883db51240dabdc86ffb2d67e9",
    "sql": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'",
    "linq": "context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"CACHEbox\" && row.T2.Name == \"Internet Explorer\").Select(row => new { row.T1.CompatibleSinceYear }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "10515bef40cda2882d94161b01ed157565653b745f13f3aaead5334228639546",
    "sql": "SELECT count(DISTINCT client) FROM web_client_accelerator",
    "linq": "context.WebClientAccelerators.Select(row => row.Client).Distinct().Count();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "43f04331a30231e69392b4bf8cdd46e2a82dacfd4fc4855531e0000b324fd5b8",
    "sql": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );",
    "linq": "context.WebClientAccelerators.Where(row => !context.AcceleratorCompatibleBrowsers.Select(row => row.AcceleratorId).Contains(row.Id)).Count();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f9d068a16c79a216f582bc7665056239543dc7b831dcf46f13ae620ed1b46424",
    "sql": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15;",
    "linq": "context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.MarketShare > 15).Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "406cd4fd98acc958dec5023c79982445650451e903a9aee5a77dc2c02e38df4b",
    "sql": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'",
    "linq": "context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"CACHEbox\").Select(row => row.T3.Name).Intersect(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Fasterfox\").Select(row => row.T3.Name)).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9aa262e1f0898ca1c913b9935295b7ad47c96a818945bc14ac88876c024f31f5",
    "sql": "SELECT name , operating_system FROM web_client_accelerator EXCEPT SELECT T1.name , T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'",
    "linq": "context.WebClientAccelerators.Select(row => new { row.Name, row.OperatingSystem }).Except(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Opera\").Select(row => new { row.T1.Name, row.T1.OperatingSystem })).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "57a63958f83c187160a6b982f9d76e0cf12d583fee2e27f6bf397608ccbc1a2c",
    "sql": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
    "linq": "context.WebClientAccelerators.Where(row => EF.Functions.Like(row.Name, \"%Opera%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d77d398d5744350903db2ef265f2d151d3cbd1e1a1c375b8663c8b623e2cfbbe",
    "sql": "SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system",
    "linq": "context.WebClientAccelerators.GroupBy(row => new { row.OperatingSystem }).Select(group => new { group.Key.OperatingSystem, Count = group.Count() }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fdd5ddc9503f9a9aa8681e97b7b9363673f0337c6fe16b4d4e53d3a1d4daee3d",
    "sql": "SELECT T2.name , T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id ORDER BY T1.compatible_since_year DESC",
    "linq": "context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T1.CompatibleSinceYear).Select(row => new { T2Name = row.T2.Name, T3Name = row.T3.Name }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "14ae45a84041653a0f676908f771ed37d54a4e0ca57beda84905a2d71fc10e06",
    "sql": "SELECT count(*) FROM actor",
    "linq": "context.Actors.Count();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "219de7746bd6dcd0ed74e8c9beed90f87f0efc9aa823d11a8948130c9cc1cb18",
    "sql": "SELECT Name FROM actor ORDER BY Name ASC",
    "linq": "context.Actors.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3a4fbcbfe3859f49abb24d5a22263c36977b37691ec1938391696d8ec75a46e7",
    "sql": "SELECT Character , Duration FROM actor",
    "linq": "context.Actors.Select(row => new { row.Character, row.Duration }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0a9cd034090a315de14a5d46f9e7ad5679d40d711e793782d99ed8f05866fa4c",
    "sql": "SELECT Name FROM actor WHERE Age != 20",
    "linq": "context.Actors.Where(row => row.Age != 20).Select(row => new { row.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4fab80cee3f0df697e0aad08e3ee8525f91e5ed2184fa9a1abef274441728e9a",
    "sql": "SELECT Character FROM actor ORDER BY age DESC",
    "linq": "context.Actors.OrderByDescending(row => row.Age).Select(row => new { row.Character }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1e189514e1eabb8fa408f2571f57c5cbb7dc007080764b7d5d42205c60021e51",
    "sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
    "linq": "context.Actors.OrderByDescending(row => row.Age).Select(row => new { row.Duration }).Take(1).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e761ea8004f25a16e8561790568794463619194712aeeafab3c45177d213db85",
    "sql": "SELECT Name FROM musical WHERE Nominee = \"Bob Fosse\"",
    "linq": "context.Musicals.Where(row => row.Nominee == \"Bob Fosse\").Select(row => new { row.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fc79d77fe96969dc41af1497d0b9097c7ceeeea90324c6884ccd8c837f8b244c",
    "sql": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"",
    "linq": "context.Musicals.Where(row => row.Award != \"Tony Award\").Select(row => new { row.Nominee }).Distinct().ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9774d7a5e0b744d8bbe96e0f0957adba77738f8b3c859711f8ce49d63eed090b",
    "sql": "SELECT T1.Name , T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID",
    "linq": "context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).Select(row => new { T1Name = row.T1.Name, T2Name = row.T2.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cdefb60732e2fbf2ac26ab8a26168d321b791800092fe1dea828db71266ea098",
    "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = \"The Phantom of the Opera\"",
    "linq": "context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"The Phantom of the Opera\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c77d5171e89862daae30b5d0fdddf9400d3873a76cfadc3515f1b871fc295aa",
    "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC",
    "linq": "context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Year).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c45451da750349c6bdce1e831520d1d3d4abab40f4f8802fb3052977c87a32f3",
    "sql": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID",
    "linq": "context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MusicalId }).Select(group => new { group.First().T2.Name, Count = group.Count() }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ace48940053831fb38a642b09e10311f6b6122af95653fa0683b41cabcbea3a2",
    "sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3",
    "linq": "context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MusicalId }).Where(group => group.Count() >= 3).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6147b7f64cde13733b5ecffc5ce76dbe189d6170e5c8b95a9baaf232215f765b",
    "sql": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee",
    "linq": "context.Musicals.GroupBy(row => new { row.Nominee }).Select(group => new { group.Key.Nominee, Count = group.Count() }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b4df724627f6e0b55e92b17dda36bc4a77fddaee54a2a88a510c0091626e8b66",
    "sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Musicals.GroupBy(row => new { row.Nominee }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Nominee }).Take(1).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "74c0085c3d4b923452a9e4a670b718ae1481c61b98c5ed493193df09901ff2a0",
    "sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Musicals.GroupBy(row => new { row.Result }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Result }).Take(1).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "48bb22e56bf9c93f0e07db71eb69030835b537996c68f9e7c51cc5242beea67d",
    "sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2",
    "linq": "context.Musicals.GroupBy(row => new { row.Nominee }).Where(group => group.Count() > 2).Select(group => new { group.Key.Nominee }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "42226735de290cc0a23de92cdb979c915ecb431e9cf43ac5094ca0c34149bca5",
    "sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
    "linq": "context.Musicals.Where(row => !context.Actors.Select(row => row.MusicalId).Contains(row.MusicalId)).Select(row => new { row.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "41c2bfb33fad06f1404f7cfeb1304dd95a7fcc73b5eb181d6bed94262e82578d",
    "sql": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award = \"Drama Desk Award\"",
    "linq": "context.Musicals.Where(row => row.Award == \"Tony Award\").Select(row => row.Nominee).Intersect(context.Musicals.Where(row => row.Award == \"Drama Desk Award\").Select(row => row.Nominee)).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fdfcaae9436a89080cfcf9bd6eed3644982820a0daf358e920d73bf648a07dc0",
    "sql": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\"",
    "linq": "context.Musicals.Where(row => row.Award == \"Tony Award\" || row.Award == \"Cleavant Derricks\").Select(row => new { row.Nominee }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7611b6ba3e84b4dfb1e506184b6e399b1533d58f97eeca72b396da131f874ea9",
    "sql": "SELECT count(*) FROM farm",
    "linq": "context.Farms.Count();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "130a7195c897b521746c67578217581de7926e77222d68467e69dfc429e20ac3",
    "sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
    "linq": "context.Farms.OrderBy(row => row.TotalHorses).Select(row => new { row.TotalHorses }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fa8f8cce107c8d374c402636c188786596d50cbc408354863518bed02c548dff",
    "sql": "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens'",
    "linq": "context.FarmCompetitions.Where(row => row.Theme != \"Aliens\").Select(row => new { row.Hosts }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8eef625b575f1e3df938608e201ac1f5b6f371f2afe0ec2ad08a5537e7ee167a",
    "sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
    "linq": "context.FarmCompetitions.OrderBy(row => row.Year).Select(row => new { row.Theme }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "81ceb4b1df8a3f433d6d376a407429850b9e1520d11146f35add55094c3256df",
    "sql": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses > 5000",
    "linq": "context.Farms.Where(row => row.TotalHorses > 5000).Select(row => (double) row.WorkingHorses).Average();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "695e4740146b431f3161efced91b5913be512dd324408a4d9f098bfe340609c6",
    "sql": "SELECT max(Cows) , min(Cows) FROM farm",
    "linq": "context.Farms.GroupBy(row => 1).Select(group => new { MaxCows = group.Select(row => row.Cows).Max(), MinCows = group.Select(row => row.Cows).Min() }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ca49735558ef8b0dc898fb05ee1f5d4950911375106fb9bc7fb873811028c2a9",
    "sql": "SELECT count(DISTINCT Status) FROM city",
    "linq": "context.Cities.Select(row => row.Status).Distinct().Count();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d1c0887ef3dbfbc4c78732f6954c1fa81460056ae9ff8c585b4a8690eea8aba5",
    "sql": "SELECT Official_Name FROM city ORDER BY Population DESC",
    "linq": "context.Cities.OrderByDescending(row => row.Population).Select(row => new { row.OfficialName }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4bee66dac14aacf7e23ba418ed4241ad41f95402116670858dc84bcd3ec89c28",
    "sql": "SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1",
    "linq": "context.Cities.OrderByDescending(row => row.Population).Select(row => new { row.OfficialName, row.Status }).Take(1).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2bca087a08f15910566ae5c50dbf5d6ce133bc8c41de02f41066e751df2a1805",
    "sql": "SELECT T2.Year , T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID",
    "linq": "context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Year, row.T1.OfficialName }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "07f3833c09b12fbd1bdce06bf9c62e904ababfb29574a0cdf8917e3fd7f74e6e",
    "sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1",
    "linq": "context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.HostCityId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.OfficialName }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5dffe0cca78565a9ad1f5153c7fcd06cbf95b8f21c86d426b57d453a9d91f3d0",
    "sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.HostCityId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Status }).Take(1).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "46ff42fc79402fde9369ca43ef4e517cb4038e5b8c209e89a78980c6778ed40f",
    "sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000",
    "linq": "context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Population > 1000).Select(row => new { row.T2.Theme }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "654b9cb405a9f9b0ecf098893c90a7b17357c831f4b645cdfff4c17c498cc07e",
    "sql": "SELECT Status , avg(Population) FROM city GROUP BY Status",
    "linq": "context.Cities.GroupBy(row => new { row.Status }).Select(group => new { group.Key.Status, AveragePopulation = group.Select(row => row.Population).Average() }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a2c5511e099c201d94d3259e8ca19b5bc254ff1bd9bdaf3b13370aa9f0d1d9d4",
    "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
    "linq": "context.Cities.GroupBy(row => new { row.Status }).OrderBy(group => group.Count()).Select(group => new { group.Key.Status }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b34f52ab1b195b00caaa5bf6b1f6246433133f2846df4c784d3c026252c58a76",
    "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Cities.GroupBy(row => new { row.Status }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Status }).Take(1).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "df902b31806d5827b55e6a0052be2064e0b4b4a37c61a2c082bd8d201842101f",
    "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
    "linq": "context.Cities.Where(row => !context.FarmCompetitions.Select(row => row.HostCityId).Contains(row.CityId)).Select(row => new { row.OfficialName }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4e8b429b8b544f1796abca5e480c9bdfc56598473a002a7f0f13a48a942d2fff",
    "sql": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500",
    "linq": "context.Cities.Where(row => row.Population > 1500).Select(row => row.Status).Intersect(context.Cities.Where(row => row.Population < 500).Select(row => row.Status)).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0123b6a5b3397d206528689fbffd3f2d0583d88964433ab44dbb9ee2cff6997c",
    "sql": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500",
    "linq": "context.Cities.Where(row => row.Population > 1500 || row.Population < 500).Select(row => new { row.OfficialName }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2c66517f1935dbb50e807819fc50f155f7aecb22472ad0d732f60ad3161ff6c7",
    "sql": "SELECT Census_Ranking FROM city WHERE Status != \"Village\"",
    "linq": "context.Cities.Where(row => row.Status != \"Village\").Select(row => new { row.CensusRanking }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "99632060a0985419450fd9b0ddac02cef3fecc000c8fb74c5357203c8fe765c0",
    "sql": "SELECT count(*) FROM game WHERE season > 2007",
    "linq": "context.Games.Where(row => row.Season > 2007).Count();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "be84eb7f02a013ec97f19f22ff5ec1fd4307146fcb371bedc966bc5414ad523e",
    "sql": "SELECT Date FROM game ORDER BY home_team DESC",
    "linq": "context.Games.OrderByDescending(row => row.HomeTeam).Select(row => new { row.Date }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0bde5330b20d6b158058a291f55758606df07f52ad00ce109e3c167ffd324dae",
    "sql": "SELECT season , home_team , away_team FROM game",
    "linq": "context.Games.Select(row => new { row.Season, row.HomeTeam, row.AwayTeam }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "38379e463b56cd8cf09b9e7cbf3c2d44b3b913848eee5040a09d223d9082d490",
    "sql": "SELECT max(home_games) , min(home_games) , avg(home_games) FROM stadium",
    "linq": "context.Stadia.GroupBy(row => 1).Select(group => new { MaxHomeGames = group.Select(row => row.HomeGames).Max(), MinHomeGames = group.Select(row => row.HomeGames).Min(), AverageHomeGames = group.Select(row => row.HomeGames).Average() }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1a3e25cced547d2877bddfaad26094fb347cd456440a08aa83649bdd9b11a2db",
    "sql": "SELECT average_attendance FROM stadium WHERE capacity_percentage > 100",
    "linq": "context.Stadia.Where(row => row.CapacityPercentage > 100).Select(row => new { row.AverageAttendance }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2696522c469e03ff68cf4e9c9968606846ae6914fb6218db934ab827a080e97f",
    "sql": "SELECT player , number_of_matches , SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
    "linq": "context.InjuryAccidents.Where(row => row.Injury != \"Knee problem\").Select(row => new { row.Player, row.NumberOfMatches, row.Source }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "385af732ff14d21a507cc2d550d5765eb7dbf2a9ade293787c9deda19853eb78",
    "sql": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'",
    "linq": "context.Games.Join(context.InjuryAccidents, T1 => T1.Id, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Player == \"Walter Samuel\").Select(row => new { row.T1.Season }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "540aa23329d79ecb8f4a725a097751b73f3a0ef54f176317f2dad0cc95109b1f",
    "sql": "SELECT T1.id , T1.score , T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING count(*) >= 2",
    "linq": "context.Games.Join(context.InjuryAccidents, T1 => T1.Id, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Score, group.First().T1.Date }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "88514e67e57c76b48a0c480ef0b16bd4678fce9f74a76f5080141fe6bca5a9eb",
    "sql": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Stadia.Join(context.Games, T1 => T1.Id, T2 => T2.StadiumId, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T2.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name }).Take(1).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "49ac71a7b52211e4a516a3ea9243dd4b6b0bc2d0ad7cb130727b16acee2578b1",
    "sql": "SELECT T1.season , T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'",
    "linq": "context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Injury == \"Foot injury\" || row.T3.Injury == \"Knee problem\").Select(row => new { row.T1.Season, row.T2.Name }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2600565b71d709d89abca38029d08fe65bd3b6d382693699895f3728903953e7",
    "sql": "SELECT count(DISTINCT SOURCE) FROM injury_accident",
    "linq": "context.InjuryAccidents.Select(row => row.Source).Distinct().Count();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "939dd8d17c3bdd7408f1e3b7b7d93f93f4e6b95369b132cda2f8a8a5a4e88c46",
    "sql": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
    "linq": "context.Games.Where(row => !context.InjuryAccidents.Select(row => row.GameId).Contains(row.Id)).Count();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a532e44d3b02117f19f05babede6dfa1cbb03281b49d0652d246dca4a3431192",
    "sql": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010",
    "linq": "context.InjuryAccidents.Join(context.Games, T1 => T1.GameId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Season > 2010).Select(row => row.T1.Injury).Distinct().Count();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9efd781d0efb37c03dea430c96bd3863fa6620e0bc16da7cb410f393f1c6fa3e",
    "sql": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'",
    "linq": "context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Player == \"Walter Samuel\").Select(row => row.T2.Name).Intersect(context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Player == \"Thiago Motta\").Select(row => row.T2.Name)).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9b9a9c9b1722ae1a252e6e711c189ff7bc1b20b6760eefb627dd2bc050bd94e8",
    "sql": "SELECT name , average_attendance , total_attendance FROM stadium EXCEPT SELECT T2.name , T2.average_attendance , T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id",
    "linq": "context.Stadia.Where(row => row.AverageAttendance.HasValue && row.TotalAttendance.HasValue).Select(row => new { row.Name, AverageAttendance = row.AverageAttendance.Value, TotalAttendance = row.TotalAttendance.Value }).Except(context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.AverageAttendance.HasValue && row.T2.TotalAttendance.HasValue).Select(row => new { row.T2.Name, T2AverageAttendance = row.T2.AverageAttendance.Value, T2TotalAttendance = row.T2.TotalAttendance.Value })).ToList();",
    "db_name": "game_injury",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,12): error CS1929: 'IQueryable<<anonymous type: string Name, double AverageAttendance, double TotalAttendance>>' does not contain a definition for 'Except' and the best extension method overload 'ParallelEnumerable.Except<<anonymous type: string Name, double T2AverageAttendance, double T2TotalAttendance>>(ParallelQuery<<anonymous type: string Name, double T2AverageAttendance, double T2TotalAttendance>>, IEnumerable<<anonymous type: string Name, double T2AverageAttendance, double T2TotalAttendance>>)' requires a receiver of type 'System.Linq.ParallelQuery<<anonymous type: string Name, double T2AverageAttendance, double T2TotalAttendance>>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    150 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.40",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d0c20cc2698213419941a06570e7b88aeb6720a8381ebf875a1d1d1230bafb2e",
    "sql": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"",
    "linq": "context.Stadia.Where(row => EF.Functions.Like(row.Name, \"%Bank%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8a8f35ee3d00936a86470b3ad81344e196bff59271f66c10f9ed445b2dfe890f",
    "sql": "SELECT T1.id , count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id",
    "linq": "context.Stadia.Join(context.Games, T1 => T1.Id, T2 => T2.StadiumId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Select(group => new { group.Key.Id, Count = group.Count() }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6669fe1608a316eeaea939b0100037a85b49f41aa4617d6a3492679e30cb17c9",
    "sql": "SELECT T1.date , T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.season DESC",
    "linq": "context.Games.Join(context.InjuryAccidents, T1 => T1.Id, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Season).Select(row => new { row.T1.Date, row.T2.Player }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ae1825e28e50d6691926d53e4aa646aa5b43356dad4d97eb61edde3f61e9ba28",
    "sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;",
    "linq": "context.Departments.GroupBy(row => new { row.DepartmentId }).OrderByDescending(group => group.Count(row => row.DepartmentId != null)).Select(group => new { group.First().Name }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "adf896d270166de24adb776b079480f2515512b468b84486e8b7763f06097a14",
    "sql": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
    "linq": "context.Departments.GroupBy(row => new { row.DepartmentId }).OrderBy(group => group.Count(row => row.DepartmentId != null)).Select(group => new { group.First().Head }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "be9cab9f8a4dd6f9a77006c324a2bf4ffb53244ebcd5dd45b24ed60cdf843c2f",
    "sql": "SELECT T2.name , T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
    "linq": "context.Departments.Join(context.Physicians, T1 => T1.Head, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DepartmentId }).OrderBy(group => group.Count(row => row.T1.DepartmentId != null)).Select(group => new { group.First().T2.Name, group.First().T2.Position }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4e2be4b0ba653e5a464b06df2896257678c031fadc13cb582374a1c7e05b5e32",
    "sql": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn",
    "linq": "context.Appointments.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d944f391957725b8801e03b4b2317aecf2c644f177d2d6aed402dc1264dac735",
    "sql": "SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count(*) > 1",
    "linq": "context.Appointments.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Patient }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.Name, group.First().T2.Phone }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "45347cfa120fdc0e945387a901e41cbbecc97844a39c2a183decbfa8a00c079b",
    "sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1",
    "linq": "context.Appointments.OrderByDescending(row => row.Start).Select(row => new { row.AppointmentId }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aa6e7d8c725bccd61513958d7c27da211e822571dc29fd17f276cc025bf792f9",
    "sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID",
    "linq": "context.Appointments.Join(context.Physicians, T1 => T1.Physician, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ff45efc335e62b43c0bd354ab82e49b01fb767b02fe925750b630c2fafe2aab8",
    "sql": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID",
    "linq": "context.Physicians.Select(row => row.Name).Except(context.Appointments.Join(context.Physicians, T1 => T1.Physician, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Select(row => row.T2.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "540032a9a754a84ae98b324490637185b489e88b7ce38681a92d61a8ecfc1080",
    "sql": "SELECT T1.name , T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1",
    "linq": "context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.PrimaryAffiliation == true).Select(row => new { T1Name = row.T1.Name, T3Name = row.T3.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e7bd398d5391fe12f6042afe7b7ebf1bd06e35615154107356a1253b05d04352",
    "sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1",
    "linq": "context.Patients.Join(context.Appointments, T1 => T1.Ssn, T2 => T2.Patient, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Start).Select(row => new { row.T1.Name }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1bd6c4b11b1b1d75467a414762014f879302468c24fc2df68c38a33d4141b0ff",
    "sql": "SELECT count(patient) FROM stay WHERE room = 112",
    "linq": "context.Stays.Where(row => row.Room == 112).Select(row => row.Patient).Count();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fa606e15cc632e5ce62efbc4ab90fc00865be1fca3afa7a88781aaf69ec5aa3b",
    "sql": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid WHERE T3.name = \"John Dorian\"",
    "linq": "context.Patients.Join(context.Prescribes, T1 => T1.Ssn, T2 => T2.Patient, (T1, T2) => new { T1, T2 }).Join(context.Physicians, joined => joined.T2.Physician, T3 => T3.EmployeeId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"John Dorian\").Select(row => row.T1.Ssn).Count();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5ca9fbf13757e609f20664d860db543a90bfbc8daadf0685c5113b6400eb78bb",
    "sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code WHERE room = 111",
    "linq": "context.Stays.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).Join(context.Prescribes, joined => joined.T2.Ssn, T3 => T3.Patient, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Medications, joined => joined.T3.Medication, T4 => T4.Code, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T1.Room == 111).Select(row => new { row.T4.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8ad657f88bcb5e48be18498785740e814e2dcc956a72a908aa1badf91a5fea5d",
    "sql": "SELECT patient FROM stay WHERE room = 111 ORDER BY staystart DESC LIMIT 1",
    "linq": "context.Stays.Where(row => row.Room == 111).OrderByDescending(row => row.StayStart).Select(row => new { row.Patient }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "65c043972c6c87f2469fe0d820b64b2deaa9ee9226f447151828dc4527691bef",
    "sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Nurses.Join(context.Appointments, T1 => T1.EmployeeId, T2 => T2.PrepNurse, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EmployeeId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c4046a3b186bb252fe17f7f7bfa11f4a2fbaddd13562d629a6db1836618470a3",
    "sql": "SELECT T1.name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
    "linq": "context.Physicians.Join(context.Patients, T1 => T1.EmployeeId, T2 => T2.Pcp, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EmployeeId }).Select(group => new { group.First().T1.Name, Count = group.Count() }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c3c769634d12e2043c24be1ff8052a4dada1a3a0a529205b1943b39eed403fd9",
    "sql": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count(*) > 1",
    "linq": "context.Physicians.Join(context.Patients, T1 => T1.EmployeeId, T2 => T2.Pcp, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EmployeeId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0c8a05bcf5bdf4bc0211e140ad05eba9e9aa6a0b29505cba8c236118b4c62a13",
    "sql": "SELECT count(*) , T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockfloor",
    "linq": "context.Blocks.Join(context.Rooms, T1 => new { Pair1 = T1.BlockFloor, Pair2 = T1.BlockCode }, T2 => new { Pair1 = T2.BlockFloor, Pair2 = T2.BlockCode }, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.BlockFloor }).Select(group => new { Count = group.Count(), group.Key.BlockFloor }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b755511304316423f41b91fc46e6f14d4665fea751013889bad8f0f2a4c3bea3",
    "sql": "SELECT count(*) , T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockcode",
    "linq": "context.Blocks.Join(context.Rooms, T1 => new { Pair1 = T1.BlockFloor, Pair2 = T1.BlockCode }, T2 => new { Pair1 = T2.BlockFloor, Pair2 = T2.BlockCode }, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.BlockCode }).Select(group => new { Count = group.Count(), group.Key.BlockCode }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a3f9915650cc4135d9894f5c766cd0992a316a9c8cb92315d96fad85f48d66e7",
    "sql": "SELECT DISTINCT blockcode FROM room WHERE unavailable = 0",
    "linq": "context.Rooms.Where(row => row.Unavailable == false).Select(row => new { row.BlockCode }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "45629dfa5c0080dec77ecfd1e52f0594c87fef9c6a835f2116803fecc244a7b4",
    "sql": "SELECT count(DISTINCT roomtype) FROM room",
    "linq": "context.Rooms.Select(row => row.RoomType).Distinct().Count();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "11bb88fc3255c8ec648c91b1f87bd022f1737468b805f92e87ad85c70a4779f9",
    "sql": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name = \"Thesisin\"",
    "linq": "context.Physicians.Join(context.Prescribes, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Medications, joined => joined.T2.Medication, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Thesisin\").Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9a256571c3a6ee2e762712bc1e97bf0353775be53cc96a834a95a39e55136df6",
    "sql": "SELECT DISTINCT T1.name , T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand = \"X\"",
    "linq": "context.Physicians.Join(context.Prescribes, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Medications, joined => joined.T2.Medication, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Brand == \"X\").Select(row => new { row.T1.Name, row.T1.Position }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "22056a8e29d7b01803167de0afa2f83806a8954568c950ce94c5a05ab6dd7f83",
    "sql": "SELECT count(*) , T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
    "linq": "context.Medications.Join(context.Prescribes, T1 => T1.Code, T2 => T2.Medication, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Brand }).Select(group => new { Count = group.Count(), group.First().T1.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dccd2c477a2c1195ea7aa66d7ca549926384cbe4c014f815fd8a00a25e8ad203",
    "sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
    "linq": "context.Physicians.Where(row => EF.Functions.Like(row.Position, \"%senior%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7f74170a6149ce32657d75293a2d9aaee8bee9752bb86fc272fdf2bbf29cb4b1",
    "sql": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
    "linq": "context.Undergoes.OrderBy(row => row.DateUndergoes).Select(row => new { row.Patient }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "827894f1718c8a360525aafd392c6f54e98289e8895f0ffd58f02bd4fe6742f5",
    "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID WHERE T3.room = 111",
    "linq": "context.Undergoes.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).Join(context.Stays, joined => joined.T1.Stay, T3 => T3.StayId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Room == 111).Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eba97db69cbc00bb3cc69f084385772518e53e5bc90d9c3817e413e464446938",
    "sql": "SELECT DISTINCT name FROM nurse ORDER BY name",
    "linq": "context.Nurses.OrderBy(row => row.Name).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6cbe2be39b5cafd80feb957877d6fd7131ffc62151f21facbe8cbc6d86f6105b",
    "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID",
    "linq": "context.Undergoes.Join(context.Nurses, T1 => T1.AssistingNurse, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9c8e6fda8f4cbd06603c3f828b70695d5a4d286750e02f3b230b29c9c7b71d51",
    "sql": "SELECT DISTINCT name FROM medication ORDER BY name",
    "linq": "context.Medications.OrderBy(row => row.Name).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0c7deefde8e9d579225bb9d2f55a1168bec552f93b4bdfae6d3983d47b496fa8",
    "sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
    "linq": "context.Physicians.Join(context.Prescribes, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Dose).Select(row => new { row.T1.Name }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d0e32887f9148d209acab39166646d92c7a886a0b813d6c49f22d85ed13d7158",
    "sql": "SELECT physician , department FROM affiliated_with WHERE primaryaffiliation = 1",
    "linq": "context.AffiliatedWiths.Where(row => row.PrimaryAffiliation == true).Select(row => new { row.Physician, row.Department }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d88f09120a049c5f02f00d9928114fa7404927734c60dc10b1a6dbb7734b5431",
    "sql": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation = 1",
    "linq": "context.AffiliatedWiths.Join(context.Departments, T1 => T1.Department, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PrimaryAffiliation == true).Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5eac9fdeb5ea12bf4aa07ad5d285d89028c287ccaac1e4cca072050b5f2bf2f3",
    "sql": "SELECT nurse FROM on_call WHERE blockfloor = 1 AND blockcode = 1",
    "linq": "context.OnCalls.Where(row => row.BlockFloor == 1 && row.BlockCode == 1).Select(row => new { row.Nurse }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1be046d294bb7b1e2b31991e86cb724d9b92618d633ba218f14b1dee35c2617f",
    "sql": "SELECT MAX(cost) , MIN(cost) , AVG(cost) FROM procedures",
    "linq": "context.Procedures.GroupBy(row => 1).Select(group => new { MaxCost = group.Select(row => row.Cost).Max(), MinCost = group.Select(row => row.Cost).Min(), AverageCost = group.Select(row => row.Cost).Average() }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3f8bf1267e8f42ca48feee81d9e714b0dbf98e4053adbdbb768de4708a60e9c3",
    "sql": "SELECT name , cost FROM procedures ORDER BY cost DESC",
    "linq": "context.Procedures.OrderByDescending(row => row.Cost).Select(row => new { row.Name, row.Cost }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "18da2c632a581a605956f6159960006b3df6b37daaf813d7951d69f440834011",
    "sql": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
    "linq": "context.Procedures.OrderBy(row => row.Cost).Select(row => new { row.Name }).Take(3).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2854e39833105cc20e0ab11a1da80d318f21c0a109e0d1ce0ee357053e14d754",
    "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000",
    "linq": "context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Cost > 5000).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0bf3dfcaa2ac750d83f4bd14f123fc5853cdc386deea6e3c231dd7d2249f1061",
    "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment ORDER BY T3.cost DESC LIMIT 1",
    "linq": "context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T3.Cost).Select(row => new { row.T1.Name }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "246385f890fc1e4d5d7d7a4e3c274a1943b11b1b008544c4648fbdfa6f8556c1",
    "sql": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
    "linq": "context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => (double) row.T3.Cost).Average();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a99ce334cc4a4832f0f3b6984a551d1bd8cdd30a3385dfdc0bacc51da9eba72e",
    "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
    "linq": "context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => new { row.T3.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7e91f542c5fea9d3bf5f15b35efe94cc46e9c554812bc885cab2776a0f84e2ba",
    "sql": "SELECT name FROM procedures WHERE cost > 1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
    "linq": "context.Procedures.Where(row => row.Cost > 1000).Select(row => row.Name).Union(context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => row.T3.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "64fad554833dc08bca14420c401c2b3c811d68cef8ef7e8ef4c151e4d33005f6",
    "sql": "SELECT name FROM procedures WHERE cost > 1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
    "linq": "context.Procedures.Where(row => row.Cost > 1000).Select(row => row.Name).Except(context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => row.T3.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c0594905e1bf561020e17f769bf8dffe2bbd72e5d3f702838d0be2a2aa9be955",
    "sql": "SELECT name FROM procedures WHERE cost < 5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
    "linq": "context.Procedures.Where(row => row.Cost < 5000).Select(row => row.Name).Intersect(context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => row.T3.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "abd98809c985a6e44c1d3f5044788c94f746479914dc4a7cc82518ed6819aeb3",
    "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Psychiatry'",
    "linq": "context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Surgery\").Select(row => row.T1.Name).Intersect(context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Psychiatry\").Select(row => row.T1.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5fc9b9aea2e7ec5e266c55f4d2be7efa36a4cfc1227eff142c70e26ae05f8e9e",
    "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'",
    "linq": "context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Surgery\" || row.T3.Name == \"Psychiatry\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d21e0e40a7b7447444bc1b087f9fd80ae2de81e27a72c7add30c5e14c3fc7e12",
    "sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code WHERE T3.name = 'Procrastin-X'",
    "linq": "context.Patients.Select(row => row.Name).Except(context.Patients.Join(context.Prescribes, T1 => T1.Ssn, T2 => T2.Patient, (T1, T2) => new { T1, T2 }).Join(context.Medications, joined => joined.T2.Medication, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Procrastin-X\").Select(row => row.T1.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b85c5d0640d3c9fad80d018c21eff2b92a6651774bb8961e005ea33fd06d728d",
    "sql": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication = T2.Code WHERE T2.name = 'Procrastin-X' )",
    "linq": "context.Patients.Where(row => !context.Prescribes.Join(context.Medications, T1 => T1.Medication, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Procrastin-X\").Select(row => row.T1.Patient).Contains(row.Ssn)).Count();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dcfc1b2bb34a639c91a9a0ed4357502ac8503ca47ce0121232f7abd33b5c7a09",
    "sql": "SELECT count(*) FROM appointment",
    "linq": "context.Appointments.Count();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aaf9049dc04520c708f9f3e3f51b252d4a9842d87382d2f7bcfe412ef5dfb5a0",
    "sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse",
    "linq": "context.Nurses.Join(context.OnCalls, T1 => T1.EmployeeId, T2 => T2.Nurse, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d05be14a43c13ab2c3f73a47abd74909267e5a9e0d6ab6f42d26da78b4612cb2",
    "sql": "SELECT sum(num_of_component) FROM furniture",
    "linq": "context.Furnitures.Select(row => row.NumOfComponent).Sum();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5d3b04a1f0df0267c50c9a0917fec15db9e7545d1629c27fb2759a34408aaa1c",
    "sql": "SELECT name , furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1",
    "linq": "context.Furnitures.OrderByDescending(row => row.MarketRate).Select(row => new { row.Name, row.FurnitureId }).Take(1).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3a0f83533fa7fa8f77ac27418d66fe43aa817ef715ce5bde9b095b8fc99ee2a1",
    "sql": "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2",
    "linq": "context.Furnitures.OrderByDescending(row => row.MarketRate).Select(row => row.MarketRate).Sum();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "179b3b1cbf911aa8f54390cc2dfb4d329ced7be8755a6883a58e999964dd7495",
    "sql": "SELECT Num_of_Component , name FROM furniture WHERE Num_of_Component > 10",
    "linq": "context.Furnitures.Where(row => row.NumOfComponent > 10).Select(row => new { row.NumOfComponent, row.Name }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "59207f7e04d67c555607c35d1d1cc703e44ce61796b6746f8808df896d63cf43",
    "sql": "SELECT name , Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1",
    "linq": "context.Furnitures.OrderBy(row => row.MarketRate).Select(row => new { row.Name, row.NumOfComponent }).Take(1).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "151139f239c7c98103f3d546979a799aaabad5ac563991dba01f85fdecae77e7",
    "sql": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID WHERE t2.Price_in_Dollar < (SELECT max(Price_in_Dollar) FROM furniture_manufacte)",
    "linq": "context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.PriceInDollar < context.FurnitureManufactes.Select(row => row.PriceInDollar).Max()).Select(row => new { row.t1.Name }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "54f1ce7f90157fd2c81b04556b314ba6de263a2341551d3f10f996c04c2f4b63",
    "sql": "SELECT open_year , name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",
    "linq": "context.Manufacturers.OrderByDescending(row => row.NumOfShops).Select(row => new { row.OpenYear, row.Name }).Take(1).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a4da6f32b52c1ddef37fbbb81655d722871b495e6212dc663ba89bc33d1900fe",
    "sql": "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops > 20",
    "linq": "context.Manufacturers.Where(row => row.NumOfShops > 20).Select(row => row.NumOfFactories).Average();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fcfa6ab3483a9c2c8821b2c46ea180f63a1aa645a4da78c24547c3286cdd1f94",
    "sql": "SELECT name , manufacturer_id FROM manufacturer ORDER BY open_year",
    "linq": "context.Manufacturers.OrderBy(row => row.OpenYear).Select(row => new { row.Name, row.ManufacturerId }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3c12cc107c4fdf08aee2f322927731817aaa54a5b9f5739dc5112c021e854c3d",
    "sql": "SELECT name , open_year FROM manufacturer WHERE num_of_shops > 10 OR Num_of_Factories < 10",
    "linq": "context.Manufacturers.Where(row => row.NumOfShops > 10 || row.NumOfFactories < 10).Select(row => new { row.Name, row.OpenYear }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a1f8c54fc8c91a31d76731732aab978fb824f90ce54a876f9d38e4d06b6fc8a9",
    "sql": "SELECT max(num_of_shops) , avg(Num_of_Factories) FROM manufacturer WHERE open_year < 1990",
    "linq": "context.Manufacturers.Where(row => row.OpenYear < 1990).GroupBy(row => 1).Select(group => new { MaxNumOfShops = group.Select(row => row.NumOfShops).Max(), AverageNumOfFactories = group.Select(row => row.NumOfFactories).Average() }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2c658ac20b96351a6df06dd1ce49d44875a0287122b733a689d94a897127345a",
    "sql": "SELECT t1.manufacturer_id , t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1",
    "linq": "context.Manufacturers.Join(context.FurnitureManufactes, t1 => t1.ManufacturerId, t2 => t2.ManufacturerId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t2.PriceInDollar).Select(row => new { row.t1.ManufacturerId, row.t1.NumOfShops }).Take(1).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8fc9905353b8719f5e52009d0509a1210c5ec1bc962bbfa73c730a84c95a5cb9",
    "sql": "SELECT count(*) , t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id",
    "linq": "context.Manufacturers.Join(context.FurnitureManufactes, t1 => t1.ManufacturerId, t2 => t2.ManufacturerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ManufacturerId }).Select(group => new { Count = group.Count(), group.First().t1.Name }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "76b9801e85457eb3d0d2344b2b7150fa219ebd1d3a162848fa94976e792d374c",
    "sql": "SELECT t1.name , t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID",
    "linq": "context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Select(row => new { row.t1.Name, row.t2.PriceInDollar }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1ee99ede2e0455aca3335387372912cbdecab8017235e6fea98f11c561cf71aa",
    "sql": "SELECT Market_Rate , name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)",
    "linq": "context.Furnitures.Where(row => !context.FurnitureManufactes.Select(row => row.FurnitureId).Contains(row.FurnitureId)).Select(row => new { row.MarketRate, row.Name }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6c82a59a9195e28c5f2828ca0bf7e69a433804cd4ee648d1699594a01b9072fc",
    "sql": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component < 6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component > 10",
    "linq": "context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Join(context.Manufacturers, joined => joined.t2.ManufacturerId, t3 => t3.ManufacturerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.NumOfComponent < 6).Select(row => row.t3.Name).Intersect(context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Join(context.Manufacturers, joined => joined.t2.ManufacturerId, t3 => t3.ManufacturerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.NumOfComponent > 10).Select(row => row.t3.Name)).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8942c304852d7134597e922c74c08e9407a8e3b40c9600d9a8f1d8b1049f9b49",
    "sql": "SELECT local_authority , services FROM station",
    "linq": "context.Stations.Select(row => new { row.LocalAuthority, row.Services }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e583fd22623ec8b4b06246a152f4faffb21c2e1daf4c2ca95433d4a47523abb",
    "sql": "SELECT train_number , name FROM train ORDER BY TIME",
    "linq": "context.Trains.OrderBy(row => row.Time).Select(row => new { row.TrainNumber, row.Name }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b8edb8933e3bbac9070febbae99ef266a5e37ad75297a1c145f20d030031e809",
    "sql": "SELECT TIME , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME",
    "linq": "context.Trains.Where(row => row.Destination == \"Chennai\").OrderBy(row => row.Time).Select(row => new { row.Time, row.TrainNumber }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d08d8318b83ba6613e0b69732f10c52227e1078b506c61b825fb4885ef20018c",
    "sql": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"",
    "linq": "context.Trains.Where(row => EF.Functions.Like(row.Name, \"%Express%\")).Count();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "15a583260a0bd25610e12a5c75441b5be3bc628c699691ea0692f6827d434942",
    "sql": "SELECT train_number , TIME FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur'",
    "linq": "context.Trains.Where(row => row.Origin == \"Chennai\" && row.Destination == \"Guruvayur\").Select(row => new { row.TrainNumber, row.Time }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ffbabfb3278db3b32ea9811331c660b32915f5f3596f411221eefcf9c1310114",
    "sql": "SELECT origin , count(*) FROM train GROUP BY origin",
    "linq": "context.Trains.GroupBy(row => new { row.Origin }).Select(group => new { group.Key.Origin, Count = group.Count() }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ba23d2e9a90e31f66e2de58e143f78a73278f3ab48198b1c9c1d1072f2894baa",
    "sql": "SELECT avg(high_temperature) , day_of_week FROM weekly_weather GROUP BY day_of_week",
    "linq": "context.WeeklyWeathers.GroupBy(row => new { row.DayOfWeek }).Select(group => new { AverageHighTemperature = group.Select(row => row.HighTemperature).Average(), group.Key.DayOfWeek }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ab94ce2b1359478f692e94eaa4f8d0772de58f5f94f0a40c84c611074a3d51f7",
    "sql": "SELECT max(t1.low_temperature) , avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = \"Amersham\"",
    "linq": "context.WeeklyWeathers.Join(context.Stations, t1 => t1.StationId, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t2.NetworkName == \"Amersham\").GroupBy(row => 1).Select(group => new { MaxLowTemperature = group.Select(row => row.t1.LowTemperature).Max(), AveragePrecipitation = group.Select(row => row.t1.Precipitation).Average() }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "49e84383a22934549e82cca9d12c2de212aaeb2acc09545aadfeb4828c8879e5",
    "sql": "SELECT count(DISTINCT services) FROM station",
    "linq": "context.Stations.Select(row => row.Services).Distinct().Count();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5fc4055141e923983530483b0cf922fd5b05c51dd0914322ad5d3364af174931",
    "sql": "SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1",
    "linq": "context.WeeklyWeathers.Join(context.Stations, t1 => t1.StationId, t2 => t2.Id, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.StationId }).OrderByDescending(group => group.Average(row => row.t1.HighTemperature)).Select(group => new { group.First().t2.Id, group.First().t2.LocalAuthority }).Take(1).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4544518955c6fa32d5dac523be5c170f8dd2b1a916e7e79be8aad712f9be360e",
    "sql": "SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id HAVING max(t1.precipitation) > 50",
    "linq": "context.WeeklyWeathers.Join(context.Stations, t1 => t1.StationId, t2 => t2.Id, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.StationId }).Where(group => group.Max(row => row.t1.Precipitation) > 50).Select(group => new { group.First().t2.Id, group.First().t2.LocalAuthority }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f502fd6167c9da7f86532bb5c1a48beecd98168e07adb0475264e4e0bce5ed5e",
    "sql": "SELECT min(low_temperature) , max(wind_speed_mph) FROM weekly_weather",
    "linq": "context.WeeklyWeathers.GroupBy(row => 1).Select(group => new { MinLowTemperature = group.Select(row => row.LowTemperature).Min(), MaxWindSpeedMph = group.Select(row => row.WindSpeedMph).Max() }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c66f27b24ad82c9438dcbcfcd6f283e82442bf7ade4155bc9bcbb43900ac0350",
    "sql": "SELECT origin FROM train GROUP BY origin HAVING count(*) > 1",
    "linq": "context.Trains.GroupBy(row => new { row.Origin }).Where(group => group.Count() > 1).Select(group => new { group.Key.Origin }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "33ba0344822a59e61679d0cca03dd5d3ecbd34c2d2f17a39e94b4e33b250bf33",
    "sql": "SELECT count(*) FROM perpetrator",
    "linq": "context.Perpetrators.Count();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a261cb42d7ec5cdb20d31ecae9707a2517b361ece4ad20170216124e4de17810",
    "sql": "SELECT Date FROM perpetrator ORDER BY Killed DESC",
    "linq": "context.Perpetrators.OrderByDescending(row => row.Killed).Select(row => new { row.Date }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "babbcc91377d26da885dba07784297cb5605a4e20233444cfd38d38c975896fd",
    "sql": "SELECT Injured FROM perpetrator ORDER BY Injured ASC",
    "linq": "context.Perpetrators.OrderBy(row => row.Injured).Select(row => new { row.Injured }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "735a97644b89f068499c7697a69d44df6b3bfe7a69df63fb36b2b949ee0fed46",
    "sql": "SELECT avg(Injured) FROM perpetrator",
    "linq": "context.Perpetrators.Select(row => row.Injured).Average();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3e6ae0871d519f94fd9a680ac933e619f724225626ad6395818f7338995fbe34",
    "sql": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1",
    "linq": "context.Perpetrators.OrderByDescending(row => row.Killed).Select(row => new { row.Location }).Take(1).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "30d819b1b840dae92dced4f9095a35c8231503ca7b22f13ef1f3f293670e32e0",
    "sql": "SELECT Name FROM People ORDER BY Height ASC",
    "linq": "context.People.OrderBy(row => row.Height).Select(row => new { row.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ac66d68d215a1ca917b818779396b758b9dfa98c7da87094ee372b72f46fc228",
    "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID",
    "linq": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "442d0a57c8b6e8bfbe3d74571d308c58bacee09fbdc718c9a8538b02b89d3861",
    "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country != \"China\"",
    "linq": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country != \"China\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c634f43333c975cecf2470b4fbbd84db0c798ee5ebbb50cb39a57c5af12587db",
    "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1",
    "linq": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Weight).Select(row => new { row.T1.Name }).Take(1).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8afef1d5abdc35b6306d66cc37c8e8e481a4a947ee2f998ae2e4d0833de6f7c2",
    "sql": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84",
    "linq": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Height > 1.84).Select(row => row.T2.Killed).Sum();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f90e3886c754f329cd1481e6e358d6d5ec9ad6d347a7a3a7efd8a3f4371421f4",
    "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = \"China\" OR T2.Country = \"Japan\"",
    "linq": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country == \"China\" || row.T2.Country == \"Japan\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bac20817f471e5e804333a2abf401d968adbe1c700f3374c930d7a76a212ba3b",
    "sql": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Injured DESC",
    "linq": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Injured).Select(row => new { row.T1.Height }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f57e7cfbcd41e9a83ec7cb67997299fd0ea44e9d5b7c4a753ef4eeff2e69bbc2",
    "sql": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country",
    "linq": "context.Perpetrators.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c06dbdc83592ab316353fdfed376f65c2fd7049e9b00b5ed1d6883f4efc63ec7",
    "sql": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Perpetrators.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4c5a80538f39c8b997d2ea440cdb647ac4c8f964460171a294e8acdcd0f63bbb",
    "sql": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*) >= 2",
    "linq": "context.Perpetrators.GroupBy(row => new { row.Country }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6ece29db1731c46c8b33021bc61306d5c9695a16c2e8aa3a6a7d0fff2d30bc98",
    "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Year DESC",
    "linq": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Year).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ad677bdd00761241044b03e0333513c21b5532119d9401419aef0f4210f2a89b",
    "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)",
    "linq": "context.People.Where(row => !context.Perpetrators.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eb3b3a968b1651cdd6d6a64cc3a7b4699f847253b9b70cbbb473631f086ce024",
    "sql": "SELECT Country FROM perpetrator WHERE Injured > 50 INTERSECT SELECT Country FROM perpetrator WHERE Injured < 20",
    "linq": "context.Perpetrators.Where(row => row.Injured > 50).Select(row => row.Country).Intersect(context.Perpetrators.Where(row => row.Injured < 20).Select(row => row.Country)).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ab409222b8dd111ab9cbeaa3f02231bd3d5f1d8d74de52b2b931c6c5abacb46e",
    "sql": "SELECT count(DISTINCT LOCATION) FROM perpetrator",
    "linq": "context.Perpetrators.Select(row => row.Location).Distinct().Count();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8bd762c81c4a9ca76785b6ea92dfe6218d6f6f8c0f407d3a75ebdd90de8a0242",
    "sql": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "linq": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Height).Select(row => new { row.T2.Date }).Take(1).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7ebad5b4d6de582ea87d3d64fa2e5e9304b2691f09f74524705c6ceadf34344a",
    "sql": "SELECT max(YEAR) FROM perpetrator;",
    "linq": "context.Perpetrators.Select(row => row.Year).Max();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "758c94fe1f5b3e4e7bb0af0e88d89ab6ea6e2fa1cfc04dced211931b29239d21",
    "sql": "SELECT count(*) FROM region",
    "linq": "context.Regions.Count();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6e1354b69aa0e4a7929651cfbc606ca34b403830454c77706a14518d29e9cfe0",
    "sql": "SELECT region_code , region_name FROM region ORDER BY region_code",
    "linq": "context.Regions.OrderBy(row => row.RegionCode).Select(row => new { row.RegionCode, row.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "13db6617cd14e8ab28c86b6af4173d418e3a5d100b2554120dc05e2af1e9121f",
    "sql": "SELECT region_name FROM region ORDER BY region_name",
    "linq": "context.Regions.OrderBy(row => row.RegionName).Select(row => new { row.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cf6384981821a715fd85c9e82f375f53f6a5eb769b47aed950abe90486f4f37c",
    "sql": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
    "linq": "context.Regions.Where(row => row.RegionName != \"Denmark\").Select(row => new { row.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c558482e5d6e5260619c43152df7dcc0aef5f6ccf391d994b29ecbfe7f8a302d",
    "sql": "SELECT count(*) FROM storm WHERE Number_Deaths > 0",
    "linq": "context.Storms.Where(row => row.NumberDeaths > 0).Count();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ae7ad71d9caddedf3924aaf6c5e332af946f05408eba332593ad222f02262c2b",
    "sql": "SELECT name , dates_active , number_deaths FROM storm WHERE number_deaths >= 1",
    "linq": "context.Storms.Where(row => row.NumberDeaths >= 1).Select(row => new { row.Name, row.DatesActive, row.NumberDeaths }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7524933ae30fa90e7d07f0c9541e20b2a239f0ffdbcf8364b53e2ee627139868",
    "sql": "SELECT avg(damage_millions_USD) , max(damage_millions_USD) FROM storm WHERE max_speed > 1000",
    "linq": "context.Storms.Where(row => row.MaxSpeed > 1000).GroupBy(row => 1).Select(group => new { AverageDamageMillionsUsd = group.Select(row => row.DamageMillionsUsd).Average(), MaxDamageMillionsUsd = group.Select(row => row.DamageMillionsUsd).Max() }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "192ba78bac0cc3dbb2d4ceaa1a30be790d18ab98c16629de3ee09114ae169169",
    "sql": "SELECT sum(number_deaths) , sum(damage_millions_USD) FROM storm WHERE max_speed > (SELECT avg(max_speed) FROM storm)",
    "linq": "context.Storms.Where(row => row.MaxSpeed > context.Storms.Select(row => row.MaxSpeed).Average()).GroupBy(row => 1).Select(group => new { SumNumberDeaths = group.Select(row => row.NumberDeaths).Sum(), SumDamageMillionsUsd = group.Select(row => row.DamageMillionsUsd).Sum() }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4d0c8356a4bf4b6bdb1905264285eed35e109f4ab7f5a06fe739a3c8b55ebea3",
    "sql": "SELECT name , damage_millions_USD FROM storm ORDER BY max_speed DESC",
    "linq": "context.Storms.OrderByDescending(row => row.MaxSpeed).Select(row => new { row.Name, row.DamageMillionsUsd }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2dea216903d5dc6778b1172c7314f6759f7717c9b039c5dc3f3ef67c7ce7e413",
    "sql": "SELECT count(DISTINCT region_id) FROM affected_region",
    "linq": "context.AffectedRegions.Select(row => row.RegionId).Distinct().Count();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6c82c5e72c663722eb75ddf424c5c2c27c96460c8e8576dc2bd4e5556298a721",
    "sql": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
    "linq": "context.Regions.Where(row => !context.AffectedRegions.Select(row => row.RegionId).Contains(row.RegionId)).Select(row => new { row.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fdd55d91608dc9ca56b6729e67a1a91c39aceeaad9d7f5d2e0ed77af5b83f4b1",
    "sql": "SELECT T1.region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
    "linq": "context.Regions.Join(context.AffectedRegions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.RegionId }).Select(group => new { group.First().T1.RegionName, Count = group.Count() }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c78f86698bd9a34ff4b7fa4891a9722af8a80e0065949ca2bf1abbdccb62c513",
    "sql": "SELECT T1.name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id",
    "linq": "context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).Select(group => new { group.First().T1.Name, Count = group.Count() }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "46629e391189f666a76f22cf76b4de2977c889afbee2bb2158d004b2bf1632c1",
    "sql": "SELECT T1.name , T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name, group.First().T1.MaxSpeed }).Take(1).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "25d2182025a06318090c028b688f1d24bdec9a1171fdedb3c9d9af971951338f",
    "sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)",
    "linq": "context.Storms.Where(row => !context.AffectedRegions.Select(row => row.StormId).Contains(row.StormId)).Select(row => new { row.Name }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9682e55890904ba353d8170a0c0ed1aab1421814c0945cee76d876e6c8aa14ca",
    "sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected) >= 10",
    "linq": "context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).Where(group => group.Count() >= 2).Select(group => group.First().T1.Name).Intersect(context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).Where(group => group.Sum(row => row.T2.NumberCityAffected) >= 10).Select(group => group.First().T1.Name)).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6cdafa1da91a988c28efe2e1a2a1a73ea4eeb8e80128c6fb382ee6f905a8c71f",
    "sql": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2",
    "linq": "context.Storms.Select(row => row.Name).Except(context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).Where(group => group.Count() >= 2).Select(group => group.First().T1.Name)).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "293996eb24fa151381e3b25a019a949458727526e4d791292fea19d2197e5899",
    "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10",
    "linq": "context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.NumberDeaths >= 10).Select(row => new { row.T2.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cdd929691098e8936f567950d9cd4980592b672207b013b5e8dbd02969a0b6cc",
    "sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark'",
    "linq": "context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.RegionName == \"Denmark\").Select(row => new { row.T3.Name }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fcca1b5ec9c51440caac2a400befc00a26cf68156703c19e2969443b9f630989",
    "sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*) >= 2",
    "linq": "context.Regions.Join(context.AffectedRegions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.RegionId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "daa777b6d5110190e74a400373b9dd930159695ceccb6bc0d89e06ad7623443d",
    "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1",
    "linq": "context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T3.NumberDeaths).Select(row => new { row.T2.RegionName }).Take(1).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6ea26cd95f3d179d7268d1601c9664fb6113c00bf87f1b33f90346ad1727d7db",
    "sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'",
    "linq": "context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.RegionName == \"Afghanistan\").Select(row => row.T3.Name).Intersect(context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.RegionName == \"Albania\").Select(row => row.T3.Name)).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3622e009aa0d2a67215c55e5c683af0a81c5988bb0df23fd958fad1561350470",
    "sql": "SELECT founder FROM manufacturers WHERE name = 'Sony'",
    "linq": "context.Manufacturers.Where(row => row.Name == \"Sony\").Select(row => new { row.Founder }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "71828f9a0fc479c390e818acc92573085add724e5f1baaee97cb34f71d745ea5",
    "sql": "SELECT headquarter FROM manufacturers WHERE founder = 'James'",
    "linq": "context.Manufacturers.Where(row => row.Founder == \"James\").Select(row => new { row.Headquarter }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "46073425ea2007fdb7463e3cbaca6795802a385152a45477e42e6f7a60444693",
    "sql": "SELECT name , headquarter FROM manufacturers ORDER BY revenue DESC",
    "linq": "context.Manufacturers.OrderByDescending(row => row.Revenue).Select(row => new { row.Name, row.Headquarter }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "518b05d675e89ee9b40696c7ae0a62aa8fa5d52ad293ea52c15a61b47d2b5b12",
    "sql": "SELECT avg(revenue) , max(revenue) , sum(revenue) FROM manufacturers",
    "linq": "context.Manufacturers.GroupBy(row => 1).Select(group => new { AverageRevenue = group.Select(row => row.Revenue).Average(), MaxRevenue = group.Select(row => row.Revenue).Max(), SumRevenue = group.Select(row => row.Revenue).Sum() }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "194c08cb896cfe7c23ba2a4a073d1528f908d42e15300dcff7915eb4c11ba87e",
    "sql": "SELECT count(*) FROM manufacturers WHERE founder = 'Andy'",
    "linq": "context.Manufacturers.Where(row => row.Founder == \"Andy\").Count();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f3389e7cefc79a5fa5b4cc9d3d1004d45f73bb51a046ea3ddedaaeeeea31d243",
    "sql": "SELECT sum(revenue) FROM manufacturers WHERE headquarter = 'Austin'",
    "linq": "context.Manufacturers.Where(row => row.Headquarter == \"Austin\").Select(row => row.Revenue).Sum();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c50c546658231c84eb9b046f63322209837a5b09e62bc5a4de21c6cfc5ce8d15",
    "sql": "SELECT DISTINCT headquarter FROM manufacturers",
    "linq": "context.Manufacturers.Select(row => new { row.Headquarter }).Distinct().ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ff09bffe861b44bd59ab9301a9f1b4d29fdbff64e18e05ce465ee13028c979d5",
    "sql": "SELECT count(*) FROM manufacturers WHERE headquarter = 'Tokyo' OR headquarter = 'Beijing'",
    "linq": "context.Manufacturers.Where(row => row.Headquarter == \"Tokyo\" || row.Headquarter == \"Beijing\").Count();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "42aeb8c4e3ca2cb4eab9c845dfd58436eeb6eadce2c35ab57582fdb23295165c",
    "sql": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'",
    "linq": "context.Manufacturers.Where(row => EF.Functions.Like(row.Name, \"S%\")).Select(row => new { row.Founder }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3503985edff6586b24a2752feff23ab27897ee6318bf60f758ae9a1867594590",
    "sql": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150",
    "linq": "context.Manufacturers.Where(row => row.Revenue >= 100 && row.Revenue <= 150).Select(row => new { row.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a11934d38f928bf2af1b1792d978485d4fe28e060c6a5da2a243570cd134dea8",
    "sql": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter = 'Tokyo' OR Headquarter = 'Taiwan'",
    "linq": "context.Manufacturers.Where(row => row.Headquarter == \"Tokyo\" || row.Headquarter == \"Taiwan\").Select(row => row.Revenue).Sum();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "855c19080d64e1a329d516c37d7a2af748cf7ef69e94fd3b479d04264a4b9065",
    "sql": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony'",
    "linq": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Creative Labs\").Select(row => row.T1.Name).Intersect(context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Sony\").Select(row => row.T1.Name)).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7debd6c36e2118d43e637769d42af11bcb3ed3e8508d52904d43b9788e48dd23",
    "sql": "SELECT name , headquarter , founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",
    "linq": "context.Manufacturers.OrderByDescending(row => row.Revenue).Select(row => new { row.Name, row.Headquarter, row.Founder }).Take(1).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f068a357f1ddd9efd31de37aead845c583d97101e9722029ff74ba6c330ef966",
    "sql": "SELECT name , headquarter , revenue FROM manufacturers ORDER BY revenue DESC",
    "linq": "context.Manufacturers.OrderByDescending(row => row.Revenue).Select(row => new { row.Name, row.Headquarter, row.Revenue }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b43b3e2373609a870f287e29238727b5cf71b4fb063768cf993f89cd4beec3cd",
    "sql": "SELECT name FROM manufacturers WHERE revenue > (SELECT avg(revenue) FROM manufacturers)",
    "linq": "context.Manufacturers.Where(row => row.Revenue > context.Manufacturers.Select(row => (double) row.Revenue).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "edab9837a265c2fcb40f8fed074266dced41bdee02297e3949f7f6d793376abe",
    "sql": "SELECT name FROM manufacturers WHERE revenue < (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')",
    "linq": "context.Manufacturers.Where(row => row.Revenue < context.Manufacturers.Where(row => row.Headquarter == \"Austin\").Select(row => row.Revenue).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d7b106090c74c03ce2fa4c4c6686e9291eba25adbf8de08044576e4ac1eeb3d4",
    "sql": "SELECT sum(revenue) FROM manufacturers WHERE revenue > (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')",
    "linq": "context.Manufacturers.Where(row => row.Revenue > context.Manufacturers.Where(row => row.Headquarter == \"Austin\").Select(row => row.Revenue).Min()).Select(row => row.Revenue).Sum();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3ad43769eb1778c8f5296686f1f637bcf18b9b094aa78b8e48e11b403061860d",
    "sql": "SELECT sum(revenue) , founder FROM manufacturers GROUP BY founder",
    "linq": "context.Manufacturers.GroupBy(row => new { row.Founder }).Select(group => new { SumRevenue = group.Select(row => row.Revenue).Sum(), group.Key.Founder }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "159beff341f8b8c413cdf13cb2a11e45789ddc54bef70544d6946b1302e6605e",
    "sql": "SELECT name , max(revenue) , Headquarter FROM manufacturers GROUP BY Headquarter",
    "linq": "context.Manufacturers.GroupBy(row => new { row.Headquarter }).Select(group => new { group.First().Name, MaxRevenue = group.Select(row => row.Revenue).Max(), group.Key.Headquarter }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "129197991f9b24fa74bb4b5a6e968c0197b212cf7659e271c971bd6390ff905c",
    "sql": "SELECT sum(revenue) , name FROM manufacturers GROUP BY name",
    "linq": "context.Manufacturers.GroupBy(row => new { row.Name }).Select(group => new { SumRevenue = group.Select(row => row.Revenue).Sum(), group.Key.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c19d93cf23b8923a79e0bba95c3503e99a4523f3fb1231e3b4f169c03b1ca3b7",
    "sql": "SELECT avg(T1.price) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
    "linq": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { AveragePrice = group.Select(row => row.T1.Price).Average(), group.Key.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b84a2b3920cee70c003588c7df1fba24c34499b77f8388ba17b236655fc1bda0",
    "sql": "SELECT count(DISTINCT T1.name) , T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.Headquarter",
    "linq": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Headquarter }).Select(group => new { CountDistinctName = group.Select(row => row.T1.Name).Distinct().Count(), group.Key.Headquarter }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8a126f50419a2ddeb503862f6d9463956e41aaa9a87515a5fde3baf6247aaf31",
    "sql": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony')",
    "linq": "context.Products.Where(row => !context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Sony\").Select(row => row.T1.Name).Contains(row.Name)).Select(row => row.Name).Distinct().Count();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d63d351b7abffbd3070c8dba900d3075becf2b2d5a7dce9208fa63abea3c0491",
    "sql": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T1.name = 'DVD drive'",
    "linq": "context.Manufacturers.Select(row => row.Name).Except(context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"DVD drive\").Select(row => row.T2.Name)).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "11af7ba3a7caa9594f1e7624bb57eba35beddb8486b32c07ceb95e5780d658b7",
    "sql": "SELECT count(*) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
    "linq": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { Count = group.Count(), group.Key.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "80014ec78e00b03bc4601676ac670873b277cab4e86ab7f7992f7bf06126cc30",
    "sql": "SELECT Name FROM Products",
    "linq": "context.Products.Select(row => new { row.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d2a7c7ad6f5f416b265769a4b2bee9f1342ae829ff84ffd6ce44be5ed78b082b",
    "sql": "SELECT name , price FROM products",
    "linq": "context.Products.Select(row => new { row.Name, row.Price }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "76c855899e42b482bd37eb109404cb592a92b866b9abe0e6c25dc7578e5b2043",
    "sql": "SELECT name FROM products WHERE price <= 200",
    "linq": "context.Products.Where(row => row.Price <= 200).Select(row => new { row.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3552cb1f2159a1a72d443633abe1f3286f8a3f2439c15ce93159d811fffb4079",
    "sql": "SELECT * FROM products WHERE price BETWEEN 60 AND 120",
    "linq": "context.Products.Where(row => row.Price >= 60 && row.Price <= 120).Select(row => new { row.Code, row.Name, row.Price, row.Manufacturer }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4ff3f8d89447970547ebfc5074ef2c31b8ae46ef9f0bca23123c0b29bebfeb23",
    "sql": "SELECT avg(price) FROM products",
    "linq": "context.Products.Select(row => row.Price).Average();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d0d2ac43732c822feeac344d84fe7f41f39a02757d949dcce32e33a2f57bea94",
    "sql": "SELECT avg(price) FROM products WHERE Manufacturer = 2",
    "linq": "context.Products.Where(row => row.Manufacturer == 2).Select(row => row.Price).Average();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "138de6e80b9b0facb1e1605fc758e51f00d6120aebb9c256779a621cda9e523b",
    "sql": "SELECT count(*) FROM products WHERE price >= 180",
    "linq": "context.Products.Where(row => row.Price >= 180).Count();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cd6897b816281ac4231f03c6b7ee45c3ed2edcf2de261a2fa3cd4e6e1ad50c09",
    "sql": "SELECT name , price FROM products WHERE price >= 180 ORDER BY price DESC , name ASC",
    "linq": "context.Products.Where(row => row.Price >= 180).OrderByDescending(row => row.Price).ThenBy(row => row.Name).Select(row => new { row.Name, row.Price }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0a30e765e13fb381c9f5219d0a2d4e1b254f86a5a4f49eda2e48a9aae7dbd7ae",
    "sql": "SELECT AVG(Price) , Manufacturer FROM Products GROUP BY Manufacturer",
    "linq": "context.Products.GroupBy(row => new { row.Manufacturer }).Select(group => new { AveragePrice = group.Select(row => row.Price).Average(), group.Key.Manufacturer }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "518288520e0171acc3af9e6e9fba3923c89dbc6715676997c90e3c84811a2d5e",
    "sql": "SELECT avg(T1.Price) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name",
    "linq": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { AveragePrice = group.Select(row => row.T1.Price).Average(), group.Key.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ad11454284d1b4297c7084cbe03fb7f328bf14c7a72f6345ac9454f5b1b539d3",
    "sql": "SELECT avg(T1.Price) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
    "linq": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { AveragePrice = group.Select(row => row.T1.Price).Average(), group.Key.Name }).Where(group => group.AveragePrice >= 150).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "864e9f84880ecb51acb20d5b8a9d4591c6f561d8d99cc06d7b9e78f09c5ef9d5",
    "sql": "SELECT name , price FROM Products ORDER BY price ASC LIMIT 1",
    "linq": "context.Products.OrderBy(row => row.Price).Select(row => new { row.Name, row.Price }).Take(1).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "532eb294800e2eaf62b0af6ff37f69d58dbf6058dc283f302025a9a0f2c795e2",
    "sql": "SELECT count(*) FROM HOTELS",
    "linq": "context.Hotels.Count();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a5faf79e17ccc870860832d1158e6b34131f38ba12a5a1afebeef5aff8ef0f12",
    "sql": "SELECT price_range FROM HOTELS",
    "linq": "context.Hotels.Select(row => new { row.PriceRange }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "955195fed728c959d75ff3b02b6dd06f059ccfd817a76831c370b4be359a4208",
    "sql": "SELECT DISTINCT Location_Name FROM LOCATIONS",
    "linq": "context.Locations.Select(row => new { row.LocationName }).Distinct().ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0bff63ba323e1c5aec9b567f3fa10420ed2e4e05cfb768aef9a5fc3c1db826f4",
    "sql": "SELECT Name , Other_Details FROM Staff",
    "linq": "context.Staff.Select(row => new { row.Name, row.OtherDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a1c7ae9b0da014b583b032048d1fad0a1c5e73812df1b2576f89b07386d163c5",
    "sql": "SELECT Tourist_Details FROM VISITORS",
    "linq": "context.Visitors.Select(row => new { row.TouristDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b03cebbcb209fdecb796b7be28fa81839d5a1c9361cd284af2ac34db404727d9",
    "sql": "SELECT price_range FROM HOTELS WHERE star_rating_code = \"5\"",
    "linq": "context.Hotels.Where(row => row.StarRatingCode == \"5\").Select(row => new { row.PriceRange }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "05a685e19a9b3f65359d6e70e466fc5337772d0588785238dfd10991814298e9",
    "sql": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code = \"5\" AND pets_allowed_yn = 1",
    "linq": "context.Hotels.Where(row => row.StarRatingCode == \"5\" && row.PetsAllowedYn == \"1\").Select(row => (double) row.PriceRange).Average();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f632c6f0ccc7fa213244377630e3504d229cc0103d8f1b4e4dd5f25ad7ec6a4",
    "sql": "SELECT Address FROM LOCATIONS WHERE Location_Name = \"UK Gallery\"",
    "linq": "context.Locations.Where(row => row.LocationName == \"UK Gallery\").Select(row => new { row.Address }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eea9a66a2cea1702f4bfa7492f51a3b2c751ebae1c408e095cccb7a12f0376cf",
    "sql": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name = \"UK Gallery\"",
    "linq": "context.Locations.Where(row => row.LocationName == \"UK Gallery\").Select(row => new { row.OtherDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5f5ff42d9897a45914a18ca5c180f99fc42412fd0b4141ad91bed1ea033dff3e",
    "sql": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"",
    "linq": "context.Locations.Where(row => EF.Functions.Like(row.LocationName, \"%film%\")).Select(row => new { row.LocationName }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "67d7e00a66af5a5994456af5ce3a199c6f2a6ef4337aa03cd6878085774cc101",
    "sql": "SELECT count(DISTINCT Name) FROM PHOTOS",
    "linq": "context.Photos.Select(row => row.Name).Distinct().Count();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "39e1b9c4438556d9ca3b8bdc687f4bfa2bb22ae811bf598ff6403e511c757fd3",
    "sql": "SELECT DISTINCT Visit_Date FROM VISITS",
    "linq": "context.Visits.Select(row => new { row.VisitDate }).Distinct().ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "da09283346b2e373a2fe92b9472b78c155d1999b1a7d37b242a0b57b26e6ac0f",
    "sql": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\"",
    "linq": "context.TouristAttractions.Where(row => row.HowToGetThere == \"bus\").Select(row => new { row.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "92ee1392aa8781ae22463e64d67993966a782184763aa6f383e92f183574dc4b",
    "sql": "SELECT Name , Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\" OR How_to_Get_There = \"walk\"",
    "linq": "context.TouristAttractions.Where(row => row.HowToGetThere == \"bus\" || row.HowToGetThere == \"walk\").Select(row => new { row.Name, row.OpeningHours }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d313cdefdc76644521d93eebaaeb8de04deda7cf7fc48bd225d510ed03c6d2ac",
    "sql": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.price_range > 10000",
    "linq": "context.Hotels.Join(context.RefHotelStarRatings, T1 => T1.StarRatingCode, T2 => T2.StarRatingCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PriceRange > 10000).Select(row => new { row.T2.StarRatingDescription }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e2095bf458507d0a1ff42c0e2b6d1f21ec94cd655fc816214b5bc650317fffa",
    "sql": "SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID",
    "linq": "context.Museums.Join(context.TouristAttractions, T1 => T1.MuseumId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.MuseumDetails, row.T2.OpeningHours }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7e6b20789d9a50416cae24aec76e19f706b78f8bd2f647a95851212c57bb2179",
    "sql": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = \"game1\"",
    "linq": "context.Photos.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"game1\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f90c518b509efa3f06a98a7a72e7b4a9b36680e1ed7067424cc73ca5bf7ab2b7",
    "sql": "SELECT T1.Name , T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"film festival\"",
    "linq": "context.Photos.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"film festival\").Select(row => new { row.T1.Name, row.T1.Description }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8d00861d08ae9d3fe5eaebba6c0e5801a5ec60d25d3e2b6bf7b5d4ef2140f084",
    "sql": "SELECT T1.Royal_Family_Details , T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID",
    "linq": "context.RoyalFamilies.Join(context.TouristAttractions, T1 => T1.RoyalFamilyId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.RoyalFamilyDetails, row.T2.HowToGetThere }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f20823eeeabb949677c5ae56276328cd6375d8eb495ff3fe95e5432b3009e6c",
    "sql": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\"",
    "linq": "context.Shops.Join(context.TouristAttractions, T1 => T1.ShopId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.HowToGetThere == \"walk\").Select(row => new { row.T1.ShopDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cafa5502215b673ec42f8c17623ff74ba88e7cc93795d36e40cde8d90d372597",
    "sql": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"US museum\"",
    "linq": "context.Staff.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"US museum\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "de1e6d39eb63186799113a3df2001424b788cc1190361e0ca448c447d728d510",
    "sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\" OR T2.How_to_Get_There = \"bus\"",
    "linq": "context.StreetMarkets.Join(context.TouristAttractions, T1 => T1.MarketId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.HowToGetThere == \"walk\" || row.T2.HowToGetThere == \"bus\").Select(row => new { row.T1.MarketDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9dbde242bcf0e02c1e3fa336c167bc8d122411685ab9f0994a0fca69d7e2fa58",
    "sql": "SELECT T2.Visit_Date , T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE T1.Tourist_Details = \"Vincent\"",
    "linq": "context.Visitors.Join(context.Visits, T1 => T1.TouristId, T2 => T2.TouristId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.TouristDetails == \"Vincent\").Select(row => new { row.T2.VisitDate, row.T2.VisitDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f7ed89349d51512a4a9308350903e056f0caa477813682808ad6c6f5410c6e43",
    "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = \"Vincent\"",
    "linq": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Join(context.Visitors, joined => joined.T2.TouristId, T3 => T3.TouristId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.TouristDetails == \"Vincent\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e2676961b44e8b9597ca945c94b97d453e83509c26afcd39b31e8b729fad7ce7",
    "sql": "SELECT T1.Name , T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" OR T2.Tourist_Details = \"Vivian\"",
    "linq": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Vincent\" || row.T2.TouristDetails == \"Vivian\").Select(row => new { row.T1.Name, row.T3.VisitDate }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dc12913f554bbd50a4aa2e428c73d725a2390cb8636a02e60b256da836949b90",
    "sql": "SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code",
    "linq": "context.Hotels.GroupBy(row => new { row.StarRatingCode }).Select(group => new { group.Key.StarRatingCode, AveragePriceRange = group.Select(row => row.PriceRange).Average() }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b7719fd0a71e52871d79296153a207f39899f627e8f8f5a200b04d5408cb0ede",
    "sql": "SELECT pets_allowed_yn , avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
    "linq": "context.Hotels.GroupBy(row => new { row.PetsAllowedYn }).Select(group => new { group.Key.PetsAllowedYn, AveragePriceRange = group.Select(row => row.PriceRange).Average() }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "53b388ed967b89286d75668e0adbcdef23c4b78561d8f35a0066acd064e466f2",
    "sql": "SELECT hotel_id , star_rating_code FROM HOTELS ORDER BY price_range ASC",
    "linq": "context.Hotels.OrderBy(row => row.PriceRange).Select(row => new { row.HotelId, row.StarRatingCode }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3c2ac2e10b48770cff377b4770db44bc86d0ec7d61e57023b50ce529c215eed0",
    "sql": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3",
    "linq": "context.Hotels.OrderByDescending(row => row.PriceRange).Select(row => new { row.OtherHotelDetails }).Take(3).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d7f221445cc2e3cb5e4f0568c883a7a0f308bfcc26256ce8fa576cf282de0c7a",
    "sql": "SELECT other_hotel_details , star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
    "linq": "context.Hotels.OrderBy(row => row.PriceRange).Select(row => new { row.OtherHotelDetails, row.StarRatingCode }).Take(3).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a49972a9327dbf8b0449998148bf759c8e486d6729463bc7ef36e9bfd74e2b26",
    "sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.TouristAttractions.GroupBy(row => new { row.HowToGetThere }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.HowToGetThere }).Take(1).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "556059f8c995c5ec674e8feee4d0d3385f7c8a3511f2d6c1f4757371247902dd",
    "sql": "SELECT T1.Attraction_Type_Description , T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.RefAttractionTypes.Join(context.TouristAttractions, T1 => T1.AttractionTypeCode, T2 => T2.AttractionTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AttractionTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.AttractionTypeDescription, group.Key.AttractionTypeCode }).Take(1).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8105a6d77320f86a4cf0ff87bb52ab616af563a63b817639445d77783ab0ea86",
    "sql": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
    "linq": "context.TouristAttractions.GroupBy(row => new { row.HowToGetThere }).Select(group => new { group.Key.HowToGetThere, Count = group.Count() }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1daedcf3b2bf39be54d63054560d6cef50fdf1e6c51c628b85903b370b61658e",
    "sql": "SELECT T1.Name , T2.Tourist_Attraction_ID , COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID",
    "linq": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId, Count = group.Count() }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9987bf46646311978825b96ed19dfb0a27e272fe7f968d32b54e2b104b2c6c86",
    "sql": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) >= 2",
    "linq": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8a202645208458737c7732c69fe36d88cb67939b73fec6c2fbfe903621174fa7",
    "sql": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) <= 1",
    "linq": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Where(group => group.Count() <= 1).Select(group => new { group.First().T1.Name, group.First().T1.TouristAttractionId }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9e05df0ab9b0a23cc76b06de4ec1590ec603acabfd5f9f538fa820556cc26dd6",
    "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"660 Shea Crescent\" OR T2.How_to_Get_There = \"walk\"",
    "linq": "context.Locations.Join(context.TouristAttractions, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Address == \"660 Shea Crescent\" || row.T2.HowToGetThere == \"walk\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "48ab0cef108fe9e2c951ad581c5a74d98e5482ac5bd82cbc8acb4320b5d05a8a",
    "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"254 Ottilie Junction\" OR T2.How_to_Get_There = \"bus\"",
    "linq": "context.Locations.Join(context.TouristAttractions, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Address == \"254 Ottilie Junction\" || row.T2.HowToGetThere == \"bus\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f955704bff69042fec2068291309c63334c6fa62592890326a59d93fdfa4f35",
    "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Marcelle\"",
    "linq": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Vincent\").Select(row => row.T1.Name).Intersect(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Marcelle\").Select(row => row.T1.Name)).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0c9815452089eda76f03e8075c4e1b7f1896dbc3fb3fa56274b98d6b39aaf66c",
    "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Rosalind\"",
    "linq": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Alison\").Select(row => row.T1.Name).Except(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Rosalind\").Select(row => row.T1.Name)).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bd8414cbc206e97d69d6f0e512c649a9b4a17fb5baa126ee3dd7d5b2b83a75f3",
    "sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
    "linq": "context.Visitors.Where(row => !context.Visits.Select(row => row.TouristId).Contains(row.TouristId)).Count();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "37313d07447df5fdaa3680c24237a60fae7e4eea08e2f3aa537860485265c6f3",
    "sql": "SELECT sum(enr) FROM College",
    "linq": "context.Colleges.Select(row => row.Enr).Sum();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8a09f1a83f009139b6aed1e86e45fc8a81ba5af735271f743b4cb270c2e74405",
    "sql": "SELECT avg(enr) FROM College",
    "linq": "context.Colleges.Select(row => row.Enr).Average();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1985bda3e984305f556019a86731ca1c8c6062be98a38e2623ef4d8954e04ff5",
    "sql": "SELECT count(*) FROM College",
    "linq": "context.Colleges.Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "835653b96106f4d888487625b9d66a8361b80dbac49f29871ddaf9899e60b6aa",
    "sql": "SELECT count(*) FROM Player WHERE HS > 1000",
    "linq": "context.Players.Where(row => row.Hs > 1000).Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "17570fe59cf8b538d783866b7a9808516730198c8fb44d3c3c6367ca2f7cfde8",
    "sql": "SELECT count(*) FROM College WHERE enr > 15000",
    "linq": "context.Colleges.Where(row => row.Enr > 15000).Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e519fe12106a072dd8dd4ef7b0765a89cb3ecfcb61c31163305328373c535005",
    "sql": "SELECT avg(HS) FROM Player",
    "linq": "context.Players.Select(row => row.Hs).Average();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "29f6accda43b3bc0f2c1abae85d0208f7d6301d29741824b0c9e8f04950289e8",
    "sql": "SELECT pName , HS FROM Player WHERE HS < 1500",
    "linq": "context.Players.Where(row => row.Hs < 1500).Select(row => new { row.PName, row.Hs }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "533f84345dd70dc2f90fff8eb3fa7d5f4f2e44f96021ac4f171e9394a5f2ac98",
    "sql": "SELECT count(DISTINCT cName) FROM tryout",
    "linq": "context.Tryouts.Select(row => row.CName).Distinct().Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e3716fe4c8ee55d8057e129865e9ba1946166e62d362e242ed2dfc839f25f49d",
    "sql": "SELECT count(DISTINCT pPos) FROM tryout",
    "linq": "context.Tryouts.Select(row => row.PPos).Distinct().Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "22733c1a54bce3dfdc38dd483387dc98a9fa3a82c4c82e23eb9bf4889525d68f",
    "sql": "SELECT count(*) FROM tryout WHERE decision = 'yes'",
    "linq": "context.Tryouts.Where(row => row.Decision == \"yes\").Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e3093364dabec7a9aa8695241c7f6620d4dc2b46e7335359bb1dadce77e5493f",
    "sql": "SELECT count(*) FROM tryout WHERE pPos = 'goalie'",
    "linq": "context.Tryouts.Where(row => row.PPos == \"goalie\").Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d49c7c2eb6fc0c912e9207d867555d6c527c042af78243f363d367b8ddb4f8e8",
    "sql": "SELECT avg(HS) , max(HS) , min(HS) FROM Player",
    "linq": "context.Players.GroupBy(row => 1).Select(group => new { AverageHs = group.Select(row => row.Hs).Average(), MaxHs = group.Select(row => row.Hs).Max(), MinHs = group.Select(row => row.Hs).Min() }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a816676978852f28b273f7a674a2fa3ebf6cb819e288a6d5d8ebd8e332e8e094",
    "sql": "SELECT avg(enr) FROM College WHERE state = 'FL'",
    "linq": "context.Colleges.Where(row => row.State == \"FL\").Select(row => row.Enr).Average();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "177baae860613c8bf223d8e87a3e13fa69cd3df71bcb18ecf347768e15ec9dad",
    "sql": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500",
    "linq": "context.Players.Where(row => row.Hs >= 500 && row.Hs <= 1500).Select(row => new { row.PName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cb3045288843207f0e2aecc602b5bec241fc808505122666b97489b6af59f765",
    "sql": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'",
    "linq": "context.Players.Where(row => EF.Functions.Like(row.PName, \"%a%\")).Select(row => new { row.PName }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0e3549cc472555cb96cca23b716847d569fd51448fc4fb9911696933c26e641d",
    "sql": "SELECT cName , enr FROM College WHERE enr > 10000 AND state = \"LA\"",
    "linq": "context.Colleges.Where(row => row.Enr > 10000 && row.State == \"LA\").Select(row => new { row.CName, row.Enr }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4f206bf50da598dc637e3877a08785ad3ff4e4e2a3d9a33d41aac7c2ce0abd65",
    "sql": "SELECT * FROM College ORDER BY enr",
    "linq": "context.Colleges.OrderBy(row => row.Enr).Select(row => new { row.CName, row.State, row.Enr }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "24b15092abc3bec649042399afc00b69c98fa73a0d71a27ed58c0011882b00d7",
    "sql": "SELECT cName FROM College WHERE enr > 18000 ORDER BY cName",
    "linq": "context.Colleges.Where(row => row.Enr > 18000).OrderBy(row => row.CName).Select(row => new { row.CName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "07a3eeb65afdc5053a6ca647ee787dc54c1bb48590cac855bfee17ed73ab13a7",
    "sql": "SELECT pName FROM Player WHERE yCard = 'yes' ORDER BY HS DESC",
    "linq": "context.Players.Where(row => row.YCard == \"yes\").OrderByDescending(row => row.Hs).Select(row => new { row.PName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2f382cfec8ce0cd0057403f6366a2c70f6985046260b86f392caf71744ee8b2e",
    "sql": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
    "linq": "context.Tryouts.OrderBy(row => row.CName).Select(row => new { row.CName }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e0fe43254459264c4096965c08e17562474d41ad113a8b495db884daabd5752c",
    "sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Tryouts.GroupBy(row => new { row.PPos }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PPos }).Take(1).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9c62979284dcaf2b692b78120c985350c8834d0c20d017c5bd5ee447eaba280b",
    "sql": "SELECT count(*) , cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "linq": "context.Tryouts.GroupBy(row => new { row.CName }).Select(group => new { Count = group.Count(), group.Key.CName }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c21f43c239dd94284d8777c4564b8c8f38d0b73fca982ff88b39b704e07b5599",
    "sql": "SELECT min(T2.HS) , T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY T1.pPos",
    "linq": "context.Tryouts.Join(context.Players, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PPos }).Select(group => new { MinHs = group.Select(row => row.T2.Hs).Min(), group.Key.PPos }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f704a42760e0a9c63f2216cfbf82c69c739131117079e1a03ab79e7b98c2018f",
    "sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
    "linq": "context.Colleges.OrderByDescending(row => row.Enr).Select(row => new { row.CName }).Take(3).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "956dad58a5fb0bd51594b9c0870ed95f878afdee4ca754b0407c6d5f45a3651e",
    "sql": "SELECT cName , state , min(enr) FROM college GROUP BY state",
    "linq": "context.Colleges.GroupBy(row => new { row.State }).Select(group => new { group.First().CName, group.Key.State, MinEnr = group.Select(row => row.Enr).Min() }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c3f0c56bcf62b3f715fedd8073d3e1b4df514680da778e188d30cb25607f7203",
    "sql": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName",
    "linq": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.State }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9deb508f1facfbfbc4cde35f674e66f80951c028a2315e258e47d4c1f533448e",
    "sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'",
    "linq": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\").Select(row => new { row.T1.State }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ebe3fb51ce716cad8d8a15eabdfdc58b7738d6dcd08e75d9e387fcc9613acea9",
    "sql": "SELECT T1.pName , T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
    "linq": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\").Select(row => new { row.T1.PName, row.T2.CName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b4521bf327939589c030ddab178580064d81416321920f22eb8c09ce9a9fe5b9",
    "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID ORDER BY T1.pName",
    "linq": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T1.PName).Select(row => new { row.T1.PName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "98d3d2eced8ecceb9ca363e736a2177a0dd9a676feff8316c02b75f3756f763c",
    "sql": "SELECT T1.pName , T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
    "linq": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\").Select(row => new { row.T1.PName, row.T1.Hs }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ced3e523b85829bc2980f3c37100b10b204e52a6b953c2197b129d88e6c440dd",
    "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'striker'",
    "linq": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"striker\").Select(row => new { row.T1.State }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d588bbf04320cb9296af21358c3ed9d8309813e6c926fde2032be6a1c6df4a07",
    "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' AND T2.pPos = 'striker'",
    "linq": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\" && row.T2.PPos == \"striker\").Select(row => new { row.T1.PName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c02774ca0ed466abe65114cc55e358d158e85d5934c11bfd47f5c1b7f79c7724",
    "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID WHERE T3.pName = 'Charles'",
    "linq": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Join(context.Players, joined => joined.T2.PId, T3 => T3.PId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PName == \"Charles\").Select(row => new { row.T1.State }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "39b45f1aa356f00171e85ee5ea8155a762da01f2baa0b73c5340d907ff3be450",
    "sql": "SELECT avg(T1.HS) , max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
    "linq": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\").GroupBy(row => 1).Select(group => new { AverageHsT1 = group.Select(row => row.T1.Hs).Average(), MaxHsT1 = group.Select(row => row.T1.Hs).Max() }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "87c7d7d1ccf31541b9432744da0a12b76fb3024556529650e799d743f6cdb9e2",
    "sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'no'",
    "linq": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"no\").Select(row => row.T1.Hs).Average();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7a57ef6cf01bafe7c9785c91c0e20a4ddb537877022266b67c8578ae3a1606c5",
    "sql": "SELECT max(T1.HS) , pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS > 1000 GROUP BY T2.pPos",
    "linq": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Hs > 1000).GroupBy(row => new { row.T2.PPos }).Select(group => new { MaxHs = group.Select(row => row.T1.Hs).Max(), group.Key.PPos }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "00aec117adf66267354dcb752442e69dd43b116cf9dbf747dfd017ae2909a5eb",
    "sql": "SELECT T1.cName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T2.pName LIKE 'D%'",
    "linq": "context.Tryouts.Join(context.Players, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.PName, \"D%\")).Select(row => new { row.T1.CName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "242186730c174a3a722f067ef9087df5b35a42c73b8434aa20e16fe2b0811817",
    "sql": "SELECT cName FROM tryout WHERE decision = 'yes' AND pPos = 'goalie'",
    "linq": "context.Tryouts.Where(row => row.Decision == \"yes\" && row.PPos == \"goalie\").Select(row => new { row.CName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "58317bb33e7f8b36f1fba4eb603038445c2e8173af13235e910ed243c1741d9b",
    "sql": "SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T1.cName = (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)",
    "linq": "context.Tryouts.Join(context.Players, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CName == context.Colleges.OrderByDescending(row => row.Enr).Select(row => row.CName).Take(1).First()).Select(row => new { row.T2.PName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6ed0c0109c44542acd6ee8825eaf084488d1e0c96b630134566cc2643ba9d1a8",
    "sql": "SELECT DISTINCT T1.state , T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'",
    "linq": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\").Select(row => new { row.T1.State, row.T1.Enr }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1c6994c33314c09d402527a531eee2914c426270c7deb157daff73a4c5042658",
    "sql": "SELECT cName FROM College WHERE enr < 13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr > 15000 AND state = \"LA\"",
    "linq": "context.Colleges.Where(row => row.Enr < 13000 && row.State == \"AZ\").Select(row => row.CName).Union(context.Colleges.Where(row => row.Enr > 15000 && row.State == \"LA\").Select(row => row.CName)).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "04613b9fcc4f862bb1f16ff8d16b875d955c101a39b16a8b01d891a0609427d8",
    "sql": "SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid'",
    "linq": "context.Tryouts.Where(row => row.PPos == \"goalie\").Select(row => row.CName).Intersect(context.Tryouts.Where(row => row.PPos == \"mid\").Select(row => row.CName)).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4972928cdfdc96affadfb30b9a06530a7096e8a0e13433d44ef418ceb2566a21",
    "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid'",
    "linq": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"goalie\").Select(row => row.T1.State).Intersect(context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"mid\").Select(row => row.T1.State)).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a6bae46003a3358c5aab5e0d653e86c87c357450f4e8ebc25485313631142ac6",
    "sql": "SELECT COUNT(*) FROM (SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid')",
    "linq": "context.Tryouts.Where(row => row.PPos == \"goalie\").Select(row => row.CName).Intersect(context.Tryouts.Where(row => row.PPos == \"mid\").Select(row => row.CName)).Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4ff766778360f98521d1ced07502da914e9faddd23a9603c16ff912bf1235934",
    "sql": "SELECT cName FROM tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM tryout WHERE pPos = 'goalie'",
    "linq": "context.Tryouts.Where(row => row.PPos == \"mid\").Select(row => row.CName).Except(context.Tryouts.Where(row => row.PPos == \"goalie\").Select(row => row.CName)).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5903c6292092b777aecbcdf76d18a2a8e4a84cd5775371eaef95578bcb9ea321",
    "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'",
    "linq": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"mid\").Select(row => row.T1.State).Except(context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"goalie\").Select(row => row.T1.State)).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "23d9199554060c7f2683ba2877e481e8e2104ce61f2d5e5f641d1fa0a1682ab6",
    "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie')",
    "linq": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"mid\").Select(row => row.T1.State).Except(context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"goalie\").Select(row => row.T1.State)).Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4de6f3d31de8db1123233ff903013fb1cef14275dade321a41ed971c57ec9fd0",
    "sql": "SELECT DISTINCT state FROM college WHERE enr < (SELECT max(enr) FROM college)",
    "linq": "context.Colleges.Where(row => row.Enr < context.Colleges.Select(row => row.Enr).Max()).Select(row => new { row.State }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "16082bb82184e8c5127d15dcb80d50322be563bdef77393e29e2114e9b216912",
    "sql": "SELECT DISTINCT cName FROM college WHERE enr > (SELECT min(enr) FROM college WHERE state = 'FL')",
    "linq": "context.Colleges.Where(row => row.Enr > context.Colleges.Where(row => row.State == \"FL\").Select(row => row.Enr).Min()).Select(row => new { row.CName }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ed89d5fee70c7a0f57658d19e48b60e0711b632eadfcfcddddde3ddc9ba08eea",
    "sql": "SELECT cName FROM college WHERE enr > (SELECT max(enr) FROM college WHERE state = 'FL')",
    "linq": "context.Colleges.Where(row => row.Enr > context.Colleges.Where(row => row.State == \"FL\").Select(row => row.Enr).Max()).Select(row => new { row.CName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fa8fc65cc5810adcad94930f28f0b0920d97174a4b0f176a0cc771a41eba5124",
    "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos = \"goalie\")",
    "linq": "context.Colleges.Where(row => !context.Tryouts.Where(row => row.PPos == \"goalie\").Select(row => row.CName).Contains(row.CName)).Select(row => row.Enr).Sum();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3dddceed71b5497afe1264d2a1e08d3f6940bc18df9c4b299baa3796a50923d5",
    "sql": "SELECT count(DISTINCT state) FROM college WHERE enr > (SELECT avg(enr) FROM college)",
    "linq": "context.Colleges.Where(row => row.Enr > context.Colleges.Select(row => row.Enr).Average()).Select(row => row.State).Distinct().Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8dce5cca7719dbdba00aa332e2d959cbf7db5f53f247b10cf94900c7e936e369",
    "sql": "SELECT count(DISTINCT state) FROM college WHERE enr < (SELECT avg(enr) FROM college)",
    "linq": "context.Colleges.Where(row => row.Enr < context.Colleges.Select(row => row.Enr).Average()).Select(row => row.State).Distinct().Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7dd4ec5ebd0b1102fd7b6e405601041bf35b2858452c66107e19c0b73a7588e5",
    "sql": "SELECT name FROM station WHERE lat < 37.5",
    "linq": "context.Stations.Where(row => row.Lat < 37.5).Select(row => new { row.Name }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2bdea7732ed15ea7ddfa8f80e75bad61c5873bb5ae6eb2a5df3cef74fa043e9a",
    "sql": "SELECT city , max(lat) FROM station GROUP BY city",
    "linq": "context.Stations.GroupBy(row => new { row.City }).Select(group => new { group.Key.City, MaxLat = group.Select(row => row.Lat).Max() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fe09cd07e8dab74a1528f4eda113936925a7664b4cf9168b436aa6b835d50d1a",
    "sql": "SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3",
    "linq": "context.Trips.OrderBy(row => row.Id).Select(row => new { row.StartStationName, row.EndStationName }).Take(3).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ef301348f65cceb023f795d5ba127f99291e5c15c5a69cf6e20b28fc6daafd3b",
    "sql": "SELECT avg(lat) , avg(long) FROM station WHERE city = \"San Jose\"",
    "linq": "context.Stations.Where(row => row.City == \"San Jose\").GroupBy(row => 1).Select(group => new { AverageLat = group.Select(row => row.Lat).Average(), AverageLong = group.Select(row => row.Long).Average() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "be693834ffa24080eb90dd4c55effa9d3a76d7ffe862c84275e1d04c5aa0ffee",
    "sql": "SELECT id FROM trip ORDER BY duration LIMIT 1",
    "linq": "context.Trips.OrderBy(row => row.Duration).Select(row => new { row.Id }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3570598f37283cd2d231346c3bca676c5fc2168e4cfc16366616d7da8922559e",
    "sql": "SELECT sum(duration) , max(duration) FROM trip WHERE bike_id = 636",
    "linq": "context.Trips.Where(row => row.BikeId == 636).GroupBy(row => 1).Select(group => new { SumDuration = group.Select(row => row.Duration).Sum(), MaxDuration = group.Select(row => row.Duration).Max() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e8fdb656c3e5a14b55c234a5cfb7818d7a97a5d6dc71ee5cfae38fdb6ef41425",
    "sql": "SELECT count(DISTINCT bike_id) FROM trip",
    "linq": "context.Trips.Select(row => row.BikeId).Distinct().Count();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c86f3169c626677368b3e1947da3b231d83470c3c8d217acf8914c0c771a51d",
    "sql": "SELECT count(DISTINCT city) FROM station",
    "linq": "context.Stations.Select(row => row.City).Distinct().Count();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "71f87c318ad350e7f8f9d11d07054b35459fd75639891fc9791a9466b68f3579",
    "sql": "SELECT COUNT(*) FROM station WHERE city = \"Mountain View\"",
    "linq": "context.Stations.Where(row => row.City == \"Mountain View\").Count();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c5b750b3b591223bfd5c96f1ede30fe9ee957c35fb0aa71d90d1adaa945a9334",
    "sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7",
    "linq": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BikesAvailable == 7).Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "95b2ea4757b668ac753ce228f50951dd5e429da014fc8497540499bf251d27eb",
    "sql": "SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Trips.Where(row => EF.Functions.Like(row.StartDate, \"8/%\")).GroupBy(row => new { row.StartStationName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StartStationName, group.First().StartStationId }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "660237aad544589da1f63fb280d6c18c5645bc2797f0c6840dcfafbaabea5358",
    "sql": "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Trips.Where(row => row.ZipCode == \"94002\").GroupBy(row => new { row.BikeId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BikeId }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "628c1249b1029be3c015d42a64090f59a0c01253ea5a0b75cd0198c848bbe7ff",
    "sql": "SELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1",
    "linq": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Duration).Select(row => new { row.T1.Lat, row.T1.Long, row.T1.City }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d9be623b1d8015c2af562e791250ce3d7f1b1a54408db8de66fb252d5b8700f6",
    "sql": "SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available) > 14 UNION SELECT name , id FROM station WHERE installation_date LIKE \"12/%\"",
    "linq": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StationId }).Where(group => group.Average(row => row.T2.BikesAvailable) > 14).Select(group => new { group.First().T1.Name, group.First().T1.Id }).Union(context.Stations.Where(row => EF.Functions.Like(row.InstallationDate, \"12/%\")).Select(row => new { row.Name, row.Id })).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e0e9f9fdd32006418bce4f34630084fec5c57bf17721cf8d7d8e086bf6633028",
    "sql": "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
    "linq": "context.Weathers.Where(row => row.ZipCode == 94107).GroupBy(row => new { row.CloudCover }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CloudCover }).Take(3).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2f13da385fe16ef073a0ad3a81e5bbfa1effbb04d7309e278b5fb4ccc20cf96f",
    "sql": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available) > 10)",
    "linq": "context.Stations.Where(row => !context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Max(row => row.BikesAvailable) > 10).Select(group => group.Key.StationId).Contains(row.Id)).Select(row => (double) row.Long).Average();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9510726662d73751375150ce28c0fdeed0c8538ec584ca73fbdf75d2a6f0fa1e",
    "sql": "SELECT T1.id , T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id",
    "linq": "context.Trips.Join(context.Stations, T1 => T1.EndStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Id, row.T2.InstallationDate }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e337d41f073d7699b516202be1c01a165a8036642424ed8592b1efd73988635c",
    "sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1",
    "linq": "context.Trips.Join(context.Stations, T1 => T1.StartStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.DockCount).Select(row => new { row.T1.Id }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7f74802b76f63f0820aba0de17c8cef1931c95ea12ea8bf3987070bc04a331df",
    "sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != \"San Francisco\"",
    "linq": "context.Trips.Join(context.Stations, T1 => T1.EndStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City != \"San Francisco\").Count();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "28daab8c353921776af5cb6a83eb320b7485e06a51a636b8bfd624adc989b6a9",
    "sql": "SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
    "linq": "context.Weathers.Where(row => row.ZipCode == 94107 && row.Events != \"Fog\" && row.Events != \"Rain\").Select(row => new { row.Date }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ca40b04275c1539f09bd9b88d7cc8e0e41ee73a3ff4f3f91a0a2c55d2683eb8f",
    "sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\"",
    "linq": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StationId }).Where(group => group.Average(row => row.T2.BikesAvailable) > 10).Select(group => group.First().T1.Name).Except(context.Stations.Where(row => row.City == \"San Jose\").Select(row => row.Name)).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bb7b51080222cf54ceddeb95b1e78b15b262ce31b4c9ff42b213ff201803bacf",
    "sql": "SELECT name , lat , city FROM station ORDER BY lat LIMIT 1",
    "linq": "context.Stations.OrderBy(row => row.Lat).Select(row => new { row.Name, row.Lat, row.City }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aee63150501e9adc73eb3303e23b98d1ab4b8bdf55f21326e3373aa1d8d84489",
    "sql": "SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
    "linq": "context.Weathers.OrderByDescending(row => row.MaxGustSpeedMph).Select(row => new { row.Date, row.MeanTemperatureF, row.MeanHumidity }).Take(3).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "313a690fdb3e846c251621c380eaae3751a506e0ab751e2b153ffeffe0a459c1",
    "sql": "SELECT city , COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15",
    "linq": "context.Stations.GroupBy(row => new { row.City }).Where(group => group.Count() >= 15).Select(group => new { group.Key.City, Count = group.Count() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "167643136da90ce187cb3f4fcb079238d14987e1aae4570eac2376e3097dab2c",
    "sql": "SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200",
    "linq": "context.Trips.GroupBy(row => new { row.StartStationName }).Where(group => group.Count() >= 200).Select(group => new { group.First().StartStationId, group.Key.StartStationName }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d1ebc49d14bac8310b12d441a237c0807d83f8290443be92e43549bd11d4bf70",
    "sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
    "linq": "context.Stations.GroupBy(row => new { row.City }).OrderByDescending(group => group.Max(row => row.Lat)).Select(group => new { group.Key.City }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e760871327c2fcdcafb0c7be73790f7b4801382be670feab15921412a97d835",
    "sql": "SELECT date , cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
    "linq": "context.Weathers.OrderByDescending(row => row.CloudCover).Select(row => new { row.Date, row.CloudCover }).Take(5).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "35cc743409f03ac6f25ff9377451bbf38a0028a2bf51cb5b565ff56b424b25cc",
    "sql": "SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
    "linq": "context.Trips.OrderByDescending(row => row.Duration).Select(row => new { row.Id, row.Duration }).Take(3).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d9fdd4c1c27a9fe730dcdc3eb7e00b076e9af529ec9fb65ee1f6a0b5a9d76e1a",
    "sql": "SELECT T1.name , T1.long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
    "linq": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StartStationId }).Select(group => new { group.First().T1.Name, group.First().T1.Long, AverageDuration = group.Select(row => row.T2.Duration).Average() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bf1de0c7b4213ae96dc12b51f46d003bcd8b07f534a0c121a9411f55c244cdba",
    "sql": "SELECT T1.name , T1.lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id",
    "linq": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.EndStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.EndStationId }).Select(group => new { group.OrderBy(row => row.T2.Duration).First().T1.Name, group.OrderBy(row => row.T2.Duration).First().T1.Lat, MinDuration = group.Select(row => row.T2.Duration).Min() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7019ee15c5a454be17562ba96cd5ff00e194555890edb9f085111188a5d4c4a7",
    "sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100",
    "linq": "context.Trips.Where(row => row.Duration < 100).Select(row => new { row.StartStationName }).Distinct().ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9eb2cb2e79c7dbea9d71e159979f26567847e5cbe665e85ae385d9431d2b316a",
    "sql": "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = 94103)",
    "linq": "context.Trips.Where(row => row.Duration >= context.Trips.Where(row => row.ZipCode == \"94103\").Select(row => row.Duration).Average()).Select(row => new { row.Id }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b61b77bf7c5e898dd1b6d689465ae0851b7e43f062739b6aa36558a8681c628b",
    "sql": "SELECT DISTINCT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12",
    "linq": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BikesAvailable > 12).Select(row => new { row.T1.Id, row.T1.Name }).Distinct().ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e94145451ec3e69ad197c317e6738c2cf7405d3daf641010a6ede8c6af0043b1",
    "sql": "SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 100",
    "linq": "context.Stations.Where(row => row.City == \"Palo Alto\").Select(row => row.Name).Except(context.Trips.GroupBy(row => new { row.EndStationName }).Where(group => group.Count() > 100).Select(group => group.Key.EndStationName)).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "554fc1f5496c69612be61456b70ea394e8065e013c774387eba4968dee52e962",
    "sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = \"Mountain View\" AND T3.city = \"Palo Alto\"",
    "linq": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).Join(context.Trips, joined => joined.T2.Id, T4 => T4.Id, (joined, T4) => new { joined.T1, joined.T2, T4 }).Join(context.Stations, joined => joined.T4.EndStationId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, joined.T4, T3 }).Where(row => row.T1.City == \"Mountain View\" && row.T3.City == \"Palo Alto\").Count();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dcf185fd8b8a43d7eff840058e5bf48cb42bb5f2c0569ff36a5d690eadf057fc",
    "sql": "SELECT avg(T1.lat) , avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id",
    "linq": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => 1).Select(group => new { AverageLat = group.Select(row => row.T1.Lat).Average(), AverageLong = group.Select(row => row.T1.Long).Average() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1e1487698352435a83ebbe4d4a73208ee3ab0df672f97c805298f86a7021d39c",
    "sql": "SELECT count(*) FROM pilot",
    "linq": "context.Pilots.Count();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0ef1d5d64871658336afbda7ee910f29333ad8354ec2a9cd6e82566b5ab77424",
    "sql": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
    "linq": "context.Pilots.OrderBy(row => row.Rank).Select(row => new { row.PilotName }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eab902231a05b8b6ff2620939c7cde7c83267fac519c56addbbcd5715092ad2b",
    "sql": "SELECT POSITION , Team FROM pilot",
    "linq": "context.Pilots.Select(row => new { row.Position, row.Team }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e162258c56be69a79b3dec5ceb34492bc3c37cd010d2114d11522151aa4e32df",
    "sql": "SELECT DISTINCT POSITION FROM pilot WHERE Age > 30",
    "linq": "context.Pilots.Where(row => row.Age > 30).Select(row => new { row.Position }).Distinct().ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b40836f69e957b12747bf57695791ea18199cdb3eab2a1a6e9af8fcd8a019995",
    "sql": "SELECT Pilot_name FROM pilot WHERE Team = \"Bradley\" OR Team = \"Fordham\"",
    "linq": "context.Pilots.Where(row => row.Team == \"Bradley\" || row.Team == \"Fordham\").Select(row => new { row.PilotName }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "891b22caf52adc30b0bb526ff9be83fd03543b4a6090dd96bc383ba26c9bb590",
    "sql": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1",
    "linq": "context.Pilots.OrderBy(row => row.Rank).Select(row => new { row.JoinYear }).Take(1).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9ff73552ec298b81701dec2493ab9b7f6309aa38a7a900e97099a1fcfd33eca5",
    "sql": "SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "linq": "context.Pilots.GroupBy(row => new { row.Nationality }).Select(group => new { group.Key.Nationality, Count = group.Count() }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c90df8da5f69b41d3e519db97d6e922f82d40ec96baee59e98cecde8571e38d0",
    "sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Pilots.GroupBy(row => new { row.Nationality }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Nationality }).Take(1).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fe10b37c4ce0205defd544a8ef0f832e4d291a62154293aaf124ade1e6d47535",
    "sql": "SELECT POSITION FROM pilot WHERE Join_Year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year > 2005",
    "linq": "context.Pilots.Where(row => row.JoinYear < 2000).Select(row => row.Position).Intersect(context.Pilots.Where(row => row.JoinYear > 2005).Select(row => row.Position)).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d1e332791c808de9bb4843463b701f7c635f3509932deaed80b0e3f8f35c040f",
    "sql": "SELECT T3.Pilot_name , T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID",
    "linq": "context.PilotRecords.Join(context.Aircraft, T1 => T1.AircraftId, T2 => T2.AircraftId, (T1, T2) => new { T1, T2 }).Join(context.Pilots, joined => joined.T1.PilotId, T3 => T3.PilotId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.PilotName, row.T2.Model }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "07da3cc19cf16c02ff13d0426ab8083b8180e1e7f8bb3fe78289d4a314afd278",
    "sql": "SELECT T3.Pilot_name , T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID ORDER BY T3.Rank",
    "linq": "context.PilotRecords.Join(context.Aircraft, T1 => T1.AircraftId, T2 => T2.AircraftId, (T1, T2) => new { T1, T2 }).Join(context.Pilots, joined => joined.T1.PilotId, T3 => T3.PilotId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T3.Rank).Select(row => new { row.T3.PilotName, row.T2.FleetSeries }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "073589c8cbb5a2f8732308f6cd56f61cb551b559d1bda01ffa61783dc4b80ca5",
    "sql": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID WHERE T3.Age < 34",
    "linq": "context.PilotRecords.Join(context.Aircraft, T1 => T1.AircraftId, T2 => T2.AircraftId, (T1, T2) => new { T1, T2 }).Join(context.Pilots, joined => joined.T1.PilotId, T3 => T3.PilotId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Age < 34).Select(row => new { row.T2.FleetSeries }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f806a3ca2cbe1d8640342ea1ade94a4f827b9e9cae0764ff7a558961134c6bb7",
    "sql": "SELECT T2.Pilot_name , COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name",
    "linq": "context.PilotRecords.Join(context.Pilots, T1 => T1.PilotId, T2 => T2.PilotId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.PilotName }).Select(group => new { group.Key.PilotName, Count = group.Count() }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "19ceebb034ff28fadb9097da9243edd2551a832ffec5773d66380299480fef58",
    "sql": "SELECT T2.Pilot_name , COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*) > 1",
    "linq": "context.PilotRecords.Join(context.Pilots, T1 => T1.PilotId, T2 => T2.PilotId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.PilotName }).Where(group => group.Count() > 1).Select(group => new { group.Key.PilotName, Count = group.Count() }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c91f0da3fc9ff02ea7c71967a5ba0f8f2e81553f274ccc2e8d3a307bb3036485",
    "sql": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)",
    "linq": "context.Pilots.Where(row => !context.PilotRecords.Select(row => row.PilotId).Contains(row.PilotId)).Select(row => new { row.PilotName }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "54c5f0adde72d761fd29f1242c34aa99220e863e1cac143c60baa0b665cd8039",
    "sql": "SELECT count(*) FROM Accounts",
    "linq": "context.Accounts.Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "593703045b8017ee41302b2292da29bca912ccae7b6b1c728d1eca3e240fa306",
    "sql": "SELECT count(DISTINCT customer_id) FROM Accounts",
    "linq": "context.Accounts.Select(row => row.CustomerId).Distinct().Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bed4562057864a7fd09daf2873c68e41877e2ed191cbaec2161ff05e76d4b9ab",
    "sql": "SELECT account_id , date_account_opened , account_name , other_account_details FROM Accounts",
    "linq": "context.Accounts.Select(row => new { row.AccountId, row.DateAccountOpened, row.AccountName, row.OtherAccountDetails }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9e1e6796078fe72632f30eb203165eb78141b669ab0d60b56162b8a6c3350d7b",
    "sql": "SELECT T1.account_id , T1.date_account_opened , T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'",
    "linq": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CustomerFirstName == \"Meaghan\").Select(row => new { row.T1.AccountId, row.T1.DateAccountOpened, row.T1.AccountName, row.T1.OtherAccountDetails }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a124a6da09b81ed6a18dc422fa45f4307d8e2e54745dd29add908beacb5e6227",
    "sql": "SELECT T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Meaghan\" AND T2.customer_last_name = \"Keeling\"",
    "linq": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CustomerFirstName == \"Meaghan\" && row.T2.CustomerLastName == \"Keeling\").Select(row => new { row.T1.AccountName, row.T1.OtherAccountDetails }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7fb28dfd60732d6529c95d8a1bf5d4ee32e0da3224a489a0560eda86a5455e13",
    "sql": "SELECT T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"900\"",
    "linq": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.AccountName == \"900\").Select(row => new { row.T2.CustomerFirstName, row.T2.CustomerLastName }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "50ae93006de5cb4077897cc24d2f39e1f5497f92159e48fe55f9ff6339e487e1",
    "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
    "linq": "context.Customers.Where(row => !context.Accounts.Select(row => row.CustomerId).Contains(row.CustomerId)).Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d9acc5bcf6bccd204f9aeb42e2edbae5f586da31a93a6713945f1cca399a1c66",
    "sql": "SELECT DISTINCT T1.customer_first_name , T1.customer_last_name , T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
    "linq": "context.Customers.Join(context.Accounts, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.CustomerFirstName, row.T1.CustomerLastName, row.T1.PhoneNumber }).Distinct().ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d0f532bcc8f3f11a7cc8a03b4e0778cd64d5da1a292166bc67e56029ce13e2ec",
    "sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts",
    "linq": "context.Customers.Select(row => row.CustomerId).Except(context.Accounts.Select(row => row.CustomerId)).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "82a1d659c9be2fa70ede362da969c1bf417acc78cb240b87a8c4248dd54339ae",
    "sql": "SELECT count(*) , customer_id FROM Accounts GROUP BY customer_id",
    "linq": "context.Accounts.GroupBy(row => new { row.CustomerId }).Select(group => new { Count = group.Count(), group.Key.CustomerId }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "67437d56ed6abbd42b5e7c05f77262d5d39e613b2ecf4b11fe07ef3e0c82b9bf",
    "sql": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CustomerId, group.First().T2.CustomerFirstName, group.First().T2.CustomerLastName }).Take(1).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1b43cd4670494655be0eb50f08673987ab7cf85f66c663d3c1b7c96f9b6def57",
    "sql": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
    "linq": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Select(group => new { group.Key.CustomerId, group.First().T2.CustomerFirstName, group.First().T2.CustomerLastName, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "24be5526c8c1f1def867eecbe6e13fe7321fd0e17ef9881cfe1b4d08feec5633",
    "sql": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2",
    "linq": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T2.CustomerFirstName, group.Key.CustomerId }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6bc9def7663f03b8e495d8aa9b2e20b07b7f8157aadd121635622d894345622d",
    "sql": "SELECT count(*) FROM Customers",
    "linq": "context.Customers.Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c1fd2333dbc909e95054eb1da6b6b5f35060314167509b54e15f7b0596ae5df8",
    "sql": "SELECT gender , count(*) FROM Customers GROUP BY gender",
    "linq": "context.Customers.GroupBy(row => new { row.Gender }).Select(group => new { group.Key.Gender, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a4d1d5f762bb3be5f93f71a98e6ba0a8b7e4b56b53b1ad5caf2394a9b3b6bec8",
    "sql": "SELECT count(*) FROM Financial_transactions",
    "linq": "context.FinancialTransactions.Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c35148c75fefc005b30f87bb1d1e4109d67a79f453925e99be97fe66e7d238e0",
    "sql": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = \"337\"",
    "linq": "context.FinancialTransactions.Join(context.Accounts, T1 => T1.AccountId, T2 => T2.AccountId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AccountName == \"337\").Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "952cb90ccca928214a8f211ba5f7f79eb315687988f3509d48c8c50c75a7c134",
    "sql": "SELECT avg(transaction_amount) , min(transaction_amount) , max(transaction_amount) , sum(transaction_amount) FROM Financial_transactions",
    "linq": "context.FinancialTransactions.GroupBy(row => 1).Select(group => new { AverageTransactionAmount = group.Select(row => (double) row.TransactionAmount).Average(), MinTransactionAmount = group.Select(row => (double) row.TransactionAmount).Min(), MaxTransactionAmount = group.Select(row => (double) row.TransactionAmount).Max(), SumTransactionAmount = group.Select(row => (double) row.TransactionAmount).Sum() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d4b7348ff8ff15adbeeaa1f5c66a9d4b53395d1815c172e3ead1e49abdb4e01c",
    "sql": "SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
    "linq": "context.FinancialTransactions.GroupBy(row => new { row.TransactionType }).Select(group => new { group.Key.TransactionType, SumTransactionAmount = group.Select(row => (double) row.TransactionAmount).Sum() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e63207a07ad1019df7e9fe335b90c30bf0fb0f99dd4b329b6b317c060f1e73bd",
    "sql": "SELECT T2.account_name , T1.account_id , count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id",
    "linq": "context.FinancialTransactions.Join(context.Accounts, T1 => T1.AccountId, T2 => T2.AccountId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AccountId }).Select(group => new { group.First().T2.AccountName, group.Key.AccountId, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c2e4de295abfc4d0d557a87e1a2f5933be5ec8aa6800df9d588be8e444ee8f4",
    "sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.FinancialTransactions.GroupBy(row => new { row.AccountId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AccountId }).Take(1).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "94469934912a8eadd33edcf6c666366a8d176ff1da5d7a44a17ab5534a8ad2d6",
    "sql": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count(*) >= 4",
    "linq": "context.FinancialTransactions.Join(context.Accounts, T1 => T1.AccountId, T2 => T2.AccountId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AccountId }).Where(group => group.Count() >= 4).Select(group => new { group.Key.AccountId, group.First().T2.AccountName }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c80abd8764c9db3daef29332b84c0d326aa32ddcff444cfcab6f287acf0224da",
    "sql": "SELECT DISTINCT product_size FROM Products",
    "linq": "context.Products.Select(row => new { row.ProductSize }).Distinct().ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "520db8dd4dd6a7d775950ebbde03bd57287969f34d88717984fc29e158422edb",
    "sql": "SELECT DISTINCT product_color FROM Products",
    "linq": "context.Products.Select(row => new { row.ProductColor }).Distinct().ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7d1f6b52d1756cf3fcd7b02dc7a4c0709d32c6c092a932aa799d0006647d0397",
    "sql": "SELECT invoice_number , count(*) FROM Financial_transactions GROUP BY invoice_number",
    "linq": "context.FinancialTransactions.GroupBy(row => new { row.InvoiceNumber }).Select(group => new { group.Key.InvoiceNumber, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fd1ceea954a898ee260de06b1ebe61a4349297482bd126dcaea1d921e0c19ff0",
    "sql": "SELECT T2.invoice_number , T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.FinancialTransactions.Join(context.Invoices, T1 => T1.InvoiceNumber, T2 => T2.InvoiceNumber, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.InvoiceNumber }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.InvoiceNumber, group.First().T2.InvoiceDate }).Take(1).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "45347661b9069766a3f276118a5ea58d2b66a1a7a3a7a78162c27305bb68f075",
    "sql": "SELECT count(*) FROM Invoices",
    "linq": "context.Invoices.Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "33ec5bc3e139101b9d19ce64c62c59205c31127cd81266a4cbe5c0f9833832a7",
    "sql": "SELECT T1.invoice_date , T1.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id",
    "linq": "context.Invoices.Join(context.Orders, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.InvoiceDate, row.T1.OrderId, row.T2.OrderDetails }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a5f07d75e5ab51894d1388c7ea06432e767087d1416cf95ed5079a2b5e364928",
    "sql": "SELECT order_id , count(*) FROM Invoices GROUP BY order_id",
    "linq": "context.Invoices.GroupBy(row => new { row.OrderId }).Select(group => new { group.Key.OrderId, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5a0b17c722dcfa110579e0a82935282740dd53aac1cfa31ceb0e8a09576a5c86",
    "sql": "SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count(*) > 2",
    "linq": "context.Invoices.Join(context.Orders, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.OrderId }).Where(group => group.Count() > 2).Select(group => new { group.Key.OrderId, group.First().T2.OrderDetails }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aeb1da6cf121de12eeab6ec864954ce230be042f0e86c7e7e99c9784c037cbb7",
    "sql": "SELECT T2.customer_last_name , T1.customer_id , T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Orders.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.CustomerLastName, group.Key.CustomerId, group.First().T2.PhoneNumber }).Take(1).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "35a8dad49236850911f626e757ec609944626c5afd1db2df0e58d80335ef6240",
    "sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id",
    "linq": "context.Products.Select(row => row.ProductName).Except(context.Products.Join(context.OrderItems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.ProductName)).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "92e3644f54ff3eec085226855268a0f727cebc3e375acf7b7104727e82781c8b",
    "sql": "SELECT order_id , count(*) FROM Order_items GROUP BY order_id",
    "linq": "context.OrderItems.GroupBy(row => new { row.OrderId }).Select(group => new { group.Key.OrderId, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "40bb6fb9183cf2c0a2e4bfb09fdda2651683b643819dc78b948bf364f46de922",
    "sql": "SELECT product_id , count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
    "linq": "context.OrderItems.GroupBy(row => new { row.ProductId }).Select(group => new { group.Key.ProductId, CountDistinctOrderId = group.Select(row => row.OrderId).Distinct().Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "751892543dcfb68388f3e1d16a1c224c57e847dedf03bcf44104ef1b9a8034cc",
    "sql": "SELECT T2.product_name , count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name",
    "linq": "context.OrderItems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Orders, joined => joined.T1.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T2.ProductName }).Select(group => new { group.Key.ProductName, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f3e966f89dc92964dee811dd6cc9067effbcc9b46ff5f96f02f6b5c62bf97776",
    "sql": "SELECT order_id , count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
    "linq": "context.OrderItems.GroupBy(row => new { row.OrderId }).Select(group => new { group.Key.OrderId, CountDistinctProductId = group.Select(row => row.ProductId).Distinct().Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c7bb502edb96ccf1e9b1bcefcbdd9bc2a7871e8bfdec773b9c4565f7242a8f24",
    "sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
    "linq": "context.Products.Where(row => !context.OrderItems.Select(row => row.ProductId).Contains(row.ProductId)).Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a65d63fa455782a9aad7170133f7a0f3a11cdfa4da88755e08a7b0d5ce3181b9",
    "sql": "SELECT count(*) FROM head WHERE age > 56",
    "linq": "context.Heads.Where(row => row.Age > 56).Count();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8470ab0f673f0e32f38244014235c465d54b4e5ba2b3fd2055ac34c059bba56d",
    "sql": "SELECT name , born_state , age FROM head ORDER BY age",
    "linq": "context.Heads.OrderBy(row => row.Age).Select(row => new { row.Name, row.BornState, row.Age }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d83a7618688ad795c8d00df1216811e5096cf8bb0e6533944372ad6e6a036355",
    "sql": "SELECT creation , name , budget_in_billions FROM department",
    "linq": "context.Departments.Select(row => new { row.Creation, row.Name, row.BudgetInBillions }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ac21a12ca7bdc3a623b7165287776db12e0d0b39d39d182359ffd81dd9098a02",
    "sql": "SELECT max(budget_in_billions) , min(budget_in_billions) FROM department",
    "linq": "context.Departments.GroupBy(row => 1).Select(group => new { MaxBudgetInBillions = group.Select(row => row.BudgetInBillions).Max(), MinBudgetInBillions = group.Select(row => row.BudgetInBillions).Min() }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e3b775e4ec8a9b70e50dfcf8b537ebef46c4c7ed322a791253ff61ed3a1669a6",
    "sql": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
    "linq": "context.Departments.Where(row => row.Ranking >= 10 && row.Ranking <= 15).Select(row => (double) row.NumEmployees).Average();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e45b460e1d8c6a90c4bc7bb7a394470368104dbbda90072f54045bf53aac33ee",
    "sql": "SELECT name FROM head WHERE born_state != 'California'",
    "linq": "context.Heads.Where(row => row.BornState != \"California\").Select(row => new { row.Name }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "942f3bb7d311d37f87030402a834fcf94b4f6f4ad9b4ddce4bff1c917886a29f",
    "sql": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'",
    "linq": "context.Departments.Join(context.Managements, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Heads, joined => joined.T2.HeadId, T3 => T3.HeadId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.BornState == \"Alabama\").Select(row => new { row.T1.Creation }).Distinct().ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "184e208b940a7670ef410cdea10d2d60ba4809d1df86fbfb8226be7a9182963d",
    "sql": "SELECT born_state FROM head GROUP BY born_state HAVING count(*) >= 3",
    "linq": "context.Heads.GroupBy(row => new { row.BornState }).Where(group => group.Count() >= 3).Select(group => new { group.Key.BornState }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7bba309ab71d607bc5d1f9b1251e4d141df8b9eef5cbef786d72af23c8996ae2",
    "sql": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Departments.GroupBy(row => new { row.Creation }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Creation }).Take(1).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "586380a21d03fe243743df408f1bef6523b5d29421bc4285baed6dcffabd41f6",
    "sql": "SELECT T1.name , T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'",
    "linq": "context.Departments.Join(context.Managements, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TemporaryActing == \"Yes\").Select(row => new { row.T1.Name, row.T1.NumEmployees }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "119dd748858e6c839a4abf02019185111a9a19a680811ba0101b5f58c1eefba3",
    "sql": "SELECT count(DISTINCT temporary_acting) FROM management",
    "linq": "context.Managements.Select(row => row.TemporaryActing).Distinct().Count();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b1c9472efd1f5ce106c1b0fc715466abe85975f95f745c6fda7db383ec33dce9",
    "sql": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
    "linq": "context.Departments.Where(row => !context.Managements.Select(row => row.DepartmentId).Contains(row.DepartmentId)).Count();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a9276e73219fa789ee849ec15fea0ea5520f1f92ea88cb5d0c46bbcef9e74bdc",
    "sql": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'",
    "linq": "context.Managements.Join(context.Heads, T2 => T2.HeadId, T1 => T1.HeadId, (T2, T1) => new { T2, T1 }).Where(row => row.T2.TemporaryActing == \"Yes\").Select(row => new { row.T1.Age }).Distinct().ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "026da23ecfa7f8ec44a16b97aa6e148cc4e9ac29745409ef43a986ced7a245d6",
    "sql": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'",
    "linq": "context.Departments.Join(context.Managements, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Heads, joined => joined.T2.HeadId, T3 => T3.HeadId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Treasury\").Select(row => row.T3.BornState).Intersect(context.Departments.Join(context.Managements, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Heads, joined => joined.T2.HeadId, T3 => T3.HeadId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Homeland Security\").Select(row => row.T3.BornState)).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ad27fe5e3ce20d1068f8ea8044df1e363a9c5484df1bc8883ba2cea9f035ca1e",
    "sql": "SELECT T1.department_id , T1.name , count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING count(*) > 1",
    "linq": "context.Managements.Join(context.Departments, T2 => T2.DepartmentId, T1 => T1.DepartmentId, (T2, T1) => new { T2, T1 }).GroupBy(row => new { row.T1.DepartmentId }).Select(group => new { group.Key.DepartmentId, group.First().T1.Name, Count = group.Count() }).Where(group => group.Count > 1).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "795f2103d8f6e958b0e26bf8e27005153f878286ba9b431e04d273e79abb4652",
    "sql": "SELECT head_id , name FROM head WHERE name LIKE '%Ha%'",
    "linq": "context.Heads.Where(row => EF.Functions.Like(row.Name, \"%Ha%\")).Select(row => new { row.HeadId, row.Name }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e6d7bf20891d990e5e4da30a8fe0d25bbdb746ccd858cc225bbf89deffc56624",
    "sql": "SELECT count(*) FROM journalist",
    "linq": "context.Journalists.Count();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4d7d0bd47a073cd94a0db3b4afdaef6d2ca06e57498f5747765a9f6b9f6e4c64",
    "sql": "SELECT Name FROM journalist ORDER BY Years_working ASC",
    "linq": "context.Journalists.OrderBy(row => row.YearsWorking).Select(row => new { row.Name }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c75cd4912e006b6e1f25fa9d2f40422b110b313abf8e93e26d83acb336ebfb5c",
    "sql": "SELECT Nationality , Age FROM journalist",
    "linq": "context.Journalists.Select(row => new { row.Nationality, row.Age }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1a27e0a9449202258e9d7cc52e6656b1941bcc7c1bbae70361bdbe4ffb5e9e06",
    "sql": "SELECT Name FROM journalist WHERE Nationality = \"England\" OR Nationality = \"Wales\"",
    "linq": "context.Journalists.Where(row => row.Nationality == \"England\" || row.Nationality == \"Wales\").Select(row => new { row.Name }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d2da87cfa2ddfcee7346e4f0d647674c62d9b6539280891d7cec73d81390506e",
    "sql": "SELECT avg(Years_working) FROM journalist",
    "linq": "context.Journalists.Select(row => row.YearsWorking).Average();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e1affe4a5e733e572d5dde79ef3dd2b0c22a49e1b1ad3b2bfa299ab04c8d80e2",
    "sql": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1",
    "linq": "context.Journalists.OrderByDescending(row => row.YearsWorking).Select(row => new { row.Nationality }).Take(1).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ab6c2e48e8b1ef65f870c29a56c570bff1f62177cfe619fef622ba0484a505fb",
    "sql": "SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
    "linq": "context.Journalists.GroupBy(row => new { row.Nationality }).Select(group => new { group.Key.Nationality, Count = group.Count() }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ac84532b38a9d5fde1e057960277aaaa53e3636a312434c6fed01b6740796ce9",
    "sql": "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Journalists.GroupBy(row => new { row.Nationality }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Nationality }).Take(1).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "589b9563a647ab248ff53388f025feb37ba6f6342d20323fa3dbf9512bbfcce4",
    "sql": "SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3",
    "linq": "context.Journalists.Where(row => row.YearsWorking > 10).Select(row => row.Nationality).Intersect(context.Journalists.Where(row => row.YearsWorking < 3).Select(row => row.Nationality)).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e26562cb853c580eab1f7ce2c487e9fe5fd6e15375f960179ba67371e220f806",
    "sql": "SELECT Date , Name , venue FROM event ORDER BY Event_Attendance DESC",
    "linq": "context.Events.OrderByDescending(row => row.EventAttendance).Select(row => new { row.Date, row.Name, row.Venue }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ba3d10594557d28b5a4866f80a54a91bd5d8e87f9bbc356b74a18e52f9b2eee5",
    "sql": "SELECT T3.Name , T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID",
    "linq": "context.NewsReports.Join(context.Events, T1 => T1.EventId, T2 => T2.EventId, (T1, T2) => new { T1, T2 }).Join(context.Journalists, joined => joined.T1.JournalistId, T3 => T3.JournalistId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Name, row.T2.Date }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "14ec277bcd7280117d792f16ea1dc6affd47909d0badfa45e2de01da4aaaf50a",
    "sql": "SELECT T3.Name , T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID ORDER BY T2.Event_Attendance ASC",
    "linq": "context.NewsReports.Join(context.Events, T1 => T1.EventId, T2 => T2.EventId, (T1, T2) => new { T1, T2 }).Join(context.Journalists, joined => joined.T1.JournalistId, T3 => T3.JournalistId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T2.EventAttendance).Select(row => new { T3Name = row.T3.Name, T2Name = row.T2.Name }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "045fa6e69d8c36b21378aa2d9f95735e96a1da6b643c9f7dadc0a18bf73ae35c",
    "sql": "SELECT T3.Name , COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name",
    "linq": "context.NewsReports.Join(context.Events, T1 => T1.EventId, T2 => T2.EventId, (T1, T2) => new { T1, T2 }).Join(context.Journalists, joined => joined.T1.JournalistId, T3 => T3.JournalistId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.Name }).Select(group => new { group.Key.Name, Count = group.Count() }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "26da9dbf836c916e618e4f6037e5f3e529d0f0bae5373df0cfb1f0f7bf45c7f4",
    "sql": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*) > 1",
    "linq": "context.NewsReports.Join(context.Events, T1 => T1.EventId, T2 => T2.EventId, (T1, T2) => new { T1, T2 }).Join(context.Journalists, joined => joined.T1.JournalistId, T3 => T3.JournalistId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.Name }).Where(group => group.Count() > 1).Select(group => new { group.Key.Name }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "901cefa919dcf109fd0a2096c0e849484cbc2c7fa9a06c146c90a7c4870afbea",
    "sql": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)",
    "linq": "context.Journalists.Where(row => !context.NewsReports.Select(row => row.JournalistId).Contains(row.JournalistId)).Select(row => new { row.Name }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dccbb2ad83d43ad7afb6d1dd369534e46297c1a01c742d240c51dc6dd6c89115",
    "sql": "SELECT avg(Event_Attendance) , max(Event_Attendance) FROM event",
    "linq": "context.Events.GroupBy(row => 1).Select(group => new { AverageEventAttendance = group.Select(row => row.EventAttendance).Average(), MaxEventAttendance = group.Select(row => row.EventAttendance).Max() }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "327004fad50e5beecdb99748aba01a88177f5ce28a932883efc49e0a3cc7e1f3",
    "sql": "SELECT venue , name FROM event ORDER BY Event_Attendance DESC LIMIT 2",
    "linq": "context.Events.OrderByDescending(row => row.EventAttendance).Select(row => new { row.Venue, row.Name }).Take(2).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b0ef9e81d9edbd10f9cdb80d7c14f66d1cece9440f8bc0bf5e925e1344789d32",
    "sql": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC",
    "linq": "context.Districts.OrderByDescending(row => row.CityArea).Select(row => new { row.DistrictName }).Distinct().ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a7db33f20c76258b63aa0694550d851490c21f4558d85a94a881f04b8002028d",
    "sql": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*) > 3",
    "linq": "context.Products.GroupBy(row => new { row.MaxPageSize }).Where(group => group.Count() > 3).Select(group => new { group.Key.MaxPageSize }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5f16d8b12cc615e69d85c4e0ecad4348277905626e2712ccdbe938522bd94475",
    "sql": "SELECT District_name , City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",
    "linq": "context.Districts.Where(row => row.CityPopulation >= 200000 && row.CityPopulation <= 2000000).Select(row => new { row.DistrictName, row.CityPopulation }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "51df98f6d656309651f5ef9aa52180718730bae3372a2655cf85a6040fafcb25",
    "sql": "SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000",
    "linq": "context.Districts.Where(row => row.CityArea > 10 || row.CityPopulation > 100000).Select(row => new { row.DistrictName }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7a3cea016f457ddaabd0a8dec9f8bf510d8fb43d07166c8ab170be04540f03d6",
    "sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
    "linq": "context.Districts.OrderByDescending(row => row.CityPopulation).Select(row => new { row.DistrictName }).Take(1).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9a6643e9a1efa44571ce79d35068b6c6055f3762d2550a51379a8c3d155d8fb6",
    "sql": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
    "linq": "context.Districts.OrderBy(row => row.CityArea).Select(row => new { row.DistrictName }).Take(1).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "54e7b46157271e67535ca7371807c394729700e5136e02298fe45c3e2db1f827",
    "sql": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3",
    "linq": "context.Districts.OrderByDescending(row => row.CityArea).Select(row => row.CityPopulation).Sum();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "32f75633f70d18e5c231f1c5e09643f5ad12a61707bf87cc1c6ad660d8da1818",
    "sql": "SELECT TYPE , count(*) FROM store GROUP BY TYPE",
    "linq": "context.Stores.GroupBy(row => new { row.Type }).Select(group => new { group.Key.Type, Count = group.Count() }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "267daf46337f63fba72da229f95368c02a6e065091ac7df9f24988aadf23feff",
    "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_name = \"Khanewal District\"",
    "linq": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.DistrictName == \"Khanewal District\").Select(row => new { row.t1.StoreName }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3d1651a5f2092b5d53cd4d4137741e9f6d01cc5dc63b096c9c115c7bcdb140c4",
    "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district_id = (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
    "linq": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.DistrictId == context.Districts.OrderByDescending(row => row.CityPopulation).Select(row => row.DistrictId).Take(1).First()).Select(row => new { row.t1.StoreName }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "45d79deb0d6387a80a9458b821158eb81ceef1c36d32a415aa9e8511642757ff",
    "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.store_name = \"Blackville\"",
    "linq": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.StoreName == \"Blackville\").Select(row => new { row.t3.HeadquarteredCity }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ff731d70f28d828fb918bdabd69f7dd65f808c21660e0a9c6ba25c0c961abc29",
    "sql": "SELECT t3.headquartered_city , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city",
    "linq": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.HeadquarteredCity }).Select(group => new { group.Key.HeadquarteredCity, Count = group.Count() }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e34016e9bd528208aa728f17ef538b97ee4a8a9d0c843e24a2ad73038d2f229d",
    "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.HeadquarteredCity }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.HeadquarteredCity }).Take(1).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "964e31af4db7f5598aa78549378bb004c3b9665cb707b7009dabe28b4ffbd28e",
    "sql": "SELECT avg(pages_per_minute_color) FROM product",
    "linq": "context.Products.Select(row => (double) row.PagesPerMinuteColor).Average();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "69d7519bd059fb58735bc2d9926bfaa0cfd92f15533c0882599ca0c3722f62a0",
    "sql": "SELECT product FROM product WHERE max_page_size = \"A4\" AND pages_per_minute_color < 5",
    "linq": "context.Products.Where(row => row.MaxPageSize == \"A4\" && row.PagesPerMinuteColor < 5).Select(row => new { row.Product1 }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "637f04c55ea27edc8f745b3a04317c57d3d63c6e6675a8e4977c60be6fe88a1f",
    "sql": "SELECT product FROM product WHERE max_page_size = \"A4\" OR pages_per_minute_color < 5",
    "linq": "context.Products.Where(row => row.MaxPageSize == \"A4\" || row.PagesPerMinuteColor < 5).Select(row => new { row.Product1 }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9928c9a17573063c7d9f4449392f6a7b751c03acec54a3d919956acfa0367241",
    "sql": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"",
    "linq": "context.Products.Where(row => EF.Functions.Like(row.Product1, \"%Scanner%\")).Select(row => new { row.Product1 }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f2798ab998c90e37f0f5c5b771d7c3fdc91daf3cef679fdca6224f9e4b34a765",
    "sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Products.GroupBy(row => new { row.MaxPageSize }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.MaxPageSize }).Take(1).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "42fa1829125775560d1c4af4136eb7d1a051b65015e02acf4ac6ffb921c628b8",
    "sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
    "linq": "context.Products.Where(row => row.Product1 != context.Products.GroupBy(row => new { row.MaxPageSize }).OrderByDescending(group => group.Count()).Select(group => group.Key.MaxPageSize).Take(1).First()).Select(row => new { row.Product1 }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "97c0896dfa2fa4d8711e872d2ce8d9e8fa6c1c6ca0c2ab24beddf61370a40d38",
    "sql": "SELECT sum(city_population) FROM district WHERE city_area > (SELECT avg(city_area) FROM district)",
    "linq": "context.Districts.Where(row => row.CityArea > context.Districts.Select(row => (double) row.CityArea).Average()).Select(row => row.CityPopulation).Sum();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "740ab8141201b74ef142b194db8d1d26f781f776b2466b5d7df7f449a0b9b375",
    "sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = \"Village Store\"",
    "linq": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Type == \"City Mall\").Select(row => row.t3.DistrictName).Intersect(context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Type == \"Village Store\").Select(row => row.t3.DistrictName)).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "78cc0096ad20cc3208f442ba765625abeccdc1c97f7775afcf998387e7ffc63b",
    "sql": "SELECT count(DISTINCT rank) FROM captain",
    "linq": "context.Captains.Select(row => row.Rank).Distinct().Count();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7e0d9cb362aa4b2877dea9f5121e515ce9a9e57df6a5c409f32d0657a043f03e",
    "sql": "SELECT count(*) , rank FROM captain GROUP BY rank",
    "linq": "context.Captains.GroupBy(row => new { row.Rank }).Select(group => new { Count = group.Count(), group.Key.Rank }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "24525539c7bb2c2fb27d7f5857cc9e233b111b45f5135774e5c2aeb41e4d2cf7",
    "sql": "SELECT name FROM captain ORDER BY age DESC",
    "linq": "context.Captains.OrderByDescending(row => row.Age).Select(row => new { row.Name }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3aca0fbe0321e74a4fbd90fa0da4cc381753fb2a03d010e0c20e8d0e1b100b06",
    "sql": "SELECT name , CLASS , rank FROM captain",
    "linq": "context.Captains.Select(row => new { row.Name, row.Class, row.Rank }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "38eafe3e0b8cad361ea301c3602001ddbbeff4c7480e94b15eea14d0afa40c91",
    "sql": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Captains.GroupBy(row => new { row.Rank }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Rank }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "540bf1693a3e503c1a5fd5754027d924b387b717900ea50292c0e4d27a42bc0b",
    "sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*) > 2",
    "linq": "context.Captains.GroupBy(row => new { row.Class }).Where(group => group.Count() > 2).Select(group => new { group.Key.Class }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "25352cfe183f219df48c49d32192a89db546ab23f6161ae28e64318a4e235ce8",
    "sql": "SELECT name FROM captain WHERE rank = 'Midshipman' OR rank = 'Lieutenant'",
    "linq": "context.Captains.Where(row => row.Rank == \"Midshipman\" || row.Rank == \"Lieutenant\").Select(row => new { row.Name }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "acc9c577aedd3858d977240e5ad676c2a461f807dea5d9d14408ffd4d24402ca",
    "sql": "SELECT rank FROM captain WHERE CLASS = 'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS = 'Armed schooner'",
    "linq": "context.Captains.Where(row => row.Class == \"Cutter\").Select(row => row.Rank).Intersect(context.Captains.Where(row => row.Class == \"Armed schooner\").Select(row => row.Rank)).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3103fd6741760c315ca8e926f75ac35e51c5676a1f5e2290273ed927052c8fa2",
    "sql": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS = 'Third-rate ship of the line'",
    "linq": "context.Captains.Select(row => row.Rank).Except(context.Captains.Where(row => row.Class == \"Third-rate ship of the line\").Select(row => row.Rank)).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7e3afb52046b6f499ef8543200ab53301b5e67dffaf94da5ef1c821e88396e7e",
    "sql": "SELECT name FROM captain ORDER BY age LIMIT 1",
    "linq": "context.Captains.OrderBy(row => row.Age).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e967d60917d7b009b95ee2867e4346f413bea662350dc915160d49c7a3db3400",
    "sql": "SELECT count(*) FROM ship",
    "linq": "context.Ships.Count();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a8505940e7b57a6ea0bfa524e1589e168b0601cb77746e33844fc5d478e26727",
    "sql": "SELECT name , TYPE , flag FROM ship ORDER BY built_year DESC LIMIT 1",
    "linq": "context.Ships.OrderByDescending(row => row.BuiltYear).Select(row => new { row.Name, row.Type, row.Flag }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "385b5735e2921948d5ac2b98412e6d5546303febe10b22a0328cfbdbefef7aab",
    "sql": "SELECT count(*) , flag FROM ship GROUP BY flag",
    "linq": "context.Ships.GroupBy(row => new { row.Flag }).Select(group => new { Count = group.Count(), group.Key.Flag }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7e7a92adc0ae89dd82c6511de8d3022b240992990f529fce94a88e57f3f64e48",
    "sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Ships.GroupBy(row => new { row.Flag }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Flag }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f466e558d338a52dc0308cdfb98b8fac6a743a6e076bf866fc70bffa15afbce1",
    "sql": "SELECT name FROM ship ORDER BY built_year , CLASS",
    "linq": "context.Ships.OrderBy(row => row.BuiltYear).ThenBy(row => row.Class).Select(row => new { row.Name }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d75e0ee6cb9fe46647c263d871dfc088d2b15ca795ae3a1427b0e1801a564e48",
    "sql": "SELECT TYPE FROM ship WHERE flag = 'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag = 'Malta'",
    "linq": "context.Ships.Where(row => row.Flag == \"Panama\").Select(row => row.Type).Intersect(context.Ships.Where(row => row.Flag == \"Malta\").Select(row => row.Type)).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dcdf5b914ba71de698f34d35fa6dc91ffc92515fa97bbdc2e884393d84d64f6c",
    "sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Ships.GroupBy(row => new { row.BuiltYear }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BuiltYear }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "40aa291e56316e30891dbe8c6fbfdb7335fb2924ad20917e122fdbff52609326",
    "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING count(*) > 1",
    "linq": "context.Ships.Join(context.Captains, t1 => t1.ShipId, t2 => t2.ShipId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ShipId }).Where(group => group.Count() > 1).Select(group => new { group.First().t1.Name }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7a9ebb07a64a45ffb453f683edaf35336d1dd0c9300cff5d6d0f31c5cf2c37d0",
    "sql": "SELECT name , CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",
    "linq": "context.Ships.Where(row => !context.Captains.Select(row => row.ShipId).Contains(row.ShipId)).Select(row => new { row.Name, row.Class }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d508cc540852e392486ced320728e2216e794a43aab62cc7e6d35298979540c3",
    "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id ORDER BY t2.age LIMIT 1",
    "linq": "context.Ships.Join(context.Captains, t1 => t1.ShipId, t2 => t2.ShipId, (t1, t2) => new { t1, t2 }).OrderBy(row => row.t2.Age).Select(row => new { row.t1.Name }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c0564eb24bbfddcb4e6a946044b3a8be0f9f06cc11231e611fb9d57a78d03c2f",
    "sql": "SELECT name , flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman')",
    "linq": "context.Ships.Where(row => !context.Captains.Where(row => row.Rank == \"Midshipman\").Select(row => row.ShipId).Contains(row.ShipId)).Select(row => new { row.Name, row.Flag }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "27223f992622391510bcfadd4e72b847a8e7ba52c50d56ffeb900d62415b4993",
    "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Lieutenant'",
    "linq": "context.Ships.Join(context.Captains, t1 => t1.ShipId, t2 => t2.ShipId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Rank == \"Midshipman\").Select(row => row.t1.Name).Intersect(context.Ships.Join(context.Captains, t1 => t1.ShipId, t2 => t2.ShipId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Rank == \"Lieutenant\").Select(row => row.t1.Name)).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b471f1f3a95e6b69fd174a584379767c45d823898b1f4a330aa829cd1077341e",
    "sql": "SELECT count(*) FROM Products",
    "linq": "context.Products.Count();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b8cfec769c6941fe0c552e950c8012327b96b98b6f4ada03dac1924a999d4b4f",
    "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
    "linq": "context.Products.OrderBy(row => (double) row.ProductPrice).Select(row => new { row.ProductName }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "184bdb6f00ea07303d06a52c2e0b5d5843f6f0ba8ca4151a2e7eac4a23daf2c5",
    "sql": "SELECT Product_Name , Product_Type_Code FROM Products",
    "linq": "context.Products.Select(row => new { row.ProductName, row.ProductTypeCode }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "609145bc34c0460452e32c94c3d4c29cac1bd49c6528efc4f9fc89a1d60cfe2b",
    "sql": "SELECT Product_Price FROM Products WHERE Product_Name = \"Dining\" OR Product_Name = \"Trading Policy\"",
    "linq": "context.Products.Where(row => row.ProductName == \"Dining\" || row.ProductName == \"Trading Policy\").Select(row => new { row.ProductPrice }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5dcee106d7702d2eb041fcba85c0a0608702feb3935855ff501b67fb917c7613",
    "sql": "SELECT avg(Product_Price) FROM Products",
    "linq": "context.Products.Select(row => (double) row.ProductPrice).Average();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b3f0add9e6fa200bbdf042192d2fda67695e6a5f5bbe5529ebd001984be6cebc",
    "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1",
    "linq": "context.Products.OrderByDescending(row => (double) row.ProductPrice).Select(row => new { row.ProductName }).Take(1).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f793f7f347c1ba2a569f75a292b0d1be274e2875f33083a83dff10277315acf2",
    "sql": "SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code",
    "linq": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Select(group => new { group.Key.ProductTypeCode, Count = group.Count() }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "973a2253d2660916f70336f6bb73c76509c91f87bc4ea546e8f1853bb8f54485",
    "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Products.GroupBy(row => new { row.ProductTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ProductTypeCode }).Take(1).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1eff2833c97098e098e0cc736699c4c2e24daa12a5349e2bd094a3eddacdf7e2",
    "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*) >= 2",
    "linq": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProductTypeCode }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3ed9036829abbef4cf557368f399426de9faabdd7ecc7a7633c9f71eed430002",
    "sql": "SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price < 3000",
    "linq": "context.Products.Where(row => row.ProductPrice > 4500).Select(row => row.ProductTypeCode).Intersect(context.Products.Where(row => row.ProductPrice < 3000).Select(row => row.ProductTypeCode)).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "92bde9b4b640d9a648e7fde45db765c8210c6a6a9808114c1ebe7ac8b7b3c1ef",
    "sql": "SELECT T1.Product_Name , COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name",
    "linq": "context.Products.Join(context.ProductsInEvents, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductName }).Select(group => new { group.Key.ProductName, Count = group.Count() }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a3be9b03ee79cd8b26f8207801f2eb635c2f7d7c846c74817445638438bc0386",
    "sql": "SELECT T1.Product_Name , COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC",
    "linq": "context.Products.Join(context.ProductsInEvents, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductName }).Select(group => new { group.Key.ProductName, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "45648daeaca01998e62d302e983a4eb4254def9a4ae1cd5062b9528b43cce603",
    "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*) >= 2",
    "linq": "context.Products.Join(context.ProductsInEvents, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductName }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProductName }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1dca976e43c532be358fb77978d9b0c5babdb86bd3e66d5760df4efca02ef299",
    "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*) >= 2 ORDER BY T1.Product_Name",
    "linq": "context.Products.Join(context.ProductsInEvents, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductName }).Where(group => group.Count() >= 2).OrderBy(group => group.First().T1.ProductName).Select(group => new { group.Key.ProductName }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e2c395ec6c09c86e4912cbd98b3a3301a08f48fc54f285b30aabfbc1adff3bb0",
    "sql": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)",
    "linq": "context.Products.Where(row => !context.ProductsInEvents.Select(row => row.ProductId).Contains(row.ProductId)).Select(row => new { row.ProductName }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cfd8840cfb185e158c161566113d82d887ff285338f2dbf63e384a462f98a304",
    "sql": "SELECT count(*) FROM products",
    "linq": "context.Products.Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b91ead1bd1cc51b950dc219b9ca1bf2f13fdafb8591cc52e984077c7467fce73",
    "sql": "SELECT count(*) FROM ref_colors",
    "linq": "context.RefColors.Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "de5293c26973ca39924014629fd63278e2fef07040a5a515b87b2c4e237e9f50",
    "sql": "SELECT count(*) FROM CHARACTERISTICS",
    "linq": "context.Characteristics.Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c602635dbbeb754f48e1792fe7ef0f67699737858129d1187ea3a3bb7a67c18c",
    "sql": "SELECT color_description FROM ref_colors",
    "linq": "context.RefColors.Select(row => new { row.ColorDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b7af92a6e1cf8a6ff1cce3fb7838cf22a0a4ee73645938957a0b5c381b50ae6f",
    "sql": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS",
    "linq": "context.Characteristics.Select(row => new { row.CharacteristicName }).Distinct().ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "03a6f8c86865cb699fc51a9eb4d764cff08e33d3ff82eb682a35d175c6feb9e5",
    "sql": "SELECT product_name FROM products WHERE product_category_code = \"Spices\"",
    "linq": "context.Products.Where(row => row.ProductCategoryCode == \"Spices\").Select(row => new { row.ProductName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a7dee6358308ddd0d4424b45e2518625bee1524f9700eb2327369b5069fe5af2",
    "sql": "SELECT T1.product_name , T2.color_description , T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code = T2.color_code WHERE product_category_code = \"Herbs\"",
    "linq": "context.Products.Join(context.RefColors, T1 => T1.ColorCode, T2 => T2.ColorCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ProductCategoryCode == \"Herbs\").Select(row => new { row.T1.ProductName, row.T2.ColorDescription, row.T1.ProductDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f2481aa1b034c1bf0a9592f48643cfca7e297ed268fa86b827d5ef549d28c559",
    "sql": "SELECT count(*) FROM products WHERE product_category_code = \"Seeds\"",
    "linq": "context.Products.Where(row => row.ProductCategoryCode == \"Seeds\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9ff335b61c1d69e92ca4cb83474803bab27482b198f17d98b423ddf87eb94dfc",
    "sql": "SELECT product_category_code FROM products WHERE product_name = \"flax\"",
    "linq": "context.Products.Where(row => row.ProductName == \"flax\").Select(row => new { row.ProductCategoryCode }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7746025cbb5dd5a6fe95a5a3b0ed92356716237edc8c5dfd3cb6da17c73fbc93",
    "sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description = 'yellow'",
    "linq": "context.Products.Join(context.RefColors, T1 => T1.ColorCode, T2 => T2.ColorCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ColorDescription == \"yellow\").Select(row => new { row.T1.ProductName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cc803a10630fa6c3ab1772ed073981b1d32e0082986fee4451b0e68de5694d64",
    "sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%'",
    "linq": "context.RefProductCategories.Join(context.Products, T1 => T1.ProductCategoryCode, T2 => T2.ProductCategoryCode, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.ProductDescription, \"%t%\")).Select(row => new { row.T1.ProductCategoryDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e040b6e9dec31fab47a5b232f4fc0c45b680d69f5a81a35161567c009c2b790c",
    "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"catnip\"",
    "linq": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ProductName == \"catnip\").Select(row => new { row.t2.ColorDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ca9eec64b4dd13bf5927468f91a2b4b6e68194705649c867b5a8f9c1911f127a",
    "sql": "SELECT t1.color_code , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"chervil\"",
    "linq": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ProductName == \"chervil\").Select(row => new { row.t1.ColorCode, row.t2.ColorDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7e0e33947bd8a705a6c4461cb19ba7d02a20e1b24ef55956ccdd8548744eed1b",
    "sql": "SELECT t1.product_id , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id HAVING count(*) >= 2",
    "linq": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).Join(context.ProductCharacteristics, joined => joined.t1.ProductId, t3 => t3.ProductId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.ProductId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProductId, group.First().t2.ColorDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cf03c67068753eda2b95a66360fa1333730db8ca8376d58ad3198b57d333aa66",
    "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"white\"",
    "linq": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).Where(row => row.t2.ColorDescription == \"white\").Select(row => new { row.t1.ProductName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4f2cb9c0a9486e2ee177e67219c6791bc40efdfbb1f57f425905d2080db8170b",
    "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"sesame\"",
    "linq": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ProductName == \"sesame\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "94a6dde23bc98e2720f12da16426da86894a7a15acb28196ab48b01d338df2ec",
    "sql": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\"",
    "linq": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"sesame\").Select(row => row.t3.CharacteristicName).Distinct().Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "000726433f9ffc9a482ce57264896e3598fbdfcb58379117e5736ae862a2441f",
    "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\"",
    "linq": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"sesame\").Select(row => new { row.t3.CharacteristicName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f1d0c47ac6ccb8505d28e36fce9d59ec19e1eeceacad36dc674044f7a6b4e39a",
    "sql": "SELECT t3.characteristic_name , t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"cumin\"",
    "linq": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"cumin\").Select(row => new { row.t3.CharacteristicName, row.t3.CharacteristicDataType }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d15e364ed087db8450e920ee5e988564bc9442a05febfda7ad72b0957262f645",
    "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\" AND t3.characteristic_type_code = \"Grade\"",
    "linq": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"sesame\" && row.t3.CharacteristicTypeCode == \"Grade\").Select(row => new { row.t3.CharacteristicName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b1f171cba212b1f209e180ef70ce8b984dbbe6f02a6de1af11bed05b38882882",
    "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"laurel\"",
    "linq": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"laurel\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d5c14d0d18efae60f8f62f255da5bb795195619b21f286077039c3c2c16b79d9",
    "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"flax\"",
    "linq": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"flax\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f6477a076bac31aad488ff245725814436debae95742af2c89a206f1973cad46",
    "sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"red\" AND t3.characteristic_name = \"fast\"",
    "linq": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.RefColors, joined => joined.t1.ColorCode, t4 => t4.ColorCode, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ColorDescription == \"red\" && row.t3.CharacteristicName == \"fast\").Select(row => new { row.t1.ProductName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c36744477ee2ace6b545f1e5a311e84ddaf277728a0f88ac55eb5ee2f6594291",
    "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"hot\"",
    "linq": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.CharacteristicName == \"hot\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5432e692a2ca8fb5953e45dd592717dab1d0fe5c1bc62131a89b0915a2670aaf",
    "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"warm\"",
    "linq": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.CharacteristicName == \"warm\").Select(row => new { row.t1.ProductName }).Distinct().ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ed5aafcdf32f75f9abff0e553adbe3a3d840ba8ca5887ef78b225661273b5cc2",
    "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"red\" AND t3.characteristic_name = \"slow\"",
    "linq": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.RefColors, joined => joined.t1.ColorCode, t4 => t4.ColorCode, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ColorDescription == \"red\" && row.t3.CharacteristicName == \"slow\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d51256bb80ae25a301e863b50ef9df3678d603506f5fd5f98e44a17367e7ad8c",
    "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"white\" OR t3.characteristic_name = \"hot\"",
    "linq": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.RefColors, joined => joined.t1.ColorCode, t4 => t4.ColorCode, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ColorDescription == \"white\" || row.t3.CharacteristicName == \"hot\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "72704905834d8ebf678e9a9e9913f0325373282887174b82e25e5c882fa1cfc1",
    "sql": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code = \"Herbs\"",
    "linq": "context.RefProductCategories.Where(row => row.ProductCategoryCode == \"Herbs\").Select(row => new { row.UnitOfMeasure }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6f13d353d03fffc81ed83a2f606316c7c0ffef907f285e8bd56902cfe7d775e2",
    "sql": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code = \"Spices\"",
    "linq": "context.RefProductCategories.Where(row => row.ProductCategoryCode == \"Spices\").Select(row => new { row.ProductCategoryDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "68fdf418f75a70b6dcb775eb9cdc7c1ebc987da1763e19936a80e246377b7350",
    "sql": "SELECT product_category_description , unit_of_measure FROM ref_product_categories WHERE product_category_code = \"Herbs\"",
    "linq": "context.RefProductCategories.Where(row => row.ProductCategoryCode == \"Herbs\").Select(row => new { row.ProductCategoryDescription, row.UnitOfMeasure }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4a251158dd7c9e4eeeedfe7d2102dc5721576b489c3f6b3431ebbfe698780d97",
    "sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"cumin\"",
    "linq": "context.Products.Join(context.RefProductCategories, t1 => t1.ProductCategoryCode, t2 => t2.ProductCategoryCode, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ProductName == \"cumin\").Select(row => new { row.t2.UnitOfMeasure }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a119485b94278b99dbbd5441e940aae007e95c712507c9bb9720b3136e0a2d1d",
    "sql": "SELECT t2.unit_of_measure , t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"chervil\"",
    "linq": "context.Products.Join(context.RefProductCategories, t1 => t1.ProductCategoryCode, t2 => t2.ProductCategoryCode, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ProductName == \"chervil\").Select(row => new { row.t2.UnitOfMeasure, row.t2.ProductCategoryCode }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5f177364037f8624448b6f38e591ee54be4ab78b26a06ae3f45e1c1fecfa0d36",
    "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code WHERE t3.color_description = \"white\" AND t2.unit_of_measure != \"Handful\"",
    "linq": "context.Products.Join(context.RefProductCategories, t1 => t1.ProductCategoryCode, t2 => t2.ProductCategoryCode, (t1, t2) => new { t1, t2 }).Join(context.RefColors, joined => joined.t1.ColorCode, t3 => t3.ColorCode, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.ColorDescription == \"white\" && row.t2.UnitOfMeasure != \"Handful\").Select(row => new { row.t1.ProductName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "47bec1caa7c63c30196e7725428a72654511c7668d79e78e9a1bc9306573681c",
    "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ColorDescription }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ColorDescription }).Take(1).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "25e8bf6d303ef1cd70c91515978b00c86f1e0b7f80afec9bed70cdf79da744a7",
    "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ColorDescription }).OrderBy(group => group.Count()).Select(group => new { group.Key.ColorDescription }).Take(1).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "21fb6233ce6b61b41e12caeb75373a09ffc35e4f8a6cb29d4d8ff7310f8b0464",
    "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.CharacteristicName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CharacteristicName }).Take(1).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ae496635ada8e74853eedac71d9cf69365608260d5fed0e6ca9402ea335580e8",
    "sql": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name , t1.other_characteristic_details , t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id",
    "linq": "context.Characteristics.Select(row => new { row.CharacteristicName, row.OtherCharacteristicDetails, row.CharacteristicDataType }).Except(context.Characteristics.Join(context.ProductCharacteristics, t1 => t1.CharacteristicId, t2 => t2.CharacteristicId, (t1, t2) => new { t1, t2 }).Select(row => new { row.t1.CharacteristicName, row.t1.OtherCharacteristicDetails, row.t1.CharacteristicDataType })).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e027f0dd6d81b631e73bf96914718183c3bf64d9799caaf8cacf66f26e0a1318",
    "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*) >= 2",
    "linq": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.CharacteristicName }).Where(group => group.Count() >= 2).Select(group => new { group.Key.CharacteristicName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "857e322586b6e35d7db1afac263df27b93b314765f33dd129fd0d2ca8b516903",
    "sql": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
    "linq": "context.RefColors.Where(row => !context.Products.Select(row => row.ColorCode).Contains(row.ColorCode)).Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8d5d743cb26aed631fc2a3479af58985c02719be86814125fb16102d385cc560",
    "sql": "SELECT T1.property_id , count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id",
    "linq": "context.Properties.Join(context.Residents, T1 => T1.PropertyId, T2 => T2.PropertyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PropertyId }).Select(group => new { group.Key.PropertyId, Count = group.Count() }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3899a919416ade3b13025bd6b6d6a7c889f17aa25782cf052e313c3815a35b00",
    "sql": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id = T2.organization_id WHERE T2.organization_details = 'Denesik and Sons Party'",
    "linq": "context.Services.Join(context.Organizations, T1 => T1.OrganizationId, T2 => T2.OrganizationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrganizationDetails == \"Denesik and Sons Party\").Select(row => new { row.T1.ServiceTypeCode }).Distinct().ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "877216cc6429c7efa1c15ece9b8e5afa4c8f5906511abf9ec339fbbadb7fe856",
    "sql": "SELECT T1.resident_id , T1.other_details , count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id = T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC",
    "linq": "context.Residents.Join(context.ResidentsServices, T1 => T1.ResidentId, T2 => T2.ResidentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ResidentId }).Select(group => new { group.Key.ResidentId, group.First().T1.OtherDetails, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "afbfca56ae155a9f2ee6c15e9f0687d025f7c7e05205b2e1317d7e5f7613bfbf",
    "sql": "SELECT T1.service_id , T1.service_details , count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id = T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Services.Join(context.ResidentsServices, T1 => T1.ServiceId, T2 => T2.ServiceId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ServiceId }).Select(group => new { group.Key.ServiceId, group.First().T1.ServiceDetails, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a64afb0f18d613e17e50fcbc2dab8db90ba0f72651539372fc36a50e6d8663f7",
    "sql": "SELECT T1.thing_id , T1.type_of_Thing_Code , T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id",
    "linq": "context.Things.Join(context.Organizations, T1 => T1.OrganizationId, T2 => T2.OrganizationId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.ThingId, row.T1.TypeOfThingCode, row.T2.OrganizationDetails }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ce4363147f89e09e7ba0bcb871f6a659968f2477820fe5e1ba0ff29c41108643",
    "sql": "SELECT T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 3",
    "linq": "context.Customers.Join(context.CustomerEvents, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 3).Select(group => new { group.Key.CustomerId, group.First().T1.CustomerDetails }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "280c029bf1e8b803311584d6908eb9eadc846f11813edc920424dfaafde83e18",
    "sql": "SELECT T2.date_moved_in , T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id",
    "linq": "context.Customers.Join(context.CustomerEvents, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.DateMovedIn, row.T1.CustomerId, row.T1.CustomerDetails }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8a0e6eecfc1e8f5bab5d1a92e7b8cfcfb05b58154dc357a53c55b0c080c313a9",
    "sql": "SELECT T1.Customer_Event_ID , T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID = T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3",
    "linq": "context.CustomerEvents.Join(context.CustomerEventNotes, T1 => T1.CustomerEventId, T2 => T2.CustomerEventId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerEventId }).Where(group => group.Count() >= 1 && group.Count() <= 3).Select(group => new { group.Key.CustomerEventId, group.First().T1.PropertyId }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a407afdb58befdf2b293853d2d8860b9554a21c7299dadbe424adb8c3cbf522d",
    "sql": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.service_details = 'Unsatisfied'",
    "linq": "context.Things.Join(context.TimedLocationsOfThings, T1 => T1.ThingId, T2 => T2.ThingId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ServiceDetails == \"Unsatisfied\").Select(row => row.T2.LocationCode).Distinct().Count();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7dd0c4d8d5f137a91c08a5d8a1f809df5495bb6f6bab1793cb113c5b8fbb19bd",
    "sql": "SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things",
    "linq": "context.TimedStatusOfThings.Select(row => row.StatusOfThingCode).Distinct().Count();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5fc86c9575c9765f7a0bf8ce21bc1143a06325fe54ce8ba1ac9fff796bd772da",
    "sql": "SELECT max(date_moved_in) FROM Residents",
    "linq": "context.Residents.Select(row => row.DateMovedIn).Max();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eb995e418a41e9e724b1833411536d8a09c1696dbd27f69a732e227ddd48a5b6",
    "sql": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'",
    "linq": "context.Residents.Where(row => EF.Functions.Like(row.OtherDetails, \"%Miss%\")).Select(row => new { row.OtherDetails }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c50af804c460381fa2e55869b72991d891da1aa5b64a75ca6863554acc096dd3",
    "sql": "SELECT customer_event_id , date_moved_in , property_id FROM customer_events",
    "linq": "context.CustomerEvents.Select(row => new { row.CustomerEventId, row.DateMovedIn, row.PropertyId }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "55e0ddfdd883111ed02c60979f653aac5c2db52ce540cf9a26a3c28a3a20b8fb",
    "sql": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )",
    "linq": "context.Customers.Where(row => !context.CustomerEvents.Select(row => row.CustomerId).Contains(row.CustomerId)).Count();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "42f5ba9b1f520d984f093065ff36e8729fc6fbc82acfd8ee3193e22f7382ce72",
    "sql": "SELECT DISTINCT date_moved_in FROM residents",
    "linq": "context.Residents.Select(row => new { row.DateMovedIn }).Distinct().ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d63ce7095f87cd5739cff3a0f25247f504f468fe017cd4065d089e288e961f49",
    "sql": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800",
    "linq": "context.Cinemas.Select(row => row.Location).Except(context.Cinemas.Where(row => row.Capacity > 800).Select(row => row.Location)).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aee24e74ac594e1663c4c156f94b89935eaebe72f7f7ad638a023367f1f52ea3",
    "sql": "SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011",
    "linq": "context.Cinemas.Where(row => row.OpenningYear == 2010).Select(row => row.Location).Intersect(context.Cinemas.Where(row => row.OpenningYear == 2011).Select(row => row.Location)).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2c831bb3cf14c05ee925fc8f165947090ce4f2f18cd2ce8adcf0d26cefd2afa0",
    "sql": "SELECT count(*) FROM cinema",
    "linq": "context.Cinemas.Count();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1f4ee07fe09c0a21676da5cff166980de7d8f73d372d13b016766bf8a5e6c9d4",
    "sql": "SELECT name , openning_year , capacity FROM cinema",
    "linq": "context.Cinemas.Select(row => new { row.Name, row.OpenningYear, row.Capacity }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d85d793b621db448c9421302b06fbeddd7a688b376986fbcd851a8784d936ff7",
    "sql": "SELECT name , LOCATION FROM cinema WHERE capacity > (SELECT avg(capacity) FROM cinema)",
    "linq": "context.Cinemas.Where(row => row.Capacity > context.Cinemas.Select(row => row.Capacity).Average()).Select(row => new { row.Name, row.Location }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "992bf876531d8c31b69eeb126ccf3f1b3d9fc83f92ec670050e1d1b0889e0468",
    "sql": "SELECT DISTINCT LOCATION FROM cinema",
    "linq": "context.Cinemas.Select(row => new { row.Location }).Distinct().ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4de2a8e628559c8ed237c3db06b67088052e1a04b1b3af73558cfbc8b8b46ac9",
    "sql": "SELECT name , openning_year FROM cinema ORDER BY openning_year DESC",
    "linq": "context.Cinemas.OrderByDescending(row => row.OpenningYear).Select(row => new { row.Name, row.OpenningYear }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1963a843272e71426bf28b32bcb7401dddc73d3be956867da25392dcd7782d61",
    "sql": "SELECT name , LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
    "linq": "context.Cinemas.OrderByDescending(row => row.Capacity).Select(row => new { row.Name, row.Location }).Take(1).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d2bdd43ae17f3984bad886022ce274f469acf1e51cb367d8ee292dfe91bf6eab",
    "sql": "SELECT avg(capacity) , min(capacity) , max(capacity) FROM cinema WHERE openning_year >= 2011",
    "linq": "context.Cinemas.Where(row => row.OpenningYear >= 2011).GroupBy(row => 1).Select(group => new { AverageCapacity = group.Select(row => row.Capacity).Average(), MinCapacity = group.Select(row => row.Capacity).Min(), MaxCapacity = group.Select(row => row.Capacity).Max() }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "85b939910fab624a4005666a8daaa01594cdc786f13fde5f346cc8f69cef5bf1",
    "sql": "SELECT LOCATION , count(*) FROM cinema GROUP BY LOCATION",
    "linq": "context.Cinemas.GroupBy(row => new { row.Location }).Select(group => new { group.Key.Location, Count = group.Count() }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9b9140d5d6e2fb0e97c43faa516f5b4f27b1124a11b03b2bc9b5945ff63b64c5",
    "sql": "SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Cinemas.Where(row => row.OpenningYear >= 2010).GroupBy(row => new { row.Location }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Location }).Take(1).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a412f2591c5898b717695efe0a1a909d13bd5943739886f3d44189124c34cf47",
    "sql": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) >= 2",
    "linq": "context.Cinemas.Where(row => row.Capacity > 300).GroupBy(row => new { row.Location }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Location }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cc4cff107521971a47228072bd274c13d6b975ee3da8e4355ddc3c3a6c408a09",
    "sql": "SELECT title , directed_by FROM film",
    "linq": "context.Films.Select(row => new { row.Title, row.DirectedBy }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0be0c8deadcacc9a15cc9c9c41088942102e598ea335050798294ee800308091",
    "sql": "SELECT DISTINCT directed_by FROM film",
    "linq": "context.Films.Select(row => new { row.DirectedBy }).Distinct().ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3b166a0f70d9d3499b4ed4fba72e253d50540c8d4f78bfeabdb6ea0279783023",
    "sql": "SELECT directed_by , count(*) FROM film GROUP BY directed_by",
    "linq": "context.Films.GroupBy(row => new { row.DirectedBy }).Select(group => new { group.Key.DirectedBy, Count = group.Count() }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1b92981f09745f2de0996dc40937441dc9ad86e5dd8bc138c6751a27e935088e",
    "sql": "SELECT T2.name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id",
    "linq": "context.Schedules.Join(context.Cinemas, T1 => T1.CinemaId, T2 => T2.CinemaId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CinemaId }).Select(group => new { group.First().T2.Name, SumShowTimesPerDay = group.Select(row => row.T1.ShowTimesPerDay).Sum() }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aa9967ae55995d8fcfbcf27b8bf94e9fe40d4f9a517d03bd5645f19e8d998a5f",
    "sql": "SELECT T2.title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id",
    "linq": "context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FilmId }).Select(group => new { group.OrderByDescending(row => row.T1.Price).First().T2.Title, MaxPrice = group.Select(row => row.T1.Price).Max() }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "081c62f6464feacc36e206ada6bdff360900ccc372576b0ea00f6712940f421c",
    "sql": "SELECT T3.name , T2.title , T1.date , T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id",
    "linq": "context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).Join(context.Cinemas, joined => joined.T1.CinemaId, T3 => T3.CinemaId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Name, row.T2.Title, row.T1.Date, row.T1.Price }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b5cea6ca923ff8ca6a8b623654cfceffe77249f3dc769944f29d387a49704c3b",
    "sql": "SELECT title , directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
    "linq": "context.Films.Where(row => !context.Schedules.Select(row => row.FilmId).Contains(row.FilmId)).Select(row => new { row.Title, row.DirectedBy }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "76c0dfe38a54ed1284b01268d01361618f2b9bf869e2edb7040df47bc226141a",
    "sql": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
    "linq": "context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DirectedBy }).OrderByDescending(group => group.Sum(row => row.T1.ShowTimesPerDay)).Select(group => new { group.Key.DirectedBy }).Take(1).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bb95be3351f387d6d32798ef73399d1f1f24adb9a431a2e62c88db14083ff50a",
    "sql": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) > 1",
    "linq": "context.Cinemas.Where(row => row.Capacity > 300).GroupBy(row => new { row.Location }).Where(group => group.Count() > 1).Select(group => new { group.Key.Location }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eefbe347af199a716908f1e8a7ca8133b49b0b066a3d3b54e6f224e5ca8f4f9f",
    "sql": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
    "linq": "context.Films.Where(row => EF.Functions.Like(row.Title, \"%Dummy%\")).Count();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "100deff65e033c95959784e6238c2cd4aa786d756da29efa81f23e4c2e813d51",
    "sql": "SELECT Name FROM WINE ORDER BY Score LIMIT 1",
    "linq": "context.Wines.OrderBy(row => row.Score).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dcee19bd9d4f877e138c1a6f1cb7519b456a57e76fdbc8755d513beccb8ad65b",
    "sql": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1",
    "linq": "context.Wines.OrderBy(row => row.Score).Select(row => new { row.Winery }).Take(1).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3ecfe15733806ef5d8ec58a389eb24bbc0924a5c3ad31528266a6927cb51eca4",
    "sql": "SELECT Grape , Appelation FROM WINE",
    "linq": "context.Wines.Select(row => new { row.Grape, row.Appelation }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9b1cf72b54a91dbb758b99920c4317903ef3993c228e27831965ef380f1d84d0",
    "sql": "SELECT Name , Score FROM WINE",
    "linq": "context.Wines.Select(row => new { row.Name, row.Score }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6de66def5b01b0381dc3c0b1bde2d4b16a03f9bc0a7f7223ec41c984e2a17c43",
    "sql": "SELECT Area , County FROM APPELLATIONS",
    "linq": "context.Appellations.Select(row => new { row.Area, row.County }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2d5572a5ba539fa4749455d38bf965b524bc42596b2dd190b558f9af22a9855a",
    "sql": "SELECT Price FROM WINE WHERE YEAR < 2010",
    "linq": "context.Wines.Where(row => row.Year < 2010).Select(row => new { row.Price }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "356989a7561e999726b6a8ddfc4f45399488a28650c92f86d0baddbb1878cff4",
    "sql": "SELECT Name FROM WINE WHERE score > 90",
    "linq": "context.Wines.Where(row => row.Score > 90).Select(row => new { row.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d5821156f14e7ed8f9a41cf5e91ad0cc0e8fa419f81c472e44b4952bc7ae3265",
    "sql": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"Red\"",
    "linq": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Color == \"Red\").Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f5a50ee4cffffe713f8bdf40296367041e55b62e31d15701204b99b5f11a373f",
    "sql": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = \"North Coast\"",
    "linq": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Area == \"North Coast\").Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ad467deb6047b8b3538bfe8c659d4e840d03ff0bb08d41fead6d0d2a65810cf6",
    "sql": "SELECT count(*) FROM WINE WHERE Winery = \"Robert Biale\"",
    "linq": "context.Wines.Where(row => row.Winery == \"Robert Biale\").Count();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2182aee16646946df38dae521bde6c099659a1aa91cf826ae5c6f514f4824822",
    "sql": "SELECT count(*) FROM APPELLATIONS WHERE County = \"Napa\"",
    "linq": "context.Appellations.Where(row => row.County == \"Napa\").Count();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b1b8590d716e0bad94221ae47575300d74b0538366e0b524177309c7b209aaab",
    "sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Sonoma\"",
    "linq": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T1.County == \"Sonoma\").Select(row => row.T2.Price).Average();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "07aa0c89399f1094509980445af56dc8144e4a3173f9be3cd27c6c2a7477da84",
    "sql": "SELECT T2.Name , T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"White\"",
    "linq": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Color == \"White\").Select(row => new { row.T2.Name, row.T2.Score }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f8c780f379a02e57174651fa6cb20100e4aa97f611c1e1d173e7564e779182b",
    "sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = \"Central Coast\" AND T2.year < 2005",
    "linq": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Area == \"Central Coast\" && row.T2.Year < 2005).Select(row => row.T2.Price).Max();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "545c47f9190b0935bcff9e36fbd49fa8a583d9debf11218dbfcdacc345528013",
    "sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"White\" AND T2.score > 90",
    "linq": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Color == \"White\" && row.T2.Score > 90).Select(row => new { row.T1.Grape1 }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8aa8824e86bc6d30def00a2053ab3c33f5bf4629dbcb5aab5c0a4700c554651c",
    "sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"Red\" AND T2.price > 50",
    "linq": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Color == \"Red\" && row.T2.Price > 50).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "192e68d79ee821fac9da992dcd7d1b69518f80ffb119c817d06512cf869833ef",
    "sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50",
    "linq": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T1.County == \"Monterey\" && row.T2.Price < 50).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b2d938487136053752d8166b739e79ed97750224c97d8144012d573eb8b29751",
    "sql": "SELECT count(*) , Grape FROM WINE GROUP BY Grape",
    "linq": "context.Wines.GroupBy(row => new { row.Grape }).Select(group => new { Count = group.Count(), group.Key.Grape }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d7685e1c2c9059428d2c63ee9bb1e20feabf142d2a6b143c3cc03cef520201e6",
    "sql": "SELECT avg(Price) , YEAR FROM WINE GROUP BY YEAR",
    "linq": "context.Wines.GroupBy(row => new { row.Year }).Select(group => new { AveragePrice = group.Select(row => row.Price).Average(), group.Key.Year }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "34952c69c3d61e8b6c1d6a48f210b54b6a3400798d65796fc24929275d3af3de",
    "sql": "SELECT DISTINCT Name FROM WINE WHERE Price > (SELECT min(Price) FROM wine WHERE Winery = \"John Anthony\")",
    "linq": "context.Wines.Where(row => row.Price > context.Wines.Where(row => row.Winery == \"John Anthony\").Select(row => row.Price).Min()).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "178db830aef40a52478bd43f1efe15f0a91a6a0aabfee3bcaac245c330a1e4af",
    "sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name",
    "linq": "context.Wines.OrderBy(row => row.Name).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "21bdadf9647c5cb4f58434bc5f71a79073c1048f9e759ba07b716156b67e7434",
    "sql": "SELECT DISTINCT Name FROM WINE ORDER BY price",
    "linq": "context.Wines.OrderBy(row => row.Price).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b335b5530905d514bc96ef23eaf77182797c0a4d6942961c61d9b007efc7ce06",
    "sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1",
    "linq": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Grape }).OrderByDescending(group => group.Average(row => row.T2.Price)).Select(group => new { group.First().T1.Color }).Take(1).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "317df66d759a6d951552d001dd123c086d15ff3d8ef2781c4df31fea94c9d892",
    "sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR < 2000 OR YEAR > 2010",
    "linq": "context.Wines.Where(row => row.Year < 2000 || row.Year > 2010).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "33627d9867b140d355589ccbefe0026ec22641e8bacde109ee585dc00edc64c6",
    "sql": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100",
    "linq": "context.Wines.Where(row => row.Price >= 50 && row.Price <= 100).Select(row => new { row.Winery }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4d72b2b23e4fb02a36ed3bf110c798b93a0f5c75b13e8ae91bf00215e42259e9",
    "sql": "SELECT max(Price) , max(Score) FROM WINE WHERE Appelation = \"St. Helena\"",
    "linq": "context.Wines.Where(row => row.Appelation == \"St. Helena\").GroupBy(row => 1).Select(group => new { MaxPrice = group.Select(row => row.Price).Max(), MaxScore = group.Select(row => row.Score).Max() }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f838f49db0ffcac3f936b3304aa635ea3ef45480f0aa0b4356a95f3dbbfd6742",
    "sql": "SELECT max(Price) , max(Score) , YEAR FROM WINE GROUP BY YEAR",
    "linq": "context.Wines.GroupBy(row => new { row.Year }).Select(group => new { MaxPrice = group.Select(row => row.Price).Max(), MaxScore = group.Select(row => row.Score).Max(), group.Key.Year }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c98ea51b50684d331b8d5af4360b6655d6906b0a86af6b2e32d48e583c06f479",
    "sql": "SELECT avg(Price) , avg(Score) , Appelation FROM WINE GROUP BY Appelation",
    "linq": "context.Wines.GroupBy(row => new { row.Appelation }).Select(group => new { AveragePrice = group.Select(row => row.Price).Average(), AverageScore = group.Select(row => row.Score).Average(), group.Key.Appelation }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "095a89f308e154b19925eaaf4d2114a3e2e6b5c24fb82224741cef3c034e04fe",
    "sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*) >= 4",
    "linq": "context.Wines.GroupBy(row => new { row.Winery }).Where(group => group.Count() >= 4).Select(group => new { group.Key.Winery }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "01a11abd4642de72f85fe8c1965f05dbcf99a67b51b3d3f1878abd137dbe07a1",
    "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING count(*) <= 3",
    "linq": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Appelation }).Where(group => group.Count() <= 3).Select(group => new { group.First().T1.County }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "47c3dc33c9da655e166b7b4408354bfe1048a0aa6453abb1d96940a133154b67",
    "sql": "SELECT Name FROM WINE WHERE YEAR < (SELECT min(YEAR) FROM WINE WHERE Winery = \"Brander\")",
    "linq": "context.Wines.Where(row => row.Year < context.Wines.Where(row => row.Winery == \"Brander\").Select(row => row.Year).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a2524821fb7ca97f630947395b59ef9dc0310bfcf92ced45ff84ae5c625599f7",
    "sql": "SELECT Name FROM WINE WHERE Price > (SELECT max(Price) FROM WINE WHERE YEAR = 2006)",
    "linq": "context.Wines.Where(row => row.Price > context.Wines.Where(row => row.Year == 2006).Select(row => row.Price).Max()).Select(row => new { row.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0a1056ae4a59710bb9917fcaef9c464a6e390b7e087b4de9d3b0db341bd915b3",
    "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE WHERE T1.Color = \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
    "linq": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Color == \"White\").GroupBy(row => new { row.T2.Winery }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Winery }).Take(3).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "180f4d3c740210b9e59665f7dc3046c7a148491d42a0f2941b651df3fe5333ac",
    "sql": "SELECT Grape , Winery , YEAR FROM WINE WHERE Price > 100 ORDER BY YEAR",
    "linq": "context.Wines.Where(row => row.Price > 100).OrderBy(row => row.Year).Select(row => new { row.Grape, row.Winery, row.Year }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "63b1ef2577098fcb4dbce6ace3e03df5d8d3cc8e198c7d5316f8acad6ffd8361",
    "sql": "SELECT Grape , Appelation , Name FROM WINE WHERE Score > 93 ORDER BY Name",
    "linq": "context.Wines.Where(row => row.Score > 93).OrderBy(row => row.Name).Select(row => new { row.Grape, row.Appelation, row.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dc4be707bf23794f99ce1d378a04f460096680262880946de53e8e22145cdd5e",
    "sql": "SELECT Appelation FROM WINE WHERE YEAR > 2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area = \"Central Coast\"",
    "linq": "context.Wines.Where(row => row.Year > 2008).Select(row => row.Appelation).Except(context.Appellations.Where(row => row.Area == \"Central Coast\").Select(row => row.Appelation)).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "30f7939461e24f67e5f8cd9a1415d6ce0e588e75d5fbf986cf3e900829cc5310",
    "sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma')",
    "linq": "context.Wines.Where(row => !context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T1.County == \"Sonoma\").Select(row => row.T1.Appelation).Contains(row.Appelation)).Select(row => row.Price).Average();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e6609024123fa98731f4600b4b98406ed748eb9afffff7512b109c2808a652da",
    "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Score > 90).GroupBy(row => new { row.T1.County }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.County }).Take(1).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "61fd1454975cc6bba88cbe39df91959d7c238bbfca0e01571c5ab603542e3640",
    "sql": "SELECT count(*) FROM company",
    "linq": "context.Companies.Count();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0f956cfb1c4b4094e1c0ba72da15919b7cdd9f1f942ae44531bd7ffc42ea0c37",
    "sql": "SELECT company , rank FROM company ORDER BY Sales_billion DESC",
    "linq": "context.Companies.OrderByDescending(row => row.SalesBillion).Select(row => new { row.Company1, row.Rank }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dae95e1f00e63ef5c5eb302fedc9491962dfd5954a62ae1d384222eb4c5e9d8d",
    "sql": "SELECT company , main_industry FROM company WHERE headquarters != 'USA'",
    "linq": "context.Companies.Where(row => row.Headquarters != \"USA\").Select(row => new { row.Company1, row.MainIndustry }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ec5f77126ba3e6f481fef6d81ccb1ef754fac8a52b1194a47e0e4d2e3620eff6",
    "sql": "SELECT company , headquarters FROM company ORDER BY market_value DESC",
    "linq": "context.Companies.OrderByDescending(row => row.MarketValue).Select(row => new { row.Company1, row.Headquarters }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "60553d4540b9842f8f146017ec39074f0c647e6a6bf5f782210055e5e2163802",
    "sql": "SELECT min(market_value) , max(market_value) , avg(market_value) FROM company",
    "linq": "context.Companies.GroupBy(row => 1).Select(group => new { MinMarketValue = group.Select(row => row.MarketValue).Min(), MaxMarketValue = group.Select(row => row.MarketValue).Max(), AverageMarketValue = group.Select(row => row.MarketValue).Average() }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0f13b22eee13948a96926b874a5ed481bbce20ca1fd03b4edbbb5d83d6887189",
    "sql": "SELECT DISTINCT main_industry FROM company",
    "linq": "context.Companies.Select(row => new { row.MainIndustry }).Distinct().ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a5a72f5701d68dab310d0d73b7f6586ca9bfd92f633cd3d180c49a37caa2f379",
    "sql": "SELECT headquarters , count(*) FROM company GROUP BY headquarters",
    "linq": "context.Companies.GroupBy(row => new { row.Headquarters }).Select(group => new { group.Key.Headquarters, Count = group.Count() }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c289ac17077a5e99a5bd4735b84a55317d5091cb01cce3a564fc5aef22090c98",
    "sql": "SELECT main_industry , sum(market_value) FROM company GROUP BY main_industry",
    "linq": "context.Companies.GroupBy(row => new { row.MainIndustry }).Select(group => new { group.Key.MainIndustry, SumMarketValue = group.Select(row => row.MarketValue).Sum() }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d9168e4523f73fb3f260e252502dd70de7c2feb1cc441c856b19655aeefabfb0",
    "sql": "SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING count(*) >= 2",
    "linq": "context.Companies.Where(row => row.MainIndustry == \"Banking\").GroupBy(row => new { row.Headquarters }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Headquarters }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9e92f62a71a857363afe00327bdbefd3856265e86a0f830026146248a0c94aec",
    "sql": "SELECT station_id , LOCATION , manager_name FROM gas_station ORDER BY open_year",
    "linq": "context.GasStations.OrderBy(row => row.OpenYear).Select(row => new { row.StationId, row.Location, row.ManagerName }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d804bc7c53e5b7a9891181e7a9e916726ada3e9bbe5f430142c96632cf552d22",
    "sql": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005",
    "linq": "context.GasStations.Where(row => row.OpenYear >= 2000 && row.OpenYear <= 2005).Count();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "01cbc5951b3772e26289d7f1132e2d165d456bc15a029ee9b0d2fa8f3f69716d",
    "sql": "SELECT LOCATION , count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
    "linq": "context.GasStations.GroupBy(row => new { row.Location }).Select(group => new { group.Key.Location, Count = group.Count() }).OrderBy(group => group.Count).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "700a31ba6031b83b38abcc1a0caf5e698ca185e98011e71555689f34c39bd94f",
    "sql": "SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'",
    "linq": "context.Companies.Where(row => row.MainIndustry == \"Banking\").Select(row => row.Headquarters).Intersect(context.Companies.Where(row => row.MainIndustry == \"Oil and gas\").Select(row => row.Headquarters)).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "94cf59ffc7ef126557a2099bb398763448495125986f2aa5a2defe6d68e791ea",
    "sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry = 'Banking'",
    "linq": "context.Companies.Select(row => row.Headquarters).Except(context.Companies.Where(row => row.MainIndustry == \"Banking\").Select(row => row.Headquarters)).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d6f183d071b00548c52c116d29625cc2ead823f2eeb8b99446e0c4bb04faa844",
    "sql": "SELECT T2.company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id",
    "linq": "context.StationCompanies.Join(context.Companies, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CompanyId }).Select(group => new { group.First().T2.Company1, Count = group.Count() }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4bf4e8b78831c2847172ea1d900f61cc9f97553c56541dd1ae92c2f41386ca1b",
    "sql": "SELECT company , main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
    "linq": "context.Companies.Where(row => !context.StationCompanies.Select(row => row.CompanyId).Contains(row.CompanyId)).Select(row => new { row.Company1, row.MainIndustry }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2c75fe820bac14633cadd11508b32bda74eafc820d52ecf710c644e2ca64484a",
    "sql": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.company = 'ExxonMobil'",
    "linq": "context.StationCompanies.Join(context.Companies, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).Join(context.GasStations, joined => joined.T1.StationId, T3 => T3.StationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Company1 == \"ExxonMobil\").Select(row => new { row.T3.ManagerName }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "580ae4a59afda8329418962455783de960a27ec248502236af8abaa1b516e32a",
    "sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.market_value > 100",
    "linq": "context.StationCompanies.Join(context.Companies, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).Join(context.GasStations, joined => joined.T1.StationId, T3 => T3.StationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.MarketValue > 100).Select(row => new { row.T3.Location }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "412f123b7fb98db08505958dc7baca46db41cfb2888948485de1f33016ca153f",
    "sql": "SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.GasStations.Where(row => row.OpenYear > 2000).GroupBy(row => new { row.ManagerName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ManagerName }).Take(1).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "389ff99f4e5c2343676f3df55124fc4242a6eff160c2cc64335756988f068c23",
    "sql": "SELECT LOCATION FROM gas_station ORDER BY open_year",
    "linq": "context.GasStations.OrderBy(row => row.OpenYear).Select(row => new { row.Location }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "420a58e86b5b2c058c8f88dddc043461780a51c675ebf7052635cf99a35719af",
    "sql": "SELECT rank , company , market_value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion",
    "linq": "context.Companies.Where(row => row.MainIndustry == \"Banking\").OrderBy(row => row.SalesBillion).ThenBy(row => row.ProfitsBillion).Select(row => new { row.Rank, row.Company1, row.MarketValue }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d9c9669867da427ef0c18e48dacbfc357feb865b238d2efc03e5fdda2e54c78f",
    "sql": "SELECT T3.location , T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
    "linq": "context.StationCompanies.Join(context.Companies, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).Join(context.GasStations, joined => joined.T1.StationId, T3 => T3.StationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T2.AssetsBillion).Select(row => new { row.T3.Location, row.T3.RepresentativeName }).Take(3).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6f18b2f1c57d26b15fe38f445dcd7002875f9cad7c937e14ef728fbcaa832bc9",
    "sql": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Dan'",
    "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Dan\").Select(row => row.T2.Friend).Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "75052915ddec10fb7382f761ab5705a84406be9f464770ea6d65095632d8e292",
    "sql": "SELECT count(*) FROM Person WHERE gender = 'female'",
    "linq": "context.People.Where(row => row.Gender == \"female\").Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "147bb2d3c7618918976d5a1b816dfa7e97caf287e379bbe492b20aaf444fc567",
    "sql": "SELECT avg(age) FROM Person",
    "linq": "context.People.Select(row => row.Age).Average();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a0a5be0c5119cc33f10d0ad0751f97db41cd4b4b94ae3abd3af3b6091da097b9",
    "sql": "SELECT count(DISTINCT city) FROM Person",
    "linq": "context.People.Select(row => row.City).Distinct().Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "be561dcaba653b092f5602b5642c8b0f40259b0cae2274c4ca1892d9dab57742",
    "sql": "SELECT count(DISTINCT job) FROM Person",
    "linq": "context.People.Select(row => row.Job).Distinct().Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7cc64cc5a49f83e3669636f8f91e02dcfdd90bcb544b7a3988e6637866190651",
    "sql": "SELECT name FROM Person WHERE age = (SELECT max(age) FROM person)",
    "linq": "context.People.Where(row => row.Age == context.People.Select(row => row.Age).Max()).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9559bfd29454f024a9d4604151b53911eb8962e214c02a57b52cfb924fa12796",
    "sql": "SELECT name FROM Person WHERE job = 'student' AND age = (SELECT max(age) FROM person WHERE job = 'student' )",
    "linq": "context.People.Where(row => row.Job == \"student\" && row.Age == context.People.Where(row => row.Job == \"student\").Select(row => row.Age).Max()).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "069bec98b37a6cdac54e79505c9141de689c55aa42ff419f80c1c0065a661d01",
    "sql": "SELECT name FROM Person WHERE gender = 'male' AND age = (SELECT min(age) FROM person WHERE gender = 'male' )",
    "linq": "context.People.Where(row => row.Gender == \"male\" && row.Age == context.People.Where(row => row.Gender == \"male\").Select(row => row.Age).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "30eac4be812a9ca892be187e65b2455975512d3ee3a6c05a1fba7aaf5fbf3fe8",
    "sql": "SELECT age FROM Person WHERE job = 'doctor' AND name = 'Zach'",
    "linq": "context.People.Where(row => row.Job == \"doctor\" && row.Name == \"Zach\").Select(row => new { row.Age }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9991cd1270d45616ecc340e09c577ebb28581ca2e3271396a8d753a461efd004",
    "sql": "SELECT name FROM Person WHERE age < 30",
    "linq": "context.People.Where(row => row.Age < 30).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eef0cd8933119b43a9a5120338b36238101332e2ccbffb8b729774a0c2bced87",
    "sql": "SELECT count(*) FROM Person WHERE age > 30 AND job = 'engineer'",
    "linq": "context.People.Where(row => row.Age > 30 && row.Job == \"engineer\").Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c541920e486302944c0cd1d63537d90a759941bbf062429431c00fa53d7a713",
    "sql": "SELECT avg(age) , gender FROM Person GROUP BY gender",
    "linq": "context.People.GroupBy(row => new { row.Gender }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), group.Key.Gender }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "25290a80aecbd17710585c34bc28a5174e7dc92ce1223184a251e6042100e866",
    "sql": "SELECT avg(age) , job FROM Person GROUP BY job",
    "linq": "context.People.GroupBy(row => new { row.Job }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), group.Key.Job }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6cb8b69edc6174f8248cd471492cd651dceb29209d6384db223a83e14d599466",
    "sql": "SELECT avg(age) , job FROM Person WHERE gender = 'male' GROUP BY job",
    "linq": "context.People.Where(row => row.Gender == \"male\").GroupBy(row => new { row.Job }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), group.Key.Job }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "332f222ab5739ee7056abd77413b64a6e81d12438092197ea798ec3a5e11fb32",
    "sql": "SELECT min(age) , job FROM Person GROUP BY job",
    "linq": "context.People.GroupBy(row => new { row.Job }).Select(group => new { MinAge = group.Select(row => row.Age).Min(), group.Key.Job }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4dd2f786dd927cbcdccc3c528c5335088ef67a30706c528e8719eb1cbff149e7",
    "sql": "SELECT count(*) , gender FROM Person WHERE age < 40 GROUP BY gender",
    "linq": "context.People.Where(row => row.Age < 40).GroupBy(row => new { row.Gender }).Select(group => new { Count = group.Count(), group.Key.Gender }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "af240da190521aad088386309be61c6fdcdd529f84199645a12c2cd56a92dbb2",
    "sql": "SELECT name FROM Person WHERE age > (SELECT min(age) FROM person WHERE job = 'engineer') ORDER BY age",
    "linq": "context.People.Where(row => row.Age > context.People.Where(row => row.Job == \"engineer\").Select(row => row.Age).Min()).OrderBy(row => row.Age).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1d2ffa7e48787ae457bacd894f7bb5ee20ba37a0708ff7f8c2168ba3ff2b606a",
    "sql": "SELECT count(*) FROM Person WHERE age > (SELECT max(age) FROM person WHERE job = 'engineer')",
    "linq": "context.People.Where(row => row.Age > context.People.Where(row => row.Job == \"engineer\").Select(row => row.Age).Max()).Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a9b1b1b8cb52f48f70ebe2df33e82a2b980711aa04ca8baf4692123f92918e71",
    "sql": "SELECT name , job FROM Person ORDER BY name",
    "linq": "context.People.OrderBy(row => row.Name).Select(row => new { row.Name, row.Job }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e3e47e8e348cae64b47fa4e6de18b270eb86fca65e604365b0195e0c21a93602",
    "sql": "SELECT name FROM Person ORDER BY age DESC",
    "linq": "context.People.OrderByDescending(row => row.Age).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "185ab554553c0c2bbaf414d32d425318125471aaf599641e5aba4ef7422a1614",
    "sql": "SELECT name FROM Person WHERE gender = 'male' ORDER BY age",
    "linq": "context.People.Where(row => row.Gender == \"male\").OrderBy(row => row.Age).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e33d51b603be1f0f7109dc2379de81a09f773cc4065a8498ccc165eaf73b2fe5",
    "sql": "SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' INTERSECT SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice'",
    "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Dan\").Where(row => row.T1.Age.HasValue).Select(row => new { row.T1.Name, Age = row.T1.Age.Value }).Intersect(context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Alice\").Where(row => row.T1.Age.HasValue).Select(row => new { row.T1.Name, Age = row.T1.Age.Value })).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a705292e54994c7ddabd9d3735601f69d9ef6af724fb6dff529e56d5500175d8",
    "sql": "SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' OR T2.friend = 'Alice'",
    "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Dan\" || row.T2.Friend == \"Alice\").Select(row => new { row.T1.Name, row.T1.Age }).Distinct().ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "184a26650384ff4dde4569095f9170cb915ae5e24a83e8c5a07bd5623720aa34",
    "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)",
    "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => context.People.Where(row => row.Age > 40).Select(row => row.Name).Contains(row.T2.Friend)).Select(row => row.T1.Name).Intersect(context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => context.People.Where(row => row.Age < 30).Select(row => row.Name).Contains(row.T2.Friend)).Select(row => row.T1.Name)).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9607e329e29d9cb6f032fdd57986b1e70b66ca012e9fa1e52bd46ebe9704d41f",
    "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)",
    "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => context.People.Where(row => row.Age > 40).Select(row => row.Name).Contains(row.T2.Friend)).Select(row => row.T1.Name).Except(context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => context.People.Where(row => row.Age < 30).Select(row => row.Name).Contains(row.T2.Friend)).Select(row => row.T1.Name)).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3b313f73f834ac52d25cecba75df60c43d4907acafa7dd74fb0647e89e00cba7",
    "sql": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.job = 'student'",
    "linq": "context.People.Select(row => row.Name).Except(context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Job == \"student\").Select(row => row.T2.Name)).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3266965a8ac72255491b82e4e251f1160df6e01618a518f7c14442cf42c77ff9",
    "sql": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*) = 1",
    "linq": "context.PersonFriends.GroupBy(row => new { row.Name }).Where(group => group.Count() == 1).Select(group => new { group.Key.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "08db934e6e9ac905b0837d466b95f5c65e32d21600b073192515fe7e2447c670",
    "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Bob'",
    "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Bob\").Select(row => new { row.T2.Friend }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b9bed3f3f4cd03b56cf39e3ae05de273bfadbfe40bd2c0348551fdedcfab1d2a",
    "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Bob'",
    "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Bob\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ec89ab1641f2d3147d0d42c7dc468181a811cc638ad5a9c0a3d281bb8abc86d8",
    "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Zach' AND T1.gender = 'female'",
    "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Zach\" && row.T1.Gender == \"female\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7fe6bbfca5400543271a979abb385a4b77c451f0b67f12ee589f0a35ea415631",
    "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'female'",
    "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Alice\" && row.T1.Gender == \"female\").Select(row => new { row.T2.Friend }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4c06c3bdd8b90397974156a5e99da420f02a0ae4a1d17985fa7acd8121b2fa89",
    "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'male' AND T1.job = 'doctor'",
    "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Alice\" && row.T1.Gender == \"male\" && row.T1.Job == \"doctor\").Select(row => new { row.T2.Friend }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6d2d564f941444b7bb9d18354da1b04b551fb018d1b293fa691d1579419d8037",
    "sql": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.city = 'new york city'",
    "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T1.City == \"new york city\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bea74c8bb555fd72532da0fe5d06fdfe159dd37002e9dca56be59ca60a613693",
    "sql": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age < (SELECT avg(age) FROM person)",
    "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age < context.People.Select(row => row.Age).Average()).Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "40e9bb4c244d19b4d2106193d80cdc0a750e2fd2e10966ce6a5d49836b72fe58",
    "sql": "SELECT DISTINCT T2.name , T2.friend , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person)",
    "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age > context.People.Select(row => row.Age).Average()).Select(row => new { row.T2.Name, row.T2.Friend, row.T1.Age }).Distinct().ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "425d092b21f6254dbc57035343ccc480080603f61be8f07254da6498037ec683",
    "sql": "SELECT friend FROM PersonFriend WHERE name = 'Zach' AND YEAR = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')",
    "linq": "context.PersonFriends.Where(row => row.Name == \"Zach\" && row.Year == context.PersonFriends.Where(row => row.Name == \"Zach\").Select(row => row.Year).Max()).Select(row => new { row.Friend }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d8e3ae29bb0210e70e0b59e40fc1ba6a9f3ccc12ceeb44ce43e30279316e6ff8",
    "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Zach' AND T2.year = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')",
    "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Zach\" && row.T2.Year == context.PersonFriends.Where(row => row.Name == \"Zach\").Select(row => row.Year).Max()).Select(row => new { row.T1.Age }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "728cf47ec53097f85c3731d4e9c471120e0943fb31e9d6922be0d63273ae1d53",
    "sql": "SELECT name FROM PersonFriend WHERE friend = 'Alice' AND YEAR = (SELECT min(YEAR) FROM PersonFriend WHERE friend = 'Alice')",
    "linq": "context.PersonFriends.Where(row => row.Friend == \"Alice\" && row.Year == context.PersonFriends.Where(row => row.Friend == \"Alice\").Select(row => row.Year).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "78208fc0b71f18ef7c87b8b8791384051cec947360de28a0e4fa1e01e6924602",
    "sql": "SELECT T1.name , T1.age , T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice' AND T2.year = (SELECT max(YEAR) FROM PersonFriend WHERE friend = 'Alice')",
    "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Alice\" && row.T2.Year == context.PersonFriends.Where(row => row.Friend == \"Alice\").Select(row => row.Year).Max()).Select(row => new { row.T1.Name, row.T1.Age, row.T1.Job }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2b2ca35754646b36d4cd8fc7767f130ff677c79d71ab2c0e7455fdafc6992bf9",
    "sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
    "linq": "context.People.Select(row => row.Name).Except(context.PersonFriends.Select(row => row.Name)).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f3b3f327e74cffe36921423f53a6f06e963f6b97ba73810744d3836a2a273465",
    "sql": "SELECT T2.name , avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1",
    "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { group.Key.Name, AverageAge = group.Select(row => row.T1.Age).Average() }).OrderByDescending(group => group.AverageAge).Take(1).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9f3d1649b7845671701e5d272bf8d579a5eb1e2435c0c2e4288655477ef015de",
    "sql": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city = 'Austin')",
    "linq": "context.PersonFriends.Where(row => !context.People.Where(row => row.City == \"Austin\").Select(row => row.Name).Contains(row.Friend)).Select(row => row.Name).Distinct().Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ac46816e9bb99411dc9d1c01d0120eac326162e1b642e5b4f0cc1829881cc1bd",
    "sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name = T2.name JOIN PersonFriend AS T3 ON T1.friend = T3.name JOIN PersonFriend AS T4 ON T3.friend = T4.name WHERE T2.name = 'Alice' AND T4.name != 'Alice'",
    "linq": "context.PersonFriends.Join(context.People, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Join(context.PersonFriends, joined => joined.T1.Friend, T3 => T3.Name, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.PersonFriends, joined => joined.T3.Friend, T4 => T4.Name, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T2.Name == \"Alice\" && row.T4.Name != \"Alice\").Select(row => new { row.T4.Name }).Distinct().ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4380ccfb5dbb6c949e11cddde2188aad7da3bc30e682b572f9f14005400dfdd1",
    "sql": "SELECT count(*) FROM country",
    "linq": "context.Countries.Count();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "229804aa16fe0591eed31030c789e91dc043c70ec5816f39efc3beb2e3c972e9",
    "sql": "SELECT Country_name , Capital FROM country",
    "linq": "context.Countries.Select(row => new { row.CountryName, row.Capital }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0e5561648171a9c0a73b817fe88654d725d87df69e3c582ef770965deedd1088",
    "sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
    "linq": "context.Countries.Where(row => EF.Functions.Like(row.OfficialNativeLanguage, \"%English%\")).Select(row => new { row.OfficialNativeLanguage }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b418614e100c18b326d648b951d068aa565b780751bf9e4f439c3c2cf86042d0",
    "sql": "SELECT DISTINCT POSITION FROM match_season",
    "linq": "context.MatchSeasons.Select(row => new { row.Position }).Distinct().ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "64d155d13079aa47719b4156222b719d185dcae34de987e1dec3890fc46c72b1",
    "sql": "SELECT Player FROM match_season WHERE College = \"UCLA\"",
    "linq": "context.MatchSeasons.Where(row => row.College == \"UCLA\").Select(row => new { row.Player }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "27d097e2d01103e3b9bc30d701eeb2043b27d86d885f18e04ba159f8d39ece3c",
    "sql": "SELECT DISTINCT POSITION FROM match_season WHERE College = \"UCLA\" OR College = \"Duke\"",
    "linq": "context.MatchSeasons.Where(row => row.College == \"UCLA\" || row.College == \"Duke\").Select(row => new { row.Position }).Distinct().ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d219cc4c8fd4e85fd86742ad826746eca070edab2a7bf59c3076c78528f5c82d",
    "sql": "SELECT Draft_Pick_Number , Draft_Class FROM match_season WHERE POSITION = \"Defender\"",
    "linq": "context.MatchSeasons.Where(row => row.Position == \"Defender\").Select(row => new { row.DraftPickNumber, row.DraftClass }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d139c305f6efa3e17f96b9d32c775d188401086ba22a03a003c02a2e88c7f137",
    "sql": "SELECT count(DISTINCT Team) FROM match_season",
    "linq": "context.MatchSeasons.Select(row => row.Team).Distinct().Count();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1416895fb621a99aa6939de11b0b9755a01f1df22107784def047e0d29f78f48",
    "sql": "SELECT Player , Years_Played FROM player",
    "linq": "context.Players.Select(row => new { row.Player1, row.YearsPlayed }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "53d4b7b6b06c53e519dddfc99b84bfee5e6469cffe42a3f8fff29634b8917d2e",
    "sql": "SELECT Name FROM Team",
    "linq": "context.Teams.Select(row => new { row.Name }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "19d7d627b6abdcd8537ef51a68f756e5f53033a6cf0d1d9aae4ea498c7f42b20",
    "sql": "SELECT T2.Season , T2.Player , T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country",
    "linq": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Season, row.T2.Player, row.T1.CountryName }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9131256ab78ce9cf1cef2c67c9794c0ab930a048edd9d2f3476ae9457e120339",
    "sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Country_name = \"Indonesia\"",
    "linq": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CountryName == \"Indonesia\").Select(row => new { row.T2.Player }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "08109072987322d224f702a05f7b31c76653475a268964cb5c8e7d5bf77b5abf",
    "sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = \"Dublin\"",
    "linq": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Capital == \"Dublin\").Select(row => new { row.T2.Position }).Distinct().ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "247db7b6d9186a1b52478c5978e2abf87171378adaeeeecc2977addda6828c4f",
    "sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = \"Maryland\" OR T2.College = \"Duke\"",
    "linq": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T2.College == \"Maryland\" || row.T2.College == \"Duke\").Select(row => new { row.T1.OfficialNativeLanguage }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "239ecb13f2e0cd14d2de71c85d8df63abea72bcb5ea797e5439e75cea02b0050",
    "sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\"",
    "linq": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Position == \"Defender\").Select(row => row.T1.OfficialNativeLanguage).Distinct().Count();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c7d94395034be0b0f33f3fd0e293a9a2a5df590927a6f6200a395b848f1f30be",
    "sql": "SELECT T1.Season , T1.Player , T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id",
    "linq": "context.MatchSeasons.Join(context.Teams, T1 => T1.Team, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Season, row.T1.Player, row.T2.Name }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "28d34c9b5c08b73c23c37c82190b98a12e9ee6697334c852b6fe8888fba72ba8",
    "sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Ryley Goldner\"",
    "linq": "context.MatchSeasons.Join(context.Teams, T1 => T1.Team, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Ryley Goldner\").Select(row => new { row.T1.Position }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "60c22cd6b4c48df5d94f58297c6ac48e2ef69e9a1c36b776ee03a5acac1456ed",
    "sql": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\"",
    "linq": "context.MatchSeasons.Join(context.Teams, T1 => T1.Team, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Columbus Crew\").Select(row => row.T1.College).Distinct().Count();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "70b16ac0997ce0d09da383f1cc5ef45d7b79a2c396344a9b5fe5003ba3f4854c",
    "sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\"",
    "linq": "context.Players.Join(context.Teams, T1 => T1.Team, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Columbus Crew\").Select(row => new { row.T1.Player1, row.T1.YearsPlayed }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f8568c879524847d026d9c1fa8759fe7c4e625b47d64361a05df9b930a80422",
    "sql": "SELECT POSITION , COUNT(*) FROM match_season GROUP BY POSITION",
    "linq": "context.MatchSeasons.GroupBy(row => new { row.Position }).Select(group => new { group.Key.Position, Count = group.Count() }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "db4519db1191942c5d240a8706fa6ad65876f4730e08c5e73e80a8911c4dd242",
    "sql": "SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name",
    "linq": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CountryName }).Select(group => new { group.Key.CountryName, Count = group.Count() }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2183df5b2b21abb38f692e5100fb0afe34c70ec7fbde8180560765385c395e63",
    "sql": "SELECT player FROM match_season ORDER BY College ASC",
    "linq": "context.MatchSeasons.OrderBy(row => row.College).Select(row => new { row.Player }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "62ba2243f05dd10bba7447f9cee76e3b5e3e790ed8660a21d56a5ed496119c2b",
    "sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.MatchSeasons.GroupBy(row => new { row.Position }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Position }).Take(1).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "98fed1c2ccab7162cb035eb70b74bdffafeb2067ddb96e1d3249da3d959ea7a2",
    "sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
    "linq": "context.MatchSeasons.GroupBy(row => new { row.College }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.College }).Take(3).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "395b17bf31ab71c1e20beaf3b5428a3319b02f57925560f12a26a9fce5aec9d5",
    "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*) >= 2",
    "linq": "context.MatchSeasons.GroupBy(row => new { row.College }).Where(group => group.Count() >= 2).Select(group => new { group.Key.College }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9f323dffb86e293ee2d48457933c33ed6ec928ea46ceec7081d66106a5040870",
    "sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
    "linq": "context.Teams.Where(row => !context.MatchSeasons.Select(row => row.Team).Contains(row.TeamId)).Select(row => new { row.Name }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "253d38067cd62a45d0d2973c25cd1675e76f3583293c1f39ae9cc9aa492b456c",
    "sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\"",
    "linq": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Position == \"Forward\").Select(row => row.T1.CountryName).Intersect(context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Position == \"Defender\").Select(row => row.T1.CountryName)).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1091b266e7688573ed4fd6098a7715d84e35dbb25ea39fc99977c36d818dfcf6",
    "sql": "SELECT College FROM match_season WHERE POSITION = \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION = \"Defender\"",
    "linq": "context.MatchSeasons.Where(row => row.Position == \"Midfielder\").Select(row => row.College).Intersect(context.MatchSeasons.Where(row => row.Position == \"Defender\").Select(row => row.College)).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "58d12bedff9ee6762fa3e79319df40c773f76f02783520a30123e013e059463b",
    "sql": "SELECT sum(hours) FROM projects",
    "linq": "context.Projects.Select(row => row.Hours).Sum();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "374fbea5181a7ec33c6e1d4da9d0ea180c5ee9fed51ef3f0dcbb2ea99316d352",
    "sql": "SELECT count(DISTINCT name) FROM projects",
    "linq": "context.Projects.Select(row => row.Name).Distinct().Count();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "05a77d04690cf074f557b0cb05033143d150896a415e3b37c29dd2f067d9abcd",
    "sql": "SELECT avg(hours) FROM projects",
    "linq": "context.Projects.Select(row => row.Hours).Average();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b6bbedb6d70440c2dc9402bc13a75b244a9ac2ec7999a3098d208939b9793784",
    "sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
    "linq": "context.Projects.OrderByDescending(row => row.Hours).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fe849fa018dac8798f2e8ff8fda2b8ec04b9d135d66a267cc130abe2598e9013",
    "sql": "SELECT name FROM projects WHERE hours > (SELECT avg(hours) FROM projects)",
    "linq": "context.Projects.Where(row => row.Hours > context.Projects.Select(row => row.Hours).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4144733e414d127fdb762745d68fcdbe999003f6c5fa68191a8c6b68cfec0fde",
    "sql": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300",
    "linq": "context.Projects.Where(row => row.Hours >= 100 && row.Hours <= 300).Select(row => new { row.Name }).ToList();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f73a3dc8c0f12df45be1f90f20b6eea0272f16427c7cff8145d4bbe6a7439d0a",
    "sql": "SELECT count(*) FROM COURSE",
    "linq": "context.Courses.Count();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2f533f00351db440e48057fe1b02dc6ccabe414648d274c0c05f75aaa082ade8",
    "sql": "SELECT count(*) FROM COURSE WHERE Credits > 2",
    "linq": "context.Courses.Where(row => row.Credits > 2).Count();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "853255f6f5f5e99a19768553feb405420f92d83483bfa2396e8cc62dfbd96e40",
    "sql": "SELECT CName FROM COURSE WHERE Credits = 1",
    "linq": "context.Courses.Where(row => row.Credits == 1).Select(row => new { row.Cname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0d17b67002c5a1ff968dac977571b40d33c74c993fd33faaedcfa3d45c85e5e8",
    "sql": "SELECT CName FROM COURSE WHERE Days = \"MTW\"",
    "linq": "context.Courses.Where(row => row.Days == \"MTW\").Select(row => new { row.Cname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0b41830c319e16a38b3b899008c555b02339737e64edddbbdd6f7b864c92315d",
    "sql": "SELECT count(*) FROM DEPARTMENT WHERE Division = \"AS\"",
    "linq": "context.Departments.Where(row => row.Division == \"AS\").Count();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "085742517b01d444adfb7b9c29a8d497b02081186344682a0b67ea45bd354e20",
    "sql": "SELECT DPhone FROM DEPARTMENT WHERE Room = 268",
    "linq": "context.Departments.Where(row => row.Room == \"268\").Select(row => new { row.Dphone }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a03dfa30be5eadbf055f55bcded45297a815c0235e6ef7eb808bea098cab15dc",
    "sql": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade = \"B\"",
    "linq": "context.EnrolledIns.Where(row => row.Grade == \"B\").Select(row => row.StuId).Distinct().Count();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6f55805cbdc89cf913180e9636d27dbed0483bb4d8df9fcb5406f6fde7c66779",
    "sql": "SELECT max(gradepoint) , min(gradepoint) FROM GRADECONVERSION",
    "linq": "context.Gradeconversions.GroupBy(row => 1).Select(group => new { MaxGradepoint = group.Select(row => row.Gradepoint).Max(), MinGradepoint = group.Select(row => row.Gradepoint).Min() }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "56dd8b89e6c24f7e564ec94330d0074a2e4f6290c78514410c9d0b9c7e654f10",
    "sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
    "linq": "context.Students.Where(row => EF.Functions.Like(row.Fname, \"%a%\")).Select(row => new { row.Fname }).Distinct().ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2aad97ef6b876b5ee117565c3c04d984967f03da73488fb92c1cbcea78059569",
    "sql": "SELECT Fname , Lname FROM FACULTY WHERE sex = \"M\" AND Building = \"NEB\"",
    "linq": "context.Faculties.Where(row => row.Sex == \"M\" && row.Building == \"NEB\").Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a109b31c0922d50b37f2370e17ab7be3df13dc3aecc0ae3112c38d86a9cb6f22",
    "sql": "SELECT Room FROM FACULTY WHERE Rank = \"Professor\" AND Building = \"NEB\"",
    "linq": "context.Faculties.Where(row => row.Rank == \"Professor\" && row.Building == \"NEB\").Select(row => new { row.Room }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f44510511cd6e0dfe3f3ccccca0d7b3ad1c98bce930be89840ee13279829e08",
    "sql": "SELECT DName FROM DEPARTMENT WHERE Building = \"Mergenthaler\"",
    "linq": "context.Departments.Where(row => row.Building == \"Mergenthaler\").Select(row => new { row.Dname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cfba82b589ec224efc98362ebbec51d015e6cefdfce6a08f44a858d56a7f318f",
    "sql": "SELECT CName FROM COURSE ORDER BY Credits",
    "linq": "context.Courses.OrderBy(row => row.Credits).Select(row => new { row.Cname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e6b67c6fd67a5b7a1f0cf5ad5a0052f4c3a77ead4e36a443f576ea8c0b8c4cae",
    "sql": "SELECT Fname FROM STUDENT ORDER BY Age DESC",
    "linq": "context.Students.OrderByDescending(row => row.Age).Select(row => new { row.Fname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0da9d5c4790a7f155782e940d68ca7b8959c46eeaf923070a43661b604b54e6c",
    "sql": "SELECT LName FROM STUDENT WHERE Sex = \"F\" ORDER BY Age DESC",
    "linq": "context.Students.Where(row => row.Sex == \"F\").OrderByDescending(row => row.Age).Select(row => new { row.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2f9c4d5996ceeaf3810770353ad065ef8297d432df7fde352bba0c6a57ff7551",
    "sql": "SELECT Lname FROM FACULTY WHERE Building = \"Barton\" ORDER BY Lname",
    "linq": "context.Faculties.Where(row => row.Building == \"Barton\").OrderBy(row => row.Lname).Select(row => new { row.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6c408ef97867df863178bb2e392df0120bc2bc316fd21527ead3fb22e1b9d4a8",
    "sql": "SELECT Fname FROM FACULTY WHERE Rank = \"Professor\" ORDER BY Fname",
    "linq": "context.Faculties.Where(row => row.Rank == \"Professor\").OrderBy(row => row.Fname).Select(row => new { row.Fname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bc93d267f911ca847b0e44492bb1336500212dcb1c9665638f31dcaf5ed46ff4",
    "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Departments.Join(context.MinorIns, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Dno }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Dname }).Take(1).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a9e027cd4aebab362d1068d65277decf563be6e480fd3445c47aef9e42881b1d",
    "sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO",
    "linq": "context.Departments.Select(row => row.Dname).Except(context.Departments.Join(context.MinorIns, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Dname)).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d06155750ee348cb4dc89619fb3205f19064b291abe4d47d4e9b8d383ea6aea0",
    "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.Departments.Join(context.MemberOfs, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Dno }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.Dname }).Take(1).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0e5a95c9284a6c3fdf3f1d2481e139519d871026f52be36cd5bcbbe27c1a08f6",
    "sql": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.Faculties.GroupBy(row => new { row.Rank }).OrderBy(group => group.Count()).Select(group => new { group.Key.Rank }).Take(1).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "48c3d2dc62e0ffd47ff78b062055fa8a6314b6135d551b430e4787e0034ecc0c",
    "sql": "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
    "linq": "context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Instructor }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Fname, group.First().T2.Lname }).Take(3).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "575fe510daba7ed1fb5785992c5a2d1ea5b1ac68c03bca82e5c1b939d147e398",
    "sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Instructor }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Building }).Take(1).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "da15e4d4d33e912d8cc247befc461abc17af6ef9ef52e31455216bb31526040b",
    "sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT(*) >= 5",
    "linq": "context.Courses.Join(context.EnrolledIns, T1 => T1.Cid, T2 => T2.Cid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Cid }).Where(group => group.Count() >= 5).Select(group => new { group.First().T1.Cname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4a61c9ad7457b6dfcdcf562778152f30f755e5f6bb7f204d499c661c991a3c67",
    "sql": "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE T1.CName = \"COMPUTER LITERACY\"",
    "linq": "context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Cname == \"COMPUTER LITERACY\").Select(row => new { row.T2.Fname, row.T2.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7e0b3448129f7b07a53837bf6006ebdf1e7dc51e5539d8e08daf4095b1c8d4aa",
    "sql": "SELECT T2.Dname , T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = \"INTRODUCTION TO COMPUTER SCIENCE\"",
    "linq": "context.Courses.Join(context.Departments, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Cname == \"INTRODUCTION TO COMPUTER SCIENCE\").Select(row => new { row.T2.Dname, row.T2.Room }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6d3527bc11413f5548be2c912cb80017758b0b41112db97b6c3d3c2ce48eb848",
    "sql": "SELECT T3.Fname , T3.LName , T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID",
    "linq": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Fname, row.T3.Lname, row.T2.Gradepoint }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c450f7b809807fd3216f660fb68db408ec6b50dccd2ea21f8dc691b8dbbd40c9",
    "sql": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T2.gradepoint >= 3.8",
    "linq": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Gradepoint >= 3.8).Select(row => new { row.T3.Fname }).Distinct().ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d50ecb08c42cea6f31dff3eb693b2eb515565c0ad0292a07013d7929d8166734",
    "sql": "SELECT T1.Fname , T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520",
    "linq": "context.Faculties.Join(context.MemberOfs, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Dno == 520).Select(row => new { row.T1.Fname, row.T1.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "06e64e8b8a8b002c6e88118964788db4bd44a91afd8f9a41916aaef2833071b6",
    "sql": "SELECT T2.Fname , T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE T1.DNO = 140",
    "linq": "context.MinorIns.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Dno == 140).Select(row => new { row.T2.Fname, row.T2.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1562b1a883fb717817dbb835da380d34f3804f86278584b7f24d6b480303bea4",
    "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = \"Computer Science\"",
    "linq": "context.Departments.Join(context.MemberOfs, T1 => T1.Dno, T3 => T3.Dno, (T1, T3) => new { T1, T3 }).Join(context.Faculties, joined => joined.T3.FacId, T2 => T2.FacId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T1.Dname == \"Computer Science\").Select(row => new { row.T2.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "71c12e3f43d07ded2f6a54ba80ea7c6fa91d0c7e4ccc3a09ee22cefcf3fbea5f",
    "sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = \"Smith\"",
    "linq": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Lname == \"Smith\").Select(row => (double) row.T2.Gradepoint).Average();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "84380454f291e54cf911ed4a010ae300cc9adc29ebd730aab70bf7d46e0ae7b9",
    "sql": "SELECT max(T2.gradepoint) , min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = \"NYC\"",
    "linq": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CityCode == \"NYC\").GroupBy(row => 1).Select(group => new { MaxGradepointT2 = group.Select(row => row.T2.Gradepoint).Max(), MinGradepointT2 = group.Select(row => row.T2.Gradepoint).Min() }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "baf2f5453150727416eab33f6aa7f86d761191400431982269cf2ad9a8111ce2",
    "sql": "SELECT CName FROM COURSE WHERE Credits = 3 UNION SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4",
    "linq": "context.Courses.Where(row => row.Credits == 3).Select(row => row.Cname).Union(context.Courses.Where(row => row.Credits == 1 && row.Hours == \"4\").Select(row => row.Cname)).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f46e27b46136c358330468b37a6521b4bcc8ad15f25bfd99f67944b0293ab092",
    "sql": "SELECT DName FROM DEPARTMENT WHERE Division = \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division = \"EN\" AND Building = \"NEB\"",
    "linq": "context.Departments.Where(row => row.Division == \"AS\").Select(row => row.Dname).Union(context.Departments.Where(row => row.Division == \"EN\" && row.Building == \"NEB\").Select(row => row.Dname)).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "636115094a20cff2c8819ee75f24d7f17f064ba893d51f47853e8cb67cf86969",
    "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
    "linq": "context.Students.Where(row => !context.EnrolledIns.Select(row => row.StuId).Contains(row.StuId)).Select(row => new { row.Fname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "26d9757c060c6360d00ff1aedc0eb04c7bcc4419db1f7c2005311bf97db29ff6",
    "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.name = \"buttercup kitchen\";",
    "linq": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"san francisco\" && row.t1.Name == \"buttercup kitchen\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "418358a32fc36ac8d97bfa1d07c9647228d08e7c6acd05e06653a1a814b36b17",
    "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"chinese\";",
    "linq": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Region == \"bay area\" && row.t1.FoodType == \"chinese\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bbcf0b90b14bba70594dc74d7fb5101e6d1bd16af3aacec9b0e4092629bc0288",
    "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.county = \"santa cruz county\" AND t1.name = \"jamerican cuisine\";",
    "linq": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Where(row => row.t2.County == \"santa cruz county\" && row.t1.Name == \"jamerican cuisine\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c50e03a24f7a54a2ea54fa7ce8e46fbe3cba7093853ceec0b08dae21d2f914c2",
    "sql": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t1.name = \"jamerican cuisine\";",
    "linq": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Name == \"jamerican cuisine\").Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2adee7136a48a2129fd2a9cddcb412e23f7022cbfab60bec8a51c65d3094e469",
    "sql": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" );",
    "linq": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"san francisco\" && row.t1.FoodType == \"french\" && row.t1.Rating == context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"san francisco\" && row.t1.FoodType == \"french\").Select(row => row.t1.Rating).Max()).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "184319b45e4a580d04a1c7d01ac4fa6b8351fa2f09a804ecbdc73a7d93e9b992",
    "sql": "SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.name = \"denny\";",
    "linq": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Join(context.Locations, joined => joined.t1.Id, t3 => t3.RestaurantId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.Region == \"bay area\" && row.t1.Name == \"denny\").Select(row => new { row.t3.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "58bd1df289cfab47c049921824aacd350536581eed4042d488230d9adaf0906c",
    "sql": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"bethel island\" AND t2.street_name = \"bethel island rd\" AND t1.rating > 2.5;",
    "linq": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"bethel island\" && row.t2.StreetName == \"bethel island rd\" && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2c5a53b788f6c21c8b19aedbee00623f5c5d71c72010062d4880d0785c334800",
    "sql": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"alameda\";",
    "linq": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"alameda\").Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f0e9b53a4260fec5edd4709060b020fda35e8318aa4937a5fa1970ce57c89f64",
    "sql": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t1.food_type = \"french\" AND t1.rating > 2.5;",
    "linq": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.FoodType == \"french\" && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e4317b1357b92440663d3e46508999c703c80c3246272318fa351f890dec2d9",
    "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"palo alto\" AND t1.food_type = \"french\";",
    "linq": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"palo alto\" && row.t1.FoodType == \"french\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7093e5cbd973a1cc8e331d0d63a9d43c9329a671f4677de6cfac813b567f5b7d",
    "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.county = \"yolo county\" AND t1.food_type = \"italian\";",
    "linq": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Where(row => row.t2.County == \"yolo county\" && row.t1.FoodType == \"italian\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8d8e5194bb08e0024a35f410768c17132765616cff869102f3a6570f6ff07f25",
    "sql": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"french\";",
    "linq": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"mountain view\" && row.t1.FoodType == \"french\").Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b5841b8db3ef77635bbdc64b869aeab8b3ff62f92019fef2c9f35265f7d0e2b7",
    "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.name = \"denny\";",
    "linq": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Region == \"bay area\" && row.t1.Name == \"denny\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1f9df07d58e76115b19e974e2f3e93c0585cff7849435ac35984a3a2447fd5be",
    "sql": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"alameda\" AND t1.rating > 2.5;",
    "linq": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"alameda\" && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "14960d07456fc81399f99bcb90a8db8014628e178b636ae94fc154eaf3cbfadf",
    "sql": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;",
    "linq": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"san francisco\" && row.t2.StreetName == \"buchanan\" && row.t1.FoodType == \"arabic\" && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9391aaa71652993e2770351434845a6a4ec0855bd202d70851ed4d512443bfa2",
    "sql": "SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"french\";",
    "linq": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Join(context.Locations, joined => joined.t1.Id, t3 => t3.RestaurantId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.Region == \"bay area\" && row.t1.FoodType == \"french\").Select(row => new { row.t3.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1a4bafbd299ed5587133dead418c6f4b85a090e6c16ba5e1a0e68838565ddb07",
    "sql": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"bethel island\" AND t2.street_name = \"bethel island rd\";",
    "linq": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"bethel island\" && row.t2.StreetName == \"bethel island rd\").Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8962a066d6b87c8b32cd57aee3d392be681cb26a2f04e3946d148db3875945ff",
    "sql": "SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" );",
    "linq": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Join(context.Locations, joined => joined.t1.Id, t3 => t3.RestaurantId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.Region == \"bay area\" && row.t1.FoodType == \"american\" && row.t1.Rating == context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Region == \"bay area\" && row.t1.FoodType == \"american\").Select(row => row.t1.Rating).Max()).Select(row => new { row.t3.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6bde342527e7148044c5a061829b974d7df39e48f6e04f8608f48bcccab8a2d2",
    "sql": "SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"yosemite and mono lake area\" AND t1.food_type = \"french\" AND t1.rating > 2.5;",
    "linq": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Join(context.Locations, joined => joined.t1.Id, t3 => t3.RestaurantId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.Region == \"yosemite and mono lake area\" && row.t1.FoodType == \"french\" && row.t1.Rating > 2.5).Select(row => new { row.t3.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "05a5dad00fa3ca4b91f673a841903f2ab04dbc8c727e5a713425cc66b00ad10e",
    "sql": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;",
    "linq": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"mountain view\" && row.t1.FoodType == \"arabic\" && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "62d1c357c7f0a71fbc119e6cfc20c73abdd86dc9bea316998e42f9457c9e882d",
    "sql": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.name = \"jamerican cuisine\";",
    "linq": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"san francisco\" && row.t1.Name == \"jamerican cuisine\").Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4e958f1acb4d2b950a13326c0b69a15190f881d862b1544df6a0cb06b2d42abb",
    "sql": "SELECT t2.house_number , t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region = \"bay area\" );",
    "linq": "context.Locations.Join(context.Restaurants, t2 => t2.RestaurantId, t1 => t1.Id, (t2, t1) => new { t2, t1 }).Where(row => context.Geographics.Where(row => row.Region == \"bay area\").Select(row => row.CityName).Contains(row.t1.CityName)).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "532e59c44ec8813de7a36255208db07f03509f8d690991aec6349ce3e5aace1a",
    "sql": "SELECT t2.house_number , t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region = \"region0\" ) AND t1.rating > 2.5;",
    "linq": "context.Locations.Join(context.Restaurants, t2 => t2.RestaurantId, t1 => t1.Id, (t2, t1) => new { t2, t1 }).Where(row => context.Geographics.Where(row => row.Region == \"region0\").Select(row => row.CityName).Contains(row.t1.CityName) && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "26e0c4742b28e0cd7550b20da93ffc0c235c147ec23ae016eff78a8ab42641ef",
    "sql": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
    "linq": "context.Channels.Where(row => row.Owner != \"CCTV\").Select(row => new { row.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c6c48d2b8f24465481f109cef71830dc2ac6bcbdcca59016b272946841aa1912",
    "sql": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
    "linq": "context.Channels.OrderByDescending(row => row.RatingInPercent).Select(row => new { row.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "22eb5a5bc5528e881ff15e4d6181db6dfc96678e37b2989495cee1381c72c3ac",
    "sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1",
    "linq": "context.Channels.OrderByDescending(row => row.RatingInPercent).Select(row => new { row.Owner }).Take(1).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3e65363aabe5d4695a4fa3759ea32e0a3c1d69dc2cbade2b996f82d0350406a1",
    "sql": "SELECT count(*) FROM program",
    "linq": "context.Programs.Count();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "838a35a61dde3a16019441385722a927b5cfb67084d95e1d3e810e88d59a267b",
    "sql": "SELECT name FROM program ORDER BY launch",
    "linq": "context.Programs.OrderBy(row => row.Launch).Select(row => new { row.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "57a7feb6a2cd4b6aaf4ad52d34375317934553dcd6b16370c4bd567954834852",
    "sql": "SELECT name , origin , OWNER FROM program",
    "linq": "context.Programs.Select(row => new { row.Name, row.Origin, row.Owner }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e35649ef07f33e360cb5a9a56ec613f18ab9a450ec3b3ed6be6bb7246a9b6bc9",
    "sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
    "linq": "context.Programs.OrderByDescending(row => row.Launch).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f043928a10194d5a8dba14adce61f033d81deda8107be6da442c905f133d7ed",
    "sql": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER = 'CCTV'",
    "linq": "context.Channels.Where(row => row.Owner == \"CCTV\").Select(row => row.ShareInPercent).Sum();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f194a532a61ba98bfc0aa4df4285af16a0c6afe172105da1f18a79a9fdc5c32",
    "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning'",
    "linq": "context.Channels.Join(context.Broadcasts, t1 => t1.ChannelId, t2 => t2.ChannelId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Morning\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "de44752be04a6df0e05bb9c822dd6e82a51e6d162858aa5b5f49c3cb923fa58d",
    "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Night'",
    "linq": "context.Channels.Join(context.Broadcasts, t1 => t1.ChannelId, t2 => t2.ChannelId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Morning\").Select(row => row.t1.Name).Intersect(context.Channels.Join(context.Broadcasts, t1 => t1.ChannelId, t2 => t2.ChannelId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Night\").Select(row => row.t1.Name)).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d836c00260aecea3e6b05c64e74ec6b27bdfaee7e257b80aa35acbc2b8f60cc6",
    "sql": "SELECT count(*) , time_of_day FROM broadcast GROUP BY time_of_day",
    "linq": "context.Broadcasts.GroupBy(row => new { row.TimeOfDay }).Select(group => new { Count = group.Count(), group.Key.TimeOfDay }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f72ab6c97e2c670991a59c8ef4cf732b7f07ae64b44d623caec53344308e0929",
    "sql": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day = 'Night'",
    "linq": "context.Broadcasts.Where(row => row.TimeOfDay == \"Night\").Select(row => row.ProgramId).Distinct().Count();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "714d9d42aa474e3a7232b69de0c484ddfba1a3695d0b369d261396b02e99bc36",
    "sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Morning\"",
    "linq": "context.Programs.Select(row => row.Name).Except(context.Programs.Join(context.Broadcasts, t1 => t1.ProgramId, t2 => t2.ProgramId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Morning\").Select(row => row.t1.Name)).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5406d5930035fe402e8e0cd22f2f8084134ec67c78649524a8edaca738fe66fc",
    "sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Night\"",
    "linq": "context.Programs.Join(context.Broadcasts, t1 => t1.ProgramId, t2 => t2.ProgramId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Morning\").Select(row => row.t1.Owner).Intersect(context.Programs.Join(context.Broadcasts, t1 => t1.ProgramId, t2 => t2.ProgramId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Night\").Select(row => row.t1.Owner)).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c153820722e913b63acbb6f049c20c9dfa67fcf14e5be9702bd976d832e2774",
    "sql": "SELECT origin FROM program ORDER BY origin",
    "linq": "context.Programs.OrderBy(row => row.Origin).Select(row => new { row.Origin }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e7cc5f1583856e9a83d89a20bf4a1cd08fe53391cb614929db8d577ac10954a",
    "sql": "SELECT count(DISTINCT OWNER) FROM channel",
    "linq": "context.Channels.Select(row => row.Owner).Distinct().Count();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c5d7cbdfed96505e9167130935930aa1cfa3522447af88ec3349a3c48b7f9fc1",
    "sql": "SELECT name FROM program WHERE origin != 'Beijing'",
    "linq": "context.Programs.Where(row => row.Origin != \"Beijing\").Select(row => new { row.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fb9f0e00a864d21f4af548f1dcccf705c2fa3b77303da09a56ff8ce1f552d481",
    "sql": "SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'",
    "linq": "context.Channels.Where(row => row.Owner == \"CCTV\" || row.Owner == \"HBS\").Select(row => new { row.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fb596e3fc60b758c3f50496be785c5c6017b8689043d4d88b85d7ef6915d0c8d",
    "sql": "SELECT sum(Rating_in_percent) , OWNER FROM channel GROUP BY OWNER",
    "linq": "context.Channels.GroupBy(row => new { row.Owner }).Select(group => new { SumRatingInPercent = group.Select(row => row.RatingInPercent).Sum(), group.Key.Owner }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "01fa63e0a2590633fec910d1ad369e83d03d3f13bbaa614e90ecca62f6351376",
    "sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Programs.Join(context.Broadcasts, t1 => t1.ProgramId, t2 => t2.ProgramId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ProgramId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.Name }).Take(1).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5d40f063e0a51a203bcb59293fc1e4f8a0c9a9b1de7cd359e0fcad8cbf95df7c",
    "sql": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Trains.Join(context.Route, t1 => t1.Id, t2 => t2.TrainId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.TrainId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.Name }).Take(1).ToList();",
    "db_name": "station_weather",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,40): error CS1061: 'StationWeatherContext' does not contain a definition for 'Route' and no accessible extension method 'Route' accepting a first argument of type 'StationWeatherContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5eebc906c3139e5376270b90a01b67bc2bcdffc436943841f53a2b7932b14fda",
    "sql": "SELECT count(*) , t1.network_name , t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id",
    "linq": "context.Stations.Join(context.Route, t1 => t1.Id, t2 => t2.StationId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.StationId }).Select(group => new { Count = group.Count(), group.First().t1.NetworkName, group.First().t1.Services }).ToList();",
    "db_name": "station_weather",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS1061: 'StationWeatherContext' does not contain a definition for 'Route' and no accessible extension method 'Route' accepting a first argument of type 'StationWeatherContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.54",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0d9e517d409cc321d1a531648504a26fe3ca81d91fd99d589ad92f1d56dc1e87",
    "sql": "SELECT t3.name , t3.time FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\"",
    "linq": "context.Stations.Join(context.Route, t1 => t1.Id, t2 => t2.StationId, (t1, t2) => new { t1, t2 }).Join(context.Trains, joined => joined.t2.TrainId, t3 => t3.Id, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.LocalAuthority == \"Chiltern\").Select(row => new { row.t3.Name, row.t3.Time }).ToList();",
    "db_name": "station_weather",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS1061: 'StationWeatherContext' does not contain a definition for 'Route' and no accessible extension method 'Route' accepting a first argument of type 'StationWeatherContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1b37832662d5ac8c8bf64e923e4ef417c75f0599af17f796dce6aca2e6c5dd66",
    "sql": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code",
    "linq": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Select(row => new { T1Code = rowT1..Code, T1Name = rowT1..Name, rowT1..Price, rowT1..Manufacturer, T2Code = rowT2..Code, T2Name = rowT2..Name, rowT2..Headquarter, rowT2..Founder, rowT2..Revenue }).ToList();",
    "db_name": "manufactory_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,309): error CS0103: The name 'Revenue' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    23 Error(s)\n\nTime Elapsed 00:00:01.36",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "59eaf94c97fdba4f1a422b0f5b7ed01e327606b1cb152103d99d3459ab89a9bd",
    "sql": "SELECT T1.Name , max(T1.Price) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name",
    "linq": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { T1Name = group.OrderByDescending(row => row.T1.Price).First().T1.Name, MaxPrice = group.Select(row => row.T1.Price).Max(), T2Name = group.Key.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cd86d43c2e509ebe67e445c9c54b778053f631d48341260cc4a61f3bbbc33157",
    "sql": "SELECT code , name , min(price) FROM products GROUP BY name",
    "linq": "context.Products.GroupBy(row => new { row.Name }).Select(group => new { group.First().Code, group.Key.Name, MinPrice = group.Select(row => row.Price).Min() }).ToList();",
    "db_name": "manufactory_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 7, 1: CD drive, 2: 90}, {0: 10, 1: DVD burner, 2: 180}, {0: 11, 1: DVD drive, 2: 150}, {0: 4, 1: Floppy disk, 2: 5}, {0: 1, 1: Hard drive, 2: 240}, {0: 2, 1: Memory, 2: 120}, {0: 5, 1: Monitor, 2: 240}, {0: 8, 1: Printer, 2: 270}, {0: 9, 1: Toner cartridge, 2: 66}, {0: 3, 1: ZIP drive, 2: 150}]\", linq_results: \"[{0: 7, 1: CD drive, 2: 90}, {0: 10, 1: DVD burner, 2: 180}, {0: 6, 1: DVD drive, 2: 150}, {0: 4, 1: Floppy disk, 2: 5}, {0: 1, 1: Hard drive, 2: 240}, {0: 2, 1: Memory, 2: 120}, {0: 5, 1: Monitor, 2: 240}, {0: 8, 1: Printer, 2: 270}, {0: 9, 1: Toner cartridge, 2: 66}, {0: 3, 1: ZIP drive, 2: 150}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ad3bf03a3b32e9231cee42f5d1c59478646e9971eceb696426b2a5b6d4a9ff74",
    "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'shopping'",
    "linq": "context.TouristAttractions.Join(context.TouristAttractionFeature, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Join(context.Features, joined => joined.T2.FeatureId, T3 => T3.FeatureId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.FeatureDetails == \"park\").Select(row => row.T1.Name).Union(context.TouristAttractions.Join(context.TouristAttractionFeature, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Join(context.Features, joined => joined.T2.FeatureId, T3 => T3.FeatureId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.FeatureDetails == \"shopping\").Select(row => row.T1.Name)).ToList();",
    "db_name": "cre_Theme_park",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,409): error CS1061: 'CreThemeParkContext' does not contain a definition for 'TouristAttractionFeature' and no accessible extension method 'TouristAttractionFeature' accepting a first argument of type 'CreThemeParkContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.44",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a66fd5ea20d4bbea2448dcf157b7fba52a2540a5fae011126c5753aae26ff938",
    "sql": "SELECT date FROM weather WHERE max_temperature_f > 85",
    "linq": "context.Weathers.Where(row => row.MaxTemperatureF > \"85\").Select(row => new { row.Date }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.41",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "363ddee84c11bfa1f75e238d13835df37bd10dee1d556e965354200d72b99c16",
    "sql": "SELECT zip_code , avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
    "linq": "context.Weathers.Where(row => EF.Functions.Like(row.Date, \"8/%\")).GroupBy(row => new { row.ZipCode }).Select(group => new { group.Key.ZipCode, AverageMeanTemperatureF = group.Select(row => row.MeanTemperatureF).Average() }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,181): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.33",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f6ccef7e47ec569b136edf69a1cbdbd47645252e37ed1050925dc97ae163e966",
    "sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8",
    "linq": "context.Weathers.Where(row => row.MeanHumidity > \"50\" && row.MeanVisibilityMiles > \"8\").Count();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,69): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.31",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "02987cc6641851a80c691f8cd70e40dd8ca66b3313f89a9be2f89d91e536b61d",
    "sql": "SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10",
    "linq": "context.Stations.Where(row => row.City == \"San Francisco\").Select(row => row.Id).Intersect(context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Average(row => row.BikesAvailable) > 10).Where(group => group.Key.StationId.HasValue).Select(group => group.Key.StationId.Value)).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9647a823292294e48428692c8f8b2dc9de462b92a4bfe98055258b021000d0ac",
    "sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
    "linq": "context.Weathers.GroupBy(row => new { row.ZipCode }).OrderBy(group => group.Average(row => row.MeanSeaLevelPressureInches)).Select(group => new { group.Key.ZipCode }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,103): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.40",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8b05279d072b7411f40f742fb5342e1f3a0a9cece005f4afb110ee9e1ec61e5d",
    "sql": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city = \"Palo Alto\")",
    "linq": "context.Statuses.Where(row => row.StationId.HasValue && !context.Stations.Where(row => row.City == \"Palo Alto\").Select(row => row.Id).Contains(row.StationId.Value)).Select(row => row.BikesAvailable).Average();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3c5daab563daa29d21736ef253c918b845bb1ddfb3a2a6b9540a3eef3193b1e6",
    "sql": "SELECT date , zip_code FROM weather WHERE max_temperature_f >= 80",
    "linq": "context.Weathers.Where(row => row.MaxTemperatureF >= \"80\").Select(row => new { row.Date, row.ZipCode }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '>=' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bbe51f6c9a28b8bc352a94f1fe3c4d0fa3f9190da3f6de6b4ac75b87ac029a47",
    "sql": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f) > 60",
    "linq": "context.Trips.Join(context.Weathers, T1 => T1.ZipCode, T2 => T2.ZipCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ZipCode }).Where(group => group.Average(row => row.T2.MeanTemperatureF) > 60).Select(group => new { group.First().T1.Id }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,26): error CS0411: The type arguments for method 'Enumerable.Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)' cannot be inferred from the usage. Try specifying the type arguments explicitly. [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.26",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5a04af4e2580b4a9e8884686f5ffd0d908f75c857eb566a2e15b840d95ef0b8b",
    "sql": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code",
    "linq": "context.Weathers.Where(row => row.MaxWindSpeedMph >= \"25\").GroupBy(row => new { row.ZipCode }).Select(group => new { group.Key.ZipCode, Count = group.Count() }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '>=' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.36",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "24936e8cccaebaeeaf35a1e90f26ebc539ef49b19cad07ed52af1f8630f17541",
    "sql": "SELECT date , zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)",
    "linq": "context.Weathers.Where(row => row.MinDewPointF < context.Weathers.Where(row => row.ZipCode == 94107).Select(row => row.MinDewPointF).Min()).Select(row => new { row.Date, row.ZipCode }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.30",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "590b7195beb7f1e4dc49c116645096960dce25940dbe2cc32fa1821a9df7a44d",
    "sql": "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available) < 7",
    "linq": "context.Stations.Where(row => row.Lat > 37.4).Select(row => row.Id).Except(context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Min(row => row.BikesAvailable) < 7).Where(group => group.Key.StationId.HasValue).Select(group => group.Key.StationId.Value)).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "83dc08b38501dd9418e4a5f102f9eabc2c51af811f72ba4b169162251627b492",
    "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles) < 10",
    "linq": "context.Weathers.GroupBy(row => new { row.ZipCode }).Where(group => group.Average(row => row.MeanVisibilityMiles) < 10).Select(group => new { group.Key.ZipCode }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,101): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.28",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "58173d13208237ecbffea5c5e3c6abbf00580d0cfbfe6570f13c9bd3166df457",
    "sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70",
    "linq": "context.Weathers.Where(row => row.ZipCode.HasValue).Select(row => ZipCode = row.ZipCode.Value).Distinct().Except(context.Weathers.Where(row => row.MaxDewPointF >= \"70\").Where(row => row.ZipCode.HasValue).Select(row => ZipCode = row.ZipCode.Value).Distinct()).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,230): error CS0103: The name 'ZipCode' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    3 Error(s)\n\nTime Elapsed 00:00:01.31",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "60f30052ec5dbfc070703240c4ac76f33a361cfe9ee2263bc7cb7dcf1bebcf7a",
    "sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
    "linq": "context.Weathers.Where(row => row.MeanSeaLevelPressureInches >= 30.3 && row.MeanSeaLevelPressureInches <= 31).Select(row => new { row.Date }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,84): error CS0019: Operator '<=' cannot be applied to operands of type 'string' and 'int' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.27",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2f5b366074f46d4fe999a3086a04668b493df1d5415626361ecd713d71d920d1",
    "sql": "SELECT date , max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
    "linq": "context.Weathers.Select(row => new { row.Date, Diff = row.MaxTemperatureF - row.MinTemperatureF }).OrderBy(row => row.Diff).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,66): error CS0019: Operator '-' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.20",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0e116d9fc3a288e566941cee759a8e0dab1def11cff58a272579a30214a9ffb1",
    "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*) >= 100",
    "linq": "context.Weathers.GroupBy(row => new { row.ZipCode }).Where(group => group.Average(row => row.MeanHumidity) < 70).Where(group => group.Key.ZipCode.HasValue).Select(group => group.Key.ZipCode.Value).Intersect(context.Trips.GroupBy(row => new { row.ZipCode }).Where(group => group.Count() >= 100).Select(group => group.Key.ZipCode)).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,101): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.31",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eb1b673f40289ac9cf78fa7f83893c1ab13a7948bfefd913b86f22f4980b8a00",
    "sql": "SELECT count(*) , account_id FROM Financial_transactions",
    "linq": "context.FinancialTransactions.Select(row => new { Count = row.Count(), row.AccountId }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,74): error CS1061: 'FinancialTransaction' does not contain a definition for 'Count' and no accessible extension method 'Count' accepting a first argument of type 'FinancialTransaction' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.22",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b12503853bb49897d03465a96c03aac924fcb39313bc02378ebeb43709ad1e3a",
    "sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > (SELECT avg(transaction_amount) FROM Financial_transactions)",
    "linq": "context.FinancialTransactions.Where(row => row.TransactionAmount > context.FinancialTransactions.Select(row => (double) row.TransactionAmount).Average()).Select(row => new { row.TransactionId }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,55): error CS0019: Operator '>' cannot be applied to operands of type 'decimal?' and 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.30",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "40f798a2ffa4b80fc2f56c426337d752ecc13f028af44a6042b5ccdac4a9bba9",
    "sql": "SELECT T2.product_name , sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name",
    "linq": "context.OrderItems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ProductName }).Select(group => new { group.Key.ProductName, SumProductQuantity = group.Select(row => row.T1.ProductQuantity).Sum() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,231): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1e6d2cd1f62310608f08bebb25f8690b50751244c812e241b894260f3800f5d1",
    "sql": "SELECT order_id , sum(product_quantity) FROM Order_items GROUP BY order_id",
    "linq": "context.OrderItems.GroupBy(row => new { row.OrderId }).Select(group => new { group.Key.OrderId, SumProductQuantity = group.Select(row => row.ProductQuantity).Sum() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,129): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.28",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dcc00d655d0d614a18a9e9f48b2146b824eb493e84fe3e3a44cc72c3bb2ac30d",
    "sql": "SELECT avg(t1.age) , avg(Years_working) , t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type",
    "linq": "context.Journalists.Join(context.NewsReports, t1 => t1.JournalistId, t2 => t2.JournalistId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.WorkType }).Select(group => new { AverageAge = group.Select(row => row.t1.Age).Average(), AverageYearsWorking = group.Select(row => row.t1.YearsWorking).Average(), group.Key.WorkType }).ToList();",
    "db_name": "news_report",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,207): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.29",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4a3785c8705cf713984e17c71906bb7911c9f64662daf125c85a09d9d881969f",
    "sql": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id = t2.product_id JOIN store AS t3 ON t2.store_id = t3.store_id WHERE t3.store_name = \"Miramichi\"",
    "linq": "context.Products.Join(context.StoreProduct, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Stores, joined => joined.t2.StoreId, t3 => t3.StoreId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.StoreName == \"Miramichi\").Select(row => new { row.t1.Product1 }).ToList();",
    "db_name": "store_product",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS1061: 'StoreProductContext' does not contain a definition for 'StoreProduct' and no accessible extension method 'StoreProduct' accepting a first argument of type 'StoreProductContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.50",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "79b2877ecb7b4d2d7229a5dfe79b73cb8052d8a8480efcdd76b52e397be754e7",
    "sql": "SELECT count(*) , rank FROM captain WHERE age < 50 GROUP BY rank",
    "linq": "context.Captains.Where(row => row.Age < \"50\").GroupBy(row => new { row.Rank }).Select(group => new { Count = group.Count(), group.Key.Rank }).ToList();",
    "db_name": "ship_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.27",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f19e638107b91e4d93feb56a2dd1ef845f4f229050d7a0a2214158919a5af4a2",
    "sql": "SELECT avg(age) , min(age) , CLASS FROM captain GROUP BY CLASS",
    "linq": "context.Captains.GroupBy(row => new { row.Class }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), MinAge = group.Select(row => row.Age).Min(), group.Key.Class }).ToList();",
    "db_name": "ship_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,98): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.31",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cae60c1a89b35d8ce45b2936b51e6284245f22fa8740e785b4e9e9db4e6155e9",
    "sql": "SELECT product_name , typical_buying_price FROM products",
    "linq": "context.Products.Select(row => new { row.ProductName, row.TypicalBuyingPrice }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d7437613d47bc71f397b33d8378ceb01e68add1eac7adbaa0256364e0d92500a",
    "sql": "SELECT count(*) FROM products WHERE product_category_code = \"Spices\" AND typical_buying_price > 1000",
    "linq": "context.Products.Where(row => row.ProductCategoryCode == \"Spices\" && row.TypicalBuyingPrice > 1000).Count();",
    "db_name": "products_gen_characteristics",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2548eece5c90d104aa96ca741fc66b4d6e636fdea892d5ea130a8ebbb94fa30c",
    "sql": "SELECT product_category_code , typical_buying_price FROM products WHERE product_name = \"cumin\"",
    "linq": "context.Products.Where(row => row.ProductName == \"cumin\").Select(row => new { row.ProductCategoryCode, row.TypicalBuyingPrice }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3f1e45fb4aac57c46fed03be62a4d4119e32b236b2718a992cdf1cce5da5d6e8",
    "sql": "SELECT t1.product_name , t1.typical_buying_price , t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"yellow\"",
    "linq": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).Where(row => row.t2.ColorDescription == \"yellow\").Select(row => new { row.t1.ProductName, row.t1.TypicalBuyingPrice, row.t1.TypicalSellingPrice }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b0b4ce00f70dfd0a12be3e8ab200f77e917dd9d99743429116762b6f3c74dcae",
    "sql": "SELECT DISTINCT T2.thing_id , T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.Status_of_Thing_Code = 'Close' OR T1.Date_and_Date < '2017-06-19 02:59:21'",
    "linq": "context.TimedStatusOfThings.Join(context.Things, T1 => T1.ThingId, T2 => T2.ThingId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StatusOfThingCode == \"Close\" || row.T1.DateAndDate < \"2017-06-19 02:59:21\").Select(row => new { row.T2.ThingId, row.T2.TypeOfThingCode }).Distinct().ToList();",
    "db_name": "local_govt_and_lot",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,177): error CS0019: Operator '<' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.27",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "17058966e63961afc9efe644425f20948494f67e4f86b853b90c6e31c58a635e",
    "sql": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations",
    "linq": "context.Organizations.Select(row => row.OrganizationId).Except(context.Organizations.Where(row => row.ParentOrganizationId.HasValue).Select(row => ParentOrganizationId = row.ParentOrganizationId.Value)).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,159): error CS0103: The name 'ParentOrganizationId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.65",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cfbd5337f05bb97e117cd5c7b6a913e6094fc36d41a0e962bcb3860ac5260b20",
    "sql": "SELECT Name FROM WINE WHERE YEAR = \"2008\"",
    "linq": "context.Wines.Where(row => row.Year == \"2008\").Select(row => new { row.Name }).ToList();",
    "db_name": "wine_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,39): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.81",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c4895fc267066c0a720f53d0da2f0a012a65a52356322364dbb107edc9fd5e7d",
    "sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING T2.year < 2010 ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Appelation }).Where(group => group.T2.Year < 2010).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Area }).Take(1).ToList();",
    "db_name": "wine_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,186): error CS1061: 'IGrouping<<anonymous type: string Appelation>, <anonymous type: Appellation T1, Wine T2>>' does not contain a definition for 'T2' and no accessible extension method 'T2' accepting a first argument of type 'IGrouping<<anonymous type: string Appelation>, <anonymous type: Appellation T1, Wine T2>>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.44",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1aab87787b6d79a5e774aec225749d0d4658db85f2e7b543ac6072be5d993659",
    "sql": "SELECT AVG(Price) , AVG(Cases) FROM WINE WHERE YEAR = 2009 AND Grape = \"Zinfandel\"",
    "linq": "context.Wines.Where(row => row.Year == 2009 && row.Grape == \"Zinfandel\").GroupBy(row => 1).Select(group => new { AveragePrice = group.Select(row => row.Price).Average(), AverageCases = group.Select(row => row.Cases).Average() }).ToList();",
    "db_name": "wine_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,197): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.59",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "457ad54861949e784db93fb44f51aed78c685640cea5b7b13f8111cbc1869250",
    "sql": "SELECT main_industry , count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
    "linq": "context.Companies.GroupBy(row => new { row.MainIndustry }).OrderByDescending(group => group.Sum(row => row.MarketValue)).Select(group => new { group.Key.MainIndustry, Count = group.Count() }).Take(1).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "05bc152f45416d47727d368b6a85cba99a021c86ed77c61a98ac57e0b4edbd67",
    "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*) >= 2 ORDER BY College DESC",
    "linq": "context.MatchSeasons.GroupBy(row => new { row.College }).Where(group => group.Count() >= 2).OrderByDescending(group => group.College).Select(group => new { group.Key.College }).ToList();",
    "db_name": "match_season",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,137): error CS1061: 'IGrouping<<anonymous type: string College>, MatchSeason>' does not contain a definition for 'College' and no accessible extension method 'College' accepting a first argument of type 'IGrouping<<anonymous type: string College>, MatchSeason>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.51",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f9d3d80725cda739264aef2b2fadd5e08954a809279131734c3db4aa4f81dd5c",
    "sql": "SELECT * FROM COURSE ORDER BY Credits",
    "linq": "context.Courses.OrderBy(row => row.Credits).Select(row => new { row.Cid, row.Cname, row.Credits, row.Instructor, row.Days, row.Hours, row.Dno }).ToList();",
    "db_name": "college_3",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 600.103, 1: INTRODUCTION TO COMPUTER SCIENCE, 2: 1, 3: 4230, 4: Th, 5: 4, 6: 600}, {0: 600.303, 1: SUPERCOMPUTING, 2: 1, 3: 9826, 4: W, 5: 4-6:20, 6: 600}, {0: 600.601, 1: COMPUTER SCIENCE SEMINAR, 2: 1, 3: 6191, 4: ThF, 5: 10:30-12, 6: 600}, {0: 050.802, 1: RESEARCH SEMINAR IN COGNITIVE PROCESSES, 2: 1, 3: 9011, 4: W, 5: 1-3, 6: 50}, {0: 550.790, 1: TOPICS IN APPLIED MATH, 2: 2, 3: 2881, 4: MT, 5: 4:30-6, 6: 550}, {0: 600.101, 1: COMPUTER LITERACY, 2: 3, 3: 6112, 4: MTW, 5: 3, 6: 600}, {0: 600.107, 1: INTRO TO PROGRAMMING IN JAVA, 2: 3, 3: 1193, 4: MTW, 5: 3, 6: 600}, {0: 600.109, 1: INTRO TO PROGRAMMING IN C/C++, 2: 3, 3: 4230, 4: MTW, 5: 12, 6: 600}, {0: 600.113, 1: EXPLORING THE INTERNET, 2: 3, 3: 6112, 4: MTW, 5: 4, 6: 600}, {0: 600.121, 1: JAVA PROGRAMMING, 2: 3, 3: 6112, 4: ThF, 5: 10:30-12, 6: 600}, {0: 600.211, 1: UNIX SYSTEMS PROGRAMMING, 2: 3, 3: 6112, 4: ThF, 5: 1-2:15, 6: 600}, {0: 600.227, 1: DATA STRUCTURES in JAVA, 2: 3, 3: 1121, 4: MTW, 5: 9, 6: 600}, {0: 600.232, 1: MULTIMEDIA COMPUTING, 2: 3, 3: 9826, 4: MW, 5: 1-2:30, 6: 600}, {0: 600.271, 1: COMPUTATIONAL MODELS, 2: 3, 3: 9172, 4: MTW, 5: 1, 6: 600}, {0: 600.315, 1: DATABASE SYSTEMS, 2: 3, 3: 2192, 4: ThF, 5: 2:30-4, 6: 600}, {0: 600.333, 1: COMPUTER SYSTEM FUNDAMENTALS, 2: 3, 3: 1148, 4: MTW, 5: 8, 6: 600}, {0: 600.337, 1: DISTRIBUTED SYSTEMS, 2: 3, 3: 8918, 4: M, 5: 3, 6: 600}, {0: 600.363, 1: INTRODUCTION TO ALGORITHMS, 2: 3, 3: 7712, 4: MTW, 5: 9, 6: 600}, {0: 600.415, 1: DATABASE SYSTEMS, 2: 3, 3: 2192, 4: ThF, 5: 2:30-4, 6: 600}, {0: 600.433, 1: COMPUTER SYSTEMS, 2: 3, 3: 1148, 4: MTW, 5: 8, 6: 600}, {0: 600.437, 1: DISTRIBUTED SYSTEMS, 2: 3, 3: 8918, 4: M, 5: 3, 6: 600}, {0: 600.445, 1: QUANTITATIVE MEDICAL COMPUTING, 2: 3, 3: 7723, 4: ThF, 5: 1-2:15, 6: 600}, {0: 600.461, 1: COMPUTER VISION, 2: 3, 3: 8114, 4: MTW, 5: 1, 6: 600}, {0: 600.463, 1: ALGORITHMS I, 2: 3, 3: 7712, 4: MTW, 5: 9, 6: 600}, {0: 600.465, 1: INTRO TO NATURAL LANGUAGE PROCESSING, 2: 3, 3: 7792, 4: MTW, 5: 2, 6: 600}, {0: 600.509, 1: COMPUTER SCIENCE INTERNSHIP, 2: 3, 3: 1121, 4: M, 5: 1, 6: 600}, {0: 600.657, 1: HIGH PERFORMANCE GRAPHICS AND MODELING, 2: 3, 3: 8423, 4: M, 5: 4-5:30, 6: 600}, {0: 600.787, 1: SEMINAR ON COMPUTATIONAL GEOMETRY, 2: 3, 3: 1121, 4: Th, 5: 2, 6: 600}, {0: 500.203, 1: ACCOUNTING I, 2: 3, 3: 9823, 4: T, 5: 6:15-8:45, 6: 550}, {0: 500.204, 1: ACCOUNTING II, 2: 3, 3: 9823, 4: Th, 5: 6:15-8:45, 6: 550}, {0: 500.205, 1: BUSINESS LAW I, 2: 3, 3: 8791, 4: W, 5: 6:15-8:45, 6: 550}, {0: 500.206, 1: BUSINESS LAW II, 2: 3, 3: 8791, 4: M, 5: 6:15-8:45, 6: 550}, {0: 550.620, 1: PROBABILITY THEORY I, 2: 3, 3: 2738, 4: MTW, 5: 2, 6: 550}, {0: 550.626, 1: STOCHASTIC PROCESSES II, 2: 3, 3: 8102, 4: MTW, 5: 1, 6: 550}, {0: 550.631, 1: STATISTICAL INFERENCE, 2: 3, 3: 6182, 4: MTW, 5: 3, 6: 550}, {0: 550.661, 1: FOUNDATIONS OF OPTIMIZATION, 2: 3, 3: 9823, 4: MTW, 5: 10, 6: 550}, {0: 550.671, 1: COMBINATORIAL ANALYSIS, 2: 3, 3: 8772, 4: MTW, 5: 12, 6: 550}, {0: 550.681, 1: NUMERICAL ANALYSIS, 2: 3, 3: 6541, 4: MTW, 5: 11, 6: 550}, {0: 550.721, 1: PERCOLATION THEORY, 2: 3, 3: 8122, 4: MTW, 5: 9, 6: 550}, {0: 550.750, 1: TOPICS IN OPERATIONS RESEARCH, 2: 3, 3: 9922, 4: MW, 5: 3-4:30, 6: 550}, {0: 520.137, 1: INTRODUCTION TO ECE, 2: 3, 3: 8723, 4: MTW, 5: 11, 6: 520}, {0: 520.219, 1: FIELDS, MATTER AND WAVES, 2: 3, 3: 9210, 4: MTW, 5: 3, 6: 520}, {0: 520.325, 1: INTEGRATED ELECTRONICS, 2: 3, 3: 6191, 4: MTW, 5: 3, 6: 520}, {0: 520.345, 1: ECE LABORATORY, 2: 3, 3: 1823, 4: W, 5: 2, 6: 520}, {0: 520.349, 1: MICROPROCESSOR LAB I, 2: 3, 3: 9824, 4: Th, 5: 8, 6: 520}, {0: 520.353, 1: CONTROL SYSTEMS, 2: 3, 3: 6925, 4: MTW, 5: 10, 6: 520}, {0: 520.401, 1: BASIC COMMUNICATIONS, 2: 3, 3: 6191, 4: MTW, 5: 1, 6: 520}, {0: 520.410, 1: FIBER OPTICS AND PHOTONICS, 2: 3, 3: 6191, 4: MTW, 5: 1, 6: 520}, {0: 520.419, 1: ITERATIVE ALGORITHMS, 2: 3, 3: 2119, 4: MT, 5: 4-5:15, 6: 520}, {0: 520.421, 1: INTRODUCTION TO NON-LINEAR SYSTEMS, 2: 3, 3: 7231, 4: MTW, 5: 9, 6: 520}, {0: 520.432, 1: TOPICS IN MEDICAL IMAGING SYSTEMS, 2: 3, 3: 9514, 4: TTh, 5: 8:30-10, 6: 520}, {0: 520.475, 1: PROCESSING AND RECOGNITION OF SPEECH, 2: 3, 3: 6330, 4: TW, 5: 2-3:30, 6: 520}, {0: 520.490, 1: ANALOG AND DIGITAL VLSI SYSTEMS, 2: 3, 3: 8722, 4: ThF, 5: 10:30-12, 6: 520}, {0: 520.605, 1: SOLID STATE PHYSICS, 2: 3, 3: 9379, 4: Tu, 5: 1-4, 6: 520}, {0: 520.609, 1: NONLINEAR TECHNICAL IMAGE PROCESSING, 2: 3, 3: 7134, 4: Th, 5: 1-4, 6: 520}, {0: 520.651, 1: RANDOM SIGNAL ANALYSIS, 2: 3, 3: 9514, 4: ThF, 5: 10:30-12, 6: 520}, {0: 050.102, 1: LANGUAGE AND MIND, 2: 3, 3: 4432, 4: MTW, 5: 10, 6: 50}, {0: 050.109, 1: MIND, BRAIN, COMPUTERS, 2: 3, 3: 6910, 4: MW, 5: 2-3:15, 6: 50}, {0: 050.325, 1: SOUND STRUCTURES IN NATURAL LANGUAGE, 2: 3, 3: 4432, 4: T, 5: 10-12, 6: 50}, {0: 050.370, 1: FORMAL METHODS IN COGNITIVE SCIENCE, 2: 3, 3: 6910, 4: MW, 5: 11:30, 6: 50}, {0: 050.381, 1: LANGUAGE DEVELOPMENT, 2: 3, 3: 8989, 4: T, 5: 1-3, 6: 50}, {0: 050.427, 1: THE HISTORY OF ROMANCE LANGUAGES, 2: 3, 3: 4432, 4: W, 5: 1-3, 6: 50}, {0: 050.670, 1: FORMAL METHODS IN COGNITIVE SCIENCE, 2: 3, 3: 4432, 4: MW, 5: 11:30-12:45, 6: 50}, {0: 050.821, 1: COMP. MODELS OF SENTENCE PROCESSING, 2: 3, 3: 5718, 4: M, 5: 1-4, 6: 50}, {0: 550.111, 1: STATISTICAL ANALYSIS, 2: 4, 3: 2311, 4: MTW, 5: 12, 6: 550}, {0: 550.171, 1: DISCRETE MATHEMATICS, 2: 4, 3: 8772, 4: MTW, 5: 11, 6: 550}, {0: 550.291, 1: LINEAR ALGEBRA AND DIFFERENTIAL EQNS, 2: 4, 3: 6541, 4: MTW, 5: 9, 6: 550}, {0: 550.310, 1: PROBABILITY AND STATISTICS, 2: 4, 3: 8102, 4: MTW, 5: 10, 6: 550}, {0: 550.361, 1: INTRODUCTION TO OPTIMIZATION, 2: 4, 3: 2881, 4: MTW, 5: 2, 6: 550}, {0: 550.413, 1: APPLIED STATISTICS AND DATA ANALYSIS, 2: 4, 3: 1177, 4: MTW, 5: 11, 6: 550}, {0: 550.420, 1: INTRODUCTION TO PROBABILITY, 2: 4, 3: 2738, 4: MTW, 5: 1, 6: 550}, {0: 550.471, 1: COMBINATORIAL ANALYSIS, 2: 4, 3: 8772, 4: MTW, 5: 12, 6: 550}, {0: 520.213, 1: CIRCUITS, 2: 4, 3: 9210, 4: MTW, 5: 2, 6: 520}, {0: 520.435, 1: DIGITAL SIGNAL PROCESSING, 2: 4, 3: 8118, 4: MTW, 5: 11, 6: 520}, {0: 520.603, 1: ELECTROMAGNETIC WAVES, 2: 4, 3: 9210, 4: Th, 5: 1-4:30, 6: 520}, {0: 050.203, 1: COGNITIVE NEUROSCIENCE, 2: 4, 3: 9011, 4: MT, 5: 3:30-4:45, 6: 50}]\", linq_results: \"[{0: 600.103, 1: INTRODUCTION TO COMPUTER SCIENCE, 2: 1, 3: 4230, 4: Th, 5: 4, 6: 600}, {0: 600.303, 1: SUPERCOMPUTING, 2: 1, 3: 9826, 4: W, 5: 4-6:20, 6: 600}, {0: 600.601, 1: COMPUTER SCIENCE SEMINAR, 2: 1, 3: 6191, 4: ThF, 5: 10:30-12, 6: 600}, {0: 50.802, 1: RESEARCH SEMINAR IN COGNITIVE PROCESSES, 2: 1, 3: 9011, 4: W, 5: 1-3, 6: 50}, {0: 550.790, 1: TOPICS IN APPLIED MATH, 2: 2, 3: 2881, 4: MT, 5: 4:30-6, 6: 550}, {0: 600.101, 1: COMPUTER LITERACY, 2: 3, 3: 6112, 4: MTW, 5: 3, 6: 600}, {0: 600.107, 1: INTRO TO PROGRAMMING IN JAVA, 2: 3, 3: 1193, 4: MTW, 5: 3, 6: 600}, {0: 600.109, 1: INTRO TO PROGRAMMING IN C/C++, 2: 3, 3: 4230, 4: MTW, 5: 12, 6: 600}, {0: 600.113, 1: EXPLORING THE INTERNET, 2: 3, 3: 6112, 4: MTW, 5: 4, 6: 600}, {0: 600.121, 1: JAVA PROGRAMMING, 2: 3, 3: 6112, 4: ThF, 5: 10:30-12, 6: 600}, {0: 600.211, 1: UNIX SYSTEMS PROGRAMMING, 2: 3, 3: 6112, 4: ThF, 5: 1-2:15, 6: 600}, {0: 600.227, 1: DATA STRUCTURES in JAVA, 2: 3, 3: 1121, 4: MTW, 5: 9, 6: 600}, {0: 600.232, 1: MULTIMEDIA COMPUTING, 2: 3, 3: 9826, 4: MW, 5: 1-2:30, 6: 600}, {0: 600.271, 1: COMPUTATIONAL MODELS, 2: 3, 3: 9172, 4: MTW, 5: 1, 6: 600}, {0: 600.315, 1: DATABASE SYSTEMS, 2: 3, 3: 2192, 4: ThF, 5: 2:30-4, 6: 600}, {0: 600.333, 1: COMPUTER SYSTEM FUNDAMENTALS, 2: 3, 3: 1148, 4: MTW, 5: 8, 6: 600}, {0: 600.337, 1: DISTRIBUTED SYSTEMS, 2: 3, 3: 8918, 4: M, 5: 3, 6: 600}, {0: 600.363, 1: INTRODUCTION TO ALGORITHMS, 2: 3, 3: 7712, 4: MTW, 5: 9, 6: 600}, {0: 600.415, 1: DATABASE SYSTEMS, 2: 3, 3: 2192, 4: ThF, 5: 2:30-4, 6: 600}, {0: 600.433, 1: COMPUTER SYSTEMS, 2: 3, 3: 1148, 4: MTW, 5: 8, 6: 600}, {0: 600.437, 1: DISTRIBUTED SYSTEMS, 2: 3, 3: 8918, 4: M, 5: 3, 6: 600}, {0: 600.445, 1: QUANTITATIVE MEDICAL COMPUTING, 2: 3, 3: 7723, 4: ThF, 5: 1-2:15, 6: 600}, {0: 600.461, 1: COMPUTER VISION, 2: 3, 3: 8114, 4: MTW, 5: 1, 6: 600}, {0: 600.463, 1: ALGORITHMS I, 2: 3, 3: 7712, 4: MTW, 5: 9, 6: 600}, {0: 600.465, 1: INTRO TO NATURAL LANGUAGE PROCESSING, 2: 3, 3: 7792, 4: MTW, 5: 2, 6: 600}, {0: 600.509, 1: COMPUTER SCIENCE INTERNSHIP, 2: 3, 3: 1121, 4: M, 5: 1, 6: 600}, {0: 600.657, 1: HIGH PERFORMANCE GRAPHICS AND MODELING, 2: 3, 3: 8423, 4: M, 5: 4-5:30, 6: 600}, {0: 600.787, 1: SEMINAR ON COMPUTATIONAL GEOMETRY, 2: 3, 3: 1121, 4: Th, 5: 2, 6: 600}, {0: 500.203, 1: ACCOUNTING I, 2: 3, 3: 9823, 4: T, 5: 6:15-8:45, 6: 550}, {0: 500.204, 1: ACCOUNTING II, 2: 3, 3: 9823, 4: Th, 5: 6:15-8:45, 6: 550}, {0: 500.205, 1: BUSINESS LAW I, 2: 3, 3: 8791, 4: W, 5: 6:15-8:45, 6: 550}, {0: 500.206, 1: BUSINESS LAW II, 2: 3, 3: 8791, 4: M, 5: 6:15-8:45, 6: 550}, {0: 550.620, 1: PROBABILITY THEORY I, 2: 3, 3: 2738, 4: MTW, 5: 2, 6: 550}, {0: 550.626, 1: STOCHASTIC PROCESSES II, 2: 3, 3: 8102, 4: MTW, 5: 1, 6: 550}, {0: 550.631, 1: STATISTICAL INFERENCE, 2: 3, 3: 6182, 4: MTW, 5: 3, 6: 550}, {0: 550.661, 1: FOUNDATIONS OF OPTIMIZATION, 2: 3, 3: 9823, 4: MTW, 5: 10, 6: 550}, {0: 550.671, 1: COMBINATORIAL ANALYSIS, 2: 3, 3: 8772, 4: MTW, 5: 12, 6: 550}, {0: 550.681, 1: NUMERICAL ANALYSIS, 2: 3, 3: 6541, 4: MTW, 5: 11, 6: 550}, {0: 550.721, 1: PERCOLATION THEORY, 2: 3, 3: 8122, 4: MTW, 5: 9, 6: 550}, {0: 550.750, 1: TOPICS IN OPERATIONS RESEARCH, 2: 3, 3: 9922, 4: MW, 5: 3-4:30, 6: 550}, {0: 520.137, 1: INTRODUCTION TO ECE, 2: 3, 3: 8723, 4: MTW, 5: 11, 6: 520}, {0: 520.219, 1: FIELDS, MATTER AND WAVES, 2: 3, 3: 9210, 4: MTW, 5: 3, 6: 520}, {0: 520.325, 1: INTEGRATED ELECTRONICS, 2: 3, 3: 6191, 4: MTW, 5: 3, 6: 520}, {0: 520.345, 1: ECE LABORATORY, 2: 3, 3: 1823, 4: W, 5: 2, 6: 520}, {0: 520.349, 1: MICROPROCESSOR LAB I, 2: 3, 3: 9824, 4: Th, 5: 8, 6: 520}, {0: 520.353, 1: CONTROL SYSTEMS, 2: 3, 3: 6925, 4: MTW, 5: 10, 6: 520}, {0: 520.401, 1: BASIC COMMUNICATIONS, 2: 3, 3: 6191, 4: MTW, 5: 1, 6: 520}, {0: 520.410, 1: FIBER OPTICS AND PHOTONICS, 2: 3, 3: 6191, 4: MTW, 5: 1, 6: 520}, {0: 520.419, 1: ITERATIVE ALGORITHMS, 2: 3, 3: 2119, 4: MT, 5: 4-5:15, 6: 520}, {0: 520.421, 1: INTRODUCTION TO NON-LINEAR SYSTEMS, 2: 3, 3: 7231, 4: MTW, 5: 9, 6: 520}, {0: 520.432, 1: TOPICS IN MEDICAL IMAGING SYSTEMS, 2: 3, 3: 9514, 4: TTh, 5: 8:30-10, 6: 520}, {0: 520.475, 1: PROCESSING AND RECOGNITION OF SPEECH, 2: 3, 3: 6330, 4: TW, 5: 2-3:30, 6: 520}, {0: 520.490, 1: ANALOG AND DIGITAL VLSI SYSTEMS, 2: 3, 3: 8722, 4: ThF, 5: 10:30-12, 6: 520}, {0: 520.605, 1: SOLID STATE PHYSICS, 2: 3, 3: 9379, 4: Tu, 5: 1-4, 6: 520}, {0: 520.609, 1: NONLINEAR TECHNICAL IMAGE PROCESSING, 2: 3, 3: 7134, 4: Th, 5: 1-4, 6: 520}, {0: 520.651, 1: RANDOM SIGNAL ANALYSIS, 2: 3, 3: 9514, 4: ThF, 5: 10:30-12, 6: 520}, {0: 50.102, 1: LANGUAGE AND MIND, 2: 3, 3: 4432, 4: MTW, 5: 10, 6: 50}, {0: 50.109, 1: MIND, BRAIN, COMPUTERS, 2: 3, 3: 6910, 4: MW, 5: 2-3:15, 6: 50}, {0: 50.325, 1: SOUND STRUCTURES IN NATURAL LANGUAGE, 2: 3, 3: 4432, 4: T, 5: 10-12, 6: 50}, {0: 50.370, 1: FORMAL METHODS IN COGNITIVE SCIENCE, 2: 3, 3: 6910, 4: MW, 5: 11:30, 6: 50}, {0: 50.381, 1: LANGUAGE DEVELOPMENT, 2: 3, 3: 8989, 4: T, 5: 1-3, 6: 50}, {0: 50.427, 1: THE HISTORY OF ROMANCE LANGUAGES, 2: 3, 3: 4432, 4: W, 5: 1-3, 6: 50}, {0: 50.670, 1: FORMAL METHODS IN COGNITIVE SCIENCE, 2: 3, 3: 4432, 4: MW, 5: 11:30-12:45, 6: 50}, {0: 50.821, 1: COMP. MODELS OF SENTENCE PROCESSING, 2: 3, 3: 5718, 4: M, 5: 1-4, 6: 50}, {0: 550.111, 1: STATISTICAL ANALYSIS, 2: 4, 3: 2311, 4: MTW, 5: 12, 6: 550}, {0: 550.171, 1: DISCRETE MATHEMATICS, 2: 4, 3: 8772, 4: MTW, 5: 11, 6: 550}, {0: 550.291, 1: LINEAR ALGEBRA AND DIFFERENTIAL EQNS, 2: 4, 3: 6541, 4: MTW, 5: 9, 6: 550}, {0: 550.310, 1: PROBABILITY AND STATISTICS, 2: 4, 3: 8102, 4: MTW, 5: 10, 6: 550}, {0: 550.361, 1: INTRODUCTION TO OPTIMIZATION, 2: 4, 3: 2881, 4: MTW, 5: 2, 6: 550}, {0: 550.413, 1: APPLIED STATISTICS AND DATA ANALYSIS, 2: 4, 3: 1177, 4: MTW, 5: 11, 6: 550}, {0: 550.420, 1: INTRODUCTION TO PROBABILITY, 2: 4, 3: 2738, 4: MTW, 5: 1, 6: 550}, {0: 550.471, 1: COMBINATORIAL ANALYSIS, 2: 4, 3: 8772, 4: MTW, 5: 12, 6: 550}, {0: 520.213, 1: CIRCUITS, 2: 4, 3: 9210, 4: MTW, 5: 2, 6: 520}, {0: 520.435, 1: DIGITAL SIGNAL PROCESSING, 2: 4, 3: 8118, 4: MTW, 5: 11, 6: 520}, {0: 520.603, 1: ELECTROMAGNETIC WAVES, 2: 4, 3: 9210, 4: Th, 5: 1-4:30, 6: 520}, {0: 50.203, 1: COGNITIVE NEUROSCIENCE, 2: 4, 3: 9011, 4: MT, 5: 3:30-4:45, 6: 50}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0c3e9b1fb1cd6ebc493377ee0b5e804e70f4c42d47d1edcc6be557b776e3036a",
    "sql": "SELECT DISTINCT building FROM classroom WHERE capacity > 50",
    "linq": "context.Classrooms.Where(row => row.Capacity > 50).Select(row => new { row.Building }).Distinct().ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e5ac32269dc67582b86f78bc9e3a7f00b1559365aff4569e42b988fc6b3a2cf2",
    "sql": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'",
    "linq": "context.Classrooms.Where(row => row.Building != \"Lamberton\").Count();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "915ae220669eb5c4a5332322d51d30b13d011a30e557ce44d17beff0af9f81ff",
    "sql": "SELECT dept_name , building FROM department WHERE budget > (SELECT avg(budget) FROM department)",
    "linq": "context.Departments.Where(row => row.Budget > context.Departments.Select(row => (double) row.Budget).Average()).Select(row => new { row.DeptName, row.Building }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "147c1d0a1789f1562a872366f96071fde8f27ee947411f0b82187c7fb9fb211d",
    "sql": "SELECT building , room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
    "linq": "context.Classrooms.Where(row => row.Capacity >= 50 && row.Capacity <= 100).Select(row => new { row.Building, row.RoomNumber }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4bee8c1823e4f3d68a35a5dc0d90300ec405cf4fd7e677bb92c30a4f3a7c3041",
    "sql": "SELECT dept_name , building FROM department ORDER BY budget DESC LIMIT 1",
    "linq": "context.Departments.OrderByDescending(row => row.Budget).Select(row => new { row.DeptName, row.Building }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6def8a0231278a9d8b7a2cc8607d4361597edb9f88c33d5a65d57e89b7d2b373",
    "sql": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1",
    "linq": "context.Students.Where(row => row.DeptName == \"History\").OrderByDescending(row => row.TotCred).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dd5c8aef375beb3f22857ca62e0be8e81f2c7b55de6d210a5607b68e3e732176",
    "sql": "SELECT count(*) FROM classroom WHERE building = 'Lamberton'",
    "linq": "context.Classrooms.Where(row => row.Building == \"Lamberton\").Count();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ac007f5116e60a35627a06c9adba7ffdc5941679e618fed97b174513473883ce",
    "sql": "SELECT count(DISTINCT s_id) FROM advisor",
    "linq": "context.Advisors.Select(row => row.SId).Distinct().Count();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a9010a594e82e6a15a47af4f8ef4e60a8613f80287fcd9a0e97658e364a8e733",
    "sql": "SELECT count(DISTINCT dept_name) FROM course",
    "linq": "context.Courses.Select(row => row.DeptName).Distinct().Count();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9dbef8fd77fdef09c1c429fb7346199e97e5d2fb6c2d8b1f9abaafeb9160b96e",
    "sql": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name = 'Physics'",
    "linq": "context.Courses.Where(row => row.DeptName == \"Physics\").Select(row => row.CourseId).Distinct().Count();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fca690128f7b0d5609dc11c14528d59e53b129e2141014aeed2c0354734b9bec",
    "sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count(*) = 2",
    "linq": "context.Courses.Join(context.Prereq, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CourseId }).Where(group => group.Count() == 2).Select(group => new { group.First().T1.Title }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,41): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.55",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cfca51d8894a85e348c094952ee74ff482e7558f6cfa3a4cab7573ee0012e1a4",
    "sql": "SELECT T1.title , T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count(*) > 1",
    "linq": "context.Courses.Join(context.Prereq, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CourseId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Title, group.First().T1.Credits, group.First().T1.DeptName }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,41): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.39",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0ad140939f814434a2f42adcac853a1227aaf6fc2f237b669e428b7dd8905cef",
    "sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
    "linq": "context.Courses.Where(row => !context.Prereq.Select(row => row.CourseId).Contains(row.CourseId)).Count();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,50): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "46170d7c949093a97ac524f8830fd718e587e104c48f77497a77636c2a967560",
    "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
    "linq": "context.Courses.Where(row => !context.Prereq.Select(row => row.CourseId).Contains(row.CourseId)).Select(row => new { row.Title }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,50): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.47",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8e45751b0d030a6baff5a1bbaf75849efe32931b626a15c6ffaa266145322976",
    "sql": "SELECT COUNT (DISTINCT id) FROM teaches",
    "linq": "context.Teach.Select(row => row.Id).Distinct().Count();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "deae38430b4939919075da1ae2a52eb1c3c2d3267e012e61b0c80741ecd42605",
    "sql": "SELECT sum(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'",
    "linq": "context.Departments.Where(row => row.DeptName == \"Marketing\" || row.DeptName == \"Finance\").Select(row => row.Budget).Sum();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3e9607a3b17eebadb124781f985bb339f49da91240b37dcd57a1dd768bf86ca9",
    "sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'",
    "linq": "context.Instructors.Where(row => EF.Functions.Like(row.Name, \"%Soisalon%\")).Select(row => new { row.DeptName }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "992230ba0408d0ad7413e08e51e4f9485ba76fce644e1967530eb8919ec94236",
    "sql": "SELECT count(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50",
    "linq": "context.Classrooms.Where(row => row.Building == \"Lamberton\" && row.Capacity < 50).Count();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "22518e92d2502ced015bd3afc5e2a97e3f5f532f72e2e11ece891aa980507093",
    "sql": "SELECT dept_name , budget FROM department WHERE budget > (SELECT avg(budget) FROM department)",
    "linq": "context.Departments.Where(row => row.Budget > context.Departments.Select(row => (double) row.Budget).Average()).Select(row => new { row.DeptName, row.Budget }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "413eeaca9cf1b29f1adab634ee6327e43062cd2fe1e3926780db0ce598885085",
    "sql": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1",
    "linq": "context.Instructors.Where(row => row.DeptName == \"Statistics\").OrderBy(row => row.Salary).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4e7df61b7c7b55c8f5ae7dd4881bc76ff05658c7934f46c6ddde71fa15d3daea",
    "sql": "SELECT title FROM course WHERE dept_name = 'Statistics' INTERSECT SELECT title FROM course WHERE dept_name = 'Psychology'",
    "linq": "context.Courses.Where(row => row.DeptName == \"Statistics\").Select(row => row.Title).Intersect(context.Courses.Where(row => row.DeptName == \"Psychology\").Select(row => row.Title)).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a06a24f60b1de893696d518b14476bd39bb6ff2f951b7b8d85b3343c103968d3",
    "sql": "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'",
    "linq": "context.Courses.Where(row => row.DeptName == \"Statistics\").Select(row => row.Title).Except(context.Courses.Where(row => row.DeptName == \"Psychology\").Select(row => row.Title)).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2fdb5282fed07740c5120cfc4bc99536ff7ecb56f1fcd253e7f291f3e9854fba",
    "sql": "SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010",
    "linq": "context.Teach.Where(row => row.Semester == \"Fall\" && row.Year == 2009).Select(row => row.Id).Except(context.Teach.Where(row => row.Semester == \"Spring\" && row.Year == 2010).Select(row => row.Id)).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,120): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.33",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9e24f6b96c04347caf5e209ec3f821cffb40b70739c3194a9adb1ae9dc975306",
    "sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE YEAR = 2009 OR YEAR = 2010",
    "linq": "context.Students.Join(context.Takes, T1 => T1.Id, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2009 || row.T2.Year == 2010).Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5b75efab7d6edc7c9b3ca490e8fb73734de6c27c4c25f2c5c3f1c6eb8b6b99ee",
    "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
    "linq": "context.Courses.GroupBy(row => new { row.DeptName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DeptName }).Take(3).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5bc3ab7a6df0857642fc3dba683bf6025e070f49b5444626a7ba5acbd238f389",
    "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
    "linq": "context.Courses.GroupBy(row => new { row.DeptName }).OrderByDescending(group => group.Sum(row => row.Credits)).Select(group => new { group.Key.DeptName }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9739f490312a643365f79a257f48975e90ab49391ee0fc17b4880254ad9945de",
    "sql": "SELECT title FROM course ORDER BY title , credits",
    "linq": "context.Courses.OrderBy(row => row.Title).ThenBy(row => row.Credits).Select(row => new { row.Title }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "19a42831c2be5a77066b3f12a0ba6c9367e0db6f049b864c24f154a4d3bbae77",
    "sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
    "linq": "context.Departments.OrderBy(row => row.Budget).Select(row => new { row.DeptName }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6d557f036fd9ba468da7c0bbc5de368c43e54abcb62fc36f778227a362d5543d",
    "sql": "SELECT dept_name , building FROM department ORDER BY budget DESC",
    "linq": "context.Departments.OrderByDescending(row => row.Budget).Select(row => new { row.DeptName, row.Building }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "448df4f8f87ba5c5c25cc36dcec24fb608a58038946e858cd9ff1d3286eab9f0",
    "sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
    "linq": "context.Instructors.OrderByDescending(row => row.Salary).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8803521c5913cb0272f37b93d56c59a757f07bdd44f175ac7f9fcaca565ce1b6",
    "sql": "SELECT * FROM instructor ORDER BY salary",
    "linq": "context.Instructors.OrderBy(row => row.Salary).Select(row => new { row.Id, row.Name, row.DeptName, row.Salary }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "04def9c684183951e98b79f8a249a4059c3004695fa9a96b7318ec092c1a2754",
    "sql": "SELECT name , dept_name FROM student ORDER BY tot_cred",
    "linq": "context.Students.OrderBy(row => row.TotCred).Select(row => new { row.Name, row.DeptName }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "26a0b1001451109714c3672f342429fe89e15510b4176365f78408317a701fe0",
    "sql": "SELECT T1.title , T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 ORDER BY T1.title",
    "linq": "context.Courses.Join(context.Teach, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Join(context.Instructors, joined => joined.T2.Id, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Year == 2008).OrderBy(row => row.T1.Title).Select(row => new { row.T1.Title, row.T3.Name }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,41): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.30",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a3c465dc3cbb63651b4d356fd010f63c81a7142d1c8999e91c19cde88bb8360a",
    "sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING count(*) > 1",
    "linq": "context.Instructors.Join(context.Advisors, T1 => T1.Id, T2 => T2.IId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.IId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6fa56e96ebc1e094a571e1ecfb5a6afeecab6ec861de21930edb82c9f6ffb593",
    "sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING count(*) > 1",
    "linq": "context.Students.Join(context.Advisors, T1 => T1.Id, T2 => T2.SId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.SId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "36c8216de045711df51beb5f21dfc7bb4c3f2642efdc64c7071a737d82e33ad3",
    "sql": "SELECT count(*) , building FROM classroom WHERE capacity > 50 GROUP BY building",
    "linq": "context.Classrooms.Where(row => row.Capacity > 50).GroupBy(row => new { row.Building }).Select(group => new { Count = group.Count(), group.Key.Building }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7f7e378c17ef056d0c7fefee30ef56cb149b1e51f8fc2327c40792d57831b2c1",
    "sql": "SELECT max(capacity) , avg(capacity) , building FROM classroom GROUP BY building",
    "linq": "context.Classrooms.GroupBy(row => new { row.Building }).Select(group => new { MaxCapacity = group.Select(row => row.Capacity).Max(), AverageCapacity = group.Select(row => row.Capacity).Average(), group.Key.Building }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8e7d5d9e63c6273c5406380db23e4d5c149d862b3fd7d6888932f8402d70a81b",
    "sql": "SELECT title FROM course GROUP BY title HAVING count(*) > 1",
    "linq": "context.Courses.GroupBy(row => new { row.Title }).Where(group => group.Count() > 1).Select(group => new { group.Key.Title }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "84873b15a847c0019ee185230d2b41e784a719a8e571a9e0d7b41507c2da2a42",
    "sql": "SELECT sum(credits) , dept_name FROM course GROUP BY dept_name",
    "linq": "context.Courses.GroupBy(row => new { row.DeptName }).Select(group => new { SumCredits = group.Select(row => row.Credits).Sum(), group.Key.DeptName }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ce74b5c8fbead592643cfbe23390ed32b6de058d0194fabdee09e753e7e14ef4",
    "sql": "SELECT min(salary) , dept_name FROM instructor GROUP BY dept_name HAVING avg(salary) > (SELECT avg(salary) FROM instructor)",
    "linq": "context.Instructors.GroupBy(row => new { row.DeptName }).Where(group => group.Average(row => row.Salary) > context.Instructors.Select(row => (double) row.Salary).Average()).Select(group => new { MinSalary = group.Select(row => row.Salary).Min(), group.Key.DeptName }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fcb1df603d26e389150b57809a80a7423dca2beb3f5f15da27bfc5a246bb834f",
    "sql": "SELECT count(*) , semester , YEAR FROM SECTION GROUP BY semester , YEAR",
    "linq": "context.Sections.GroupBy(row => new { row.Semester, row.Year }).Select(group => new { Count = group.Count(), group.Key.Semester, group.Key.Year }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "53cc8c89c2d957ddd736b0cfd308099cbe2ab8aca64d14ecd3bdeeb8264fcca2",
    "sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Sections.GroupBy(row => new { row.Year }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Year }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "15ffa7cfe0dc44d41314af68a850ee584c96ad907448fa5b50fa9db8622af3be",
    "sql": "SELECT semester , YEAR FROM SECTION GROUP BY semester , YEAR ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Sections.GroupBy(row => new { row.Semester, row.Year }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Semester, group.Key.Year }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e37766a0360349b8a98984dec07ccf28748cd51af22c974b77de5dfaa1045fc",
    "sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Students.GroupBy(row => new { row.DeptName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DeptName }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "45e5cfb58f3c8ea96c97386fe1d87f02466827b13e01fc613b2cbc52ae88dc21",
    "sql": "SELECT count(*) , dept_name FROM student GROUP BY dept_name",
    "linq": "context.Students.GroupBy(row => new { row.DeptName }).Select(group => new { Count = group.Count(), group.Key.DeptName }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "719291f8a442fa180aa2d48c133d57f35924889f50192a7222968d29812e88fe",
    "sql": "SELECT semester , YEAR FROM takes GROUP BY semester , YEAR ORDER BY count(*) LIMIT 1",
    "linq": "context.Takes.GroupBy(row => new { row.Semester, row.Year }).OrderBy(group => group.Count()).Select(group => new { group.Key.Semester, group.Key.Year }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a7af0a3f7e617a80ed6c99572e6c66d0aa0629bc460bf8eb6ca0dfccca4f77fc",
    "sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'History'",
    "linq": "context.Advisors.Join(context.Students, T1 => T1.SId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DeptName == \"History\").Select(row => new { row.T1.IId }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f1da915edc918b04149dfa327341225625b26e04c83a23fcdee58414eb640e70",
    "sql": "SELECT T2.name , T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'History'",
    "linq": "context.Advisors.Join(context.Instructors, T1 => T1.IId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.SId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\").Select(row => new { row.T2.Name, row.T2.Salary }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f16d4135ec80a68d152b72136cd9a573186af759c50fd7abdfe05bc67f8cb58a",
    "sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
    "linq": "context.Courses.Select(row => row.CourseId).Except(context.Prereq.Select(row => row.CourseId)).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,71): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.53",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f50d467681371a9abcdc263464fe722d09f82393df921d5ff91abffc7899608a",
    "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')",
    "linq": "context.Courses.Where(row => context.Prereq.Join(context.Courses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"International Finance\").Select(row => row.T1.PrereqId).Contains(row.CourseId)).Select(row => new { row.Title }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,49): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.50",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f6c91607e8caaf7b81e7548a9014606f6bfa95b45c4b2709be792278889ddafd",
    "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry')",
    "linq": "context.Courses.Where(row => context.Prereq.Join(context.Courses, T1 => T1.PrereqId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Differential Geometry\").Select(row => row.T1.CourseId).Contains(row.CourseId)).Select(row => new { row.Title }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,49): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.47",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d6166bbd402705720b55561b91131ab4b26af544350152e5635d4bbad262f3e1",
    "sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003)",
    "linq": "context.Students.Where(row => context.Takes.Where(row => row.Semester == \"Fall\" && row.Year == 2003).Select(row => row.Id).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4ed3d4995c44cf9aa6f2c56c88eba0df045153028c6baebb9c1527053f6e475e",
    "sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010",
    "linq": "context.Courses.Join(context.Sections, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Building == \"Chandler\" && row.T2.Semester == \"Fall\" && row.T2.Year == 2010).Select(row => new { row.T1.Title }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "77542370256de43cb7573127a4a8a3694f30d897c40c5c0ff1f0ce4d75dafab1",
    "sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'",
    "linq": "context.Instructors.Join(context.Teach, T1 => T1.Id, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T2.CourseId, T3 => T3.CourseId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Title == \"C Programming\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,45): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.55",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dee556f243cf8f095398b6d6ac2fe2891c16ec827c96f86e98f3d613a529ab2d",
    "sql": "SELECT T2.name , T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math'",
    "linq": "context.Advisors.Join(context.Instructors, T1 => T1.IId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.SId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"Math\").Select(row => new { row.T2.Name, row.T2.Salary }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bb0e9dba8711e150f7207651ac9e02f865a04f0e050a16232d2f0c3c72ae431a",
    "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math' ORDER BY T3.tot_cred",
    "linq": "context.Advisors.Join(context.Instructors, T1 => T1.IId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.SId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"Math\").OrderBy(row => row.T3.TotCred).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d43491d4ae266da1d0f703fa55f2f3b2bfd1ccc13ceb40a06f58d417b703e52b",
    "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing')",
    "linq": "context.Courses.Where(row => context.Prereq.Join(context.Courses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Mobile Computing\").Select(row => row.T1.PrereqId).Contains(row.CourseId)).Select(row => new { row.Title }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,49): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.42",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a737cb67da1f22509c07a7b40c84c49438b56fc779145e0a1504ffbda19f9334",
    "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
    "linq": "context.Advisors.Join(context.Instructors, T1 => T1.IId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.SId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T3.TotCred).Select(row => new { row.T2.Name }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0ecb2f897a43f71650e1922e399fc3bf7d75911904e40e8c7a6e9743830a9e95",
    "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
    "linq": "context.Instructors.Where(row => !context.Teach.Select(row => row.Id).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,54): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.40",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "71adc5042cedf4ab46a1726150a7c199ee9af5c2e5bd9d05ead14510ec5b694b",
    "sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
    "linq": "context.Instructors.Select(row => row.Id).Except(context.Teach.Select(row => row.Id)).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,69): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.39",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2d687576af67bd2f7e314302749160ff10e7b2b36e298ac5e95f56a1acc2c354",
    "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester = 'Spring')",
    "linq": "context.Instructors.Where(row => !context.Teach.Where(row => row.Semester == \"Spring\").Select(row => row.Id).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,54): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.45",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a6906a6af4062a9ac03400d98ec7b7dafb09ad8d246e520184403ef9bcc3718c",
    "sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
    "linq": "context.Instructors.GroupBy(row => new { row.DeptName }).OrderByDescending(group => group.Average(row => row.Salary)).Select(group => new { group.Key.DeptName }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7012c45953c72936db468fcd24c8a346749cb36aa8391e361144f9f8f3f09dd6",
    "sql": "SELECT avg(T1.salary) , count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1",
    "linq": "context.Instructors.Join(context.Departments, T1 => T1.DeptName, T2 => T2.DeptName, (T1, T2) => new { T1, T2 }).GroupBy(row => 1).OrderByDescending(row => row.T2.Budget).Select(group => new { AverageSalary = group.Select(row => row.T1.Salary).Average(), Count = group.Count() }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,171): error CS1061: 'IGrouping<int, <anonymous type: Instructor T1, Department T2>>' does not contain a definition for 'T2' and no accessible extension method 'T2' accepting a first argument of type 'IGrouping<int, <anonymous type: Instructor T1, Department T2>>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.36",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b83717b6fa3052910f43ce1fd29b2b251f710346034cb5cb8ed6d7595bb72c97",
    "sql": "SELECT T3.title , T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.capacity = (SELECT max(capacity) FROM classroom)",
    "linq": "context.Classrooms.Join(context.Sections, T1 => new { Pair1 = T1.Building, Pair2 = T1.RoomNumber }, T2 => new { Pair1 = T2.Building, Pair2 = T2.RoomNumber }, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T2.CourseId, T3 => T3.CourseId, (joined, T3) => new { joined.T2, T3 }).Where(row => row.T1.Capacity == context.Classrooms.Select(row => row.Capacity).Max()).Select(row => new { row.T3.Title, row.T3.Credits }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,325): error CS1061: '<anonymous type: Section T2, Course T3>' does not contain a definition for 'T1' and no accessible extension method 'T1' accepting a first argument of type '<anonymous type: Section T2, Course T3>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.35",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "85a9fbb678f01808150f9f12256d724148731a00f13b2e00e9086d4b0ebd0ee2",
    "sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = 'Biology')",
    "linq": "context.Students.Where(row => !context.Takes.Join(context.Courses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DeptName == \"Biology\").Select(row => row.T1.Id).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ff8d75ea2c275bdf99536942008fb6962f0f9c294df785d7f5c720774b206bcc",
    "sql": "SELECT count(DISTINCT T2.id) , count(DISTINCT T3.id) , T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name GROUP BY T3.dept_name",
    "linq": "context.Departments.Join(context.Students, T1 => T1.DeptName, T2 => T2.DeptName, (T1, T2) => new { T1, T2 }).Join(context.Instructors, joined => joined.T1.DeptName, T3 => T3.DeptName, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.DeptName }).Select(group => new { CountDistinctIdT2 = group.Select(row => row.T2.Id).Distinct().Count(), CountDistinctIdT3 = group.Select(row => row.T3.Id).Distinct().Count(), group.Key.DeptName }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "44995d7805daa1e30a723c76b7bca013e7484e38451edc076fc7bb9a019a755a",
    "sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance')",
    "linq": "context.Students.Join(context.Takes, T1 => T1.Id, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => context.Courses.Join(context.Prereq, T3 => T3.CourseId, T4 => T4.CourseId, (T3, T4) => new { T3, T4 }).Where(row => row.T3.Title == \"International Finance\").Select(row => row.T4.PrereqId).Contains(row.T2.CourseId)).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,145): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.54",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "99da5d0b7a16107e7d3c12bbbb13a31e962c9c9cd3913d34ccec746148892e6c",
    "sql": "SELECT name , salary FROM instructor WHERE salary < (SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics')",
    "linq": "context.Instructors.Where(row => row.Salary < context.Instructors.Where(row => row.DeptName == \"Physics\").Select(row => (double) row.Salary).Average()).Select(row => new { row.Name, row.Salary }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0962f9682c7a83b5530ef12ffe2494fa1e5c020b83c7fa8be365cbfc36b8a2e7",
    "sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id WHERE T1.dept_name = 'Statistics'",
    "linq": "context.Courses.Join(context.Takes, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.Id, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.DeptName == \"Statistics\").Select(row => new { row.T3.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1502b7b45c81e26bfc60e401a171609597ef9a2fc42536eb1f6d03b1040bd12c",
    "sql": "SELECT T2.building , T2.room_number , T2.semester , T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' ORDER BY T1.title",
    "linq": "context.Courses.Join(context.Sections, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DeptName == \"Psychology\").OrderBy(row => row.T1.Title).Select(row => new { row.T2.Building, row.T2.RoomNumber, row.T2.Semester, row.T2.Year }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1d6a68ba5bc0416c1de07d29cb7c7c08992809ec87fb537a7510ac2f5422af92",
    "sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'",
    "linq": "context.Instructors.Where(row => row.DeptName == \"Comp. Sci.\").Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "76d297487b14c870bcf5afcea65b8f5acc7766262313282edfd0815f72810aa5",
    "sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000",
    "linq": "context.Instructors.Where(row => row.DeptName == \"Comp. Sci.\" && row.Salary > 80000).Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "41191ae6c4c591511a0c056a4eff1cd87d5d7d00ba5d09737caa47cfdf6ee644",
    "sql": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
    "linq": "context.Instructors.Join(context.Teach, T1 => T1.Id, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name, row.T2.CourseId }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,45): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.44",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "56e7bd3381b8d70c94638a8ba34b40346db88ec9337a9b29a07b9fe799383713",
    "sql": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name = 'Art'",
    "linq": "context.Instructors.Join(context.Teach, T1 => T1.Id, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DeptName == \"Art\").Select(row => new { row.T1.Name, row.T2.CourseId }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,45): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.39",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e04c04870ff6c30494c9e2e717e2be8cf0fe48a5183b1270bfa3bffcf52adfc3",
    "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'",
    "linq": "context.Instructors.Where(row => EF.Functions.Like(row.Name, \"%dar%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "36c8d5bef71cbbc087dbc2c5e0db47c1a40417dcb72effb632244bd5a6e36b15",
    "sql": "SELECT DISTINCT name FROM instructor ORDER BY name",
    "linq": "context.Instructors.OrderBy(row => row.Name).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bc39dadea3c78fb3397813bbb152cc4b31dfdd1fbb8a2bf4eb8cc893c23ee8ed",
    "sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
    "linq": "context.Sections.Where(row => row.Semester == \"Fall\" && row.Year == 2009).Select(row => row.CourseId).Union(context.Sections.Where(row => row.Semester == \"Spring\" && row.Year == 2010).Select(row => row.CourseId)).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ae6aef36f3602d3a0ed9a6e635c8641d4427dc0bb2b88c66598d4f00c6bed4d5",
    "sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
    "linq": "context.Sections.Where(row => row.Semester == \"Fall\" && row.Year == 2009).Select(row => row.CourseId).Intersect(context.Sections.Where(row => row.Semester == \"Spring\" && row.Year == 2010).Select(row => row.CourseId)).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9753fae426326234170b4e87534151f2243dccf0178f39aed603e9fef747fa78",
    "sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
    "linq": "context.Sections.Where(row => row.Semester == \"Fall\" && row.Year == 2009).Select(row => row.CourseId).Except(context.Sections.Where(row => row.Semester == \"Spring\" && row.Year == 2010).Select(row => row.CourseId)).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7818d1a57364d05119e18ec6820646efd7311eef89326f2c9a2b1edd6ad9f594",
    "sql": "SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT max(salary) FROM instructor)",
    "linq": "context.Instructors.Where(row => row.Salary < context.Instructors.Select(row => row.Salary).Max()).Select(row => new { row.Salary }).Distinct().ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f3270811a3dc9760173ad37e403c9b63389ee87c77aec3801a2a806555f1733e",
    "sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester = 'Spring' AND YEAR = 2010",
    "linq": "context.Teach.Where(row => row.Semester == \"Spring\" && row.Year == 2010).Select(row => row.Id).Distinct().Count();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.47",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7d44ea764dad49303138d0cba5029f9a9de1ed07648294f36402ba0fd9154e0f",
    "sql": "SELECT dept_name , AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary) > 42000",
    "linq": "context.Instructors.GroupBy(row => new { row.DeptName }).Select(group => new { group.Key.DeptName, AverageSalary = group.Select(row => row.Salary).Average() }).Where(group => group.AverageSalary > 42000).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3d52bcbdc873e013a41f9d59635bb1fc830ae7a405ad79d95e3ff1c48cf27315",
    "sql": "SELECT name FROM instructor WHERE salary > (SELECT min(salary) FROM instructor WHERE dept_name = 'Biology')",
    "linq": "context.Instructors.Where(row => row.Salary > context.Instructors.Where(row => row.DeptName == \"Biology\").Select(row => row.Salary).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7956724a6767fba5d00c831567d53f271319d0303ff85355ffcc6716f69620e9",
    "sql": "SELECT name FROM instructor WHERE salary > (SELECT max(salary) FROM instructor WHERE dept_name = 'Biology')",
    "linq": "context.Instructors.Where(row => row.Salary > context.Instructors.Where(row => row.DeptName == \"Biology\").Select(row => row.Salary).Max()).Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0efc5017084d41cba094bb16b3e04724ff0ea414e911ce102844ba5d4b1c4229",
    "sql": "SELECT count(*) FROM candidate",
    "linq": "context.Candidates.Count();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fc5dcf584dac90db73622fe2040f387b09c9f396b556ac6d4cb734fe6bea686a",
    "sql": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Candidates.GroupBy(row => new { row.PollSource }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PollSource }).Take(1).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c821690fb3500d4e0662c50451a90b001b06dd82a96d543378cc2b1a31ec4f00",
    "sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
    "linq": "context.Candidates.OrderByDescending(row => row.SupportRate).Select(row => new { row.SupportRate }).Take(3).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "efb29a0ff550c7f8b75d1900d9bda6a5ac4c3453d9190e98e893ae9489d20474",
    "sql": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
    "linq": "context.Candidates.OrderBy(row => row.OpposeRate).Select(row => new { row.CandidateId }).Take(1).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cf302538105d07fb962621d889e8c8a34d327f4e3d34fe87e5ffe72e521473cb",
    "sql": "SELECT Support_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY unsure_rate",
    "linq": "context.Candidates.OrderBy(row => row.UnsureRate).Select(row => new { row.SupportRate, row.ConsiderRate, row.OpposeRate }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "722a955ca85cf7208fd37992c5831c41b2d94154238a131caacc472655a607db",
    "sql": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
    "linq": "context.Candidates.OrderByDescending(row => row.OpposeRate).Select(row => new { row.PollSource }).Take(1).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a130c602d5af22d2de82e4f831b7d6be9688fc1dc3c73f2d74f8c4a8422d09fa",
    "sql": "SELECT name FROM people ORDER BY date_of_birth",
    "linq": "context.People.OrderBy(row => row.DateOfBirth).Select(row => new { row.Name }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e459c2cbae980b0fdc3dd8129c565481da87290b0e73c8a2eba1b9aa5fdd596e",
    "sql": "SELECT avg(height) , avg(weight) FROM people WHERE sex = 'M'",
    "linq": "context.People.Where(row => row.Sex == \"M\").GroupBy(row => 1).Select(group => new { AverageHeight = group.Select(row => row.Height).Average(), AverageWeight = group.Select(row => row.Weight).Average() }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c91e4d80fd7fa159bf71ec8bdb27dca73de496a38a1725498a7b7c545f9426f2",
    "sql": "SELECT name FROM people WHERE height > 200 OR height < 190",
    "linq": "context.People.Where(row => row.Height > 200 || row.Height < 190).Select(row => new { row.Name }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "34665cde2020635dc577523c505f8d0f6733f1b49fda0770d46a0911ab9f78b1",
    "sql": "SELECT avg(weight) , min(weight) , sex FROM people GROUP BY sex",
    "linq": "context.People.GroupBy(row => new { row.Sex }).Select(group => new { AverageWeight = group.Select(row => row.Weight).Average(), MinWeight = group.Select(row => row.Weight).Min(), group.Key.Sex }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6cfa7d39786b9c045d1f62790a3494744cb7b513bfe3e59cced45da9b44dba8c",
    "sql": "SELECT t1.name , t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
    "linq": "context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t2.SupportRate).Select(row => new { row.t1.Name, row.t1.Sex }).Take(1).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "000ba4425afee582c55e103632c9e25405b6dfaac0f482ef9bfd2579c5dcc415",
    "sql": "SELECT t1.name , t1.sex , min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex",
    "linq": "context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.Sex }).Select(group => new { group.OrderBy(row => row.t2.OpposeRate).First().t1.Name, group.Key.Sex, MinOpposeRate = group.Select(row => row.t2.OpposeRate).Min() }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c8d36bf763a2ef34dfcc27abeb550dc01a5bf8e37b0e1a76c18152d77a630aaf",
    "sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
    "linq": "context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.Sex }).OrderByDescending(group => group.Average(row => row.t2.UnsureRate)).Select(group => new { group.Key.Sex }).Take(1).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "12ec42dc52820fc82fd7751c4ae683148c995a865c61b86a0af75d7dbb1fb4f3",
    "sql": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)",
    "linq": "context.People.Where(row => !context.Candidates.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c5836e33f0f6e3ce2acf6e8cc1dd5ad132de01c80e5b67c344c66322a54c89a9",
    "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate < t2.oppose_rate",
    "linq": "context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.SupportRate < row.t2.OpposeRate).Select(row => new { row.t1.Name }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1a26f96742b12057bf3a57a27a74ed4e043ddb730bf0cd144d6ca85d328b624b",
    "sql": "SELECT count(*) , sex FROM people WHERE weight > 85 GROUP BY sex",
    "linq": "context.People.Where(row => row.Weight > 85).GroupBy(row => new { row.Sex }).Select(group => new { Count = group.Count(), group.Key.Sex }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f801eb7d1cabb6d9c65ed6d81c48e0c05755f98190fa729600818d3406bf0489",
    "sql": "SELECT max(support_rate) , min(consider_rate) , min(oppose_rate) FROM candidate",
    "linq": "context.Candidates.GroupBy(row => 1).Select(group => new { MaxSupportRate = group.Select(row => row.SupportRate).Max(), MinConsiderRate = group.Select(row => row.ConsiderRate).Min(), MinOpposeRate = group.Select(row => row.OpposeRate).Min() }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4a879af5136face148d647ccfe55404fe71bd8b8bddae955e5dd19400778fc07",
    "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name",
    "linq": "context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Sex == \"F\").OrderBy(row => row.t1.Name).Select(row => new { row.t1.Name }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "83975ef82abf48587aca890efe07b3098e995d5305e5fb12042f89f9402220f2",
    "sql": "SELECT name FROM people WHERE height < (SELECT avg(height) FROM people)",
    "linq": "context.People.Where(row => row.Height < context.People.Select(row => (double) row.Height).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "733786d1aae4d3b0b5c9b75218dbd53f2c3071b20ca38abf8b1e69a12be1f27e",
    "sql": "SELECT * FROM people",
    "linq": "context.People.Select(row => new { row.PeopleId, row.Sex, row.Name, row.DateOfBirth, row.Height, row.Weight }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4d1eaf044dd685faba6d2a90cfe10355bc64e8cf12f1542d858ef5693bb76e6a",
    "sql": "SELECT document_status_code FROM Ref_Document_Status;",
    "linq": "context.RefDocumentStatuses.Select(row => new { row.DocumentStatusCode }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ae2eff8e7922c1d98ff8a1ac2508a6f90d390344bc428d21fb11b7ed3ae0c175",
    "sql": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";",
    "linq": "context.RefDocumentStatuses.Where(row => row.DocumentStatusCode == \"working\").Select(row => new { row.DocumentStatusDescription }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fe1efc9c599135b8a87971a1cc4661990acb5011c1ec70af3696dd31061a53a8",
    "sql": "SELECT document_type_code FROM Ref_Document_Types;",
    "linq": "context.RefDocumentTypes.Select(row => new { row.DocumentTypeCode }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a014f20710364640f46b4903596285c33bfc7c537204ad113ee078b62639bea3",
    "sql": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";",
    "linq": "context.RefDocumentTypes.Where(row => row.DocumentTypeCode == \"Paper\").Select(row => new { row.DocumentTypeDescription }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bf006a13d97b9046c0b496b4bdb0713b486b7e765ba26e49bba16f09638bb0b3",
    "sql": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;",
    "linq": "context.RefShippingAgents.Select(row => new { row.ShippingAgentName }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "00b24f22c16082e265c1a41cdf3906b24427ff0fda5a4f0ea853c876e227ebd0",
    "sql": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";",
    "linq": "context.RefShippingAgents.Where(row => row.ShippingAgentName == \"UPS\").Select(row => new { row.ShippingAgentCode }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1f322ee7beed66d5d00463e3c059075184d1edcf6a8f0fb7420ef34cd71d19c5",
    "sql": "SELECT role_code FROM ROLES;",
    "linq": "context.Roles.Select(row => new { row.RoleCode }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "98adf21768e077f7a60b634c6502ef20d4c0036f295867a1b62f4bcd6e6132fa",
    "sql": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";",
    "linq": "context.Roles.Where(row => row.RoleCode == \"ED\").Select(row => new { row.RoleDescription }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "49a8026fd77f2be43e637446cae3ddd539fd96f96b4e83dab8135d9ddd6ee667",
    "sql": "SELECT count(*) FROM Employees;",
    "linq": "context.Employees.Count();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f16732af0d3f5ec7566e3c4ba1d53c603d8e6ffe4d1198c80d458ded8f7c4ae",
    "sql": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";",
    "linq": "context.Roles.Join(context.Employees, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EmployeeName == \"Koby\").Select(row => new { row.T1.RoleDescription }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "02905094fb782fda17eebac4ecf7442c2e8a9dad180f8757a978740038bd94c0",
    "sql": "SELECT document_id , receipt_date FROM Documents;",
    "linq": "context.Documents.Select(row => new { row.DocumentId, row.ReceiptDate }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "61aae446526224ad8cd7f7a0cdba0e12822c0904be4c5a10676fe8511c527546",
    "sql": "SELECT T1.role_description , T2.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;",
    "linq": "context.Roles.Join(context.Employees, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.RoleCode }).Select(group => new { group.First().T1.RoleDescription, group.Key.RoleCode, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8015c3c6e09b644ec0e32e41e5556d5259f260df728e2c00ad6c7a565059edc0",
    "sql": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id) > 1;",
    "linq": "context.Roles.Join(context.Employees, Roles => Roles.RoleCode, Employees => Employees.RoleCode, (Roles, Employees) => new { Roles, Employees }).GroupBy(row => new { row.Employees.RoleCode }).Select(group => new { group.First().Roles.RoleDescription, CountEmployeeId = group.Select(row => row.Employees.EmployeeId).Count() }).Where(group => group.CountEmployeeId > 1).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ea1868c8cb46499a7ee3a9071e090ef8265edc66fdac8bd2ba6efc9810adf843",
    "sql": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;",
    "linq": "context.RefDocumentStatuses.Join(context.Documents, RefDocumentStatuses => RefDocumentStatuses.DocumentStatusCode, Documents => Documents.DocumentStatusCode, (RefDocumentStatuses, Documents) => new { RefDocumentStatuses, Documents }).Where(row => row.Documents.DocumentId == 1).Select(row => new { row.RefDocumentStatuses.DocumentStatusDescription }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6d35240695bd3594dcde6411ee5b6445b644a79685860171ea70f8cb7a726d67",
    "sql": "SELECT count(*) FROM Documents WHERE document_status_code = \"done\";",
    "linq": "context.Documents.Where(row => row.DocumentStatusCode == \"done\").Count();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "19afe78b32bf2ea18a90ce6d7358f4465da0282ae674c8b7e5e1d661e8a6cbb7",
    "sql": "SELECT document_type_code FROM Documents WHERE document_id = 2;",
    "linq": "context.Documents.Where(row => row.DocumentId == 2).Select(row => new { row.DocumentTypeCode }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "66aad58a73fd8e2991a2e1f4e0c5a991faf1ecb9731b621c8a87c775485b6bd5",
    "sql": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";",
    "linq": "context.Documents.Where(row => row.DocumentStatusCode == \"done\" && row.DocumentTypeCode == \"Paper\").Select(row => new { row.DocumentId }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8c4939c00304033753b0f8f339c136349999b07c505e191978fdf153504aa3d7",
    "sql": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;",
    "linq": "context.RefShippingAgents.Join(context.Documents, RefShippingAgents => RefShippingAgents.ShippingAgentCode, Documents => Documents.ShippingAgentCode, (RefShippingAgents, Documents) => new { RefShippingAgents, Documents }).Where(row => row.Documents.DocumentId == 2).Select(row => new { row.RefShippingAgents.ShippingAgentName }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "35d49bf9a722c8f338d1c3c6bb5cde8d4baa0901fe867a2899fac40f20513a00",
    "sql": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
    "linq": "context.RefShippingAgents.Join(context.Documents, RefShippingAgents => RefShippingAgents.ShippingAgentCode, Documents => Documents.ShippingAgentCode, (RefShippingAgents, Documents) => new { RefShippingAgents, Documents }).Where(row => row.RefShippingAgents.ShippingAgentName == \"USPS\").Count();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ab8f954049f75295ab9b1b66ca2db4258035c8b2f0d6869887c3f6c3bd1c3b5d",
    "sql": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
    "linq": "context.RefShippingAgents.Join(context.Documents, RefShippingAgents => RefShippingAgents.ShippingAgentCode, Documents => Documents.ShippingAgentCode, (RefShippingAgents, Documents) => new { RefShippingAgents, Documents }).GroupBy(row => new { row.RefShippingAgents.ShippingAgentCode }).Select(group => new { group.First().RefShippingAgents.ShippingAgentName, CountDocumentId = group.Select(row => row.Documents.DocumentId).Count() }).OrderByDescending(group => group.CountDocumentId).Take(1).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "918c31965efc2560eeb3c531e97a67570eecab12256bf982f53ad26854e548a4",
    "sql": "SELECT receipt_date FROM Documents WHERE document_id = 3;",
    "linq": "context.Documents.Where(row => row.DocumentId == 3).Select(row => new { row.ReceiptDate }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "53812daf77422d0cfd82e22481c4b351e0c925ed2d537199bbe54581725138c9",
    "sql": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;",
    "linq": "context.Addresses.Join(context.DocumentsMaileds, Addresses => Addresses.AddressId, DocumentsMaileds => DocumentsMaileds.MailedToAddressId, (Addresses, DocumentsMaileds) => new { Addresses, DocumentsMaileds }).Where(row => row.DocumentsMaileds.DocumentId == 4).Select(row => new { row.Addresses.AddressDetails }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f9cb21bad762b35fde5266a4916813edf0928837c6bc9fecfd12b3286465faa2",
    "sql": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;",
    "linq": "context.DocumentsMaileds.Where(row => row.DocumentId == 7).Select(row => new { row.MailingDate }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3a2262fb02824864221fe1155a7add45d3c5706e033005bae72d55723bd3b155",
    "sql": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
    "linq": "context.Documents.Where(row => row.DocumentStatusCode == \"done\" && row.DocumentTypeCode == \"Paper\").Select(row => row.DocumentId).Except(context.Documents.Join(context.RefShippingAgents, Documents => Documents.ShippingAgentCode, RefShippingAgents => RefShippingAgents.ShippingAgentCode, (Documents, RefShippingAgents) => new { Documents, RefShippingAgents }).Where(row => row.RefShippingAgents.ShippingAgentName == \"USPS\").Select(row => row.Documents.DocumentId)).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "02f0cfbd90b33342152cc81f9c2e779d611121eda1c992f9aad5157938e1b57d",
    "sql": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
    "linq": "context.Documents.Where(row => row.DocumentStatusCode == \"done\" && row.DocumentTypeCode == \"Paper\").Select(row => row.DocumentId).Intersect(context.Documents.Join(context.RefShippingAgents, Documents => Documents.ShippingAgentCode, RefShippingAgents => RefShippingAgents.ShippingAgentCode, (Documents, RefShippingAgents) => new { Documents, RefShippingAgents }).Where(row => row.RefShippingAgents.ShippingAgentName == \"USPS\").Select(row => row.Documents.DocumentId)).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "139be43c6da2a1b0aa4d3abe24e8e8119d9a1a3e38e8235e699f63f24f56a7c8",
    "sql": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;",
    "linq": "context.DocumentDrafts.Where(row => row.DocumentId == 7).Select(row => new { row.DraftDetails }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1d20283ba677b46942d80bbb0c7f4ec8edd6b28565e3be9de7b72b9803ba362b",
    "sql": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;",
    "linq": "context.DraftCopies.Where(row => row.DocumentId == 2).Count();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "20f935c6e9a08da1dd84eec96e64ad16225d392173dfa0a037de471a9a814520",
    "sql": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
    "linq": "context.DraftCopies.GroupBy(row => new { row.DocumentId }).Select(group => new { group.Key.DocumentId, CountCopyNumber = group.Select(row => row.CopyNumber).Count() }).OrderByDescending(group => group.CountCopyNumber).Take(1).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2ea63112e0d11862cf3f4a2a742be3106a2f66e78d562b5c96beafdc98026336",
    "sql": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*) > 1;",
    "linq": "context.DraftCopies.GroupBy(row => new { row.DocumentId }).Select(group => new { group.Key.DocumentId, Count = group.Count() }).Where(group => group.Count > 1).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "70957610e0945da51bf18398c3f7fe0cdbd7d2551a5bfaf8a70e717ec2c16c86",
    "sql": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;",
    "linq": "context.Employees.Join(context.CirculationHistory, Employees => Employees.EmployeeId, CirculationHistory => CirculationHistory.EmployeeId, (Employees, CirculationHistory) => new { Employees, CirculationHistory }).Where(row => row.CirculationHistory.DocumentId == 1).Select(row => new { row.Employees.EmployeeName }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS1061: 'CreDocControlSystemsContext' does not contain a definition for 'CirculationHistory' and no accessible extension method 'CirculationHistory' accepting a first argument of type 'CreDocControlSystemsContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.62",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "132f43b1e3bc3565957405816e16af5f14b6f9cc4168146bbf795d5274e45d41",
    "sql": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id",
    "linq": "context.Employees.Select(row => row.EmployeeName).Except(context.Employees.Join(context.CirculationHistory, Employees => Employees.EmployeeId, CirculationHistory => CirculationHistory.EmployeeId, (Employees, CirculationHistory) => new { Employees, CirculationHistory }).Select(row => row.Employees.EmployeeName)).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,100): error CS1061: 'CreDocControlSystemsContext' does not contain a definition for 'CirculationHistory' and no accessible extension method 'CirculationHistory' accepting a first argument of type 'CreDocControlSystemsContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.76",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0cb1d6582a9af29bda90dbf8980c4106d7b0c4285f113b68bc81ef995311b895",
    "sql": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;",
    "linq": "context.Employees.Join(context.CirculationHistory, Employees => Employees.EmployeeId, CirculationHistory => CirculationHistory.EmployeeId, (Employees, CirculationHistory) => new { Employees, CirculationHistory }).GroupBy(row => new { row.CirculationHistory.DocumentId, row.CirculationHistory.DraftNumber, row.CirculationHistory.CopyNumber }).Select(group => new { group.First().Employees.EmployeeName, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS1061: 'CreDocControlSystemsContext' does not contain a definition for 'CirculationHistory' and no accessible extension method 'CirculationHistory' accepting a first argument of type 'CreDocControlSystemsContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.64",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "68c2e56dd591ceaf17e868ab25eb7e4bda22706064d68d9161b4739388e61174",
    "sql": "SELECT document_id , count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;",
    "linq": "context.CirculationHistory.GroupBy(row => new { row.DocumentId }).Select(group => new { group.Key.DocumentId, CountDistinctEmployeeId = group.Select(row => row.EmployeeId).Distinct().Count() }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'CreDocControlSystemsContext' does not contain a definition for 'CirculationHistory' and no accessible extension method 'CirculationHistory' accepting a first argument of type 'CreDocControlSystemsContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.43",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "527ae4a43e16ba0687ac0322530efb68ceafab68bc952d8cc8668f9c23edbb07",
    "sql": "SELECT count(*) FROM Church WHERE Open_Date < 1850",
    "linq": "context.Churches.Where(row => row.OpenDate < 1850).Count();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eed3db57411bba87e0667aa6c306dad638dbd963cfe3a2cd58e70ade5b775f2b",
    "sql": "SELECT name , open_date , organized_by FROM Church",
    "linq": "context.Churches.Select(row => new { row.Name, row.OpenDate, row.OrganizedBy }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1790a23793dc3073b849a57fbd7c6b6dc91ca63ddc4ac46fa1de8b6840612356",
    "sql": "SELECT name FROM church ORDER BY open_date DESC",
    "linq": "context.Churches.OrderByDescending(row => row.OpenDate).Select(row => new { row.Name }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "baa3b23cb1d81d8270a191d99123bc1e878ce5dd9f50fe34017445643410bdc9",
    "sql": "SELECT open_date FROM church GROUP BY open_date HAVING count(*) >= 2",
    "linq": "context.Churches.GroupBy(row => new { row.OpenDate }).Where(group => group.Count() >= 2).Select(group => new { group.Key.OpenDate }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e19459aa3679ed4b2c96df837d4d03c95e46b9258df283d94fc3abf86081eb65",
    "sql": "SELECT organized_by , name FROM church WHERE open_date BETWEEN 1830 AND 1840",
    "linq": "context.Churches.Where(row => row.OpenDate >= 1830 && row.OpenDate <= 1840).Select(row => new { row.OrganizedBy, row.Name }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7caef3c4b0d047df979459ec6ef433d737210e9d7ebd86cab81d3726c224fcd2",
    "sql": "SELECT open_date , count(*) FROM church GROUP BY open_date",
    "linq": "context.Churches.GroupBy(row => new { row.OpenDate }).Select(group => new { group.Key.OpenDate, Count = group.Count() }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b4fc68fb2d6939ec7137bd0f3555675d5442bbf8b18bcbd64b351b62c76fd287",
    "sql": "SELECT name , open_date FROM church ORDER BY open_date DESC LIMIT 3",
    "linq": "context.Churches.OrderByDescending(row => row.OpenDate).Select(row => new { row.Name, row.OpenDate }).Take(3).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0066470d5477f30b466ea2d02bb100cc7d0163aa81680ec796b6fd18038605cb",
    "sql": "SELECT count(*) FROM people WHERE is_male = 'F' AND age > 30",
    "linq": "context.People.Where(row => row.IsMale == \"F\" && row.Age > 30).Count();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "224e03563707b93abcaa46f9dac88354c8611529af33c35b8ae33faeb0f7a666",
    "sql": "SELECT country FROM people WHERE age < 25 INTERSECT SELECT country FROM people WHERE age > 30",
    "linq": "context.People.Where(row => row.Age < 25).Select(row => row.Country).Intersect(context.People.Where(row => row.Age > 30).Select(row => row.Country)).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d2e342e68ded028516a69859a66dad0fe7406169ac33a88433a74fa7df3733d0",
    "sql": "SELECT min(age) , max(age) , avg(age) FROM people",
    "linq": "context.People.GroupBy(row => 1).Select(group => new { MinAge = group.Select(row => row.Age).Min(), MaxAge = group.Select(row => row.Age).Max(), AverageAge = group.Select(row => row.Age).Average() }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "75f5dfdbd8351ffd289e014007b36e0cf99d8649ab2c08d8023d02ca5549a746",
    "sql": "SELECT name , country FROM people WHERE age < (SELECT avg(age) FROM people)",
    "linq": "context.People.Where(row => row.Age < context.People.Select(row => row.Age).Average()).Select(row => new { row.Name, row.Country }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ad97cb064a7111ffc1c1d586d1748167cbacf5c39846667390279142f125c05b",
    "sql": "SELECT T2.name , T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id WHERE T1.year > 2014",
    "linq": "context.Weddings.Join(context.People, T1 => T1.MaleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Join(context.People, joined => joined.T1.FemaleId, T3 => T3.PeopleId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Year > 2014).Select(row => new { T2Name = row.T2.Name, T3Name = row.T3.Name }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cb33abd14daa015b46b79f82e54f60d09c6c486383b029b73db0e8c50c317d10",
    "sql": "SELECT name , age FROM people WHERE is_male = 'T' AND people_id NOT IN (SELECT male_id FROM wedding)",
    "linq": "context.People.Where(row => row.IsMale == \"T\" && !context.Weddings.Select(row => row.MaleId).Contains(row.PeopleId)).Select(row => new { row.Name, row.Age }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5f2ac18d0ebcc1b1925beeec1c64b7e77caebfd9b366c5a9be195827aab9d252",
    "sql": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id WHERE T2.year = 2015",
    "linq": "context.Churches.Select(row => row.Name).Except(context.Churches.Join(context.Weddings, T1 => T1.ChurchId, T2 => T2.ChurchId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2015).Select(row => row.T1.Name)).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f67d3ba00f6f4401ec1f34f476b0a3e27bd434961e7e18ae48813c288fc2d6d9",
    "sql": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id GROUP BY T1.church_id HAVING count(*) >= 2",
    "linq": "context.Churches.Join(context.Weddings, T1 => T1.ChurchId, T2 => T2.ChurchId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ChurchId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.Name }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "712be37fe68f1519aad2f82d853f0706347aa6d0b2c027049073331520dda20f",
    "sql": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id = T2.people_id WHERE T1.year = 2016 AND T2.is_male = 'F' AND T2.country = 'Canada'",
    "linq": "context.Weddings.Join(context.People, T1 => T1.FemaleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2016 && row.T2.IsMale == \"F\" && row.T2.Country == \"Canada\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eec5e10316f809892b91730fb9b2e87835f2d10398882aceb9bda2be1e0103d8",
    "sql": "SELECT count(*) FROM wedding WHERE YEAR = 2016",
    "linq": "context.Weddings.Where(row => row.Year == 2016).Count();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9373a3d264cf40494fbec8da4895bcc8d40ae9988a3240f17cba2e475bc053b5",
    "sql": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id JOIN church AS T4 ON T4.church_id = T1.church_id WHERE T2.age > 30 OR T3.age > 30",
    "linq": "context.Weddings.Join(context.People, T1 => T1.MaleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Join(context.People, joined => joined.T1.FemaleId, T3 => T3.PeopleId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Churches, joined => joined.T1.ChurchId, T4 => T4.ChurchId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T2.Age > 30 || row.T3.Age > 30).Select(row => new { row.T4.Name }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6f7618466e8b697e317cce6968ca8bf528fbbec85ed0924c30eb40550bff2529",
    "sql": "SELECT country , count(*) FROM people GROUP BY country",
    "linq": "context.People.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "20c972117d3287cb2dc353803921ac3e6ee07f52d37b915ee403118f0fabb702",
    "sql": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR = 2016",
    "linq": "context.Weddings.Where(row => row.Year == 2016).Select(row => row.ChurchId).Distinct().Count();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fe7f43b5c06b77cddbdf6cc5bfbede3e84c8dacd907f937f8592cb9f325303f2",
    "sql": "SELECT name FROM business WHERE rating > 4.5;",
    "linq": "context.Businesses.Where(row => row.Rating > 4.5).Select(row => new { row.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "78b81c44ca62dd7ef5506e483550009c9289ba4295f59fe546965e06c0dd22b0",
    "sql": "SELECT name FROM business WHERE rating = 3.5;",
    "linq": "context.Businesses.Where(row => row.Rating == 3.5).Select(row => new { row.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a7112fb4ba894eb75722b8a90497e29096ce1228d134ff804679a221099e6378",
    "sql": "SELECT user_id FROM USER WHERE name = \"Michelle\";",
    "linq": "context.Users.Where(row => row.Name == \"Michelle\").Select(row => new { row.UserId }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e8ba7f2ee5ef238fa6a5cc50776ebcbcffbf801637a83273a633454927f4832d",
    "sql": "SELECT state FROM business WHERE name = \"Whataburger\";",
    "linq": "context.Businesses.Where(row => row.Name == \"Whataburger\").Select(row => new { row.State }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4de8de6b793f1b3b37e2ef11c3d31ff594286ae46a9bbefb61d4a30dc364a90c",
    "sql": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"MGM Grand Buffet\" AND t2.category_name = \"category_category_name0\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"MGM Grand Buffet\" && row.t2.CategoryName == \"category_category_name0\").Select(row => new { row.t1.City }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f8f04a9cd628c8f340f1335b8ca45ca13f46b11aaef11362c5baa24f7f9f2291",
    "sql": "SELECT city FROM business WHERE rating < 1.5;",
    "linq": "context.Businesses.Where(row => row.Rating < 1.5).Select(row => new { row.City }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d3efbd75c938ed56c59d0f19ec9ff17825c8985caf5ee6e1b02c1cc2e8a17dda",
    "sql": "SELECT city FROM business WHERE name = \"Taj Mahal\";",
    "linq": "context.Businesses.Where(row => row.Name == \"Taj Mahal\").Select(row => new { row.City }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8ceac7b01e602e73adcfb979a5065bc7664387e5420a076710bf2325baa907b6",
    "sql": "SELECT text FROM review WHERE rating < 1;",
    "linq": "context.Reviews.Where(row => row.Rating < 1).Select(row => new { row.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c1b10cb4143ab1b3de3572789cd81df89106df088ae675d892e48d06d092c914",
    "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.rating > 3.5 AND t2.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Rating > 3.5 && row.t2.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "df677beff24061c7db38d356803a974a2eb510aaffa85de5a69406365bfe5d62",
    "sql": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Taj Mahal\" AND t2.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"Taj Mahal\" && row.t2.CategoryName == \"restaurant\").Select(row => new { row.t1.City }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "19074d1c82f74ca9954651ed1f69ea629c13880d34a09d7ea867de1c7d47c74e",
    "sql": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t2.name = \"Niloofar\";",
    "linq": "context.Users.Join(context.Reviews, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Name == \"Niloofar\").Select(row => new { row.t1.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "18a9b591893f72682874fd9ee2e135ba5a0e94b1adf8d55afb3b822ba55dde66",
    "sql": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t3.name = \"Niloofar\";",
    "linq": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.Name == \"Niloofar\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dc778fbe2369c54e4058359c46c899dfe3bd7c87e4b67005cbbe60393ba3f1b0",
    "sql": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t2.rating = 5 AND t3.name = \"Niloofar\";",
    "linq": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Rating == 5 && row.t3.Name == \"Niloofar\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9a73965986f349a2bafd61077d82878220852a6a489e676b9283f39648e3cd79",
    "sql": "SELECT t4.text FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN review AS t4 ON t4.business_id = t1.business_id JOIN USER AS t5 ON t5.user_id = t4.user_id WHERE t2.category_name = \"Italian\" AND t3.category_name = \"category_category_name1\" AND t5.name = \"Michelle\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Reviews, joined => joined.t1.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Join(context.Users, joined => joined.t4.UserId, t5 => t5.UserId, (joined, t5) => new { joined.t2, joined.t1, joined.t3, joined.t4, t5 }).Where(row => row.t2.CategoryName == \"Italian\" && row.t3.CategoryName == \"category_category_name1\" && row.t5.Name == \"Michelle\").Select(row => new { row.t4.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d8830fec95b52ab52ef3de4cba48bfcb7a2ca3963918f3065d5dc91fc6d1ab92",
    "sql": "SELECT COUNT ( DISTINCT t3.text ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id WHERE t1.name = \"Cafe Zinho\" AND t1.state = \"Texas\" AND t2.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Name == \"Cafe Zinho\" && row.t1.State == \"Texas\" && row.t2.CategoryName == \"restaurant\").Select(row => row.t3.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c42ee75bbed28159bec1e37d5654738236fed88ee10bc25b12f7ded42411732c",
    "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.rating = 5 AND t2.category_name = \"Italian\" AND t3.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Rating == 5 && row.t2.CategoryName == \"Italian\" && row.t3.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "021b1a30bc3ea73710f170583569270d05297e1a0fd3e78a3219d0cf4be67e3a",
    "sql": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id = t2.business_id JOIN category AS t4 ON t4.business_id = t2.business_id JOIN neighbourhood AS t1 ON t1.business_id = t2.business_id WHERE t2.city = \"Madison\" AND t3.category_name = \"Italian\" AND t4.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t3 => t3.BusinessId, t2 => t2.BusinessId, (t3, t2) => new { t3, t2 }).Join(context.Categories, joined => joined.t2.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t3, joined.t2, t4 }).Join(context.Neighbourhoods, joined => joined.t2.BusinessId, t1 => t1.BusinessId, (joined, t1) => new { joined.t3, joined.t2, joined.t4, t1 }).Where(row => row.t2.City == \"Madison\" && row.t3.CategoryName == \"Italian\" && row.t4.CategoryName == \"restaurant\").Select(row => new { row.t1.NeighbourhoodName }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bf6dda45ee500e354e015757fc7e7d3deb991cccb1663679f60b22d0f24810f2",
    "sql": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id = t2.business_id JOIN category AS t4 ON t4.business_id = t2.business_id JOIN neighbourhood AS t1 ON t1.business_id = t2.business_id WHERE t2.city = \"Madison\" AND t2.rating < 2.5 AND t3.category_name = \"Italian\" AND t4.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t3 => t3.BusinessId, t2 => t2.BusinessId, (t3, t2) => new { t3, t2 }).Join(context.Categories, joined => joined.t2.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t3, joined.t2, t4 }).Join(context.Neighbourhoods, joined => joined.t2.BusinessId, t1 => t1.BusinessId, (joined, t1) => new { joined.t3, joined.t2, joined.t4, t1 }).Where(row => row.t2.City == \"Madison\" && row.t2.Rating < 2.5 && row.t3.CategoryName == \"Italian\" && row.t4.CategoryName == \"restaurant\").Select(row => new { row.t1.NeighbourhoodName }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1f780c169113f07e1a531ff55aa0de81d9d0fda5b1b9b2b9f593bfa28e342e4f",
    "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.state = \"Pennsylvania\" AND t2.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.State == \"Pennsylvania\" && row.t2.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "69a6cdaf89ddf7d9b7796439e1bc09be29792ab3b4a20984281be0bd562a5130",
    "sql": "SELECT t3.text FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id WHERE t1.review_count > 100 AND t2.category_name = \"Pet Groomers\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.ReviewCount > 100 && row.t2.CategoryName == \"Pet Groomers\").Select(row => new { row.t3.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "10706d3471ec1d0d47a38ae7bca4e124bf052d88ab4ced8f6e8e9da78ce2a17a",
    "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"breweries\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.City == \"Los Angeles\" && row.t2.CategoryName == \"breweries\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a73bd8c83751b078a316bf1921dbd33bb90e349b97dee881eca79c3539c871c8",
    "sql": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.name = \"Mesa Grill\" AND t2.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.Name == \"Mesa Grill\" && row.t2.CategoryName == \"restaurant\").Select(row => new { row.t4.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cd358c65602c3b0ee7426d7ee24f7df40a06a03f15b2f8cbd5fbd5b42527924c",
    "sql": "SELECT full_address FROM business WHERE city = \"Los Angeles\" AND name = \"Walmart\";",
    "linq": "context.Businesses.Where(row => row.City == \"Los Angeles\" && row.Name == \"Walmart\").Select(row => new { row.FullAddress }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "db839315a80a6a18ace5f8dfd4ace9f85b9cd46cf79a49900830fb9bf1bb7a69",
    "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.city = \"Dallas\" AND t2.category_name = \"restaurant\" AND t4.name = \"Patrick\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.City == \"Dallas\" && row.t2.CategoryName == \"restaurant\" && row.t4.Name == \"Patrick\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e79b22320fbde293d98b2d875a4d8fb606de45cee7f377fbc8fe4bbf47fd96ab",
    "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t2.category_name = \"Bars\" AND t4.name = \"Patrick\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t2.CategoryName == \"Bars\" && row.t4.Name == \"Patrick\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a0863a15adb04512410d2a916dae45c4e65876cb9a9ed427fa6e99ffa36e327f",
    "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.rating >= 3 AND t2.category_name = \"Bars\" AND t4.name = \"Patrick\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.Rating >= 3 && row.t2.CategoryName == \"Bars\" && row.t4.Name == \"Patrick\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "42d96f04678d33e410a84c787e3b000d145ffd0d58043c7305b17fe3c6ef3940",
    "sql": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.name = \"Barrio Cafe\" AND t2.year = 2015;",
    "linq": "context.Tips.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Name == \"Barrio Cafe\" && row.t2.Year == 2015).Select(row => new { row.t3.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0b84547cf80a182220400a85f146e07f9545aaf3d3a251bc0cfa32c1452939da",
    "sql": "SELECT name FROM business WHERE rating < 2 AND state = \"Texas\";",
    "linq": "context.Businesses.Where(row => row.Rating < 2 && row.State == \"Texas\").Select(row => new { row.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "892306d2e0068c9d91675d4c559c8cc2fad659426e78797917de998996d99495",
    "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"Seafood\" AND t3.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"Los Angeles\" && row.t2.CategoryName == \"Seafood\" && row.t3.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "acd84e5ae0de53d8547218daf888feb0fbc6619492a683d84c876bd3abb70fdf",
    "sql": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t1.rating > 4 AND t2.name = \"Patrick\";",
    "linq": "context.Users.Join(context.Reviews, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Rating > 4 && row.t2.Name == \"Patrick\").Select(row => new { row.t1.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1f8dec026a0b070269bb8f6008d1d5bf014525659a04eea3d392c824974cbab0",
    "sql": "SELECT business_id FROM business WHERE city = \"Los Angeles\" AND name = \"Apple Store\";",
    "linq": "context.Businesses.Where(row => row.City == \"Los Angeles\" && row.Name == \"Apple Store\").Select(row => new { row.BusinessId }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6241437dcfc7e4f9556d200cd76327b35a2e7530a37d88a224a80ea4161ff1ae",
    "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Dallas\" AND t1.rating > 4.5 AND t2.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.City == \"Dallas\" && row.t1.Rating > 4.5 && row.t2.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "38c44f3f4117e3ac45234adc162cc3cef067f554c894eefdbde76a1a24a2928b",
    "sql": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id = t2.business_id JOIN neighbourhood AS t1 ON t1.business_id = t2.business_id WHERE t2.name = \"Flat Top Grill\" AND t3.category_name = \"category_category_name0\";",
    "linq": "context.Categories.Join(context.Businesses, t3 => t3.BusinessId, t2 => t2.BusinessId, (t3, t2) => new { t3, t2 }).Join(context.Neighbourhoods, joined => joined.t2.BusinessId, t1 => t1.BusinessId, (joined, t1) => new { joined.t3, joined.t2, t1 }).Where(row => row.t2.Name == \"Flat Top Grill\" && row.t3.CategoryName == \"category_category_name0\").Select(row => new { row.t1.NeighbourhoodName }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f3adee9eba42bbf24448eb43c627a5f253c33efa3f355128ff54c12a0d5dae84",
    "sql": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Vintner Grill\" AND t2.likes > 9;",
    "linq": "context.Tips.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"Vintner Grill\" && row.t2.Likes > 9).Select(row => new { row.t2.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7a259d623b576af0642e9ebb4f2f80370cb7f1382c27f58fd7ff8464cfd8e4f6",
    "sql": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Kabob Palace\" AND t2.year = 2014;",
    "linq": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"Kabob Palace\" && row.t2.Year == 2014).Select(row => new { row.t2.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f7e8362935d7c5ea2b380d2fcd2d2cd7950138a00a4f80139e06dfa148287c56",
    "sql": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.city = \"Dallas\";",
    "linq": "context.Tips.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"Dallas\").Select(row => new { row.t3.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "af6ea80020e7fe2a8ac9cec9e397adf28c3bc982e01ffddb5fe3c2367becd555",
    "sql": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"MGM Grand Buffet\" AND t1.state = \"Texas\" AND t2.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"MGM Grand Buffet\" && row.t1.State == \"Texas\" && row.t2.CategoryName == \"restaurant\").Select(row => new { row.t1.City }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5e845da7c529cc948ed77b1bbbb53743dc884860f4d047527cf027ddd3323ba5",
    "sql": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN tip AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t2.category_name = \"Pet Groomers\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Tips, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t2.CategoryName == \"Pet Groomers\").Select(row => new { row.t4.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "411e383ddf4ccc310157b924c81d7c189f7173c3b69fd542ad9f006a0327c836",
    "sql": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Cafe Zinho\" AND t1.state = \"Texas\";",
    "linq": "context.Tips.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"Cafe Zinho\" && row.t1.State == \"Texas\").Select(row => new { row.t2.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ea4f20c1cf7c8efdf623cc1a92eaad61872c14e9051112ac04f27fdd09c84bbc",
    "sql": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t2.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t2.CategoryName == \"restaurant\").Select(row => new { row.t4.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3e4095f1989e06dc5fcabd0ed128c7f145cf703da0123fa291f038cbfcbf2e18",
    "sql": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Cafe Zinho\" AND t1.state = \"Pennsylvania\" AND t2.year = 2010;",
    "linq": "context.Tips.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"Cafe Zinho\" && row.t1.State == \"Pennsylvania\" && row.t2.Year == 2010).Select(row => new { row.t2.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eb91a556766419df79cf99df34b73ab61ff8c005f091c6b5be4b506873075deb",
    "sql": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t2.category_name = \"restaurant\" AND t3.year = 2010;",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t2.CategoryName == \"restaurant\" && row.t3.Year == 2010).Select(row => new { row.t4.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fbb4f1a2b93cb8c317f1e3eee6136ac41be6449c33050eb8dbb55225ec2cc30c",
    "sql": "SELECT t2.text FROM USER AS t3 JOIN review AS t1 ON t3.user_id = t1.user_id JOIN tip AS t2 ON t3.user_id = t2.user_id WHERE t1.year = 2012;",
    "linq": "context.Users.Join(context.Reviews, t3 => t3.UserId, t1 => t1.UserId, (t3, t1) => new { t3, t1 }).Join(context.Tips, joined => joined.t3.UserId, t2 => t2.UserId, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Year == 2012).Select(row => new { row.t2.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1cfedc6ccd5b7fbd36ba910908429c60f9c495d246ef2d29de3979c4e75d0754",
    "sql": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.rating = 2.5;",
    "linq": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Rating == 2.5).Select(row => new { row.t2.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a9a222fa7c97231775376bb1ba88d22cb4c579b7e9ef6991fff4ee3e3eb15642",
    "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Madison\" AND t2.category_name = \"escape games\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.City == \"Madison\" && row.t2.CategoryName == \"escape games\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ef2395140db4af6f2dce7b6493245b9fc2ed1c913dc45ac5ada5f8abc73eeab5",
    "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.rating > 3.5 AND t2.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Rating > 3.5 && row.t2.CategoryName == \"restaurant\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7707c3292ed138d52d95f936c6c22b031829cfaaf5601a47b896b45a15715c53",
    "sql": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"restaurant\" AND t3.category_name = \"Moroccan\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Checkins, joined => joined.t1.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.City == \"Los Angeles\" && row.t2.CategoryName == \"restaurant\" && row.t3.CategoryName == \"Moroccan\").Select(row => row.t4.Count).Sum();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fc9e6ad9fd00466b246b526a1c8c2e3cbdec07aa58c0b30494c5d7bd389193cf",
    "sql": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"Moroccan\" AND t3.category_name = \"restaurant\" AND t4.day = \"Friday\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Checkins, joined => joined.t1.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.City == \"Los Angeles\" && row.t2.CategoryName == \"Moroccan\" && row.t3.CategoryName == \"restaurant\" && row.t4.Day == \"Friday\").Select(row => row.t4.Count).Sum();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "224d7483c93f91a1a0d5264ad0e9c767173354b6b804eb720b18cfb53629b7e8",
    "sql": "SELECT t4.day , SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"Moroccan\" AND t3.category_name = \"restaurant\" GROUP BY t4.day;",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Checkins, joined => joined.t1.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.City == \"Los Angeles\" && row.t2.CategoryName == \"Moroccan\" && row.t3.CategoryName == \"restaurant\").GroupBy(row => new { row.t4.Day }).Select(group => new { group.Key.Day, SumCount = group.Select(row => row.t4.Count).Sum() }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "62f6de3af10d4e4cc4d8278481d9c797edebdf8ed92974b58adbe5ed1605369d",
    "sql": "SELECT t1.state , SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t2.category_name = \"Italian\" AND t3.category_name = \"Delis\" AND t4.day = \"Sunday\" GROUP BY t1.state;",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Checkins, joined => joined.t1.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t2.CategoryName == \"Italian\" && row.t3.CategoryName == \"Delis\" && row.t4.Day == \"Sunday\").GroupBy(row => new { row.t1.State }).Select(group => new { group.Key.State, SumCount = group.Select(row => row.t4.Count).Sum() }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "127d3d0a0183871d3bb23094b4bf6f865fbd5a836568e71ff1280f1df6a18317",
    "sql": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t1.year = 2015 AND t2.name = \"Niloofar\";",
    "linq": "context.Users.Join(context.Reviews, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Year == 2015 && row.t2.Name == \"Niloofar\").Select(row => row.t1.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a0c14021ce343982e57ddc9de78eba6401065398a080e38d2ebaa1f3314a3b41",
    "sql": "SELECT AVG ( t1.rating ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t2.name = \"Michelle\";",
    "linq": "context.Users.Join(context.Reviews, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Name == \"Michelle\").Select(row => (double) row.t1.Rating).Average();",
    "db_name": "yelp",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "99922efcf6d6ea6e7ad06a47d21d049276dfb10023e3c2e069720e25d81ef67d",
    "sql": "SELECT t2.count FROM checkin AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Cafe Zinho\" AND t2.day = \"Friday\";",
    "linq": "context.Checkins.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"Cafe Zinho\" && row.t2.Day == \"Friday\").Select(row => new { row.t2.Count }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6cab58e464fff4b7ccb89e9ebb6cce077f7b234aa0660596d952c408eb641bf0",
    "sql": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.city = \"Pittsburgh\" AND t1.name = \"Sushi Too\";",
    "linq": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"Pittsburgh\" && row.t1.Name == \"Sushi Too\").Select(row => row.t3.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bf1d3fed050b7af7610cce469a80cc55b8b1e7d5fc47f0d503ca2f5164e433e2",
    "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Pittsburgh\" AND t1.rating = 4.5 AND t2.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.City == \"Pittsburgh\" && row.t1.Rating == 4.5 && row.t2.CategoryName == \"restaurant\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "76d9d48fd28f68363b8a651f6b2c2ad9a4ee53bb8ebc2d4716fac7f3db283630",
    "sql": "SELECT COUNT ( DISTINCT text ) FROM tip WHERE YEAR = 2015;",
    "linq": "context.Tips.Where(row => row.Year == 2015).Select(row => row.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "32733b2c6a3f4a4db2a78d1c88861c54be06d279a5e1c821931bcfd4b827b2a2",
    "sql": "SELECT SUM ( t1.likes ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id WHERE t2.name = \"Niloofar\";",
    "linq": "context.Users.Join(context.Tips, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Name == \"Niloofar\").Select(row => row.t1.Likes).Sum();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "02bf07d60bbb96ad6e6c29fb15c1c5d3330e6ffec938ba2e4577b40d754d50f6",
    "sql": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Cafe Zinho\";",
    "linq": "context.Tips.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"Cafe Zinho\").Select(row => row.t2.Likes).Sum();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5fac07915eeb9f506a635eae1724b2aa34aa941898b9b31a177abc3ca63dcd9f",
    "sql": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.name = \"Cafe Zinho\" AND t3.name = \"Niloofar\";",
    "linq": "context.Tips.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Name == \"Cafe Zinho\" && row.t3.Name == \"Niloofar\").Select(row => row.t2.Likes).Sum();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d98180577b7aaa12348365ca3b5aa7e7e8bf4f3613e414fd015fce677dc48798",
    "sql": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id WHERE t1.year = 2010 AND t2.name = \"Michelle\";",
    "linq": "context.Users.Join(context.Tips, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Year == 2010 && row.t2.Name == \"Michelle\").Select(row => row.t1.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bd5ea406edb50591c281e975a688c081ed7fb994654f6b4ef448b0001e57b213",
    "sql": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id WHERE t1.month = \"April\" AND t2.name = \"Michelle\";",
    "linq": "context.Users.Join(context.Tips, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Month == \"April\" && row.t2.Name == \"Michelle\").Select(row => row.t1.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "489d11fd9d23f20c148212a50d11faa99e21b1c226cb8dab3008ae3c42c00840",
    "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.state = \"Texas\" AND t2.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.State == \"Texas\" && row.t2.CategoryName == \"restaurant\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7185d07d35e23eda31d66191f13fe584d305a0790b903293729b6af263e36c5d",
    "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Dallas\" AND t1.rating > 3.5 AND t2.category_name = \"Bars\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.City == \"Dallas\" && row.t1.Rating > 3.5 && row.t2.CategoryName == \"Bars\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "21c22519d30ce5f09c0b6122150158c653ab480742b6b4af70cb3bdd83472f35",
    "sql": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.city = \"Dallas\" AND t1.name = \"Texas de Brazil\" AND t1.state = \"Texas\" AND t2.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.City == \"Dallas\" && row.t1.Name == \"Texas de Brazil\" && row.t1.State == \"Texas\" && row.t2.CategoryName == \"restaurant\").Select(row => row.t4.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "09ee2c7fa207c65ed59a19f97e015f5719e24c36405ad913bbdfab21a31ec7bc",
    "sql": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.name = \"Bistro Di Napoli\" AND t2.year = 2015;",
    "linq": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Name == \"Bistro Di Napoli\" && row.t2.Year == 2015).Select(row => row.t3.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "011f21400748903edfd4796fdf0e40a66d691fe45bdbe0ac93953a38095b6c45",
    "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t3 JOIN business AS t1 ON t3.business_id = t1.business_id JOIN neighbourhood AS t2 ON t2.business_id = t1.business_id WHERE t1.city = \"Dallas\" AND t3.category_name = \"restaurant\" AND t2.neighbourhood_name = \"Hazelwood\";",
    "linq": "context.Categories.Join(context.Businesses, t3 => t3.BusinessId, t1 => t1.BusinessId, (t3, t1) => new { t3, t1 }).Join(context.Neighbourhoods, joined => joined.t1.BusinessId, t2 => t2.BusinessId, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.City == \"Dallas\" && row.t3.CategoryName == \"restaurant\" && row.t2.NeighbourhoodName == \"Hazelwood\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e91351519db546d8035513d5e705b96b4e0cac8fd39e3ba39d2faaed95962b8e",
    "sql": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city = \"Dallas\" AND name = \"Starbucks\" AND state = \"Texas\";",
    "linq": "context.Businesses.Where(row => row.City == \"Dallas\" && row.Name == \"Starbucks\" && row.State == \"Texas\").Select(row => row.BusinessId).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2f03e1a51302e7b1e2bae6f6b08562b5eb47926f673b06fe496509235ac95b97",
    "sql": "SELECT review_count FROM business WHERE name = \"Acacia Cafe\";",
    "linq": "context.Businesses.Where(row => row.Name == \"Acacia Cafe\").Select(row => new { row.ReviewCount }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "75a4ff942723142eb8ab0667c7d0b1a9a6b82fe86fd795005e0b447b0b095ab8",
    "sql": "SELECT AVG ( t3.count ) , t3.day FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN checkin AS t3 ON t3.business_id = t1.business_id WHERE t1.name = \"Barrio Cafe\" AND t2.category_name = \"restaurant\" GROUP BY t3.day;",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Checkins, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Name == \"Barrio Cafe\" && row.t2.CategoryName == \"restaurant\").GroupBy(row => new { row.t3.Day }).Select(group => new { AverageCount = group.Select(row => row.t3.Count).Average(), group.Key.Day }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6b8061d058cfe7e68f7a7551b37263140a4b7b8853459276eae55f0dad0d0527",
    "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM neighbourhood AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Madison\" AND t2.neighbourhood_name = \"Stone Meadows\";",
    "linq": "context.Neighbourhoods.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.City == \"Madison\" && row.t2.NeighbourhoodName == \"Stone Meadows\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "146d306a088e6366f6d0d466d855e206380980c3d87eef359b3cc6e4f125054d",
    "sql": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t2.name = \"Adrienne\";",
    "linq": "context.Users.Join(context.Reviews, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Name == \"Adrienne\").Select(row => row.t1.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "84cd0f937f109dbc8e25319936e1d120311a277c55bddc6c7bbdc70dccb6fc0a",
    "sql": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t1.month = \"March\" AND t1.year = 2014 AND t2.name = \"Michelle\";",
    "linq": "context.Users.Join(context.Reviews, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Month == \"March\" && row.t1.Year == 2014 && row.t2.Name == \"Michelle\").Select(row => row.t1.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d8c2a03b2c342083eaa3b127135a31431ddf856c7cdde397fc1aad3745d61142",
    "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t2.year = 2010 AND t3.name = \"Michelle\";",
    "linq": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Year == 2010 && row.t3.Name == \"Michelle\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "979578c4faa27941a0ee477f4a27e71838ee1d2747c7ae3655a0b46c8b8fc85b",
    "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.city = \"San Diego\" AND t2.year = 2010 AND t3.name = \"Christine\";",
    "linq": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"San Diego\" && row.t2.Year == 2010 && row.t3.Name == \"Christine\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "451b258319289cea99365e6dbb69c7edca55bb62f4389923eadbbf8b6ec5ba5c",
    "sql": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city = \"Los Angeles\" AND name = \"Target\";",
    "linq": "context.Businesses.Where(row => row.City == \"Los Angeles\" && row.Name == \"Target\").Select(row => row.BusinessId).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a8883eef77e7923e4052373a32ef7758d4de13c06999f57e4b1ce895e567d09b",
    "sql": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.city = \"Dallas\" AND t2.category_name = \"Irish Pub\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.City == \"Dallas\" && row.t2.CategoryName == \"Irish Pub\").Select(row => row.t4.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "642200bab1e69a93c0c4fb98d29af4ebb5d8051d6d54f5329a9594658f4c7d37",
    "sql": "SELECT AVG ( rating ) FROM review WHERE YEAR = 2014;",
    "linq": "context.Reviews.Where(row => row.Year == 2014).Select(row => (double) row.Rating).Average();",
    "db_name": "yelp",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b974c121e879f7a4e5d75cf49bfb2762b68d3a525b88814b425bc7fbacdaa204",
    "sql": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.name = \"Vintner Grill\" AND t2.category_name = \"category_category_name0\" AND t3.year = 2010;",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.Name == \"Vintner Grill\" && row.t2.CategoryName == \"category_category_name0\" && row.t3.Year == 2010).Select(row => row.t4.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "930ca9c6fc2e82b586c361a7e02dcf7f33ec6dde9feff29468cdbb27a28b8230",
    "sql": "SELECT COUNT ( DISTINCT t3.text ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id = t2.business_id JOIN review AS t3 ON t3.business_id = t2.business_id WHERE t1.neighbourhood_name = \"South Summerlin\";",
    "linq": "context.Neighbourhoods.Join(context.Businesses, t1 => t1.BusinessId, t2 => t2.BusinessId, (t1, t2) => new { t1, t2 }).Join(context.Reviews, joined => joined.t2.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.NeighbourhoodName == \"South Summerlin\").Select(row => row.t3.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c1fdc1d15e198d243e52dd70b7cdee82a68a6f984792c680ed186aecaba03b2",
    "sql": "SELECT COUNT ( DISTINCT name ) FROM USER WHERE name = \"Michelle\";",
    "linq": "context.Users.Where(row => row.Name == \"Michelle\").Select(row => row.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3eff9e1f01c69a72abe9d545cfa869029f9f301ed77d7654ef41b65d4cb68735",
    "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t2.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.CategoryName == \"restaurant\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b7620231efea08ab8550089b0c77020e023621de4873f0101d5383310d9165fd",
    "sql": "SELECT COUNT ( DISTINCT city ) FROM business WHERE name = \"Panda Express\";",
    "linq": "context.Businesses.Where(row => row.Name == \"Panda Express\").Select(row => row.City).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "557e3dc1c0002ff53b4925439a931b169f3180c33366062558242f81d9ab9ba4",
    "sql": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id WHERE t2.name = \"Michelle\";",
    "linq": "context.Users.Join(context.Tips, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Name == \"Michelle\").Select(row => row.t1.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "86711b17e04a3b6416e8909762606c2773e6a13ce2acccb059509c2be66d8c16",
    "sql": "SELECT SUM ( t3.count ) FROM checkin AS t3 JOIN business AS t1 ON t3.business_id = t1.business_id JOIN neighbourhood AS t2 ON t2.business_id = t1.business_id WHERE t2.neighbourhood_name = \"Brighton Heights\";",
    "linq": "context.Checkins.Join(context.Businesses, t3 => t3.BusinessId, t1 => t1.BusinessId, (t3, t1) => new { t3, t1 }).Join(context.Neighbourhoods, joined => joined.t1.BusinessId, t2 => t2.BusinessId, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t2.NeighbourhoodName == \"Brighton Heights\").Select(row => row.t3.Count).Sum();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c49ba8a802d83e86b7df7e115e60b0506d46897092a77b49e5b3b5afb2a1f7d3",
    "sql": "SELECT COUNT ( DISTINCT text ) FROM review WHERE MONTH = \"March\";",
    "linq": "context.Reviews.Where(row => row.Month == \"March\").Select(row => row.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eeab4cf7e1917b587fc986759502693b09c795c1c942535ddc29bafc5da60b86",
    "sql": "SELECT COUNT ( DISTINCT text ) , MONTH FROM tip GROUP BY MONTH;",
    "linq": "context.Tips.GroupBy(row => new { row.Month }).Select(group => new { CountDistinctText = group.Select(row => row.Text).Distinct().Count(), group.Key.Month }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c93258d79bbe5fda39c92a259702277dd0eb79f2555d9ee8641aa1dc14c7e36",
    "sql": "SELECT COUNT ( DISTINCT t1.neighbourhood_name ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id = t2.business_id WHERE t2.city = \"Madison\" AND t2.rating = 5;",
    "linq": "context.Neighbourhoods.Join(context.Businesses, t1 => t1.BusinessId, t2 => t2.BusinessId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.City == \"Madison\" && row.t2.Rating == 5).Select(row => row.t1.NeighbourhoodName).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9e11ce603e04b739226e40b189bb44751283280162576a8f1a8858675c42ed39",
    "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.state = \"Texas\" AND t2.category_name = \"Moroccan\" AND t3.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.State == \"Texas\" && row.t2.CategoryName == \"Moroccan\" && row.t3.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "244231d6b133e711f2ef063c71d6b0c048ea2471d4fd32e4e3e0b9955c90ceb7",
    "sql": "SELECT t1.name FROM checkin AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id GROUP BY t1.name ORDER BY SUM ( t2.count ) DESC LIMIT 1;",
    "linq": "context.Checkins.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).GroupBy(row => new { row.t1.Name }).OrderByDescending(group => group.Sum(row => row.t2.Count)).Select(group => new { group.Key.Name }).Take(1).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2aec042558d95681dcb624b6b37650e4a64dd53e64e8afe03f7aa8fc1f545077",
    "sql": "SELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id = t2.business_id WHERE t2.city = \"Madison\" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1;",
    "linq": "context.Neighbourhoods.Join(context.Businesses, t1 => t1.BusinessId, t2 => t2.BusinessId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.City == \"Madison\").GroupBy(row => new { row.t1.NeighbourhoodName }).OrderByDescending(group => group.Count(row => row.t2.Name != null)).Select(group => new { group.Key.NeighbourhoodName }).Take(1).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "60851ea462db853f3833f67e533a07bf745b33c15dbe3ac145323219a2d77888",
    "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = \"Dallas\" AND t1.rating > 3.5 AND t2.category_name = \"Mexican\" AND t3.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"Dallas\" && row.t1.Rating > 3.5 && row.t2.CategoryName == \"Mexican\" && row.t3.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "89fed94bf540baecd7c81e4fd85acae433d4fa652c4d64990143912574ca3cba",
    "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = \"Dallas\" AND t1.state = \"Texas\" AND t2.category_name = \"Valet Service\" AND t3.category_name = \"restaurant\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"Dallas\" && row.t1.State == \"Texas\" && row.t2.CategoryName == \"Valet Service\" && row.t3.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "83dbca190cc80e0b227a589478f659e825c5a3ec5ad0fdd5f95b213b95230a14",
    "sql": "SELECT t1.name FROM category AS t3 JOIN business AS t1 ON t3.business_id = t1.business_id JOIN category AS t4 ON t4.business_id = t1.business_id JOIN neighbourhood AS t2 ON t2.business_id = t1.business_id WHERE t1.city = \"Madison\" AND t3.category_name = \"Italian\" AND t4.category_name = \"restaurant\" AND t2.neighbourhood_name = \"Meadowood\";",
    "linq": "context.Categories.Join(context.Businesses, t3 => t3.BusinessId, t1 => t1.BusinessId, (t3, t1) => new { t3, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t3, joined.t1, t4 }).Join(context.Neighbourhoods, joined => joined.t1.BusinessId, t2 => t2.BusinessId, (joined, t2) => new { joined.t3, joined.t1, joined.t4, t2 }).Where(row => row.t1.City == \"Madison\" && row.t3.CategoryName == \"Italian\" && row.t4.CategoryName == \"restaurant\" && row.t2.NeighbourhoodName == \"Meadowood\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6faffba12542edd51c33ccd08d6d9594f26b440240f24181631dae7bce240a65",
    "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t1.rating > 3 AND t1.review_count > 30 AND t2.category_name = \"Bars\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.City == \"Los Angeles\" && row.t1.Rating > 3 && row.t1.ReviewCount > 30 && row.t2.CategoryName == \"Bars\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "824d2b4c439f8c5061780cfb288fc1c4a119d41fbe098397bebc24331fdd568f",
    "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = \"Edinburgh\" AND t2.category_name = \"restaurant\" AND t3.category_name = \"Egyptian\";",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"Edinburgh\" && row.t2.CategoryName == \"restaurant\" && row.t3.CategoryName == \"Egyptian\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5f7a7d0991840cc3b4a00a2a2d9a10ad6deb89f3e207c9a475a3bf548fd13b34",
    "sql": "SELECT t2.name FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id GROUP BY t2.name HAVING AVG ( t1.rating ) < 3;",
    "linq": "context.Users.Join(context.Reviews, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).GroupBy(row => new { row.t2.Name }).Where(group => group.Average(row => row.t1.Rating) < 3).Select(group => new { group.Key.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4aec9347e840cd9cc403d0792d3dc3a4acffc8fd609402192ab41720e301b5c1",
    "sql": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t2.month = \"April\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.text ) DESC LIMIT 1;",
    "linq": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Month == \"April\").GroupBy(row => new { row.t1.Name }).OrderByDescending(group => group.Count(row => row.t2.Text != null)).Select(group => new { group.Key.Name }).Take(1).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bc08c72696ccf01212fffd9b054ba1905a0aaa701ad6474cec4dc299d94eb53c",
    "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;",
    "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).GroupBy(row => new { row.t1.Name }).OrderByDescending(group => group.Count(row => row.t2.CategoryName != null)).Select(group => new { group.Key.Name }).Take(1).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c776a21d83aaf738757d8db2bc852b033afd969d936aa8c62abccb45fa798bed",
    "sql": "SELECT document_name , access_count FROM documents ORDER BY document_name",
    "linq": "context.Documents.OrderBy(row => row.DocumentName).Select(row => new { row.DocumentName, row.AccessCount }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "291119ce56cbe71d5e153247f993c76d9e66f5837b11bcf4835b3b265de3f350",
    "sql": "SELECT document_name , access_count FROM documents ORDER BY access_count DESC LIMIT 1",
    "linq": "context.Documents.OrderByDescending(row => row.AccessCount).Select(row => new { row.DocumentName, row.AccessCount }).Take(1).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "18fbfa71dbec3f9a13c0eb4772ce2d19730e3116bc4856ffb276c9dd3aca32a5",
    "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*) > 4",
    "linq": "context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Where(group => group.Count() > 4).Select(group => new { group.Key.DocumentTypeCode }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f5941440a374b5b20f1a9ad806d4869b69e15862d7fc9e056924df8727631d17",
    "sql": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Documents.GroupBy(row => new { row.DocumentTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { SumAccessCount = group.Select(row => row.AccessCount).Sum() }).Take(1);",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "10ba4b01feee4e834ef290ed28a73f408d784819268cf2fd9854aa635fc32b99",
    "sql": "SELECT avg(access_count) FROM documents",
    "linq": "context.Documents.Select(row => row.AccessCount).Average();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5902e60a1cbdc9b7704e07a8ac4c75d58f6579690ee59250b406ec86107f6313",
    "sql": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code = t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Documents.Join(context.DocumentStructures, t1 => t1.DocumentStructureCode, t2 => t2.DocumentStructureCode, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.DocumentStructureCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t2.DocumentStructureDescription }).Take(1).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9e276cc9409a23d259a3a06c45f930d72bdbb4c005f226aaf9069afd3365690c",
    "sql": "SELECT document_type_code FROM documents WHERE document_name = \"David CV\"",
    "linq": "context.Documents.Where(row => row.DocumentName == \"David CV\").Select(row => new { row.DocumentTypeCode }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a3de7d99b54620904277cf67b203f309dcd0bfbb9723e44aed69373a95cb7718",
    "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count) > 10000",
    "linq": "context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Where(group => group.Sum(row => row.AccessCount) > 10000).Select(group => new { group.Key.DocumentTypeCode }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5a10eb73788bc10faccadd15ee08356791b70bb03a04b4564816e66a58791e29",
    "sql": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code WHERE t1.document_name = \"David CV\"",
    "linq": "context.Documents.Join(context.DocumentSections, t1 => t1.DocumentCode, t2 => t2.DocumentCode, (t1, t2) => new { t1, t2 }).Where(row => row.t1.DocumentName == \"David CV\").Select(row => new { row.t2.SectionTitle }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cea81a137ccfc2b913a90a750b95236f57973151796a625fa231cb0647c54c13",
    "sql": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
    "linq": "context.Documents.Where(row => !context.DocumentSections.Select(row => row.DocumentCode).Contains(row.DocumentCode)).Select(row => new { row.DocumentName }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "35ab49e869fed1c8dff07be347ed1539bdde56ab7950a308307194459955143c",
    "sql": "SELECT user_name , password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Users.GroupBy(row => new { row.RoleCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().UserName, group.First().Password }).Take(1).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "121e3fe1ceb9402332b4c8425d033d0443de80096f0cd17e28cf882a90d41ac6",
    "sql": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code WHERE t3.functional_area_description = \"Acknowledgement\"",
    "linq": "context.Documents.Join(context.DocumentFunctionalAreas, t1 => t1.DocumentCode, t2 => t2.DocumentCode, (t1, t2) => new { t1, t2 }).Join(context.FunctionalAreas, joined => joined.t2.FunctionalAreaCode, t3 => t3.FunctionalAreaCode, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.FunctionalAreaDescription == \"Acknowledgement\").Select(row => row.t1.AccessCount).Average();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fbd98ee749a42fd6b11ecb3f97cd7f80de3ea712350a2db9f81e563c527e7167",
    "sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id",
    "linq": "context.Documents.Select(row => row.DocumentName).Except(context.Documents.Join(context.DocumentSections, t1 => t1.DocumentCode, t2 => t2.DocumentCode, (t1, t2) => new { t1, t2 }).Join(context.DocumentSectionsImage, joined => joined.t2.SectionId, t3 => t3.SectionId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Select(row => row.t1.DocumentName)).ToList();",
    "db_name": "document_management",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,205): error CS1061: 'DocumentManagementContext' does not contain a definition for 'DocumentSectionsImage' and no accessible extension method 'DocumentSectionsImage' accepting a first argument of type 'DocumentManagementContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.50",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "742eb7b1cd1191397064ef3c6f18b94a326e65cb98efa6a0c3aca2e5c2614024",
    "sql": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Documents.Join(context.DocumentSections, t1 => t1.DocumentCode, t2 => t2.DocumentCode, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.DocumentCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.DocumentName }).Take(1).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e5b947c022a5f7009d2fd53e5cbbc955c10bf5e9eed67ff8d7ff22ea67b1bd07",
    "sql": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"",
    "linq": "context.Documents.Where(row => EF.Functions.Like(row.DocumentName, \"%CV%\")).Select(row => new { row.DocumentName }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "db81baf51ef01020474be42c87588bd8907c3d5f071f5054d637e563d0945b97",
    "sql": "SELECT count(*) FROM users WHERE user_login = 1",
    "linq": "context.Users.Where(row => row.UserLogin == \"1\").Count();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "354bdd66aa3a9eec7701afb2d46325215d068084e54d3566177d989dfebc0774",
    "sql": "SELECT role_description FROM ROLES WHERE role_code = (SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
    "linq": "context.Roles.Where(row => row.RoleCode == context.Users.Where(row => row.UserLogin == \"1\").GroupBy(row => new { row.RoleCode }).OrderByDescending(group => group.Count()).Select(group => group.Key.RoleCode).Take(1).First()).Select(row => new { row.RoleDescription }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d80c393ec2886f41661cccbd83d334306ac2e068a2226df52d6fc2c87f718792",
    "sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.Documents.GroupBy(row => new { row.DocumentStructureCode }).OrderBy(group => group.Count()).Select(group => new { AverageAccessCount = group.Select(row => row.AccessCount).Average() }).Take(1);",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cc32a10a4c89c8f7eea5eaf230e10c141cc9e4a82196a4125768f7c2b86d35b4",
    "sql": "SELECT image_name , image_url FROM images ORDER BY image_name",
    "linq": "context.Images.OrderBy(row => row.ImageName).Select(row => new { row.ImageName, row.ImageUrl }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e788b2f20fd89a9b5bab42e397449770f9c30e0199ad882d23b09a2aebbcd505",
    "sql": "SELECT count(*) , role_code FROM users GROUP BY role_code",
    "linq": "context.Users.GroupBy(row => new { row.RoleCode }).Select(group => new { Count = group.Count(), group.Key.RoleCode }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3dffaed5e651482a263c5f8c8ef06afbf4852dcaf65f94af3fdcf5c7273d2adf",
    "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*) > 2",
    "linq": "context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Where(group => group.Count() > 2).Select(group => new { group.Key.DocumentTypeCode }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e31e03a9f943a2aad1df567d6914ee463fe05c02a843a2477c48f90451876490",
    "sql": "SELECT count(*) FROM railway",
    "linq": "context.Railways.Count();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1ba6d4c45bc46aabe8677d841dcfc018781180bd5a5d709551699efbd8d200d5",
    "sql": "SELECT Builder FROM railway ORDER BY Builder ASC",
    "linq": "context.Railways.OrderBy(row => row.Builder).Select(row => new { row.Builder }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e0380f9bf8e38d73a3e52267fa0702b5b59cbf75ac4577bc05d7ba711f2405b0",
    "sql": "SELECT Wheels , LOCATION FROM railway",
    "linq": "context.Railways.Select(row => new { row.Wheels, row.Location }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "061209d1ccf4d0834c527184932cf211c314d0482580119b57ceab54e531f644",
    "sql": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia \"",
    "linq": "context.Managers.Where(row => row.Country != \"Australia \").Select(row => row.Level).Max();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0fe59fa6ad8c80e0d91ca268f43bfd9b061b1d942b31de148949ac992b810b76",
    "sql": "SELECT avg(Age) FROM manager",
    "linq": "context.Managers.Select(row => row.Age).Average();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5090fda32ea9f49aa86117f4869a59ebd69c65b6dfc6a236db146210a314957c",
    "sql": "SELECT Name FROM manager ORDER BY LEVEL ASC",
    "linq": "context.Managers.OrderBy(row => row.Level).Select(row => new { row.Name }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fd2ddb44ce90909dda926f1574ae6986eba19de297f85f23567762ac65674729",
    "sql": "SELECT Name , Arrival FROM train",
    "linq": "context.Trains.Select(row => new { row.Name, row.Arrival }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bf3baa8df6f7ddcf4f51d226eaa1a0f41480631fd27a1eff4b42021f158eeeda",
    "sql": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1",
    "linq": "context.Managers.OrderByDescending(row => row.Age).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "75b84661ac7be1a4629560170c912b8c8c6ad5df8d819fa212763a1e60fc8748",
    "sql": "SELECT T2.Name , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID",
    "linq": "context.Railways.Join(context.Trains, T1 => T1.RailwayId, T2 => T2.RailwayId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name, row.T1.Location }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c85d27fdc1d25c265d0c1cf523b82513259e73aaebce85d0860f80a024d54b5",
    "sql": "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.Name = \"Andaman Exp\"",
    "linq": "context.Railways.Join(context.Trains, T1 => T1.RailwayId, T2 => T2.RailwayId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Andaman Exp\").Select(row => new { row.T1.Builder }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3ed3b167141a7950aaece0f7e940409050da17dc1f8dde6a980cf1ab554f1d0f",
    "sql": "SELECT T2.Railway_ID , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*) > 1",
    "linq": "context.Railways.Join(context.Trains, T1 => T1.RailwayId, T2 => T2.RailwayId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.RailwayId }).Where(group => group.Count() > 1).Select(group => new { group.Key.RailwayId, group.First().T1.Location }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "59c5cdb8cd592a799693e2d8adf2d13e056765ca83a23ece5b74603b9e16734e",
    "sql": "SELECT T2.Railway_ID , T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Railways.Join(context.Trains, T1 => T1.RailwayId, T2 => T2.RailwayId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.RailwayId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.RailwayId, group.First().T1.Builder }).Take(1).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "66c0bf36808c89c94532fa178f5757ea9e55def04e428f5da87e2eb3bd7a8ee4",
    "sql": "SELECT Builder , COUNT(*) FROM railway GROUP BY Builder",
    "linq": "context.Railways.GroupBy(row => new { row.Builder }).Select(group => new { group.Key.Builder, Count = group.Count() }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a7d61028c55c531440130ed1db4c2bd3fa0147d9e14f80b50d7f37545499132d",
    "sql": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Railways.GroupBy(row => new { row.Builder }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Builder }).Take(1).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "60d53de310d035718a6a4bc5a519cf58c3236db4bfedb2e9e8ea803c32f7b58a",
    "sql": "SELECT LOCATION , COUNT(*) FROM railway GROUP BY LOCATION",
    "linq": "context.Railways.GroupBy(row => new { row.Location }).Select(group => new { group.Key.Location, Count = group.Count() }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d512b648e0fb237dec7993c4a7374d12864b65bbf490e47671230a49b9cc6f2e",
    "sql": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*) > 1",
    "linq": "context.Railways.GroupBy(row => new { row.Location }).Where(group => group.Count() > 1).Select(group => new { group.Key.Location }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bee625fd30a763de83ff74b0ea70434c20b598d4b7044a989d544b19d29b6ba2",
    "sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)",
    "linq": "context.Railways.Where(row => !context.Trains.Select(row => row.RailwayId).Contains(row.RailwayId)).Select(row => new { row.ObjectNumber }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c2a386eaf881c9cd14b0c82167cd32dfe99919082851d4c8cb34473aeebb4ace",
    "sql": "SELECT Country FROM manager WHERE Age > 50 INTERSECT SELECT Country FROM manager WHERE Age < 46",
    "linq": "context.Managers.Where(row => row.Age > 50).Select(row => row.Country).Intersect(context.Managers.Where(row => row.Age < 46).Select(row => row.Country)).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f0e13fe83495e2bb224d0c1e28c7878c3938cd074ce0d8ca1e521fab3c638f92",
    "sql": "SELECT DISTINCT Country FROM manager",
    "linq": "context.Managers.Select(row => new { row.Country }).Distinct().ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9b198f4270bb0b874998b653dd1af3ea1172e2262d4f7ba2264c6d1f013df512",
    "sql": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC",
    "linq": "context.Managers.OrderByDescending(row => row.Level).Select(row => new { row.WorkingYearStarts }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a427283cd19f977953be991746adde5d0555b356956e6440db2e837895c93023",
    "sql": "SELECT Country FROM manager WHERE Age > 50 OR Age < 46",
    "linq": "context.Managers.Where(row => row.Age > 50 || row.Age < 46).Select(row => new { row.Country }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c942173bb5dd0578b443fd5dbc7d0e777c4d9192b74002c84b7d80a2c3679471",
    "sql": "SELECT count(*) FROM flight WHERE velocity > 200",
    "linq": "context.Flights.Where(row => row.Velocity > 200).Count();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f32cc2632ed0ef41c0b81568f5060c4c5b08639b92d723d3b2495eff01f00d33",
    "sql": "SELECT vehicle_flight_number , date , pilot FROM flight ORDER BY altitude ASC",
    "linq": "context.Flights.OrderBy(row => row.Altitude).Select(row => new { row.VehicleFlightNumber, row.Date, row.Pilot }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c3f223a3c442762a6dba79b394511c564db2d3561645fa59e288995dedb762c7",
    "sql": "SELECT id , country , city , name FROM airport ORDER BY name",
    "linq": "context.Airports.OrderBy(row => row.Name).Select(row => new { row.Id, row.Country, row.City, row.Name }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "25df7e87db2ac2c3697015bbe5d5dd3530d42218d1fc97fc33bcd73b079e0d0c",
    "sql": "SELECT max(group_equity_shareholding) FROM operate_company",
    "linq": "context.OperateCompanies.Select(row => row.GroupEquityShareholding).Max();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "03e66fe779f60ca2268ffd0cd379480373e77c5dea503f4e0b20bb0cd2c53754",
    "sql": "SELECT avg(velocity) FROM flight WHERE pilot = 'Thompson'",
    "linq": "context.Flights.Where(row => row.Pilot == \"Thompson\").Select(row => (double) row.Velocity).Average();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "78884b2d3a01be7f72d11e1bf8a610f2286ee6b0f12be6b61498c2b2b6371590",
    "sql": "SELECT T1.name , T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
    "linq": "context.OperateCompanies.Join(context.Flights, T1 => T1.Id, t2 => t2.CompanyId, (T1, t2) => new { T1, t2 }).Select(row => new { row.T1.Name, row.T1.Type }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7494a2ed5a9a62707e6f9b4dc08598a7612185a1c6177224d10c916e6b8877a9",
    "sql": "SELECT name FROM airport WHERE country != 'Iceland'",
    "linq": "context.Airports.Where(row => row.Country != \"Iceland\").Select(row => new { row.Name }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d8d62a6c1a6c0252b3dca5801ba6ef12d25f0695a15c2c3dc33ccb69974df298",
    "sql": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T2.velocity < 200",
    "linq": "context.OperateCompanies.Join(context.Flights, T1 => T1.Id, t2 => t2.CompanyId, (T1, t2) => new { T1, t2 }).Where(row => row.t2.Velocity < 200).Select(row => new { row.T1.Type }).Distinct().ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "88ee42074afd957a356a42b80fe904ae953f56724b0d596071c78cef3304eb1b",
    "sql": "SELECT T1.id , T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY T1.id HAVING count(*) > 1",
    "linq": "context.OperateCompanies.Join(context.Flights, T1 => T1.Id, t2 => t2.CompanyId, (T1, t2) => new { T1, t2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() > 1).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b12e077b6a0ceba323ae35a80f100bf5f96771c85b50ed3539cd42e9f1c9b3d5",
    "sql": "SELECT T1.id , T1.name , T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Airports.Join(context.Flights, T1 => T1.Id, T2 => T2.AirportId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name, group.First().T1.Iata }).Take(1).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "130f177745234015cf0d464100256d2966f25c47a1246ec4e2fa36dcfaa002cd",
    "sql": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T1.country = 'United States' OR T1.name = 'Billund Airport'",
    "linq": "context.Airports.Join(context.Flights, T1 => T1.Id, T2 => T2.AirportId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Country == \"United States\" || row.T1.Name == \"Billund Airport\").Select(row => new { row.T2.Pilot }).Distinct().ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ec56b0e3f9a979d4fe8f3d2acf76e0c7f014905cf647d96affc5a8e3bbd555e0",
    "sql": "SELECT TYPE , count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.OperateCompanies.GroupBy(row => new { row.Type }).Select(group => new { group.Key.Type, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1d42ff872a3bdee81ff19318cdaec3b7c9ea363c26a4bc74b092f4a9529d02ff",
    "sql": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot = 'Thompson' );",
    "linq": "context.Airports.Where(row => !context.Flights.Where(row => row.Pilot == \"Thompson\").Select(row => row.AirportId).Contains(row.Id)).Count();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0db2cc6c094d155b8e7e7c5909214d4695f5a876256b34a520edc9c16c6dbf73",
    "sql": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T1.principal_activities = 'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T1.principal_activities = 'Catering services'",
    "linq": "context.OperateCompanies.Join(context.Flights, T1 => T1.Id, t2 => t2.CompanyId, (T1, t2) => new { T1, t2 }).Where(row => row.T1.PrincipalActivities == \"Cargo\").Select(row => row.t2.Pilot).Intersect(context.OperateCompanies.Join(context.Flights, T1 => T1.Id, t2 => t2.CompanyId, (T1, t2) => new { T1, t2 }).Where(row => row.T1.PrincipalActivities == \"Catering services\").Select(row => row.t2.Pilot)).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2ebc0e2f47d4e36a1ccdafb8bd60999286a49eb452da9fafa1b53f3662eaa749",
    "sql": "SELECT name FROM airport WHERE name LIKE '%international%'",
    "linq": "context.Airports.Where(row => EF.Functions.Like(row.Name, \"%international%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b5f0d2857c7c1f1ac7ca00c2806557f5a7269ce69f422a4987dd72cbcbec2326",
    "sql": "SELECT T3.id , count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id JOIN airport AS T3 ON T2.airport_id = T3.id GROUP BY T3.id",
    "linq": "context.OperateCompanies.Join(context.Flights, T1 => T1.Id, t2 => t2.CompanyId, (T1, t2) => new { T1, t2 }).Join(context.Airports, joined => joined.t2.AirportId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.t2, T3 }).GroupBy(row => new { row.T3.Id }).Select(group => new { group.Key.Id, Count = group.Count() }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c9342ed49a9dd8e418f2f0ea6d8be66d1494f9ea62d5dd4b5c1031030bc1d656",
    "sql": "SELECT count(*) , country FROM airport GROUP BY country",
    "linq": "context.Airports.GroupBy(row => new { row.Country }).Select(group => new { Count = group.Count(), group.Key.Country }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "75c4ed97c74d07577cf38f620935cd746d580c72336950ae81c5b88cd55f97bb",
    "sql": "SELECT country FROM airport GROUP BY country HAVING count(*) > 2",
    "linq": "context.Airports.GroupBy(row => new { row.Country }).Where(group => group.Count() > 2).Select(group => new { group.Key.Country }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6ef3404254c1e5c9fbd125c2232e165f29412d02a49c46411c3694d8478a86d7",
    "sql": "SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Flights.GroupBy(row => new { row.Pilot }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Pilot }).Take(1).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0cb07a1570a5e699a50290a36c9b63eba47ccbf43d443fd47778fb2809bffd0a",
    "sql": "SELECT campus FROM campuses WHERE county = \"Los Angeles\"",
    "linq": "context.Campuses.Where(row => row.County == \"Los Angeles\").Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "653a72d8d7df7c2acb4948f9d0f58dedd639fcb05ccd9be5ce649e7176078488",
    "sql": "SELECT campus FROM campuses WHERE LOCATION = \"Chico\"",
    "linq": "context.Campuses.Where(row => row.Location == \"Chico\").Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e90896b1e5e36438971820cbb212f8e71bf73ed5f4e2afb13e589bdd458ea6dc",
    "sql": "SELECT campus FROM campuses WHERE YEAR = 1958",
    "linq": "context.Campuses.Where(row => row.Year == 1958).Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e6a378e91a9792840287d9b047a7fab43104a9f4b9e10c5fd8d42f2031274623",
    "sql": "SELECT campus FROM campuses WHERE YEAR < 1800",
    "linq": "context.Campuses.Where(row => row.Year < 1800).Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1bd51a41f3ffc9294c30685aa9b86934f0124b1ac28de8b163bbdd76a61fb34e",
    "sql": "SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939",
    "linq": "context.Campuses.Where(row => row.Year >= 1935 && row.Year <= 1939).Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "047fb5239a07238423c2d8006faba0f2715d7e586ccfc555bace0c0d27e9ea78",
    "sql": "SELECT campus FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION = \"San Francisco\" AND county = \"San Francisco\"",
    "linq": "context.Campuses.Where(row => row.Location == \"Northridge\" && row.County == \"Los Angeles\").Select(row => row.Campus1).Union(context.Campuses.Where(row => row.Location == \"San Francisco\" && row.County == \"San Francisco\").Select(row => row.Campus1)).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7b26066c22b71777fff9a36f5778a72bf1d844d3fd764c0e6ce4bc1248888fc0",
    "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND T2.year = 1996",
    "linq": "context.Campuses.Join(context.CsuFees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Jose State University\" && row.T2.Year == 1996).Select(row => new { row.T2.CampusFee }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "04843200270841c80bdf86cf75b73d11047a7f21247fd17cbfa52af43b54d3f4",
    "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND T2.year = 1996",
    "linq": "context.Campuses.Join(context.CsuFees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Francisco State University\" && row.T2.Year == 1996).Select(row => new { row.T2.CampusFee }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c469b9d9a3d09fcc398c98e452f3b4242e9488f207f19a4431a04633b0e524b9",
    "sql": "SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)",
    "linq": "context.CsuFees.Where(row => row.CampusFee > context.CsuFees.Select(row => row.CampusFee).Average()).Count();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "00e1dbdb96e7e645527006d274faec0b61c5999b573881f7bebb0a6e6679139d",
    "sql": "SELECT campus FROM campuses WHERE county = \"Los Angeles\" AND YEAR > 1950",
    "linq": "context.Campuses.Where(row => row.County == \"Los Angeles\" && row.Year > 1950).Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d9a805b8d221ae931de24f94e004df245f8725070e6d607409c3045104e454a2",
    "sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
    "linq": "context.Degrees.GroupBy(row => new { row.Year }).OrderByDescending(group => group.Sum(row => row.Degrees)).Select(group => new { group.Key.Year }).Take(1).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ab6db467b206bd0d16678adb650d74124f03212597a23e520b1fb4e22a30fe1a",
    "sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
    "linq": "context.Degrees.GroupBy(row => new { row.Campus }).OrderByDescending(group => group.Sum(row => row.Degrees)).Select(group => new { group.Key.Campus }).Take(1).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7737cf0eacf4543d7606714f768d9633bfe3e7d8170b7e235287eef991c6f714",
    "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 ORDER BY T2.faculty DESC LIMIT 1",
    "linq": "context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2003).OrderByDescending(row => row.T2.Faculty1).Select(row => new { row.T1.Campus1 }).Take(1).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9b20546379d559d52e9c2f6a4030e4317781bc6da389b42329e008f9a07f10b1",
    "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 1996",
    "linq": "context.CsuFees.Where(row => row.Year == 1996).Select(row => row.CampusFee).Average();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6f55f9df37341c1dbfc9570387fe33ca616462932c4105cb910a9a42a4c183fe",
    "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 2005",
    "linq": "context.CsuFees.Where(row => row.Year == 2005).Select(row => row.CampusFee).Average();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f0d97681c941fcdc8b62ce3354699b8d9d81f57bbaa8dcc0020fd14d07148e90",
    "sql": "SELECT T1.campus , sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T2.year >= 1998 AND T2.year <= 2002 GROUP BY T1.campus",
    "linq": "context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year >= 1998 && row.T2.Year <= 2002).GroupBy(row => new { row.T1.Campus1 }).Select(group => new { group.Key.Campus1, SumDegrees = group.Select(row => row.T2.Degrees).Sum() }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f331594e1ae4c3a209778bf632690c20f79236b51df3a1c4f2d114a5a4ae3771",
    "sql": "SELECT T1.campus , sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T1.county = \"Orange\" AND T2.year >= 2000 GROUP BY T1.campus",
    "linq": "context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.County == \"Orange\" && row.T2.Year >= 2000).GroupBy(row => new { row.T1.Campus1 }).Select(group => new { group.Key.Campus1, SumDegrees = group.Select(row => row.T2.Degrees).Sum() }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a4c60f09a4593e24a62e919abd3b22263832a37eb3f7ac31f84ce68c47ab34a9",
    "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND faculty > (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = \"Orange\")",
    "linq": "context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2002 && row.T2.Faculty1 > context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2002 && row.T1.County == \"Orange\").Select(row => row.T2.Faculty1).Max()).Select(row => new { row.T1.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bb22e1e2805f6afd4d65358b7e2fec1313631758ddce1ea72ac1eb2b4bf78afc",
    "sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200",
    "linq": "context.Campuses.Join(context.Enrollments, t1 => t1.Id, t2 => t2.Campus, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Year == 1956 && row.t2.TotalEnrollmentAy > 400 && row.t2.FteAy > 200).Select(row => new { row.t1.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8380f0a7cb1bc40b42d3b9f6b263b8cfdd54a5e4deca0a2e8a4d92476d9646c6",
    "sql": "SELECT count(*) FROM campuses WHERE county = \"Los Angeles\"",
    "linq": "context.Campuses.Where(row => row.County == \"Los Angeles\").Count();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f9ddb9c9b0c212912590c3647d343734378e81adb42952473a0c4c2f66e100ef",
    "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 2000",
    "linq": "context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Jose State University\" && row.T2.Year == 2000).Select(row => new { row.T2.Degrees }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c73e26dd6e3a38730fa96d28b6b2089fae40707e18f69ac50bac1478993a7ee",
    "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND t2.year = 2001",
    "linq": "context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Francisco State University\" && row.T2.Year == 2001).Select(row => new { row.T2.Degrees }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2ec3918fd913be012499cfc21d958b7476514a5746cee8f013906d4890fdfdc0",
    "sql": "SELECT sum(faculty) FROM faculty WHERE YEAR = 2002",
    "linq": "context.Faculties.Where(row => row.Year == 2002).Select(row => row.Faculty1).Sum();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b0ce0ddc661a798fc6257b858d40b4a36160af385202a8eafa86931b46d7b5cb",
    "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2002 AND T2.campus = \"Long Beach State University\"",
    "linq": "context.Faculties.Join(context.Campuses, T1 => T1.Campus, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2002 && row.T2.Campus1 == \"Long Beach State University\").Select(row => new { row.T1.Faculty1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5d776be66fc85d32b72c90c920adf4595afb6e2f062a060cb0a6ba29956a6ffa",
    "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2004 AND T2.campus = \"San Francisco State University\"",
    "linq": "context.Faculties.Join(context.Campuses, T1 => T1.Campus, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2004 && row.T2.Campus1 == \"San Francisco State University\").Select(row => new { row.T1.Faculty1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e3453f2208dcbad4b485f76e1518f693211fc15d2a4dac7384a5be5d19716de4",
    "sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T1.year = 2004",
    "linq": "context.Campuses.Join(context.Faculties, t1 => t1.Id, t2 => t2.Campus, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Faculty1 >= 600 && row.t2.Faculty1 <= 1000 && row.t1.Year == 2004).Select(row => new { row.t1.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0befd14cb81a8598eaa2c6f75202af995cdcfcf32070a013ed61fa3dc33430dc",
    "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1",
    "linq": "context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Join(context.Degrees, joined => new { Pair1 = joined.T1.Id, Pair2 = joined.T2.Year }, T3 => new { Pair1 = joined.T3.Campus, Pair2 = joined.T3.Year }, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Year == 2002).OrderByDescending(row => row.T3.Degrees).Select(row => new { row.T2.Faculty1 }).Take(1).ToList();",
    "db_name": "csu_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,243): error CS0103: The name 'joined' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.38",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b4b39a1e7d10272dd7716d2f14496d43d713a9019148b80f4fcb09879abd0ae1",
    "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2001 ORDER BY t3.degrees LIMIT 1",
    "linq": "context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Join(context.Degrees, joined => new { Pair1 = joined.T1.Id, Pair2 = joined.T2.Year }, T3 => new { Pair1 = joined.T3.Campus, Pair2 = joined.T3.Year }, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Year == 2001).OrderBy(row => row.T3.Degrees).Select(row => new { row.T2.Faculty1 }).Take(1).ToList();",
    "db_name": "csu_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,243): error CS0103: The name 'joined' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.54",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7af1f7bc688abb05c5994e088a91a13fc4e395f9f87adb71e48b963ff512a34b",
    "sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Jose State University\"",
    "linq": "context.DisciplineEnrollments.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Year == 2004 && row.t2.Campus1 == \"San Jose State University\").Select(row => row.t1.Undergraduate).Sum();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c426ebc7aca958e0a8ca075bbc23f39e894bbb23cec6f80d52be20ba97cb93e7",
    "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Francisco State University\"",
    "linq": "context.DisciplineEnrollments.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Year == 2004 && row.t2.Campus1 == \"San Francisco State University\").Select(row => row.t1.Graduate).Sum();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b3dd9e8fa5a2109b0ac080c07f2155c2fccccba6a014aae9452fd0da3e9a2777",
    "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Francisco State University\" AND t1.year = 2000",
    "linq": "context.CsuFees.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Campus1 == \"San Francisco State University\" && row.t1.Year == 2000).Select(row => new { row.t1.CampusFee }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5bd4c8922ea4540f555d3faa6ed7341e00472b5b0d1262c811428137df26891e",
    "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Jose State University\" AND t1.year = 2000",
    "linq": "context.CsuFees.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Campus1 == \"San Jose State University\" && row.t1.Year == 2000).Select(row => new { row.t1.CampusFee }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b2d1e3ecc81cd50f82a1efdbbc7f8c0d91ef2581f97647e96bd6af31c7ac2101",
    "sql": "SELECT count(*) FROM campuses",
    "linq": "context.Campuses.Count();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e9dab3bfb624356c23dd26c3db274e8b896c6b2160a213ed0168c06d67aa59a1",
    "sql": "SELECT count(*) FROM authors",
    "linq": "context.Authors.Count();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a8d36371460550205b9b95b52cdc0dc6fd242bfe50fee4f878de28a9eb474c49",
    "sql": "SELECT count(*) FROM inst",
    "linq": "context.Insts.Count();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bca912ac4fa3e94167a49b385dffc0c5ca05028d30751a8a3bd5423a9343182b",
    "sql": "SELECT count(*) FROM papers",
    "linq": "context.Papers.Count();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "97047356160ef5a79f0791e641b7e64110bd003922926aae5f727f753e886539",
    "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Jeremy\" AND t1.lname = \"Gibbons\"",
    "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Fname == \"Jeremy\" && row.t1.Lname == \"Gibbons\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "60d2ea6ecb7f7f35423fc2ee501d11514c66e178a4a697b3483f46651756ba70",
    "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Aaron\" AND t1.lname = \"Turon\"",
    "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Fname == \"Aaron\" && row.t1.Lname == \"Turon\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "92f72750b45e3019935ecc2de42c8a513cf631fc0d31fdd7bac4fb7841a94070",
    "sql": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Atsushi\" AND t1.lname = \"Ohori\"",
    "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Fname == \"Atsushi\" && row.t1.Lname == \"Ohori\").Count();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7955400e39c6a1d243c9f2b753097dca4fc1619b94d4ceeb415a4f28652c8b40",
    "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Matthias\" AND t1.lname = \"Blume\"",
    "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Insts, joined => joined.t2.InstId, t3 => t3.InstId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Fname == \"Matthias\" && row.t1.Lname == \"Blume\").Select(row => new { row.t3.Name }).Distinct().ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "54285b83dc92db92a7f92d03f8f200468d76e364ab0612caa8d5b59bd81beffb",
    "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Katsuhiro\" AND t1.lname = \"Ueno\"",
    "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Insts, joined => joined.t2.InstId, t3 => t3.InstId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Fname == \"Katsuhiro\" && row.t1.Lname == \"Ueno\").Select(row => new { row.t3.Name }).Distinct().ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "27cdbcc849888c0870760b69a4c35a414ae431c5cbd8af97fb9376e490edd74b",
    "sql": "SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Oxford\"",
    "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Insts, joined => joined.t2.InstId, t3 => t3.InstId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Name == \"University of Oxford\").Select(row => new { row.t1.Fname, row.t1.Lname }).Distinct().ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2047b211a2d32b88da2903166ffbdc582dc961b3ff965e8b0a3f4b4da2d1a140",
    "sql": "SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\"",
    "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Insts, joined => joined.t2.InstId, t3 => t3.InstId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Name == \"Google\").Select(row => new { row.t1.Fname, row.t1.Lname }).Distinct().ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1177c52e26018a47ad36dc7ac94f11d11b2440a748a030caeedd12ef275afc51",
    "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Binders Unbound\"",
    "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Title == \"Binders Unbound\").Select(row => new { row.t1.Lname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4524f8af8daab14b86b2846c994e104e7ae8399005b2b6f2e482ef03a6b0cea7",
    "sql": "SELECT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Nameless , Painless\"",
    "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Title == \"Nameless , Painless\").Select(row => new { row.t1.Fname, row.t1.Lname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3f72022533560ffa0507b924f0e3069fad637d9655f1fa6397f75b79c8e23d42",
    "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Indiana University\"",
    "linq": "context.Papers.Join(context.Authorships, t1 => t1.PaperId, t2 => t2.PaperId, (t1, t2) => new { t1, t2 }).Join(context.Insts, joined => joined.t2.InstId, t3 => t3.InstId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Name == \"Indiana University\").Select(row => new { row.t1.Title }).Distinct().ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6390acdb60790b4441628f47011f413a2809fc28eca4dcdce34b01ff55979f04",
    "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\"",
    "linq": "context.Papers.Join(context.Authorships, t1 => t1.PaperId, t2 => t2.PaperId, (t1, t2) => new { t1, t2 }).Join(context.Insts, joined => joined.t2.InstId, t3 => t3.InstId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Name == \"Google\").Select(row => new { row.t1.Title }).Distinct().ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "52fb434e40817e351a3b20386042a3f6c0f453ee30c1d4e6ce6c64567e49b2e3",
    "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Tokohu University\"",
    "linq": "context.Papers.Join(context.Authorships, t1 => t1.PaperId, t2 => t2.PaperId, (t1, t2) => new { t1, t2 }).Join(context.Insts, joined => joined.t2.InstId, t3 => t3.InstId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Name == \"Tokohu University\").Select(row => row.t1.Title).Distinct().Count();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8b4467a2eab11679ce8093f6c8c084f753e2eb6b6172db1507f839cc4d3bcad4",
    "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Pennsylvania\"",
    "linq": "context.Papers.Join(context.Authorships, t1 => t1.PaperId, t2 => t2.PaperId, (t1, t2) => new { t1, t2 }).Join(context.Insts, joined => joined.t2.InstId, t3 => t3.InstId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Name == \"University of Pennsylvania\").Select(row => row.t1.Title).Distinct().Count();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a9ccfdce3783fc96b0c2db15cd83ff201ba789c004457d737704b90a0c085efa",
    "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Olin\" AND t1.lname = \"Shivers\"",
    "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Fname == \"Olin\" && row.t1.Lname == \"Shivers\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "04eb08a1bc406c4c0ba5d5e85bc760dff765ab14941924f58cf6dfdbd60ba4a5",
    "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Stephanie\" AND t1.lname = \"Weirich\"",
    "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Fname == \"Stephanie\" && row.t1.Lname == \"Weirich\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c1b26f3ccb4fb1cba33cc13018d7cfde4959fead8266a09f76be0a02617fbfac",
    "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"USA\" AND t2.authorder = 2 AND t1.lname = \"Turon\"",
    "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Insts, joined => joined.t2.InstId, t4 => t4.InstId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.Country == \"USA\" && row.t2.AuthOrder == 2 && row.t1.Lname == \"Turon\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e4c8e01e5045884b342129b544f1cd6e3192e5ee8dbd8c0cf8881e1b5f01b079",
    "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"Japan\" AND t2.authorder = 1 AND t1.lname = \"Ohori\"",
    "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Insts, joined => joined.t2.InstId, t4 => t4.InstId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.Country == \"Japan\" && row.t2.AuthOrder == 1 && row.t1.Lname == \"Ohori\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "56d4454d845e1c90b640e24fc249e8c3acce5af3228d86b1ea92b4347e98fed2",
    "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.fname , t1.lname ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.Fname, row.t1.Lname }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Lname }).Take(1).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "44f6dca489229fecf52007c1d9724ecdfa65d21532d331142ef36391f5f10705",
    "sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Insts.Join(context.Authorships, t1 => t1.InstId, t2 => t2.InstId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.Country }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Country }).Take(1).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "925a487634e152f383ad2b72aa015e211c307595a02280d94d6d67af22a5c5fc",
    "sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Insts.Join(context.Authorships, t1 => t1.InstId, t2 => t2.InstId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.Name }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Name }).Take(1).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bb10c641cb1e2e78b18d0d7cdd7eb6f07aeb1f31e3a84a6fd3a966acc33365d3",
    "sql": "SELECT title FROM papers WHERE title LIKE \"%ML%\"",
    "linq": "context.Papers.Where(row => EF.Functions.Like(row.Title, \"%ML%\")).Select(row => new { row.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "99def738f6751444932cce3a0d0d45098a06c4e54a6d40b7075afb8b8593ac33",
    "sql": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
    "linq": "context.Papers.Where(row => EF.Functions.Like(row.Title, \"%Database%\")).Select(row => new { row.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3722e77536a61a87e36ac0dba0dcc62d1b2b5f69862f19494817d9449fc68a09",
    "sql": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE \"%Functional%\"",
    "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => EF.Functions.Like(row.t3.Title, \"%Functional%\")).Select(row => new { row.t1.Fname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f03c2cdd81f2edf1e18bdbd8fc83ff5383ca15f25df5692dd7ab08b65c0517ac",
    "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE \"%Monadic%\"",
    "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => EF.Functions.Like(row.t3.Title, \"%Monadic%\")).Select(row => new { row.t1.Lname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5f2afec3a7f2f6d2826028c4dfa71ae007c51cb49b5ea9516b58f2763abc374a",
    "sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE t1.authorder = (SELECT max(authorder) FROM authorship)",
    "linq": "context.Authorships.Join(context.Papers, t1 => t1.PaperId, t2 => t2.PaperId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.AuthOrder == context.Authorships.Select(row => row.AuthOrder).Max()).Select(row => new { row.t2.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bebc009503227fa8aee79235824f77de5ee93384390d137e28bf8c417ae6681a",
    "sql": "SELECT fname FROM authors WHERE lname = \"Ueno\"",
    "linq": "context.Authors.Where(row => row.Lname == \"Ueno\").Select(row => new { row.Fname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e1399e9099e9d5b75d47299bab9e8e070841a51d7c1aa78ff386b39e407f12b4",
    "sql": "SELECT lname FROM authors WHERE fname = \"Amal\"",
    "linq": "context.Authors.Where(row => row.Fname == \"Amal\").Select(row => new { row.Lname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4aecae9d181fea64343d73320c14c38fee0ba578a2219bbe6312a28b9b96365d",
    "sql": "SELECT fname FROM authors ORDER BY fname",
    "linq": "context.Authors.OrderBy(row => row.Fname).Select(row => new { row.Fname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bdfe10548487eecf96f8922a3e4a51793634437c404e4edd098841f9f2886b46",
    "sql": "SELECT lname FROM authors ORDER BY lname",
    "linq": "context.Authors.OrderBy(row => row.Lname).Select(row => new { row.Lname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6ddaac65ee104efcc01f3ba8a8e24c92d33386ffbbd87c79fdc2f8c20bba9905",
    "sql": "SELECT fname , lname FROM authors ORDER BY lname",
    "linq": "context.Authors.OrderBy(row => row.Lname).Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "86aaf502f2939fba0e0512f6b8f2c41a6051c1cfb36a567fbf0e2142f694d6e3",
    "sql": "SELECT count(*) FROM COURSES",
    "linq": "context.Courses.Count();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1b5c5b0618c97adb48bfd80ed210389ec495ee16bf548f2a12b377fa37d18f5e",
    "sql": "SELECT course_description FROM COURSES WHERE course_name = \"database\"",
    "linq": "context.Courses.Where(row => row.CourseName == \"database\").Select(row => new { row.CourseDescription }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "05391f42f5bd2facc1036fce53fe5c9268d3813398276a811243d40e4cadb65d",
    "sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = \"Cathrine\"",
    "linq": "context.CourseAuthorsAndTutors.Where(row => row.PersonalName == \"Cathrine\").Select(row => new { row.AddressLine1 }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6e8f01b550635baa9143acc3893e3ccc6d81d91f45c341145e6d2b7999dfe0c5",
    "sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors",
    "linq": "context.CourseAuthorsAndTutors.Select(row => new { row.AddressLine1 }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0fdd8b7cb8e6df797632eee6a43dd88f939fa2c8b5e0bd297259fac8825d1b5a",
    "sql": "SELECT login_name , family_name FROM Course_Authors_and_Tutors",
    "linq": "context.CourseAuthorsAndTutors.Select(row => new { row.LoginName, row.FamilyName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4c60ceaf263b20c9327cce6b7e36cfb9bc89a7df18c6e6bf15465cd68a194fff",
    "sql": "SELECT date_of_enrolment , date_of_completion FROM Student_Course_Enrolment",
    "linq": "context.StudentCourseEnrolments.Select(row => new { row.DateOfEnrolment, row.DateOfCompletion }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "43df60b7b3f3749df4c8f0ffe65764248b07bf6c559e7087fa36f64ddb151deb",
    "sql": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment",
    "linq": "context.StudentCourseEnrolments.Select(row => row.StudentId).Distinct().Count();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "79ab9276b7f1f60c00bb6f9026241b465adda1958d8f6792b2e1294731f767da",
    "sql": "SELECT count(course_id) FROM Student_Course_Enrolment",
    "linq": "context.StudentCourseEnrolments.Select(row => row.CourseId).Count();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a9557b9c29d4d675b1655a0cc4f4ed714430505635fc470d0a118a4b013f2375",
    "sql": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = \"Pass\"",
    "linq": "context.StudentTestsTakens.Where(row => row.TestResult == \"Pass\").Select(row => new { row.DateTestTaken }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "89fbab2c98212220ce18ca2b66b7c9b508fac959683a53472112bea162716ba5",
    "sql": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result = \"Fail\"",
    "linq": "context.StudentTestsTakens.Where(row => row.TestResult == \"Fail\").Count();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "60b36cb8ab96eb5b465d8176facec8f90586249e72f8586e5eddb12b79872bab",
    "sql": "SELECT login_name FROM Students WHERE family_name = \"Ward\"",
    "linq": "context.Students.Where(row => row.FamilyName == \"Ward\").Select(row => new { row.LoginName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5b1de5280cfccad5e0d16e222c7217bdff60535cbf71c77fc8306cf408cc41bf",
    "sql": "SELECT date_of_latest_logon FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\"",
    "linq": "context.Students.Where(row => row.FamilyName == \"Jaskolski\" || row.FamilyName == \"Langosh\").Select(row => new { row.DateOfLatestLogon }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "12823a5b2c5a1eff8575c46e367beb4d02ea37ade6434217dbfeede6258c230b",
    "sql": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\"",
    "linq": "context.Students.Where(row => EF.Functions.Like(row.PersonalName, \"%son%\")).Count();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b7fc002577e2c1923c8d0bf067cf37cefd00c988a513039b385fe0464436f2a7",
    "sql": "SELECT subject_name FROM SUBJECTS",
    "linq": "context.Subjects.Select(row => new { row.SubjectName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f6c4c8fd1a473d3ec6ca61fb677beb8069beb5af3b9ca92b7f2da599b839387b",
    "sql": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
    "linq": "context.CourseAuthorsAndTutors.OrderBy(row => row.PersonalName).Select(row => new { row.AuthorId, row.AuthorTutorAtb, row.LoginName, row.Password, row.PersonalName, row.MiddleName, row.FamilyName, row.GenderMf, row.AddressLine1 }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "743069d1789f5be808c2f1966a8cef7ddba1958d6dc9a4d119249bd728c4ccbb",
    "sql": "SELECT personal_name , family_name FROM Students ORDER BY family_name",
    "linq": "context.Students.OrderBy(row => row.FamilyName).Select(row => new { row.PersonalName, row.FamilyName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c9ef1ce6b9faaba8fd46536da3e4a885836732ddace2c36e7963801ae19464cd",
    "sql": "SELECT test_result , COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
    "linq": "context.StudentTestsTakens.GroupBy(row => new { row.TestResult }).Select(group => new { group.Key.TestResult, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "06d46e8d129e91d4663210a11b8795421dc4d2966a8ab6d2a9f07d577325431b",
    "sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = \"advanced database\"",
    "linq": "context.CourseAuthorsAndTutors.Join(context.Courses, T1 => T1.AuthorId, T2 => T2.AuthorId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CourseName == \"advanced database\").Select(row => new { row.T1.LoginName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7d153d18fbf85751fbb26697b5897150f864d4f03293bf8047b56265d0eb342b",
    "sql": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = \"operating system\" OR T2.course_name = \"data structure\"",
    "linq": "context.CourseAuthorsAndTutors.Join(context.Courses, T1 => T1.AuthorId, T2 => T2.AuthorId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CourseName == \"operating system\" || row.T2.CourseName == \"data structure\").Select(row => new { row.T1.AddressLine1 }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ccbff07f12c87424961e4d9495b2eed1f1ee827ce00651cd9640a63af87588da",
    "sql": "SELECT T1.personal_name , T1.family_name , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.CourseAuthorsAndTutors.Join(context.Courses, T1 => T1.AuthorId, T2 => T2.AuthorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AuthorId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.PersonalName, group.First().T1.FamilyName, group.Key.AuthorId }).Take(1).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "120ca11b5058d91285dceb0352da0270ef4070c51080d3676687e530c431346f",
    "sql": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count(*) >= 2",
    "linq": "context.CourseAuthorsAndTutors.Join(context.Courses, T1 => T1.AuthorId, T2 => T2.AuthorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AuthorId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.AddressLine1, group.Key.AuthorId }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c04f4de9d1101db52a6f19e7285a36ba6c325433e29231d2dad0379959f69a0",
    "sql": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.personal_name = \"Julio\"",
    "linq": "context.CourseAuthorsAndTutors.Join(context.Courses, T1 => T1.AuthorId, T2 => T2.AuthorId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PersonalName == \"Julio\").Select(row => new { row.T2.CourseName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "03e297322587ab8c3d34b2b76a6f10084cb6e572304a0dd0ae72acc3588d45b3",
    "sql": "SELECT T1.course_name , T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = \"Computer Science\"",
    "linq": "context.Courses.Join(context.Subjects, T1 => T1.SubjectId, T2 => T2.SubjectId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SubjectName == \"Computer Science\").Select(row => new { row.T1.CourseName, row.T1.CourseDescription }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "622fbb1913feb2a5809ce9d6efe9fbcd607240be6a923e3ef62a676386d4cbc4",
    "sql": "SELECT T1.subject_id , T2.subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id",
    "linq": "context.Courses.Join(context.Subjects, T1 => T1.SubjectId, T2 => T2.SubjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SubjectId }).Select(group => new { group.Key.SubjectId, group.First().T2.SubjectName, Count = group.Count() }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "03f6339af12e7ffa1e6e260780a1d6af98cb51b6543fb2e5a699dbbcfb5f2149",
    "sql": "SELECT T1.subject_id , T2.subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC",
    "linq": "context.Courses.Join(context.Subjects, T1 => T1.SubjectId, T2 => T2.SubjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SubjectId }).Select(group => new { group.Key.SubjectId, group.First().T2.SubjectName, Count = group.Count() }).OrderBy(group => group.Count).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "263d20eadeda5433a44c6e0521f567224de4a75b9d475e59e6ef44ed6d5932b0",
    "sql": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"",
    "linq": "context.Courses.Join(context.StudentCourseEnrolments, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CourseName == \"Spanish\").Select(row => new { row.T2.DateOfEnrolment }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3a5543d64275626ed73cb6ace5f68dbbf836742f9c7d1eeb7da4ea202ad16e46",
    "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Courses.Join(context.StudentCourseEnrolments, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CourseName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CourseName }).Take(1).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "980cf811acc4fa62a32650551655d24721316bebf8ca1369a919f86d63bcf456",
    "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) = 1",
    "linq": "context.Courses.Join(context.StudentCourseEnrolments, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CourseName }).Where(group => group.Count() == 1).Select(group => new { group.Key.CourseName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b5411ca33c9ed128ff6f8c9d4d304cf14357922e0e27692e406d3919b4ea84d7",
    "sql": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) > 2",
    "linq": "context.Courses.Join(context.StudentCourseEnrolments, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CourseName }).Where(group => group.Count() > 2).Select(group => new { group.First().T1.CourseDescription, group.Key.CourseName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b3e023f1db221fbb6e5fea6ad03681ee5c23158800fd76ce5d31513db1de2402",
    "sql": "SELECT T1.course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name",
    "linq": "context.Courses.Join(context.StudentCourseEnrolments, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CourseName }).Select(group => new { group.Key.CourseName, Count = group.Count() }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d88a3221ca6304f87bbe7d1c289c4ddc890581332a8621c579effb5e522f30c2",
    "sql": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"",
    "linq": "context.StudentCourseEnrolments.Join(context.StudentTestsTakens, T1 => T1.RegistrationId, T2 => T2.RegistrationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TestResult == \"Pass\").Select(row => new { row.T1.DateOfEnrolment }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8cdf4ffc71453a9a7182f6c528bbde09d77330bfac5a0d1ef40f0e2faaced469",
    "sql": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"",
    "linq": "context.StudentCourseEnrolments.Join(context.StudentTestsTakens, T1 => T1.RegistrationId, T2 => T2.RegistrationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TestResult == \"Fail\").Select(row => new { row.T1.DateOfCompletion }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0cbc884e1471ed4c0bc6c0690c7146fb820048d2d190ee5523cf02adae6fc861",
    "sql": "SELECT T1.date_of_enrolment , T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name = \"Karson\"",
    "linq": "context.StudentCourseEnrolments.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PersonalName == \"Karson\").Select(row => new { row.T1.DateOfEnrolment, row.T1.DateOfCompletion }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3b8bd9f8313fc0d80a21ce864f358200ea2d5fef43652d1dbaf14a16fb388bad",
    "sql": "SELECT T1.date_of_enrolment , T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.family_name = \"Zieme\" AND T2.personal_name = \"Bernie\"",
    "linq": "context.StudentCourseEnrolments.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FamilyName == \"Zieme\" && row.T2.PersonalName == \"Bernie\").Select(row => new { row.T1.DateOfEnrolment, row.T1.DateOfCompletion }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "786e13d92ee9d792c8ad01e5d0e87f5f83e55506ba1b847cbe4ce6c614ad1486",
    "sql": "SELECT T1.student_id , T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.StudentCourseEnrolments.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StudentId, group.First().T2.LoginName }).Take(1).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fd4ef0b5f20aaed547b263682b478bbbcee018780a162f58ad04bd78556df9e3",
    "sql": "SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) >= 2",
    "linq": "context.StudentCourseEnrolments.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.StudentId, group.First().T2.PersonalName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2fce9177a444247ffbbc13f0bcb5e792be427208b87798f2a84b98aaa074546a",
    "sql": "SELECT T1.student_id , T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) <= 2",
    "linq": "context.StudentCourseEnrolments.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).Where(group => group.Count() <= 2).Select(group => new { group.Key.StudentId, group.First().T2.MiddleName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a3e5d88254a8413162e40f46f70b7960fcc93a61612f9f5c3b0bfcf369949fb5",
    "sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id",
    "linq": "context.Students.Select(row => row.PersonalName).Except(context.Students.Join(context.StudentCourseEnrolments, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.PersonalName)).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e0956c5eb96562523c172152987d8bcd6337e2e2c8d6c09921436613308bcdd1",
    "sql": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)",
    "linq": "context.Students.Where(row => !context.StudentCourseEnrolments.Select(row => row.StudentId).Contains(row.StudentId)).Count();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "073a5964adacff79beed47ef3f81f11089628fced3f48c48f1788cdc8b95a964",
    "sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
    "linq": "context.CourseAuthorsAndTutors.Select(row => row.LoginName).Intersect(context.Students.Select(row => row.LoginName)).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "64caeeb485fcfcbcd8e68a251e7638ffc71b4af0fb530d46d5ca5c7928a95139",
    "sql": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
    "linq": "context.CourseAuthorsAndTutors.Select(row => row.PersonalName).Intersect(context.Students.Select(row => row.PersonalName)).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fde15d5cc2ffac8c3e8a8b2287a8f7a1804ded83f0b702ad7926bf474c7e885c",
    "sql": "SELECT actual_order_id FROM actual_orders WHERE order_status_code = 'Success'",
    "linq": "context.ActualOrders.Where(row => row.OrderStatusCode == \"Success\").Select(row => new { row.ActualOrderId }).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ce98bc864ed6d7fe4a9821bfc7409a73e2c7a6e94aad78537088c114e1dab43d",
    "sql": "SELECT t1.product_name , t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Products.Join(context.RegularOrderProducts, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ProductId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.ProductName, group.First().t1.ProductPrice }).Take(1).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b91ff262170ce3ce04d7f20f9e5627f851ba975b9216e8aba724f3ec9d20f9d7",
    "sql": "SELECT count(*) FROM customers",
    "linq": "context.Customers.Count();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e4ecad47460a30df419329a6a5444af08791662ada90d62431b5629e39a88396",
    "sql": "SELECT count(DISTINCT payment_method) FROM customers",
    "linq": "context.Customers.Select(row => row.PaymentMethod).Distinct().Count();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dcd2ec47b9edb3ea407da05057b5cbb6ec75cbbe479bc32e988d64a234db8634",
    "sql": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
    "linq": "context.Trucks.OrderBy(row => row.TruckLicenceNumber).Select(row => new { row.TruckDetails }).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0754d6b2d0b5f2b10481cee244df939aff1c486c9e6d9f0853bc143f753aebe5",
    "sql": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1",
    "linq": "context.Products.OrderByDescending(row => (double) row.ProductPrice).Select(row => new { row.ProductName }).Take(1).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e69429f48fd3574bd59827c687864fbf9018b3d1797bce10e4490eaa72f3c815",
    "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'",
    "linq": "context.Customers.Select(row => row.CustomerName).Except(context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.StateProvinceCounty == \"California\").Select(row => row.t1.CustomerName)).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2d85fe50560b4ae53ecc425ddef551275c42bb9bc2dc240adf3e10a2c6d04419",
    "sql": "SELECT customer_email , customer_name FROM customers WHERE payment_method = 'Visa'",
    "linq": "context.Customers.Where(row => row.PaymentMethod == \"Visa\").Select(row => new { row.CustomerEmail, row.CustomerName }).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d2229fe7ac1a70fa56e9b4fb0a4d2c22855c22fe399c7517c5286862f78c5a4e",
    "sql": "SELECT t1.customer_name , t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'",
    "linq": "context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.StateProvinceCounty == \"California\").Select(row => new { row.t1.CustomerName, row.t1.CustomerPhone }).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c48a3e2386e57a33142fa96f3cbae4bfacf5f9d6b53ac5cb765374d16dea41d5",
    "sql": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)",
    "linq": "context.Addresses.Where(row => !context.Employees.Select(row => row.EmployeeAddressId).Contains(row.AddressId)).Select(row => new { row.StateProvinceCounty }).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9a9623adca9b2b22188627eeff825a72f1609ea65fe15b3f87a10c8f2fdf3846",
    "sql": "SELECT customer_name , customer_phone , customer_email FROM Customers ORDER BY date_became_customer",
    "linq": "context.Customers.OrderBy(row => row.DateBecameCustomer).Select(row => new { row.CustomerName, row.CustomerPhone, row.CustomerEmail }).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "72e0fb7b7e95b85e9dd77aa7ab51af21ab018cf45281457a49268ba99a52e499",
    "sql": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5",
    "linq": "context.Customers.OrderBy(row => row.DateBecameCustomer).Select(row => new { row.CustomerName }).Take(5).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b96257960c26a6e084640025324047fe2356740f4da32882ff5747c440098ac6",
    "sql": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Customers.GroupBy(row => new { row.PaymentMethod }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PaymentMethod }).Take(1).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ce2c0615f634a3303274b4ff3f4aad7031c8f9abc8b836ab7944ad1c80b8d699",
    "sql": "SELECT route_name FROM Delivery_Routes ORDER BY route_name",
    "linq": "context.DeliveryRoutes.OrderBy(row => row.RouteName).Select(row => new { row.RouteName }).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6f95a2daba83a9dd0b99a753c8ab283721cf4a22498392de9fc1bcfe58fde969",
    "sql": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id = t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.DeliveryRoutes.Join(context.DeliveryRouteLocations, t1 => t1.RouteId, t2 => t2.RouteId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.RouteId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.RouteName }).Take(1).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b6fba8ea7747087504be3e7f832d88b59571931551133d51f7afe5b7a5737a16",
    "sql": "SELECT t2.state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county",
    "linq": "context.CustomerAddresses.Join(context.Addresses, t1 => t1.AddressId, t2 => t2.AddressId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.StateProvinceCounty }).Select(group => new { group.Key.StateProvinceCounty, Count = group.Count() }).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c1726479273926583493d6f49dce2a1cc59777658e7728585f6242d9be946ccd",
    "sql": "SELECT count(*) FROM Ref_calendar",
    "linq": "context.RefCalendars.Count();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2cabef9a8cb2f11948724dac2441467dac6b2b3ed57f6ccf267dce7fe73d8b7f",
    "sql": "SELECT calendar_date , day_Number FROM Ref_calendar",
    "linq": "context.RefCalendars.Select(row => new { row.CalendarDate, row.DayNumber }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e35f0197ed31784c97fadd286bbb9174b2285df92c5905dbb7f0810355317b56",
    "sql": "SELECT count(*) FROM Ref_document_types",
    "linq": "context.RefDocumentTypes.Count();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aaa06f178c29d403ad07079b0fd573d17b9a579276677c294c92648208c3b82b",
    "sql": "SELECT document_type_code , document_type_name FROM Ref_document_types",
    "linq": "context.RefDocumentTypes.Select(row => new { row.DocumentTypeCode, row.DocumentTypeName }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "26a755eeb78253b578e9aa2a385d5f7c9bd9c3d66c6a670dffc0082b802eb4fe",
    "sql": "SELECT document_type_name , document_type_description FROM Ref_document_types WHERE document_type_code = \"RV\"",
    "linq": "context.RefDocumentTypes.Where(row => row.DocumentTypeCode == \"RV\").Select(row => new { row.DocumentTypeName, row.DocumentTypeDescription }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a571cf48a3fc6451a67838f2121d041ada7d10087f73c1792d921aff450d6a97",
    "sql": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name = \"Paper\"",
    "linq": "context.RefDocumentTypes.Where(row => row.DocumentTypeName == \"Paper\").Select(row => new { row.DocumentTypeCode }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3e76d5829c82d65d7bf4a69bb5b771810808e4c028d5e5113bdbc0c3783254d8",
    "sql": "SELECT count(*) FROM All_documents WHERE document_type_code = \"CV\" OR document_type_code = \"BK\"",
    "linq": "context.AllDocuments.Where(row => row.DocumentTypeCode == \"CV\" || row.DocumentTypeCode == \"BK\").Count();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "44aed163daa53dbfe2d6a59d51b8dfa0fa7b44219b43b7ebb6734b027ac13ac6",
    "sql": "SELECT date_stored FROM All_documents WHERE Document_name = \"Marry CV\"",
    "linq": "context.AllDocuments.Where(row => row.DocumentName == \"Marry CV\").Select(row => new { row.DateStored }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "00d8c0dbdcf1f905279da6181abaeefee1e257a83d64af793cd51e5c72f6a161",
    "sql": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
    "linq": "context.AllDocuments.Join(context.RefCalendars, T1 => T1.DateStored, T2 => T2.CalendarDate, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.DayNumber, row.T1.DateStored }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6e0219a93c6513db9e5f56f1fc8482164445a01861346260b2090a26f1b2e5c8",
    "sql": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code WHERE T1.document_name = \"How to read a book\"",
    "linq": "context.AllDocuments.Join(context.RefDocumentTypes, T1 => T1.DocumentTypeCode, T2 => T2.DocumentTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DocumentName == \"How to read a book\").Select(row => new { row.T2.DocumentTypeName }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "398734e43862552f80749bfc59815eee8042a090217b81dfe94cf661e09eae8c",
    "sql": "SELECT count(*) FROM Ref_locations",
    "linq": "context.RefLocations.Count();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ead0ec78fe2f1b6ec508ccbb9f89fcd684735c0a2eb7e3c62574164ade2b9414",
    "sql": "SELECT location_code , location_name FROM Ref_locations",
    "linq": "context.RefLocations.Select(row => new { row.LocationCode, row.LocationName }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "23b456254b28df02a6af9ff1d0a2bb74495120a6dbe7aef8cb228b3294b8561b",
    "sql": "SELECT location_name , location_description FROM Ref_locations WHERE location_code = \"x\"",
    "linq": "context.RefLocations.Where(row => row.LocationCode == \"x\").Select(row => new { row.LocationName, row.LocationDescription }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1b8323c4c63ab84f96cd2e77ad861936ca659b7f78e8f27ccbf712ffb7f5da2f",
    "sql": "SELECT location_code FROM Ref_locations WHERE location_name = \"Canada\"",
    "linq": "context.RefLocations.Where(row => row.LocationName == \"Canada\").Select(row => new { row.LocationCode }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b6ac29d4fa8ffc5b3be93e26a6286e1051abab409811a08da19b33c9cac41212",
    "sql": "SELECT count(*) FROM ROLES",
    "linq": "context.Roles.Count();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fe9588624401a629adde2e17e328101bce4ab2e0042c751b09da4bb7c6c6613c",
    "sql": "SELECT role_code , role_name , role_description FROM ROLES",
    "linq": "context.Roles.Select(row => new { row.RoleCode, row.RoleName, row.RoleDescription }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7e4e93043ae81e8fce331d6b8c3e5ead309cc311f6deb1a78d8f570c82b0495d",
    "sql": "SELECT role_name , role_description FROM ROLES WHERE role_code = \"MG\"",
    "linq": "context.Roles.Where(row => row.RoleCode == \"MG\").Select(row => new { row.RoleName, row.RoleDescription }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a16fe9daf88e8ed275ce6c7d3b9de29eab98f355e72225b398ac39f0a088f57b",
    "sql": "SELECT role_description FROM ROLES WHERE role_name = \"Proof Reader\"",
    "linq": "context.Roles.Where(row => row.RoleName == \"Proof Reader\").Select(row => new { row.RoleDescription }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a89cacc2df04e63eb77302f95c300fa0690e68a68a5b515ef2f9dfc7e1d9e313",
    "sql": "SELECT count(*) FROM Employees",
    "linq": "context.Employees.Count();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b7073939b9953fd1f17450ee7d60af0df7b44da1e02fbbb77525e188c629b01c",
    "sql": "SELECT employee_name , role_code , date_of_birth FROM Employees WHERE employee_Name = 'Armani'",
    "linq": "context.Employees.Where(row => row.EmployeeName == \"Armani\").Select(row => new { row.EmployeeName, row.RoleCode, row.DateOfBirth }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f4e504ba5db79def9c4b3f02746957f23deda2cc44010d4d08c4ec04915b8d01",
    "sql": "SELECT employee_ID FROM Employees WHERE employee_name = \"Ebba\"",
    "linq": "context.Employees.Where(row => row.EmployeeName == \"Ebba\").Select(row => new { row.EmployeeId }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b286da843b43f8436b057f2c1ff81c6fca9258b3bc3c66d5ee369ba0be8f8df6",
    "sql": "SELECT employee_name FROM Employees WHERE role_code = \"HR\"",
    "linq": "context.Employees.Where(row => row.RoleCode == \"HR\").Select(row => new { row.EmployeeName }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "23ce5ae9a130e4860b2ccc5d137266ff0ab5c01e566f12915947e7eaf3d4bfa8",
    "sql": "SELECT role_code , count(*) FROM Employees GROUP BY role_code",
    "linq": "context.Employees.GroupBy(row => new { row.RoleCode }).Select(group => new { group.Key.RoleCode, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3fd6dc06ba25094536738a9161c5a1de63e66eebbd89b6de6f7a50a889fb1dca",
    "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Employees.GroupBy(row => new { row.RoleCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.RoleCode }).Take(1).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ecc1aef11771c1bb85217a97dfe552032b38e338d9dec8b30fe0492e6fe2af4a",
    "sql": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*) >= 3",
    "linq": "context.Employees.GroupBy(row => new { row.RoleCode }).Where(group => group.Count() >= 3).Select(group => new { group.Key.RoleCode }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3dc730cc2a792a0b8ff3827438836ea02e04bfe4449b33fff968b397a9888d50",
    "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.Employees.GroupBy(row => new { row.RoleCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.RoleCode }).Take(1).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "361a49d354c4473c6a23642540812cbc7fc7ccfe8f98316d0183703476176255",
    "sql": "SELECT T2.role_name , T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T1.employee_name = \"Ebba\"",
    "linq": "context.Employees.Join(context.Roles, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.EmployeeName == \"Ebba\").Select(row => new { row.T2.RoleName, row.T2.RoleDescription }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7a61a4942f1d013733d576327e95df62ad15425f65b09647bae52ecfe0267a3e",
    "sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = \"Editor\"",
    "linq": "context.Employees.Join(context.Roles, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.RoleName == \"Editor\").Select(row => new { row.T1.EmployeeName }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e65a1b1fb6b0c94390f8b6688a1f7097c2b6bcd5202fac5ae43db0b88339370d",
    "sql": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = \"Human Resource\" OR T2.role_name = \"Manager\"",
    "linq": "context.Employees.Join(context.Roles, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.RoleName == \"Human Resource\" || row.T2.RoleName == \"Manager\").Select(row => new { row.T1.EmployeeId }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9bb05c26f12843e47879f0f4d2b38a68d6603fbe325ae7634369ac3cfc99c17d",
    "sql": "SELECT DISTINCT location_code FROM Document_locations",
    "linq": "context.DocumentLocations.Select(row => new { row.LocationCode }).Distinct().ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c9f6b874ff6f37ffa0b94a0e0420e29edf58da6fbddea627a224e773ef3a6e08",
    "sql": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = \"Robin CV\"",
    "linq": "context.AllDocuments.Join(context.DocumentLocations, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Join(context.RefLocations, joined => joined.T2.LocationCode, T3 => T3.LocationCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.DocumentName == \"Robin CV\").Select(row => new { row.T3.LocationName }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5d614bd6354781159d1bfd4da6fd78698effb51b6eef30fccfc13541de530cec",
    "sql": "SELECT location_code , date_in_location_from , date_in_locaton_to FROM Document_locations",
    "linq": "context.DocumentLocations.Select(row => new { row.LocationCode, row.DateInLocationFrom, row.DateInLocatonTo }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0a997c37f4b9a00f1a22d023ac672926fd83fc735254b4676a8365dc9556f7cb",
    "sql": "SELECT T1.date_in_location_from , T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Robin CV\"",
    "linq": "context.DocumentLocations.Join(context.AllDocuments, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == \"Robin CV\").Select(row => new { row.T1.DateInLocationFrom, row.T1.DateInLocatonTo }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fc6ff2085fdf68488e911d7993833e1dd22900e59c48047754362745c7219e0c",
    "sql": "SELECT location_code , count(*) FROM Document_locations GROUP BY location_code",
    "linq": "context.DocumentLocations.GroupBy(row => new { row.LocationCode }).Select(group => new { group.Key.LocationCode, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "88d3769df827d727448be3141cebf956d8b56b441f20efe02da4dd8056f8e903",
    "sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.DocumentLocations.GroupBy(row => new { row.LocationCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.LocationCode }).Take(1).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0e5dad9d75e1ed835c482ed8da8955a61318becc55c3e5bc4355293da39b651d",
    "sql": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*) >= 3",
    "linq": "context.DocumentLocations.GroupBy(row => new { row.LocationCode }).Where(group => group.Count() >= 3).Select(group => new { group.Key.LocationCode }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2043d2f9975ceeeee543bea3f4ef9561a49d198ca3ff3863342b694086cd5dfc",
    "sql": "SELECT T2.location_name , T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.DocumentLocations.Join(context.RefLocations, T1 => T1.LocationCode, T2 => T2.LocationCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.LocationCode }).OrderBy(group => group.Count()).Select(group => new { group.First().T2.LocationName, group.Key.LocationCode }).Take(1).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8be6c809c915db04f3f87c3f815ca0379a33b56417776861af1895b6aaa035e3",
    "sql": "SELECT T2.employee_name , T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;",
    "linq": "context.DocumentsToBeDestroyeds.Join(context.Employees, T1 => T1.DestructionAuthorisedByEmployeeId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Join(context.Employees, joined => joined.T1.DestroyedByEmployeeId, T3 => T3.EmployeeId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { T2EmployeeName = row.T2.EmployeeName, T3EmployeeName = row.T3.EmployeeName }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "119c1dd06f5847ea48ade4ea0f32d97f9a3fd07e4f98986c017b69c69dabddf3",
    "sql": "SELECT Destruction_Authorised_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
    "linq": "context.DocumentsToBeDestroyeds.GroupBy(row => new { row.DestructionAuthorisedByEmployeeId }).Select(group => new { group.Key.DestructionAuthorisedByEmployeeId, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8225c78bf68683761a5312a5de7dc2124d865f15160cca77cc58d5265b1d6a1a",
    "sql": "SELECT Destroyed_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",
    "linq": "context.DocumentsToBeDestroyeds.GroupBy(row => new { row.DestroyedByEmployeeId }).Select(group => new { group.Key.DestroyedByEmployeeId, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e3773c55e5bf261d77e456d40d888398f3bda64e4f778ef895b215554ff2ce93",
    "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
    "linq": "context.Employees.Select(row => row.EmployeeId).Except(context.DocumentsToBeDestroyeds.Where(row => row.DestructionAuthorisedByEmployeeId.HasValue).Select(row => row.DestructionAuthorisedByEmployeeId.Value)).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "075c37f02baaf543f43da92d4451bb062c90b0d915f8896716cb97a6fba59d7e",
    "sql": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
    "linq": "context.DocumentsToBeDestroyeds.Select(row => new { row.DestructionAuthorisedByEmployeeId }).Distinct().ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f07d5456dd63e086b7c6962e598a0cfa65c462991765fac680d83bf0345e1a6",
    "sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
    "linq": "context.DocumentsToBeDestroyeds.Select(row => new { row.DestroyedByEmployeeId }).Distinct().ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c2db414c8b44dbf1b189a6778315dc6e562c165ea4cbabf3e38a9ac2b3b7bba9",
    "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
    "linq": "context.Employees.Select(row => row.EmployeeId).Except(context.DocumentsToBeDestroyeds.Where(row => row.DestroyedByEmployeeId.HasValue).Select(row => row.DestroyedByEmployeeId.Value)).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "990de17b5a277ae5aeb71c96988046601a77ad2aa303ca8a7fe282641f424019",
    "sql": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
    "linq": "context.DocumentsToBeDestroyeds.Where(row => row.DestroyedByEmployeeId.HasValue).Select(row => row.DestroyedByEmployeeId.Value).Union(context.DocumentsToBeDestroyeds.Where(row => row.DestructionAuthorisedByEmployeeId.HasValue).Select(row => row.DestructionAuthorisedByEmployeeId.Value)).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "04a38b59aa572ded415ee38ce22a86d05792f955b5cb9ae3ea0b10d84b6c1865",
    "sql": "SELECT count(*) FROM artwork",
    "linq": "context.Artworks.Count();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "97b74c936ac8a3041bc219c03e3dcd3d0ee5c7f18f6e15c57056f7aa4662bac8",
    "sql": "SELECT Name FROM artwork ORDER BY Name ASC",
    "linq": "context.Artworks.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fabf57d8ee38332dd50e7e58b45833e2f527753cfee078e068ae9b8a3f339f74",
    "sql": "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"",
    "linq": "context.Artworks.Where(row => row.Type != \"Program Talent Show\").Select(row => new { row.Name }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d9ca7fb61d4b52f9c2073032ba1468b394343734de97a626cc9c270aa46b9fb2",
    "sql": "SELECT Festival_Name , LOCATION FROM festival_detail",
    "linq": "context.FestivalDetails.Select(row => new { row.FestivalName, row.Location }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d67260f2b73ebb60468a182a0c8ca1c5a239e170a072d8e46308d161987ee9b2",
    "sql": "SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC",
    "linq": "context.FestivalDetails.OrderBy(row => row.Year).Select(row => new { row.ChairName }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "78696e1f1e29e0016cce374a598182f522eea1acc4cb2916e04113b7582ed625",
    "sql": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1",
    "linq": "context.FestivalDetails.OrderByDescending(row => row.NumOfAudience).Select(row => new { row.Location }).Take(1).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "85c5ae04e695aece7e5d69be2844286b316c05c3a12bb3faec04a7c71932357b",
    "sql": "SELECT Festival_Name FROM festival_detail WHERE YEAR = 2007",
    "linq": "context.FestivalDetails.Where(row => row.Year == 2007).Select(row => new { row.FestivalName }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4b81ac498dd0e0e6244a8d1eecb7dcdc36e583bebae561ad9d33457307725526",
    "sql": "SELECT avg(Num_of_Audience) FROM festival_detail",
    "linq": "context.FestivalDetails.Select(row => row.NumOfAudience).Average();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9d52e1c9147eeb0e05aec41e636d7ce37f256962c9dd9d8038a30d14b391c539",
    "sql": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3",
    "linq": "context.FestivalDetails.OrderByDescending(row => row.Year).Select(row => new { row.FestivalName }).Take(3).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ed427109b716fa7701d49551306c761353e0088ee08905e030e2751cd90d1f2c",
    "sql": "SELECT T2.Name , T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID",
    "linq": "context.Nominations.Join(context.Artworks, T1 => T1.ArtworkId, T2 => T2.ArtworkId, (T1, T2) => new { T1, T2 }).Join(context.FestivalDetails, joined => joined.T1.FestivalId, T3 => T3.FestivalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.Name, row.T3.FestivalName }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ce4602c768b8cc46e07c4a9c705196da9288bde8b74a7932b5cfbfd2f2822f99",
    "sql": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T3.Year = 2007",
    "linq": "context.Nominations.Join(context.Artworks, T1 => T1.ArtworkId, T2 => T2.ArtworkId, (T1, T2) => new { T1, T2 }).Join(context.FestivalDetails, joined => joined.T1.FestivalId, T3 => T3.FestivalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Year == 2007).Select(row => new { row.T2.Type }).Distinct().ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ba1c826078c11d8b2d0b98c88c9ff55227c43f22cda3ef69f70512e27b8c9a55",
    "sql": "SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID ORDER BY T3.Year",
    "linq": "context.Nominations.Join(context.Artworks, T1 => T1.ArtworkId, T2 => T2.ArtworkId, (T1, T2) => new { T1, T2 }).Join(context.FestivalDetails, joined => joined.T1.FestivalId, T3 => T3.FestivalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T3.Year).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4f5414ec3098427bfd2ba758275050aa83fccf8704dfb1ac3e1070e1eb5c2c56",
    "sql": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T2.Type = \"Program Talent Show\"",
    "linq": "context.Nominations.Join(context.Artworks, T1 => T1.ArtworkId, T2 => T2.ArtworkId, (T1, T2) => new { T1, T2 }).Join(context.FestivalDetails, joined => joined.T1.FestivalId, T3 => T3.FestivalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Type == \"Program Talent Show\").Select(row => new { row.T3.FestivalName }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6182a61f53810e5d124f302f64c7e6ef4cd2ae2d0537b59ee1b28e3e761e04a8",
    "sql": "SELECT T1.Festival_ID , T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*) >= 2",
    "linq": "context.Nominations.Join(context.Artworks, T1 => T1.ArtworkId, T2 => T2.ArtworkId, (T1, T2) => new { T1, T2 }).Join(context.FestivalDetails, joined => joined.T1.FestivalId, T3 => T3.FestivalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.FestivalId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.FestivalId, group.First().T3.FestivalName }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6e85dd6d3de9c643eb6e11bdebfed6e4c96262476fafb1dedaf1cf311a312acf",
    "sql": "SELECT T1.Festival_ID , T3.Festival_Name , COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID",
    "linq": "context.Nominations.Join(context.Artworks, T1 => T1.ArtworkId, T2 => T2.ArtworkId, (T1, T2) => new { T1, T2 }).Join(context.FestivalDetails, joined => joined.T1.FestivalId, T3 => T3.FestivalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.FestivalId }).Select(group => new { group.Key.FestivalId, group.First().T3.FestivalName, Count = group.Count() }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "167757bbd47b7bd51a4720647ab80c669afc0f082337bf4428cfc967fb27fb61",
    "sql": "SELECT TYPE , COUNT(*) FROM artwork GROUP BY TYPE",
    "linq": "context.Artworks.GroupBy(row => new { row.Type }).Select(group => new { group.Key.Type, Count = group.Count() }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4b688a13a3ff20c83d1dbf246a6d737253b228f4c3ac414e0c878451c7642d6b",
    "sql": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Artworks.GroupBy(row => new { row.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9254694501dae58b5fb9ce5a0b2e00ed59fa57af4853ddda2f071b10d8f40ffe",
    "sql": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*) > 1",
    "linq": "context.FestivalDetails.GroupBy(row => new { row.Year }).Where(group => group.Count() > 1).Select(group => new { group.Key.Year }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "361f01c0f31b7f800ad6ce4b680978baf305988d2c70f24b9d176047b83ce9f5",
    "sql": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)",
    "linq": "context.Artworks.Where(row => !context.Nominations.Select(row => row.ArtworkId).Contains(row.ArtworkId)).Select(row => new { row.Name }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "15e3c7fc32a0cb3a4063478cd6bea4188d6d5238603fe8d5f229112d9a187d11",
    "sql": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR = 2008 OR YEAR = 2010",
    "linq": "context.FestivalDetails.Where(row => row.Year == 2008 || row.Year == 2010).Select(row => new { row.NumOfAudience }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4d05b52b8770aaba76d301c1970e102f6e92e9ba5d682f4414d6bdaa94eaf308",
    "sql": "SELECT sum(Num_of_Audience) FROM festival_detail",
    "linq": "context.FestivalDetails.Select(row => row.NumOfAudience).Sum();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e018ef3402a01411a007fad6e4b051ffc18bcca492aa493fa715b7b1826d64c",
    "sql": "SELECT YEAR FROM festival_detail WHERE LOCATION = 'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'",
    "linq": "context.FestivalDetails.Where(row => row.Location == \"United States\").Where(row => row.Year.HasValue).Select(row => row.Year.Value).Intersect(context.FestivalDetails.Where(row => row.Location != \"United States\").Where(row => row.Year.HasValue).Select(row => row.Year.Value)).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "01a96b4bc025d3072e307b59ffbf33bae6b74d39bbc0b4803dc78ac760b241a8",
    "sql": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
    "linq": "context.ProductSuppliers.OrderByDescending(row => (double) row.TotalAmountPurchased).Select(row => new { row.ProductId }).Take(3).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7dab1c707e8eaad7adb290e8b18bc939bc99e8caa95e1a5eb900183840924f63",
    "sql": "SELECT product_id , product_type_code FROM products ORDER BY product_price LIMIT 1",
    "linq": "context.Products.OrderBy(row => (double) row.ProductPrice).Select(row => new { row.ProductId, row.ProductTypeCode }).Take(1).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9a4d55f3c8afee083d5edb1df8bcead494b5eb492b20a5f9f0f3c96e20968240",
    "sql": "SELECT count(DISTINCT product_type_code) FROM products",
    "linq": "context.Products.Select(row => row.ProductTypeCode).Distinct().Count();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a01707b2f542d33a977f81884d649c846f328a0cca1651184f90ea77de059c5b",
    "sql": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_id = 10",
    "linq": "context.Addresses.Join(context.CustomerAddresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CustomerId == 10).Select(row => new { row.T1.AddressDetails }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "701a39674dbc73c5ce0a90d49865de06cf50fe24b20757650c0157a923558071",
    "sql": "SELECT T1.staff_id , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Department Manager\"",
    "linq": "context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.JobTitleCode == \"Department Manager\").Select(row => new { row.T1.StaffId, row.T1.StaffGender }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "417ae1060f6f8d94c38d2d675ba8d4aef16118acd4e09f3825e23b197e2f3816",
    "sql": "SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code",
    "linq": "context.Customers.GroupBy(row => new { row.PaymentMethodCode }).Select(group => new { group.Key.PaymentMethodCode, Count = group.Count() }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bf7c518355c79a39f4155a4e2c5a015bf6c7e98eaa7d4dac643924c8849a7d20",
    "sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.OrderItems.GroupBy(row => new { row.ProductId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ProductId }).Take(1).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9a30cb0675f6b89598d99987b600648f20a2e02696f3a10b8f0ea18c40f004fa",
    "sql": "SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.CustomerName, group.First().T1.CustomerPhone, group.First().T1.CustomerEmail }).Take(1).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b8a1cf7b3031942f6e5a20c7fb0c9b8105aca0eac046a1840bc71eb01b83201f",
    "sql": "SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code",
    "linq": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Select(group => new { group.Key.ProductTypeCode, AverageProductPrice = group.Select(row => (double) row.ProductPrice).Average() }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7ae0e0535d45d3f8e075e5caee5d287a3821f56873b245fd73bcad8cb14a4b22",
    "sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE T2.dept_store_chain_name = \"South\"",
    "linq": "context.DepartmentStores.Join(context.DepartmentStoreChains, T1 => T1.DeptStoreChainId, T2 => T2.DeptStoreChainId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DeptStoreChainName == \"South\").Count();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "051cabbf8f44e31098d7dd31147eb5a46d49c8862fdd9e3dfeb545f3a73c9ab9",
    "sql": "SELECT T1.staff_name , T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1",
    "linq": "context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.DateAssignedTo).Select(row => new { row.T1.StaffName, row.T2.JobTitleCode }).Take(1).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bebc6c3746e913afb74f125270df142bc594045ab28848a487fd7cbf4b5c4fd1",
    "sql": "SELECT T2.product_type_code , T2.product_name , T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3",
    "linq": "context.ProductSuppliers.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.SupplierId == 3).Select(row => new { row.T2.ProductTypeCode, row.T2.ProductName, row.T2.ProductPrice }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "648867fed89ea7c09da792ceac36182bdabde7376a22f732a98cbfb9879e858f",
    "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Pending\" ORDER BY T2.customer_id",
    "linq": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatusCode == \"Pending\").OrderBy(row => row.T2.CustomerId).Select(row => new { row.T1.CustomerName }).Distinct().ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2a09a93cea0b8e0db0282c03ba42d52754b1ee7ae23ceb091464206e8ada60fd",
    "sql": "SELECT T1.customer_name , T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"New\" INTERSECT SELECT T1.customer_name , T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Pending\"",
    "linq": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatusCode == \"New\").Select(row => new { row.T1.CustomerName, row.T1.CustomerAddress }).Intersect(context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatusCode == \"Pending\").Select(row => new { row.T1.CustomerName, row.T1.CustomerAddress })).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "febf2565d00968c1212122651502d01427a5bf527fde407bc2b3bf2d13af7a01",
    "sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 2 AND T2.product_price > (SELECT avg(product_price) FROM products)",
    "linq": "context.ProductSuppliers.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.SupplierId == 2 && row.T2.ProductPrice > context.Products.Select(row => (double) row.ProductPrice).Average()).Select(row => new { row.T1.ProductId }).ToList();",
    "db_name": "department_store",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,167): error CS0019: Operator '>' cannot be applied to operands of type 'decimal?' and 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.41",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "31c5be84065c41942f172fceb054f6372e6d9301657a40d2c1e490ba179b6a08",
    "sql": "SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"marketing\" INTERSECT SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"managing\"",
    "linq": "context.Departments.Join(context.DepartmentStores, T1 => T1.DeptStoreId, T2 => T2.DeptStoreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DepartmentName == \"marketing\").Select(row => new { row.T2.DeptStoreId, row.T2.StoreName }).Intersect(context.Departments.Join(context.DepartmentStores, T1 => T1.DeptStoreId, T2 => T2.DeptStoreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DepartmentName == \"managing\").Select(row => new { row.T2.DeptStoreId, row.T2.StoreName })).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4e0fd5b0979af39f8d9f8c2033471ccb7ea0808c505a2e716f074cf5b3951e1f",
    "sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
    "linq": "context.DepartmentStores.GroupBy(row => new { row.DeptStoreChainId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DeptStoreChainId }).Take(2).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3f83dd29c8d06a9e7740bad182bf0c3959ac78bd31bd9070a79e307b87d9eea7",
    "sql": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
    "linq": "context.StaffDepartmentAssignments.GroupBy(row => new { row.DepartmentId }).OrderBy(group => group.Count()).Select(group => new { group.Key.DepartmentId }).Take(1).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f39ff0173a44aa660587064aabfee036a36d46521d16c0aabce7f03a6022ca22",
    "sql": "SELECT product_type_code , max(product_price) , min(product_price) FROM products GROUP BY product_type_code",
    "linq": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Select(group => new { group.Key.ProductTypeCode, MaxProductPrice = group.Select(row => (double) row.ProductPrice).Max(), MinProductPrice = group.Select(row => (double) row.ProductPrice).Min() }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d2bfb03dd8505624f4f77712d5dcd78df314435b6b94218b42ef35c03db72ecb",
    "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price) > (SELECT avg(product_price) FROM products)",
    "linq": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Where(group => group.Average(row => row.ProductPrice) > context.Products.Select(row => (double) row.ProductPrice).Average()).Select(group => new { group.Key.ProductTypeCode }).ToList();",
    "db_name": "department_store",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,88): error CS0019: Operator '>' cannot be applied to operands of type 'decimal?' and 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.85",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5ac716af63de74b411e932b3ce968dfcfec938476114e0ca60a0e358ac65026e",
    "sql": "SELECT T1.staff_id , T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
    "linq": "context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.DateAssignedTo - row.T2.DateAssignedFrom).Select(row => new { row.T1.StaffId, row.T1.StaffName }).Take(1).ToList();",
    "db_name": "department_store",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7be16473ff41d1af519c28ed3b1aecbd0ab7a0d00981fed48b02bc14dc01243e",
    "sql": "SELECT product_name , product_id FROM products WHERE product_price BETWEEN 600 AND 700",
    "linq": "context.Products.Where(row => row.ProductPrice >= 600 && row.ProductPrice <= 700).Select(row => new { row.ProductName, row.ProductId }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "647a36f4808a6d943660364d726e3998a141faf2b933ec2ddf7fef255541cfca",
    "sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date > (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code = \"Cancelled\")",
    "linq": "context.CustomerOrders.Where(row => row.OrderDate > context.CustomerOrders.Where(row => row.OrderStatusCode == \"Cancelled\").Select(row => row.OrderDate).Min()).Select(row => new { row.CustomerId }).Distinct().ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9ec9383931e1f4fc263fe5b4b3f1e76bb7732487f93331d3a56f19ff2531e8d4",
    "sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical Staff')",
    "linq": "context.StaffDepartmentAssignments.Where(row => row.DateAssignedTo < context.StaffDepartmentAssignments.Where(row => row.JobTitleCode == \"Clerical Staff\").Select(row => row.DateAssignedTo).Max()).Select(row => new { row.StaffId }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "336b9ced1e52fa205807fe404b47f04dee7bf4267749aacf04faa1d3088ac918",
    "sql": "SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
    "linq": "context.Customers.Where(row => EF.Functions.Like(row.CustomerAddress, \"%TN%\")).Select(row => new { row.CustomerName, row.CustomerId }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0afa9248dfa8df14c54ed3bcf5f2b504b7bb8cb4ab9d83acc7d19a4d73e1843f",
    "sql": "SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"",
    "linq": "context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.DateAssignedFrom, \"2016%\")).Select(row => new { row.T1.StaffName, row.T1.StaffGender }).ToList();",
    "db_name": "department_store",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,162): error CS1503: Argument 2: cannot convert from 'System.DateTime' to 'string?' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.62",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "85b5aa2ae6a2ec2778f9d433bbec37345002868b96eb478947536efc347a1293",
    "sql": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*) > 1",
    "linq": "context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StaffId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.StaffName }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d5c3da08b29d10dd050efe5a925b1c95d08363d595cbf007d50ccef7c9b453e2",
    "sql": "SELECT T1.supplier_name , T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id ORDER BY T3.address_details",
    "linq": "context.Suppliers.Join(context.SupplierAddresses, T1 => T1.SupplierId, T2 => T2.SupplierId, (T1, T2) => new { T1, T2 }).Join(context.Addresses, joined => joined.T2.AddressId, T3 => T3.AddressId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T3.AddressDetails).Select(row => new { row.T1.SupplierName, row.T1.SupplierPhone }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "576ed61d16027449c925540081a060106e2670d095df32eecbef5165609d619f",
    "sql": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers",
    "linq": "context.Customers.Select(row => row.CustomerPhone).Union(context.Suppliers.Select(row => row.SupplierPhone)).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "120ef2580c29a9c4255999423bc83a30a0e98b85f285f5355e7f887fb29b8764",
    "sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*) > 3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased) > 80000",
    "linq": "context.OrderItems.GroupBy(row => new { row.ProductId }).Where(group => group.Count() > 3).Select(group => group.Key.ProductId).Union(context.ProductSuppliers.GroupBy(row => new { row.ProductId }).Where(group => group.Sum(row => row.TotalAmountPurchased) > 80000).Select(group => group.Key.ProductId)).ToList();",
    "db_name": "department_store",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6d8a6e221f5c73120ec571a76fd82979394bd61655a41ec0a76c320f8922e247",
    "sql": "SELECT product_id , product_name FROM products WHERE product_price < 600 OR product_price > 900",
    "linq": "context.Products.Where(row => row.ProductPrice < 600 || row.ProductPrice > 900).Select(row => new { row.ProductId, row.ProductName }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "55e318fb8063f369eb0c1c3037a059662adef8e9a7c11b721e1146121edde8e2",
    "sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased) > 50000 OR avg(total_amount_purchased) < 30000",
    "linq": "context.ProductSuppliers.GroupBy(row => new { row.SupplierId }).Where(group => group.Average(row => row.TotalAmountPurchased) > 50000 || group.Average(row => row.TotalAmountPurchased) < 30000).Select(group => new { group.Key.SupplierId }).ToList();",
    "db_name": "department_store",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "81c26f8377c5995887db60f43bec9deb55548310c79132460e9389bbd91593e0",
    "sql": "SELECT avg(total_amount_purchased) , avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id = (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",
    "linq": "context.ProductSuppliers.Where(row => row.SupplierId == context.ProductSuppliers.GroupBy(row => new { row.SupplierId }).OrderByDescending(group => group.Count()).Select(group => group.Key.SupplierId).Take(1).First()).GroupBy(row => 1).Select(group => new { AverageTotalAmountPurchased = group.Select(row => (double) row.TotalAmountPurchased).Average(), AverageTotalValuePurchased = group.Select(row => (double) row.TotalValuePurchased).Average() }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4708745879dfc1551cfb84b9f205f4ae69ee676369df71e920eb26dd36bc4cbe",
    "sql": "SELECT max(customer_code) , min(customer_code) FROM Customers",
    "linq": "context.Customers.GroupBy(row => 1).Select(group => new { MaxCustomerCode = group.Select(row => row.CustomerCode).Max(), MinCustomerCode = group.Select(row => row.CustomerCode).Min() }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4584f20e2a9a68f367b4f3486cf35bc26df931a94a70058910d626502189150a",
    "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = \"keyboard\"",
    "linq": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.OrderItems, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Products, joined => joined.T3.ProductId, T4 => T4.ProductId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.ProductName == \"keyboard\").Select(row => new { row.T1.CustomerName }).Distinct().ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "874406436f79be83f82db473949e2ac55782a66ee68bdf500aea83a2e88df1e8",
    "sql": "SELECT DISTINCT T1.supplier_name , T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = \"red jeans\"",
    "linq": "context.Suppliers.Join(context.ProductSuppliers, T1 => T1.SupplierId, T2 => T2.SupplierId, (T1, T2) => new { T1, T2 }).Join(context.Products, joined => joined.T2.ProductId, T3 => T3.ProductId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.ProductName == \"red jeans\").Select(row => new { row.T1.SupplierName, row.T1.SupplierPhone }).Distinct().ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "683645f23c34f7e3b90f4541152107e1158455fb14932e02347b015f9cd0804d",
    "sql": "SELECT max(product_price) , min(product_price) , product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code",
    "linq": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Select(group => new { MaxProductPrice = group.Select(row => (double) row.ProductPrice).Max(), MinProductPrice = group.Select(row => (double) row.ProductPrice).Min(), group.Key.ProductTypeCode }).OrderBy(group => group.ProductTypeCode).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "01615c69254e50437633a409a1e3bcf262998075cc7e9cf722515166117b5e62",
    "sql": "SELECT order_id , customer_id FROM customer_orders WHERE order_status_code = \"Cancelled\" ORDER BY order_date",
    "linq": "context.CustomerOrders.Where(row => row.OrderStatusCode == \"Cancelled\").OrderBy(row => row.OrderDate).Select(row => new { row.OrderId, row.CustomerId }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "968bb59a3053eba87b90a789f3e1f0f3d7c735fedb5a0660f8cb166dd986847f",
    "sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id) >= 2",
    "linq": "context.CustomerOrders.Join(context.OrderItems, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Join(context.Products, joined => joined.T2.ProductId, T3 => T3.ProductId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.ProductId }).Where(group => group.Count(row => row.T1.CustomerId) >= 2).Select(group => new { group.First().T3.ProductName }).Distinct().ToList();",
    "db_name": "department_store",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,323): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.54",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bb68fdb3c81c82e3c73063ff966c3511a6ac62891a417b42bc38ff673eec7ca2",
    "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id) >= 3",
    "linq": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.OrderItems, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count(row => row.T3.ProductId) >= 3).Select(group => new { group.First().T1.CustomerName }).Distinct().ToList();",
    "db_name": "department_store",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,327): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.73",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1cc72d331624200b97ee40e406ee8893ac36a36e82b3095d998b994b8120269a",
    "sql": "SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Sales Person\" EXCEPT SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Clerical Staff\"",
    "linq": "context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.JobTitleCode == \"Sales Person\").Select(row => new { row.T1.StaffName, row.T1.StaffGender }).Except(context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.JobTitleCode == \"Clerical Staff\").Select(row => new { row.T1.StaffName, row.T1.StaffGender })).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5f58e52c294c9c7a069df735537629dca421de08bead0636bbb7a2459f2c4f9a",
    "sql": "SELECT customer_id , customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
    "linq": "context.Customers.Where(row => EF.Functions.Like(row.CustomerAddress, \"%WY%\") && row.PaymentMethodCode != \"Credit Card\").Select(row => new { row.CustomerId, row.CustomerName }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9147d63937a2f9a73bfbd408fcd7d70d373f6aecb7de86f6977736cf300228b6",
    "sql": "SELECT avg(product_price) FROM products WHERE product_type_code = 'Clothes'",
    "linq": "context.Products.Where(row => row.ProductTypeCode == \"Clothes\").Select(row => (double) row.ProductPrice).Average();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8e2f013f651d5d1e600d3d15ea9029b0ce3c10bc31b04cffbea999bee2a9de28",
    "sql": "SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price DESC LIMIT 1",
    "linq": "context.Products.Where(row => row.ProductTypeCode == \"Hardware\").OrderByDescending(row => (double) row.ProductPrice).Select(row => new { row.ProductName }).Take(1).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ce869b17711880f938a1c515bf917d15a08177ca929e9775b089da602cef987c",
    "sql": "SELECT count(*) FROM STUDENT",
    "linq": "context.Students.Count();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5fea35f12b290df2766d3234190431d698d0be932601a24cb670651f673b925a",
    "sql": "SELECT count(*) FROM VOTING_RECORD",
    "linq": "context.VotingRecords.Count();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "52a26bb81879a02331484122bb812dec1d4895e1e51de916971ad8f789bf3418",
    "sql": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD",
    "linq": "context.VotingRecords.Select(row => row.PresidentVote).Distinct().Count();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "82517d981d385dfd8e9a7a44256e1c58e2d3ef9c83e86e937a2d5230e95cff89",
    "sql": "SELECT max(Age) FROM STUDENT",
    "linq": "context.Students.Select(row => row.Age).Max();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c3bee81a04f68d7ca689f833698250375792069bf20089b00a069ac594106c3b",
    "sql": "SELECT LName FROM STUDENT WHERE Major = 50",
    "linq": "context.Students.Where(row => row.Major == 50).Select(row => new { row.Lname }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "39815a0c4077739bdd30ca337dce95606933e76d6a6ec5d82afdc4d9d22a2734",
    "sql": "SELECT Fname FROM STUDENT WHERE Age > 22",
    "linq": "context.Students.Where(row => row.Age > 22).Select(row => new { row.Fname }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f2f0b2add6986fee4dee4b8fa9d274dac87ab3ccac87f66741f860c253179922",
    "sql": "SELECT Major FROM STUDENT WHERE Sex = \"M\"",
    "linq": "context.Students.Where(row => row.Sex == \"M\").Select(row => new { row.Major }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7dceb1acd9fd87aa7c38e29d04c05b319562fcc0e5a77a25da5c7251fa13be19",
    "sql": "SELECT avg(Age) FROM STUDENT WHERE Sex = \"F\"",
    "linq": "context.Students.Where(row => row.Sex == \"F\").Select(row => row.Age).Average();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b122713c10cac3d4cccd7f0b68e0c60b6c30387a5b22be6dfe455c07130f1081",
    "sql": "SELECT max(Age) , min(Age) FROM STUDENT WHERE Major = 600",
    "linq": "context.Students.Where(row => row.Major == 600).GroupBy(row => 1).Select(group => new { MaxAge = group.Select(row => row.Age).Max(), MinAge = group.Select(row => row.Age).Min() }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c5d5da0e5f7111ac654259afc683617e092a32c0e7393785687b66a0a96b0692",
    "sql": "SELECT Advisor FROM STUDENT WHERE city_code = \"BAL\"",
    "linq": "context.Students.Where(row => row.CityCode == \"BAL\").Select(row => new { row.Advisor }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b5264f22d13ea10de8b587fc00d6ee4607453e7e4e773cd7fc066971f21f4770",
    "sql": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE = \"Fall\"",
    "linq": "context.VotingRecords.Where(row => row.ElectionCycle == \"Fall\").Select(row => new { row.SecretaryVote }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d12da141f2c5e5b57599ef73fa58988a54373633815581ab9383ad3ec87c262e",
    "sql": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date = \"08/30/2015\"",
    "linq": "context.VotingRecords.Where(row => row.RegistrationDate == \"08/30/2015\").Select(row => new { row.PresidentVote }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "08fbe7b7a672da28aeae4a383aa514e30c3cbfcf3ecfce56fd7882182d54c09d",
    "sql": "SELECT DISTINCT Registration_Date , Election_Cycle FROM VOTING_RECORD",
    "linq": "context.VotingRecords.Select(row => new { row.RegistrationDate, row.ElectionCycle }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ab2e47c745715594a176a6f2f483de0e213242e1eed0c7d63b571f827c664f06",
    "sql": "SELECT DISTINCT President_Vote , VICE_President_Vote FROM VOTING_RECORD",
    "linq": "context.VotingRecords.Select(row => new { row.PresidentVote, row.VicePresidentVote }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e07bb8e0b462dee51b9a0b4425b43e1c3ff662d673146cbce5dd21c7a3008a25",
    "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_President_VOTE",
    "linq": "context.Students.Join(context.VotingRecords, T1 => T1.StuId, T2 => T2.ClassPresidentVote, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Lname }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fcd7f5ebf974233e1a6ff763832273562526b7bb44f5d6c6eb1b1ce71d0aa03f",
    "sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_Senator_VOTE",
    "linq": "context.Students.Join(context.VotingRecords, T1 => T1.StuId, T2 => T2.ClassSenatorVote, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Fname }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ae75c8c3df785613067303bf2d95088f25e3f7f4d2a5601a09eff37521ba4d25",
    "sql": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE T2.Election_Cycle = \"Fall\"",
    "linq": "context.Students.Join(context.VotingRecords, T1 => T1.StuId, T2 => T2.SecretaryVote, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ElectionCycle == \"Fall\").Select(row => new { row.T1.Age }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6990d66ec3ba7d334f0b71539d243fbb9c88cd664c188d38d0ed014d7cb85b53",
    "sql": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote WHERE T2.Election_Cycle = \"Spring\"",
    "linq": "context.Students.Join(context.VotingRecords, T1 => T1.StuId, T2 => T2.TreasurerVote, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ElectionCycle == \"Spring\").Select(row => new { row.T1.Advisor }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e8aba8610e65f6778259985c9cc6b51222ed2db4c0e36e79382955d64adea143",
    "sql": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote",
    "linq": "context.Students.Join(context.VotingRecords, T1 => T1.StuId, T2 => T2.TreasurerVote, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Major }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d7d869044ad26f8635c3d5e811ca0dc7d4e08fc9b2581d94781d25e3533a5e77",
    "sql": "SELECT DISTINCT T1.Fname , T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_VOTE WHERE T1.sex = \"F\"",
    "linq": "context.Students.Join(context.VotingRecords, T1 => T1.StuId, T2 => T2.PresidentVote, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Sex == \"F\").Select(row => new { row.T1.Fname, row.T1.Lname }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "318f59a02bc9613b92cbbc411e042321d0614fa82b5f72cf6ec9dc8ca569d882",
    "sql": "SELECT DISTINCT T1.Fname , T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE WHERE T1.age = 18",
    "linq": "context.Students.Join(context.VotingRecords, T1 => T1.StuId, T2 => T2.VicePresidentVote, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age == 18).Select(row => new { row.T1.Fname, row.T1.Lname }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "01d5bc211453bd8a538d98b02bb486c4f5110b29fe27af39a1da238b77ed05cd",
    "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.Sex = \"M\" AND T2.Election_Cycle = \"Fall\"",
    "linq": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Sex == \"M\" && row.T2.ElectionCycle == \"Fall\").Count();",
    "db_name": "voter_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 5}]\", linq_results: \"[{0: 120}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9642938faff4d517deba879300f60e3233d3f09736472e0cb420408d07208a20",
    "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.city_code = \"NYC\" AND T2.Election_Cycle = \"Spring\"",
    "linq": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CityCode == \"NYC\" && row.T2.ElectionCycle == \"Spring\").Count();",
    "db_name": "voter_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 0}]\", linq_results: \"[{0: 15}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "29d3c685a1fdc5307d91de234aff44f2fa4a198d75b2cd5b089d2c89db1b5278",
    "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.city_code = \"NYC\" AND T2.Election_Cycle = \"Spring\"",
    "linq": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CityCode == \"NYC\" && row.T2.ElectionCycle == \"Spring\").Select(row => row.T1.Age).Average();",
    "db_name": "voter_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 22}]\", linq_results: \"[{0: 20,333333333333332}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d3c764739264fef1b0982c92553bb22ec7629e6197bc0586aa8147772827d858",
    "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.Sex = \"F\" AND T2.Election_Cycle = \"Spring\"",
    "linq": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Sex == \"F\" && row.T2.ElectionCycle == \"Spring\").Select(row => row.T1.Age).Average();",
    "db_name": "voter_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 21}]\", linq_results: \"[{0: 19,7}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "407659e506bcae921e76698fadde8b7c08f764abcf104b8dae441f62a4ec9003",
    "sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code = \"PIT\"",
    "linq": "context.Students.Join(context.VotingRecords, T1 => T1.StuId, T2 => T2.VicePresidentVote, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Fname).Distinct().Except(context.Students.Where(row => row.CityCode == \"PIT\").Select(row => row.Fname).Distinct()).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1986df4189f9a784c8e9ef37d9357b83fdfeded336328000f02312a19792b046",
    "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = \"2192\"",
    "linq": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Lname).Distinct().Except(context.Students.Where(row => row.Advisor == \"2192\").Select(row => row.Lname).Distinct()).ToList();",
    "db_name": "voter_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,172): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.59",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "277a79be76bdadcc448e2dd7cdfb4dd87165c305670772f3427487e46d8e2e91",
    "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = \"8741\"",
    "linq": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Lname).Distinct().Intersect(context.Students.Where(row => row.Advisor == \"8741\").Select(row => row.Lname).Distinct()).ToList();",
    "db_name": "voter_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,175): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.42",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c660d23758fa0a1ee0f019a4e4e013814af6e13e721f28ad9c8b1b69f2013748",
    "sql": "SELECT Advisor , count(*) FROM STUDENT GROUP BY Advisor",
    "linq": "context.Students.GroupBy(row => new { row.Advisor }).Select(group => new { group.Key.Advisor, Count = group.Count() }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "70d1273e4a3f3be478615e051c700c08e0c8d3c78cae995d63586185fab1dcee",
    "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*) > 2",
    "linq": "context.Students.GroupBy(row => new { row.Advisor }).Where(group => group.Count() > 2).Select(group => new { group.Key.Advisor }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ffeeb23c5007a3a0b493d5e5e61db190f64f8309d4212639e369e9d19e09c8d5",
    "sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*) < 3",
    "linq": "context.Students.GroupBy(row => new { row.Major }).Where(group => group.Count() < 3).Select(group => new { group.Key.Major }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8636b6642897541e09d5171ff169bdd4abc596c1f2f1d48896554e87fb58cd8d",
    "sql": "SELECT Election_Cycle , count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",
    "linq": "context.VotingRecords.GroupBy(row => new { row.ElectionCycle }).Select(group => new { group.Key.ElectionCycle, Count = group.Count() }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b44351e0d56c0231d93fc244bef182081ee81ea76e66b391c44d852fb16d5af5",
    "sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Students.GroupBy(row => new { row.Major }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Major }).Take(1).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2fa2d3a1a7328bfb946e75ca2287e8eae292a86de7b3527f89b3aaf1217dce80",
    "sql": "SELECT Major FROM STUDENT WHERE Sex = \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Students.Where(row => row.Sex == \"F\").GroupBy(row => new { row.Major }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Major }).Take(1).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3dd0fb8f4f7af12c7c7593a846db8e40dc7df6ab93d5f82aecb446c97cb1a4f7",
    "sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Students.GroupBy(row => new { row.CityCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CityCode }).Take(1).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4c2233deb30ed48169ffdd8dd4db8491da023f8dfa0f81d91cdfe08e7a6c187d",
    "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*) > 2",
    "linq": "context.Students.GroupBy(row => new { row.Advisor }).Where(group => group.Count() > 2).Select(group => new { group.Key.Advisor }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c576bdaf3d477a16f3d00a1a221c66fb1d0202c348ded4879818d3e8fb11f557",
    "sql": "SELECT count(*) FROM roller_coaster",
    "linq": "context.RollerCoasters.Count();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aac350bc351941d1930d3a4e76a36ae5f59934a3513c1703e7c4cbfe0b7e0061",
    "sql": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC",
    "linq": "context.RollerCoasters.OrderBy(row => row.Length).Select(row => new { row.Name }).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b2152d75b63d9c76ecc342da28b29f9edbba671eea4183234561ac88d29ebdad",
    "sql": "SELECT LENGTH , Height FROM roller_coaster",
    "linq": "context.RollerCoasters.Select(row => new { row.Length, row.Height }).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "592360345dab00ebd9c9d992ded15a19ade48e7810418905538cfb8109d46114",
    "sql": "SELECT Name FROM country WHERE Languages != \"German\"",
    "linq": "context.Countries.Where(row => row.Languages != \"German\").Select(row => new { row.Name }).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7f6d554665d0f97bbaf7d1ef1b42c766bcb96af9b35b0a17f45f87fd8560ea96",
    "sql": "SELECT Status FROM roller_coaster WHERE LENGTH > 3300 OR Height > 100",
    "linq": "context.RollerCoasters.Where(row => row.Length > 3300 || row.Height > 100).Select(row => new { row.Status }).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f480c9472b6c2f37b09c6f0f3e9427b19dfd9aad6ffdcf589180dc0fcfd74395",
    "sql": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
    "linq": "context.RollerCoasters.OrderByDescending(row => row.Length).Select(row => new { row.Speed }).Take(1).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fbd71a4ea737d233fbc9ea28238f07fb9113180e58e883d2692543d24b2158d8",
    "sql": "SELECT avg(Speed) FROM roller_coaster",
    "linq": "context.RollerCoasters.Select(row => row.Speed).ToList().Select(value => double.Parse(value)).Average();",
    "db_name": "roller_coaster",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 56,31666666666666}]\", linq_results: \"[{0: 113,16666666666667}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "54c0e372d649060722f7152685a1a78963c9556249df4e0eb8c84f0959ac4133",
    "sql": "SELECT Status , COUNT(*) FROM roller_coaster GROUP BY Status",
    "linq": "context.RollerCoasters.GroupBy(row => new { row.Status }).Select(group => new { group.Key.Status, Count = group.Count() }).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fe18c733852befa5fb0c5f4431ae0bb45d8263145adff902cf4e7a8a773cc4fa",
    "sql": "SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.RollerCoasters.GroupBy(row => new { row.Status }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Status }).Take(1).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "546f0c36e81e92e765d3a2d915995d169bf979ed4ff1d6fb1b093e4ab60cd3f5",
    "sql": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*) > 2",
    "linq": "context.RollerCoasters.GroupBy(row => new { row.Status }).Where(group => group.Count() > 2).Select(group => new { group.Key.Status }).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b1fd083eff92f5e29dbab5f0245b565844c70a5a51916bfb51f4216e7d8a91f3",
    "sql": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1",
    "linq": "context.RollerCoasters.OrderByDescending(row => row.Speed).Select(row => new { row.Park }).Take(1).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d049da35a4738371048b8ec8090de9701cf9b83e618ab6b643511086ce32c143",
    "sql": "SELECT T2.Name , T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID",
    "linq": "context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).Select(row => new { T2Name = row.T2.Name, T1Name = row.T1.Name }).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c6c73e4a20346c83e9e02e05ab4caad45991bd5ae458ddfb64a0796ec560fe22",
    "sql": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
    "linq": "context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Where(group => group.Count() > 1).Select(group => new { group.Key.Name }).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "01406ba008dd700884c46baa534b0385ac95a547a626fcce5abf9299e873ab06",
    "sql": "SELECT T1.Name , T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID ORDER BY T2.Height DESC LIMIT 1",
    "linq": "context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Height).Select(row => new { row.T1.Name, row.T1.Population }).Take(1).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f0503e55b058b1e317d6a2154b20fc541f46eaa984b418ae15539f11cc1b427d",
    "sql": "SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name",
    "linq": "context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Select(group => new { group.Key.Name, AverageSpeed = group.Select(row => row.T2.Speed).Average() }).ToList();",
    "db_name": "roller_coaster",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,216): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eadfeee63dcd0b479d8755eb29c33a3a25e1c5e929e1813c79d08ca6d6c7d429",
    "sql": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH > 3000 )",
    "linq": "context.Countries.Where(row => !context.RollerCoasters.Where(row => row.Length > 3000).Select(row => row.CountryId).Contains(row.CountryId)).Count();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "89536ee72b817def42e6e262d45a4ba93b0803000df98460d1ac617172cdbef3",
    "sql": "SELECT T1.name , T1.area , T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID WHERE T2.speed > 60 INTERSECT SELECT T1.name , T1.area , T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID WHERE T2.speed < 55",
    "linq": "context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Speed > \"60\").Where(row => row.T1.Area.HasValue && row.T1.Population.HasValue).Select(row => new { row.T1.Name, T1Area = row.T1.Area.Value, T1Population = row.T1.Population.Value }).Intersect(context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Speed < \"55\").Where(row => row.T1.Area.HasValue && row.T1.Population.HasValue).Select(row => new { row.T1.Name, T1Area = row.T1.Area.Value, T1Population = row.T1.Population.Value })).ToList();",
    "db_name": "roller_coaster",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,467): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.56",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e462aaa755e618177727b145504ac32181718a3e01ff8ba0194dc3af0901ffd4",
    "sql": "SELECT count(*) FROM editor",
    "linq": "context.Editors.Count();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "448ea14e45d7a3a32f8978c52ef61b4c710c75a2903fe0589dcb89fa1b0587c7",
    "sql": "SELECT Name FROM editor ORDER BY Age ASC",
    "linq": "context.Editors.OrderBy(row => row.Age).Select(row => new { row.Name }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "069169a3f8e500dfad0dd96adf201f70a694656afaf61df149df20959d6d3c93",
    "sql": "SELECT Name , Age FROM editor",
    "linq": "context.Editors.Select(row => new { row.Name, row.Age }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "99289359cca478bac35d060048ef6f3295db16ecc3e70173ee2d3dc6dbfcbf50",
    "sql": "SELECT Name FROM editor WHERE Age > 25",
    "linq": "context.Editors.Where(row => row.Age > 25).Select(row => new { row.Name }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4ac2604700b948b9174c84b80b6204c0393e35e4a62fb03544bec743104b4159",
    "sql": "SELECT Name FROM editor WHERE Age = 24 OR Age = 25",
    "linq": "context.Editors.Where(row => row.Age == 24 || row.Age == 25).Select(row => new { row.Name }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "93bc916474ec7d6add2892abad108c047975b8e46aa77e3a703ae64687571729",
    "sql": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
    "linq": "context.Editors.OrderBy(row => row.Age).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2180617603fb1d28d7f553178b09cbcd20a4c81532a70cc6d4b830dd5f70a7ad",
    "sql": "SELECT Age , COUNT(*) FROM editor GROUP BY Age",
    "linq": "context.Editors.GroupBy(row => new { row.Age }).Select(group => new { group.Key.Age, Count = group.Count() }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "43451b983695f9b19b84948ed4f4dcee2b28ce8efd5463d0a11511309bef3d0b",
    "sql": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Editors.GroupBy(row => new { row.Age }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Age }).Take(1).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c0fadd0b15a0a39aff8d3e4081db6e31769a53d694066615830d00cdb5d4565e",
    "sql": "SELECT DISTINCT Theme FROM journal",
    "linq": "context.Journals.Select(row => new { row.Theme }).Distinct().ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4d85c408429f922b65a9a5a3eae9c7309966a6932d62c58de59df0f4fb9b0262",
    "sql": "SELECT T2.Name , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID",
    "linq": "context.JournalCommittees.Join(context.Editors, T1 => T1.EditorId, T2 => T2.EditorId, (T1, T2) => new { T1, T2 }).Join(context.Journals, joined => joined.T1.JournalId, T3 => T3.JournalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.Name, row.T3.Theme }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "22d890634f270a05a79ecc9e48670378178c6f5d5868dfcefb119aa9978baf19",
    "sql": "SELECT T2.Name , T2.age , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme ASC",
    "linq": "context.JournalCommittees.Join(context.Editors, T1 => T1.EditorId, T2 => T2.EditorId, (T1, T2) => new { T1, T2 }).Join(context.Journals, joined => joined.T1.JournalId, T3 => T3.JournalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T3.Theme).Select(row => new { row.T2.Name, row.T2.Age, row.T3.Theme }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f56c65b1f40517a31cc9f08953ca8cc75ebc8794f636c60d9722215aa14daadb",
    "sql": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000",
    "linq": "context.JournalCommittees.Join(context.Editors, T1 => T1.EditorId, T2 => T2.EditorId, (T1, T2) => new { T1, T2 }).Join(context.Journals, joined => joined.T1.JournalId, T3 => T3.JournalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Sales > 3000).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7843ed6d233c9cb83e5a3075035ff7edf755cd44a30796803057e715c282c8c3",
    "sql": "SELECT T1.editor_id , T1.Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id",
    "linq": "context.Editors.Join(context.JournalCommittees, T1 => T1.EditorId, T2 => T2.EditorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EditorId }).Select(group => new { group.Key.EditorId, group.First().T1.Name, Count = group.Count() }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "979c160ba13f7de620ac7c74cded88f3ac502fdbd2c9f08790460097eabda26c",
    "sql": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*) >= 2",
    "linq": "context.Editors.Join(context.JournalCommittees, T1 => T1.EditorId, T2 => T2.EditorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Name }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7a6891e1949a00b3f4fbbff1826945bdc692c81962e821376aa9194c9e6e2a95",
    "sql": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
    "linq": "context.Editors.Where(row => !context.JournalCommittees.Select(row => row.EditorId).Contains(row.EditorId)).Select(row => new { row.Name }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5ca427d7300091e318ea8a424f28f67fcd99ad7e2af3c46afb8eda19d172fbca",
    "sql": "SELECT date , theme , sales FROM journal EXCEPT SELECT T1.date , T1.theme , T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID",
    "linq": "context.Journals.Where(row => row.Sales.HasValue).Select(row => new { row.Date, row.Theme, row.Sales.Value }).Except(context.Journals.Join(context.JournalCommittees, T1 => T1.JournalId, T2 => T2.JournalId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Sales.HasValue).Select(row => new { row.T1.Date, row.T1.Theme, row.T1.Sales.Value })).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2d44b164bab15b76bfc02c6722b7fd25efdd444bd6b7d4f45a5cd63634720205",
    "sql": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.work_type = 'Photo'",
    "linq": "context.Journals.Join(context.JournalCommittees, T1 => T1.JournalId, T2 => T2.JournalId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WorkType == \"Photo\").Select(row => row.T1.Sales).Average();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2bd12d180b3a95b55a1025af94dfc08997ace08dc3752dbee468f92bc06a4fbd",
    "sql": "SELECT count(*) FROM club",
    "linq": "context.Clubs.Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "49c8b9daee6403d0b7762b58af04f656ffe524170e8ec7d139274172e966d099",
    "sql": "SELECT clubname FROM club",
    "linq": "context.Clubs.Select(row => new { row.ClubName }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e4fe5ec7b492ebf5a93880af84d4127765a8536fefe662e383af394897819bd",
    "sql": "SELECT count(*) FROM student",
    "linq": "context.Students.Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bc6e55f00aac0f56d78d98fe607b7dabfc7f9f147e61c6ea91664fbb1575d63a",
    "sql": "SELECT DISTINCT fname FROM student",
    "linq": "context.Students.Select(row => new { row.Fname }).Distinct().ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "205b64b0c7c0781386dafc73142f473ff5e1758dec80313eda06c775687a2cb0",
    "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\").Select(row => new { row.t3.Lname }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f669e91e13705e22b46a78dfa9b5d6a3d5ac63fbb05c28d9f4cf9060a503175e",
    "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Hopkins Student Enterprises\").Select(row => new { row.t3.Lname }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dedac659ea6a8071c8ba561364779c3036392dbdb6c15401479080dac76b8890",
    "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Tennis Club\").Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "db4d4a2ffde4b99f45e1fbaef0414c8473503d267acd45db40df4efc54bee620",
    "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Pen and Paper Gaming\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Pen and Paper Gaming\").Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "87c96cf5a5dccf41258566970d218225c8820cbfbe98362420a5ef13e51530ff",
    "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Linda\" AND t3.lname = \"Smith\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == \"Linda\" && row.t3.Lname == \"Smith\").Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4610955f7e0b2ab1196c30d4834c724a8846f6a8fbef26de213632ad445f5284",
    "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Tracy\" AND t3.lname = \"Kim\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == \"Tracy\" && row.t3.Lname == \"Kim\").Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "be7745d1e07d293a0a1c41bb94c8c46747453c466b5dd69882d14d21c214d0f7",
    "sql": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.sex = \"F\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\" && row.t3.Sex == \"F\").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cac8a6b3b26450c90c3186fe1ac09dfb065de62fa8d2f03ef42251c9b18dc17f",
    "sql": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t3.sex = \"M\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Hopkins Student Enterprises\" && row.t3.Sex == \"M\").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9e32e526693d195da614bdddd7b4bb52f1ab5f1109fb433353033d0b83471920",
    "sql": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.major = \"600\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\" && row.t3.Major == \"600\").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList();",
    "db_name": "club_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,286): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.44",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ccbde338a5e52a2c9ecc42abcb85deb26e3269389f49f73983a59b2372f7c691",
    "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.major = \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Major == \"600\").GroupBy(row => new { row.t1.ClubName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ClubName }).Take(1).ToList();",
    "db_name": "club_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,245): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.57",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c7499dacd8be8939b97f249c2d2c768fa39c7e404e6fae722d182e8c718648d9",
    "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.sex = \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Sex == \"F\").GroupBy(row => new { row.t1.ClubName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ClubName }).Take(1).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6581dfeb8d17ea9a65645da64914770dd5289dae4f369923350161ea2b3eab89",
    "sql": "SELECT clubdesc FROM club WHERE clubname = \"Tennis Club\"",
    "linq": "context.Clubs.Where(row => row.ClubName == \"Tennis Club\").Select(row => new { row.ClubDesc }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2060062c144c490b118c4bae5a8edd876395c6e59ded42bfc33d6fb448ca6107",
    "sql": "SELECT clubdesc FROM club WHERE clubname = \"Pen and Paper Gaming\"",
    "linq": "context.Clubs.Where(row => row.ClubName == \"Pen and Paper Gaming\").Select(row => new { row.ClubDesc }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "75824a54b45f8054dbbeb7635e8c42d9d59b6bb762b8e5df979660a7aca5c6ba",
    "sql": "SELECT clublocation FROM club WHERE clubname = \"Tennis Club\"",
    "linq": "context.Clubs.Where(row => row.ClubName == \"Tennis Club\").Select(row => new { row.ClubLocation }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ac6a8383156b7c307526b440ad09859accfef4615605f83ebd64fc74f689280b",
    "sql": "SELECT clublocation FROM club WHERE clubname = \"Pen and Paper Gaming\"",
    "linq": "context.Clubs.Where(row => row.ClubName == \"Pen and Paper Gaming\").Select(row => new { row.ClubLocation }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1f961b9453434435f500c6caedcc72cf005fd21e4e6bebbd84e12bdc856bb641",
    "sql": "SELECT clublocation FROM club WHERE clubname = \"Hopkins Student Enterprises\"",
    "linq": "context.Clubs.Where(row => row.ClubName == \"Hopkins Student Enterprises\").Select(row => new { row.ClubLocation }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d17f68682173e18c169b037bc0c769f74e1aa37543be00099b0134d539a96912",
    "sql": "SELECT clubname FROM club WHERE clublocation = \"AKW\"",
    "linq": "context.Clubs.Where(row => row.ClubLocation == \"AKW\").Select(row => new { row.ClubName }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "87deabd1592cbb815c5e2be1d8d73846ff9409c0778533bac6167cc536814985",
    "sql": "SELECT count(*) FROM club WHERE clublocation = \"HHH\"",
    "linq": "context.Clubs.Where(row => row.ClubLocation == \"HHH\").Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "53ffcccc51d685752af1077666cd631a6a9ba0c95c00a622501e6c25f24923bc",
    "sql": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t2.position = \"President\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\" && row.t2.Position == \"President\").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fd79b896d2d2bf6d7a3ff41f7085d9c404d76549274ff1e5ae58ad74223453a2",
    "sql": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t2.position = \"CTO\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Hopkins Student Enterprises\" && row.t2.Position == \"CTO\").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b63aa942ecef9d58dba1bb2708b15ad6af5579fa759eb2f97adbd1c3eb1e8339",
    "sql": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE t1.clubname = \"Bootup Baltimore\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\").Select(row => row.t2.Position).Distinct().Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "976bae5bc874369d0b9611080d0294b5ec254bef28ce8224bd79b6e00cd61cc7",
    "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.age > 18",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\" && row.t3.Age > 18).Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cf525bcc6c89d5444318971fefaffcd8d242846e00c2f8e76d9926f5f7edad06",
    "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.age < 18",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\" && row.t3.Age < 18).Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3ce1923fd01781da4141dd2da080610b1c1c9ee1f6f9d5afb42e5082cbf72cd9",
    "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = \"BAL\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.CityCode == \"BAL\").Select(row => new { row.t1.ClubName }).Distinct().ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b1483d6343e5b3bbd0ce4ca10201f3e11f619b2381428f27af8dbdce93f877d1",
    "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = \"HOU\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.CityCode == \"HOU\").Select(row => new { row.t1.ClubName }).Distinct().ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cc12304bc4df87a660b84e86c5687370f455a145c5354d552df5d84289c226ed",
    "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Eric\" AND t3.lname = \"Tai\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == \"Eric\" && row.t3.Lname == \"Tai\").Select(row => row.t1.ClubName).Distinct().Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d1e65a061a65a411b121808e93bd5c5282e0e789638e4e4d7b388cc9ccd8bcd1",
    "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Davis\" AND t3.lname = \"Steven\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == \"Davis\" && row.t3.Lname == \"Steven\").Select(row => new { row.t1.ClubName }).Distinct().ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a95ba3274496a3fd686f83ba6bcc962ec3ad14328b3a6c9812a9a491d5a5f1d2",
    "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.advisor = 1121",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Advisor == 1121).Select(row => new { row.t1.ClubName }).Distinct().ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "12b145402e105ce44f16e750cd8f811d53581e7172bea36c5d9259d03da788ce",
    "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\").Select(row => row.t3.Age).Average();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "46694e01ea6766d7331396780dc5259389068cbcd0c9e0893e0316ac98627eea",
    "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Hopkins Student Enterprises\").Select(row => row.t3.Age).Average();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d9b20d2e73f38640d26ab481b4a989b2f8ecbfadbf84e51a982a46289b3b144d",
    "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"",
    "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Tennis Club\").Select(row => row.t3.Age).Average();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a561b139988950c2a90b905f71ad51c6faf568400bf8bdb914f8f3b04da87576",
    "sql": "SELECT i_id FROM item WHERE title = \"orange\"",
    "linq": "context.Items.Where(row => row.Title == \"orange\").Select(row => new { row.IId }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "15efc5542317cbf57f28cce1924b51b93de7e61d9c75171ef8f591bce8077cee",
    "sql": "SELECT * FROM item",
    "linq": "context.Items.Select(row => new { row.IId, row.Title }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4d159ee9d3c71f1312235233b85c3b14465796bd824ac6863b5c50d1170d1907",
    "sql": "SELECT count(*) FROM review",
    "linq": "context.Reviews.Count();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b55036ae6773940eb9a2bba380726ac1b5e8a6e0233ba86835813d19110fc465",
    "sql": "SELECT count(*) FROM useracct",
    "linq": "context.Useraccts.Count();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "58cc93fd251fbaf0acc6b39d75a4ea5d6cdfa2084f4d631cb8f2bf4058458c6a",
    "sql": "SELECT avg(rating) , max(rating) FROM review",
    "linq": "context.Reviews.GroupBy(row => 1).Select(group => new { AverageRating = group.Select(row => row.Rating).Average(), MaxRating = group.Select(row => row.Rating).Max() }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6e36493590a0ec166131fced6bc16deeb61c57c81c98c94514dcfc5e666620bf",
    "sql": "SELECT min(rank) FROM review",
    "linq": "context.Reviews.Select(row => row.Rank).Min();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "72730006e05500d4ff69a190121bc1e227f4d48aefa2e38884d6b6172f59605d",
    "sql": "SELECT count(DISTINCT u_id) FROM review",
    "linq": "context.Reviews.Select(row => row.UId).Distinct().Count();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3e1abe5fdce54dff0947dd9f203781081ad27a65e749aa2125d5c0e63bf5c534",
    "sql": "SELECT count(DISTINCT i_id) FROM review",
    "linq": "context.Reviews.Select(row => row.IId).Distinct().Count();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "476f3577f381fdd2b389a9fc516a2d00397cc68be589649cb250fb37ea8fed80",
    "sql": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
    "linq": "context.Items.Where(row => !context.Reviews.Select(row => row.IId).Contains(row.IId)).Count();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "82429bced4a72ddb9381a70d5e5b7a6d1fa327b16ee4d22dae6e6371b287e0bb",
    "sql": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
    "linq": "context.Useraccts.Where(row => !context.Reviews.Select(row => row.UId).Contains(row.UId)).Select(row => new { row.Name }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ebe60ba7b093a716ecdda12ab278d9c4510c50cae54eba16bf888338fcc44b4a",
    "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating = 10",
    "linq": "context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Rating == 10).Select(row => new { row.T1.Title }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "00245bcebb94e91456d866b2c1c90bb982740277aab4f9c814b2b544147c789d",
    "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > (SELECT avg(rating) FROM review)",
    "linq": "context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Rating > context.Reviews.Select(row => row.Rating).Average()).Select(row => new { row.T1.Title }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a22093b1841c6faa636b1fc1ce9c8c84ba4317c1ece5bc3f0f7834fddf9d0ba7",
    "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5",
    "linq": "context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Rating < 5).Select(row => new { row.T1.Title }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "36f72dc6cbe46a34870c36a4a48b70ed3af524f7b24e5bb5de16f16ca2c3e4c0",
    "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5",
    "linq": "context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Rating > 8).Select(row => row.T1.Title).Intersect(context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Rating < 5).Select(row => row.T1.Title)).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e8d838358955f3e9b93608cffb010fa3c8c60ac4009c98296f62f85444996f7b",
    "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rank > 3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating) > 5",
    "linq": "context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Rank > 3).Select(row => row.T1.Title).Intersect(context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.IId }).Where(group => group.Average(row => row.T2.Rating) > 5).Select(group => group.First().T1.Title)).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ebc616c09f7fe7a18175bec52d4af52023da39c516afe83138d8d0d4c261f1bf",
    "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1",
    "linq": "context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.IId }).OrderBy(group => group.Average(row => row.T2.Rating)).Select(group => new { group.First().T1.Title }).Take(1).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "16d1f953285afc4b507bd18f66174665ffdf97b1c7b5c4351dd572ffb23cab12",
    "sql": "SELECT title FROM item ORDER BY title",
    "linq": "context.Items.OrderBy(row => row.Title).Select(row => new { row.Title }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b19451aad2e556be766a0de2a7ded0a06264814f4e839e1cea5abaa744b427d4",
    "sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Useraccts.Join(context.Reviews, T1 => T1.UId, T2 => T2.UId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.UId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name }).Take(1).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ce0835010192159f55e5942df5894bcbbfd9b3355d398af754ff4575a733cef7",
    "sql": "SELECT T1.title , T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1",
    "linq": "context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.IId }).OrderByDescending(group => group.Average(row => row.T2.Rating)).Select(group => new { group.First().T1.Title, group.Key.IId }).Take(1).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f32b884c52b0b44465636cc77fc77ed2a83b06fff8df79ee485a37f075f63bd6",
    "sql": "SELECT T1.title , T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",
    "linq": "context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.IId }).OrderByDescending(group => group.Average(row => row.T2.Rank)).Select(group => new { group.First().T1.Title, group.Key.IId }).Take(1).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "80957aaff5532d637c0dceb1021f4aaf4404e3c50b0f21e607792c0a2338640c",
    "sql": "SELECT T1.name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id",
    "linq": "context.Useraccts.Join(context.Reviews, T1 => T1.UId, T2 => T2.UId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.UId }).Select(group => new { group.First().T1.Name, AverageRating = group.Select(row => row.T2.Rating).Average() }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3e7be45a2a71e8e68d446308dc8dd44b07dd0ce1ed4b8234bb7c1f6bedd14bb3",
    "sql": "SELECT T1.name , count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id",
    "linq": "context.Useraccts.Join(context.Reviews, T1 => T1.UId, T2 => T2.UId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.UId }).Select(group => new { group.First().T1.Name, Count = group.Count() }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "742a61327342300a765a881fb06443f7a9b5cc249f75d5b9d30cd8a7b454d61b",
    "sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id ORDER BY T2.rating DESC LIMIT 1",
    "linq": "context.Useraccts.Join(context.Reviews, T1 => T1.UId, T2 => T2.UId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Rating).Select(row => new { row.T1.Name }).Take(1).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0fbafeb0ea96c6d6a957ae1928b9583f8a2a6ce0856207ff7c077870cc06cdde",
    "sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1",
    "linq": "context.Useraccts.Join(context.Trusts, T1 => T1.UId, T2 => T2.SourceUId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.SourceUId }).OrderByDescending(group => group.Average(row => row.T2.Trust1)).Select(group => new { group.First().T1.Name }).Take(1).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9e7c57823c5e45571e94d3b3dc3428fdd8735c9d99d3223e6d82974209bb0d1d",
    "sql": "SELECT T1.name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id",
    "linq": "context.Useraccts.Join(context.Trusts, T1 => T1.UId, T2 => T2.TargetUId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TargetUId }).Select(group => new { group.First().T1.Name, AverageTrust1 = group.Select(row => row.T2.Trust1).Average() }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ddaba5aa53f3496e49df65d8ea801eff823a38d9dc38f5e2d25edbd95a8e8190",
    "sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id ORDER BY trust LIMIT 1",
    "linq": "context.Useraccts.Join(context.Trusts, T1 => T1.UId, T2 => T2.TargetUId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Trust1).Select(row => new { row.T1.Name }).Take(1).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "45f6d22ea853df0ac1201662fe522e021ffd423cf60264630d39f7539a7ceafd",
    "sql": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
    "linq": "context.Items.Where(row => !context.Reviews.Select(row => row.IId).Contains(row.IId)).Select(row => new { row.Title }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a3662d0919aa15f4cbcd6ef1d8c82f5127ffba23f2cf1b9242c14f6818418d46",
    "sql": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
    "linq": "context.Useraccts.Where(row => !context.Reviews.Select(row => row.UId).Contains(row.UId)).Count();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e57fa12d8dafaab5b02169f0248fdd4a3f3fcd776ef911528f58621a4d5b012d",
    "sql": "SELECT count(*) FROM member",
    "linq": "context.Members.Count();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d000746484417fceb7ea19b0686ba7348719c164f70b2a7afba545face374ad5",
    "sql": "SELECT Name FROM member ORDER BY Name ASC",
    "linq": "context.Members.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "13b2f64ec96ade53d147aba7130e46534e6a6e70ae9f0f8fca3e937240be3719",
    "sql": "SELECT Name , Country FROM member",
    "linq": "context.Members.Select(row => new { row.Name, row.Country }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2a26e88f69c82abc4be484b74f7d467e890fedd0bb0961c50d4874b679143f57",
    "sql": "SELECT Name FROM member WHERE Country = \"United States\" OR Country = \"Canada\"",
    "linq": "context.Members.Where(row => row.Country == \"United States\" || row.Country == \"Canada\").Select(row => new { row.Name }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b0d5a152fe80b0152de70aa5283b6a933217a622ea54e437f42131f2b6d60d54",
    "sql": "SELECT Country , COUNT(*) FROM member GROUP BY Country",
    "linq": "context.Members.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "39f9ed3af50dbff579cf25c43cc1541e7301153334a54a21fbb20ac1872d8462",
    "sql": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Members.GroupBy(row => new { row.Country }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Country }).Take(1).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "89cc434d26cc1b51e283f44678d7e01f1af701c84115391d4cb23c504fee9da4",
    "sql": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*) > 2",
    "linq": "context.Members.GroupBy(row => new { row.Country }).Where(group => group.Count() > 2).Select(group => new { group.Key.Country }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7755505bea71b0e00b7c9afe8f86be7168abc3a1153dc18ac6cf5b1e2cca8d23",
    "sql": "SELECT Leader_Name , College_Location FROM college",
    "linq": "context.Colleges.Select(row => new { row.LeaderName, row.CollegeLocation }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ff012979a06d2dc9d27c172884cc0a0ec4ff6994c6bb691ad99df132c369a59c",
    "sql": "SELECT T2.Name , T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID",
    "linq": "context.Colleges.Join(context.Members, T1 => T1.CollegeId, T2 => T2.CollegeId, (T1, T2) => new { T1, T2 }).Select(row => new { T2Name = row.T2.Name, T1Name = row.T1.Name }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "29f21e054a7f8039020ed48d1a6efdc8343046ce684a945f3bb49e2e158d11af",
    "sql": "SELECT T2.Name , T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID ORDER BY T2.Name ASC",
    "linq": "context.Colleges.Join(context.Members, T1 => T1.CollegeId, T2 => T2.CollegeId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Name).Select(row => new { row.T2.Name, row.T1.CollegeLocation }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0fbbfdb92743d098fde281ecf15055aee93b0b53aea0414edb2513742b24a157",
    "sql": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID WHERE T2.Country = \"Canada\"",
    "linq": "context.Colleges.Join(context.Members, T1 => T1.CollegeId, T2 => T2.CollegeId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country == \"Canada\").Select(row => new { row.T1.LeaderName }).Distinct().ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d63e80dc23588fa8e3ba9c61e37d84ccef68335f1e62ca0d64b76df64b748daf",
    "sql": "SELECT T1.Name , T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID",
    "linq": "context.Members.Join(context.Rounds, T1 => T1.MemberId, T2 => T2.MemberId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name, row.T2.DecorationTheme }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a74936f51df91b526fb493767ae63a7f90952011bd796e7a89e1ad28338bb078",
    "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Rank_in_Round > 3",
    "linq": "context.Members.Join(context.Rounds, T1 => T1.MemberId, T2 => T2.MemberId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.RankInRound > 3).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2b4b1adb5d4890a17b13c505598499668cb8e6ca21751585a937083368eb8542",
    "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID ORDER BY Rank_in_Round ASC",
    "linq": "context.Members.Join(context.Rounds, T1 => T1.MemberId, T2 => T2.MemberId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.RankInRound).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aa92a1d72ecc5c0ab53cf2c97794ef2bfee73b97e890e2c6dc18d34c68973500",
    "sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)",
    "linq": "context.Members.Where(row => !context.Rounds.Select(row => row.MemberId).Contains(row.MemberId)).Select(row => new { row.Name }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9a46b79c4eca535169c92af421a088279eb2ed4d51c8fc5b7e70ed3f0edcb3e9",
    "sql": "SELECT count(*) FROM station",
    "linq": "context.Stations.Count();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "be935d11c791c60ea0018854d81241da5ec47d94f4b2e47fbe2783862f34d56b",
    "sql": "SELECT name , LOCATION , number_of_platforms FROM station",
    "linq": "context.Stations.Select(row => new { row.Name, row.Location, row.NumberOfPlatforms }).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0db45ba99a05e2a60dac95a085d4884e36c45e27ad7f18b5fa76b17af923e436",
    "sql": "SELECT DISTINCT LOCATION FROM station",
    "linq": "context.Stations.Select(row => new { row.Location }).Distinct().ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2ddeb61855a51219c612d956b920a0c71afebffb4723818168989b8e1aed9132",
    "sql": "SELECT name , total_passengers FROM station WHERE LOCATION != 'London'",
    "linq": "context.Stations.Where(row => row.Location != \"London\").Select(row => new { row.Name, row.TotalPassengers }).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bc13dd32698a8bfbcaaacf0fc226b178f9169233b74f45af19897812d7a5c954",
    "sql": "SELECT name , main_services FROM station ORDER BY total_passengers DESC LIMIT 3",
    "linq": "context.Stations.OrderByDescending(row => row.TotalPassengers).Select(row => new { row.Name, row.MainServices }).Take(3).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "abc332de648ac3347317bb5fd523daf8ca3c3902e777256a8b5c87e6f11e52b6",
    "sql": "SELECT avg(total_passengers) , max(total_passengers) FROM station WHERE LOCATION = 'London' OR LOCATION = 'Glasgow'",
    "linq": "context.Stations.Where(row => row.Location == \"London\" || row.Location == \"Glasgow\").GroupBy(row => 1).Select(group => new { AverageTotalPassengers = group.Select(row => row.TotalPassengers).Average(), MaxTotalPassengers = group.Select(row => row.TotalPassengers).Max() }).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "019c8ed2378b134246fe99ab3e4d1897d9dfef4b911a39d87bc837f6be2cbaaa",
    "sql": "SELECT LOCATION , sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY LOCATION",
    "linq": "context.Stations.GroupBy(row => new { row.Location }).Select(group => new { group.Key.Location, SumNumberOfPlatforms = group.Select(row => row.NumberOfPlatforms).Sum(), SumTotalPassengers = group.Select(row => row.TotalPassengers).Sum() }).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e5d7ae4505cc07379e9412b97dabd923b297b4e6df1a6d1c764969e47ce22de0",
    "sql": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms >= 15 AND total_passengers > 25",
    "linq": "context.Stations.Where(row => row.NumberOfPlatforms >= 15 && row.TotalPassengers > 25).Select(row => new { row.Location }).Distinct().ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2358b93bcd11cdb075635f3b334a8b7cb2ed7a7213fa399f2e8cf969ca6080fa",
    "sql": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms >= 15",
    "linq": "context.Stations.Select(row => row.Location).Except(context.Stations.Where(row => row.NumberOfPlatforms >= 15).Select(row => row.Location)).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b72489fc98e0b8061bfc880a02a4a4a0d27f82806e79fbb198b9574f29a981dc",
    "sql": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Stations.GroupBy(row => new { row.Location }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Location }).Take(1).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5c0041f787567676cd695ea9dde7f4e2e6f82a62147e63504fc75562097197a6",
    "sql": "SELECT name , TIME , service FROM train",
    "linq": "context.Trains.Select(row => new { row.Name, row.Time, row.Service }).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e6751dc4c9a105aade5aa89691f112261185b1244a33eabea866d24592661caa",
    "sql": "SELECT count(*) FROM train",
    "linq": "context.Trains.Count();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "230beb34c67afeb051e748993e3c796122229270f84cd39039828021699f8e74",
    "sql": "SELECT name , service FROM train ORDER BY TIME",
    "linq": "context.Trains.OrderBy(row => row.Time).Select(row => new { row.Name, row.Service }).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "52ce361a409b683fee4b44fda3a11ec5f08f3e2717e6dc27a8c39cb598aa52e9",
    "sql": "SELECT T2.name , count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id",
    "linq": "context.TrainStation.Join(context.Stations, T1 => T1.StationId, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StationId }).Select(group => new { group.First().T2.Name, Count = group.Count() }).ToList();",
    "db_name": "train_station",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'TrainStationContext' does not contain a definition for 'TrainStation' and no accessible extension method 'TrainStation' accepting a first argument of type 'TrainStationContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.23",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4df55306d58aa2df849c825de6975eb0ee2607397898fa3770a9eacb19655b19",
    "sql": "SELECT T2.name , T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id",
    "linq": "context.TrainStation.Join(context.Stations, T1 => T1.StationId, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Join(context.Trains, joined => joined.T1.TrainId, T3 => T3.TrainId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { T2Name = row.T2.Name, T3Name = row.T3.Name }).ToList();",
    "db_name": "train_station",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'TrainStationContext' does not contain a definition for 'TrainStation' and no accessible extension method 'TrainStation' accepting a first argument of type 'TrainStationContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.20",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5d4d55dff0c84b2014d737a285a05d221901fc1b4b2d676f17472aed939f831f",
    "sql": "SELECT T3.name , T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T2.location = 'London' ORDER BY T3.time DESC",
    "linq": "context.TrainStation.Join(context.Stations, T1 => T1.StationId, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Join(context.Trains, joined => joined.T1.TrainId, T3 => T3.TrainId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Location == \"London\").OrderByDescending(row => row.T3.Time).Select(row => new { row.T3.Name, row.T3.Time }).ToList();",
    "db_name": "train_station",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'TrainStationContext' does not contain a definition for 'TrainStation' and no accessible extension method 'TrainStation' accepting a first argument of type 'TrainStationContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.17",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4aa4541cf790d10ac9fcf917bf03de54cc2842c158caddb445e91f664b6d929e",
    "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.TrainStation.Join(context.Stations, T1 => T1.StationId, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StationId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name }).Take(1).ToList();",
    "db_name": "train_station",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'TrainStationContext' does not contain a definition for 'TrainStation' and no accessible extension method 'TrainStation' accepting a first argument of type 'TrainStationContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.22",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "12f681a4524c3d096fbcaf3427f35e16d51c741e489f5b87de66c18244bba185",
    "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id HAVING count(*) >= 2",
    "linq": "context.TrainStation.Join(context.Stations, T1 => T1.StationId, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StationId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "train_station",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'TrainStationContext' does not contain a definition for 'TrainStation' and no accessible extension method 'TrainStation' accepting a first argument of type 'TrainStationContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.23",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ff44934796624024fc6f3ec70cdd483c657d09b701804429e8fadc1c86f8ef73",
    "sql": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*) = 1",
    "linq": "context.Stations.GroupBy(row => new { row.Location }).Where(group => group.Count() == 1).Select(group => new { group.Key.Location }).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5d32ea958997e1fb2430e8c8a8a4cf1718e96d561668f92ea7416690ebcdfe0a",
    "sql": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)",
    "linq": "context.Stations.Where(row => !context.TrainStation.Select(row => row.StationId).Contains(row.StationId)).Select(row => new { row.Name }).ToList();",
    "db_name": "train_station",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,51): error CS1061: 'TrainStationContext' does not contain a definition for 'TrainStation' and no accessible extension method 'TrainStation' accepting a first argument of type 'TrainStationContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.29",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0ab21b1711bfad1986a5c7243166e3d0e9d969cc82321161ab8d3e73806409ef",
    "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = \"Ananthapuri Express\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = \"Guruvayur Express\"",
    "linq": "context.TrainStation.Join(context.Stations, T1 => T1.StationId, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Join(context.Trains, joined => joined.T1.TrainId, T3 => T3.TrainId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Ananthapuri Express\").Select(row => row.T2.Name).Intersect(context.TrainStation.Join(context.Stations, T1 => T1.StationId, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Join(context.Trains, joined => joined.T1.TrainId, T3 => T3.TrainId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Guruvayur Express\").Select(row => row.T2.Name)).ToList();",
    "db_name": "train_station",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,338): error CS1061: 'TrainStationContext' does not contain a definition for 'TrainStation' and no accessible extension method 'TrainStation' accepting a first argument of type 'TrainStationContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.25",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3a0fa04aaabc247ed71fef5aa5543a92ff4e47814e49a03bea854a995056b7f5",
    "sql": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id = T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id = T4.station_id WHERE t4.location = \"London\")",
    "linq": "context.TrainStation.Join(context.Trains, T1 => T1.TrainId, T2 => T2.TrainId, (T1, T2) => new { T1, T2 }).Where(row => !context.TrainStation.Join(context.Stations, T3 => T3.StationId, T4 => T4.StationId, (T3, T4) => new { T3, T4 }).Where(row => row.T4.Location == \"London\").Select(row => row.T4.StationId).Contains(row.T1.StationId)).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "train_station",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,140): error CS1061: 'TrainStationContext' does not contain a definition for 'TrainStation' and no accessible extension method 'TrainStation' accepting a first argument of type 'TrainStationContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.16",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4be64796fb4ad4649606b83f122c29ad00d1af5bfcf517020ac1812b4da572e7",
    "sql": "SELECT name , LOCATION FROM station ORDER BY Annual_entry_exit , Annual_interchanges",
    "linq": "context.Stations.OrderBy(row => row.AnnualEntryExit).ThenBy(row => row.AnnualInterchanges).Select(row => new { row.Name, row.Location }).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "51e2acaa83c2d161df9846119c0730a6754630143bbb835deb8014f5e7f02aa3",
    "sql": "SELECT count(DISTINCT allergy) FROM Allergy_type",
    "linq": "context.AllergyTypes.Select(row => row.Allergy).Distinct().Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c5c3d0ea09ab6ec37911c2493ad94cde4cb095acef323a2ea7f16313d8126815",
    "sql": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
    "linq": "context.AllergyTypes.Select(row => row.AllergyType1).Distinct().Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6af06f0fc2642f189dc7f676710eba60ee17ca7647f3418047c053c558f5a68d",
    "sql": "SELECT DISTINCT allergytype FROM Allergy_type",
    "linq": "context.AllergyTypes.Select(row => new { row.AllergyType1 }).Distinct().ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c47ef3a02a6e46daaa3388423877a24aa9f49f4348047dc74c63f118ef44f30a",
    "sql": "SELECT allergy , allergytype FROM Allergy_type",
    "linq": "context.AllergyTypes.Select(row => new { row.Allergy, row.AllergyType1 }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cd6a2744db0b486303247ba1f25396836328e79c4385e5d47a1c8410ed48d507",
    "sql": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = \"food\"",
    "linq": "context.AllergyTypes.Where(row => row.AllergyType1 == \"food\").Select(row => new { row.Allergy }).Distinct().ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "653bed07757123e017b1d614614414fd693dcf1101b1507d2836f43892ed64d2",
    "sql": "SELECT allergytype FROM Allergy_type WHERE allergy = \"Cat\"",
    "linq": "context.AllergyTypes.Where(row => row.Allergy == \"Cat\").Select(row => new { row.AllergyType1 }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "28d07f21748b43c6275fe7d41d6e73b7b5dc28e7fdd709770695b788b323dee3",
    "sql": "SELECT count(*) FROM Allergy_type WHERE allergytype = \"animal\"",
    "linq": "context.AllergyTypes.Where(row => row.AllergyType1 == \"animal\").Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d7144c37931806c634f8658815592313f83006998cca5a43b6900f09fcb40eb0",
    "sql": "SELECT allergytype , count(*) FROM Allergy_type GROUP BY allergytype",
    "linq": "context.AllergyTypes.GroupBy(row => new { row.AllergyType1 }).Select(group => new { group.Key.AllergyType1, Count = group.Count() }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "905b817a43e3d1c0efb2fe8a83495e1d896c9c44dd809409ca1ac263f9c73ac1",
    "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.AllergyTypes.GroupBy(row => new { row.AllergyType1 }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AllergyType1 }).Take(1).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "81e9c84abcedb04ee4953b72e18702d308b2b19b42979f6fd76f0f79d9a7813f",
    "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.AllergyTypes.GroupBy(row => new { row.AllergyType1 }).OrderBy(group => group.Count()).Select(group => new { group.Key.AllergyType1 }).Take(1).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f1463dc2677c65f99bdfa97da0975642883da50fdb06e928fabe7bef7f16b2c6",
    "sql": "SELECT count(*) FROM Student",
    "linq": "context.Students.Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ac127851daadbdbf5f4dc5c9706604ca155381ebef6244a5b3492e6aea17bfcb",
    "sql": "SELECT Fname , Lname FROM Student",
    "linq": "context.Students.Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e5b3b14aeb94a62e924ae029a04a487f8138d8750166b74184b584dfe9389f2f",
    "sql": "SELECT count(DISTINCT advisor) FROM Student",
    "linq": "context.Students.Select(row => row.Advisor).Distinct().Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e76f105f9c294cd60ab861c814424f6922f5fd08f8700437a112089108fe43f9",
    "sql": "SELECT DISTINCT Major FROM Student",
    "linq": "context.Students.Select(row => new { row.Major }).Distinct().ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c1dbdbad59b6b5a9cc0b62e52da1947d6e2da0676e35342da9dcb93527f74511",
    "sql": "SELECT DISTINCT city_code FROM Student",
    "linq": "context.Students.Select(row => new { row.CityCode }).Distinct().ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8ef40ee82bfa9fe4d8636958a7958ff89929061ada3ea48f7c5922209b1bfa4f",
    "sql": "SELECT Fname , Lname , Age FROM Student WHERE Sex = 'F'",
    "linq": "context.Students.Where(row => row.Sex == \"F\").Select(row => new { row.Fname, row.Lname, row.Age }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6f90ac2258f074dc998813a3df90fd3025fe357e51d2f4cef563c69eb38119f5",
    "sql": "SELECT StuID FROM Student WHERE Sex = 'M'",
    "linq": "context.Students.Where(row => row.Sex == \"M\").Select(row => new { row.StuId }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4c1c5a1e6084b2910c03697fe0a71bc9604f251e0895aee2439a17ba28d24acd",
    "sql": "SELECT count(*) FROM Student WHERE age = 18",
    "linq": "context.Students.Where(row => row.Age == 18).Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2f0ea662be9794d84742886a71ff6a3813d3ba6b1a692be37b91fec6d79b2ce4",
    "sql": "SELECT StuID FROM Student WHERE age > 20",
    "linq": "context.Students.Where(row => row.Age > 20).Select(row => new { row.StuId }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9af8cbbb7a02cccec4a4058462fade36b1595b7d38d4724be5c5004c7a8fdc8c",
    "sql": "SELECT city_code FROM Student WHERE LName = \"Kim\"",
    "linq": "context.Students.Where(row => row.Lname == \"Kim\").Select(row => new { row.CityCode }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "08fd1dddba7b7c5ce870b5ee5067e715413a97ed3f73de97205c14eab4ff6dc7",
    "sql": "SELECT Advisor FROM Student WHERE StuID = 1004",
    "linq": "context.Students.Where(row => row.StuId == 1004).Select(row => new { row.Advisor }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6ad7d94cc8378269b6da09126da863d8781ff6766e66ff2a3c9beb4ec77c10be",
    "sql": "SELECT count(*) FROM Student WHERE city_code = \"HKG\" OR city_code = \"CHI\"",
    "linq": "context.Students.Where(row => row.CityCode == \"HKG\" || row.CityCode == \"CHI\").Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8a2c7a0323026e96e9fbb3fe0569966f11c2ddfac66786b84a93e342d8b1967c",
    "sql": "SELECT min(age) , avg(age) , max(age) FROM Student",
    "linq": "context.Students.GroupBy(row => 1).Select(group => new { MinAge = group.Select(row => row.Age).Min(), AverageAge = group.Select(row => row.Age).Average(), MaxAge = group.Select(row => row.Age).Max() }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bb3b8d19798864c2b1e238840a1b5345c6d5ab80d1e2ff9343d8ff9ab1b9a859",
    "sql": "SELECT LName FROM Student WHERE age = (SELECT min(age) FROM Student)",
    "linq": "context.Students.Where(row => row.Age == context.Students.Select(row => row.Age).Min()).Select(row => new { row.Lname }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4bbb796e6299b022d372f89ff17779c69b37ec2f11f0fb7f7fd3c7a8f23071aa",
    "sql": "SELECT StuID FROM Student WHERE age = (SELECT max(age) FROM Student)",
    "linq": "context.Students.Where(row => row.Age == context.Students.Select(row => row.Age).Max()).Select(row => new { row.StuId }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8541511cb02850166e0dd5cd07b5f1a5dffcb6c5580d1ae94ba5b8df460001da",
    "sql": "SELECT major , count(*) FROM Student GROUP BY major",
    "linq": "context.Students.GroupBy(row => new { row.Major }).Select(group => new { group.Key.Major, Count = group.Count() }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9faff018ead732f2d4eaf4cf8be4b5346ce18c53266381f2afb6ce7726223ca9",
    "sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Students.GroupBy(row => new { row.Major }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Major }).Take(1).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3b8cdfc85eed24d31c17df9297fed2ee821fa4dd764f502872f617039b745143",
    "sql": "SELECT age , count(*) FROM Student GROUP BY age",
    "linq": "context.Students.GroupBy(row => new { row.Age }).Select(group => new { group.Key.Age, Count = group.Count() }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cb4d37f782bcf46a799776cef26abeac041c02521ac4ec10e8d82915a040c3b7",
    "sql": "SELECT avg(age) , sex FROM Student GROUP BY sex",
    "linq": "context.Students.GroupBy(row => new { row.Sex }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), group.Key.Sex }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d43fc508ffb32f92968ca1957d470d2510b28cfb03c075744c8af86aed73f254",
    "sql": "SELECT city_code , count(*) FROM Student GROUP BY city_code",
    "linq": "context.Students.GroupBy(row => new { row.CityCode }).Select(group => new { group.Key.CityCode, Count = group.Count() }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b8cd755462ad5ebb433539880d56234d1c770e8dd78190478fba9fdbec6b80c3",
    "sql": "SELECT advisor , count(*) FROM Student GROUP BY advisor",
    "linq": "context.Students.GroupBy(row => new { row.Advisor }).Select(group => new { group.Key.Advisor, Count = group.Count() }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "393e79ee76a4d2fb35019acdc0711d50de1f4e173e40e1e952a0eba3d30d9e74",
    "sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Students.GroupBy(row => new { row.Advisor }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Advisor }).Take(1).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b59b0ca056d22f1aefeea52db3c6b1d6d16eb462dcf7359e75a7e67a2a977c8e",
    "sql": "SELECT count(*) FROM Has_allergy WHERE Allergy = \"Cat\"",
    "linq": "context.HasAllergies.Where(row => row.Allergy == \"Cat\").Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "391aec63865164d496ebfa95b9f88d465f8391e1487e84b4638f5dfb8222fab0",
    "sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*) >= 2",
    "linq": "context.HasAllergies.GroupBy(row => new { row.StuId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.StuId }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6d6504d67842ca88b4e9aaf3ef079bd9bd2f75468242dcb2490e133405b8b9b8",
    "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
    "linq": "context.Students.Select(row => row.StuId).Except(context.HasAllergies.Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e49fd9ecf674c9d23a62e839cd5aaa689c9db6d78c5a0e0b692fc4b62fb12433",
    "sql": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = \"F\" AND T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\"",
    "linq": "context.HasAllergies.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Sex == \"F\" && row.T1.Allergy == \"Milk\" || row.T1.Allergy == \"Eggs\").Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4d97e3f849b478372c8067137ac9f5faaef1f1c1d8ec1a2624346f7da0f2015b",
    "sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = \"food\"",
    "linq": "context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"food\").Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0e14fc85d850bcdefa5ddb913ad4c81f598107d2f6e918d7cccf32ced20ef4c1",
    "sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.HasAllergies.GroupBy(row => new { row.Allergy }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Allergy }).Take(1).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "319c093e69d72946844fd9886f7e5e4f1a958703e5be080f6b9628b21d4f31ec",
    "sql": "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy",
    "linq": "context.HasAllergies.GroupBy(row => new { row.Allergy }).Select(group => new { group.Key.Allergy, Count = group.Count() }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e956c02bfd9d1b80c71ae69532fd08b5ad32c6883eef0e9ad0c853d478ea609",
    "sql": "SELECT T2.allergytype , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype",
    "linq": "context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AllergyType1 }).Select(group => new { group.Key.AllergyType1, Count = group.Count() }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fbaffe25379cca866fe2b37b777ad26beff61ba4529a80ab4de070b84c13a2a0",
    "sql": "SELECT lname , age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")",
    "linq": "context.Students.Where(row => context.HasAllergies.Where(row => row.Allergy == \"Milk\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value).Intersect(context.HasAllergies.Where(row => row.Allergy == \"Cat\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).Contains(row.StuId)).Select(row => new { row.Lname, row.Age }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d3352d70cff566315924dd87b85ded369aad4dad1fa43e3900c0bd460cec0e40",
    "sql": "SELECT T1.Allergy , T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" ORDER BY T1.Allergy",
    "linq": "context.AllergyTypes.Join(context.HasAllergies, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Fname == \"Lisa\").OrderBy(row => row.T1.Allergy).Select(row => new { row.T1.Allergy, row.T1.AllergyType1 }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ed124168bac0664490434a818c67faaca3ba18f5b1a8c49d76467dac30538578",
    "sql": "SELECT fname , sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")",
    "linq": "context.Students.Where(row => context.HasAllergies.Where(row => row.Allergy == \"Milk\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value).Except(context.HasAllergies.Where(row => row.Allergy == \"Cat\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).Contains(row.StuId)).Select(row => new { row.Fname, row.Sex }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f0cf77a969121411b3b35da43696f1b66ae922fd5eee4667afef537e79c1bfb8",
    "sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"animal\")",
    "linq": "context.Students.Where(row => context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"food\").Where(row => row.T1.StuId.HasValue).Select(row => row.T1.StuId.Value).Intersect(context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"animal\").Where(row => row.T1.StuId.HasValue).Select(row => row.T1.StuId.Value)).Contains(row.StuId)).Select(row => row.Age).Average();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e8c9a64b41fc478df3ba7ffc86bba7536fa6fe17a58d0fe33d7fca2f0f224c88",
    "sql": "SELECT fname , lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")",
    "linq": "context.Students.Where(row => !context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"food\").Select(row => row.T1.StuId).Contains(row.StuId)).Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9b18532bc46db522984350d4b7216a7821b61022985dd7616c2be291854ea4fe",
    "sql": "SELECT count(*) FROM Student WHERE sex = \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")",
    "linq": "context.Students.Where(row => row.Sex == \"M\" && context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"food\").Select(row => row.T1.StuId).Contains(row.StuId)).Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7f1c8fb8fe8e2e91ad9d7e57fbee32218df121713b7fc7c67512a802c8ae06ef",
    "sql": "SELECT DISTINCT T1.fname , T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = \"Milk\" OR T2.Allergy = \"Cat\"",
    "linq": "context.Students.Join(context.HasAllergies, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Allergy == \"Milk\" || row.T2.Allergy == \"Cat\").Select(row => new { row.T1.Fname, row.T1.CityCode }).Distinct().ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "91cab73e2bdaca74b4f791260478a2d82a6cbd3e0acbae66102532d40d8e5165",
    "sql": "SELECT count(*) FROM Student WHERE age > 18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" OR T2.allergytype = \"animal\")",
    "linq": "context.Students.Where(row => row.Age > 18 && !context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"food\" || row.T2.AllergyType1 == \"animal\").Select(row => row.T1.StuId).Contains(row.StuId)).Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "327465f0cf0c89188c4582487ff758cdf6c90f16f83de0c95163084f1415b056",
    "sql": "SELECT fname , major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Soy\")",
    "linq": "context.Students.Where(row => !context.HasAllergies.Where(row => row.Allergy == \"Soy\").Select(row => row.StuId).Contains(row.StuId)).Select(row => new { row.Fname, row.Major }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "212ee1e079578ef0586b03bdaed0f3645c6e563b69227874e173da3912bc54f6",
    "sql": "SELECT count(*) FROM election",
    "linq": "context.Elections.Count();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5c471b7aabed67388e6b4f451e0a87ae51c3967b2b8a6ac083b82a18ec15e2d4",
    "sql": "SELECT Votes FROM election ORDER BY Votes DESC",
    "linq": "context.Elections.OrderByDescending(row => row.Votes).Select(row => new { row.Votes }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5d5f3395daad0aa62f19fea9b8a1904c6e970cacf63ae37cc2b86576bd58603a",
    "sql": "SELECT Date , Vote_Percent FROM election",
    "linq": "context.Elections.Select(row => new { row.Date, row.VotePercent }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a6cefa0db069ed81d7214014cb10691692575bf624aea0739f37782d95327b5c",
    "sql": "SELECT min(Vote_Percent) , max(Vote_Percent) FROM election",
    "linq": "context.Elections.GroupBy(row => 1).Select(group => new { MinVotePercent = group.Select(row => row.VotePercent).Min(), MaxVotePercent = group.Select(row => row.VotePercent).Max() }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "80ee3b43ae5a5e8d0fd2ba1c200582879fd5500cc2d6de1bca43cbca1d0dc04f",
    "sql": "SELECT Name , Party FROM representative",
    "linq": "context.Representatives.Select(row => new { row.Name, row.Party }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c35077b8dc5f29fbb1ce46fd12e8340d6236cce84833ca0ccd9e15f82df5f9ad",
    "sql": "SELECT Name FROM Representative WHERE Party != \"Republican\"",
    "linq": "context.Representatives.Where(row => row.Party != \"Republican\").Select(row => new { row.Name }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7a92f1a58df96ee165e9b3c2fff8f162251c0eda2ae2ffaea0461d0a3d8c1f8e",
    "sql": "SELECT Lifespan FROM representative WHERE State = \"New York\" OR State = \"Indiana\"",
    "linq": "context.Representatives.Where(row => row.State == \"New York\" || row.State == \"Indiana\").Select(row => new { row.Lifespan }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4c140b6fbf8c36f94642c30844fbfad22530749518f7859d4a4ca477738ad69a",
    "sql": "SELECT T2.Name , T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID",
    "linq": "context.Elections.Join(context.Representatives, T1 => T1.RepresentativeId, T2 => T2.RepresentativeId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name, row.T1.Date }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3df0686c8ed437fdf4cc5904122b0c0cdfad9f604eac85ffa6c866b76dec2584",
    "sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000",
    "linq": "context.Elections.Join(context.Representatives, T1 => T1.RepresentativeId, T2 => T2.RepresentativeId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Votes > 10000).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4c3c1bd1b18540588ba22c67e22eda843bdcdf72257fb2ea07683efef2da5a07",
    "sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes DESC",
    "linq": "context.Elections.Join(context.Representatives, T1 => T1.RepresentativeId, T2 => T2.RepresentativeId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Votes).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7ec8bdff203b370a6524a61dd5922dfad56b094c03b61939e22c2047281fd3db",
    "sql": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes ASC LIMIT 1",
    "linq": "context.Elections.Join(context.Representatives, T1 => T1.RepresentativeId, T2 => T2.RepresentativeId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T1.Votes).Select(row => new { row.T2.Party }).Take(1).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "df054d64e1e4bd75d59f1f4efbbbd3b87e78e14ee48d24669f6d2b9a71beec0d",
    "sql": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY Vote_Percent DESC",
    "linq": "context.Elections.Join(context.Representatives, T1 => T1.RepresentativeId, T2 => T2.RepresentativeId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.VotePercent).Select(row => new { row.T2.Lifespan }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7daaffa5ff49304cf12d9d906afeed4becfe9cdeb400be9d3c1a6b70ca86518b",
    "sql": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = \"Republican\"",
    "linq": "context.Elections.Join(context.Representatives, T1 => T1.RepresentativeId, T2 => T2.RepresentativeId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Party == \"Republican\").Select(row => (double) row.T1.Votes).Average();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "33cfdedfb2291687084ed854e7f50af4ddb266fdc42efe3d00c2ca0b7ed7d5c4",
    "sql": "SELECT Party , COUNT(*) FROM representative GROUP BY Party",
    "linq": "context.Representatives.GroupBy(row => new { row.Party }).Select(group => new { group.Key.Party, Count = group.Count() }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eaee91531c4c5f628aec491d3b57e158c2e8b469269fd0c76fcc10287f7c9857",
    "sql": "SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Representatives.GroupBy(row => new { row.Party }).Select(group => new { group.Key.Party, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "51c6d45d446c9a27d0ab92934bdc278876e89265fc52f14ae2aee2bcb3380144",
    "sql": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*) >= 3",
    "linq": "context.Representatives.GroupBy(row => new { row.Party }).Where(group => group.Count() >= 3).Select(group => new { group.Key.Party }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "df741b7e4f361c33f45541781fff5700fd25a480801acac39a8e6b9d819de889",
    "sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(*) >= 2",
    "linq": "context.Representatives.GroupBy(row => new { row.State }).Where(group => group.Count() >= 2).Select(group => new { group.Key.State }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6fce04a9712b9f5af239b5c2a83d2c81a39f4649ebd54e41cb8f3a0486770335",
    "sql": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)",
    "linq": "context.Representatives.Where(row => !context.Elections.Select(row => row.RepresentativeId).Contains(row.RepresentativeId)).Select(row => new { row.Name }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9a6c2fd06536a702c5e3b17419d8ede1f19d2b0b5603247bb59b0deb04ae0b5f",
    "sql": "SELECT Party FROM representative WHERE State = \"New York\" INTERSECT SELECT Party FROM representative WHERE State = \"Pennsylvania\"",
    "linq": "context.Representatives.Where(row => row.State == \"New York\").Select(row => row.Party).Intersect(context.Representatives.Where(row => row.State == \"Pennsylvania\").Select(row => row.Party)).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e64b9388acbb705f503df974c7278264f9e5ea7b361a0abb743da618a2934ea0",
    "sql": "SELECT count(DISTINCT Party) FROM representative",
    "linq": "context.Representatives.Select(row => row.Party).Distinct().Count();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f91d6f973649a15476472e20dae2205d484e78b0e553e7d92d71eb1bf7aeae11",
    "sql": "SELECT count(*) FROM premises",
    "linq": "context.Premises.Count();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c8295c9f129e1505f2864bb2d42eadd098e2cf0ecd36da78edf3a4dc00a95c1b",
    "sql": "SELECT DISTINCT premises_type FROM premises",
    "linq": "context.Premises.Select(row => new { row.PremisesType }).Distinct().ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4574fba791602c3acd2fd4d3431718ec078e96390f1db08034dbc83ee3059cb7",
    "sql": "SELECT premises_type , premise_details FROM premises ORDER BY premises_type",
    "linq": "context.Premises.OrderBy(row => row.PremisesType).Select(row => new { row.PremisesType, row.PremiseDetails }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0990c00e7e896e41737fa743ee417992215acb19ed224e5b96aef74dc87ebb79",
    "sql": "SELECT premises_type , count(*) FROM premises GROUP BY premises_type",
    "linq": "context.Premises.GroupBy(row => new { row.PremisesType }).Select(group => new { group.Key.PremisesType, Count = group.Count() }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2a750b545dbfea081cf629b8c7b703ad04fb08fc1fec6cd3f6634f26e50cff43",
    "sql": "SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category",
    "linq": "context.MailshotCampaigns.GroupBy(row => new { row.ProductCategory }).Select(group => new { group.Key.ProductCategory, Count = group.Count() }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3265b5d50d222d2527f70a807b31b5ae00a99d2635604dbe59c9f34ed6d6a53c",
    "sql": "SELECT customer_name , customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)",
    "linq": "context.Customers.Where(row => !context.MailshotCustomers.Select(row => row.CustomerId).Contains(row.CustomerId)).Select(row => new { row.CustomerName, row.CustomerPhone }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "93c58a124c5125dffd2cbb213670f901c2ff56f267ab8495614646c3d9177fdf",
    "sql": "SELECT T1.customer_name , T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.outcome_code = 'No Response'",
    "linq": "context.Customers.Join(context.MailshotCustomers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OutcomeCode == \"No Response\").Select(row => new { row.T1.CustomerName, row.T1.CustomerPhone }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9582428d0f9ca469e52611d065854e1dca3eb4115ca5bb2ea8df6036998ae39d",
    "sql": "SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code",
    "linq": "context.MailshotCustomers.GroupBy(row => new { row.OutcomeCode }).Select(group => new { group.Key.OutcomeCode, Count = group.Count() }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eb79e0ae29b2d041b752e8002fd162111c789f26d6587c0dbcfb8ae755487dc1",
    "sql": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE outcome_code = 'Order' GROUP BY T1.customer_id HAVING count(*) >= 2",
    "linq": "context.MailshotCustomers.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.OutcomeCode == \"Order\").GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T2.CustomerName }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fcd892fa3c691f91d1d7e9ac44e30c93dbc4caaedb421f24331f16d3efb6f47c",
    "sql": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.MailshotCustomers.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.CustomerName }).Take(1).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "48f3db71c4acf41e14a2ba04342345a4b76967ba69c847e8e8d82e7ac2ab0db5",
    "sql": "SELECT T2.customer_name , T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'Order' INTERSECT SELECT T2.customer_name , T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'No Response'",
    "linq": "context.MailshotCustomers.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.OutcomeCode == \"Order\").Select(row => new { row.T2.CustomerName, row.T2.PaymentMethod }).Intersect(context.MailshotCustomers.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.OutcomeCode == \"No Response\").Select(row => new { row.T2.CustomerName, row.T2.PaymentMethod })).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f3e35d76815fd282053e9720499c044aae4040c060d1afd0fce79aafc508c6c",
    "sql": "SELECT T2.premises_type , T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id",
    "linq": "context.CustomerAddresses.Join(context.Premises, T1 => T1.PremiseId, T2 => T2.PremiseId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.PremisesType, row.T1.AddressTypeCode }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b70d7724f139873e746bba0908344d486d305361bc9aedc4f164c451b0958fe3",
    "sql": "SELECT DISTINCT address_type_code FROM customer_addresses",
    "linq": "context.CustomerAddresses.Select(row => new { row.AddressTypeCode }).Distinct().ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f5b3c964d5db13cedda2d0154e701cae08a57b6fac2e07280bce2cf3114a4522",
    "sql": "SELECT order_shipping_charges , customer_id FROM customer_orders WHERE order_status_code = 'Cancelled' OR order_status_code = 'Paid'",
    "linq": "context.CustomerOrders.Where(row => row.OrderStatusCode == \"Cancelled\" || row.OrderStatusCode == \"Paid\").Select(row => new { row.OrderShippingCharges, row.CustomerId }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "efa8b664d7c097d5323c8b3edfafb3a2281e018f584f8933cc0062233c6b2d47",
    "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE shipping_method_code = 'FedEx' AND order_status_code = 'Paid'",
    "linq": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ShippingMethodCode == \"FedEx\" && row.T2.OrderStatusCode == \"Paid\").Select(row => new { row.T1.CustomerName }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "917c1b2cd5f7f289ce87e2e8fb2aa837566eec87da8262731600fd0acf755cc3",
    "sql": "SELECT count(*) FROM customers",
    "linq": "context.Customers.Count();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "36f75ad8e5c2a22f87bb5574f344ac73b6b83064e7a14c5921ac9669af5c1866",
    "sql": "SELECT email_address , phone_number FROM customers ORDER BY email_address , phone_number",
    "linq": "context.Customers.OrderBy(row => row.EmailAddress).ThenBy(row => row.PhoneNumber).Select(row => new { row.EmailAddress, row.PhoneNumber }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a0809bff1b042bee4ce2f12df019f7965edba739c19fdc3e852b85f107499d5a",
    "sql": "SELECT town_city FROM customers WHERE customer_type_code = \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1",
    "linq": "context.Customers.Where(row => row.CustomerTypeCode == \"Good Credit Rating\").GroupBy(row => new { row.TownCity }).OrderBy(group => group.Count()).Select(group => new { group.Key.TownCity }).Take(1).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b029135923c17427a3c0809123de79e98aa1a5f70794a61a84adbc7cbe2000c3",
    "sql": "SELECT t1.product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name",
    "linq": "context.Products.Join(context.Complaints, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ProductName }).Select(group => new { group.Key.ProductName, Count = group.Count() }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f07f2e863d978cfdece6865c31e92fe6c6fe0ca2c977005db3a17566bb234958",
    "sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
    "linq": "context.Customers.Join(context.Complaints, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.CustomerId }).OrderBy(group => group.Count()).Select(group => new { group.First().t1.EmailAddress }).Take(1).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6930014d7a8d909bd36b0f4138045a03b9c3ee1f0dcfabc0ad8e1f8b6a03a58f",
    "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
    "linq": "context.Products.Join(context.Complaints, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).SelectMany(s => context.Customers, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.CustomerId }).OrderBy(group => group.Count()).Select(group => new { group.First().t1.ProductName }).Distinct().Take(1).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "40f9d3ff2a5c701c3c3b500a73996a1d9fa769ae2a9b2594640745225ced4e85",
    "sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
    "linq": "context.Customers.Join(context.Complaints, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t2.DateComplaintRaised).Select(row => new { row.t1.PhoneNumber }).Take(1).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9d2782cc8019cf7e683567e33a82b23a8c81539ce74809c1e8f8e40a6bd66700",
    "sql": "SELECT email_address , phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
    "linq": "context.Customers.Where(row => !context.Complaints.Select(row => row.CustomerId).Contains(row.CustomerId)).Select(row => new { row.EmailAddress, row.PhoneNumber }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e86e1cab7a5026c99bd88e1cab1143667a683b11fa5cd008cded785dd52f80a",
    "sql": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff",
    "linq": "context.Customers.Select(row => row.PhoneNumber).Union(context.Staff.Select(row => row.PhoneNumber)).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f11db52438ade28f42c87d0da45117bcb75ce08885ab89d1d3000ddce87fd3e2",
    "sql": "SELECT product_description FROM products WHERE product_name = \"Chocolate\"",
    "linq": "context.Products.Where(row => row.ProductName == \"Chocolate\").Select(row => new { row.ProductDescription }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "759b3ad99c25fe9aa073f6e5383374590af31b94c4fb2fcfbd062b53483d0c7d",
    "sql": "SELECT product_name , product_category_code FROM products ORDER BY product_price DESC LIMIT 1",
    "linq": "context.Products.OrderByDescending(row => (double) row.ProductPrice).Select(row => new { row.ProductName, row.ProductCategoryCode }).Take(1).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c7fe65eb0370de81a3f4006561adfae9d8a715906b0f7b51eca33a5cf54561a3",
    "sql": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
    "linq": "context.Products.Where(row => !context.Complaints.Select(row => row.ProductId).Contains(row.ProductId)).Select(row => new { row.ProductPrice }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d795b584d128a2ed4a70ae876cf108b1c9d04bd8fc527b40092bd012ac55a6ab",
    "sql": "SELECT avg(product_price) , product_category_code FROM products GROUP BY product_category_code",
    "linq": "context.Products.GroupBy(row => new { row.ProductCategoryCode }).Select(group => new { AverageProductPrice = group.Select(row => (double) row.ProductPrice).Average(), group.Key.ProductCategoryCode }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fcc4a79f10f8eaf910f0c6f680630a44e49e2a7dda0d3b146d28565e3db0212e",
    "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id JOIN products AS t3 ON t2.product_id = t3.product_id ORDER BY t3.product_price LIMIT 1",
    "linq": "context.Staff.Join(context.Complaints, t1 => t1.StaffId, t2 => t2.StaffId, (t1, t2) => new { t1, t2 }).Join(context.Products, joined => joined.t2.ProductId, t3 => t3.ProductId, (joined, t3) => new { joined.t1, joined.t2, t3 }).OrderBy(row => (double) row.t3.ProductPrice).Select(row => new { row.t1.LastName }).Take(1).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4ed48e2a206c593bcb2b4d1324368f770a5f3f47d1404ca72661c42fe518f4f1",
    "sql": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*) > 3",
    "linq": "context.Complaints.GroupBy(row => new { row.ComplaintStatusCode }).Where(group => group.Count() > 3).Select(group => new { group.Key.ComplaintStatusCode }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2da71fad021b6800e7f5bc85a9baeb6a83746473bbe3f12cc5e4004bf6417b17",
    "sql": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"",
    "linq": "context.Staff.Where(row => EF.Functions.Like(row.EmailAddress, \"%wrau%\")).Select(row => new { row.LastName }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "66112f05e984921d3e75140cbbb390bd622fdd8643058b8fc66ef66008531b79",
    "sql": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Customers.GroupBy(row => new { row.CustomerTypeCode }).Select(group => new { Count = group.Count() }).OrderByDescending(group => group.Count).Take(1);",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "09af360b99482d825d631a19e0e58054d841551987d124c49270f8b010c80455",
    "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
    "linq": "context.Staff.Join(context.Complaints, t1 => t1.StaffId, t2 => t2.StaffId, (t1, t2) => new { t1, t2 }).OrderBy(row => row.t2.DateComplaintRaised).Select(row => new { row.t1.LastName }).Take(1).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d883bf778f003a4467edd6a892433ce61d639437bfa3436ee8e63d89390cb443",
    "sql": "SELECT count(DISTINCT complaint_type_code) FROM complaints",
    "linq": "context.Complaints.Select(row => row.ComplaintTypeCode).Distinct().Count();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f716dbb93e6f6eeea257403c9716e89e43b06fa8c6427738f900622f59639c2f",
    "sql": "SELECT address_line_1 , address_line_2 FROM customers WHERE email_address = \"vbogisich@example.org\"",
    "linq": "context.Customers.Where(row => row.EmailAddress == \"vbogisich@example.org\").Select(row => new { row.AddressLine1, row.AddressLine2 }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "157f92c31c15f8b3546e9f3c93df278a62a7a2d44ebebb418daf3f25e8938789",
    "sql": "SELECT complaint_status_code , count(*) FROM complaints WHERE complaint_type_code = \"Product Failure\" GROUP BY complaint_status_code",
    "linq": "context.Complaints.Where(row => row.ComplaintTypeCode == \"Product Failure\").GroupBy(row => new { row.ComplaintStatusCode }).Select(group => new { group.Key.ComplaintStatusCode, Count = group.Count() }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7b79d9b831bcf539a40eea0bfeeb7a5948eeb072dbc0eff6f98f676a7d5c4f40",
    "sql": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5",
    "linq": "context.Staff.Join(context.Complaints, t1 => t1.StaffId, t2 => t2.StaffId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.StaffId }).OrderBy(group => group.Count()).Select(group => new { group.First().t1.FirstName }).Take(5).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dcc584f2fd03d3df640aa2fe79ac353d3aa667292f56305cf54f8e8cec326654",
    "sql": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
    "linq": "context.Customers.GroupBy(row => new { row.State }).OrderBy(group => group.Count()).Select(group => new { group.Key.State }).Take(1).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5a22ad440b866102c074074aa90985f1cfa9f051fe4e9a30416ad0a3c2701469",
    "sql": "SELECT dname FROM department ORDER BY mgr_start_date",
    "linq": "context.Departments.OrderBy(row => row.MgrStartDate).Select(row => new { row.Dname }).ToList();",
    "db_name": "company_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d7ef5e2bbeb6b39acc42f0a8079cd4dde2522562a522341492f742b6936192b1",
    "sql": "SELECT Dependent_name FROM dependent WHERE relationship = 'Spouse'",
    "linq": "context.Dependents.Where(row => row.Relationship == \"Spouse\").Select(row => new { row.DependentName }).ToList();",
    "db_name": "company_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "33282c71d42bd3ffac398d345af64cf375999e6c9812acdf524fd02e9ee59ce7",
    "sql": "SELECT count(*) FROM dependent WHERE sex = 'F'",
    "linq": "context.Dependents.Where(row => row.Sex == \"F\").Count();",
    "db_name": "company_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9dc0a0874f48d4f60ef7ef6777fdb18c7f854a9279a9148db02751bc348e8a8d",
    "sql": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber WHERE t2.dlocation = 'Houston'",
    "linq": "context.Departments.Join(context.DeptLocations, t1 => t1.Dnumber, t2 => t2.Dnumber, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Dlocation == \"Houston\").Select(row => new { row.t1.Dname }).ToList();",
    "db_name": "company_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2f8a7a9f55150a0b9e285b5c130b1ed0f181e8bdd7111ead96f42cc62d93052a",
    "sql": "SELECT fname , lname FROM employee WHERE salary > 30000",
    "linq": "context.Employees.Where(row => row.Salary > 30000).Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "company_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d4d08ddb1a23c3b315413d8a660c6f9aad6c4c0b33cb4c8082646486810cea27",
    "sql": "SELECT count(*) , sex FROM employee WHERE salary < 50000 GROUP BY sex",
    "linq": "context.Employees.Where(row => row.Salary < 50000).GroupBy(row => new { row.Sex }).Select(group => new { Count = group.Count(), group.Key.Sex }).ToList();",
    "db_name": "company_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d735e460fec90bf9870cbf4ce01ea57842bfb61b75715e6c338d8d7e81e52015",
    "sql": "SELECT fname , lname , address FROM employee ORDER BY Bdate",
    "linq": "context.Employees.OrderBy(row => row.Bdate).Select(row => new { row.Fname, row.Lname, row.Address }).ToList();",
    "db_name": "company_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8e9e9359dba9b8571e395a175d82f28d1f7343dd83a10b450ad5ef2d365899a5",
    "sql": "SELECT count(*) FROM Accounts",
    "linq": "context.Accounts.Count();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d68419bc1ee2a0c9f7d7e7fd1516e5ce4a3fd6ad598cfc11ccea711bb2e7007c",
    "sql": "SELECT account_id , account_details FROM Accounts",
    "linq": "context.Accounts.Select(row => new { row.AccountId, row.AccountDetails }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4c63cffafda66c5aae6cceb8e3627c970d1b27ad465f671f4da5801ea35562fb",
    "sql": "SELECT count(*) FROM Statements",
    "linq": "context.Statements.Count();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "98ecd1c627567feccf2e7d5f8aaa2042219f3970897c765dbf20d5bfb61f18b6",
    "sql": "SELECT STATEMENT_ID , statement_details FROM Statements",
    "linq": "context.Statements.Select(row => new { row.StatementId, row.StatementDetails }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "944469369df3f6bb7f97e10a223bd3072b78c8353ae88666e5d7aa86b325c0a4",
    "sql": "SELECT T1.statement_id , T2.statement_details , T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id",
    "linq": "context.Accounts.Join(context.Statements, T1 => T1.StatementId, T2 => T2.StatementId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.StatementId, row.T2.StatementDetails, row.T1.AccountDetails }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7f88de67f4253648a921d966181e5068b0ee3162d76158e3857a2d321b489a31",
    "sql": "SELECT STATEMENT_ID , count(*) FROM Accounts GROUP BY STATEMENT_ID",
    "linq": "context.Accounts.GroupBy(row => new { row.StatementId }).Select(group => new { group.Key.StatementId, Count = group.Count() }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e0f005cf84a312432c82f3f1dda8a37d1c7d2ed77a0d867c7ea43096f2a928ed",
    "sql": "SELECT T1.statement_id , T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Accounts.Join(context.Statements, T1 => T1.StatementId, T2 => T2.StatementId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StatementId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StatementId, group.First().T2.StatementDetails }).Take(1).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c3b990c19dfcb5b238b5950f3ce9e0e884a0ba60fd298762821eaff09c8d7605",
    "sql": "SELECT count(*) FROM Documents",
    "linq": "context.Documents.Count();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5a9ec3089aa7bc81889b4077d3c96d5f1ee2c4e540d17694328fabf06d15b653",
    "sql": "SELECT document_type_code , document_name , document_description FROM Documents WHERE document_name = 'Noel CV' OR document_name = 'King Book'",
    "linq": "context.Documents.Where(row => row.DocumentName == \"Noel CV\" || row.DocumentName == \"King Book\").Select(row => new { row.DocumentTypeCode, row.DocumentName, row.DocumentDescription }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c609fe266f67a320f9f39ca68c5f9932a3e182f9c5d2a7492f15b7c6dc811e3c",
    "sql": "SELECT document_id , document_name FROM Documents",
    "linq": "context.Documents.Select(row => new { row.DocumentId, row.DocumentName }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0ff45f5c7c797ad4cc46227b2b3ce8337c033544c4a91ed13a40967bddc5e3bd",
    "sql": "SELECT document_name , document_id FROM Documents WHERE document_type_code = \"BK\"",
    "linq": "context.Documents.Where(row => row.DocumentTypeCode == \"BK\").Select(row => new { row.DocumentName, row.DocumentId }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2a9f8c23b1f95596087b5f9ad9c9dd3eef31bdf8bb75a94ebbfd6bdc2b80f14b",
    "sql": "SELECT count(*) , project_id FROM Documents WHERE document_type_code = \"BK\" GROUP BY project_id",
    "linq": "context.Documents.Where(row => row.DocumentTypeCode == \"BK\").GroupBy(row => new { row.ProjectId }).Select(group => new { Count = group.Count(), group.Key.ProjectId }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2f70694248b4fca58b721052488410deb4081c43b706e7edd6f7531b184f0671",
    "sql": "SELECT document_name , document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'",
    "linq": "context.Documents.Join(context.Projects, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ProjectDetails == \"Graph Database project\").Select(row => new { row.T1.DocumentName, row.T1.DocumentDate }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0cfbe43c91ca6dac3fc86a59ad3ab7386a0e41e1a54dbaeab66b010c5bba2e6c",
    "sql": "SELECT project_id , count(*) FROM Documents GROUP BY project_id",
    "linq": "context.Documents.GroupBy(row => new { row.ProjectId }).Select(group => new { group.Key.ProjectId, Count = group.Count() }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8beec5c77a8200ba9cb608591dd93584689c9b575c11a8ef1b0b674eb611b102",
    "sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.Documents.GroupBy(row => new { row.ProjectId }).OrderBy(group => group.Count()).Select(group => new { group.Key.ProjectId }).Take(1).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d7f41bb6903fe3b98d97c52beacc66799575e79f6855432aa45308b9efcf1c29",
    "sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*) >= 2",
    "linq": "context.Documents.GroupBy(row => new { row.ProjectId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProjectId }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3d0dbfdd1f4df44f8334d1b861535b3a5239b2b6fa54d104594327a8e571868b",
    "sql": "SELECT document_type_code , count(*) FROM Documents GROUP BY document_type_code",
    "linq": "context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Select(group => new { group.Key.DocumentTypeCode, Count = group.Count() }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c8a24b4c16a9ee056086c34651d8cb4c699f6cd769ddc702403bb3b243fe50ef",
    "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Documents.GroupBy(row => new { row.DocumentTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DocumentTypeCode }).Take(1).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "109f37e87510dc1244c3217d0a509c6db84da2c88c2d1f456ab66552200b9b8b",
    "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*) < 3",
    "linq": "context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Where(group => group.Count() < 3).Select(group => new { group.Key.DocumentTypeCode }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "52413d4a636c60ec55e166a91220bbd7e7d3709d9203c4290db4b72ae520ad8d",
    "sql": "SELECT T1.statement_details , T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id = T2.document_id WHERE T1.statement_details = 'Private Project'",
    "linq": "context.Statements.Join(context.Documents, T1 => T1.StatementId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StatementDetails == \"Private Project\").Select(row => new { row.T1.StatementDetails, row.T2.DocumentName }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "398f4e7b5cca919e87e6321a63cd3344172cecf262517be3fd298e708954ba5a",
    "sql": "SELECT document_type_code , document_type_name , document_type_description FROM Ref_document_types",
    "linq": "context.RefDocumentTypes.Select(row => new { row.DocumentTypeCode, row.DocumentTypeName, row.DocumentTypeDescription }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "95e2d66893d459abd89d389693266699d7f3649f8498515e98ca82928e930976",
    "sql": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name = \"Film\"",
    "linq": "context.RefDocumentTypes.Where(row => row.DocumentTypeName == \"Film\").Select(row => new { row.DocumentTypeDescription }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0efce54a240253ce75d419d75ce5734a9dbaa38eef0ead1692c3f84f34570649",
    "sql": "SELECT T1.document_type_name , T1.document_type_description , T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code",
    "linq": "context.RefDocumentTypes.Join(context.Documents, T1 => T1.DocumentTypeCode, T2 => T2.DocumentTypeCode, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.DocumentTypeName, row.T1.DocumentTypeDescription, row.T2.DocumentDate }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "74521741a0e960a5945d696a3ddd56b53ac42e2d2c31b6b0c650ecadcda13709",
    "sql": "SELECT count(*) FROM Projects",
    "linq": "context.Projects.Count();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2485811dc5d079cf4c8453c4423dc3001aa0da0145bd1dea6a1bc91b1791a649",
    "sql": "SELECT project_id , project_details FROM Projects",
    "linq": "context.Projects.Select(row => new { row.ProjectId, row.ProjectDetails }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5ddc787d0d83fd823b72f818b01dac67303fefa6e07f03d5c7110c6fcf07a79f",
    "sql": "SELECT T1.project_id , T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING count(*) > 2",
    "linq": "context.Projects.Join(context.Documents, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProjectId }).Where(group => group.Count() > 2).Select(group => new { group.Key.ProjectId, group.First().T1.ProjectDetails }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b89462b27d386b940e62ab66939a8dd91f456e094a06e1e68b84885d0fc19505",
    "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id WHERE T2.document_name = \"King Book\"",
    "linq": "context.Projects.Join(context.Documents, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == \"King Book\").Select(row => new { row.T1.ProjectDetails }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "785c12cc911a7a3b809543efe14eb38d6c5a633c865bc0bd7b0790a76a094c75",
    "sql": "SELECT count(*) FROM Ref_budget_codes",
    "linq": "context.RefBudgetCodes.Count();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f7505606c3d1e8aa9e97c2160af3e6b73ded910cfdf21ab2ca7cf9f309ec44a2",
    "sql": "SELECT budget_type_code , budget_type_description FROM Ref_budget_codes",
    "linq": "context.RefBudgetCodes.Select(row => new { row.BudgetTypeCode, row.BudgetTypeDescription }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e22bd5169d7692212c41607436ed98c0313f939e0b2190d7bb2d888fa121431",
    "sql": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code = \"ORG\"",
    "linq": "context.RefBudgetCodes.Where(row => row.BudgetTypeCode == \"ORG\").Select(row => new { row.BudgetTypeDescription }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "70daf55e58cb4bc23890153ca7130e0dc4c3df05bd03f4170ccc593825e0f839",
    "sql": "SELECT count(*) FROM Documents_with_expenses",
    "linq": "context.DocumentsWithExpenses.Count();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "727bf138a6fa73010c586916e6fd692bc8d17f5a5c895a1257ceca33f3f236aa",
    "sql": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code = 'SF'",
    "linq": "context.DocumentsWithExpenses.Where(row => row.BudgetTypeCode == \"SF\").Select(row => new { row.DocumentId }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9d228daf52ebe6d9f91ac65866c65498548938b3e6a02cd4505834c99acbddd4",
    "sql": "SELECT T2.budget_type_code , T2.budget_type_description , T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code",
    "linq": "context.DocumentsWithExpenses.Join(context.RefBudgetCodes, T1 => T1.BudgetTypeCode, T2 => T2.BudgetTypeCode, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.BudgetTypeCode, row.T2.BudgetTypeDescription, row.T1.DocumentId }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6095066bc45b844e653ca8c40ccdf83acc851504111fdd3e19e40db62237158a",
    "sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE T2.budget_type_Description = \"Government\"",
    "linq": "context.DocumentsWithExpenses.Join(context.RefBudgetCodes, T1 => T1.BudgetTypeCode, T2 => T2.BudgetTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeDescription == \"Government\").Select(row => new { row.T1.DocumentId }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "994957f31b5d28204a006175800a184b13414cd0b1987ef766a901b153193112",
    "sql": "SELECT budget_type_code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
    "linq": "context.DocumentsWithExpenses.GroupBy(row => new { row.BudgetTypeCode }).Select(group => new { group.Key.BudgetTypeCode, Count = group.Count() }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9d05cef3ca6aa11b400baada6d7d3bbf560131aceb357aa6934b3af044de4511",
    "sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.DocumentsWithExpenses.GroupBy(row => new { row.BudgetTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BudgetTypeCode }).Take(1).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "56f227e3977131c96827fc15370a3b70bffbb45d21ffa2203b84e23f4f71dc06",
    "sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses",
    "linq": "context.Documents.Select(row => row.DocumentId).Except(context.DocumentsWithExpenses.Select(row => row.DocumentId)).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b1832c21d7f1cf8fc8628e431e859e5583282340343d0c84d7a8dad3b982d30d",
    "sql": "SELECT document_id FROM Documents WHERE document_type_code = \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
    "linq": "context.Documents.Where(row => row.DocumentTypeCode == \"CV\").Select(row => row.DocumentId).Except(context.DocumentsWithExpenses.Select(row => row.DocumentId)).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "57ab14bbe956033102f7b9aa0267291956dd48de389fc688472ab3d845bfa035",
    "sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name LIKE '%s%'",
    "linq": "context.Documents.Join(context.DocumentsWithExpenses, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.DocumentName, \"%s%\")).Select(row => new { row.T1.DocumentId }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "edfdeb2a78c54b83bc91774f76a50a4abccf18f8358a02e06e7949435cd161b3",
    "sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
    "linq": "context.Documents.Where(row => !context.DocumentsWithExpenses.Select(row => row.DocumentId).Contains(row.DocumentId)).Count();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8954cf3f7c9eb4cd6a023d3dc8b6a8d5be434e2064160ce4df7c4cae33dfe0ed",
    "sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'SF'",
    "linq": "context.Documents.Join(context.DocumentsWithExpenses, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeCode == \"GV\").Select(row => row.T1.DocumentDate).Intersect(context.Documents.Join(context.DocumentsWithExpenses, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeCode == \"SF\").Select(row => row.T1.DocumentDate)).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7f3a9272453c28e31c81896fb6651a58762648089bf81faaa2196f2e04f3a0c1",
    "sql": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
    "linq": "new List<string> { context.Accounts.Select(row => row.AccountDetails.ToString()).Max() }.Union(context.Accounts.Where(row => EF.Functions.Like(row.AccountDetails.ToString(), \"%5%\")).Where(row => row.AccountDetails.HasValue).Select(row => AccountDetails = row.AccountDetails.Value)).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,250): error CS0103: The name 'AccountDetails' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    148 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.57",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a9691f2948b0d6aa4c3e721758144102a143853c1b3bf969e35aaa6f7f348b40",
    "sql": "SELECT customer_details FROM customers ORDER BY customer_details",
    "linq": "context.Customers.OrderBy(row => row.CustomerDetails).Select(row => new { row.CustomerDetails }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d1d14a4c31e40dfabad3f7c47f70dbd8f7f83717371a225c9ef37c52772cfa0d",
    "sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = \"Dayana Robel\"",
    "linq": "context.Policies.Join(context.Customers, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CustomerDetails == \"Dayana Robel\").Select(row => new { row.t1.PolicyTypeCode }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f7284304a3cfc992492e533ebac55274812c86fc25fd443a058134086d33d748",
    "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Policies.GroupBy(row => new { row.PolicyTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PolicyTypeCode }).Take(1).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7b813f3e1ea853bac22c1fe2564bcb7cdcaf3a8563f8215f2a390121d8286951",
    "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*) > 2",
    "linq": "context.Policies.GroupBy(row => new { row.PolicyTypeCode }).Where(group => group.Count() > 2).Select(group => new { group.Key.PolicyTypeCode }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "19159bd8eeaeedbeec7e5af85c33328bae5328108213ea5885cac2ac2596531f",
    "sql": "SELECT sum(amount_piad) , avg(amount_piad) FROM claim_headers",
    "linq": "context.ClaimHeaders.GroupBy(row => 1).Select(group => new { SumAmountPiad = group.Select(row => row.AmountPiad).Sum(), AverageAmountPiad = group.Select(row => row.AmountPiad).Average() }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 7314,68, 1: 487,6453333333333}]\", linq_results: \"[{0: 7314, 1: 487,6453333333333}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a9e527e1dc11be130ecf0b5664141a51d0bfd195163ead6d130a5eeff52a638d",
    "sql": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
    "linq": "context.ClaimHeaders.Join(context.ClaimsDocuments, t1 => t1.ClaimHeaderId, t2 => t2.ClaimId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CreatedDate == context.ClaimsDocuments.OrderBy(row => row.CreatedDate).Select(row => row.CreatedDate).Take(1).First()).Select(row => (double) row.t1.AmountClaimed).Sum();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2edd3c4b465d1691077563805e5b0eb0443bc602bc62f424f1ad4ab34b9a7e6a",
    "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_claimed = (SELECT max(amount_claimed) FROM claim_headers)",
    "linq": "context.ClaimHeaders.Join(context.Policies, t1 => t1.PolicyId, t2 => t2.PolicyId, (t1, t2) => new { t1, t2 }).Join(context.Customers, joined => joined.t2.CustomerId, t3 => t3.CustomerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.AmountClaimed == context.ClaimHeaders.Select(row => (double) row.AmountClaimed).Max()).Select(row => new { row.t3.CustomerDetails }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,262): error CS0019: Operator '==' cannot be applied to operands of type 'decimal?' and 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.40",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5766b94aa0701c09d9ef501474b8ebf27a8480523a1b0ff2392054dec79827f2",
    "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = (SELECT min(amount_piad) FROM claim_headers)",
    "linq": "context.ClaimHeaders.Join(context.Policies, t1 => t1.PolicyId, t2 => t2.PolicyId, (t1, t2) => new { t1, t2 }).Join(context.Customers, joined => joined.t2.CustomerId, t3 => t3.CustomerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.AmountPiad == context.ClaimHeaders.Select(row => row.AmountPiad).Min()).Select(row => new { row.t3.CustomerDetails }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "edabe840a27c8f7cdc4f0112cca8b53f8d04c30034c24202d58cad71044fd890",
    "sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
    "linq": "context.Customers.Select(row => row.CustomerDetails).Except(context.Policies.Join(context.Customers, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Select(row => row.t2.CustomerDetails)).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c3a494a437e4351db155fa43f8af9bd61e8171b6735daaa68ff4fec4105c4442",
    "sql": "SELECT count(*) FROM claims_processing_stages",
    "linq": "context.ClaimsProcessingStages.Count();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b0c3df02f06c3de720ed24af15a75cdacb442f9073e91f53cb36a63579310d3f",
    "sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.ClaimsProcessings.Join(context.ClaimsProcessingStages, t1 => t1.ClaimStageId, t2 => t2.ClaimStageId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ClaimStageId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t2.ClaimStatusName }).Take(1).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "206375f0fe21e9e757d92ea18219f2840556e8b5bde155d53dce21062aa8490f",
    "sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
    "linq": "context.Customers.Where(row => EF.Functions.Like(row.CustomerDetails, \"%Diana%\")).Select(row => new { row.CustomerDetails }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d800abd6b086c5d5c3425d08e68f49d450cbfdbaca6b566fdc0cfdffc68f7475",
    "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\"",
    "linq": "context.Policies.Join(context.Customers, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.PolicyTypeCode == \"Deputy\").Select(row => new { row.t2.CustomerDetails }).Distinct().ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9c4eb5aba8abe47f85238144a54cb2c3fdd91ee667a1434ae63e792dc4480e47",
    "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\" OR t1.policy_type_code = \"Uniform\"",
    "linq": "context.Policies.Join(context.Customers, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.PolicyTypeCode == \"Deputy\" || row.t1.PolicyTypeCode == \"Uniform\").Select(row => new { row.t2.CustomerDetails }).Distinct().ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "919817343581159eae675873e8da055ffb9a5e0f17777e922ffa80ef8a48b310",
    "sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff",
    "linq": "context.Customers.Select(row => row.CustomerDetails).Union(context.Staff.Select(row => row.StaffDetails)).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "75cfe22931a2c39b3e4ed4ebfea80fabd500728e0998937e9c27e0c23b4059e1",
    "sql": "SELECT policy_type_code , count(*) FROM policies GROUP BY policy_type_code",
    "linq": "context.Policies.GroupBy(row => new { row.PolicyTypeCode }).Select(group => new { group.Key.PolicyTypeCode, Count = group.Count() }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c04b4ef10ff0fe006db834dcd837cf8627fd678e8a222f65e5994ace2b6f6faf",
    "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Policies.Join(context.Customers, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.CustomerDetails }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CustomerDetails }).Take(1).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eb1ac6815a7b97e736e693b08f869df0222dc8d43f85cba446780118dd5cf549",
    "sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name = \"Open\"",
    "linq": "context.ClaimsProcessingStages.Where(row => row.ClaimStatusName == \"Open\").Select(row => new { row.ClaimStatusDescription }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6b16c8d4153b55e01eaeca478f20b6dea1e792a79dc8733983f753ffbe480d90",
    "sql": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
    "linq": "context.ClaimsProcessings.Select(row => row.ClaimOutcomeCode).Distinct().Count();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a604cf53141bd5d4f9f2bbbe78590a3d0020b1680d60e88c72001665c79c9b0a",
    "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.start_date = (SELECT max(start_date) FROM policies)",
    "linq": "context.Policies.Join(context.Customers, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.StartDate == context.Policies.Select(row => row.StartDate).Max()).Select(row => new { row.t2.CustomerDetails }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f33f56e6458ec945d2ff9c8f2fcf6de52838838ed39b921584a530bb2a79214d",
    "sql": "SELECT count(*) FROM county_public_safety",
    "linq": "context.CountyPublicSafeties.Count();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b575c88dd8a43f30695bd139601237b93e5252664f2fb92782eaa4b242c91b8a",
    "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
    "linq": "context.CountyPublicSafeties.OrderByDescending(row => row.Population).Select(row => new { row.Name }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b24d172308fe302dd084cd86e9513f91617133c85e5a2299ddefc857e8132be3",
    "sql": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"",
    "linq": "context.CountyPublicSafeties.Where(row => row.Location != \"East\").Select(row => new { row.PoliceForce }).Distinct().ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "42c6b6784a2761cf5c5e006c60e6f1d8eec86017b23c0832f1c1ff909056ec1b",
    "sql": "SELECT min(Crime_rate) , max(Crime_rate) FROM county_public_safety",
    "linq": "context.CountyPublicSafeties.GroupBy(row => 1).Select(group => new { MinCrimeRate = group.Select(row => row.CrimeRate).Min(), MaxCrimeRate = group.Select(row => row.CrimeRate).Max() }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8a44d58d45be67fcd8ba0ed9939a7505b447323f86195d140e46b28f29a5d422",
    "sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC",
    "linq": "context.CountyPublicSafeties.OrderBy(row => row.PoliceOfficers).Select(row => new { row.CrimeRate }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ba949f6f324569d905f8a509bd6539a7e29733f6be0dba719788cc9dc9aaa57b",
    "sql": "SELECT Name FROM city ORDER BY Name ASC",
    "linq": "context.Cities.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "26807239a364234fa932fff04b955a17b616ba2e4f79d465951759d15cf81920",
    "sql": "SELECT Hispanic FROM city WHERE Black > 10",
    "linq": "context.Cities.Where(row => row.Black > 10).Select(row => new { row.Hispanic }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "80ab9b08af03ea37a62cdfbc9d12a67ccd55bd3207f28eb4280ba69295820574",
    "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
    "linq": "context.CountyPublicSafeties.OrderByDescending(row => row.Population).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b687daf393fa2d1cecd6cc892d00231b2b292592de5982dbcab506846d7976bb",
    "sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5",
    "linq": "context.Cities.OrderByDescending(row => row.White).Select(row => new { row.Name }).Take(5).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "69a8a3f7fabc1066e85f81677ef9bcfc9baedfb9410f6a57a4ff195378fb54ce",
    "sql": "SELECT T1.Name , T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
    "linq": "context.Cities.Join(context.CountyPublicSafeties, T1 => T1.CountyId, T2 => T2.CountyId, (T1, T2) => new { T1, T2 }).Select(row => new { T1Name = row.T1.Name, T2Name = row.T2.Name }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b9486ad45e11de5e13d911edb7ff0ff56c39ad9217d0501e4be0a1acc9d2fbbe",
    "sql": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
    "linq": "context.Cities.Join(context.CountyPublicSafeties, T1 => T1.CountyId, T2 => T2.CountyId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.White, row.T2.CrimeRate }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d312f5b8f3641de2f8780b2c334cd58c543a5f546d0fa46d355b080182c01b3b",
    "sql": "SELECT name FROM city WHERE county_ID = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
    "linq": "context.Cities.Where(row => row.CountyId == context.CountyPublicSafeties.OrderByDescending(row => row.PoliceOfficers).Select(row => row.CountyId).Take(1).First()).Select(row => new { row.Name }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3d30a5966d5ff6561f731ce72da58e89e9dc14f38e37deea8eaec21e1844994c",
    "sql": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)",
    "linq": "context.Cities.Where(row => row.CountyId.HasValue && context.CountyPublicSafeties.Where(row => row.Population > 20000).Select(row => row.CountyId).Contains(row.CountyId.Value)).Count();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aa46e3b2b04b098daee2ccf727e4e5b28d092c00e7d1e290986334b21f2999c7",
    "sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90",
    "linq": "context.Cities.Join(context.CountyPublicSafeties, T1 => T1.CountyId, T2 => T2.CountyId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.White > 90).Select(row => new { row.T2.CrimeRate }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5c9376c92784e8516f8e4d186dc609f2cc4f4659a53fe1c34be2a0a96bbba046",
    "sql": "SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "linq": "context.CountyPublicSafeties.GroupBy(row => new { row.PoliceForce }).Select(group => new { group.Key.PoliceForce, Count = group.Count() }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dd330830232c58d0cfb156b21542044ff05b8c080b3f4ad8c598735249e62abb",
    "sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.CountyPublicSafeties.GroupBy(row => new { row.Location }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Location }).Take(1).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "543dfea57acb2bfbc8d84a9ab355ebc671f3f2f52159978a528eaf42a3db69ec",
    "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)",
    "linq": "context.CountyPublicSafeties.Where(row => !context.Cities.Select(row => row.CountyId).Contains(row.CountyId)).Select(row => new { row.Name }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c0b443b9d81bfb42e00062c8b4d8b563592dcce98e34df65e361fb3f040ae6d8",
    "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION = \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION = \"West\"",
    "linq": "context.CountyPublicSafeties.Where(row => row.Location == \"East\").Select(row => row.PoliceForce).Intersect(context.CountyPublicSafeties.Where(row => row.Location == \"West\").Select(row => row.PoliceForce)).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fb7b4f06d027481929ec4870d428d153fc2632eff1cb8be7ed17d9808b9c245c",
    "sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)",
    "linq": "context.Cities.Where(row => row.CountyId.HasValue && context.CountyPublicSafeties.Where(row => row.CrimeRate < 100).Select(row => row.CountyId).Contains(row.CountyId.Value)).Select(row => new { row.Name }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "69225c48a631ac5c100127f740f3bf10636c5e4cb1fdd904921ef91aa3a37665",
    "sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
    "linq": "context.CountyPublicSafeties.OrderByDescending(row => row.Population).Select(row => new { row.CaseBurden }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b0f9a1adab681dc4bf473062936191346688a3dc114ba20df9d46606685b6a09",
    "sql": "SELECT T1.name_full , T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;",
    "linq": "context.Colleges.Join(context.PlayerColleges, T1 => T1.CollegeId, T2 => T2.CollegeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CollegeId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.NameFull, group.Key.CollegeId }).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "110f287a4c4c7c7ec0b8f1e127c09d7acb343b05c68caaa1fd3cb681be317fb0",
    "sql": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'",
    "linq": "context.Salaries.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\").Select(row => row.T1.Salary1).Average();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "36072e8431413fe5accc9be1ba93e5e6d1c1775848df79c14047b680a4c8a8d4",
    "sql": "SELECT name_first , name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE YEAR = 1998",
    "linq": "context.Players.Join(context.AllStars, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 1998).Select(row => new { row.T1.NameFirst, row.T1.NameLast }).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b75a2abd92bcb083362e3ec86e9216073f8fc15388ea809754b2f4e43dad230f",
    "sql": "SELECT T1.name_first , T1.name_last , T1.player_id , count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;",
    "linq": "context.Players.Join(context.AllStars, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PlayerId }).Select(group => new { group.First().T1.NameFirst, group.First().T1.NameLast, group.Key.PlayerId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "829b8b1eb60849799360bd5f2878d4fa643e6cbdc3da441e8f7772c3912a095a",
    "sql": "SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid;",
    "linq": "context.HallOfFames.GroupBy(row => new { row.Yearid }).Select(group => new { group.Key.Yearid, Count = group.Count() }).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "93760c96d8e83e5663c9845a1bf31f837b6b20423b9d90a855a3bad00219cc27",
    "sql": "SELECT YEAR , avg(attendance) FROM home_game GROUP BY YEAR;",
    "linq": "context.HomeGames.GroupBy(row => new { row.Year }).Select(group => new { group.Key.Year, AverageAttendance = group.Select(row => row.Attendance).Average() }).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fe4925ae869712ad45c07e32203f6c1447b1296f0843d00f1c5762b9e3aba6e0",
    "sql": "SELECT T2.team_id , T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T1.year = 2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;",
    "linq": "context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2014).GroupBy(row => new { row.T1.TeamId }).OrderByDescending(group => group.Average(row => row.T1.Attendance)).Select(group => new { group.Key.TeamId, group.First().T2.Rank }).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d05faf2b2209a13dd1f5bacc312185912224b8a3a7fc418ca76a1eb1e5cc75b4",
    "sql": "SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;",
    "linq": "context.Players.Join(context.ManagerAwards, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.PlayerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.NameFirst, group.First().T1.NameLast, group.Key.PlayerId }).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e9173f280b542e99b72915af48f1c78fde89381ae882e9c0b4da2a9b23ad8c12",
    "sql": "SELECT count(*) FROM park WHERE state = 'NY';",
    "linq": "context.Parks.Where(row => row.State == \"NY\").Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4aedaea50bdeb6c217a279259e0d9e294f5f9d817d1d96b3a1dd789c667a4422",
    "sql": "SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;",
    "linq": "context.Players.Join(context.PlayerAwards, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PlayerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.NameFirst, group.First().T1.NameLast, group.Key.PlayerId }).Take(3).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3ecd07706f5a8efa3610c83bc0173ad5ce7d2e1a867536ce3285f5ea62a9b8f3",
    "sql": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;",
    "linq": "context.Players.GroupBy(row => new { row.BirthCountry }).OrderBy(group => group.Count()).Select(group => new { group.Key.BirthCountry }).Take(3).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c0d315a10305f222a02263689af1f098b789993f79b52204b6323c7e797facb0",
    "sql": "SELECT name_first , name_last FROM player WHERE death_year = '';",
    "linq": "context.Players.Where(row => row.DeathYear == \"\").Select(row => new { row.NameFirst, row.NameLast }).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9c0f83e58278fab6f9add40b2723903b8ab3e118bbee32c491ba1a3bb8a0417c",
    "sql": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats = 'R';",
    "linq": "context.Players.Where(row => row.BirthCountry == \"USA\" && row.Bats == \"R\").Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6ea61f0995ec841524566d8f060fd9ab07bb4979a5c8c84eea674a72fedd257f",
    "sql": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T3.college_id = T2.college_id WHERE T3.name_full = 'Yale University';",
    "linq": "context.Players.Join(context.PlayerColleges, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Join(context.Colleges, joined => joined.T2.CollegeId, T3 => T3.CollegeId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.NameFull == \"Yale University\").Select(row => row.T1.Height).ToList().Select(value => double.Parse(value)).Average();",
    "db_name": "baseball_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7896659e95821fd06b8df58f715176313a9586cd5f3bbf0f1962d3fb9fc45d8c",
    "sql": "SELECT T1.name , T1.team_id , max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id;",
    "linq": "context.Teams.Join(context.Salaries, T1 => T1.TeamId, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TeamId }).Select(group => new { group.OrderByDescending(row => row.T2.Salary1).First().T1.Name, group.Key.TeamId, MaxSalary1 = group.Select(row => row.T2.Salary1).Max() }).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "02e5cb84fc15a516e5f017ba1ce667bcd23e820cf95703761c90d10a761f66a4",
    "sql": "SELECT T1.name , T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;",
    "linq": "context.Teams.Join(context.Salaries, T1 => T1.TeamId, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TeamId }).OrderBy(group => group.Average(row => row.T2.Salary1)).Select(group => new { group.First().T1.Name, group.Key.TeamId }).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "79ea233c603308ad16689d3221a49544378fedb8003b28b766dc161262798767",
    "sql": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1961",
    "linq": "context.Players.SelectMany(s => context.PlayerAwards, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 1960).Select(row => new { row.T1.NameFirst, row.T1.NameLast }).Intersect(context.Players.SelectMany(s => context.PlayerAwards, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 1961).Select(row => new { row.T1.NameFirst, row.T1.NameLast })).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8c2895dd86f520f2784230b025bc5075c03a6af154f61b539b228e34cb6504a0",
    "sql": "SELECT name_first , name_last FROM player WHERE weight > 220 OR height < 75",
    "linq": "context.Players.Where(row => row.Weight > \"220\" || row.Height < \"75\").Select(row => new { row.NameFirst, row.NameLast }).ToList();",
    "db_name": "baseball_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,63): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.55",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "004713434f7a40d1deb9bcbe4672913094c9c98c298532fe7292b6ccec2619d9",
    "sql": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings';",
    "linq": "context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\").Select(row => row.T1.Wins).Max();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "026767cdd1e674218a873b7305ea6a4ff05fbde4b0aae1649ac12d00f146a174",
    "sql": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2009;",
    "linq": "context.Postseasons.Join(context.Teams, T1 => T1.TeamIdLoser, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\" && row.T1.Year == 2009).Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "17c624dd40ff8d53e8d426a74905a99e2f8131e15680268c5033bb8a43aa0de2",
    "sql": "SELECT T2.name , T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",
    "linq": "context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2008).GroupBy(row => new { row.T1.TeamIdWinner }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name, group.Key.TeamIdWinner }).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3f401af4b197326563f51139f1fb24b2323326383a621985564e9bd983408f3a",
    "sql": "SELECT count(*) , T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year",
    "linq": "context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\").GroupBy(row => new { row.T1.Year }).Select(group => new { Count = group.Count(), group.Key.Year }).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "df6a77d28cdb0df8cd62e1be6c42142417e5a10ac74b910bdc1b644af82f12d7",
    "sql": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' );",
    "linq": "context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\").Select(row => new { T1Year = rowT1..Year, rowT1..Round, rowT1..TeamIdWinner, rowT1..LeagueIdWinner, rowT1..TeamIdLoser, rowT1..LeagueIdLoser, rowT1..Wins, rowT1..Losses, rowT1..Ties, T2Year = rowT2..Year, rowT2..LeagueId, rowT2..TeamId, rowT2..FranchiseId, rowT2..DivId, rowT2..Rank, rowT2..G, rowT2..Ghome, rowT2..W, rowT2..L, rowT2..DivWin, rowT2..WcWin, rowT2..LgWin, rowT2..WsWin, rowT2..R, rowT2..Ab, rowT2..H, rowT2..Double, rowT2..Triple, rowT2..Hr, rowT2..Bb, rowT2..So, rowT2..Sb, rowT2..Cs, rowT2..Hbp, rowT2..Sf, rowT2..Ra, rowT2..Er, rowT2..Era, rowT2..Cg, rowT2..Sho, rowT2..Sv, rowT2..Ipouts, rowT2..Ha, rowT2..Hra, rowT2..Bba, rowT2..Soa, rowT2..E, rowT2..Dp, rowT2..Fp, rowT2..Name, rowT2..Park, rowT2..Attendance, rowT2..Bpf, rowT2..Ppf, rowT2..TeamIdBr, rowT2..TeamIdLahman45, rowT2..TeamIdRetro }).Union(context.Postseasons.Join(context.Teams, T1 => T1.TeamIdLoser, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\").Select(row => new { T1Year = rowT1..Year, rowT1..Round, rowT1..TeamIdWinner, rowT1..LeagueIdWinner, rowT1..TeamIdLoser, rowT1..LeagueIdLoser, rowT1..Wins, rowT1..Losses, rowT1..Ties, T2Year = rowT2..Year, rowT2..LeagueId, rowT2..TeamId, rowT2..FranchiseId, rowT2..DivId, rowT2..Rank, rowT2..G, rowT2..Ghome, rowT2..W, rowT2..L, rowT2..DivWin, rowT2..WcWin, rowT2..LgWin, rowT2..WsWin, rowT2..R, rowT2..Ab, rowT2..H, rowT2..Double, rowT2..Triple, rowT2..Hr, rowT2..Bb, rowT2..So, rowT2..Sb, rowT2..Cs, rowT2..Hbp, rowT2..Sf, rowT2..Ra, rowT2..Er, rowT2..Era, rowT2..Cg, rowT2..Sho, rowT2..Sv, rowT2..Ipouts, rowT2..Ha, rowT2..Hra, rowT2..Bba, rowT2..Soa, rowT2..E, rowT2..Dp, rowT2..Fp, rowT2..Name, rowT2..Park, rowT2..Attendance, rowT2..Bpf, rowT2..Ppf, rowT2..TeamIdBr, rowT2..TeamIdLahman45, rowT2..TeamIdRetro })).Count();",
    "db_name": "baseball_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,1960): error CS0103: The name 'TeamIdRetro' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    338 Error(s)\n\nTime Elapsed 00:00:01.45",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ccc6bb97c50c2c7caa64b4e06da3bf95950f9b63db8b67142f859d9ab7e01528",
    "sql": "SELECT count(*) FROM postseason WHERE YEAR = 1885 AND ties = 1;",
    "linq": "context.Postseasons.Where(row => row.Year == 1885 && row.Ties == 1).Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "52b24475a57637e5aac4949a03987822eb65fc28a4ee1b39b234aec775aa2693",
    "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2010",
    "linq": "context.Salaries.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\" && row.T1.Year == 2010).Select(row => row.T1.Salary1).Sum();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5c48e3ad35ff2b4350bec34f8f125100a470328dcc4323933ebac2552a358af6",
    "sql": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2000",
    "linq": "context.Salaries.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\" && row.T1.Year == 2000).Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e4a32e2d9bc6548fade7369c3eb61d5efcd2115f77bc00aafc2b67451b16a079",
    "sql": "SELECT salary FROM salary WHERE YEAR = 2001 ORDER BY salary DESC LIMIT 3;",
    "linq": "context.Salaries.Where(row => row.Year == 2001).OrderByDescending(row => row.Salary1).Select(row => new { row.Salary1 }).Take(3).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cce399073c660836e96a49ecefd56d3388bf9b2719d3e6d46002cebaade8507e",
    "sql": "SELECT salary FROM salary WHERE YEAR = 2010 UNION SELECT salary FROM salary WHERE YEAR = 2001",
    "linq": "context.Salaries.Where(row => row.Year == 2010).Where(row => row.Salary1.HasValue).Select(row => row.Salary1.Value).Union(context.Salaries.Where(row => row.Year == 2001).Where(row => row.Salary1.HasValue).Select(row => row.Salary1.Value)).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "63edca6ee67c5822d92e56f8e226b3cab2dc24a28967e30cf2b3b7cea6834850",
    "sql": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;",
    "linq": "context.HallOfFames.GroupBy(row => new { row.Yearid }).OrderBy(group => group.Count()).Select(group => new { group.Key.Yearid }).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6ffa3e8e8e6df975d9d719cf12f580a28e552ff6aee6d9a7e05e3425db1e0c5e",
    "sql": "SELECT count(*) FROM park WHERE city = 'Atlanta';",
    "linq": "context.Parks.Where(row => row.City == \"Atlanta\").Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "010a1b360ccbcd31de67d46b2b29cb5b1c383bacd8aa006d97e7fe0bf857bcfe",
    "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';",
    "linq": "context.HomeGames.Join(context.Parks, T1 => T1.ParkId, T2 => T2.ParkId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 1907 && row.T2.ParkName == \"Columbia Park\").Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b873e17330b52fa217f1a43f2d0d39549e981f9a89c2f87d85f8bb3cb6ad9ad8",
    "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2000 AND T2.city = 'Atlanta';",
    "linq": "context.HomeGames.Join(context.Parks, T1 => T1.ParkId, T2 => T2.ParkId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2000 && row.T2.City == \"Atlanta\").Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ce88f0c20eb3454cd49125097077ba53073f1ba760c45634375228e2781e80f1",
    "sql": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;",
    "linq": "context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\" && row.T1.Year >= 2000 && row.T1.Year <= 2010).Select(row => row.T1.Attendance).Sum();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "51f99c7ada40ea11174c0e1df4a4c505218c228b80e47652401b7a75a1335fdc",
    "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = 'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;",
    "linq": "context.Salaries.Join(context.Players, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.NameFirst == \"Len\" && row.T2.NameLast == \"Barker\" && row.T1.Year >= 1985 && row.T1.Year <= 1990).Select(row => row.T1.Salary1).Sum();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "83e9d2b25a2aefeda7966573100ffb3c87c73a111f297e3cf383d269626c66cc",
    "sql": "SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
    "linq": "context.Salaries.Join(context.Players, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Join(context.Teams, joined => joined.T1.TeamId, T3 => T3.TeamIdBr, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Year == 2005 && row.T3.Name == \"Washington Nationals\").Select(row => new { row.T2.NameFirst, row.T2.NameLast }).Intersect(context.Salaries.Join(context.Players, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Join(context.Teams, joined => joined.T1.TeamId, T3 => T3.TeamIdBr, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Year == 2007 && row.T3.Name == \"Washington Nationals\").Select(row => new { row.T2.NameFirst, row.T2.NameLast })).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7048bb2476a0363a0ae88bf8b7d846e610bdefd8d977d9cd8ebb595b81b82a76",
    "sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
    "linq": "context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\" && row.T1.Year >= 1990 && row.T1.Year <= 2000).Select(row => row.T1.Games).Sum();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c39f9719a39987c00a7d100b772a6d9e9e8f2686df5af720bbce1833a26d3d60",
    "sql": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;",
    "linq": "context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 1980).OrderBy(row => row.T1.Attendance).Select(row => new { row.T2.Name }).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "10fbdeb770f7e83f60917c394df56fb6f4452e76db5fd37513b9cb431c558e80",
    "sql": "SELECT state FROM park GROUP BY state HAVING count(*) > 2;",
    "linq": "context.Parks.GroupBy(row => new { row.State }).Where(group => group.Count() > 2).Select(group => new { group.Key.State }).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bf286c270d2178de97a4d71626300c17c9465a4bee0d4b415491ac7e674f6600",
    "sql": "SELECT count(*) FROM team_franchise WHERE active = 'Y';",
    "linq": "context.TeamFranchises.Where(row => row.Active == \"Y\").Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a0657664972637461bb8ed0a792399761e548a97b24fab2ba55d25b0982d77e6",
    "sql": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
    "linq": "context.Parks.GroupBy(row => new { row.City }).Where(group => group.Count() >= 2 && group.Count() <= 4).Select(group => new { group.Key.City }).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e43c0b5fadf0620ef7d383d9016d96e5c3225d587d67862245575b1d3ad91810",
    "sql": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;",
    "linq": "context.HomeGames.Join(context.Parks, T1 => T1.ParkId, T2 => T2.ParkId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2008).OrderByDescending(row => row.T1.Attendance).Select(row => new { row.T2.ParkName }).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e4f528ffd1310104ca23d6e099f8ca728051500a88d3be1cfeaa3438822eae47",
    "sql": "SELECT release_year FROM movie WHERE title = \"The Imitation Game\";",
    "linq": "context.Movies.Where(row => row.Title == \"The Imitation Game\").Select(row => new { row.ReleaseYear }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "edd8b4f0b3d70ea2f33c9361b579df74d2e1d820150968445aa906ce718fe4a4",
    "sql": "SELECT birth_year FROM actor WHERE name = \"Benedict Cumberbatch\";",
    "linq": "context.Actors.Where(row => row.Name == \"Benedict Cumberbatch\").Select(row => new { row.BirthYear }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a874b585b4889616b23089a7da68b16c2b22ad15d26f2210e8a51d04dec5daed",
    "sql": "SELECT nationality FROM actor WHERE name = \"Christoph Waltz\";",
    "linq": "context.Actors.Where(row => row.Name == \"Christoph Waltz\").Select(row => new { row.Nationality }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7a75a9f6e0f4e1e61141d236cd3908a68b041dba5a3ccbc4e9be2fd2c1df1fe7",
    "sql": "SELECT title FROM movie WHERE release_year = 2015;",
    "linq": "context.Movies.Where(row => row.ReleaseYear == 2015).Select(row => new { row.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "92350327a0d43511a9737ec5b95e5fac9d1a438c24fe2439dc3c08fc39d8d8d8",
    "sql": "SELECT name FROM actor WHERE birth_city = \"Tehran\";",
    "linq": "context.Actors.Where(row => row.BirthCity == \"Tehran\").Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "767919ef1eab7687d28696c7f8a92ef5078dad11ce021dc5ce8ab2a228bdccd9",
    "sql": "SELECT name FROM actor WHERE nationality = \"Afghanistan\";",
    "linq": "context.Actors.Where(row => row.Nationality == \"Afghanistan\").Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7826e5e316306dbbaaba54fedb0e5c393d924798ee72c484d0f353ab808d6132",
    "sql": "SELECT name FROM actor WHERE birth_year = 1984;",
    "linq": "context.Actors.Where(row => row.BirthYear == 1984).Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b00435366d597d4eb3528dbc847009846a2dc435dc901b83f2388dc4bda50454",
    "sql": "SELECT birth_year FROM actor WHERE name = \"actor_name0\";",
    "linq": "context.Actors.Where(row => row.Name == \"actor_name0\").Select(row => new { row.BirthYear }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "08c599166b7839ece89381629e2ebcfb3d11672562847c51cb7819f3e79cb129",
    "sql": "SELECT birth_city FROM director WHERE name = \"director_name0\";",
    "linq": "context.Directors.Where(row => row.Name == \"director_name0\").Select(row => new { row.BirthCity }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fc6b30f520c18eac071d343f2cb6810907c55dcd3f5ad1f669ed69f43706ac6f",
    "sql": "SELECT nationality FROM director WHERE name = \"director_name0\";",
    "linq": "context.Directors.Where(row => row.Name == \"director_name0\").Select(row => new { row.Nationality }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4a5b307a21b902835020a8b0821ddfc9118c15733ff18af9bbb9aa32872493a1",
    "sql": "SELECT budget FROM movie WHERE title = \"Finding Nemo\";",
    "linq": "context.Movies.Where(row => row.Title == \"Finding Nemo\").Select(row => new { row.Budget }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "20ee701cdcfb4e34d1f5aff65a1a1e63f744de352c952e34568f05c8964a880a",
    "sql": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Steven Spielberg\" AND t3.release_year > 2006;",
    "linq": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Steven Spielberg\" && row.t3.ReleaseYear > 2006).Select(row => new { row.t3.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6e393f96db71e46e32b53ef79ee8f010ab678ac577c92a820062500b6b8d0ca8",
    "sql": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.title = \"James Bond\";",
    "linq": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.Title == \"James Bond\").Select(row => new { row.t2.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f1fdb510ac2a687c280b47787b9038b7639932def9d1967215c11cf9d97c6343",
    "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t2.role = \"Alan Turing\" AND t3.title = \"The Imitation Game\";",
    "linq": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Role == \"Alan Turing\" && row.t3.Title == \"The Imitation Game\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "imdb",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,227): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.40",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "396afb6163fbd2696b9c57c7c9b6e10b71c65a944a999df6127352a2673a0d09",
    "sql": "SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.title = \"Jurassic Park\";",
    "linq": "context.Genres.Join(context.Classifications, t2 => t2.Gid, t1 => t1.Gid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.Title == \"Jurassic Park\").Select(row => new { row.t2.Genre1 }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f4a65c9fed46ec8374d8f9e9ef6eeb9b41ab307c7c9091fe3dd299a855dcfe44",
    "sql": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.release_year = 2015 AND t3.title = \"Joy\";",
    "linq": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.ReleaseYear == 2015 && row.t3.Title == \"Joy\").Select(row => new { row.t2.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a309bd2b6ae9898e50b7397eaad200f141d0b51587faa3f13708dbfc35894794",
    "sql": "SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid = t1.mid JOIN writer AS t2 ON t3.wid = t2.wid WHERE t2.name = \"Matt Damon\";",
    "linq": "context.WrittenBies.Join(context.Movies, t3 => t3.Msid, t1 => t1.Mid, (t3, t1) => new { t3, t1 }).Join(context.Writers, joined => joined.t3.Wid, t2 => t2.Wid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t2.Name == \"Matt Damon\").Select(row => new { row.t1.Title }).ToList();",
    "db_name": "imdb",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,234): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.66",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b4dc799d384af7bce2500b771244c24c945793862356005d2862fdad1fb41c0f",
    "sql": "SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid = t3.msid JOIN producer AS t1 ON t1.pid = t3.pid JOIN written_by AS t5 ON t5.msid = t2.mid JOIN writer AS t4 ON t5.wid = t4.wid WHERE t1.name = \"Woody Allen\" AND t4.name = \"Woody Allen\";",
    "linq": "context.Movies.Join(context.MadeBies, t2 => t2.Mid, t3 => t3.Msid, (t2, t3) => new { t2, t3 }).Join(context.Producers, joined => joined.t3.Pid, t1 => t1.Pid, (joined, t1) => new { joined.t2, joined.t3, t1 }).Join(context.WrittenBies, joined => joined.t2.Mid, t5 => t5.Msid, (joined, t5) => new { joined.t2, joined.t3, joined.t1, t5 }).Join(context.Writers, joined => joined.t5.Wid, t4 => t4.Wid, (joined, t4) => new { joined.t2, joined.t3, joined.t1, joined.t5, t4 }).Where(row => row.t1.Name == \"Woody Allen\" && row.t4.Name == \"Woody Allen\").Select(row => new { row.t2.Title }).ToList();",
    "db_name": "imdb",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,525): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2163b5f4c411efb03d294f8d4cfd3d407438e5b458ad1d5aa2c3b809c0e1ece6",
    "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Robin Wright\";",
    "linq": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.Movies, joined => joined.t3.Msid, t2 => t2.Mid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Name == \"Robin Wright\").Select(row => new { row.t2.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "633cc22094c951102409497388a1eb0ed75b6909f3a1f4f38942e8196201b5cf",
    "sql": "SELECT budget FROM movie WHERE release_year = 2007 AND title = \"Juno\";",
    "linq": "context.Movies.Where(row => row.ReleaseYear == 2007 && row.Title == \"Juno\").Select(row => new { row.Budget }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4b82b82b9aac1151bf08863929b6343ed6b67fbf670e3ce017368fc01b44ddda",
    "sql": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.genre = \"Sci-Fi\" AND t3.release_year = 2010;",
    "linq": "context.Genres.Join(context.Classifications, t2 => t2.Gid, t1 => t1.Gid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Genre1 == \"Sci-Fi\" && row.t3.ReleaseYear == 2010).Select(row => new { row.t3.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7778b03527b5723b486df84050acbb8ca10050a53ffa197b3d47112c31f21048",
    "sql": "SELECT name FROM actor WHERE birth_city = \"Austin\" AND birth_year > 1980;",
    "linq": "context.Actors.Where(row => row.BirthCity == \"Austin\" && row.BirthYear > 1980).Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7819fd4197fd2d9f5352dad4c2f985b21900daa1b09cc6d0f22a94011c5ad2a9",
    "sql": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.birth_city = \"Los Angeles\";",
    "linq": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.BirthCity == \"Los Angeles\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6694cfa4d9585d244a05eef421f31b69d46f0528db07e228577b9b818e424d62",
    "sql": "SELECT name FROM actor WHERE birth_city = \"New York City\" AND birth_year = 1984;",
    "linq": "context.Actors.Where(row => row.BirthCity == \"New York City\" && row.BirthYear == 1984).Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f3ff376c1696179216b440b3485238a05270f17228770db4677b10611d632544",
    "sql": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid = t1.id JOIN movie AS t3 ON t2.msid = t3.mid WHERE t1.keyword = \"nuclear weapons\";",
    "linq": "context.Tags.Join(context.Keywords, t2 => t2.Kid, t1 => t1.Id, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Keyword1 == \"nuclear weapons\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "140241ac3d67e5fc479315aa92b4f0a937ec47f1c46b595494b774fb67afcf73",
    "sql": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Alfred Hitchcock\";",
    "linq": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Alfred Hitchcock\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cc291dd166d64cf111184259482769d4e61304e6d85c048f159fda29e8c7bf23",
    "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN directed_by AS t2 ON t4.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t1.name = \"Taraneh Alidoosti\" AND t3.name = \"Asghar Farhadi\";",
    "linq": "context.Casts.Join(context.Actors, t5 => t5.Aid, t1 => t1.Aid, (t5, t1) => new { t5, t1 }).Join(context.Movies, joined => joined.t5.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t5, joined.t1, t4 }).Join(context.DirectedBies, joined => joined.t4.Mid, t2 => t2.Msid, (joined, t2) => new { joined.t5, joined.t1, joined.t4, t2 }).Join(context.Directors, joined => joined.t2.Did, t3 => t3.Did, (joined, t3) => new { joined.t5, joined.t1, joined.t4, joined.t2, t3 }).Where(row => row.t1.Name == \"Taraneh Alidoosti\" && row.t3.Name == \"Asghar Farhadi\").Select(row => new { row.t4.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "58e305113d668bffde18a4038167ef45eb99333c22bc96a1c66ddcf6ae2c7a37",
    "sql": "SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid = t3.pid JOIN tv_series AS t2 ON t2.sid = t3.msid WHERE t1.name = \"Shonda Rhimes\";",
    "linq": "context.Producers.Join(context.MadeBies, t1 => t1.Pid, t3 => t3.Pid, (t1, t3) => new { t1, t3 }).Join(context.TvSeries, joined => joined.t3.Msid, t2 => t2.Sid, (joined, t2) => new { joined.t1, joined.t3, t2 }).Where(row => row.t1.Name == \"Shonda Rhimes\").Select(row => new { row.t2.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a435bf53a1bb06f737798edb57e68e7776da4da1950bb5842a26812c11f4c632",
    "sql": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN tv_series AS t2 ON t2.sid = t3.msid WHERE t3.role = \"Olivia Pope\" AND t2.title = \"Scandal\";",
    "linq": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.TvSeries, joined => joined.t3.Msid, t2 => t2.Sid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t3.Role == \"Olivia Pope\" && row.t2.Title == \"Scandal\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "imdb",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,229): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.39",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8549a06b840a4c2c513226317306c07a992234b157279f574f271e267d01971c",
    "sql": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid = t1.mid JOIN writer AS t2 ON t3.wid = t2.wid WHERE t1.title = \"The Truman Show\";",
    "linq": "context.WrittenBies.Join(context.Movies, t3 => t3.Msid, t1 => t1.Mid, (t3, t1) => new { t3, t1 }).Join(context.Writers, joined => joined.t3.Wid, t2 => t2.Wid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Title == \"The Truman Show\").Select(row => new { row.t2.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9de4052bbcbef19c4203d96318c43dc91c1b897190d9e6439c11665a57d0ced5",
    "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN tv_series AS t2 ON t2.sid = t3.msid WHERE t1.name = \"Scott Foley\";",
    "linq": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.TvSeries, joined => joined.t3.Msid, t2 => t2.Sid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Name == \"Scott Foley\").Select(row => new { row.t2.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "278dd9e82c1041c6177a545fd0bb720034f5b5f83f92ad102253b82364c431cb",
    "sql": "SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN directed_by AS t2 ON t5.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t1.name = \"Kate Winslet\";",
    "linq": "context.Casts.Join(context.Actors, t4 => t4.Aid, t1 => t1.Aid, (t4, t1) => new { t4, t1 }).Join(context.Movies, joined => joined.t4.Msid, t5 => t5.Mid, (joined, t5) => new { joined.t4, joined.t1, t5 }).Join(context.DirectedBies, joined => joined.t5.Mid, t2 => t2.Msid, (joined, t2) => new { joined.t4, joined.t1, joined.t5, t2 }).Join(context.Directors, joined => joined.t2.Did, t3 => t3.Did, (joined, t3) => new { joined.t4, joined.t1, joined.t5, joined.t2, t3 }).Where(row => row.t1.Name == \"Kate Winslet\").Select(row => new { row.t3.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d8bdbdab3041c8d40036245423f54f8c131e12f896bc94033920e6a3f8a87c89",
    "sql": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid = t2.aid JOIN movie AS t5 ON t5.mid = t3.msid JOIN made_by AS t4 ON t5.mid = t4.msid JOIN producer AS t1 ON t1.pid = t4.pid WHERE t2.name = \"Kate Winslet\";",
    "linq": "context.Casts.Join(context.Actors, t3 => t3.Aid, t2 => t2.Aid, (t3, t2) => new { t3, t2 }).Join(context.Movies, joined => joined.t3.Msid, t5 => t5.Mid, (joined, t5) => new { joined.t3, joined.t2, t5 }).Join(context.MadeBies, joined => joined.t5.Mid, t4 => t4.Msid, (joined, t4) => new { joined.t3, joined.t2, joined.t5, t4 }).Join(context.Producers, joined => joined.t4.Pid, t1 => t1.Pid, (joined, t1) => new { joined.t3, joined.t2, joined.t5, joined.t4, t1 }).Where(row => row.t2.Name == \"Kate Winslet\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "98f6fd214f8dc7dbb0b4d0eaf5e05e7b5f9ac33d2b501a8d790e1f5b87ba3dd0",
    "sql": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN tv_series AS t3 ON t3.sid = t1.msid WHERE t3.release_year = 2013 AND t3.title = \"House of Cards\";",
    "linq": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.TvSeries, joined => joined.t1.Msid, t3 => t3.Sid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.ReleaseYear == 2013 && row.t3.Title == \"House of Cards\").Select(row => new { row.t2.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7a1bc1c3d03fe844fed69992626449f245577d6e8832c627552871afe64f7615",
    "sql": "SELECT name FROM actor WHERE birth_city = \"Austin\" AND gender = \"female\";",
    "linq": "context.Actors.Where(row => row.BirthCity == \"Austin\" && row.Gender == \"female\").Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b5c1d3f9f672b75edda51f952faf004122623cf4cf0074b1a3312af38c918f67",
    "sql": "SELECT name FROM actor WHERE birth_year > 1980 AND nationality = \"Italy\";",
    "linq": "context.Actors.Where(row => row.BirthYear > 1980 && row.Nationality == \"Italy\").Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f3a5e6a86a42fc0751e06c587a267a9c4ab50269283bbfce769b621c685a0605",
    "sql": "SELECT name FROM actor WHERE birth_city = \"New York City\" AND birth_year > 1980 AND gender = \"female\";",
    "linq": "context.Actors.Where(row => row.BirthCity == \"New York City\" && row.BirthYear > 1980 && row.Gender == \"female\").Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "13bcdd5aa5ded0cf4b0d16d124e2c3c5f5859b649de44a4b17843a0b38b1c2c1",
    "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t1.gender = \"female\" AND t3.title = \"Saving Private Ryan\";",
    "linq": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Gender == \"female\" && row.t3.Title == \"Saving Private Ryan\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "60613edf2de33c2ae3e7b656781d05eb7134bfa3e9ac80913ccb4d5e2b48f0c0",
    "sql": "SELECT name FROM director WHERE nationality = \"Afghanistan\";",
    "linq": "context.Directors.Where(row => row.Nationality == \"Afghanistan\").Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9c3953dbd373eb416310fb5badd52470c391929f77fd5bdd149306ad22c70e5a",
    "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t3.title = \"Camp X-Ray\";",
    "linq": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.Title == \"Camp X-Ray\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1cdd8bd5ba39872aacd97d986af2e5540720815dfc964145917d883a3896e1e8",
    "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t1.nationality = \"Canada\" AND t3.title = \"James Bond\";",
    "linq": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Nationality == \"Canada\" && row.t3.Title == \"James Bond\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9ac139076643483a14f52d2e27bbcf52418eec0dcfcd507c1899e4a19ca3b3a7",
    "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Rowan Atkinson\" AND t3.role = \"Mr. Bean\";",
    "linq": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.Movies, joined => joined.t3.Msid, t2 => t2.Mid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Name == \"Rowan Atkinson\" && row.t3.Role == \"Mr. Bean\").Select(row => new { row.t2.Title }).ToList();",
    "db_name": "imdb",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,262): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.67",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "77a7cf130f5bbe99e2b4f586afa65fc8b84f250f49aa8c32332ac9ee257b2f42",
    "sql": "SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.title = \"The Past\";",
    "linq": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.Title == \"The Past\").Select(row => new { row.t2.BirthCity }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f093000c4f324fc817aeb49c6086285f4fa54daa1abe83483422bb9b9f41e05b",
    "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid WHERE t2.role = \"Mr. Bean\";",
    "linq": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Role == \"Mr. Bean\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "imdb",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,116): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.50",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3ff6db2f9fc2258008278d2dc13c47593565deca4f66a463ec545ccbd3d64f57",
    "sql": "SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN classification AS t1 ON t4.mid = t1.msid JOIN genre AS t3 ON t3.gid = t1.gid WHERE t5.name = \"Asghar Farhadi\";",
    "linq": "context.Directors.Join(context.DirectedBies, t5 => t5.Did, t2 => t2.Did, (t5, t2) => new { t5, t2 }).Join(context.Movies, joined => joined.t2.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t5, joined.t2, t4 }).Join(context.Classifications, joined => joined.t4.Mid, t1 => t1.Msid, (joined, t1) => new { joined.t5, joined.t2, joined.t4, t1 }).Join(context.Genres, joined => joined.t1.Gid, t3 => t3.Gid, (joined, t3) => new { joined.t5, joined.t2, joined.t4, joined.t1, t3 }).Where(row => row.t5.Name == \"Asghar Farhadi\").Select(row => new { row.t3.Genre1 }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d90d7fa9cf4d941705312242b66b035b7562151ec758e486e76f44fb95eaf4ea",
    "sql": "SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid = t2.msid WHERE t2.role = \"Daffy Duck\";",
    "linq": "context.Movies.Join(context.Casts, t1 => t1.Mid, t2 => t2.Msid, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Role == \"Daffy Duck\").Select(row => new { row.t1.Title }).ToList();",
    "db_name": "imdb",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,117): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.39",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bceb74238b49443144a4922a07ee635d952232653fad310c8ea3b797d63a955e",
    "sql": "SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t3.title = \"Daddy Long Legs\";",
    "linq": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.Title == \"Daddy Long Legs\").Select(row => new { row.t2.Role }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d176db10946fa1d4124f5031789dbe044be2ccf3efe5932071e9f17596276baa",
    "sql": "SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN tags AS t5 ON t5.msid = t4.mid JOIN keyword AS t1 ON t5.kid = t1.id WHERE t1.keyword = \"nuclear weapons\";",
    "linq": "context.Directors.Join(context.DirectedBies, t3 => t3.Did, t2 => t2.Did, (t3, t2) => new { t3, t2 }).Join(context.Movies, joined => joined.t2.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t3, joined.t2, t4 }).Join(context.Tags, joined => joined.t4.Mid, t5 => t5.Msid, (joined, t5) => new { joined.t3, joined.t2, joined.t4, t5 }).Join(context.Keywords, joined => joined.t5.Kid, t1 => t1.Id, (joined, t1) => new { joined.t3, joined.t2, joined.t4, joined.t5, t1 }).Where(row => row.t1.Keyword1 == \"nuclear weapons\").Select(row => new { row.t3.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f5248249997ab3ac6963a67bbbcb372703bfb778cade4ca210033ad1151a8a38",
    "sql": "SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Jennifer Aniston\" AND t2.release_year > 2010;",
    "linq": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.Movies, joined => joined.t3.Msid, t2 => t2.Mid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Name == \"Jennifer Aniston\" && row.t2.ReleaseYear > 2010).Select(row => row.t2.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7f3c33e173ae6d3d016edaa123e1690910233bcd915522053bce3457e918139b",
    "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t3.title = \"Saving Private Ryan\";",
    "linq": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.Title == \"Saving Private Ryan\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5e9a02a2a9d8eeb5addbe9787c87a1a7b292664499d58a0c145b8c9b88c7864b",
    "sql": "SELECT COUNT ( DISTINCT t3.title ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Steven Spielberg\";",
    "linq": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Steven Spielberg\").Select(row => row.t3.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5c5f9802a3973e129f00f7c2ec201d7c6edfb0b391b921b7b180261dfddf0f03",
    "sql": "SELECT COUNT ( DISTINCT title ) FROM movie WHERE release_year = 2013;",
    "linq": "context.Movies.Where(row => row.ReleaseYear == 2013).Select(row => row.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3f2f97842f049fd86efe9400415abd0b5b57cbb5d80b3ea1f7d3e5d8276c9e23",
    "sql": "SELECT COUNT ( DISTINCT t3.title ) , t3.release_year FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Woody Allen\" GROUP BY t3.release_year;",
    "linq": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Woody Allen\").GroupBy(row => new { row.t3.ReleaseYear }).Select(group => new { CountDistinctTitle = group.Select(row => row.t3.Title).Distinct().Count(), group.Key.ReleaseYear }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "46935cf14e319d4e4f04213bba6766742b36d1296681b9aacdbfdf33e26d8555",
    "sql": "SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Shahab Hosseini\";",
    "linq": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.Movies, joined => joined.t3.Msid, t2 => t2.Mid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Name == \"Shahab Hosseini\").Select(row => row.t2.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "831f682d8db41e145fc77b35f1e6e16da9e86d2aec82a5a43d5e629b20113f7d",
    "sql": "SELECT COUNT ( DISTINCT name ) FROM actor WHERE birth_city = \"Los Angeles\" AND birth_year > 2000;",
    "linq": "context.Actors.Where(row => row.BirthCity == \"Los Angeles\" && row.BirthYear > 2000).Select(row => row.Name).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fdbb8c0d349b69eb5d862c659c7d823a2fd03e5a0986d935749030932242e49a",
    "sql": "SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Humphrey Bogart\" AND t2.release_year < 1942;",
    "linq": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.Movies, joined => joined.t3.Msid, t2 => t2.Mid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Name == \"Humphrey Bogart\" && row.t2.ReleaseYear < 1942).Select(row => row.t2.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "975d3db94d5b9097301e6fcdb1ae521512093b8609397885dd8b6298ff701efd",
    "sql": "SELECT COUNT ( DISTINCT t2.title ) , t2.release_year FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Brad Pitt\" GROUP BY t2.release_year;",
    "linq": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.Movies, joined => joined.t3.Msid, t2 => t2.Mid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Name == \"Brad Pitt\").GroupBy(row => new { row.t2.ReleaseYear }).Select(group => new { CountDistinctTitle = group.Select(row => row.t2.Title).Distinct().Count(), group.Key.ReleaseYear }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "747890f18440e41125e8fdfc531aac57666b2a4cdd495d5f294c960fe7fe1b81",
    "sql": "SELECT COUNT ( DISTINCT t3.title ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid = t1.id JOIN movie AS t3 ON t2.msid = t3.mid WHERE t1.keyword = \"Iraq war\" AND t3.release_year = 2015;",
    "linq": "context.Tags.Join(context.Keywords, t2 => t2.Kid, t1 => t1.Id, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Keyword1 == \"Iraq war\" && row.t3.ReleaseYear == 2015).Select(row => row.t3.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3780e39add7cb3a169df1dabeff1654dad98f888cbaa9e6af54a23580a348c63",
    "sql": "SELECT COUNT ( DISTINCT t3.title ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid = t1.id JOIN movie AS t3 ON t2.msid = t3.mid WHERE t1.keyword = \"Persians\" AND t3.release_year > 1990;",
    "linq": "context.Tags.Join(context.Keywords, t2 => t2.Kid, t1 => t1.Id, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Keyword1 == \"Persians\" && row.t3.ReleaseYear > 1990).Select(row => row.t3.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4805d350c2923a90d35cdfa063633531fb8ee78ae9bc0a8e93725851189033cb",
    "sql": "SELECT COUNT ( DISTINCT t3.title ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Quentin Tarantino\" AND t3.release_year > 2010;",
    "linq": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Quentin Tarantino\" && row.t3.ReleaseYear > 2010).Select(row => row.t3.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3eadfe4481e557b60afa1d62f8b64559f127b50ff007eb4d13b98974e69274d7",
    "sql": "SELECT COUNT ( DISTINCT t3.title ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Quentin Tarantino\" AND t3.release_year < 2010;",
    "linq": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Quentin Tarantino\" && row.t3.ReleaseYear < 2010).Select(row => row.t3.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "edb84e6721601fabf2cc0c377b680d6f910a8b42580a139340e600fb5422443c",
    "sql": "SELECT COUNT ( DISTINCT t4.title ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN made_by AS t5 ON t4.mid = t5.msid JOIN producer AS t1 ON t1.pid = t5.pid WHERE t3.name = \"Quentin Tarantino\" AND t4.release_year < 2010 AND t4.release_year > 2002;",
    "linq": "context.Directors.Join(context.DirectedBies, t3 => t3.Did, t2 => t2.Did, (t3, t2) => new { t3, t2 }).Join(context.Movies, joined => joined.t2.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t3, joined.t2, t4 }).Join(context.MadeBies, joined => joined.t4.Mid, t5 => t5.Msid, (joined, t5) => new { joined.t3, joined.t2, joined.t4, t5 }).Join(context.Producers, joined => joined.t5.Pid, t1 => t1.Pid, (joined, t1) => new { joined.t3, joined.t2, joined.t4, joined.t5, t1 }).Where(row => row.t3.Name == \"Quentin Tarantino\" && row.t4.ReleaseYear < 2010 && row.t4.ReleaseYear > 2002).Select(row => row.t4.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5203d610543410d0069367a55da92dbff006863eeceed51c9df059a0b1253301",
    "sql": "SELECT COUNT ( DISTINCT name ) FROM actor WHERE birth_city = \"New York City\" AND birth_year > 1980 AND gender = \"female\";",
    "linq": "context.Actors.Where(row => row.BirthCity == \"New York City\" && row.BirthYear > 1980 && row.Gender == \"female\").Select(row => row.Name).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6108834ac00d4073182c46640dc4629703cebf82a64d1ad8998835d0108dd2e4",
    "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN directed_by AS t2 ON t5.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t1.nationality = \"Iran\" AND t3.name = \"Jim Jarmusch\";",
    "linq": "context.Casts.Join(context.Actors, t4 => t4.Aid, t1 => t1.Aid, (t4, t1) => new { t4, t1 }).Join(context.Movies, joined => joined.t4.Msid, t5 => t5.Mid, (joined, t5) => new { joined.t4, joined.t1, t5 }).Join(context.DirectedBies, joined => joined.t5.Mid, t2 => t2.Msid, (joined, t2) => new { joined.t4, joined.t1, joined.t5, t2 }).Join(context.Directors, joined => joined.t2.Did, t3 => t3.Did, (joined, t3) => new { joined.t4, joined.t1, joined.t5, joined.t2, t3 }).Where(row => row.t1.Nationality == \"Iran\" && row.t3.Name == \"Jim Jarmusch\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "47b9c5824b3658cd6ae894c8f9448f576cbb953f6fb462d1e1aa0403a9f62667",
    "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t1.nationality = \"China\" AND t3.title = \"Rush Hour 3\";",
    "linq": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Nationality == \"China\" && row.t3.Title == \"Rush Hour 3\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "942516ce6aee3e5835b538f0fb0d2fcbd236b78f92043ce8049b30f66e01e7e5",
    "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN CAST AS t3 ON t4.mid = t3.msid JOIN actor AS t2 ON t3.aid = t2.aid WHERE t1.name = \"Woody Strode\" AND t2.name = \"Jason Robards\";",
    "linq": "context.Casts.Join(context.Actors, t5 => t5.Aid, t1 => t1.Aid, (t5, t1) => new { t5, t1 }).Join(context.Movies, joined => joined.t5.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t5, joined.t1, t4 }).Join(context.Casts, joined => joined.t4.Mid, t3 => t3.Msid, (joined, t3) => new { joined.t5, joined.t1, joined.t4, t3 }).Join(context.Actors, joined => joined.t3.Aid, t2 => t2.Aid, (joined, t2) => new { joined.t5, joined.t1, joined.t4, joined.t3, t2 }).Where(row => row.t1.Name == \"Woody Strode\" && row.t2.Name == \"Jason Robards\").Select(row => new { row.t4.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "31a965239c125ad9e1ac0d55dde85b8dc807927a17b96228aecb59923cf0ace5",
    "sql": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN CAST AS t3 ON t5.mid = t3.msid JOIN actor AS t2 ON t3.aid = t2.aid WHERE t2.name = \"Tom Hanks\";",
    "linq": "context.Casts.Join(context.Actors, t4 => t4.Aid, t1 => t1.Aid, (t4, t1) => new { t4, t1 }).Join(context.Movies, joined => joined.t4.Msid, t5 => t5.Mid, (joined, t5) => new { joined.t4, joined.t1, t5 }).Join(context.Casts, joined => joined.t5.Mid, t3 => t3.Msid, (joined, t3) => new { joined.t4, joined.t1, joined.t5, t3 }).Join(context.Actors, joined => joined.t3.Aid, t2 => t2.Aid, (joined, t2) => new { joined.t4, joined.t1, joined.t5, joined.t3, t2 }).Where(row => row.t2.Name == \"Tom Hanks\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5d21506ec552ce970a73701b975cba33c3c82d07e198d34a5f4a4bc280b15dee",
    "sql": "SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did = t2.did JOIN directed_by AS t1 ON t5.did = t1.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN movie AS t3 ON t3.mid = t1.msid WHERE t4.title = \"Revolutionary Road\";",
    "linq": "context.Directors.Join(context.DirectedBies, t5 => t5.Did, t2 => t2.Did, (t5, t2) => new { t5, t2 }).Join(context.DirectedBies, joined => joined.t5.Did, t1 => t1.Did, (joined, t1) => new { joined.t5, joined.t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t5, joined.t2, joined.t1, t4 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t5, joined.t2, joined.t1, joined.t4, t3 }).Where(row => row.t4.Title == \"Revolutionary Road\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7a30e3b064baeafa46d9e99c01970e422234978da78278607404f1b7eb07581b",
    "sql": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid GROUP BY t3.title ORDER BY COUNT ( DISTINCT t2.genre ) DESC LIMIT 1;",
    "linq": "context.Genres.Join(context.Classifications, t2 => t2.Gid, t1 => t1.Gid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).GroupBy(row => new { row.t3.Title }).OrderByDescending(group => group.Count(row => row.t2.Genre1 != null)).Select(group => new { group.Key.Title }).Take(1).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f048588d6170d5ba8da67ad1cc6b573c00c149e48d2986661dba2cd7b8147fbd",
    "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.nationality = \"China\" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name ) DESC LIMIT 1;",
    "linq": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.Movies, joined => joined.t3.Msid, t2 => t2.Mid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Nationality == \"China\").GroupBy(row => new { row.t2.Title }).OrderByDescending(group => group.Count(row => row.t1.Name != null)).Select(group => new { group.Key.Title }).Take(1).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "275aa378b525be2b44a813dfa6d6f55f19cd3792d3e8688f2a218884212e4719",
    "sql": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN directed_by AS t2 ON t5.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t3.name = \"Quentin Tarantino\" ORDER BY t5.release_year DESC LIMIT 1;",
    "linq": "context.Casts.Join(context.Actors, t4 => t4.Aid, t1 => t1.Aid, (t4, t1) => new { t4, t1 }).Join(context.Movies, joined => joined.t4.Msid, t5 => t5.Mid, (joined, t5) => new { joined.t4, joined.t1, t5 }).Join(context.DirectedBies, joined => joined.t5.Mid, t2 => t2.Msid, (joined, t2) => new { joined.t4, joined.t1, joined.t5, t2 }).Join(context.Directors, joined => joined.t2.Did, t3 => t3.Did, (joined, t3) => new { joined.t4, joined.t1, joined.t5, joined.t2, t3 }).Where(row => row.t3.Name == \"Quentin Tarantino\").OrderByDescending(row => row.t5.ReleaseYear).Select(row => new { row.t1.Name }).Take(1).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "00c702d2ba15f777342b6a149d472a3c849f1afb10aa1573e7868eb28d701ab8",
    "sql": "SELECT t3.budget , t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Quentin Tarantino\" ORDER BY t3.release_year DESC LIMIT 1;",
    "linq": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Quentin Tarantino\").OrderByDescending(row => row.t3.ReleaseYear).Select(row => new { row.t3.Budget, row.t3.Title }).Take(1).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8e6faf7eaee43a0753d6f7d92a1c0decc673226abc9f6449fe29104bae3846b0",
    "sql": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1;",
    "linq": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Jim Jarmusch\").OrderByDescending(row => row.t3.ReleaseYear).Select(row => new { row.t3.Title }).Take(1).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9a2a44b05bae68e1031c6d233f9bc4a92faef4b3f7ef7d8fbb91569145e0d6a5",
    "sql": "SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN made_by AS t5 ON t4.mid = t5.msid JOIN producer AS t1 ON t1.pid = t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name ) DESC LIMIT 1;",
    "linq": "context.Directors.Join(context.DirectedBies, t3 => t3.Did, t2 => t2.Did, (t3, t2) => new { t3, t2 }).Join(context.Movies, joined => joined.t2.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t3, joined.t2, t4 }).Join(context.MadeBies, joined => joined.t4.Mid, t5 => t5.Msid, (joined, t5) => new { joined.t3, joined.t2, joined.t4, t5 }).Join(context.Producers, joined => joined.t5.Pid, t1 => t1.Pid, (joined, t1) => new { joined.t3, joined.t2, joined.t4, joined.t5, t1 }).GroupBy(row => new { row.t1.Name }).OrderByDescending(group => group.Count(row => row.t3.Name != null)).Select(group => new { group.Key.Name }).Take(1).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "341f8a72aade6d029e088b474a4b842cb00886aebb4548b3deae2300dd780b20",
    "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t1.name = \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;",
    "linq": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Name == \"Gabriele Ferzetti\").OrderByDescending(row => row.t3.ReleaseYear).Select(row => new { row.t1.Name }).Take(1).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "138cf8a1db95387464924321d4e4cacea16c33d703f8dbd22dafe422f29bfac9",
    "sql": "SELECT count(*) FROM Band",
    "linq": "context.Bands.Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f82e72b3119869800e610e3668ea735d9a5f488b85662d2038fe56957cef0266",
    "sql": "SELECT DISTINCT label FROM Albums",
    "linq": "context.Albums.Select(row => new { row.Label }).Distinct().ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e60a59cda140cd20ba13031173b2a200c3720dcf6a4b71ee97af1f426e41a02",
    "sql": "SELECT * FROM Albums WHERE YEAR = 2012",
    "linq": "context.Albums.Where(row => row.Year == 2012).Select(row => new { row.Aid, row.Title, row.Year, row.Label, row.Type }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "32da3f69237dd68a78756f454a6ee13a75544a84dbe7c577808c9c3ef9d331cf",
    "sql": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE Firstname = \"Solveig\"",
    "linq": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Firstname == \"Solveig\").Select(row => new { row.T1.StagePosition }).Distinct().ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2245769eba33ad645a12971c97332610aec5aa33aca3cae2fa297b21e63d6c4c",
    "sql": "SELECT count(*) FROM Songs",
    "linq": "context.Songs.Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3d2d964425cb592009289cd970bf4b822348f1374a7231f0110a7bc99e9a38f3",
    "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.Lastname = \"Heilo\"",
    "linq": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Lastname == \"Heilo\").Select(row => new { row.T3.Title }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "170edf3560513f7180987ee7976520ab6d043a870831e64241b892d676ff2945",
    "sql": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate = T2.id JOIN songs AS T3 ON T3.songid = T1.songid WHERE T3.Title = \"Flash\"",
    "linq": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Title == \"Flash\").Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0dc1e08e82c060e327e4d7fd69857fc8870d2d4020dfd4b0eaf1b5697b40c363",
    "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.firstname = \"Marianne\"",
    "linq": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Firstname == \"Marianne\").Select(row => new { row.T3.Title }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4d63e221fadc4676d995b33904ffec3789682e5d742f887835450c32d155de08",
    "sql": "SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = \"Badlands\"",
    "linq": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Title == \"Badlands\").Select(row => new { row.T2.Firstname, row.T2.Lastname }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "36f00c7f3e6df992a1a9b3cef3ffe0bf167df244c59f52a5aaf288401cca4b19",
    "sql": "SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = \"Badlands\" AND T1.StagePosition = \"back\"",
    "linq": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Title == \"Badlands\" && row.T1.StagePosition == \"back\").Select(row => new { row.T2.Firstname, row.T2.Lastname }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "54285b9a423fafd6b2eccb836d5e2023616c1968b80bae398fd226c28448686b",
    "sql": "SELECT count(DISTINCT label) FROM albums",
    "linq": "context.Albums.Select(row => row.Label).Distinct().Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "336585f11f04b7168876b822147b14dd927f6b29aec08477f2cb7a8e3c4c3fbe",
    "sql": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Albums.GroupBy(row => new { row.Label }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Label }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "081a14aa2241cc899e4762adaf529799be40c23e9ebdbc32614fb5cb1cd7aedd",
    "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T2.Lastname }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Lastname }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9706c15013b1becdd80f873f7f79876cf49577dafe08693ca5ab3c3887c7831c",
    "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE stageposition = \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StagePosition == \"back\").GroupBy(row => new { row.T2.Lastname }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Lastname }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b72a6b46d38aa248a80c52df69497f9f0bb36d94e51df0940f72084376f57abd",
    "sql": "SELECT title FROM songs WHERE title LIKE '% the %'",
    "linq": "context.Songs.Where(row => EF.Functions.Like(row.Title, \"% the %\")).Select(row => new { row.Title }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c659db27916819f3c47f6735bbc7b2ce161eda618c7b1a660f68a54fe2fc129b",
    "sql": "SELECT DISTINCT instrument FROM Instruments",
    "linq": "context.Instruments.Select(row => new { row.Instrument1 }).Distinct().ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ff425799e5f1fb717e67d2b05a2e55d267ffb2d3897a8f7f5c4e18a5a38a59ec",
    "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = \"Heilo\" AND T3.title = \"Le Pop\"",
    "linq": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Instruments, joined => new { Pair1 = joined.T3.SongId, Pair2 = joined.T2.Id }, T4 => new { Pair1 = joined.T4.SongId, Pair2 = joined.T4.BandmateId }, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T2.Lastname == \"Heilo\" && row.T3.Title == \"Le Pop\").Select(row => new { row.T4.Instrument1 }).ToList();",
    "db_name": "music_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,366): error CS0103: The name 'joined' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.77",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d6723ee7782d1db9a07716c9b742c010aa16f9647ae53977ee654319fbfeeb35",
    "sql": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Instruments.GroupBy(row => new { row.Instrument1 }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Instrument1 }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f586ee2ef1daf9d5144768b77c433ed83eadb8d9ace6377b61f413a8648e4a77",
    "sql": "SELECT count(*) FROM instruments WHERE instrument = \"drums\"",
    "linq": "context.Instruments.Where(row => row.Instrument1 == \"drums\").Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "285ae0ac23c138c574b12ff5ca9d151794b07f62ea80401b7d1216a57838e9a7",
    "sql": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Le Pop\"",
    "linq": "context.Instruments.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Le Pop\").Select(row => new { row.T1.Instrument1 }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f4fed5531a4958804974b338c27d6949c49eb1d1198d708a6c0e0e038872c195",
    "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Le Pop\"",
    "linq": "context.Instruments.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Le Pop\").Select(row => row.T1.Instrument1).Distinct().Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7a17b352eaa022a5f0773a1e8cb4cca2f2b7b1bc8803fa00ae51e9dcd6213511",
    "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = \"Heilo\"",
    "linq": "context.Instruments.Join(context.Bands, T1 => T1.BandmateId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Lastname == \"Heilo\").Select(row => row.T1.Instrument1).Distinct().Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c434c926ab9b8680cd432dae13c32c41a67cf33f5b999183cfa3a43a7d56dbd7",
    "sql": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = \"Heilo\"",
    "linq": "context.Instruments.Join(context.Bands, T1 => T1.BandmateId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Lastname == \"Heilo\").Select(row => new { row.T1.Instrument1 }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8287e7791d9b6ed85a665630c8772f7c450408cabcc5b342fe4ab03d5bb64208",
    "sql": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SongId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Title }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c9374b1e618ce080082e37e3b7a4a2e6497e9e814094cb67c9734c9b4c0c51c7",
    "sql": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Vocals.GroupBy(row => new { row.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4858e122c70efe1b812b538492313ca2d5378679593ab8126a1f869a2bdd11bf",
    "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE lastname = \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Vocals.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Lastname == \"Heilo\").GroupBy(row => new { row.T1.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6441f4bc9a6ea18a61bb9a9fa561dde77a34f3adab07e6ba21dc9e0db4b3078a",
    "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Le Pop\"",
    "linq": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Le Pop\").Select(row => new { row.T1.Type }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8b0a00e093fdb02bffa41587c1291219f327f483e2bb1159be404bfd308c1d64",
    "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Demon Kitty Rag\"",
    "linq": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Demon Kitty Rag\").Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "505697de5a142c8fff9b460e0f696b04734973424ebe3668e0cc13d691088eeb",
    "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = \"lead\"",
    "linq": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Type == \"lead\").Select(row => row.T2.Title).Distinct().Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "73319baa5f3fbbb6ec90e78c0a8e8852a0c28d72475b95f1a3f03dc0475bdc0c",
    "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = \"Solveig\" AND T2.title = \"A Bar In Amsterdam\"",
    "linq": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Join(context.Bands, joined => joined.T1.Bandmate, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Firstname == \"Solveig\" && row.T2.Title == \"A Bar In Amsterdam\").Select(row => new { row.T1.Type }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b67f94429dce9bdb01f883791af7c4a37a056991e9ccdafc8b7172d4c9c1eeb2",
    "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"lead\"",
    "linq": "context.Vocals.Join(context.Songs, t1 => t1.SongId, t2 => t2.SongId, (t1, t2) => new { t1, t2 }).Select(row => row.t2.Title).Distinct().Except(context.Vocals.Join(context.Songs, t1 => t1.SongId, t2 => t2.SongId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Type == \"lead\").Select(row => row.t2.Title)).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "76f47faf2594f2c4f3dae1207a088135b0dd4163306f953ead1b3f4f87252173",
    "sql": "SELECT DISTINCT TYPE FROM vocals",
    "linq": "context.Vocals.Select(row => new { row.Type }).Distinct().ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "970c502e23386313b8d52c8ff8c9169c1c52df3638d558227553ea0033f584ac",
    "sql": "SELECT * FROM Albums WHERE YEAR = 2010",
    "linq": "context.Albums.Where(row => row.Year == 2010).Select(row => new { row.Aid, row.Title, row.Year, row.Label, row.Type }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "befc59ec50ea4cf847f0a4f66bdb9eb3979840e9c4f97725dcae24565a2406f7",
    "sql": "SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = \"Le Pop\"",
    "linq": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Title == \"Le Pop\").Select(row => new { row.T2.Firstname, row.T2.Lastname }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4b85d890ce491738be75e566914d344139a4bc1045bb744eb6c0b0bb1c75e611",
    "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = \"Heilo\" AND T3.title = \"Badlands\"",
    "linq": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Instruments, joined => new { Pair1 = joined.T3.SongId, Pair2 = joined.T2.Id }, T4 => new { Pair1 = joined.T4.SongId, Pair2 = joined.T4.BandmateId }, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T2.Lastname == \"Heilo\" && row.T3.Title == \"Badlands\").Select(row => new { row.T4.Instrument1 }).ToList();",
    "db_name": "music_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,366): error CS0103: The name 'joined' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.42",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "78a1d632a45511bbe171213d902e09f5fb2ad71933537ca809a72d6e7aae7575",
    "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Badlands\"",
    "linq": "context.Instruments.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Badlands\").Select(row => row.T1.Instrument1).Distinct().Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "08d0801c4222967c6081ea06ae50dcf3db09c35d5221592f137141a0335ae059",
    "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Badlands\"",
    "linq": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Badlands\").Select(row => new { row.T1.Type }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f1847ea9dd7ed3a9f31560bb351309044af872d4be60404e3e2cff378e6a0065",
    "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Le Pop\"",
    "linq": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Le Pop\").Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "46645a3f768602358fe1ee60d2366e79a1633ec70c54ae39da53d4be238988a8",
    "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = \"shared\"",
    "linq": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Type == \"shared\").Select(row => row.T2.Title).Distinct().Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "42e58e038386d598f68bc9ec497e4643ed7335a14d3f6f6f1eead0577c5ac5b5",
    "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"back\"",
    "linq": "context.Vocals.Join(context.Songs, t1 => t1.SongId, t2 => t2.SongId, (t1, t2) => new { t1, t2 }).Select(row => row.t2.Title).Distinct().Except(context.Vocals.Join(context.Songs, t1 => t1.SongId, t2 => t2.SongId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Type == \"back\").Select(row => row.t2.Title)).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a6f051b3d56fa4ae04dcf48986b6e26ea7f9b5c799494c83e755a255e8019fff",
    "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Vocals.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Firstname == \"Solveig\").GroupBy(row => new { row.T1.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "304fe1e5e67ff7d5eec0dfbf1da760da415ef197cb976a0ff3a3374b0c3bf7b9",
    "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.lastname = \"Heilo\" AND T2.title = \"Der Kapitan\"",
    "linq": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Join(context.Bands, joined => joined.T1.Bandmate, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Lastname == \"Heilo\" && row.T2.Title == \"Der Kapitan\").Select(row => new { row.T1.Type }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "196efa104431ea7ad6813fb0675d52c435e8f718aa4d3fdee87539e4160daba8",
    "sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate = t2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Performances.Join(context.Bands, t1 => t1.Bandmate, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Join(context.Songs, joined => joined.t1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.t1, joined.t2, T3 }).GroupBy(row => new { row.t2.Firstname }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Firstname }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cd59407939f0050b5eea09bd0134716a1872c170c3b97e0a4a76783193302f0f",
    "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Vocals.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Firstname == \"Marianne\").GroupBy(row => new { row.T1.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9215e79eef40ab3530b701e798a6dadb5c0ab19734b6c8e61d08cbb6f2a2f270",
    "sql": "SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = \"Der Kapitan\" AND T1.StagePosition = \"back\"",
    "linq": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Title == \"Der Kapitan\" && row.T1.StagePosition == \"back\").Select(row => new { row.T2.Firstname, row.T2.Lastname }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3a5c68880253b95f059d22aa4bf8b83a6a0a4f50d0f19c98970e736c3e9271f8",
    "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE T1.title = \"A Kiss Before You Go: Live in Hamburg\"",
    "linq": "context.Albums.Join(context.Tracklists, T1 => T1.Aid, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T2.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Title == \"A Kiss Before You Go: Live in Hamburg\").Select(row => new { row.T3.Title }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "60498632552a843eaf4e04f88d39e97a08479a9df34cdef6b03539d4d0eed725",
    "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.label = \"Universal Music Group\"",
    "linq": "context.Albums.Join(context.Tracklists, T1 => T1.Aid, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T2.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Label == \"Universal Music Group\").Select(row => new { row.T3.Title }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0d5953f67428fb8d741dfb0b01c46a0224304f5e00c319541c93c7b4d91f698b",
    "sql": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.type = \"Studio\"",
    "linq": "context.Albums.Join(context.Tracklists, T1 => T1.Aid, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T2.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Type == \"Studio\").Select(row => row.T3.Title).Distinct().Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d804e227ae187b72de20308b19b337b7aca9cb1f842c2b047b161be5a33d09b8",
    "sql": "SELECT count(*) FROM climber",
    "linq": "context.Climbers.Count();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d160ae3ead0926ada1c4ce39b331bb1da6c52714967e116aebcfc551e263d1d8",
    "sql": "SELECT Name FROM climber ORDER BY Points DESC",
    "linq": "context.Climbers.OrderByDescending(row => row.Points).Select(row => new { row.Name }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bf93377dd4965b1435581de9639f9c36e86c1efdff07280a54cb6550bb9bc033",
    "sql": "SELECT Name FROM climber WHERE Country != \"Switzerland\"",
    "linq": "context.Climbers.Where(row => row.Country != \"Switzerland\").Select(row => new { row.Name }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e74119b584383836e6b2f2df3f6bc7e0bbbc3fcfa05663be700816231ffe223",
    "sql": "SELECT max(Points) FROM climber WHERE Country = \"United Kingdom\"",
    "linq": "context.Climbers.Where(row => row.Country == \"United Kingdom\").Select(row => row.Points).Max();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "84489f9b0dec2e96665e5a81c1facebde5a0f8074187c4397e7dea852d6f610a",
    "sql": "SELECT COUNT(DISTINCT Country) FROM climber",
    "linq": "context.Climbers.Select(row => row.Country).Distinct().Count();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b79077687db59246e9b45d938b9cf5d391866cc94a9f8ef5737b1e4aac1db90b",
    "sql": "SELECT Name FROM mountain ORDER BY Name ASC",
    "linq": "context.Mountains.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8efe6d0bdaf1041b95779eae2b38dc6d04af889881ce11f1bb4f8e6c663bcf64",
    "sql": "SELECT Country FROM mountain WHERE Height > 5000",
    "linq": "context.Mountains.Where(row => row.Height > 5000).Select(row => new { row.Country }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dab6757b1d0d2a5467dd9776bd31743f6f45f19482b37cfe5b6551088850f2ac",
    "sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
    "linq": "context.Mountains.OrderByDescending(row => row.Height).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8d11e048d13c2595ecb586c8d2531efe10d071816f2d4c5800c51ba5b4af3580",
    "sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3",
    "linq": "context.Mountains.OrderByDescending(row => row.Prominence).Select(row => new { row.Range }).Distinct().Take(3).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8b98d1d0d2b8fb6c742790eb1ce86c564ba49af1f06e06fc4c08c2db291d389d",
    "sql": "SELECT T1.Name , T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
    "linq": "context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Select(row => new { T1Name = row.T1.Name, T2Name = row.T2.Name }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1a9fea7f7ce10718b1a8cd0ebb5839c5037123b4dc014e228e67c76f8ead0d1a",
    "sql": "SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
    "linq": "context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name, row.T2.Height }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ee301dfc1dfc730d53b476e4c9452c88234858fa36440c931e2204badb97a9ac",
    "sql": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1",
    "linq": "context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Points).Select(row => new { row.T2.Height }).Take(1).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a330b260ba36d77dd213f7324b1b5526e398d31bc5c956a4e870eff4c99c6c05",
    "sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = \"West Germany\"",
    "linq": "context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Country == \"West Germany\").Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f51f62d69f83adfc6e2982a098527f1fdaa21d8d48f8135f2147438a0abe6cd6",
    "sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = \"Uganda\"",
    "linq": "context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country == \"Uganda\").Select(row => new { row.T1.Time }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "173c12d00373b9585e07e00dc177cd14a81cca0140d4cb8d14034879f021b4b0",
    "sql": "SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "linq": "context.Climbers.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "32f3543611feb019e85849083a05fc4befe246373daa72b659bf54ded03123ee",
    "sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1",
    "linq": "context.Mountains.GroupBy(row => new { row.Country }).Where(group => group.Count() > 1).Select(group => new { group.Key.Country }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "23416cf12d9525f56ac40bebf25d067d3b736d968b2101398a1be8c7845098f3",
    "sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
    "linq": "context.Mountains.Where(row => !context.Climbers.Select(row => row.MountainId).Contains(row.MountainId)).Select(row => new { row.Name }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9c080c9cd29686e8550b01af76b6332bacd2fc3897d24abad8091fdbd948d095",
    "sql": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200",
    "linq": "context.Mountains.Where(row => row.Height > 5600).Select(row => row.Country).Intersect(context.Mountains.Where(row => row.Height < 5200).Select(row => row.Country)).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "12490f6074c21f3aaa55c034a9b40bb496f469ae9a360809c9880fe647ac01de",
    "sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Mountains.GroupBy(row => new { row.Range }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Range }).Take(1).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8d654745b8032cdb4b49830ea59c525793ec618ac1b194eaaf1a4f31d819cd60",
    "sql": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000",
    "linq": "context.Mountains.Where(row => row.Height > 5000 || row.Prominence > 1000).Select(row => new { row.Name }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "16f0845507111bf9e940a960d313a36e90ad310f2ba590c3f55aea97fdee417b",
    "sql": "SELECT count(*) FROM event",
    "linq": "context.Events.Count();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cd67925b2a0a42fafc1717b8774cf9d494e5d156fdaf61ef9d87f06e07bdcb62",
    "sql": "SELECT name FROM event ORDER BY YEAR DESC",
    "linq": "context.Events.OrderByDescending(row => row.Year).Select(row => new { row.Name }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6ecfd86c2de6be91b9c588c6f83667d80752fb974fd2a4daa93f1cd04bff3230",
    "sql": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
    "linq": "context.Events.OrderByDescending(row => row.Year).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ff88f06ece0c117ef90bfa4d375dc5aafa1edd459d2c92c5414d5e134b3e5163",
    "sql": "SELECT count(*) FROM stadium",
    "linq": "context.Stadia.Count();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c08d27d0317d94226c71d9fc2a6d35b682944463da39f1d66788318be702d827",
    "sql": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1",
    "linq": "context.Stadia.OrderByDescending(row => row.Capacity).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "80610e5bb0b6c23ec7c68e5825ffb836785fd316e9720243a5c7d8ca08036b3f",
    "sql": "SELECT name FROM stadium WHERE capacity < (SELECT avg(capacity) FROM stadium)",
    "linq": "context.Stadia.Where(row => row.Capacity < context.Stadia.Select(row => row.Capacity).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cd263b5a9273bb147ac64a02f83eba7a1df7d167d564c9c59075378dbd295922",
    "sql": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Stadia.GroupBy(row => new { row.Country }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Country }).Take(1).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c1c4ec496ded70a445607bfdabbe956425f9139dcd032f6815012364ba199f70",
    "sql": "SELECT country FROM stadium GROUP BY country HAVING count(*) <= 3",
    "linq": "context.Stadia.GroupBy(row => new { row.Country }).Where(group => group.Count() <= 3).Select(group => new { group.Key.Country }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e725755ce4c47e5f8ec3379092d78659de0796fcffa27f8b58d47549923b9444",
    "sql": "SELECT country FROM stadium WHERE capacity > 60000 INTERSECT SELECT country FROM stadium WHERE capacity < 50000",
    "linq": "context.Stadia.Where(row => row.Capacity > 60000).Select(row => row.Country).Intersect(context.Stadia.Where(row => row.Capacity < 50000).Select(row => row.Country)).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e4395de9da6baba323070940f3ae2876cf6fe72cda0a639ab5bed9c49c23145",
    "sql": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year < 2006",
    "linq": "context.Stadia.Where(row => row.OpeningYear < 2006).Select(row => row.City).Distinct().Count();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a6efc9aa99153d2d76067b70120ab8aa307f15c291e163d27e66c0de759258a2",
    "sql": "SELECT country , count(*) FROM stadium GROUP BY country",
    "linq": "context.Stadia.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0638a135e16a0adf44c97b841851e657254552d6d1e9b2c4b3f0c4c1bf3069c9",
    "sql": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year > 2006",
    "linq": "context.Stadia.Select(row => row.Country).Except(context.Stadia.Where(row => row.OpeningYear > 2006).Select(row => row.Country)).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9a4856a5082b733be33867bda58af8deb4c21ac139981ed0df9520c10f6d318b",
    "sql": "SELECT count(*) FROM stadium WHERE country != 'Russia'",
    "linq": "context.Stadia.Where(row => row.Country != \"Russia\").Count();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1e4767ae152ef87470f3be0ac1e39daee25e8be5b9e246e3147a7dc156592e60",
    "sql": "SELECT name FROM swimmer ORDER BY meter_100",
    "linq": "context.Swimmers.OrderBy(row => row.Meter100).Select(row => new { row.Name }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0101dd1fdd13bb995c78d5742c2aca8e80ca410b3d782522c34205d95be98c18",
    "sql": "SELECT count(DISTINCT nationality) FROM swimmer",
    "linq": "context.Swimmers.Select(row => row.Nationality).Distinct().Count();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "308828b63c2ce64cfd70360f187776d97d772267259a1523825df0b3d4d51219",
    "sql": "SELECT nationality , count(*) FROM swimmer GROUP BY nationality HAVING count(*) > 1",
    "linq": "context.Swimmers.GroupBy(row => new { row.Nationality }).Select(group => new { group.Key.Nationality, Count = group.Count() }).Where(group => group.Count > 1).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0ffd8bff86b875fda86fbed09ea1234eab988ac9dcdaa443fd985474ec4db136",
    "sql": "SELECT meter_200 , meter_300 FROM swimmer WHERE nationality = 'Australia'",
    "linq": "context.Swimmers.Where(row => row.Nationality == \"Australia\").Select(row => new { row.Meter200, row.Meter300 }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "531aafef5e1cb8971223764f8dbf6a0bdae22296bdbb5609f21e096476786b1e",
    "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win'",
    "linq": "context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Result == \"Win\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4ab5842c0fd07840e88c9aed477c49f109289e495617fc6f2635591579c76d33",
    "sql": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Stadia.Join(context.Events, t1 => t1.Id, t2 => t2.StadiumId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.StadiumId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.Name }).Take(1).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "468ed96694e266d18b595a5560df068bb98774b729ba001f6a6aeb447e242b65",
    "sql": "SELECT t1.name , t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id WHERE t2.name = 'World Junior'",
    "linq": "context.Stadia.Join(context.Events, t1 => t1.Id, t2 => t2.StadiumId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Name == \"World Junior\").Select(row => new { row.t1.Name, row.t1.Capacity }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b534e74809592ea2145f138273c2345062239292eff857b673d6856996bec731",
    "sql": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)",
    "linq": "context.Stadia.Where(row => !context.Events.Select(row => row.StadiumId).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f3fec111be4247aa0b8a96a2c6705aa0d881a1da12e2f54f0cecd4fb4d3bf125",
    "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.SwimmerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.Name }).Take(1).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4187a85266257eea3d5545234f272201096233bf84f0e1232eb6bbb52ffe222a",
    "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*) >= 2",
    "linq": "context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.SwimmerId }).Where(group => group.Count() >= 2).Select(group => new { group.First().t1.Name }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6adb36316e382553abbc4be2721696671a52aaf15335543356e3fa57ef7100f4",
    "sql": "SELECT t1.name , t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY t2.swimmer_id HAVING count(*) > 1",
    "linq": "context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Result == \"Win\").GroupBy(row => new { row.t2.SwimmerId }).Where(group => group.Count() > 1).Select(group => new { group.First().t1.Name, group.First().t1.Nationality }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3ace4ae1845b1fd2dd7ecd1b33990e18a67a488c0cf46efbb5c7ee270b152065",
    "sql": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)",
    "linq": "context.Swimmers.Where(row => !context.Records.Select(row => row.SwimmerId).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2d2a01369c4af1539883ff6aaa8151b1ca1f59732f54d6704f1cb06fe881c969",
    "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Loss'",
    "linq": "context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Result == \"Win\").Select(row => row.t1.Name).Intersect(context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Result == \"Loss\").Select(row => row.t1.Name)).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "235f86bcdde74295282ff03d934cd7a935916c10b4763be0128d25ece6d9a919",
    "sql": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia'",
    "linq": "context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).Join(context.Events, joined => joined.t2.EventId, t3 => t3.Id, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Stadia, joined => joined.t3.StadiumId, t4 => t4.Id, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t1.Nationality == \"Australia\").Select(row => new { row.t4.Name }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cabd766cad5debeef0d516ce98797f5fe955c3d85e542e1700504b54dae4f2fa",
    "sql": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id = t2.id JOIN stadium AS t3 ON t3.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Records.Join(context.Events, t1 => t1.EventId, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Join(context.Stadia, joined => joined.t2.StadiumId, t3 => t3.Id, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t2.StadiumId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t3.Name }).Take(1).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "26704e89e2aad0a7e5632b5a9086673ed7f2f8c07229d53f5ade320e9d4c4027",
    "sql": "SELECT * FROM swimmer",
    "linq": "context.Swimmers.Select(row => new { row.Id, row.Name, row.Nationality, row.Meter100, row.Meter200, row.Meter300, row.Meter400, row.Meter500, row.Meter600, row.Meter700, row.Time }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "733856dfa8452f340457c2b409c2a6f97bcba69b5418696863185eaaf9d4c434",
    "sql": "SELECT avg(capacity) FROM stadium WHERE opening_year = 2005",
    "linq": "context.Stadia.Where(row => row.OpeningYear == 2005).Select(row => row.Capacity).Average();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e02e1db7059f24a901de3147c059da2445b90bc27675bb1caa78135baecbd54d",
    "sql": "SELECT customer_name FROM customers",
    "linq": "context.Customers.Select(row => new { row.CustomerName }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "723f6a1567a5ed1ef1fb0e3430600a13aafa3d7500faf85a789806af572d3722",
    "sql": "SELECT count(*) FROM customers",
    "linq": "context.Customers.Count();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8962c63639edfa252bdaaec579aec30a390e9ed248fb745703cc2cad36d0d9c6",
    "sql": "SELECT avg(order_quantity) FROM order_items",
    "linq": "context.OrderItems.Select(row => row.OrderQuantity).ToList().Select(value => double.Parse(value)).Average();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bd7053624f81f1d9427959effddb15e3899249a7211df51ecef6f8e5d186feee",
    "sql": "SELECT customer_name FROM customers WHERE payment_method = \"Cash\"",
    "linq": "context.Customers.Where(row => row.PaymentMethod == \"Cash\").Select(row => new { row.CustomerName }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d66c6ceac4244a8908912551836c4852c0276c14ff6ff4ed5b62506b338b5cdd",
    "sql": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
    "linq": "context.Customers.Where(row => row.CustomerId >= 10 && row.CustomerId <= 20).Select(row => new { row.DateBecameCustomer }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ec34ec7229928882ef1d6c6306e58fc38e93954a5666430f6d72102e50ee1148",
    "sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Customers.GroupBy(row => new { row.PaymentMethod }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PaymentMethod }).Take(1).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ce8675a9e9f24fe314d23ca13957086b74974258bb0a322b0dde797944ca35ef",
    "sql": "SELECT customer_name FROM customers WHERE payment_method = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)",
    "linq": "context.Customers.Where(row => row.PaymentMethod == context.Customers.GroupBy(row => new { row.PaymentMethod }).OrderByDescending(group => group.Count()).Select(group => group.Key.PaymentMethod).Take(1).First()).Select(row => new { row.CustomerName }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fcc0b70ca429d4fcf549e6d9158d0c5e144bf26f15512476c9b3b4a8a913ca88",
    "sql": "SELECT DISTINCT payment_method FROM customers",
    "linq": "context.Customers.Select(row => new { row.PaymentMethod }).Distinct().ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fbdf94f407172327f25a983536134530db15f3c3364a89010d7c6180e779c8da",
    "sql": "SELECT DISTINCT product_details FROM products",
    "linq": "context.Products.Select(row => new { row.ProductDetails }).Distinct().ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ab4f1b8f70c5760d2ab9fadecc1e402283775b580532d8e7fc2897c6483dd793",
    "sql": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"",
    "linq": "context.Customers.Where(row => EF.Functions.Like(row.CustomerName, \"%Alex%\")).Select(row => new { row.CustomerName }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7e1f586d2ebc7f6eaf974fe49e3a8a6729604db69896c424a75493e438581a00",
    "sql": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"",
    "linq": "context.Products.Where(row => EF.Functions.Like(row.ProductDetails, \"%Latte%\") || EF.Functions.Like(row.ProductDetails, \"%Americano%\")).Select(row => new { row.ProductDetails }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dc31a0ba4bfc6a404e19a3f527d24946cfee93c82d76b7f66e6ebea694d8bf08",
    "sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.customer_name = \"Maudie Kertzmann\"",
    "linq": "context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.CustomerName == \"Maudie Kertzmann\").Select(row => new { row.t3.AddressContent }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "910df5cfd967ac83e9570d79614466aac2acbd1988cf766c1ea90467bc7bd69d",
    "sql": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = \"Lake Geovannyton\"",
    "linq": "context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.City == \"Lake Geovannyton\").Count();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7a9bd62a5f27bc9b0ce69b6a51bf91df4b67462ae88242aa594076759cde9167",
    "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = \"Colorado\"",
    "linq": "context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.StateProvinceCounty == \"Colorado\").Select(row => new { row.t1.CustomerName }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b7f752bdf62c20be210d65fc4768c10cf3eaea334bc7f88326f4af01b4bf91bd",
    "sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id)",
    "linq": "context.Addresses.Where(row => !context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Select(row => row.t3.City).Distinct().Contains(row.City)).Select(row => new { row.City }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "38d6beeb305c9208d78696a213005d3a3e0deabed65c29c83815ac58f3aa9136",
    "sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.City }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.City }).Take(1).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "703e4a7313919c952ffbea104cb46dd0879c322e1bb227509308c40c8b1481b4",
    "sql": "SELECT DISTINCT city FROM addresses",
    "linq": "context.Addresses.Select(row => new { row.City }).Distinct().ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fab02421f6b67761c1a6035edd340560ad81816a65de3d74a051c9dd7f3db9e6",
    "sql": "SELECT city FROM addresses WHERE zip_postcode = 255",
    "linq": "context.Addresses.Where(row => row.ZipPostcode == \"255\").Select(row => new { row.City }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0c65f6812f64adc2b8c5af81b1b5ea77fb94b8ce080c45effc44811784e9a950",
    "sql": "SELECT state_province_county , country FROM addresses WHERE zip_postcode LIKE \"4%\"",
    "linq": "context.Addresses.Where(row => EF.Functions.Like(row.ZipPostcode, \"4%\")).Select(row => new { row.StateProvinceCounty, row.Country }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2a40b3b9e7ca067a2327306f9531ee667c55ef994e10ce5361142b0d36589628",
    "sql": "SELECT country FROM addresses GROUP BY country HAVING count(address_id) > 4",
    "linq": "context.Addresses.GroupBy(row => new { row.Country }).Where(group => group.Count(row => row.AddressId != null) > 4).Select(group => new { group.Key.Country }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c28e956518e53e4303fb323304bd61794cd918ff8698d3f8edeaaca2445a1a01",
    "sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id) < 5",
    "linq": "context.CustomerContactChannels.GroupBy(row => new { row.ChannelCode }).Where(group => group.Count(row => row.CustomerId != null) < 5).Select(group => new { group.Key.ChannelCode }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "75098d7703e899da33417b1106a1c0c941afc51c705233fccceef193449fe3b9",
    "sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\"",
    "linq": "context.Customers.Join(context.CustomerContactChannels, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.CustomerName == \"Tillman Ernser\").Select(row => new { row.t2.ChannelCode }).Distinct().ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a4fc0168f2bd8037e608875f35ae74c60428a6b3a7c0647a9e70ffc12b42f44d",
    "sql": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\"",
    "linq": "context.Customers.Join(context.CustomerContactChannels, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.CustomerName == \"Tillman Ernser\").Select(row => row.t2.ActiveToDate).Max();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "06d3062ff901e99c2737b05383c689fc96da061bcf57c473af899aa4531bb350",
    "sql": "SELECT t1.customer_name , t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email'",
    "linq": "context.Customers.Join(context.CustomerContactChannels, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.ChannelCode == \"Email\").Select(row => new { row.t1.CustomerName, row.t2.ActiveFromDate }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "511ea3304b3b3a8b6ee87ee6c6046db470825e372372bb72282ba184fbb1f84a",
    "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t3.order_quantity = ( SELECT max(order_quantity) FROM order_items)",
    "linq": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.OrderQuantity == context.OrderItems.Select(row => row.OrderQuantity).Max()).Select(row => new { row.t1.CustomerName }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d66fe2b5aa3870dbf96b250358fceaad03b29c3a47f23122d2f4114d99e02e33",
    "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
    "linq": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.CustomerName }).OrderByDescending(group => group.Sum(row => row.t3.OrderQuantity)).Select(group => new { group.Key.CustomerName }).Take(1).ToList();",
    "db_name": "customers_and_addresses",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,339): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.47",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e08f935e4b14df72d21c31247344d2fb6c3748c274a5b53471b771931d67d00",
    "sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
    "linq": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.CustomerName }).OrderBy(group => group.Sum(row => row.t3.OrderQuantity)).Select(group => new { group.First().t1.PaymentMethod }).Take(1).ToList();",
    "db_name": "customers_and_addresses",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,329): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.62",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4fd0b6f6253681e7bf209bc0b887dbdee6213aceadb96dc3bec4e61c0af0927b",
    "sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\"",
    "linq": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.CustomerName == \"Rodrick Heaney\").Select(row => row.t3.ProductId).Distinct().Count();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e90440fdf7126dc3a33e59b5a6ad91e6b6fe8cc3ca771b072ad5e04d17a8dd04",
    "sql": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\"",
    "linq": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.CustomerName == \"Rodrick Heaney\").Select(row => row.t3.OrderQuantity).ToList().Select(value => double.Parse(value)).Sum();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c68e60516fc5196e3635ee0569fe1d25af1546124f0c642f25a32c5ddc5328cd",
    "sql": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status = \"Cancelled\"",
    "linq": "context.CustomerOrders.Where(row => row.OrderStatus == \"Cancelled\").Select(row => row.CustomerId).Distinct().Count();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "12cd287b68a3c2cd34c4b9b2be737ad09487dc46f3469938360dd762ba266cab",
    "sql": "SELECT count(*) FROM customer_orders WHERE order_details = \"Second time\"",
    "linq": "context.CustomerOrders.Where(row => row.OrderDetails == \"Second time\").Count();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "30fad5b324df218a5d316654cb34f99db8d81927f2ea71ad9197aecd8312a2a8",
    "sql": "SELECT t1.customer_name , t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\"",
    "linq": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.OrderStatus == \"Delivered\").Select(row => new { row.t1.CustomerName, row.t2.OrderDate }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8c35a9cd4e3d80ca9a8d8b922ee667c8d60c306a54a5b7f9bc220053f4ce1e05",
    "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_status = \"Cancelled\"",
    "linq": "context.CustomerOrders.Join(context.OrderItems, t1 => t1.OrderId, t2 => t2.OrderId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.OrderStatus == \"Cancelled\").Select(row => row.t2.OrderQuantity).ToList().Select(value => double.Parse(value)).Sum();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "497c14bb0373db82c7b21de1e702a3a6650de151ff2d246b724b32f064df0e71",
    "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_date < \"2018-03-17 07:13:53\"",
    "linq": "context.CustomerOrders.Join(context.OrderItems, t1 => t1.OrderId, t2 => t2.OrderId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.OrderDate < \"2018-03-17 07:13:53\").Select(row => row.t2.OrderQuantity).ToList().Select(value => double.Parse(value)).Sum();",
    "db_name": "customers_and_addresses",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,137): error CS0019: Operator '<' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.52",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eb9982448f8abae41d533ad35d0eaaac021386b92924ce2aae89a34064edd7d6",
    "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
    "linq": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t2.OrderDate).Select(row => new { row.t1.CustomerName }).Take(1).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5aad3aa9ab34f8ccba31cace52d1f2b9b434ce5e9b3318f0e25a146ef58f97a4",
    "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.OrderItems.Join(context.Products, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ProductId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t2.ProductDetails }).Take(1).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d020e8d54bb25beec59a2e94595e296df5235665f8fc7d700bb214b9a49bbda6",
    "sql": "SELECT t2.product_details , t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1",
    "linq": "context.OrderItems.Join(context.Products, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ProductId }).OrderBy(group => group.Sum(row => row.t1.OrderQuantity)).Select(group => new { group.First().t2.ProductDetails, group.First().t2.ProductId }).Take(1).ToList();",
    "db_name": "customers_and_addresses",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,197): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.57",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "22354f9b02f1799394a79da9ba3480746dda05ab3419614d9b12c0c8993a8038",
    "sql": "SELECT address_content FROM addresses WHERE city = \"East Julianaside\" AND state_province_county = \"Texas\" UNION SELECT address_content FROM addresses WHERE city = \"Gleasonmouth\" AND state_province_county = \"Arizona\"",
    "linq": "context.Addresses.Where(row => row.City == \"East Julianaside\" && row.StateProvinceCounty == \"Texas\").Select(row => row.AddressContent).Union(context.Addresses.Where(row => row.City == \"Gleasonmouth\" && row.StateProvinceCounty == \"Arizona\").Select(row => row.AddressContent)).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0614adc145899898cec34108452ea02ad73466d84dff5ba4ec0332bd62bbcff9",
    "sql": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'",
    "linq": "context.Customers.Where(row => row.PaymentMethod != \"Cash\").Select(row => new { row.CustomerName }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1bf88b28d1a1625641deb2bd549196dedf8bc2db3e0fe81106a5e8a5ab193d31",
    "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte'",
    "linq": "context.Customers.Select(row => row.CustomerName).Except(context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Products, joined => joined.t3.ProductId, t4 => t4.ProductId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ProductDetails == \"Latte\").Select(row => row.t1.CustomerName)).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "185724979b15b5c7465f9d63ed662f70d3fb1c7a7ace197c55a5d25fec6be7c7",
    "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id",
    "linq": "context.Customers.Select(row => row.CustomerName).Except(context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Select(row => row.t1.CustomerName)).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d8a80c25797b2d7da7d0e57e3914aabe71794f066e4c4d8f4e6277a0dd272c8d",
    "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Americano'",
    "linq": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Products, joined => joined.t3.ProductId, t4 => t4.ProductId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ProductDetails == \"Latte\").Select(row => row.t1.CustomerName).Intersect(context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Products, joined => joined.t3.ProductId, t4 => t4.ProductId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ProductDetails == \"Americano\").Select(row => row.t1.CustomerName)).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "47ef294d3eb65ecbc8dbd25545fc7f83340fd649f1739c9877f60e3a14637af2",
    "sql": "SELECT count(*) FROM INVESTORS",
    "linq": "context.Investors.Count();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "74b8fec6c6380da0013b71d1ae8db643e98debfbc9e0fff6d2aab20241ee14ae",
    "sql": "SELECT Investor_details FROM INVESTORS",
    "linq": "context.Investors.Select(row => new { row.InvestorDetails }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2f49fe04cb42286c6dc2469e83851c756591ed52e0f3e9a7d835ea9cc96645ac",
    "sql": "SELECT DISTINCT lot_details FROM LOTS",
    "linq": "context.Lots.Select(row => new { row.LotDetails }).Distinct().ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "52e8b37aca67ab87853c5c30619f47d16f166d4900be00a3d7606a26ff33204b",
    "sql": "SELECT max(amount_of_transaction) FROM TRANSACTIONS",
    "linq": "context.Transactions.Select(row => (double) row.AmountOfTransaction).Max();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "65360b21fae7dc19ab7a0b6ad14badcbcc5a38caf1515a6b6006bd9bb89a8dfc",
    "sql": "SELECT date_of_transaction , share_count FROM TRANSACTIONS",
    "linq": "context.Transactions.Select(row => new { row.DateOfTransaction, row.ShareCount }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f5276ea9f08e720f7c35b913b35552ce3cc35e2265e799b1d48b967c42b492dc",
    "sql": "SELECT sum(share_count) FROM TRANSACTIONS",
    "linq": "context.Transactions.Select(row => row.ShareCount).ToList().Select(value => double.Parse(value)).Sum();",
    "db_name": "tracking_share_transactions",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6bbeb88bbad6cb96a6a044594ff0e8abc34c1767337c78db2bbe1c4963c3cde1",
    "sql": "SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code = 'PUR'",
    "linq": "context.Transactions.Where(row => row.TransactionTypeCode == \"PUR\").Select(row => new { row.TransactionId }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "162813570f71bfd00e2a708faf32d42acb96a487743e74e92c54aa1c076a0839",
    "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"",
    "linq": "context.Transactions.Where(row => row.TransactionTypeCode == \"SALE\").Select(row => new { row.DateOfTransaction }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5ca7a338938d0dbea5eed194dbdf60db112979bb403108b52f031ef669625e56",
    "sql": "SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"",
    "linq": "context.Transactions.Where(row => row.TransactionTypeCode == \"SALE\").Select(row => (double) row.AmountOfTransaction).Average();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c37d1ae1ca83fc4c4c3509ae97a2a7d5a2d46e104a8db5eb0e4fae621fa3b282",
    "sql": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code = \"PUR\"",
    "linq": "context.RefTransactionTypes.Where(row => row.TransactionTypeCode == \"PUR\").Select(row => new { row.TransactionTypeDescription }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8050cf27faa381404f7f6a8a70ed80aa6603428b21ca3ebd8242e71982bd7c0c",
    "sql": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"PUR\" AND share_count > 50",
    "linq": "context.Transactions.Where(row => row.TransactionTypeCode == \"PUR\" && row.ShareCount > \"50\").Select(row => (double) row.AmountOfTransaction).Min();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,82): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.45",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "da70f98406a5a5ec0f44a8b856363b2add2a30c1f7fe5783cb728afabd2d15c0",
    "sql": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction < 10000",
    "linq": "context.Transactions.Where(row => row.AmountOfTransaction < 10000).Select(row => row.ShareCount).Max();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f39678dc34a2884b904f134ab6f8933813576317819e88fa3cd7130568d8bf13",
    "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000",
    "linq": "context.Transactions.Where(row => row.ShareCount > \"100\" || row.AmountOfTransaction > 1000).Select(row => new { row.DateOfTransaction }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,46): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e69cf41606bd85cbfe13a3c0acee88ca436bc92fd963f37e61a257590e0e43cd",
    "sql": "SELECT T1.transaction_type_description , T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code WHERE T2.share_count < 10",
    "linq": "context.RefTransactionTypes.Join(context.Transactions, T1 => T1.TransactionTypeCode, T2 => T2.TransactionTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ShareCount < \"10\").Select(row => new { row.T1.TransactionTypeDescription, row.T2.DateOfTransaction }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,168): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.45",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a4dc89eda5a3d55f46f4f1078bc37538748bf5b5ed6e76c252670a81df4dc6af",
    "sql": "SELECT T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100",
    "linq": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ShareCount > \"100\").Select(row => new { row.T1.InvestorDetails }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,140): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.47",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "670a5dda09a3a1349d120f58667c651b36a5d49003a63ab40012d1e25cbca9e5",
    "sql": "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS",
    "linq": "context.Transactions.Select(row => row.TransactionTypeCode).Distinct().Count();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "43982b2241b13f7b1197e54fc7a8fe9b8c3b1267f343657d9d26e2707df3abe8",
    "sql": "SELECT lot_details , investor_id FROM LOTS",
    "linq": "context.Lots.Select(row => new { row.LotDetails, row.InvestorId }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4210fab4f62aa3c51ff8bab8f890416d0963ac9b9f945f7f3e042d9fd73a7782",
    "sql": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\"",
    "linq": "context.Investors.Join(context.Lots, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.InvestorDetails == \"l\").Select(row => new { row.T2.LotDetails }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7fc6665685e4de7e0856e6897b532ebf0e34be7c3d6efe89ebfaad668e382f01",
    "sql": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000",
    "linq": "context.Purchases.Join(context.Transactions, T1 => T1.PurchaseTransactionId, T2 => T2.TransactionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AmountOfTransaction > 10000).Select(row => new { row.T1.PurchaseDetails }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "404583229825e8b8f8358f01f7f490df01013a6e5e468b724096f8fc09ffee8e",
    "sql": "SELECT T1.sales_details , T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction < 3000",
    "linq": "context.Sales.Join(context.Transactions, T1 => T1.SalesTransactionId, T2 => T2.TransactionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AmountOfTransaction < 3000).Select(row => new { row.T1.SalesDetails, row.T2.DateOfTransaction }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "79d6a32c32402788bf2d49d0752cc4a051bd89057ffa5ab45e7faaad47e5541d",
    "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE T3.share_count < 50",
    "linq": "context.Lots.Join(context.TransactionsLots, T1 => T1.LotId, T2 => T2.TransactionId, (T1, T2) => new { T1, T2 }).Join(context.Transactions, joined => joined.T2.TransactionId, T3 => T3.TransactionId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.ShareCount < \"50\").Select(row => new { row.T1.LotDetails }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,273): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.60",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a332366de1a7202c849abc61d3059a9d1e383656578eb60ed33cc1994b76c88f",
    "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE T3.share_count > 100 AND T3.transaction_type_code = \"PUR\"",
    "linq": "context.Lots.Join(context.TransactionsLots, T1 => T1.LotId, T2 => T2.TransactionId, (T1, T2) => new { T1, T2 }).Join(context.Transactions, joined => joined.T2.TransactionId, T3 => T3.TransactionId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.ShareCount > \"100\" && row.T3.TransactionTypeCode == \"PUR\").Select(row => new { row.T1.LotDetails }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,273): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.55",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "406d8675a8909c792997a91f842c8d3bee537a60779527cefd737774a9d32e1c",
    "sql": "SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
    "linq": "context.Transactions.GroupBy(row => new { row.TransactionTypeCode }).Select(group => new { group.Key.TransactionTypeCode, AverageAmountOfTransaction = group.Select(row => (double) row.AmountOfTransaction).Average() }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d19887a4d0f2c4681ed0fbcda4b65123e787a1d61659de9856f68efaf1e47f48",
    "sql": "SELECT transaction_type_code , max(share_count) , min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code",
    "linq": "context.Transactions.GroupBy(row => new { row.TransactionTypeCode }).Select(group => new { group.Key.TransactionTypeCode, MaxShareCount = group.Select(row => row.ShareCount).Max(), MinShareCount = group.Select(row => row.ShareCount).Min() }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9eaa5ea7bfd4a25b1275c88ffddbb988fb31137c0127aa878bdb4cee6a702d9c",
    "sql": "SELECT investor_id , avg(share_count) FROM TRANSACTIONS GROUP BY investor_id",
    "linq": "context.Transactions.GroupBy(row => new { row.InvestorId }).Select(group => new { group.Key.InvestorId, AverageShareCount = group.Select(row => row.ShareCount).Average() }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,136): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.82",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "63f53783e6417bad2720d6154c1dc0d35e5e63317bb2f8449971fd1703f1c967",
    "sql": "SELECT investor_id , avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)",
    "linq": "context.Transactions.GroupBy(row => new { row.InvestorId }).Select(group => new { group.Key.InvestorId, AverageShareCount = group.Select(row => row.ShareCount).Average() }).OrderBy(group => group.AverageShareCount).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,136): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.95",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7e7168f53229a895791086d7bf567ad2d6f87efd7d7f7e7cde6f8e9c31679735",
    "sql": "SELECT investor_id , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id",
    "linq": "context.Transactions.GroupBy(row => new { row.InvestorId }).Select(group => new { group.Key.InvestorId, AverageAmountOfTransaction = group.Select(row => (double) row.AmountOfTransaction).Average() }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "efe6c9a63cd4f800da0185adecf5af3d1f95adfca9de436354c9d79800263f68",
    "sql": "SELECT T2.lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id",
    "linq": "context.Transactions.Join(context.TransactionsLots, T1 => T1.TransactionId, T2 => T2.TransactionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.LotId }).Select(group => new { group.Key.LotId, AverageAmountOfTransaction = group.Select(row => (double) row.T1.AmountOfTransaction).Average() }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f8968ac6e7307fb4dde02156e6daa4834008080631c3c14d3143f36356471de",
    "sql": "SELECT T2.lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)",
    "linq": "context.Transactions.Join(context.TransactionsLots, T1 => T1.TransactionId, T2 => T2.TransactionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.LotId }).OrderBy(group => group.Average(row => (double) row.T1.AmountOfTransaction)).Select(group => new { group.Key.LotId, AverageAmountOfTransaction = group.Select(row => (double) row.T1.AmountOfTransaction).Average() }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f1d46622d2d456a8a1ac942cf2fa4ff5f1f63c512fa2923ebee328da849ac405",
    "sql": "SELECT investor_id , COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\" GROUP BY investor_id",
    "linq": "context.Transactions.Where(row => row.TransactionTypeCode == \"SALE\").GroupBy(row => new { row.InvestorId }).Select(group => new { group.Key.InvestorId, Count = group.Count() }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bcc86bc98e5679e6a3dfc66140686cf4956b7cdbec1d2ec1a4718099e6ece520",
    "sql": "SELECT investor_id , COUNT(*) FROM TRANSACTIONS GROUP BY investor_id",
    "linq": "context.Transactions.GroupBy(row => new { row.InvestorId }).Select(group => new { group.Key.InvestorId, Count = group.Count() }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6e9aa6c0774c3d6971f14b9ca4bfc734eb311005289659efa7d20ea038d479e6",
    "sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1",
    "linq": "context.Transactions.GroupBy(row => new { row.TransactionTypeCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.TransactionTypeCode }).Take(1).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5f66c6af3916f4ff1679fe528c03a9e603ebbbbf17bb97a52bfe1c3ae254cc0b",
    "sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Transactions.GroupBy(row => new { row.TransactionTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.TransactionTypeCode }).Take(1).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "86b1d76f79065971198b79073f3f73e02181e48c88712490d3407b1465a00ea8",
    "sql": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.RefTransactionTypes.Join(context.Transactions, T1 => T1.TransactionTypeCode, T2 => T2.TransactionTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TransactionTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.TransactionTypeDescription }).Take(1).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "daffc195743554e2ac8c28abea8a27e6c3f6b10f9f081df5028992c7d91d79f3",
    "sql": "SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.InvestorId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.InvestorId, group.First().T1.InvestorDetails }).Take(1).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2a1f2f6ced5be9f7f412e4914aee6bc85d295c793d156d829c9ca6bf55f1bcf4",
    "sql": "SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
    "linq": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.InvestorId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.InvestorId, group.First().T1.InvestorDetails }).Take(3).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "260417d31c09162f66bcb97a4f5501cf36cd75fdcdabf662940180112013441f",
    "sql": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*) >= 2",
    "linq": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.InvestorId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.InvestorId }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5c7db7eeaa2837bfcaf284b45ff0e3c5e23d09610736eb7a27cb667c685d3aa2",
    "sql": "SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*) >= 2",
    "linq": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TransactionTypeCode == \"SALE\").GroupBy(row => new { row.T2.InvestorId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.InvestorId, group.First().T1.InvestorDetails }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d7e4567ecf116720cd48bafe3a65cf7904433d29e8e775475d26af5fd4f285a3",
    "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100",
    "linq": "context.Transactions.Where(row => row.ShareCount >= \"100\" || row.AmountOfTransaction >= 100).Select(row => new { row.DateOfTransaction }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,46): error CS0019: Operator '>=' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.62",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f2975b7056fe2c1ecd93cd5e9c6d377d54b8fc99bd7217f89b03ff81a0eadb7",
    "sql": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases",
    "linq": "context.Sales.Select(row => row.SalesDetails).Union(context.Purchases.Select(row => row.PurchaseDetails)).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2c8dbc45c831ebeac76ce600e48e946660f20135a4b087fddfb5128f4c09e0cd",
    "sql": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id = T2.lot_id",
    "linq": "context.Lots.Select(row => row.LotDetails).Except(context.Lots.Join(context.TransactionsLots, T1 => T1.LotId, T2 => T2.LotId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.LotDetails)).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "57556d4e751526321d23e812047deb1a62608d78f263289cb612b49ec5f2d3b0",
    "sql": "SELECT count(*) FROM Video_games",
    "linq": "context.VideoGames.Count();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3c283302d904c7737cf96448b4666c9d6b4fc97d672f91a7cd5799fc7408a493",
    "sql": "SELECT count(DISTINCT gtype) FROM Video_games",
    "linq": "context.VideoGames.Select(row => row.Gtype).Distinct().Count();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "da49f19203108428b7dcf4d30b8b51f539ca24dcfc6951c20a8d1212a240880c",
    "sql": "SELECT DISTINCT gtype FROM Video_games",
    "linq": "context.VideoGames.Select(row => new { row.Gtype }).Distinct().ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a947cdf547b6bf78716a751dd04cdaa539af7d01613e497e49575b5e86ae2639",
    "sql": "SELECT gname , gtype FROM Video_games ORDER BY gname",
    "linq": "context.VideoGames.OrderBy(row => row.Gname).Select(row => new { row.Gname, row.Gtype }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fb8a358126722596471126675ed3eb061ef8f0b9171dad50cf1673842baaf8fe",
    "sql": "SELECT gname FROM Video_games WHERE gtype = \"Collectible card game\"",
    "linq": "context.VideoGames.Where(row => row.Gtype == \"Collectible card game\").Select(row => new { row.Gname }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "74c2c82598b15d74e6d1300a32291ab7d692a0db24a2ab02b3c3ceda2deba204",
    "sql": "SELECT gtype FROM Video_games WHERE gname = \"Call of Destiny\"",
    "linq": "context.VideoGames.Where(row => row.Gname == \"Call of Destiny\").Select(row => new { row.Gtype }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "673e20b932c5d21ef71e865fd8466f284b5b6459ac74e4c5b491e2a6ab065a29",
    "sql": "SELECT count(*) FROM Video_games WHERE gtype = \"Massively multiplayer online game\"",
    "linq": "context.VideoGames.Where(row => row.Gtype == \"Massively multiplayer online game\").Count();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "31e1fa7ad4e498855fa1eb3978e6f94b3d31ce1ecdd077da484ad14529035c64",
    "sql": "SELECT gtype , count(*) FROM Video_games GROUP BY gtype",
    "linq": "context.VideoGames.GroupBy(row => new { row.Gtype }).Select(group => new { group.Key.Gtype, Count = group.Count() }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "540f4ffd0a52eff387c16155d28afe4b2cd3c655d8a22cf631268e69a96b2424",
    "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.VideoGames.GroupBy(row => new { row.Gtype }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Gtype }).Take(1).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a43415ec5228b77254d6a65e5aede3995ae063c88163f25c6f0b5f51ea262b97",
    "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1",
    "linq": "context.VideoGames.GroupBy(row => new { row.Gtype }).OrderBy(group => group.Count()).Select(group => new { group.Key.Gtype }).Take(1).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "05954305d481c763f3fb0253dd2a5597761892459449a1e814fd1863efe9f485",
    "sql": "SELECT StuID FROM Student WHERE city_code = \"CHI\"",
    "linq": "context.Students.Where(row => row.CityCode == \"CHI\").Select(row => new { row.StuId }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "527388bb84231757abf6807ff26a1a8f0d615a336075308909fe6cd5c52333bf",
    "sql": "SELECT StuID FROM Student WHERE Advisor = 1121",
    "linq": "context.Students.Where(row => row.Advisor == 1121).Select(row => new { row.StuId }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bc1cacf23d52e3bc188352ebda6cfbfcd2b2074b458b0f531bbf9db63a5168ba",
    "sql": "SELECT Fname FROM Student WHERE Major = 600",
    "linq": "context.Students.Where(row => row.Major == 600).Select(row => new { row.Fname }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cf3ddefaf1246aefe28379542937f7873cb22daef40e8056bfe212ea9ed68f32",
    "sql": "SELECT major , avg(age) , min(age) , max(age) FROM Student GROUP BY major",
    "linq": "context.Students.GroupBy(row => new { row.Major }).Select(group => new { group.Key.Major, AverageAge = group.Select(row => row.Age).Average(), MinAge = group.Select(row => row.Age).Min(), MaxAge = group.Select(row => row.Age).Max() }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "59536405795e85ce741ffa9a942dff0c481af1243655f7be38d7f199026cf09a",
    "sql": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*) >= 2",
    "linq": "context.Students.GroupBy(row => new { row.Advisor }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Advisor }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "db13871a56ab32f0718f3bf910cebdce090019238db1b5d799cf0fabe541e877",
    "sql": "SELECT count(DISTINCT sportname) FROM Sportsinfo",
    "linq": "context.SportsInfos.Select(row => row.SportName).Distinct().Count();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a16747d39f5fc56534354b805f9efd5f03c624505e8cdb407e9c65d93c706861",
    "sql": "SELECT count(DISTINCT StuID) FROM Sportsinfo",
    "linq": "context.SportsInfos.Select(row => row.StuId).Distinct().Count();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "17069202d8ae389ead4efd9e5ac61ba3a65b117b8e3ba3002e7a64284dce1b72",
    "sql": "SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'",
    "linq": "context.SportsInfos.Where(row => row.OnScholarship == \"Y\").Select(row => new { row.StuId }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3b516d25384a4f9af50a865e19cd4d2e9911ef460463acd0222b4f74e9d59e70",
    "sql": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y'",
    "linq": "context.SportsInfos.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.OnScholarship == \"Y\").Select(row => new { row.T2.Lname }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c46c66e9f8bfa7ab7ceb32922ead560a5c7016e2f78e3e11dc78f9094dfde728",
    "sql": "SELECT sum(gamesplayed) FROM Sportsinfo",
    "linq": "context.SportsInfos.Select(row => row.GamesPlayed).Sum();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bad4988c021c4cab64d5de2666fcb8d8bff3480cc8d675c9bc94b56dde95306d",
    "sql": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname = \"Football\" AND onscholarship = 'Y'",
    "linq": "context.SportsInfos.Where(row => row.SportName == \"Football\" && row.OnScholarship == \"Y\").Select(row => row.GamesPlayed).Sum();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a6e2a708a49de28dd3ef16ec602f41b9d4bbbb522a5b31e2c6e93de71e67db56",
    "sql": "SELECT sportname , count(*) FROM Sportsinfo GROUP BY sportname",
    "linq": "context.SportsInfos.GroupBy(row => new { row.SportName }).Select(group => new { group.Key.SportName, Count = group.Count() }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bcbd100ba2d644783f2e0cad21019e08e047d98ea388ebbf15798490f125835e",
    "sql": "SELECT StuID , count(*) , sum(gamesplayed) FROM Sportsinfo GROUP BY StuID",
    "linq": "context.SportsInfos.GroupBy(row => new { row.StuId }).Select(group => new { group.Key.StuId, Count = group.Count(), SumGamesPlayed = group.Select(row => row.GamesPlayed).Sum() }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "79249dd691020c2dc830686fe44f7fbe1aba991450a5018ad47c97546d1d8ffa",
    "sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek) > 10",
    "linq": "context.SportsInfos.GroupBy(row => new { row.StuId }).Where(group => group.Sum(row => row.HoursPerWeek) > 10).Select(group => new { group.Key.StuId }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2d27a8b9c93c72973c8623565f10ef3a9ae6de0852b510f70809b38d611904c5",
    "sql": "SELECT T2.Fname , T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.SportsInfos.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StuId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Fname, group.First().T2.Lname }).Take(1).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "559ccafc1610a3f6055885ecbeddfb50400a69fcc56da658195563f921b3743d",
    "sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship = 'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.SportsInfos.Where(row => row.OnScholarship == \"Y\").GroupBy(row => new { row.SportName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.SportName }).Take(1).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ca65233fce596e28e65d83c9068dfa1c2e47c5e50928a8234841815fa7a33d2e",
    "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo",
    "linq": "context.Students.Select(row => row.StuId).Except(context.SportsInfos.Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1a524ea19cd7f62cbfcea42cf64f9af3812b664c9fafe4c108c02a7744c1d8b2",
    "sql": "SELECT StuID FROM Student WHERE major = 600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'",
    "linq": "context.Students.Where(row => row.Major == 600).Select(row => row.StuId).Intersect(context.SportsInfos.Where(row => row.OnScholarship == \"Y\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "edff3a24766764986f770594dd8ecd466a0772c6491670bd77969a50265716f3",
    "sql": "SELECT StuID FROM Student WHERE sex = 'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname = \"Football\"",
    "linq": "context.Students.Where(row => row.Sex == \"F\").Select(row => row.StuId).Intersect(context.SportsInfos.Where(row => row.SportName == \"Football\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ad9b14532a9cdb6b9e333461bf8bd1fbd19d6f3238b65107626e043b788887a9",
    "sql": "SELECT StuID FROM Student WHERE sex = 'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname = \"Football\"",
    "linq": "context.Students.Where(row => row.Sex == \"M\").Select(row => row.StuId).Except(context.SportsInfos.Where(row => row.SportName == \"Football\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1c7659fe9ab4918cdbeb0995a0fed5119bdf7a2985b3bc7643982f6859c852a8",
    "sql": "SELECT sum(hoursperweek) , sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = \"David\" AND T2.Lname = \"Shieber\"",
    "linq": "context.SportsInfos.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Fname == \"David\" && row.T2.Lname == \"Shieber\").GroupBy(row => 1).Select(group => new { SumHoursPerWeek = group.Select(row => row.T1.HoursPerWeek).Sum(), SumGamesPlayed = group.Select(row => row.T1.GamesPlayed).Sum() }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "594a50fee7e558d2d5ec761decf97d0c43809af99fc729dd3f547caac83eab06",
    "sql": "SELECT sum(hoursperweek) , sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.age < 20",
    "linq": "context.SportsInfos.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Age < 20).GroupBy(row => 1).Select(group => new { SumHoursPerWeek = group.Select(row => row.T1.HoursPerWeek).Sum(), SumGamesPlayed = group.Select(row => row.T1.GamesPlayed).Sum() }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c174b832cb273e21e71b6b12d8119998cc64dc28cf9045357b98db62697be036",
    "sql": "SELECT count(DISTINCT StuID) FROM Plays_games",
    "linq": "context.PlaysGames.Select(row => row.StuId).Distinct().Count();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a0a2a850556328ea6125e6c0ffbcf56875ce8dc1e1c42724183dd26d9587ba17",
    "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
    "linq": "context.Students.Select(row => row.StuId).Except(context.PlaysGames.Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3f8e5df9f9eeee82d285fcfaef26d8404458f8873f604a01cdabc45a5ad59a90",
    "sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
    "linq": "context.SportsInfos.Where(row => row.StuId.HasValue).Select(row => row.StuId.Value).Intersect(context.PlaysGames.Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9be733ff6a40aff1a06126d457fb607d830618810354931bda7703352cbea830",
    "sql": "SELECT gameid , sum(hours_played) FROM Plays_games GROUP BY gameid",
    "linq": "context.PlaysGames.GroupBy(row => new { row.GameId }).Select(group => new { group.Key.GameId, SumHoursPlayed = group.Select(row => row.HoursPlayed).Sum() }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dec3c39fdc772a78314afec96c3176ed1af9e16426f9b91a871839d6ddf5c8b6",
    "sql": "SELECT Stuid , sum(hours_played) FROM Plays_games GROUP BY Stuid",
    "linq": "context.PlaysGames.GroupBy(row => new { row.StuId }).Select(group => new { group.Key.StuId, SumHoursPlayed = group.Select(row => row.HoursPlayed).Sum() }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "afbb2828593ad220b2e6e16d05073f94f8dda0d826ce2ddb63bafbd53fdf6c7d",
    "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1",
    "linq": "context.PlaysGames.Join(context.VideoGames, T1 => T1.GameId, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.GameId }).OrderByDescending(group => group.Sum(row => row.T1.HoursPlayed)).Select(group => new { group.First().T2.Gname }).Take(1).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3b0facd3ca78572677443d5460cf32a71e8e70e1c6f7b0a2049d92878a15deef",
    "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid HAVING sum(hours_played) >= 1000",
    "linq": "context.PlaysGames.Join(context.VideoGames, T1 => T1.GameId, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.GameId }).Where(group => group.Sum(row => row.T1.HoursPlayed) >= 1000).Select(group => new { group.First().T2.Gname }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b3f40131361bcc8ade1b2eed5b919914d703e6fd85a6ad307fb570166101adaa",
    "sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid WHERE T3.Lname = \"Smith\" AND T3.Fname = \"Linda\"",
    "linq": "context.PlaysGames.Join(context.VideoGames, T1 => T1.GameId, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Lname == \"Smith\" && row.T3.Fname == \"Linda\").Select(row => new { row.T2.Gname }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "24d698fb7299cfbc64b389310046547ed22d4441fb8aec0f0f6ac96d209f7f2f",
    "sql": "SELECT T2.lname , T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.SportName = \"Football\" OR T1.SportName = \"Lacrosse\"",
    "linq": "context.SportsInfos.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.SportName == \"Football\" || row.T1.SportName == \"Lacrosse\").Select(row => new { row.T2.Lname, row.T2.Fname }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b5ce6e964bb657f84434a95307a50b935c3ebe02118cdb627e768f3a2c00c453",
    "sql": "SELECT fname , age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName = \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName = \"Lacrosse\")",
    "linq": "context.Students.Where(row => context.SportsInfos.Where(row => row.SportName == \"Football\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value).Intersect(context.SportsInfos.Where(row => row.SportName == \"Lacrosse\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).Contains(row.StuId)).Select(row => new { row.Fname, row.Age }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "abb722e6353ca88bbd6f57b12d2d78ae351080502af3bfc14405cfc9def679c1",
    "sql": "SELECT lname , sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = \"Works of Widenius\")",
    "linq": "context.Students.Where(row => context.PlaysGames.Join(context.VideoGames, T1 => T1.GameId, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Gname == \"Call of Destiny\").Where(row => row.T1.StuId.HasValue).Select(row => row.T1.StuId.Value).Intersect(context.PlaysGames.Join(context.VideoGames, T1 => T1.GameId, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Gname == \"Works of Widenius\").Where(row => row.T1.StuId.HasValue).Select(row => row.T1.StuId.Value)).Contains(row.StuId)).Select(row => new { row.Lname, row.Sex }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f7c646115708dd79dadd1ad6eb935c0a232232f6c37c4adaa4451ce5ee78583a",
    "sql": "SELECT count(*) FROM county",
    "linq": "context.Counties.Count();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3e8440ae6b9cbb869adc0e8bd335e50a03e219d65b9c9c35deb92838a75b8d20",
    "sql": "SELECT County_name , Population FROM county",
    "linq": "context.Counties.Select(row => new { row.CountyName, row.Population }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5fe7304d751babfeeaee6610aece43d959478164fb41896fc00ea1ea8f73ca9f",
    "sql": "SELECT avg(Population) FROM county",
    "linq": "context.Counties.Select(row => (double) row.Population).Average();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "700f870cdc0fcaf0d16a46030d7d4cf046462eba8f0c832b739a8fc23612f34c",
    "sql": "SELECT max(Population) , min(Population) FROM county",
    "linq": "context.Counties.GroupBy(row => 1).Select(group => new { MaxPopulation = group.Select(row => row.Population).Max(), MinPopulation = group.Select(row => row.Population).Min() }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "177a299fc88e6f15fbf3ba2a00ca53bb99c92874e69cd89071fca4f6c88c5ed7",
    "sql": "SELECT DISTINCT District FROM election",
    "linq": "context.Elections.Select(row => new { row.District }).Distinct().ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cf328fde95b12c6cb4a492c200ee416dae352d02cfe24d3d8f12b0e3fc091140",
    "sql": "SELECT Zip_code FROM county WHERE County_name = \"Howard\"",
    "linq": "context.Counties.Where(row => row.CountyName == \"Howard\").Select(row => new { row.ZipCode }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "904cf4618aaa61710a8720cbc762b98f44e1131a8bd7ac856fc1925a16447ef4",
    "sql": "SELECT Delegate FROM election WHERE District = 1",
    "linq": "context.Elections.Where(row => row.District == 1).Select(row => new { row.Delegate }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d7cdb05176802a433da74830b48dbdcb348497a5faf1e5ca6da212a7a7449056",
    "sql": "SELECT Delegate , Committee FROM election",
    "linq": "context.Elections.Select(row => new { row.Delegate, row.Committee }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "555494490380af86cda77366c5ea65b2d43cbff42c707c66522042b77a265231",
    "sql": "SELECT count(DISTINCT Governor) FROM party",
    "linq": "context.Parties.Select(row => row.Governor).Distinct().Count();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6206c2605cf02a61848290610536e864fdfd4f30eb78d123b60e618f54c0774d",
    "sql": "SELECT Lieutenant_Governor , Comptroller FROM party WHERE Party = \"Democratic\"",
    "linq": "context.Parties.Where(row => row.Party1 == \"Democratic\").Select(row => new { row.LieutenantGovernor, row.Comptroller }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "82b5ab8397ddf4bae2e44fb56d85f17ff623bc1f3af777fa367c584e176d621b",
    "sql": "SELECT DISTINCT YEAR FROM party WHERE Governor = \"Eliot Spitzer\"",
    "linq": "context.Parties.Where(row => row.Governor == \"Eliot Spitzer\").Select(row => new { row.Year }).Distinct().ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "89abdb1d9c8c63152009f3349e870cb02f20e0beac587d1d5858bc52311e1803",
    "sql": "SELECT * FROM election",
    "linq": "context.Elections.Select(row => new { row.ElectionId, row.CountiesRepresented, row.District, row.Delegate, row.Party, row.FirstElected, row.Committee }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5be1c8d34c96d0a9d6a482c8821d38e79e181428f1dea0ff9bf6d16a0656258e",
    "sql": "SELECT T2.Delegate , T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District",
    "linq": "context.Counties.Join(context.Elections, T1 => T1.CountyId, T2 => T2.District, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Delegate, row.T1.CountyName }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "62a48431c776a4d950ea0ede9522d9f17a1a6562782930939cd6472ac5b58acd",
    "sql": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population < 100000",
    "linq": "context.Counties.Join(context.Elections, T1 => T1.CountyId, T2 => T2.District, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Population < 100000).Select(row => new { row.T2.Delegate }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "59a190905fd41f8285eeffd2069e65565933919144634f9be15388da9ab12437",
    "sql": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000",
    "linq": "context.Counties.Join(context.Elections, T1 => T1.CountyId, T2 => T2.District, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Population > 50000).Select(row => row.T2.Delegate).Distinct().Count();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6835be5361bcc631dba69504fe750b7f3d5bae5422624736b58c569f29380022",
    "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T2.Committee = \"Appropriations\"",
    "linq": "context.Counties.Join(context.Elections, T1 => T1.CountyId, T2 => T2.District, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Committee == \"Appropriations\").Select(row => new { row.T1.CountyName }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3b0c802f351eb8e440f16dce93c76b84bd59caecfa11eb47b9fe3f09bf023da8",
    "sql": "SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID",
    "linq": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Delegate, row.T2.Party1 }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f3fc48186b0a5ae4fc53d41d189efc437a77a9695217ead35d3da191608df540",
    "sql": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1",
    "linq": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.District == 1).Select(row => new { row.T2.Governor }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7828d05a3993ac561aee78b97b74d7ad6fd6cf2c3e5d0b91cce22c53bd0fc518",
    "sql": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2",
    "linq": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.District == 1 || row.T1.District == 2).Select(row => new { row.T2.Comptroller }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c33cbcffc260f85797f0c6b3d62355278663a4c3ce27696b427a7eeb7a03fc3f",
    "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\"",
    "linq": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Party1 == \"Democratic\").Select(row => new { row.T1.Committee }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a5004db86e222000f55307267c19e173f3fff7a36b11dede6e0492b4f166f177",
    "sql": "SELECT T1.County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id",
    "linq": "context.Counties.Join(context.Elections, T1 => T1.CountyId, T2 => T2.District, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CountyId }).Select(group => new { group.First().T1.CountyName, Count = group.Count() }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cd4115e86bca631d79330600d848524e95fbac13e9e3cb48d152b1d2f4fd751a",
    "sql": "SELECT T2.Party , COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party",
    "linq": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Party }).Select(group => new { group.First().T2.Party1, Count = group.Count() }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8be64a361e2c136ae6f1ceb056980a16619a939a37b82157be03750819c9040e",
    "sql": "SELECT County_name FROM county ORDER BY Population ASC",
    "linq": "context.Counties.OrderBy(row => row.Population).Select(row => new { row.CountyName }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8e02ad821c5986c9a47b1f3f173ef7d70d294afc6b5aaebae62d3dcba8cdedbe",
    "sql": "SELECT County_name FROM county ORDER BY County_name DESC",
    "linq": "context.Counties.OrderByDescending(row => row.CountyName).Select(row => new { row.CountyName }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3abf22a2d57f9866827869f267e2b26e87be8690cd0a73c818a54f9fca4b090e",
    "sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
    "linq": "context.Counties.OrderByDescending(row => row.Population).Select(row => new { row.CountyName }).Take(1).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f790a1606143905534ea29e9d488426b74b571be936ba9df59bb27685365a486",
    "sql": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3",
    "linq": "context.Counties.OrderBy(row => row.Population).Select(row => new { row.CountyName }).Take(3).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4ee66c39b1164a62a794f1a6bec65ab88410273f46783da392d99ce35c2ec2f5",
    "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT(*) >= 2",
    "linq": "context.Counties.Join(context.Elections, T1 => T1.CountyId, T2 => T2.District, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CountyId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.CountyName }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9eb3cfd1830097c08798eb4459ea2d6f8c70cf20596c46fcc46c3ae4d8e26700",
    "sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*) >= 2",
    "linq": "context.Parties.GroupBy(row => new { row.Party1 }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Party1 }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "15a300ff46fea15b72daa0d38e95f7242f924c82fe23bea58de607388c681e35",
    "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Party }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Party1 }).Take(1).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3a1b8bbdd60ad1a15e2277a083acf01c1f936476360b6da5cbc3a6700a84b81f",
    "sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Parties.GroupBy(row => new { row.Governor }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Governor }).Take(1).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b017ac698d95a1a2350f9eab5f859577deba8622be401dd15f8657377b1ab7e7",
    "sql": "SELECT Comptroller , COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Parties.GroupBy(row => new { row.Comptroller }).Select(group => new { group.Key.Comptroller, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c70c9af02f8659d7d711607d35f7d49b54ad2a48f240f44e13c3af4824e9805b",
    "sql": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)",
    "linq": "context.Parties.Where(row => !context.Elections.Select(row => row.Party).Contains(row.PartyId)).Select(row => new { row.Party1 }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "745255c86893d9d4f839cbc71ca56fcffa6d62c77d816de6c910af675689c924",
    "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Economic Matters\"",
    "linq": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Committee == \"Appropriations\").Select(row => row.T2.Party1).Intersect(context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Committee == \"Economic Matters\").Select(row => row.T2.Party1)).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "99949de0541563229c13e92a95bda96e2dc73a9111d13668e9555b5e7d642640",
    "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Liberal\"",
    "linq": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Party1 == \"Democratic\").Select(row => row.T1.Committee).Intersect(context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Party1 == \"Liberal\").Select(row => row.T1.Committee)).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6c3468c894924b8c344ed3fcebd46588d49256f20072bbbbb06df75c22c0189d",
    "sql": "SELECT count(*) FROM book",
    "linq": "context.Books.Count();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "62206f806b3c3f8150b302c8f4e226408be1937c6929804fe9e9e0d66e689913",
    "sql": "SELECT Writer FROM book ORDER BY Writer ASC",
    "linq": "context.Books.OrderBy(row => row.Writer).Select(row => new { row.Writer }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ea55d63a6de580989e6d22032af85ec9443e817ce709c14016c0b8cf4db6a094",
    "sql": "SELECT Title FROM book ORDER BY Issues ASC",
    "linq": "context.Books.OrderBy(row => row.Issues).Select(row => new { row.Title }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9ba090b956ea0e9232ff3ecc9468063726b4c5d9016d75d15caa262a1de9242d",
    "sql": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\"",
    "linq": "context.Books.Where(row => row.Writer != \"Elaine Lee\").Select(row => new { row.Title }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "698fc68607f4a6210bf395ebf470b938be3d7dd9d1787bd5b083cb1c0d63dfe3",
    "sql": "SELECT Title , Issues FROM book",
    "linq": "context.Books.Select(row => new { row.Title, row.Issues }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7e1dd3137876cbbcfc0842f7684abb773f6ab3e83c56b0e3db5511cb31d0b92b",
    "sql": "SELECT Publication_Date FROM publication ORDER BY Price DESC",
    "linq": "context.Publications.OrderByDescending(row => row.Price).Select(row => new { row.PublicationDate }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eb64b783086ce0833f58681a5d335147acc04189924cb88093a7f503dc9cc1f1",
    "sql": "SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000",
    "linq": "context.Publications.Where(row => row.Price > 5000000).Select(row => new { row.Publisher }).Distinct().ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6f7651a2f37334afffba2801286aa4a510b6e78ba1ba0f336258ad8b8a01cabb",
    "sql": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
    "linq": "context.Publications.OrderByDescending(row => row.Price).Select(row => new { row.Publisher }).Take(1).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "db64917f6a9b5c68544551de940ef96d208258c78886dbafb8bebd7e3f668276",
    "sql": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
    "linq": "context.Publications.OrderBy(row => row.Price).Select(row => new { row.PublicationDate }).Take(3).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c73bfcd6ae9ac8131521669f5748c8f48c69df327db278da016e1c41e1d54505",
    "sql": "SELECT T1.Title , T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID",
    "linq": "context.Books.Join(context.Publications, T1 => T1.BookId, T2 => T2.BookId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Title, row.T2.PublicationDate }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d3b4580c2ded5430ccfba309ada187f91433952e11d5ef190ad1935f4372730c",
    "sql": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000",
    "linq": "context.Books.Join(context.Publications, T1 => T1.BookId, T2 => T2.BookId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Price > 4000000).Select(row => new { row.T1.Writer }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "69808c5f6d74ea5b4e51e31843079285c999f08bbe456ece20159aecb9c0c7a9",
    "sql": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC",
    "linq": "context.Books.Join(context.Publications, T1 => T1.BookId, T2 => T2.BookId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Price).Select(row => new { row.T1.Title }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e6b02052cbb580a5026ff6495cb4e561593fab9aeaf72237d1cf959a96cebc6a",
    "sql": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1",
    "linq": "context.Publications.GroupBy(row => new { row.Publisher }).Where(group => group.Count() > 1).Select(group => new { group.Key.Publisher }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ba86eabf4c1bf784f2a5e5ab667f1f2ae073acd35ff690bc83adb8a5c610cba2",
    "sql": "SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher",
    "linq": "context.Publications.GroupBy(row => new { row.Publisher }).Select(group => new { group.Key.Publisher, Count = group.Count() }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "132819a2d7c81f02f284df6f6ba25dd6cdd2c489a011434810ec3767351e0385",
    "sql": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Publications.GroupBy(row => new { row.PublicationDate }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PublicationDate }).Take(1).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "55446c9ed2eb5498c5eb666b84bed5c25fa7d572edc8d20af1f7bdb4d55d796c",
    "sql": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1",
    "linq": "context.Books.GroupBy(row => new { row.Writer }).Where(group => group.Count() > 1).Select(group => new { group.Key.Writer }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "08f6059872fe4330ce08bb6db0d48647de620326ed19499c7c7d70ad5b9cf0da",
    "sql": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
    "linq": "context.Books.Where(row => !context.Publications.Select(row => row.BookId).Contains(row.BookId)).Select(row => new { row.Title }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "347e7b53b2708714f11ef4b917ca3df5649aefcb1d8db2947a6f1160381702c4",
    "sql": "SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000",
    "linq": "context.Publications.Where(row => row.Price > 10000000).Select(row => row.Publisher).Intersect(context.Publications.Where(row => row.Price < 5000000).Select(row => row.Publisher)).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "74be009a6242974ee4df744df5820c96b0a176a748372cf61069b9b8880fcf7c",
    "sql": "SELECT COUNT (DISTINCT Publication_Date) FROM publication",
    "linq": "context.Publications.Select(row => row.PublicationDate).Distinct().Count();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b4bb8c030049ffe59bfdc558d45087074fb10dc45310eb719e01edb6d015d9f2",
    "sql": "SELECT Price FROM publication WHERE Publisher = \"Person\" OR Publisher = \"Wiley\"",
    "linq": "context.Publications.Where(row => row.Publisher == \"Person\" || row.Publisher == \"Wiley\").Select(row => new { row.Price }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ce978e1e42fd7e62ff11b2f02bf3fd25b28d0112cc0826b64fc1bee39c4349bc",
    "sql": "SELECT count(*) FROM artist",
    "linq": "context.Artists.Count();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1dc1c5bb8f2191eb90579bd63a4a3c22fc90f699bbd70b26c0f690e0dc8fc54e",
    "sql": "SELECT Age FROM artist",
    "linq": "context.Artists.Select(row => new { row.Age }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "226cfd9a012f5c389eac6847b68408d39e274c15ad322953f57605d7852e1c82",
    "sql": "SELECT avg(Age) FROM artist",
    "linq": "context.Artists.Select(row => row.Age).Average();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f2ee40dbf3e251331463fb6ac9be8f029906a083ef4bb9d16f94e678a37504e5",
    "sql": "SELECT Famous_Title FROM artist WHERE Artist = \"Triumfall\"",
    "linq": "context.Artists.Where(row => row.Artist1 == \"Triumfall\").Select(row => new { row.FamousTitle }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "be7c1274f061580fa191572e1c28a5e259e8df8a0a9f718a497f70f3ae34fdbe",
    "sql": "SELECT distinct(Famous_Release_date) FROM artist",
    "linq": "context.Artists.Select(row => new { row.FamousReleaseDate }).Distinct().ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8de975be7a9ca5d136c4e3fe9afd0296aa87ee75bda067295bca242db723cad1",
    "sql": "SELECT Date_of_ceremony , RESULT FROM music_festival",
    "linq": "context.MusicFestivals.Select(row => new { row.DateOfCeremony, row.Result }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "60017da1dc8d437017aaa3e227b256d2e62fb763fd6cd0cee087e1df040654be",
    "sql": "SELECT Category FROM music_festival WHERE RESULT = \"Awarded\"",
    "linq": "context.MusicFestivals.Where(row => row.Result == \"Awarded\").Select(row => new { row.Category }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "858016eba6545d89dafa6a8095bebda189e84f14264f1464d8528a7a982e1af4",
    "sql": "SELECT max(Weeks_on_Top) , min(Weeks_on_Top) FROM volume",
    "linq": "context.Volumes.GroupBy(row => 1).Select(group => new { MaxWeeksOnTop = group.Select(row => row.WeeksOnTop).Max(), MinWeeksOnTop = group.Select(row => row.WeeksOnTop).Min() }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bb5bd6854f9d433e992bd663b6083ca71cd3c709acf20dfc53686ac880be951e",
    "sql": "SELECT Song FROM volume WHERE Weeks_on_Top > 1",
    "linq": "context.Volumes.Where(row => row.WeeksOnTop > 1).Select(row => new { row.Song }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c6588f8f94b666d69a011ed692fce6125f74fc14be826bb476c16b4e79ada863",
    "sql": "SELECT Song FROM volume ORDER BY Song",
    "linq": "context.Volumes.OrderBy(row => row.Song).Select(row => new { row.Song }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4afdfd6c47d2959d03125b11c4ab81b87ff2333766369ce3a2ad2fb1ae6b7ecf",
    "sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
    "linq": "context.Volumes.Select(row => row.ArtistId).Distinct().Count();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "54bca4d88b185f93b2d7162e4a06f4cc213aeea75b045f7ae39d9dbd4cfc4ca9",
    "sql": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2",
    "linq": "context.MusicFestivals.Join(context.Volumes, T1 => T1.Volume, T2 => T2.VolumeId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WeeksOnTop > 2).Select(row => new { row.T1.DateOfCeremony }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "08464b3737eb15160c39acdbbf8f144886701dd79983cc299bc20672a39ae658",
    "sql": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T1.Result = \"Nominated\"",
    "linq": "context.MusicFestivals.Join(context.Volumes, T1 => T1.Volume, T2 => T2.VolumeId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Result == \"Nominated\").Select(row => new { row.T2.Song }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f76e691f1d72d793153c59b6301ca2350a859fee8de066510af9ef643c77a050",
    "sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = \"Gorgoroth\"",
    "linq": "context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Artist1 == \"Gorgoroth\").Select(row => new { row.T2.IssueDate }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "52b84703dd28a2f1fb24d6ffaac42c53b3cf1847a8c5afb385aed3dd20927ef6",
    "sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age >= 32",
    "linq": "context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age >= 32).Select(row => new { row.T2.Song }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c40d85b3cdd3d8331c9a17ab7a84c0846b389b5401e2f46c75da1eedd88711bf",
    "sql": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 25",
    "linq": "context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age <= 25).Select(row => (double) row.T2.WeeksOnTop).Average();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "83bd97f2e43b1938486ad6e9d2f5e08784cda0e9e8ee1d36416d4c73b9f11793",
    "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2",
    "linq": "context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WeeksOnTop > 2).Select(row => new { row.T1.FamousTitle }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "01d2ac13583224a4aab992297744a6df2d1084b6175dc2d5162ccd4fcf649d73",
    "sql": "SELECT Famous_Title , Age FROM artist ORDER BY Age DESC",
    "linq": "context.Artists.OrderByDescending(row => row.Age).Select(row => new { row.FamousTitle, row.Age }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b14600316a4c45039e514468239b6c57f13668c6df726d0d1acd9278e690475f",
    "sql": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1",
    "linq": "context.Artists.OrderByDescending(row => row.Age).Select(row => new { row.FamousReleaseDate }).Take(1).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "87bb87679260db0bacb6835ec4610af74a33fe5fa89c28fa9f5af7e4c698339e",
    "sql": "SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
    "linq": "context.MusicFestivals.GroupBy(row => new { row.Category }).Select(group => new { group.Key.Category, Count = group.Count() }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "26760a58749479ed5618a9fe996f6ac31e12b3a7d3c67f79fdf0e62784653bd9",
    "sql": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.MusicFestivals.GroupBy(row => new { row.Result }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Result }).Take(1).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e039d902ab92357528458a5987b29aa4a353b6d20a30c2bfcdf98530148d3361",
    "sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*) > 1",
    "linq": "context.MusicFestivals.GroupBy(row => new { row.Category }).Where(group => group.Count() > 1).Select(group => new { group.Key.Category }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c45ed8c4d50ca101b0e27d028bb50f70541790a68c8bd8e43018ac05d28aa841",
    "sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
    "linq": "context.Volumes.OrderByDescending(row => row.WeeksOnTop).Select(row => new { row.Song }).Take(1).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "443b1f3eeac70dd24f52bd7a00c19540fcb76d837cfb5caf66fbf0fd4574f2d7",
    "sql": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
    "linq": "context.Artists.Where(row => !context.Volumes.Select(row => row.ArtistId).Contains(row.ArtistId)).Select(row => new { row.FamousTitle }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "abfda4190e335930980e209cd900e1c70ead4fb7594a3ae6dba4e9495ca27c33",
    "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < 2",
    "linq": "context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WeeksOnTop > 2).Select(row => row.T1.FamousTitle).Intersect(context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WeeksOnTop < 2).Select(row => row.T1.FamousTitle)).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ea5b65fb4bfefecb6e6cb27fbf22bb536bef95e10ef8d824d9cf507c9254727b",
    "sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category = \"Best Song\" AND RESULT = \"Awarded\"",
    "linq": "context.MusicFestivals.Where(row => row.Category == \"Best Song\" && row.Result == \"Awarded\").Select(row => new { row.DateOfCeremony }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "836dbe43a1913cadf9af79edb08c6644dc2f4abafae7d64926484add37cc2a8f",
    "sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1",
    "linq": "context.Volumes.OrderBy(row => row.WeeksOnTop).Select(row => new { row.IssueDate }).Take(1).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8c030de5b8827ad473e758151ba6f207c8f872342c2a48dc51287967d2c42784",
    "sql": "SELECT RESULT , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
    "linq": "context.MusicFestivals.GroupBy(row => new { row.Result }).Select(group => new { group.Key.Result, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5e63f0a51a37fce3ecd5119737eab0d75971dba56b811cee0ef4f8dda27f2255",
    "sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 23",
    "linq": "context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age <= 23).Select(row => new { row.T2.IssueDate }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1b6ebb6cfadd22154b50e4f927531d17394bf54cce36cbfb07d85faa03b2ed2a",
    "sql": "SELECT Participant_ID , Participant_Type_Code , Participant_Details FROM Participants",
    "linq": "context.Participants.Select(row => new { row.ParticipantId, row.ParticipantTypeCode, row.ParticipantDetails }).ToList();",
    "db_name": "local_govt_in_alabama",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d5a352e10e2c32d88c425bf626edbeac92a8c75d013c0d35424c881e373886fb",
    "sql": "SELECT count(*) FROM participants WHERE participant_type_code = 'Organizer'",
    "linq": "context.Participants.Where(row => row.ParticipantTypeCode == \"Organizer\").Count();",
    "db_name": "local_govt_in_alabama",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eb12003fe85b74f823b5517a1c4f0f53e683c07b97834100c5475be180d46765",
    "sql": "SELECT service_type_code FROM services ORDER BY service_type_code",
    "linq": "context.Services.OrderBy(row => row.ServiceTypeCode).Select(row => new { row.ServiceTypeCode }).ToList();",
    "db_name": "local_govt_in_alabama",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "439fc3d901fc724ee30d46ab4deb4f286759e5ba43f41cef44332ee9f9314a17",
    "sql": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Participants.GroupBy(row => new { row.ParticipantTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ParticipantTypeCode }).Take(1).ToList();",
    "db_name": "local_govt_in_alabama",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cb9f04bbb1be6e1c4bbea99f0cdde10de80067f769a678aa1b5a5d59e58841a9",
    "sql": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Events.GroupBy(row => new { row.EventId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.EventId }).Take(1).ToList();",
    "db_name": "local_govt_in_alabama",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 80}]\", linq_results: \"[{0: 3}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f7c7cf62f1fda97c041ba0bdeb5048c5594e64eff83f2044af6037a3c1e47ebd",
    "sql": "SELECT count(*) FROM device",
    "linq": "context.Devices.Count();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b1b8323acd88c98e9e8415ac1935b5fdf0612281f3ab5eedefa195cb87904e14",
    "sql": "SELECT Carrier FROM device ORDER BY Carrier ASC",
    "linq": "context.Devices.OrderBy(row => row.Carrier).Select(row => new { row.Carrier }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4a3f8e90d8798c00d7d7d2072209a72a099e43a4712e83a3fb8ac625b9bcbebc",
    "sql": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
    "linq": "context.Devices.Where(row => row.SoftwarePlatform != \"Android\").Select(row => new { row.Carrier }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "feedac49de3a7fcbaf113dce286374a049d735af43e8bcd65a7d5feb04a9d14c",
    "sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC",
    "linq": "context.Shops.OrderBy(row => row.OpenYear).Select(row => new { row.ShopName }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "142bdf672f13cb297cfe14d1e1ac11159d54a7a344dbd1d4ae00e16c0b4ce282",
    "sql": "SELECT avg(Quantity) FROM stock",
    "linq": "context.Stocks.Select(row => row.Quantity).Average();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6c9dc5d95649036e7f99225d2fa0ff749702803a280159b5fa5bee05e55aba06",
    "sql": "SELECT Shop_Name , LOCATION FROM shop ORDER BY Shop_Name ASC",
    "linq": "context.Shops.OrderBy(row => row.ShopName).Select(row => new { row.ShopName, row.Location }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8101ae1919453ae2bcf2526d18c1f6f795d78a5a1c7504a895bad495957e4ba9",
    "sql": "SELECT count(DISTINCT Software_Platform) FROM device",
    "linq": "context.Devices.Select(row => row.SoftwarePlatform).Distinct().Count();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ea82c384ca5e43d4bf805eadc5084e17cba3afbc7811782543e2259286c1c597",
    "sql": "SELECT Open_Date , Open_Year FROM shop WHERE Shop_Name = \"Apple\"",
    "linq": "context.Shops.Where(row => row.ShopName == \"Apple\").Select(row => new { row.OpenDate, row.OpenYear }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "350174e40cad72c02fc164c4879e29a5f24fcbfa6d576f82d71f188d8c4a4492",
    "sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1",
    "linq": "context.Shops.OrderByDescending(row => row.OpenYear).Select(row => new { row.ShopName }).Take(1).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ef38035533af742246498b4e230b18c4276049a43a0a29a8b732ba1faf35bad5",
    "sql": "SELECT T3.Shop_Name , T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID",
    "linq": "context.Stocks.Join(context.Devices, T1 => T1.DeviceId, T2 => T2.DeviceId, (T1, T2) => new { T1, T2 }).Join(context.Shops, joined => joined.T1.ShopId, T3 => T3.ShopId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.ShopName, row.T2.Carrier }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b8692fa02e81e26d7e7836e490f0cb112e6e8dd96c8df07b1193d37d5fa614a2",
    "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*) > 1",
    "linq": "context.Stocks.Join(context.Shops, T1 => T1.ShopId, T2 => T2.ShopId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ShopId }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.ShopName }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b88b8ddc05741738a426e2345f9e57929b30cc9891a0b719de2a020ac5051d06",
    "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Stocks.Join(context.Shops, T1 => T1.ShopId, T2 => T2.ShopId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ShopId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.ShopName }).Take(1).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b2b30ce292d97141e08fc401c2f245ac0eb97b81a06023b7b90ad869f3d7757a",
    "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1",
    "linq": "context.Stocks.Join(context.Shops, T1 => T1.ShopId, T2 => T2.ShopId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ShopId }).OrderByDescending(group => group.Sum(row => row.T1.Quantity)).Select(group => new { group.First().T2.ShopName }).Take(1).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "391a073f305879e30a149e1b20d7bb37a5bc6df57a94e586db7c9b5738793172",
    "sql": "SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform",
    "linq": "context.Devices.GroupBy(row => new { row.SoftwarePlatform }).Select(group => new { group.Key.SoftwarePlatform, Count = group.Count() }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4ea50976b1da3627aedc4d3af4538a7164384a74f44cb4cc2548ff66c1698745",
    "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
    "linq": "context.Devices.GroupBy(row => new { row.SoftwarePlatform }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.SoftwarePlatform }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a6009fb43130a842d7df99f5b129fe3188db77a18b484870993128509b576f1e",
    "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Devices.GroupBy(row => new { row.SoftwarePlatform }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.SoftwarePlatform }).Take(1).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "65e97bd1ef31ca627a68fa8df5a6b19d215453e9f6fb527d945a246f6fc05c62",
    "sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)",
    "linq": "context.Shops.Where(row => !context.Stocks.Select(row => row.ShopId).Contains(row.ShopId)).Select(row => new { row.ShopName }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "67d487b8ff707771611fb2acc7faa186fbecd6ab387a0962e77d04208ce55903",
    "sql": "SELECT LOCATION FROM shop WHERE Open_Year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year < 2008",
    "linq": "context.Shops.Where(row => row.OpenYear > 2012).Select(row => row.Location).Intersect(context.Shops.Where(row => row.OpenYear < 2008).Select(row => row.Location)).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6c8f19f9593c72ded20c4df6839878f68af54c699c3b1c695f8669e742b39c89",
    "sql": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)",
    "linq": "context.Devices.Where(row => !context.Stocks.Select(row => row.DeviceId).Contains(row.DeviceId)).Select(row => new { row.Carrier }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "348e03f62ebcf9f43a4aa8c8b5306a967e270a8093a18f70bd70e0e87a221edb",
    "sql": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*) > 1",
    "linq": "context.Stocks.Join(context.Devices, T1 => T1.DeviceId, T2 => T2.DeviceId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeviceId }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.Carrier }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "27e782c6400d06ef8b9fd3bab70fd70e8f3a379bb72181ff97568aff9be4627f",
    "sql": "SELECT count(*) FROM club",
    "linq": "context.Clubs.Count();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "43d3423eca947122eab69e15d0195bf5ecd6af41bc1c2e70ec826b823b8d50d4",
    "sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC",
    "linq": "context.Clubs.OrderBy(row => row.Region).Select(row => new { row.Region }).Distinct().ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6a0d0daa1bc9f441e27a13ae27746fb0216c808df118d3253a0f8d861686bdd7",
    "sql": "SELECT avg(Gold) FROM club_rank",
    "linq": "context.ClubRanks.Select(row => (double) row.Gold).Average();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e2cc6a7d5cd07744af2623f635a19e63d20212d484f7694a2db15f1d1508308e",
    "sql": "SELECT Competition_type , Country FROM competition",
    "linq": "context.Competitions.Select(row => new { row.CompetitionType, row.Country }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c1478b5bc6cd573da92f635011814a9d07c8d7d96daed1bf506aec7a3bc6744d",
    "sql": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"",
    "linq": "context.Competitions.Where(row => row.CompetitionType != \"Tournament\").Select(row => new { row.Year }).Distinct().ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b3725889ae37adf9f984243cfd2c00273c007cc392164bf03c423210a55fc329",
    "sql": "SELECT max(Silver) , min(Silver) FROM club_rank",
    "linq": "context.ClubRanks.GroupBy(row => 1).Select(group => new { MaxSilver = group.Select(row => row.Silver).Max(), MinSilver = group.Select(row => row.Silver).Min() }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f6bd0b290fd3ab701cf3927746b98a2cd21796592f55cdd2fbb84722c967c066",
    "sql": "SELECT count(*) FROM club_rank WHERE Total < 10",
    "linq": "context.ClubRanks.Where(row => row.Total < 10).Count();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "18b4eb0b92fb7c1a000a5eb50a5673d218f279bd1e1c03f6a355c0e4d2931422",
    "sql": "SELECT name FROM club ORDER BY Start_year ASC",
    "linq": "context.Clubs.OrderBy(row => row.StartYear).Select(row => new { row.Name }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b91cc2d7c5a7731ede7aa7a8859a531b2f242ebf280fb031f3cc23b96df4e2b6",
    "sql": "SELECT name FROM club ORDER BY name DESC",
    "linq": "context.Clubs.OrderByDescending(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e52edb2b9db925860f4c111b9fdb117a00e36f185f6e09e7cb52f65f6361f7e7",
    "sql": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
    "linq": "context.Clubs.Join(context.Players, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name, row.T2.PlayerId }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c7d6f4335a15d00914786982a7383a708b152fb1b686f59b24be6d703a31f12b",
    "sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = \"Right Wing\"",
    "linq": "context.Clubs.Join(context.Players, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Position == \"Right Wing\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a2b59647b65e3d6aacd4ae20ca13084298430b88d95bff66d937b35170be1135",
    "sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.name = \"AIB\"",
    "linq": "context.Clubs.Join(context.Players, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"AIB\").Select(row => (double) row.T2.Points).Average();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "49b149d183c03ae6ca1f190b4974d9452535f202dfeb8616ef1f6c9cafab6ca5",
    "sql": "SELECT POSITION , avg(Points) FROM player GROUP BY POSITION",
    "linq": "context.Players.GroupBy(row => new { row.Position }).Select(group => new { group.Key.Position, AveragePoints = group.Select(row => row.Points).Average() }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cbcc979ed2a2a3348dcada0da5082e3870c2c5098f2893510838fc5bf6dd9a1c",
    "sql": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points) >= 20",
    "linq": "context.Players.GroupBy(row => new { row.Name }).Where(group => group.Average(row => row.Points) >= 20).Select(group => new { group.First().Position }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "64388efc5c0a9d9203352ac663d001701a6341bc1f2018e26fc682ace1dbdd62",
    "sql": "SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type",
    "linq": "context.Competitions.GroupBy(row => new { row.CompetitionType }).Select(group => new { group.Key.CompetitionType, Count = group.Count() }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3e7f642e2f7bfbb611aad5af980db8de78064c663f1f101a657d16f58a5fc38c",
    "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Competitions.GroupBy(row => new { row.CompetitionType }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CompetitionType }).Take(1).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f6bb0a4a2a3ad2a3fc084eb6f216ccebfd234306dbaec9c369cf89f66cff84c0",
    "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*) <= 5",
    "linq": "context.Competitions.GroupBy(row => new { row.CompetitionType }).Where(group => group.Count() <= 5).Select(group => new { group.Key.CompetitionType }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2759e8a5e6cd8b6ffcc929c9cb3561b50fe07432059f8a6bce881d001e7bc471",
    "sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
    "linq": "context.Clubs.Where(row => !context.Players.Select(row => row.ClubId).Contains(row.ClubId)).Select(row => new { row.Name }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d8d0414999c1945d033851ca2de1c5e7bf1c60ab2a6b2fdd1b1be11d9000707d",
    "sql": "SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10",
    "linq": "context.Players.Where(row => row.Points > 20).Select(row => row.Position).Intersect(context.Players.Where(row => row.Points < 10).Select(row => row.Position)).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "29cd890a51f15d6a8e37b33f54218f788064ed8eb59ff6d97208e6c77c4a6219",
    "sql": "SELECT sum(Points) FROM player",
    "linq": "context.Players.Select(row => row.Points).Sum();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "44cb7724cf633f4ed54ee6faa32b0da12d521b8b96f7889480371b4e00d72581",
    "sql": "SELECT count(DISTINCT POSITION) FROM player",
    "linq": "context.Players.Select(row => row.Position).Distinct().Count();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "557ed1316186731a605ec6631d57044c4a0ab372d7391b086e7354eddee427f4",
    "sql": "SELECT name FROM player WHERE points > (SELECT avg(points) FROM player)",
    "linq": "context.Players.Where(row => row.Points > context.Players.Select(row => (double) row.Points).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "49bc6bca55a797a661da099a8189ea1fb49cba0bd9d7b025cf1f7679861ac73a",
    "sql": "SELECT count(*) , POSITION FROM player WHERE points < 30 GROUP BY POSITION",
    "linq": "context.Players.Where(row => row.Points < 30).GroupBy(row => new { row.Position }).Select(group => new { Count = group.Count(), group.Key.Position }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d35ae3bf126280c09eaed0c2ba62b55d9d7e5c56461fa595652d600370ba287e",
    "sql": "SELECT country FROM competition WHERE competition_type = 'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Competitions.Where(row => row.CompetitionType == \"Tournament\").GroupBy(row => new { row.Country }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Country }).Take(1).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7ac66773be84d90be8f857ec63a057b739d17af67f8571ce97f3790f1c221607",
    "sql": "SELECT country FROM competition WHERE competition_type = 'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type = 'Tournament'",
    "linq": "context.Competitions.Where(row => row.CompetitionType == \"Friendly\").Select(row => row.Country).Intersect(context.Competitions.Where(row => row.CompetitionType == \"Tournament\").Select(row => row.Country)).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "12f0c1f37c2e970af1e39f5e08f2b11e1e6539d6cfaa5129f278d428688f6404",
    "sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type = 'Friendly'",
    "linq": "context.Competitions.Select(row => row.Country).Except(context.Competitions.Where(row => row.CompetitionType == \"Friendly\").Select(row => row.Country)).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f2c4fefa07dfac513f05b80d8b4f4a981ee3c2d89b317c2d9c8a3b7f86aa5dd",
    "sql": "SELECT count(*) FROM submission",
    "linq": "context.Submissions.Count();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "133683d999548e0110d6fc5fa1d7b4c3cf6509b9261e9f378a93f0a28c864893",
    "sql": "SELECT Author FROM submission ORDER BY Scores ASC",
    "linq": "context.Submissions.OrderBy(row => row.Scores).Select(row => new { row.Author }).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "79d17392797aa349b6ff512e93f1673d3f60f97e0ac3937715820571786f2a6b",
    "sql": "SELECT Author , College FROM submission",
    "linq": "context.Submissions.Select(row => new { row.Author, row.College }).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9fce5463ce5b234fce3501207f42cb6bff904c60fda9bb40c10b136e254def95",
    "sql": "SELECT Author FROM submission WHERE College = \"Florida\" OR College = \"Temple\"",
    "linq": "context.Submissions.Where(row => row.College == \"Florida\" || row.College == \"Temple\").Select(row => new { row.Author }).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "023196a9040f39ad085bc8a6bdb6ce9eba3106aadf7d66f4d842a04718d13196",
    "sql": "SELECT avg(Scores) FROM submission",
    "linq": "context.Submissions.Select(row => (double) row.Scores).Average();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "44e36d2eb75e024f2839c63b249cc61687ee7ea030e0fa094f21ec81a1ea6788",
    "sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
    "linq": "context.Submissions.OrderByDescending(row => row.Scores).Select(row => new { row.Author }).Take(1).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7fc36f4608d7ed315a12d15b279eaa85d8caba342fdefc9d0b226dd6ecfcdb29",
    "sql": "SELECT College , COUNT(*) FROM submission GROUP BY College",
    "linq": "context.Submissions.GroupBy(row => new { row.College }).Select(group => new { group.Key.College, Count = group.Count() }).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fe17aa9531a0ae405ac9712f20108fb751aa46a41b43560f31acb7ce196dc9cd",
    "sql": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Submissions.GroupBy(row => new { row.College }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.College }).Take(1).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bcd8fdc9d5a18ed4c81bf7a7f3844e0344786ed82a12a13dde9128b22d463250",
    "sql": "SELECT College FROM submission WHERE Scores > 90 INTERSECT SELECT College FROM submission WHERE Scores < 80",
    "linq": "context.Submissions.Where(row => row.Scores > 90).Select(row => row.College).Intersect(context.Submissions.Where(row => row.Scores < 80).Select(row => row.College)).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "93758a986359e26bed644daae1d9eb9232824346ad687f73a8ae2ce1c687346f",
    "sql": "SELECT T2.Author , T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
    "linq": "context.Acceptances.Join(context.Submissions, T1 => T1.SubmissionId, T2 => T2.SubmissionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Author, row.T1.Result }).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a6c5392846e8d59b4aa109ba12628d0c858935fde79f08685045cd19a9c076e1",
    "sql": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1",
    "linq": "context.Acceptances.Join(context.Submissions, T1 => T1.SubmissionId, T2 => T2.SubmissionId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Scores).Select(row => new { row.T1.Result }).Take(1).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2d215de5ccc2163ed4ec5ff255d88546ab3dac62453bafd0eb308c22c6a9ff57",
    "sql": "SELECT T2.Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author",
    "linq": "context.Acceptances.Join(context.Submissions, T1 => T1.SubmissionId, T2 => T2.SubmissionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Author }).Select(group => new { group.Key.Author, CountDistinctWorkshopId = group.Select(row => row.T1.WorkshopId).Distinct().Count() }).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2332ee5bf45ae4545a8807a798daa0caabc691673bf869481341753e7b798088",
    "sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id) > 1",
    "linq": "context.Acceptances.Join(context.Submissions, T1 => T1.SubmissionId, T2 => T2.SubmissionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Author }).Where(group => group.Count(row => row.T1.WorkshopId) > 1).Select(group => new { group.Key.Author }).ToList();",
    "db_name": "workshop_paper",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,204): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.69",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f17a9f13559a0ec6c0ec46b61406141dcf2e9dfdb238460e343eeae69dab4961",
    "sql": "SELECT Date , Venue FROM workshop ORDER BY Venue",
    "linq": "context.Workshops.OrderBy(row => row.Venue).Select(row => new { row.Date, row.Venue }).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "865866c6e4c01d092c84a02af911fba3a187683704212424f73770afe4a76a51",
    "sql": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
    "linq": "context.Submissions.Where(row => !context.Acceptances.Select(row => row.SubmissionId).Contains(row.SubmissionId)).Select(row => new { row.Author }).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "653e6486501a5fff3a9a415db24653babbde475effa45bcac12b7a9ffdab88d6",
    "sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
    "linq": "context.Orders.OrderByDescending(row => row.DateOrderPlaced).Select(row => new { row.OrderId }).Take(1).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fbee8aad6dc356daa12b07d0709f6fbf2b27504441d998b436bcc771708b4f17",
    "sql": "SELECT order_id , customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
    "linq": "context.Orders.OrderBy(row => row.DateOrderPlaced).Select(row => new { row.OrderId, row.CustomerId }).Take(1).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c1528458235e3710fafc4bfc334f671b7b9cf6c47b200b92a6ec22f2ea3acec2",
    "sql": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"",
    "linq": "context.Shipments.Where(row => row.ShipmentTrackingNumber == \"3452\").Select(row => new { row.OrderId }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9cc28bea36bcdbee33a6dd4c2c1bb5ea2c70ef6a292a4fed1f4f0c76d8aaedf6",
    "sql": "SELECT order_item_id FROM order_items WHERE product_id = 11",
    "linq": "context.OrderItems.Where(row => row.ProductId == 11).Select(row => new { row.OrderItemId }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a1368fabd6cc9b1774a295bbf310bd195ef05567c6f34fbf49295145130ba613",
    "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"",
    "linq": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatus == \"Packing\").Select(row => new { row.T1.CustomerName }).Distinct().ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e66a0868f6dc723e81767d2ece0a533f91ade00a2ababa1feb4f48c709441ca0",
    "sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"",
    "linq": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatus == \"On Road\").Select(row => new { row.T1.CustomerDetails }).Distinct().ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b8eb45d4ce2060ac7003ac95c57f2a1fad54891135acaeb3cc5e44e0d722352f",
    "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.CustomerName }).Take(1).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a8ea9b64170ce2a7f87aa1eba9fead17731682ff30fba1975e77d4b90f47f2b7",
    "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CustomerId }).Take(1).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bf4337e6ca4a70eaff3c66015e2b87ab2814a2a2b3e2e2a5a6c912e21f7086b2",
    "sql": "SELECT T2.order_id , T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
    "linq": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CustomerName == \"Jeramie\").Select(row => new { row.T2.OrderId, row.T2.OrderStatus }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "37df142ad26e51c789b47c3f71fe32574d1a1a8c6e7dd526346f6f8f2cf43fc1",
    "sql": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
    "linq": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CustomerName == \"Jeramie\").Select(row => new { row.T2.DateOrderPlaced }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "865c89f75ca7e1ffbc5b226d2e94cf353ae8086c870f8eae385aa8d99cc46c8f",
    "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
    "linq": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DateOrderPlaced >= \"2009-01-01\" && row.T2.DateOrderPlaced <= \"2010-01-01\").Select(row => new { row.T1.CustomerName }).ToList();",
    "db_name": "tracking_orders",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,176): error CS0019: Operator '<=' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.67",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8335973c46978c18946bdfa8c43e860ab9d79100cc25f7c59dd4c4b82dd66bba",
    "sql": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
    "linq": "context.Orders.Join(context.OrderItems, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DateOrderPlaced >= \"1975-01-01\" && row.T1.DateOrderPlaced <= \"1976-01-01\").Select(row => new { row.T2.ProductId }).Distinct().ToList();",
    "db_name": "tracking_orders",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,171): error CS0019: Operator '<=' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.49",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "18234a5c833ca78cb373acd85b16284833427ceba86c67841a9161f623fc43c9",
    "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
    "linq": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatus == \"On Road\").Select(row => row.T1.CustomerName).Intersect(context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatus == \"Shipped\").Select(row => row.T1.CustomerName)).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "880b52f7c2465ba26a146e07f7a58f94778e8c9a5469e7375eec8b36ca7975bd",
    "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
    "linq": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatus == \"On Road\").Select(row => row.T1.CustomerId).Intersect(context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatus == \"Shipped\").Select(row => row.T1.CustomerId)).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "168542d8a8604d4cebcd7390b550237ae70414d157aadc4d0ddacafa28851830",
    "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
    "linq": "context.Orders.Join(context.Shipments, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ShipmentTrackingNumber == \"3452\").Select(row => new { row.T1.DateOrderPlaced }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e0f00841a70c6aa39724428138548202c64e3400268a8a520eb51e1b81b1b906",
    "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
    "linq": "context.Orders.Join(context.Shipments, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.InvoiceNumber == 10).Select(row => new { row.T1.DateOrderPlaced }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b317324d431ff5daae3e3bef67149726b6f5cd6db8defa3150514a3b8f59ece1",
    "sql": "SELECT count(*) , T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
    "linq": "context.Orders.Join(context.OrderItems, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Join(context.Products, joined => joined.T2.ProductId, T3 => T3.ProductId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.ProductId }).Select(group => new { Count = group.Count(), group.Key.ProductId }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d760eff3284b4eaad689a84f1f42fbf5c97e8b7e29ba9bf2f15eedd3ea330c66",
    "sql": "SELECT T3.product_name , count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
    "linq": "context.Orders.Join(context.OrderItems, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Join(context.Products, joined => joined.T2.ProductId, T3 => T3.ProductId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.ProductId }).Select(group => new { group.First().T3.ProductName, Count = group.Count() }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d826b92555fa1409faf255352de8ff6f0d9f8598488f72607486c2199be6370f",
    "sql": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
    "linq": "context.Shipments.Where(row => row.ShipmentDate > \"2000-01-01\").Select(row => new { row.OrderId }).ToList();",
    "db_name": "tracking_orders",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.52",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fc1c8972fa2a717affad863d5ddd7ae9c62b5de234dca35bede16c8409bf1206",
    "sql": "SELECT order_id FROM shipments WHERE shipment_date = (SELECT max(shipment_date) FROM shipments)",
    "linq": "context.Shipments.Where(row => row.ShipmentDate == context.Shipments.Select(row => row.ShipmentDate).Max()).Select(row => new { row.OrderId }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4ea87618cc4b8eba5938996a4239a43c68c212ac2119f93b3428886d402303c8",
    "sql": "SELECT DISTINCT product_name FROM products ORDER BY product_name",
    "linq": "context.Products.OrderBy(row => row.ProductName).Select(row => new { row.ProductName }).Distinct().ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "04166bd0d28744f125a61dc7599b3e2db9e5e71fe5438cf4feb9f59bfc84f869",
    "sql": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
    "linq": "context.Orders.OrderBy(row => row.DateOrderPlaced).Select(row => new { row.OrderId }).Distinct().ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5808b135a3f47a836f4ade4c555a5a1fcc45b8894aca682fc47e997e41329aa8",
    "sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Orders.Join(context.OrderItems, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.OrderId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.OrderId }).Take(1).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a83717a4136e32512abb92ab1660a22dae9800aa6e7a87b6bfb90594e15212a2",
    "sql": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
    "linq": "context.Invoices.Where(row => row.InvoiceDate < \"1989-09-03\" || row.InvoiceDate > \"2007-12-25\").Select(row => new { row.InvoiceNumber }).ToList();",
    "db_name": "tracking_orders",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,76): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.52",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "08b10b3b47b6b350418ea8da9cb4409a2028bdcae8df9e6d799d92f6ebdf0256",
    "sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
    "linq": "context.Invoices.Where(row => row.InvoiceDate < \"1989-09-03\" || row.InvoiceDate > \"2007-12-25\").Select(row => new { row.InvoiceDetails }).Distinct().ToList();",
    "db_name": "tracking_orders",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,76): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.77",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3e75c08bb0cbeb55a1a656ae590275aecdfbb39df2bf684ad08be8c057a43e32",
    "sql": "SELECT T2.customer_name , count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*) >= 2",
    "linq": "context.Orders.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CustomerId }).Select(group => new { group.First().T2.CustomerName, Count = group.Count() }).Where(group => group.Count >= 2).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aa19f2064c83a655a38f031dee8050d79a7beff623a894c757148cba2f11aea7",
    "sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*) <= 2",
    "linq": "context.Orders.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CustomerId }).Where(group => group.Count() <= 2).Select(group => new { group.First().T2.CustomerName }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9e5f094f979896b0a09b50085e172cd9a6ae80993001b51e1874ae013e43a3ba",
    "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*) >= 1",
    "linq": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.OrderItems, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Products, joined => joined.T3.ProductId, T4 => T4.ProductId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.ProductName == \"food\").GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 1).Select(group => new { group.First().T1.CustomerName }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6ea65ba03347339b142e49cbc655495bc692046560ce81632172fdf21c78bbd3",
    "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*) >= 1",
    "linq": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.OrderItems, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Products, joined => joined.T3.ProductId, T4 => T4.ProductId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T3.OrderItemStatus == \"Cancel\" && row.T4.ProductName == \"food\").GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 1).Select(group => new { group.First().T1.CustomerName }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "17d9a64ed8216c8d1f11c5cd0c407d4a874259788706a94f5a02b14e18b594eb",
    "sql": "SELECT count(*) FROM building",
    "linq": "context.Buildings.Count();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "44bbaefabb823daefc9d94206cc1625084b5253e8e620fcb35d0a39b2d9e6120",
    "sql": "SELECT name , street_address , floors FROM building ORDER BY floors",
    "linq": "context.Buildings.OrderBy(row => row.Floors).Select(row => new { row.Name, row.StreetAddress, row.Floors }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cbd057ff2b8836a368beab920494890891f775248c0b41cf1caf1413e113484f",
    "sql": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1",
    "linq": "context.Buildings.OrderByDescending(row => row.HeightFeet).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "66203c05e2419eb1a9405ff233263a59f2b6f7e045769ff9f81f90ad6ed40b19",
    "sql": "SELECT avg(floors) , max(floors) , min(floors) FROM building",
    "linq": "context.Buildings.GroupBy(row => 1).Select(group => new { AverageFloors = group.Select(row => row.Floors).Average(), MaxFloors = group.Select(row => row.Floors).Max(), MinFloors = group.Select(row => row.Floors).Min() }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "50f9726c7d98044eee4d3fbe9a7453a22f2bfd0d948bad9f12c8f5f66f0b96ec",
    "sql": "SELECT count(*) FROM building WHERE height_feet > (SELECT avg(height_feet) FROM building) OR floors > (SELECT avg(floors) FROM building)",
    "linq": "context.Buildings.Where(row => row.HeightFeet > context.Buildings.Select(row => row.HeightFeet).Average() || row.Floors > context.Buildings.Select(row => row.Floors).Average()).Count();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c4db588a9a98b2372651de970f6ed211dab365eb827ad39062f68cd591eeb2b2",
    "sql": "SELECT name FROM building WHERE height_feet >= 200 AND floors >= 20",
    "linq": "context.Buildings.Where(row => row.HeightFeet >= 200 && row.Floors >= 20).Select(row => new { row.Name }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e624b28aa35e018e11f645530ab92a8f1998cd157de558d0758cd1e3440ba339",
    "sql": "SELECT institution , LOCATION FROM institution WHERE founded > 1990 AND TYPE = 'Private'",
    "linq": "context.Institutions.Where(row => row.Founded > 1990 && row.Type == \"Private\").Select(row => new { row.Institution1, row.Location }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "08b9b1d0bf55f0b75aa1a76ec331b6440572f3383a89074cc0943301d1dc333f",
    "sql": "SELECT TYPE , count(*) , sum(enrollment) FROM institution GROUP BY TYPE",
    "linq": "context.Institutions.GroupBy(row => new { row.Type }).Select(group => new { group.Key.Type, Count = group.Count(), SumEnrollment = group.Select(row => row.Enrollment).Sum() }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ad9ddcbf7a97c6852081bedb8ef7707a0af745ed0b106de53bc611778ac5e0c8",
    "sql": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Institutions.GroupBy(row => new { row.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "96d02943f5af823bbf610d50c4d5bae0d77e8c1c1aa6360316b120ac677870c4",
    "sql": "SELECT TYPE FROM institution WHERE founded > 1990 AND enrollment >= 1000",
    "linq": "context.Institutions.Where(row => row.Founded > 1990 && row.Enrollment >= 1000).Select(row => new { row.Type }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2910e85022d82a441c0fae61b0146242889ed23ac2d327f0291fbdc4cda8cc53",
    "sql": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)",
    "linq": "context.Buildings.Where(row => !context.Institutions.Select(row => row.BuildingId).Contains(row.BuildingId)).Select(row => new { row.Name }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "228e57e964aee18ef96709a3e7fb16bff31e6e5e1c719e15503ec5ac4b18b1e8",
    "sql": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded = 2003",
    "linq": "context.Buildings.Select(row => row.Name).Except(context.Buildings.Join(context.Institutions, T1 => T1.BuildingId, T2 => T2.BuildingId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Founded == 2003).Select(row => row.T1.Name)).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "329c3c7794796ab7a51f6dbce8464529b6fc70a9757ebd94046e857b17da96d9",
    "sql": "SELECT T1.name , count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id",
    "linq": "context.Buildings.Join(context.Institutions, T1 => T1.BuildingId, T2 => T2.BuildingId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.BuildingId }).Select(group => new { group.First().T1.Name, Count = group.Count() }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8b8ced8d28db23ad9596b019b2801371eccbda1a1086c00622a66463c8aafca0",
    "sql": "SELECT T1.name , T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded > 1880 GROUP BY T1.building_id HAVING count(*) >= 2",
    "linq": "context.Buildings.Join(context.Institutions, T1 => T1.BuildingId, T2 => T2.BuildingId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Founded > 1880).GroupBy(row => new { row.T1.BuildingId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.Name, group.First().T1.HeightFeet }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cde1935fc619a2dbd5fd2fd23571fbd60900424023b9ac906528748b32df3b6b",
    "sql": "SELECT DISTINCT TYPE FROM institution",
    "linq": "context.Institutions.Select(row => new { row.Type }).Distinct().ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e78278458ccd332cae1ed4fb231e70f81342eff7b1056bff4e4ec129796a2e6b",
    "sql": "SELECT T1.institution , count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id",
    "linq": "context.Institutions.Join(context.Proteins, T1 => T1.InstitutionId, T2 => T2.InstitutionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.InstitutionId }).Select(group => new { group.First().T1.Institution1, Count = group.Count() }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5f18b5d63419186c4512c5bbe33604b2ab4e73b1474df8a5401711405c94de2f",
    "sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id WHERE T1.founded > 1880 OR T1.type = 'Private'",
    "linq": "context.Institutions.Join(context.Proteins, T1 => T1.InstitutionId, T2 => T2.InstitutionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Founded > 1880 || row.T1.Type == \"Private\").Count();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0beb281f174b298c348201de79834ed322d3395b8adddd08d083011b482d2bd1",
    "sql": "SELECT T2.protein_name , T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id",
    "linq": "context.Institutions.Join(context.Proteins, T1 => T1.InstitutionId, T2 => T2.InstitutionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.ProteinName, row.T1.Institution1 }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "912f1318a174be7717950b5a506b2c573dbb66fc4a7fc26d19c82116c78c9107",
    "sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id JOIN building AS T3 ON T3.building_id = T1.building_id WHERE T3.floors >= 20",
    "linq": "context.Institutions.Join(context.Proteins, T1 => T1.InstitutionId, T2 => T2.InstitutionId, (T1, T2) => new { T1, T2 }).Join(context.Buildings, joined => joined.T1.BuildingId, T3 => T3.BuildingId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Floors >= 20).Count();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7208880dc2709235d2af8a3771140ae610354cc4ef79985ec32fc09ba091c410",
    "sql": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)",
    "linq": "context.Institutions.Where(row => !context.Proteins.Select(row => row.InstitutionId).Contains(row.InstitutionId)).Count();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fb2d24a1d4088e3dfe617787dc2f6d3bd1f2626c7a33f3f4219cb4b3ea6d9171",
    "sql": "SELECT count(*) FROM Faculty",
    "linq": "context.Faculties.Count();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ae1f3ec712f03e97a2a3a66c1039fe318dccaccdd2fc8ba3a21d7c8176bb5970",
    "sql": "SELECT DISTINCT rank FROM Faculty",
    "linq": "context.Faculties.Select(row => new { row.Rank }).Distinct().ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f2eb222e2f70c1d97f449f76377625368e17ef0b031bb9b9a49fc2b308a46d82",
    "sql": "SELECT DISTINCT building FROM Faculty",
    "linq": "context.Faculties.Select(row => new { row.Building }).Distinct().ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "15b65ed89b80af3471538297703545d12963f733d900014cd3634a99a609af4c",
    "sql": "SELECT rank , Fname , Lname FROM Faculty",
    "linq": "context.Faculties.Select(row => new { row.Rank, row.Fname, row.Lname }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "08e15fa8967e5be380397a573ab6ec59b12ad41d90cd00c19548893f1372d3ca",
    "sql": "SELECT Fname , Lname , phone FROM Faculty WHERE Sex = 'F'",
    "linq": "context.Faculties.Where(row => row.Sex == \"F\").Select(row => new { row.Fname, row.Lname, row.Phone }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3a496643c15c75cf9c13c699952764ce1e0abc5d38c1e190f07de0c9628174bd",
    "sql": "SELECT FacID FROM Faculty WHERE Sex = 'M'",
    "linq": "context.Faculties.Where(row => row.Sex == \"M\").Select(row => new { row.FacId }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "431c8a30dce33facc25b2b3c280558a25e6f26e26fd4c9b33f66ea8d8eb80ed9",
    "sql": "SELECT count(*) FROM Faculty WHERE Sex = 'F' AND Rank = \"Professor\"",
    "linq": "context.Faculties.Where(row => row.Sex == \"F\" && row.Rank == \"Professor\").Count();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "206f52a6e9fd031351dfd2f3fdc256b71c01c9fdba117883e5954762b5dd0926",
    "sql": "SELECT phone , room , building FROM Faculty WHERE Fname = \"Jerry\" AND Lname = \"Prince\"",
    "linq": "context.Faculties.Where(row => row.Fname == \"Jerry\" && row.Lname == \"Prince\").Select(row => new { row.Phone, row.Room, row.Building }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3d5c60b6e68fb1208bdc280ab0d71050d3f539c41d3b9f74089bf2ffc6050670",
    "sql": "SELECT count(*) FROM Faculty WHERE Rank = \"Professor\" AND building = \"NEB\"",
    "linq": "context.Faculties.Where(row => row.Rank == \"Professor\" && row.Building == \"NEB\").Count();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d1ebccef269232321f63ca7fdb15df11971c1fbf371ec4056004782634ebd7c6",
    "sql": "SELECT fname , lname FROM Faculty WHERE Rank = \"Instructor\"",
    "linq": "context.Faculties.Where(row => row.Rank == \"Instructor\").Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9746f2a793f2361434504cc6621c7e1aa903710d51a6104fd696f9b526e3ba02",
    "sql": "SELECT building , count(*) FROM Faculty GROUP BY building",
    "linq": "context.Faculties.GroupBy(row => new { row.Building }).Select(group => new { group.Key.Building, Count = group.Count() }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e7e2c9a2f514c99fbb60c9196d4f9e52ada75a33349e391f088ad6974ebfb678",
    "sql": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Faculties.GroupBy(row => new { row.Building }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Building }).Take(1).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f078aa6489da74b32f0b5af4f5f615be3e5bceb09728c25ce17519e97251eccb",
    "sql": "SELECT building FROM Faculty WHERE rank = \"Professor\" GROUP BY building HAVING count(*) >= 10",
    "linq": "context.Faculties.Where(row => row.Rank == \"Professor\").GroupBy(row => new { row.Building }).Where(group => group.Count() >= 10).Select(group => new { group.Key.Building }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "004572a19f9ab745051ecd4147d87f851ccaee3b93e708a836a2fb3e00496e6f",
    "sql": "SELECT rank , count(*) FROM Faculty GROUP BY rank",
    "linq": "context.Faculties.GroupBy(row => new { row.Rank }).Select(group => new { group.Key.Rank, Count = group.Count() }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "544abc810f520150f2f6ff185b58b0c12c2ade03adec07c59589d8375ec90447",
    "sql": "SELECT rank , sex , count(*) FROM Faculty GROUP BY rank , sex",
    "linq": "context.Faculties.GroupBy(row => new { row.Rank, row.Sex }).Select(group => new { group.Key.Rank, group.Key.Sex, Count = group.Count() }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "23ad51aad836ff11d3488b0f969df852a206bb272a74b63ad08aaf2e87575a6b",
    "sql": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.Faculties.GroupBy(row => new { row.Rank }).OrderBy(group => group.Count()).Select(group => new { group.Key.Rank }).Take(1).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b613d2f7c2760b77563abaebc96588ecd9e66cc8e770e73441c53de8e694bb39",
    "sql": "SELECT sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex",
    "linq": "context.Faculties.Where(row => row.Rank == \"AsstProf\").GroupBy(row => new { row.Sex }).Select(group => new { group.Key.Sex, Count = group.Count() }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5b569fb970ee3583f15584dec3fbcc2d591cff10436b9e07807939df3cc9eccf",
    "sql": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T2.fname = \"Linda\" AND T2.lname = \"Smith\"",
    "linq": "context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Fname == \"Linda\" && row.T2.Lname == \"Smith\").Select(row => new { row.T1.Fname, row.T1.Lname }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "74bbc9d354024062155d01edd3b5d83b39b791b1223d90677de13262fc2ca69d",
    "sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.rank = \"Professor\"",
    "linq": "context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Rank == \"Professor\").Select(row => new { row.T2.StuId }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1f36ecbe990be6b60bbce8ecd9f4ef25a258a1dec9b6beb531b21fff524d3c69",
    "sql": "SELECT T2.fname , T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.fname = \"Michael\" AND T1.lname = \"Goodrich\"",
    "linq": "context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Fname == \"Michael\" && row.T1.Lname == \"Goodrich\").Select(row => new { row.T2.Fname, row.T2.Lname }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "be3944a73e8dfd5fb47f7a027b14ed9d879e8afd482ca66e9e2bd6bf8c97baac",
    "sql": "SELECT T1.FacID , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID",
    "linq": "context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).Select(group => new { group.Key.FacId, Count = group.Count() }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c2d041e0364f3ca8ee46f5308315546c3a1af82d0c2efba1fdba85541bb5b052",
    "sql": "SELECT T1.rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank",
    "linq": "context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Rank }).Select(group => new { group.Key.Rank, Count = group.Count() }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2c567fbd7f4c7c8934d260267ef85c35967654f89cb5f280b3f72d0f50295f70",
    "sql": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Fname, group.First().T1.Lname }).Take(1).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9bcdd40a479a0924e97beb5524d0e9c74986a0f2b026c202f1fae0b0f252df57",
    "sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID HAVING count(*) >= 2",
    "linq": "context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.FacId }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d647bba6edfcda0365a31212d82f3d1ee78ecf4af4751c9eb9a300dcd719fd6a",
    "sql": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student",
    "linq": "context.Faculties.Select(row => row.FacId).Except(context.Students.Where(row => row.Advisor.HasValue).Select(row => row.Advisor.Value)).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fcf448c971ecc9e634b67f8c16fd31c3ecf616aa2f855a38c1eb125731055055",
    "sql": "SELECT activity_name FROM Activity",
    "linq": "context.Activities.Select(row => new { row.ActivityName }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d639f72de4e0b9fbf7e688e03fa6835ba1a1275a5871cc25aa64ebe962c4d2f8",
    "sql": "SELECT count(*) FROM Activity",
    "linq": "context.Activities.Count();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b48e5d11d062c93307ca655dba90ba17e202ac610c4b9b36dfadf7a2b9a968a5",
    "sql": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in",
    "linq": "context.FacultyParticipatesIns.Select(row => row.FacId).Distinct().Count();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4c8a6c6d5c89fd1f6885b9559093c9f6fcc11bcb1eac2d2aa018395ef736211a",
    "sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in",
    "linq": "context.Faculties.Select(row => row.FacId).Except(context.FacultyParticipatesIns.Where(row => row.FacId.HasValue).Select(row => row.FacId.Value)).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1c42c15e0f0629e979e0e94ebf19bf880c2d243444e19acfc7b52514b42acfe9",
    "sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
    "linq": "context.FacultyParticipatesIns.Where(row => row.FacId.HasValue).Select(row => row.FacId.Value).Intersect(context.Students.Where(row => row.Advisor.HasValue).Select(row => row.Advisor.Value)).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b7b77c0a0d577d8e643c9e275364575912fd6143b37a8b5eaeb40fd4942a5381",
    "sql": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID WHERE T1.fname = \"Mark\" AND T1.lname = \"Giuliano\"",
    "linq": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Fname == \"Mark\" && row.T1.Lname == \"Giuliano\").Count();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eb3d43fdf8d0685b0e6041e5b4e2cb47cdff257dad4beaaedd81ac52bb8c0c89",
    "sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = \"Mark\" AND T1.lname = \"Giuliano\"",
    "linq": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Join(context.Activities, joined => joined.T2.Actid, T3 => T3.Actid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Fname == \"Mark\" && row.T1.Lname == \"Giuliano\").Select(row => new { row.T3.ActivityName }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9abe936dfd5fc334922862aeb5384ea9df5835af140877744c46d91491ad8f94",
    "sql": "SELECT T1.fname , T1.lname , count(*) , T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID",
    "linq": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).Select(group => new { group.First().T1.Fname, group.First().T1.Lname, Count = group.Count(), group.Key.FacId }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "57db703db622393f6cf3afd212ed9b8656096fd26bc1bb402589c55338514c8d",
    "sql": "SELECT T1.activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID",
    "linq": "context.Activities.Join(context.FacultyParticipatesIns, T1 => T1.Actid, T2 => T2.Actid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Actid }).Select(group => new { group.First().T1.ActivityName, Count = group.Count() }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2df4c0940d27eca4228d3768387ee55fffb2352662a4db66d18bdf537e2ec682",
    "sql": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Fname, group.First().T1.Lname }).Take(1).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8ec0acfc43db9609bfa6928c95cb48dea870d41824c9ca811e53fa5b7d01c5fc",
    "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Activities.Join(context.FacultyParticipatesIns, T1 => T1.Actid, T2 => T2.Actid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Actid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.ActivityName }).Take(1).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3421ed019accd588cc51640ae9aefc228a7eb347f9299150717369d369db9fbf",
    "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
    "linq": "context.Students.Select(row => row.StuId).Except(context.ParticipatesIns.Where(row => row.Stuid.HasValue).Select(row => row.Stuid.Value)).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b16ae7204fe8aea1578ea14f4f6fb89b8420e2c311a13e4ad9f89cec6e48905b",
    "sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age < 20",
    "linq": "context.ParticipatesIns.Where(row => row.Stuid.HasValue).Select(row => row.Stuid.Value).Intersect(context.Students.Where(row => row.Age < 20).Select(row => row.StuId)).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "18155ea2c8060325a159a0f5afbe996b81bc4317ae476259a525cb25d1bc4d33",
    "sql": "SELECT T1.fname , T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Students.Join(context.ParticipatesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StuId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Fname, group.First().T1.Lname }).Take(1).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0daea745a7af59f9033f4c0ab5214e9ff703cd29ea2218d2c124e03b6993f787",
    "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Activities.Join(context.ParticipatesIns, T1 => T1.Actid, T2 => T2.Actid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Actid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.ActivityName }).Take(1).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7941886a2dd8686c7b8bc9bbddd61057c6a9bb3efe13c3de440f9a46ff58fce7",
    "sql": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'",
    "linq": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => new { Pair1 = T1.FacId, Pair2 = T2.Actid }, T2 => new { Pair1 = T2.FacId, Pair2 = T2.Actid }, (T1, T2) => new { T1, T2 }).SelectMany(s => context.Activities, (joined, T3) => new { joined.T2, T3 }).Where(row => row.T3.ActivityName == \"Canoeing\" || row.T3.ActivityName == \"Kayaking\").Select(row => new { row.T1.Lname }).Distinct().ToList();",
    "db_name": "activity_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,105): error CS0103: The name 'T2' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.85",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ce513e077009b68c67e841b4749f6a1841a210aab74f3367b6bfd7dec92d9afc",
    "sql": "SELECT lname FROM faculty WHERE rank = 'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'",
    "linq": "context.Faculties.Where(row => row.Rank == \"Professor\").Select(row => row.Lname).Except(context.Faculties.Join(context.FacultyParticipatesIns, T1 => new { Pair1 = T1.FacId, Pair2 = T2.Actid }, T2 => new { Pair1 = T2.FacId, Pair2 = T2.Actid }, (T1, T2) => new { T1, T2 }).SelectMany(s => context.Activities, (joined, T3) => new { joined.T2, T3 }).Where(row => row.T3.ActivityName == \"Canoeing\" || row.T3.ActivityName == \"Kayaking\").Select(row => row.T1.Lname).Distinct()).ToList();",
    "db_name": "activity_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,193): error CS0103: The name 'T2' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.85",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fbb5de728349578be052225ebf7a6c0cebd9b65e59587db75b74cd55b7604a41",
    "sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'",
    "linq": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => new { Pair1 = T1.FacId, Pair2 = T2.Actid }, T2 => new { Pair1 = T2.FacId, Pair2 = T2.Actid }, (T1, T2) => new { T1, T2 }).SelectMany(s => context.Activities, (joined, T3) => new { joined.T2, T3 }).Where(row => row.T3.ActivityName == \"Canoeing\").Select(row => row.T1.Lname).Intersect(context.Faculties.Join(context.FacultyParticipatesIns, T1 => new { Pair1 = T1.FacId, Pair2 = T2.Actid }, T2 => new { Pair1 = T2.FacId, Pair2 = T2.Actid }, (T1, T2) => new { T1, T2 }).SelectMany(s => context.Activities, (joined, T3) => new { joined.T2, T3 }).Where(row => row.T3.ActivityName == \"Kayaking\").Select(row => row.T1.Lname)).ToList();",
    "db_name": "activity_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,449): error CS0103: The name 'T2' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.54",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "25c411b3f4cebd21f3a25bce06824d8ec24ebd83be5bfc82b2c55a69c40a2967",
    "sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Kayaking'",
    "linq": "context.ParticipatesIns.Join(context.Activities, T2 => T2.Actid, T2 => T2.Actid, (T2, T2) => new { T2, T2 }).Where(row => row.T2.ActivityName == \"Canoeing\").Where(row => row.T1.Stuid.HasValue).Select(row => T1Stuid = row.T1.Stuid.Value).Intersect(context.ParticipatesIns.Join(context.Activities, T2 => T2.Actid, T2 => T2.Actid, (T2, T2) => new { T2, T2 }).Where(row => row.T2.ActivityName == \"Kayaking\").Where(row => row.T1.Stuid.HasValue).Select(row => T1Stuid = row.T1.Stuid.Value)).ToList();",
    "db_name": "activity_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,466): error CS0103: The name 'T1Stuid' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    10 Error(s)\n\nTime Elapsed 00:00:01.53",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4c9a734283e316effc5be4a20c3c3c286d019e09c3ba4d555144a5ba032bdc21",
    "sql": "SELECT count(*) FROM entrepreneur",
    "linq": "context.Entrepreneurs.Count();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "73dbb7fd0de967926b43b3f183df837013f95607d05813def6cad355a2614148",
    "sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC",
    "linq": "context.Entrepreneurs.OrderByDescending(row => row.MoneyRequested).Select(row => new { row.Company }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fe0facd41abdc876c441cd937cfaf705d1e24fb35950848c3eb82e341e1a5ff4",
    "sql": "SELECT Company , Investor FROM entrepreneur",
    "linq": "context.Entrepreneurs.Select(row => new { row.Company, row.Investor }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d6bb580a690366fc17c41f7bfc6b49555e7f2e95762f711f551836796b3a9d94",
    "sql": "SELECT avg(Money_Requested) FROM entrepreneur",
    "linq": "context.Entrepreneurs.Select(row => (double) row.MoneyRequested).Average();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8d040988f827237ad23454f015af2854f6f8deac6aac91c0bdf34340f5f7bc83",
    "sql": "SELECT Name FROM People ORDER BY Weight ASC",
    "linq": "context.People.OrderBy(row => row.Weight).Select(row => new { row.Name }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e1fd5124d1dc181733866742cbfb80f69c6c807401bb21baf000d4c82ddbd06c",
    "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
    "linq": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "05089155496d93ed88880334250d928f2af20788f91535b0863778c7466f6b78",
    "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
    "linq": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Investor != \"Rachel Elnaugh\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e837ab52877a4197f9df8eb8582cdee9f4635bc4ac232bd64a60d4be23a8841a",
    "sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
    "linq": "context.People.OrderBy(row => row.Height).Select(row => new { row.Weight }).Take(1).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "df5b5ee6e1518d5c5de47c2cde668a498aa702a946b5e8002f03055c8d4cce54",
    "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
    "linq": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Weight).Select(row => new { row.T2.Name }).Take(1).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8442fc62c3a1e3687af128cef52483ff09653c08e07725827373b86c15e2ee19",
    "sql": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85",
    "linq": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Height > 1.85).Select(row => row.T1.MoneyRequested).Sum();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a4d05b1b5f1477d10a2f3f9f14d3337416be66cbb29d315e4af4771039cd94df",
    "sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"",
    "linq": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Investor == \"Simon Woodroffe\" || row.T1.Investor == \"Peter Jones\").Select(row => new { row.T2.DateOfBirth }).ToList();",
    "db_name": "entrepreneur",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 1972-02-06}, {0: 1981-11-21}]\", linq_results: \"[{0: 06.02.1972}, {0: 21.11.1981}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "87ed6809e291bad571f3df98cca1563266adef0eedc76c70bf8d5af9d866c183",
    "sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested DESC",
    "linq": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.MoneyRequested).Select(row => new { row.T2.Weight }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "02ccfcb8506efe04ac3d801777a83f48e13ca642191c1791342ef49923bf1008",
    "sql": "SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "linq": "context.Entrepreneurs.GroupBy(row => new { row.Investor }).Select(group => new { group.Key.Investor, Count = group.Count() }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b13d867963921c64ab6ef34d58af160a45755c5f4f9b7a03d824b27dff90cb0e",
    "sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Entrepreneurs.GroupBy(row => new { row.Investor }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Investor }).Take(1).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9ac360a127cd8dff0524f6ef88f510359a63e34d4c5352d79497a064e1d40ad1",
    "sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*) >= 2",
    "linq": "context.Entrepreneurs.GroupBy(row => new { row.Investor }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Investor }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a7d0a188c49fbb358d3ef35173e8bcee01eabc28f6337b2b821b8f37d6e1d6c4",
    "sql": "SELECT T2.Name , T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested",
    "linq": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T1.MoneyRequested).Select(row => new { row.T2.Name, row.T1.Company }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c783796bc5de8fb92315e306556fe5e12694fd5b0902bb3d930f540e2aca396b",
    "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
    "linq": "context.People.Where(row => !context.Entrepreneurs.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c0aa1aee81a35e6aa997463d34f9efb16254b95e35d8ddd9dd17f1bdd0c3363a",
    "sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000",
    "linq": "context.Entrepreneurs.Where(row => row.MoneyRequested > 140000).Select(row => row.Investor).Intersect(context.Entrepreneurs.Where(row => row.MoneyRequested < 120000).Select(row => row.Investor)).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5b4adb3c297008cdfd35612f306403255555ef70e33b45479f6a5ac690cfc38c",
    "sql": "SELECT count(DISTINCT Company) FROM entrepreneur",
    "linq": "context.Entrepreneurs.Select(row => row.Company).Distinct().Count();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9e7bbcedb788882dfd31993a3deba37aeb6be2627e1f2fac6c589e97b7502c78",
    "sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
    "linq": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Height).Select(row => new { row.T1.Company }).Take(1).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1cb6de561593577037146137d10cd9f78954874b17fddfed7ad40740b0b32423",
    "sql": "SELECT count(*) FROM Apartment_Bookings",
    "linq": "context.ApartmentBookings.Count();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d96df594e0ae3c33cd79b91f434f7d0b088d3658c118d9ae8625b37c0f28d0ba",
    "sql": "SELECT booking_start_date , booking_end_date FROM Apartment_Bookings",
    "linq": "context.ApartmentBookings.Select(row => new { row.BookingStartDate, row.BookingEndDate }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5e4b099817cc7599ab6ca78619c8e8658e667352d49236b8b3f39b514d858ba1",
    "sql": "SELECT DISTINCT building_description FROM Apartment_Buildings",
    "linq": "context.ApartmentBuildings.Select(row => new { row.BuildingDescription }).Distinct().ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9d3d46e94a54e1ae17eef259f66aa16caa0001df93da7beacb9d99dd31635ec7",
    "sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = \"Emma\"",
    "linq": "context.ApartmentBuildings.Where(row => row.BuildingManager == \"Emma\").Select(row => new { row.BuildingShortName }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c20733cd257a85706dbad6290e7b89d200f4193958467d8dfb25c6cb4b03ee1d",
    "sql": "SELECT building_address , building_phone FROM Apartment_Buildings WHERE building_manager = \"Brenden\"",
    "linq": "context.ApartmentBuildings.Where(row => row.BuildingManager == \"Brenden\").Select(row => new { row.BuildingAddress, row.BuildingPhone }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "93309e9835fa1c1820313d8feed4afbbef84b0433a9cd98783ecabc2bf7633a0",
    "sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"",
    "linq": "context.ApartmentBuildings.Where(row => EF.Functions.Like(row.BuildingFullName, \"%court%\")).Select(row => new { row.BuildingFullName }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "607c21df0924b223498f38597a1c23fb7734e0595fefaf2eca6b76bd486e1d63",
    "sql": "SELECT min(bathroom_count) , max(bathroom_count) FROM Apartments",
    "linq": "context.Apartments.GroupBy(row => 1).Select(group => new { MinBathroomCount = group.Select(row => row.BathroomCount).Min(), MaxBathroomCount = group.Select(row => row.BathroomCount).Max() }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b856c51b19e76cfa48e84d3bf5d2ca76fb4ac707ffb04291d7b10d7e204a59d5",
    "sql": "SELECT avg(bedroom_count) FROM Apartments",
    "linq": "context.Apartments.Select(row => row.BedroomCount).Average();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "25400a1f91bfb801555d302b2c667bc2efd41756f6eccb47b15bae8eb2540c63",
    "sql": "SELECT apt_number , room_count FROM Apartments",
    "linq": "context.Apartments.Select(row => new { row.AptNumber, row.RoomCount }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b3ad7a85de308b76330abe23bf734b7d96721f084eb034e03daa00d4666eb784",
    "sql": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code = \"Studio\"",
    "linq": "context.Apartments.Where(row => row.AptTypeCode == \"Studio\").Select(row => row.RoomCount).ToList().Select(value => double.Parse(value)).Average();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "75b6f038efc889189a8b95aa8fc9630214397b3326f0ac5d29c425ac69fc0897",
    "sql": "SELECT apt_number FROM Apartments WHERE apt_type_code = \"Flat\"",
    "linq": "context.Apartments.Where(row => row.AptTypeCode == \"Flat\").Select(row => new { row.AptNumber }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "446a2d534c85a62f32a2e2d303cd97505b3ea339ded0faf20efcaaf4df4fde79",
    "sql": "SELECT guest_first_name , guest_last_name FROM Guests",
    "linq": "context.Guests.Select(row => new { row.GuestFirstName, row.GuestLastName }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5296b6e8672bd0cb183a1c9ba338cfff7f44704dcd007f29ec409e5a0172c3cd",
    "sql": "SELECT date_of_birth FROM Guests WHERE gender_code = \"Male\"",
    "linq": "context.Guests.Where(row => row.GenderCode == \"Male\").Select(row => new { row.DateOfBirth }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cfebe1b5e095cf6548f7415d76cf37de5ea6233acc6b8d12512b4f202fc83e06",
    "sql": "SELECT T2.apt_number , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id",
    "linq": "context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.AptNumber, T1BookingStartDate = row.T1.BookingStartDate, T1BookingStartDate2 = row.T1.BookingStartDate }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d60d679723477d14ae4bfe9eb09c37cd73384ec0fcd8e2295b14c5cef63fe8a1",
    "sql": "SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"",
    "linq": "context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AptTypeCode == \"Duplex\").Select(row => new { T1BookingStartDate = row.T1.BookingStartDate, T1BookingStartDate2 = row.T1.BookingStartDate }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "372d1cc92819357c8b15c6b9b81a706e17590636b968dfadf381c37b3b94c66c",
    "sql": "SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2",
    "linq": "context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BedroomCount > 2).Select(row => new { T1BookingStartDate = row.T1.BookingStartDate, T1BookingStartDate2 = row.T1.BookingStartDate }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "08b4a2ab41c2945a1440084d1fedbfbf6cd10717918708dcf4507fd417022548",
    "sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = \"Suite 634\"",
    "linq": "context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AptNumber == \"Suite 634\").Select(row => new { row.T1.BookingStatusCode }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "908c296b4ac27d83dd9b427d1d2a6dc036fa6815f165f650d5b14a1e89317d78",
    "sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\"",
    "linq": "context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Confirmed\").Select(row => new { row.T2.AptNumber }).Distinct().ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fa829f68f03593e1546343f444efcd41132e6af88ac70a8ca682ea220a0a8b33",
    "sql": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\"",
    "linq": "context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Provisional\").Select(row => row.T2.RoomCount).ToList().Select(value => double.Parse(value)).Average();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "13ecf67627ae1f69659be7be2dd06ead2ba4acd8747081a08ad4adf87d2846b3",
    "sql": "SELECT T2.guest_first_name , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id",
    "linq": "context.ApartmentBookings.Join(context.Guests, T1 => T1.GuestId, T2 => T2.GuestId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.GuestFirstName, T1BookingStartDate = row.T1.BookingStartDate, T1BookingStartDate2 = row.T1.BookingStartDate }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3923d778e69d8f2cab37192d2eb429462ab88bbdcf856f8dc702008584102d50",
    "sql": "SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"",
    "linq": "context.ApartmentBookings.Join(context.Guests, T1 => T1.GuestId, T2 => T2.GuestId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.GenderCode == \"Female\").Select(row => new { T1BookingStartDate = row.T1.BookingStartDate, T1BookingStartDate2 = row.T1.BookingStartDate }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "353a395d62d43569a8c82a9428893da74938025e8b9dc0e3a5bbb69ea780dd68",
    "sql": "SELECT T2.guest_first_name , T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T1.booking_status_code = \"Confirmed\"",
    "linq": "context.ApartmentBookings.Join(context.Guests, T1 => T1.GuestId, T2 => T2.GuestId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Confirmed\").Select(row => new { row.T2.GuestFirstName, row.T2.GuestLastName }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6790b77cfafc197205735c3a887f4f6cac90fd340e5f338bfc84c9d5fea58303",
    "sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4",
    "linq": "context.ApartmentFacilities.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BedroomCount > 4).Select(row => new { row.T1.FacilityCode }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a28be86e0f891148503d88b86e52c0f866fc97c057e658c2317e6c5dd3404ef9",
    "sql": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.facility_code = \"Gym\"",
    "linq": "context.ApartmentFacilities.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FacilityCode == \"Gym\").Select(row => row.T2.RoomCount).ToList().Select(value => double.Parse(value)).Sum();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f0cea40b773ffa88fad07d406ff2f2ae349d0cb0b1f056c23a9a36375eef343",
    "sql": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = \"Columbus Square\"",
    "linq": "context.ApartmentBuildings.Join(context.Apartments, T1 => T1.BuildingId, T2 => T2.BuildingId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BuildingShortName == \"Columbus Square\").Select(row => row.T2.RoomCount).ToList().Select(value => double.Parse(value)).Sum();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7080f5eaf153e239fc0704192ceb793ccfd1183635464f0e6b9f8e24b3f577f3",
    "sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2",
    "linq": "context.ApartmentBuildings.Join(context.Apartments, T1 => T1.BuildingId, T2 => T2.BuildingId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BathroomCount > 2).Select(row => new { row.T1.BuildingAddress }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e51dc5b9032e75a81d9e23c8c7cf153eb565daff1cb5a0c4c8c9abc7cd74985b",
    "sql": "SELECT T2.apt_type_code , T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\"",
    "linq": "context.ApartmentBuildings.Join(context.Apartments, T1 => T1.BuildingId, T2 => T2.BuildingId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BuildingManager == \"Kyle\").Select(row => new { row.T2.AptTypeCode, row.T2.AptNumber }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "097f284395c42a586e00ca0f2c00f4d30eb2993b69db3e60591d514488470b8c",
    "sql": "SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
    "linq": "context.ApartmentBookings.GroupBy(row => new { row.BookingStatusCode }).Select(group => new { group.Key.BookingStatusCode, Count = group.Count() }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "35c52a996f671b8329b669eede01c28a8ff7f35a2fae0aac1af5912d4726405d",
    "sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
    "linq": "context.Apartments.OrderBy(row => row.RoomCount).Select(row => new { row.AptNumber }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cba9c860c8ef7b17b9cc5303b6cb5d0f14e285f7fb55853f43addc2aeb6827ea",
    "sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1",
    "linq": "context.Apartments.OrderByDescending(row => row.BedroomCount).Select(row => new { row.AptNumber }).Take(1).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "69ed5b4e1a896beace565521d8b49dbcd89a1268af303c1fe597b17be79b9878",
    "sql": "SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
    "linq": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).Select(group => new { group.Key.AptTypeCode, Count = group.Count() }).OrderBy(group => group.Count).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0ccb61d4926bab81118e35c3765e4546aed366c307f1bc1b31c2c18932225e1e",
    "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
    "linq": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Average(row => row.RoomCount)).Select(group => new { group.Key.AptTypeCode }).Take(3).ToList();",
    "db_name": "apartment_rentals",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,119): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.91",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b48c40accb736fdcb471cfd58a2f28f694d6931958b61e28873055aae98cac6b",
    "sql": "SELECT apt_type_code , bathroom_count , bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
    "linq": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Sum(row => row.RoomCount)).Select(group => new { group.Key.AptTypeCode, group.First().BathroomCount, group.First().BedroomCount }).Take(1).ToList();",
    "db_name": "apartment_rentals",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,115): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.53",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "df0e2e74097ddd4ec3421145e42ce60c621e3aaf1102bbe118c95c38f48b4b97",
    "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AptTypeCode }).Take(1).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d2b409f7e2e7de880f6aa517c017ac930dbaab028a6e31cc48f8ccc7a4e79dab",
    "sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Apartments.Where(row => row.BathroomCount > 1).GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AptTypeCode }).Take(1).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "acb6460e13c79edc2ec8a98162635b57e71ec71af0ae04a5306b36646915d463",
    "sql": "SELECT apt_type_code , max(room_count) , min(room_count) FROM Apartments GROUP BY apt_type_code",
    "linq": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).Select(group => new { group.Key.AptTypeCode, MaxRoomCount = group.Select(row => row.RoomCount).Max(), MinRoomCount = group.Select(row => row.RoomCount).Min() }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b3e80ef12204dd7041346a0345f6e2919ba71062b267bdc8a526df7e0ea03688",
    "sql": "SELECT gender_code , COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
    "linq": "context.Guests.GroupBy(row => new { row.GenderCode }).Select(group => new { group.Key.GenderCode, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "82fb0cbe3f965426304cdd083c8e117fa8268ffd4901c09e75c7c0339d415e3c",
    "sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
    "linq": "context.Apartments.Where(row => !context.ApartmentFacilities.Select(row => row.AptId).Contains(row.AptId)).Count();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e75489b1bdb3f638325aa0b978181f1c67adf7270d3665906a3ee32bf21d1502",
    "sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\"",
    "linq": "context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Confirmed\").Select(row => row.T2.AptNumber).Intersect(context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Provisional\").Select(row => row.T2.AptNumber)).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2b3491e0f8c99ac3f103b4ad50fbdcc9250462f6ab77a6e33d3c9fddad1991db",
    "sql": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 1",
    "linq": "context.Apartments.Join(context.ViewUnitStatuses, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AvailableYn == false).Select(row => row.T1.AptNumber).Intersect(context.Apartments.Join(context.ViewUnitStatuses, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AvailableYn == true).Select(row => row.T1.AptNumber)).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d2818afcf622850e9535163c1296b12e064254d8a491eaf6d4ac3e3f02229e36",
    "sql": "SELECT count(*) FROM enzyme",
    "linq": "context.Enzymes.Count();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5a551579642a3fd94b7247cf8fa432c1172d00c88b0a1e2bb5d847166cced88b",
    "sql": "SELECT name FROM enzyme ORDER BY name DESC",
    "linq": "context.Enzymes.OrderByDescending(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "34292a8368984df13d56ff8948e1f7f4ba06d31fe83f7902b7c3f529131b8967",
    "sql": "SELECT name , LOCATION FROM enzyme",
    "linq": "context.Enzymes.Select(row => new { row.Name, row.Location }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "50f4be226149d82a3371c656f053b5ffd6327c3649fc510552fc67f4152e2448",
    "sql": "SELECT max(OMIM) FROM enzyme",
    "linq": "context.Enzymes.Select(row => row.Omim).Max();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "20dc574b65bdc28652be459fc712be12405f59081d06614acd811caa3e8528e1",
    "sql": "SELECT product , chromosome , porphyria FROM enzyme WHERE LOCATION = 'Cytosol'",
    "linq": "context.Enzymes.Where(row => row.Location == \"Cytosol\").Select(row => new { row.Product, row.Chromosome, row.Porphyria }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b1bc204db054b83f8e11fd0d72949581a4595434bf9697d4982052f485862832",
    "sql": "SELECT name FROM enzyme WHERE product != 'Heme'",
    "linq": "context.Enzymes.Where(row => row.Product != \"Heme\").Select(row => new { row.Name }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bfaa1efd7d85d346a2fad14ec41a942715e37887b85fe362b9b9c6de4f8615e8",
    "sql": "SELECT name , trade_name FROM medicine WHERE FDA_approved = 'Yes'",
    "linq": "context.Medicines.Where(row => row.FdaApproved == \"Yes\").Select(row => new { row.Name, row.TradeName }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6d8dfd43fc41fcd7bc63bb9f4415cdd1dc97af824eeb3f749d20b4f3f4d69ceb",
    "sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'",
    "linq": "context.Enzymes.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.EnzymeId, (T1, T2) => new { T1, T2 }).Join(context.Medicines, joined => joined.T2.MedicineId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Amisulpride\" && row.T2.InteractionType == \"inhibitor\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b43e8be746df1d0c629dcabb3b45dcb29f5537e53c12d2288795acd5ce16679d",
    "sql": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count(*) >= 2",
    "linq": "context.Medicines.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.MedicineId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f7509ff66420b2a16ce3829f191c416eeaae6602b5d6dd8cb4cb0827ed646473",
    "sql": "SELECT T1.id , T1.Name , T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id ORDER BY count(*) DESC",
    "linq": "context.Medicines.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.MedicineId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name, group.First().T1.FdaApproved }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "31c11e143a10302388d0c96379da49a0fa42b5947209019cba7937da5690fcf0",
    "sql": "SELECT T1.id , T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Enzymes.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.EnzymeId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.InteractionType == \"activitor\").GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name }).Take(1).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d69ac57062ac03926c1c1759dfc8c8f0633143b8614cf5719008d86dfff51513",
    "sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'",
    "linq": "context.MedicineEnzymeInteractions.Join(context.Medicines, T1 => T1.MedicineId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Enzymes, joined => joined.T1.EnzymeId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"ALA synthase\" && row.T2.Name == \"Aripiprazole\").Select(row => new { row.T1.InteractionType }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1991ce96fce2d39d2dd66284a61beb28e3f140e35cc3d904520ff7a6d77c29e5",
    "sql": "SELECT interaction_type , count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.MedicineEnzymeInteractions.GroupBy(row => new { row.InteractionType }).Select(group => new { group.Key.InteractionType, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9a799b36d024e1b681dbc0a7d3464189f7161d8291438c2ad1be1bfebbec8391",
    "sql": "SELECT count(*) FROM medicine WHERE FDA_approved = 'No'",
    "linq": "context.Medicines.Where(row => row.FdaApproved == \"No\").Count();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b1bf604d844785b7684226b123b34a8e6bf2326d6c2ced9dadbbbf1f30408679",
    "sql": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
    "linq": "context.Enzymes.Where(row => !context.MedicineEnzymeInteractions.Select(row => row.EnzymeId).Contains(row.Id)).Count();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a56b774e67c8a8d5c1f0db27ae17e94650bac92f55e7b32507c27040e97395bc",
    "sql": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 3",
    "linq": "context.Medicines.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.MedicineId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 3).Select(group => new { group.Key.Id, group.First().T1.TradeName }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "85b60e012a62e58d774b4f4866ae40ed322047ba727860474592c8a674cd4cb6",
    "sql": "SELECT DISTINCT T1.name , T1.location , T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'",
    "linq": "context.Enzymes.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.EnzymeId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.InteractionType == \"inhibitor\").Select(row => new { row.T1.Name, row.T1.Location, row.T1.Product }).Distinct().ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6a7b3d6367b2228495890653057240b0f970b6e0b57e7e00922d0ee53d8c9f72",
    "sql": "SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'activitor'",
    "linq": "context.Medicines.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.MedicineId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.InteractionType == \"inhibitor\").Select(row => new { row.T1.Name, row.T1.TradeName }).Intersect(context.Medicines.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.MedicineId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.InteractionType == \"activitor\").Select(row => new { row.T1.Name, row.T1.TradeName })).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f8d7549c34699c40ed73e5f323f808ef61ff90bb75b324522f7beb97c8ec9196",
    "sql": "SELECT name , trade_name FROM medicine EXCEPT SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id WHERE T3.product = 'Protoporphyrinogen IX'",
    "linq": "context.Medicines.Select(row => new { row.Name, row.TradeName }).Except(context.Medicines.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.MedicineId, (T1, T2) => new { T1, T2 }).Join(context.Enzymes, joined => joined.T2.EnzymeId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Product == \"Protoporphyrinogen IX\").Select(row => new { row.T1.Name, row.T1.TradeName })).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fde8b69d3fa74d35d9c26c2f00249fb0a345a3a90bb42dd6e350111fef386c05",
    "sql": "SELECT count(DISTINCT FDA_approved) FROM medicine",
    "linq": "context.Medicines.Select(row => row.FdaApproved).Distinct().Count();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6858f69c37e244d5eec9ce975cedaf9d21ed36ddf0e68a19bc4d01307f871076",
    "sql": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
    "linq": "context.Enzymes.Where(row => EF.Functions.Like(row.Name, \"%ALA%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "48fee8085b64d4cd06744d2e86c7b1681c844b73291d08f579eefee9b431bcff",
    "sql": "SELECT trade_name , count(*) FROM medicine GROUP BY trade_name",
    "linq": "context.Medicines.GroupBy(row => new { row.TradeName }).Select(group => new { group.Key.TradeName, Count = group.Count() }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1f8978dfee156c3c9e4e9fcebc3ec9c17a01286a44fe3049483295803b6f5309",
    "sql": "SELECT count(*) FROM gymnast",
    "linq": "context.Gymnasts.Count();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dba15a46421f7956185c70dd9e886e78da4b60a52df186028a20fa75e475ba7f",
    "sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
    "linq": "context.Gymnasts.OrderByDescending(row => row.TotalPoints).Select(row => new { row.TotalPoints }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "253b5ce1420d2fdabf4a3b7ddecf5827d0f4dde7070735e0919bc1d70deb477d",
    "sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
    "linq": "context.Gymnasts.OrderByDescending(row => row.FloorExercisePoints).Select(row => new { row.TotalPoints }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b2ae1bfafcf7076b5f5a5bcfe6d62462c4ce4554e4c69578d095fbb538bc7bee",
    "sql": "SELECT avg(Horizontal_Bar_Points) FROM gymnast",
    "linq": "context.Gymnasts.Select(row => (double) row.HorizontalBarPoints).Average();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3583a738821f57b6ccd5683b74ec6514362e703d955d2343b438c013e94f0ae9",
    "sql": "SELECT Name FROM People ORDER BY Name ASC",
    "linq": "context.People.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "efb58b3d7ecc3bd873481844f51ff3be65df9491a0c53d9757d5ec528b73c564",
    "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID",
    "linq": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fd877c30f8f2146aea2f9eb4bf79b3d52fbdd131419a64f84c8b5826fae2f7ab",
    "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"",
    "linq": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Hometown != \"Santo Domingo\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1e47fe1192e31239eb00bd72651be80a40279334bef065d59f0009d8c05d648a",
    "sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1",
    "linq": "context.People.OrderByDescending(row => row.Height).Select(row => new { row.Age }).Take(1).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "26f8a1b4e7133474b0a5e3f6ae93c604b1677ac0bc9a62efb67d7172511df6bb",
    "sql": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5",
    "linq": "context.People.OrderByDescending(row => row.Age).Select(row => new { row.Name }).Take(5).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e5165290d21288e33fef1fdc7a34332049bfae52ccbd069920c32b2f11097fb1",
    "sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
    "linq": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Age).Select(row => new { row.T1.TotalPoints }).Take(1).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aa1d4b326cdfb29e74011f294d67269ac28b79dc68f5939ae1506d1a57068d4b",
    "sql": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID",
    "linq": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => (double) row.T2.Age).Average();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "793364920ae47d9c3a3ba28fdd6eeb65de22f8771756a41d1a00df857b77401c",
    "sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5",
    "linq": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.TotalPoints > 57.5).Select(row => new { row.T2.Hometown }).Distinct().ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2bd903f5876694129de64b6d24accea291f2f68f87816baf5cf0f86822618de4",
    "sql": "SELECT T2.Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown",
    "linq": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Hometown }).Select(group => new { group.Key.Hometown, Count = group.Count() }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f55fe67d51666588b5c1ea8ade992f822d71fa58c405ab1dc9a460220e3be6ce",
    "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Hometown }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Hometown }).Take(1).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ca629e6831df820b5fe664e877fe7ae1abac0b85b9ab48c1ae43c11afe00678c",
    "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2",
    "linq": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Hometown }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Hometown }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7cd7f70d199d9f019dcdce612de2f124810db0b2f79d4b36411e61fa11b82fb9",
    "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height ASC",
    "linq": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Height).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "07abe7d9a4839230d1fc73d8a92a2a58c398db0d8406f9fa4575e1238573dc90",
    "sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID",
    "linq": "context.People.Select(row => row.Hometown).Distinct().Except(context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => row.T2.Hometown).Distinct()).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1d1f30bafd9af2e46b127002ab98ef47017b35d7e6860690667960ba766458b4",
    "sql": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20",
    "linq": "context.People.Where(row => row.Age > 23).Select(row => row.Hometown).Intersect(context.People.Where(row => row.Age < 20).Select(row => row.Hometown)).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f05a01e150f60e248e4fbdfef0c066a45866242bce9b69bddd72f48557b46e63",
    "sql": "SELECT count(DISTINCT Hometown) FROM people",
    "linq": "context.People.Select(row => row.Hometown).Distinct().Count();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "db643ff75372b06e8179af3332ee7292dee68e2eec98921897e0ab0b1dbe66b9",
    "sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T1.Total_Points DESC",
    "linq": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.TotalPoints).Select(row => new { row.T2.Age }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f525f788f9f1e83006bb54ca26cb4fe5249d8de9bb90e31f8b671ed04abe5d23",
    "sql": "SELECT count(*) FROM list",
    "linq": "context.Lists.Count();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9f9f85724b45e82364cf0ea433ff993d71df5be6d9431adfc20777cda2a86325",
    "sql": "SELECT lastname FROM list WHERE classroom = 111",
    "linq": "context.Lists.Where(row => row.Classroom == 111).Select(row => new { row.LastName }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "27a0b48d48900721d7a89585976e6aa37004f268ef300dc48836738b098af9ec",
    "sql": "SELECT firstname FROM list WHERE classroom = 108",
    "linq": "context.Lists.Where(row => row.Classroom == 108).Select(row => new { row.FirstName }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6ca36a7f3e38a07a145aa04a9343c7f4353bf911a8e26132b56d4725184b2167",
    "sql": "SELECT DISTINCT firstname FROM list WHERE classroom = 107",
    "linq": "context.Lists.Where(row => row.Classroom == 107).Select(row => new { row.FirstName }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "45b6f9b552510718645459a7ad87db22deda9493eb63bc6bd30bd98eb967b0ec",
    "sql": "SELECT DISTINCT classroom , grade FROM list",
    "linq": "context.Lists.Select(row => new { row.Classroom, row.Grade }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "47a1da9bbe9ad85378bbfab8b476384840a3a2355ffacf1685b5e4a890bacdc0",
    "sql": "SELECT DISTINCT grade FROM list WHERE classroom = 103",
    "linq": "context.Lists.Where(row => row.Classroom == 103).Select(row => new { row.Grade }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "323a1cab9ce77d87b52ea2071ef73d62a0158d00db8dcfba712dadf1a360e750",
    "sql": "SELECT DISTINCT grade FROM list WHERE classroom = 105",
    "linq": "context.Lists.Where(row => row.Classroom == 105).Select(row => new { row.Grade }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4f5846e8765bb414f804b9151f0fcde8ee0f111e71b7b6e5a98daf21b35b1bda",
    "sql": "SELECT DISTINCT classroom FROM list WHERE grade = 4",
    "linq": "context.Lists.Where(row => row.Grade == 4).Select(row => new { row.Classroom }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ed1ec109dd7c81656743bb3edfa1037289085e4099cda24343cc5dec846bbd9f",
    "sql": "SELECT DISTINCT classroom FROM list WHERE grade = 5",
    "linq": "context.Lists.Where(row => row.Grade == 5).Select(row => new { row.Classroom }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4cd5937dd62acd74c0b3200bcf08c5005b71a8d8ccb629bd155c5c504db37765",
    "sql": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 5",
    "linq": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Grade == 5).Select(row => new { row.T2.LastName }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "58fbffcccb93643ed6532ef6c919143db65d5a2d2275779d3a794bbd92b50109",
    "sql": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 1",
    "linq": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Grade == 1).Select(row => new { row.T2.FirstName }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "de9f04988a35a60c3a3fba80aad09c82ab5e6428a01bdc5737efee231a4a449d",
    "sql": "SELECT firstname FROM teachers WHERE classroom = 110",
    "linq": "context.Teachers.Where(row => row.Classroom == 110).Select(row => new { row.FirstName }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3b252609ca37caa721df54060f3f5e7b24257f5f4420209637b6f2251f17404f",
    "sql": "SELECT lastname FROM teachers WHERE classroom = 109",
    "linq": "context.Teachers.Where(row => row.Classroom == 109).Select(row => new { row.LastName }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e03decab2b0bde61c742da9ebb425dbafe479c4eb601df5ca091387be4f9c0a2",
    "sql": "SELECT DISTINCT firstname , lastname FROM teachers",
    "linq": "context.Teachers.Select(row => new { row.FirstName, row.LastName }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f4c8ba0c627bd0311e305e4e112f353989b7cf34d9c871eb73fddce95909494d",
    "sql": "SELECT DISTINCT firstname , lastname FROM list",
    "linq": "context.Lists.Select(row => new { row.FirstName, row.LastName }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "377212d102b0e8ce3a1d67743af9122c6d1fbeee4b699fee5cf039631f6d496c",
    "sql": "SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"OTHA\" AND T2.lastname = \"MOYER\"",
    "linq": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"OTHA\" && row.T2.LastName == \"MOYER\").Select(row => new { row.T1.FirstName, row.T1.LastName }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e54863f411340be78b729000bbb37c25a434ae32f703afb7fc4bf743dd17ef7d",
    "sql": "SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"MARROTTE\" AND T2.lastname = \"KIRK\"",
    "linq": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"MARROTTE\" && row.T2.LastName == \"KIRK\").Select(row => new { row.T1.FirstName, row.T1.LastName }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "913413fdb2b0243214ef47838a318ad3fe75f8b5a9859719190ee35099576af3",
    "sql": "SELECT T2.firstname , T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = \"EVELINA\" AND T1.lastname = \"BROMLEY\"",
    "linq": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"EVELINA\" && row.T1.LastName == \"BROMLEY\").Select(row => new { row.T2.FirstName, row.T2.LastName }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a36b0d22db5ce802d8afc7cf60f445b39f31407d7da85cb1b4fbcf2aa87f7d2b",
    "sql": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = \"GELL\" AND T1.lastname = \"TAMI\"",
    "linq": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"GELL\" && row.T1.LastName == \"TAMI\").Select(row => new { row.T2.LastName }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8e01b0909538ae69c41edfb240132fb5174027063150e7e1b773949071f0ed8f",
    "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"LORIA\" AND T2.lastname = \"ONDERSMA\"",
    "linq": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"LORIA\" && row.T2.LastName == \"ONDERSMA\").Count();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "712d26c64ae80182ff9539a06d1ced062a0d07e36ef021d9f4e5df55a79f8cd6",
    "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"KAWA\" AND T2.lastname = \"GORDON\"",
    "linq": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"KAWA\" && row.T2.LastName == \"GORDON\").Count();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "60a8e1fd49475ec339c6b73b4d6932282f8e1e867ea100d9c7552b2ed0abb804",
    "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"TARRING\" AND T2.lastname = \"LEIA\"",
    "linq": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"TARRING\" && row.T2.LastName == \"LEIA\").Count();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7946370e67eb20872bb21afb61ef0f46f74148d63d20c72351b76ab8d31b5ad7",
    "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = \"CHRISSY\" AND T1.lastname = \"NABOZNY\"",
    "linq": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"CHRISSY\" && row.T1.LastName == \"NABOZNY\").Count();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f95fa4e619bc1f3595e1aa75fe62c5482f59cb5b825958dc69560accbd55822f",
    "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = \"MADLOCK\" AND T1.lastname = \"RAY\"",
    "linq": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"MADLOCK\" && row.T1.LastName == \"RAY\").Count();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ea135e40f1f150848831ec0fa1d226b6603695909df9e28f82271add3633c115",
    "sql": "SELECT DISTINCT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 1 EXCEPT SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"OTHA\" AND T2.lastname = \"MOYER\"",
    "linq": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Grade == 1).Select(row => new { row.T1.FirstName, row.T1.LastName }).Distinct().Except(context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"OTHA\" && row.T2.LastName == \"MOYER\").Select(row => new { row.T1.FirstName, row.T1.LastName })).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dc7a07994231aee0be26d08c120e3b2375af3b01923d0cdd5e0af1096a9610bb",
    "sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
    "linq": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Grade == 3 && row.T2.FirstName != \"COVIN\" && row.T2.LastName != \"JEROME\").Select(row => new { row.T1.LastName }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ed4642edeaf226f224fb14afbe42eddcae4d7ab874f557114a4f64633ffb498a",
    "sql": "SELECT grade , count(DISTINCT classroom) , count(*) FROM list GROUP BY grade",
    "linq": "context.Lists.GroupBy(row => new { row.Grade }).Select(group => new { group.Key.Grade, CountDistinctClassroom = group.Select(row => row.Classroom).Distinct().Count(), Count = group.Count() }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f2d5c838cfa327c78b2ee60f29e7c2b0aac24c81e393b4af393648ef7212084b",
    "sql": "SELECT classroom , count(DISTINCT grade) FROM list GROUP BY classroom",
    "linq": "context.Lists.GroupBy(row => new { row.Classroom }).Select(group => new { group.Key.Classroom, CountDistinctGrade = group.Select(row => row.Grade).Distinct().Count() }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f4ae0d2b4306a8dd41981c8a850620e1e445c2e44a3ad762d92eb922b7b74d88",
    "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Lists.GroupBy(row => new { row.Classroom }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Classroom }).Take(1).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f073ec00424ddcfc5a8381f2229fc6ae5cbd3cd5ec9f0a70e0394f2fdac99d8c",
    "sql": "SELECT classroom , count(*) FROM list GROUP BY classroom",
    "linq": "context.Lists.GroupBy(row => new { row.Classroom }).Select(group => new { group.Key.Classroom, Count = group.Count() }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1e9cf4dcee19e0f922f8301d76b27508e48e27f2791e7054f485037eedda8ece",
    "sql": "SELECT classroom , count(*) FROM list WHERE grade = \"0\" GROUP BY classroom",
    "linq": "context.Lists.Where(row => row.Grade == \"0\").GroupBy(row => new { row.Classroom }).Select(group => new { group.Key.Classroom, Count = group.Count() }).ToList();",
    "db_name": "student_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,39): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.47",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6da1575177457967524680efbba08d4aa3f7701dad2d5645b211640dada781a4",
    "sql": "SELECT classroom , count(*) FROM list WHERE grade = \"4\" GROUP BY classroom",
    "linq": "context.Lists.Where(row => row.Grade == \"4\").GroupBy(row => new { row.Classroom }).Select(group => new { group.Key.Classroom, Count = group.Count() }).ToList();",
    "db_name": "student_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,39): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.54",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f161ab7a972ca525226a7e57cbe1cdc04b54f43e55dccd102775f1cc62b989f1",
    "sql": "SELECT T2.firstname , T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom GROUP BY T2.firstname , T2.lastname ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.FirstName, row.T2.LastName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.FirstName, group.Key.LastName }).Take(1).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3538b23d0554bda8c389d627c6b7950e66a082ac7844fc76ab4dc5817ee91cb5",
    "sql": "SELECT count(*) , classroom FROM list GROUP BY classroom",
    "linq": "context.Lists.GroupBy(row => new { row.Classroom }).Select(group => new { Count = group.Count(), group.Key.Classroom }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5d2ab8100744b7f1a57541f4f7fe5747b9473dca62c8c5d99bbebaa3dc9da48d",
    "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = \"Accounting\"",
    "linq": "context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DeptName == \"Accounting\").Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "21f4369b0d0dbd67325bb60fca6a700130629fdc3d7987379746c923121a5858",
    "sql": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE = \"ACCT-211\"",
    "linq": "context.Classes.Where(row => row.CrsCode == \"ACCT-211\").Select(row => row.ProfNum).Distinct().Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b4b047a3c01f48dc15ac0a235465a993f47c89b407cb1c4b44e245bfaa8d8c1b",
    "sql": "SELECT T3.EMP_FNAME , T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE DEPT_NAME = \"Biology\"",
    "linq": "context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Join(context.Employees, joined => joined.T1.EmpNum, T3 => T3.EmpNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.DeptName == \"Biology\").Select(row => new { row.T3.EmpFname, row.T3.EmpLname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "85ba4a5915a0749cbd14caab726a29493bc2a0d16ad949ab67a328e6aa746521",
    "sql": "SELECT DISTINCT T1.EMP_FNAME , T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"",
    "linq": "context.Employees.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CrsCode == \"ACCT-211\").Select(row => new { row.T1.EmpFname, row.T1.EmpDob }).Distinct().ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f7df9cbee72bd4129badab34eabed704c8741e63f968de6b8b440cc6eb50792b",
    "sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'",
    "linq": "context.Employees.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Where(row => row.T1.EmpLname == \"Graztevski\").Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "169a9dceea34facb10a7db420ed597e9472bebc3bcd693c680b6287dc32442c6",
    "sql": "SELECT school_code FROM department WHERE dept_name = \"Accounting\"",
    "linq": "context.Departments.Where(row => row.DeptName == \"Accounting\").Select(row => new { row.SchoolCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b4ce4bd2285225f982805327f09456a55f58276a890c5722887adc88c65823d3",
    "sql": "SELECT crs_credit , crs_description FROM course WHERE crs_code = 'CIS-220'",
    "linq": "context.Courses.Where(row => row.CrsCode == \"CIS-220\").Select(row => new { row.CrsCredit, row.CrsDescription }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8acd1dfc52802063b831e18fccc78ed5a7e8cd83e37d65038030419a7a5c09aa",
    "sql": "SELECT dept_address FROM department WHERE dept_name = 'History'",
    "linq": "context.Departments.Where(row => row.DeptName == \"History\").Select(row => new { row.DeptAddress }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0abc61ebabbd4ec548bb142e2fb56103d3813bfe81d86204718fce0206d61e2c",
    "sql": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code = 'BUS'",
    "linq": "context.Departments.Where(row => row.SchoolCode == \"BUS\").Select(row => row.DeptAddress).Distinct().Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c1f085e2535dad7d822955f90b1a7da15a97d87b5960db235891d1247907c2e3",
    "sql": "SELECT count(DISTINCT dept_address) , school_code FROM department GROUP BY school_code",
    "linq": "context.Departments.GroupBy(row => new { row.SchoolCode }).Select(group => new { CountDistinctDeptAddress = group.Select(row => row.DeptAddress).Distinct().Count(), group.Key.SchoolCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8317b47e47cd8f1e977f36784f2f1af8e465ff3a90bcae9da1bde626cfa26fa0",
    "sql": "SELECT crs_credit , crs_description FROM course WHERE crs_code = 'QM-261'",
    "linq": "context.Courses.Where(row => row.CrsCode == \"QM-261\").Select(row => new { row.CrsCredit, row.CrsDescription }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "80c28cb04984e363887e948435ee06bad4af10be637029132423ee7f0312ad0b",
    "sql": "SELECT count(DISTINCT dept_name) , school_code FROM department GROUP BY school_code",
    "linq": "context.Departments.GroupBy(row => new { row.SchoolCode }).Select(group => new { CountDistinctDeptName = group.Select(row => row.DeptName).Distinct().Count(), group.Key.SchoolCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "64361d15e677c50e7492870d6ed1aec7b19b3bb475877b17e5b36dc1b0203ed0",
    "sql": "SELECT count(DISTINCT dept_name) , school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name) < 5",
    "linq": "context.Departments.GroupBy(row => new { row.SchoolCode }).Select(group => new { CountDistinctDeptName = group.Select(row => row.DeptName).Distinct().Count(), group.Key.SchoolCode }).Where(group => group.CountDistinctDeptName < 5).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "96aae8c043ca9662c47d8dea707ab4d824bdf6f1bbb220ea3fa589b9f5b0ed02",
    "sql": "SELECT count(*) , crs_code FROM CLASS GROUP BY crs_code",
    "linq": "context.Classes.GroupBy(row => new { row.CrsCode }).Select(group => new { Count = group.Count(), group.Key.CrsCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "866f50253669a8a7252075d0b3979ed99cd0c88f4b0cbc2dedf4dfcce04ffc7e",
    "sql": "SELECT sum(crs_credit) , dept_code FROM course GROUP BY dept_code",
    "linq": "context.Courses.GroupBy(row => new { row.DeptCode }).Select(group => new { SumCrsCredit = group.Select(row => row.CrsCredit).Sum(), group.Key.DeptCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "712eb0fe14b4a0f4ce9129329b48517d2833bd6c6e1b42dbccd2678b536d18e8",
    "sql": "SELECT count(*) , class_room FROM CLASS GROUP BY class_room HAVING count(*) >= 2",
    "linq": "context.Classes.GroupBy(row => new { row.ClassRoom }).Select(group => new { Count = group.Count(), group.Key.ClassRoom }).Where(group => group.Count >= 2).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "19d83bf9af4ff4397ac7f8246ee98ab51b1b5a91913e5697ac3f9f256c2bcb52",
    "sql": "SELECT count(*) , dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
    "linq": "context.Classes.Join(context.Courses, T1 => T1.CrsCode, T2 => T2.CrsCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DeptCode }).Select(group => new { Count = group.Count(), group.Key.DeptCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d5dc9817bf6a1f112a2ae6c7f8255a5212c7ef3a8b77468080a7cf2fa6ae1d61",
    "sql": "SELECT count(*) , T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code GROUP BY T3.school_code",
    "linq": "context.Classes.Join(context.Courses, T1 => T1.CrsCode, T2 => T2.CrsCode, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.SchoolCode }).Select(group => new { Count = group.Count(), group.Key.SchoolCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d6cab53414be5bafc77a5f3ee662ac6941d1b9a5a3df7f5a4a76e7fcb607efcb",
    "sql": "SELECT count(*) , T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
    "linq": "context.Departments.Join(context.Professors, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SchoolCode }).Select(group => new { Count = group.Count(), group.Key.SchoolCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "141f4287920a4006ecb5e3774e9bb6999b386b31341d0b9356144376349519eb",
    "sql": "SELECT emp_jobcode , count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Employees.GroupBy(row => new { row.EmpJobcode }).Select(group => new { group.Key.EmpJobcode, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4872af5d28301edfa21ae987077703a20d9fb01c00fe3fa43c7d9f611a48724c",
    "sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
    "linq": "context.Departments.Join(context.Professors, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SchoolCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.SchoolCode }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e4088d43cc5b265dce79511f868e4731cab48cf773fa772ce80f9756d15b7dbf",
    "sql": "SELECT count(*) , dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code",
    "linq": "context.Professors.Where(row => row.ProfHighDegree == \"Ph.D.\").GroupBy(row => new { row.DeptCode }).Select(group => new { Count = group.Count(), group.Key.DeptCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dac48bb93496f676a719c2c624075ab705631259b40304a446c570ae299bbe0d",
    "sql": "SELECT count(*) , dept_code FROM student GROUP BY dept_code",
    "linq": "context.Students.GroupBy(row => new { row.DeptCode }).Select(group => new { Count = group.Count(), group.Key.DeptCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b58245dd764f0e4fc9e5251e805e537f6a0878e38f6efb9dd06ca53d98282eaf",
    "sql": "SELECT sum(stu_hrs) , dept_code FROM student GROUP BY dept_code",
    "linq": "context.Students.GroupBy(row => new { row.DeptCode }).Select(group => new { SumStuHrs = group.Select(row => row.StuHrs).Sum(), group.Key.DeptCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c7eeaa433de452b5e6a77e0b6feedd8a957f2d1288a78379fed5370b9288647",
    "sql": "SELECT max(stu_gpa) , avg(stu_gpa) , min(stu_gpa) , dept_code FROM student GROUP BY dept_code",
    "linq": "context.Students.GroupBy(row => new { row.DeptCode }).Select(group => new { MaxStuGpa = group.Select(row => row.StuGpa).Max(), AverageStuGpa = group.Select(row => row.StuGpa).Average(), MinStuGpa = group.Select(row => row.StuGpa).Min(), group.Key.DeptCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "67924016aba406456f54c6050a99377f7476e4701927f99fecf2dac2603b7ea0",
    "sql": "SELECT T2.dept_name , avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1",
    "linq": "context.Students.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).Select(group => new { group.First().T2.DeptName, AverageStuGpa = group.Select(row => row.T1.StuGpa).Average() }).OrderByDescending(group => group.AverageStuGpa).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dc73465a5d1ec37a1d7aa642a6af31ebaa82d4caad63cd5cf931ff0e5597a78c",
    "sql": "SELECT count(DISTINCT school_code) FROM department",
    "linq": "context.Departments.Select(row => row.SchoolCode).Distinct().Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6cf202b7330677bdbdf6f2bb9105b18c7eb216639cd9c1b92e202499172cfd6e",
    "sql": "SELECT count(DISTINCT class_code) FROM CLASS",
    "linq": "context.Classes.Select(row => row.ClassCode).Distinct().Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "55c842a0e971d73f08342e5183912a488711e26dd9abb2e8b9c3025fc03169b3",
    "sql": "SELECT count(DISTINCT crs_code) FROM CLASS",
    "linq": "context.Classes.Select(row => row.CrsCode).Distinct().Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "17e37c23dd7429316860ca079655b0b1382300a0d0857d374d72ad22c720dc1b",
    "sql": "SELECT count(DISTINCT dept_name) FROM department",
    "linq": "context.Departments.Select(row => row.DeptName).Distinct().Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "38b62f5583a925152e70bc7c1be62bf34c68ff3750bbed404b130d0643899347",
    "sql": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = \"Computer Info. Systems\"",
    "linq": "context.Departments.Join(context.Courses, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DeptName == \"Computer Info. Systems\").Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bc392ebba4d2e3d3b23df4b3e5f29a366bd3a3adfd9cccda118b4c7c3ea0f883",
    "sql": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code = 'ACCT-211'",
    "linq": "context.Classes.Where(row => row.CrsCode == \"ACCT-211\").Select(row => row.ClassSection).Distinct().Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2324def8de70649539e858e1c45abb87344b96e1f9a30aae4c03f811bc261b3b",
    "sql": "SELECT sum(T1.crs_credit) , T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code",
    "linq": "context.Courses.Join(context.Classes, T1 => T1.CrsCode, T2 => T2.CrsCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).Select(group => new { SumCrsCredit = group.Select(row => row.T1.CrsCredit).Sum(), group.Key.DeptCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "449702de4e39fa1e2320ec494e7b3149b7f8734a0c73d98dc4c7df957464bbd9",
    "sql": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
    "linq": "context.Courses.Join(context.Classes, T1 => T1.CrsCode, T2 => T2.CrsCode, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T1.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.DeptCode }).OrderByDescending(group => group.Sum(row => row.T1.CrsCredit)).Select(group => new { group.First().T3.DeptName }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6a3621ca8dc7fef291561c3dbfaf984f21e17349d2e7affe1c4d6b10dcc0a3a4",
    "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'",
    "linq": "context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CrsCode == \"ACCT-211\").Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2705f456903c1b432981c5fc619e0eb7f6f4b85065cb8b4686c4dff87ff36bd0",
    "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211'",
    "linq": "context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuNum, T3 => T3.StuNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.CrsCode == \"ACCT-211\").Select(row => new { row.T3.StuFname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "88f6985118dc5bc2c5a5095e85c5d7cf6999022963b95ac39ab3cb28ea8eef33",
    "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'",
    "linq": "context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuNum, T3 => T3.StuNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.CrsCode == \"ACCT-211\" && row.T2.EnrollGrade == \"C\").Select(row => new { row.T3.StuFname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e48e52627ebd3a8ca8987cd7939f90152b19c56f91378ddb2cd15f7084cf5d10",
    "sql": "SELECT count(*) FROM employee",
    "linq": "context.Employees.Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0dc444deecbbf054daecdf8ba9b657f6d7e5c54f20a8f78941d7334aeb06d8fc",
    "sql": "SELECT count(*) FROM professor WHERE prof_high_degree = 'Ph.D.'",
    "linq": "context.Professors.Where(row => row.ProfHighDegree == \"Ph.D.\").Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0d501b047a90d6aa5165a03b29b771a62e6e05bcc604163b964c13e30fba266b",
    "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting'",
    "linq": "context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Departments, joined => joined.T3.DeptCode, T4 => T4.DeptCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.DeptName == \"Accounting\").Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2ea4782382a54bab5fa6c6a5af5fb400c3e53cf9c639ae2a578e2c5ff76679e8",
    "sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Departments, joined => joined.T3.DeptCode, T4 => T4.DeptCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).GroupBy(row => new { row.T3.DeptCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T4.DeptName }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "54491a2d697502239ae10fb186e3981af5b6ac465627c196cf1b70f5731f2265",
    "sql": "SELECT dept_name FROM department ORDER BY dept_name",
    "linq": "context.Departments.OrderBy(row => row.DeptName).Select(row => new { row.DeptName }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6000e3b0078cfecf6879d0b15160587bc4077fe51e51e0b6c79e47241fa6cd9b",
    "sql": "SELECT class_code FROM CLASS WHERE class_room = 'KLR209'",
    "linq": "context.Classes.Where(row => row.ClassRoom == \"KLR209\").Select(row => new { row.ClassCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e185415f1e02e36196caea2ab74e545d32e8a32fe02a22f63c40e7529b23a1c4",
    "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob",
    "linq": "context.Employees.Where(row => row.EmpJobcode == \"PROF\").OrderBy(row => row.EmpDob).Select(row => new { row.EmpFname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "934af2cea40b0fc1803357c1ac163da0038771682f8437354cd5614dcff25b0d",
    "sql": "SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num ORDER BY T2.emp_fname",
    "linq": "context.Professors.Join(context.Employees, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.EmpFname).Select(row => new { row.T2.EmpFname, row.T1.ProfOffice }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a6d0d68b674f004d30662ed7e3784b63c480c1c4e57cbccabbe349eacd6c8f8f",
    "sql": "SELECT emp_fname , emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
    "linq": "context.Employees.OrderBy(row => row.EmpDob).Select(row => new { row.EmpFname, row.EmpLname }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c460c77ce679065a568a92288acbda3686c05e4f7203c752702d42b9e9917121",
    "sql": "SELECT stu_fname , stu_lname , stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1",
    "linq": "context.Students.Where(row => row.StuGpa > 3).OrderByDescending(row => row.StuDob).Select(row => new { row.StuFname, row.StuLname, row.StuGpa }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c8526f2d49f7033ac6d324b89b2983367fca2c3f750cd016b7afd5071fbd7820",
    "sql": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll_grade = 'C'",
    "linq": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EnrollGrade == \"C\").Select(row => new { row.T1.StuFname }).Distinct().ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a734c3eb97bef6019bf1833fcb9dc7eaa0b74176e925d420d792b868d57bf193",
    "sql": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1",
    "linq": "context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).OrderBy(group => group.Count()).Select(group => new { group.First().T2.DeptName }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7a965fc7661a6c67135ae00aa869c8be543ceda6531b514dc8990891ce58653c",
    "sql": "SELECT T2.dept_name , T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ProfHighDegree == \"Ph.D.\").GroupBy(row => new { row.T1.DeptCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.DeptName, group.Key.DeptCode }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0a0cf77a13742ecebd10979905f7db4101d92ab3ac2f58e072e0d35d1cd1b874",
    "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num",
    "linq": "context.Employees.Where(row => row.EmpJobcode == \"PROF\").Select(row => row.EmpFname).Except(context.Employees.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Select(row => row.T1.EmpFname)).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9d9227574d2c1bf3adfefcd93ccbc7758df6f301515dcfe1a2830419a810f181",
    "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num",
    "linq": "context.Employees.Join(context.Professors, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\").Select(row => row.T1.EmpFname).Except(context.Employees.Join(context.Classes, T4 => T4.EmpNum, T5 => T5.ProfNum, (T4, T5) => new { T4, T5 }).Select(row => row.T4.EmpFname)).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1bc08d72d4c209b4a17704b01e4b5069c35dbcd0501494747a8fdae2f1a8d284",
    "sql": "SELECT T1.emp_lname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History'",
    "linq": "context.Employees.Join(context.Professors, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\").Select(row => new { row.T1.EmpLname, row.T2.ProfOffice }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cf29a4d994b35fda76e7891054d41ae223521bd4acf4cc549f351249b1b3fc2d",
    "sql": "SELECT T3.dept_name , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'",
    "linq": "context.Employees.Join(context.Professors, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.EmpLname == \"Heffington\").Select(row => new { row.T3.DeptName, row.T2.ProfOffice }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9b94a232fdc9b744d88adacfbde0cdbf74d7b20e189d45fc2a168a3ba3e6784a",
    "sql": "SELECT T1.emp_lname , T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'",
    "linq": "context.Employees.Join(context.Professors, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ProfOffice == \"DRE 102\").Select(row => new { row.T1.EmpLname, row.T1.EmpHiredate }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "41935f76740ca577b8b363a9992228cded4ec538838237d1cb94923800840c6a",
    "sql": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'",
    "linq": "context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuNum, T3 => T3.StuNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.StuLname == \"Smithson\").Select(row => new { row.T1.CrsCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "95b8e193af731a2640d16bfd6b1b48b67325103152f4beb371d776b2f9e1fa94",
    "sql": "SELECT T4.crs_description , T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code WHERE T3.stu_lname = 'Smithson'",
    "linq": "context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuNum, T3 => T3.StuNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Courses, joined => joined.T1.CrsCode, T4 => T4.CrsCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T3.StuLname == \"Smithson\").Select(row => new { row.T4.CrsDescription, row.T4.CrsCredit }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c4a0fdddb60ad57ee8f69138e4f85c9a85efd7565b7fdc6f66a1c4524a0da52",
    "sql": "SELECT count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'",
    "linq": "context.Professors.Where(row => row.ProfHighDegree == \"Ph.D.\" || row.ProfHighDegree == \"MA\").Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9d93a53996e1f7b700d45f7d1b10054dec7a0a4d93aa9c68adbd09e92bf85be8",
    "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting' OR T2.dept_name = 'Biology'",
    "linq": "context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DeptName == \"Accounting\" || row.T2.DeptName == \"Biology\").Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d77df9724a63d26f2f67c042b55c0ea5c0ee3575dbc8d829e6d325102d2ac1ed",
    "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'",
    "linq": "context.Employees.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CrsCode == \"CIS-220\").Select(row => row.T1.EmpFname).Intersect(context.Employees.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CrsCode == \"QM-261\").Select(row => row.T1.EmpFname)).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d05f4a14ec231e2d6111671dc21bea4ead941d67fba951a7d93047415160257b",
    "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Computer Info. Systems'",
    "linq": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T2.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Courses, joined => joined.T3.CrsCode, T4 => T4.CrsCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Join(context.Departments, joined => joined.T4.DeptCode, T5 => T5.DeptCode, (joined, T5) => new { joined.T1, joined.T2, joined.T3, joined.T4, T5 }).Where(row => row.T5.DeptName == \"Accounting\").Select(row => row.T1.StuFname).Intersect(context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T2.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Courses, joined => joined.T3.CrsCode, T4 => T4.CrsCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Join(context.Departments, joined => joined.T4.DeptCode, T5 => T5.DeptCode, (joined, T5) => new { joined.T1, joined.T2, joined.T3, joined.T4, T5 }).Where(row => row.T5.DeptName == \"Computer Info. Systems\").Select(row => row.T1.StuFname)).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6fa881121efd4a5859ff9b271a304a46bd4a8e446f2fbae05e265162c14622b6",
    "sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211'",
    "linq": "context.Enrolls.Join(context.Students, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T1.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CrsCode == \"ACCT-211\").Select(row => (double) row.T2.StuGpa).Average();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "de6feb5b32dffad94e171053bd2ad3f0d612ef07833ce4bd2abc9dc00c80b82b",
    "sql": "SELECT stu_gpa , stu_phone , stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
    "linq": "context.Students.OrderByDescending(row => row.StuGpa).Select(row => new { row.StuGpa, row.StuPhone, row.StuFname }).Take(5).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "673071551d839886ff71cc9c062cab3717ac6c37ebdc380a4ff186065efaed4d",
    "sql": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY stu_gpa LIMIT 1",
    "linq": "context.Students.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T1.StuGpa).Select(row => new { row.T2.DeptName }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a0df26d43df1d314e536967945f8052a93d11511ece8a83cc9d942dbc6957621",
    "sql": "SELECT stu_fname , stu_gpa FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student)",
    "linq": "context.Students.Where(row => row.StuGpa < context.Students.Select(row => (double) row.StuGpa).Average()).Select(row => new { row.StuFname, row.StuGpa }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "21b593a9c7c72cffbbe6aa813619013bb35daeaf94d263e2629a1fd5925eb5e5",
    "sql": "SELECT T2.dept_name , T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Students.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.DeptName, group.First().T2.DeptAddress }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "90f609e0b28feb2f5e4f53b0da9329f89a1f76a4cb290726e169947973a9dcaf",
    "sql": "SELECT T2.dept_name , T2.dept_address , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
    "linq": "context.Students.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).Select(group => new { group.First().T2.DeptName, group.First().T2.DeptAddress, Count = group.Count() }).OrderByDescending(group => group.Count).Take(3).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d37e333930f58b8440590513c24fbde7af99291a8bc4e546f155afcf9a0d6212",
    "sql": "SELECT T1.emp_fname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T3.dept_code = T2.dept_code WHERE T3.dept_name = 'History' AND T2.prof_high_degree = 'Ph.D.'",
    "linq": "context.Employees.Join(context.Professors, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\" && row.T2.ProfHighDegree == \"Ph.D.\").Select(row => new { row.T1.EmpFname, row.T2.ProfOffice }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6384c5f9c6dde1d18b86cb719d0b5f0b48cdead294fd686ae3660c334055bf10",
    "sql": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
    "linq": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.EmpFname, row.T1.CrsCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ebdefa5b37127864ce18d59ba52809eb6f12538079f49401d3a87f2c11d94c18",
    "sql": "SELECT T2.emp_fname , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code",
    "linq": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.EmpFname, row.T3.CrsDescription }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "73ef25c14288d35b4de96d9afbca2f10e9734b0dd0a8806a73ed4d7acd543a26",
    "sql": "SELECT T2.emp_fname , T4.prof_office , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num",
    "linq": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Professors, joined => joined.T2.EmpNum, T4 => T4.EmpNum, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Select(row => new { row.T2.EmpFname, row.T4.ProfOffice, row.T3.CrsDescription }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cfbcb94e33e1132487842ac5df2bb871f07f1218012cab067e8a51502ea8fb58",
    "sql": "SELECT T2.emp_fname , T4.prof_office , T3.crs_description , T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num JOIN department AS T5 ON T4.dept_code = T5.dept_code",
    "linq": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Professors, joined => joined.T2.EmpNum, T4 => T4.EmpNum, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Join(context.Departments, joined => joined.T4.DeptCode, T5 => T5.DeptCode, (joined, T5) => new { joined.T1, joined.T2, joined.T3, joined.T4, T5 }).Select(row => new { row.T2.EmpFname, row.T4.ProfOffice, row.T3.CrsDescription, row.T5.DeptName }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8b2b109e42ee8dbfffa0f59a804a722763c270d931467624f332582968230389",
    "sql": "SELECT T1.stu_fname , T1.stu_lname , T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code",
    "linq": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T2.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Courses, joined => joined.T3.CrsCode, T4 => T4.CrsCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Select(row => new { row.T1.StuFname, row.T1.StuLname, row.T4.CrsDescription }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2b972e2e15677269e4fcad26968f1eb2057a02850791fb1b9220721f8008840d",
    "sql": "SELECT T1.stu_fname , T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'",
    "linq": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EnrollGrade == \"C\" || row.T2.EnrollGrade == \"A\").Select(row => new { row.T1.StuFname, row.T1.StuLname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d44b7ef4710a6b36f35d180c54ae2f9ce12526d86fed20261db166fef69263a3",
    "sql": "SELECT T2.emp_fname , T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Accounting'",
    "linq": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Professors, joined => joined.T2.EmpNum, T3 => T3.EmpNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Departments, joined => joined.T3.DeptCode, T4 => T4.DeptCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.DeptName == \"Accounting\").Select(row => new { row.T2.EmpFname, row.T1.ClassRoom }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "88eafe7b6c186bbc7238354d690734a12ddd0643c29df64256015113367caa75",
    "sql": "SELECT DISTINCT T2.emp_fname , T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Computer Info. Systems'",
    "linq": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Professors, joined => joined.T2.EmpNum, T3 => T3.EmpNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Departments, joined => joined.T3.DeptCode, T4 => T4.DeptCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.DeptName == \"Computer Info. Systems\").Select(row => new { row.T2.EmpFname, row.T3.ProfHighDegree }).Distinct().ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "735dc4839e527421f753eb3e8c2e71a7f68016e7962e0f68dc09449381df6b44",
    "sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A' AND T2.class_code = 10018",
    "linq": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EnrollGrade == \"A\" && row.T2.ClassCode == \"10018\").Select(row => new { row.T1.StuLname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e15f734d8086703bff29325c2ad715436b4a7ef864444c80680b8b063d9110c6",
    "sql": "SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree != 'Ph.D.'",
    "linq": "context.Professors.Join(context.Employees, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T1.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\" && row.T1.ProfHighDegree != \"Ph.D.\").Select(row => new { row.T2.EmpFname, row.T1.ProfOffice }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "49d76d4f37689932260468dadd77ddf79925c8f1c290d1a1e675b0697fc08b42",
    "sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING count(*) > 1",
    "linq": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProfNum }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.EmpFname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5beb2608d0721815ace3685c4e1858794dee9f9bad9717ff1c9b8f9fce335daa",
    "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num GROUP BY T2.stu_num HAVING count(*) = 1",
    "linq": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StuNum }).Where(group => group.Count() == 1).Select(group => new { group.First().T1.StuFname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7ba33f485c867894f2523176d38ced51160bdebaa5f0d3f53da580434b527e67",
    "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'",
    "linq": "context.Courses.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.CrsDescription, \"%Statistics%\")).Select(row => new { row.T2.DeptName }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6177e896a2854c906d1e1ccec6bb2493bbaf4d4c60b836c02f098aca2d022928",
    "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%'",
    "linq": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T2.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CrsCode == \"ACCT-211\" && EF.Functions.Like(row.T1.StuLname, \"S%\")).Select(row => new { row.T1.StuFname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a2407f20ac9141605af5543d320acba2b3c1094212e396007f3d81cec2281416",
    "sql": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax'",
    "linq": "context.CustomerMasterIndices.Join(context.CmiCrossReferences, T1 => T1.MasterCustomerId, T2 => T2.MasterCustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SourceSystemCode == \"Tax\").Select(row => new { row.T1.CmiDetails }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5b69a32ed12f12097c17722ad8afc08bf32f75cccdf37a5a991598cbcd658b4c",
    "sql": "SELECT T1.cmi_cross_ref_id , T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*) >= 1",
    "linq": "context.CmiCrossReferences.Join(context.CouncilTaxes, T1 => T1.CmiCrossRefId, T2 => T2.CmiCrossRefId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CmiCrossRefId }).Where(group => group.Count() >= 1).Select(group => new { group.Key.CmiCrossRefId, group.First().T1.SourceSystemCode }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d828b4b80acc5cfb2e77d66c51a4c66e7c6467163618739c7e493d3c0dd8b371",
    "sql": "SELECT T2.cmi_cross_ref_id , T2.master_customer_id , count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id",
    "linq": "context.BusinessRates.Join(context.CmiCrossReferences, T1 => T1.CmiCrossRefId, T2 => T2.CmiCrossRefId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CmiCrossRefId }).Select(group => new { group.Key.CmiCrossRefId, group.First().T2.MasterCustomerId, Count = group.Count() }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "335971c1417d55a85c0e927623a06d557a48370e8de4d89a0aa055c7a120877b",
    "sql": "SELECT T1.source_system_code , T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id ORDER BY T2.council_tax_id",
    "linq": "context.CmiCrossReferences.Join(context.BenefitsOverpayments, T1 => T1.CmiCrossRefId, T2 => T2.CmiCrossRefId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.CouncilTaxId).Select(row => new { row.T1.SourceSystemCode, row.T2.CouncilTaxId }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ec73bdc52c8ac7e0355a8a66080d5d8c50eed066c599d3a67b1c2410a1fca955",
    "sql": "SELECT T1.source_system_code , T1.master_customer_id , T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id",
    "linq": "context.CmiCrossReferences.Join(context.ParkingFines, T1 => T1.CmiCrossRefId, T2 => T2.CmiCrossRefId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.SourceSystemCode, row.T1.MasterCustomerId, row.T2.CouncilTaxId }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bd8cf06a6245d7eec1df29c6d059d01f60b6b537cd199a7ebca12f7aad56006f",
    "sql": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id = T2.master_customer_id WHERE T3.cmi_details != 'Schmidt , Kertzmann and Lubowitz'",
    "linq": "context.RentArrears.Join(context.CmiCrossReferences, T1 => T1.CmiCrossRefId, T2 => T2.CmiCrossRefId, (T1, T2) => new { T1, T2 }).Join(context.CustomerMasterIndices, joined => joined.T2.MasterCustomerId, T3 => T3.MasterCustomerId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CmiDetails != \"Schmidt , Kertzmann and Lubowitz\").Select(row => new { row.T1.CouncilTaxId }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e4208f81bff2af9a2e6a9cf8cf3058a37ba9657164fb666ecff4c5850871816e",
    "sql": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T2.source_system_code = 'Electoral' OR T2.source_system_code = 'Tax'",
    "linq": "context.ElectoralRegisters.Join(context.CmiCrossReferences, T1 => T1.CmiCrossRefId, T2 => T2.CmiCrossRefId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SourceSystemCode == \"Electoral\" || row.T2.SourceSystemCode == \"Tax\").Select(row => new { row.T1.ElectoralRegisterId }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2fd4209faa402fb2da8b1a0b2e81ad2635a80b385928b249b4bad7b5611f92b3",
    "sql": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references",
    "linq": "context.CmiCrossReferences.Select(row => row.SourceSystemCode).Distinct().Count();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1829f7bf68161225ee386d99143e663d5c6615b3ada04e9d6215a49f227914b8",
    "sql": "SELECT * FROM customer_master_index ORDER BY cmi_details DESC",
    "linq": "context.CustomerMasterIndices.OrderByDescending(row => row.CmiDetails).Select(row => new { row.MasterCustomerId, row.CmiDetails }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f0f4832e4bc21b7e0d1e4617c97ba83796038dffc75cda68ffa793bb42b599b8",
    "sql": "SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines",
    "linq": "context.ParkingFines.Select(row => new { row.CouncilTaxId, row.CmiCrossRefId }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c56cbcdd0ea79c877889c5595b8a402961b804864287e96649d5d4c7307a1c1e",
    "sql": "SELECT count(*) FROM rent_arrears",
    "linq": "context.RentArrears.Count();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4358f1441fce57d7bd318ad89c539c6571891641dd2544af6a785161a4e8f72b",
    "sql": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T1.cmi_details = 'Gottlieb , Becker and Wyman'",
    "linq": "context.CustomerMasterIndices.Join(context.CmiCrossReferences, T1 => T1.MasterCustomerId, T2 => T2.MasterCustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CmiDetails == \"Gottlieb , Becker and Wyman\").Select(row => new { row.T2.SourceSystemCode }).Distinct().ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f1b6cc584b884b24f040875e7b2026b4286544845b97d6252074e9ed1f407ffb",
    "sql": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
    "linq": "context.CmiCrossReferences.Select(row => row.CmiCrossRefId).Except(context.ParkingFines.Select(row => row.CmiCrossRefId)).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1e46371a8e4c284a381b0c6d2c50032dd3b8df27830ce2a2bfda723b68d8682f",
    "sql": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'",
    "linq": "context.CmiCrossReferences.Where(row => EF.Functions.Like(row.SourceSystemCode, \"%en%\")).Select(row => new { row.SourceSystemCode }).Distinct().ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "799b5c0997fa74258b8230721413c36c0e603fd84cff7252d0fef313689d0ba9",
    "sql": "SELECT count(*) FROM Companies",
    "linq": "context.Companies.Count();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7db5aba0df6a6cbd2259e14607f37b5358001dbc98701d914b8d2ce739288ea3",
    "sql": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC",
    "linq": "context.Companies.OrderByDescending(row => (double) row.MarketValueBillion).Select(row => new { row.Name }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8e973484ccbc2357df31a8af06f120e091f5cdbbe0f146ed1b10f9104e81cbc3",
    "sql": "SELECT name FROM Companies WHERE Headquarters != 'USA'",
    "linq": "context.Companies.Where(row => row.Headquarters != \"USA\").Select(row => new { row.Name }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "256cad4315ceb4c70a0136f30d34a491945c469ce1ea8d5a63928c7912066a5c",
    "sql": "SELECT name , Assets_billion FROM Companies ORDER BY name ASC",
    "linq": "context.Companies.OrderBy(row => row.Name).Select(row => new { row.Name, row.AssetsBillion }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "179fee8cfcb3b2f79e6c96cebf53463942a6a6947835a1425f503e423a564d4c",
    "sql": "SELECT avg(Profits_billion) FROM Companies",
    "linq": "context.Companies.Select(row => (double) row.ProfitsBillion).Average();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "61c64a47a24479140d336a58d110df725d420029165b3c53f5b6064dfa0b2239",
    "sql": "SELECT max(Sales_billion) , min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
    "linq": "context.Companies.Where(row => row.Industry != \"Banking\").GroupBy(row => 1).Select(group => new { MaxSalesBillion = group.Select(row => row.SalesBillion).Max(), MinSalesBillion = group.Select(row => row.SalesBillion).Min() }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f3aacc560e7028bc6a5a7c6adeb1c0b779d1a7f1bf357b56f95b77e12e23bd63",
    "sql": "SELECT count(DISTINCT Industry) FROM Companies",
    "linq": "context.Companies.Select(row => row.Industry).Distinct().Count();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9af7038326b1b797e3b498b203a6d5234c34a04b7f69f38962e41d94620d4c39",
    "sql": "SELECT name FROM buildings ORDER BY Height DESC",
    "linq": "context.Buildings.OrderByDescending(row => row.Height).Select(row => new { row.Name }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "63480fc013dcbc9eb158030128167ffd2221d9e9c516f2251718ab3f8c7f032f",
    "sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
    "linq": "context.Buildings.OrderByDescending(row => row.Height).Select(row => new { row.Stories }).Take(1).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3a89e7f8860131a40bbc4fdf905758367b3b864f81f6bd4065127addd6b31fa8",
    "sql": "SELECT T3.name , T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id",
    "linq": "context.OfficeLocations.Join(context.Buildings, T1 => T1.BuildingId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Companies, joined => joined.T1.CompanyId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { T3Name = row.T3.Name, T2Name = row.T2.Name }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "acab3857b8d2f17622386bd893d2e10576b9132011aae752f802aaa3072a2f53",
    "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id HAVING COUNT(*) > 1",
    "linq": "context.OfficeLocations.Join(context.Buildings, T1 => T1.BuildingId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Companies, joined => joined.T1.CompanyId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.BuildingId }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2b9896eb4ec02d2dc52c6e870453f2d54485f24f334286d664ec03050f56e7ee",
    "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.OfficeLocations.Join(context.Buildings, T1 => T1.BuildingId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Companies, joined => joined.T1.CompanyId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.BuildingId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name }).Take(1).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e9711b2682f71ef5be409e4faf9cb922a441880f21684ae7e147b0be4d12aa8c",
    "sql": "SELECT name FROM buildings WHERE Status = \"on-hold\" ORDER BY Stories ASC",
    "linq": "context.Buildings.Where(row => row.Status == \"on-hold\").OrderBy(row => row.Stories).Select(row => new { row.Name }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "53a4fdab3fb87a7ff2a8f91249223954e333022499a0563f407f9f1c78876fef",
    "sql": "SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry",
    "linq": "context.Companies.GroupBy(row => new { row.Industry }).Select(group => new { group.Key.Industry, Count = group.Count() }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ba622a3b0da0e9b15730a53ff72370a6a1fd775dfdaeb7eacf8bedd9beed5bd1",
    "sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
    "linq": "context.Companies.GroupBy(row => new { row.Industry }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Industry }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "29c35720632f9542fb6af4c45bc8d472b29dcb2ee74576e5b560986ad2189ba7",
    "sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Companies.GroupBy(row => new { row.Industry }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Industry }).Take(1).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e5c872c36a160da2afb5f658d12025d3520acdd439986fb17946e5c8c4ba46de",
    "sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)",
    "linq": "context.Buildings.Where(row => !context.OfficeLocations.Select(row => row.BuildingId).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "42ba37606436c1372f3633c60a1155b324ef2328d9de30d55f7241eaf7c45492",
    "sql": "SELECT Industry FROM Companies WHERE Headquarters = \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters = \"China\"",
    "linq": "context.Companies.Where(row => row.Headquarters == \"USA\").Select(row => row.Industry).Intersect(context.Companies.Where(row => row.Headquarters == \"China\").Select(row => row.Industry)).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "01bdc75e3d790487630e7056b0a2be686f175f84cf87e64b95b290fb62617641",
    "sql": "SELECT count(*) FROM Companies WHERE Industry = \"Banking\" OR Industry = \"Conglomerate\"",
    "linq": "context.Companies.Where(row => row.Industry == \"Banking\" || row.Industry == \"Conglomerate\").Count();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8c87c0b22268d0d7e99009b84117b09eb7bc9241075518943032167f3e2dbc70",
    "sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*) > 2",
    "linq": "context.Companies.GroupBy(row => new { row.Headquarters }).Where(group => group.Count() > 2).Select(group => new { group.Key.Headquarters }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6c7544cdc18402ebd8138ccbf5886a4a206f3473dc575e84d0e98130d760f6d9",
    "sql": "SELECT dorm_name FROM dorm WHERE gender = 'F'",
    "linq": "context.Dorms.Where(row => row.Gender == \"F\").Select(row => new { row.DormName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "deaead36925e322fabf29e907979a359ad6b45f95336044c60b116b1fdfea435",
    "sql": "SELECT dorm_name FROM dorm WHERE student_capacity > 300",
    "linq": "context.Dorms.Where(row => row.StudentCapacity > 300).Select(row => new { row.DormName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "04ad46e2f18800c6883518554efaa8c913fc1c9dc4ab798689aee35187e6886c",
    "sql": "SELECT count(*) FROM student WHERE sex = 'F' AND age < 25",
    "linq": "context.Students.Where(row => row.Sex == \"F\" && row.Age < 25).Count();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1ef5a7cb78b2c11b2a2aa6083028581b04cdfd18e6a24cc55acf57338cb5d5ac",
    "sql": "SELECT fname FROM student WHERE age > 20",
    "linq": "context.Students.Where(row => row.Age > 20).Select(row => new { row.Fname }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a9e0a309d4e48104c0afd686e6fa094518309e1d1e9a04c2aeb51a248870d078",
    "sql": "SELECT fname FROM student WHERE city_code = 'PHL' AND age BETWEEN 20 AND 25",
    "linq": "context.Students.Where(row => row.CityCode == \"PHL\" && row.Age >= 20 && row.Age <= 25).Select(row => new { row.Fname }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "103d500675c8d06641a71c3a014eef3f0a99fc2ed4f7330d14cbfea828b7ce77",
    "sql": "SELECT count(*) FROM dorm",
    "linq": "context.Dorms.Count();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3fddccfabe4acf46eb8d3d1c9f1c8e4e8f53fdaf3918277e1492cc00147b26a5",
    "sql": "SELECT count(*) FROM dorm_amenity",
    "linq": "context.DormAmenities.Count();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6edb4eb45544252dd65b063ea652eaaaf1015bce60fe44a47250e4567234d931",
    "sql": "SELECT sum(student_capacity) FROM dorm",
    "linq": "context.Dorms.Select(row => row.StudentCapacity).Sum();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4ecd447c33c38f85e74cde8a0c03c280ae39bfb97368afff5cd2f156fdaa9939",
    "sql": "SELECT count(*) FROM student",
    "linq": "context.Students.Count();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "48e7a23a978caaa255fb941742bc7ddccd59d9e5c2ecee039de27f24e1bd45bc",
    "sql": "SELECT avg(age) , city_code FROM student GROUP BY city_code",
    "linq": "context.Students.GroupBy(row => new { row.CityCode }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), group.Key.CityCode }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4a2a2b31dd4ee1e867686b04b3fc4a914d11a68fc6c0c7d86941d742b056c6ec",
    "sql": "SELECT avg(student_capacity) , sum(student_capacity) FROM dorm WHERE gender = 'X'",
    "linq": "context.Dorms.Where(row => row.Gender == \"X\").GroupBy(row => 1).Select(group => new { AverageStudentCapacity = group.Select(row => row.StudentCapacity).Average(), SumStudentCapacity = group.Select(row => row.StudentCapacity).Sum() }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8456f092d98101f3d3bc6f218e897584e468b595a174a3925d3f1dcef24c92ea",
    "sql": "SELECT count(DISTINCT dormid) FROM has_amenity",
    "linq": "context.HasAmenities.Select(row => row.Dormid).Distinct().Count();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f100fca9a476f36cb249bd6174ba115a9ebbf1eccaf8f3a5c7b2f7346f438542",
    "sql": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)",
    "linq": "context.Dorms.Where(row => !context.HasAmenities.Select(row => row.Dormid).Contains(row.Dormid)).Select(row => new { row.DormName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "46b699a38962560a20c8eb3c5524319956d20cd465aff379901abcfd537892ce",
    "sql": "SELECT count(DISTINCT gender) FROM dorm",
    "linq": "context.Dorms.Select(row => row.Gender).Distinct().Count();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f3dc5dbe98dddb00d578a483ada00ab3fed75cfc122ce14bf7298a1020c4a0b8",
    "sql": "SELECT student_capacity , gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
    "linq": "context.Dorms.Where(row => EF.Functions.Like(row.DormName, \"%Donor%\")).Select(row => new { row.StudentCapacity, row.Gender }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "592e8cbabebabb7fa55beccae8b8fef0741f290e64e96c274f947220c281854f",
    "sql": "SELECT dorm_name , gender FROM dorm WHERE student_capacity > 300 OR student_capacity < 100",
    "linq": "context.Dorms.Where(row => row.StudentCapacity > 300 || row.StudentCapacity < 100).Select(row => new { row.DormName, row.Gender }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3ec063e9b73ef32c13b7d2fb57855eb36174a2872a4591b63261a36f2c852555",
    "sql": "SELECT count(DISTINCT major) , count(DISTINCT city_code) FROM student",
    "linq": "context.Students.GroupBy(row => 1).Select(group => new { CountDistinctMajor = group.Select(row => row.Major).Distinct().Count(), CountDistinctCityCode = group.Select(row => row.CityCode).Distinct().Count() }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c03527c5d788799a067cbb268754a328b9814cfe8fdddb7898a652ff5d927daa",
    "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'",
    "linq": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.AmenityName == \"TV Lounge\").Select(row => row.T1.DormName).Intersect(context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.AmenityName == \"Study Room\").Select(row => row.T1.DormName)).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "91b5f3241555fa62389e3787fd80a5cb958a1f78112f350e6b2c40778ec5c25e",
    "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'",
    "linq": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.AmenityName == \"TV Lounge\").Select(row => row.T1.DormName).Except(context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.AmenityName == \"Study Room\").Select(row => row.T1.DormName)).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b0f7b101bbd3fe66e4d8e9f18cdfd3d756f2c340202e4da7b1884d7e014ac056",
    "sql": "SELECT lname FROM student WHERE sex = 'F' AND city_code = 'BAL' UNION SELECT lname FROM student WHERE sex = 'M' AND age < 20",
    "linq": "context.Students.Where(row => row.Sex == \"F\" && row.CityCode == \"BAL\").Select(row => row.Lname).Union(context.Students.Where(row => row.Sex == \"M\" && row.Age < 20).Select(row => row.Lname)).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a40873137c0e4ac2097d1000bc4d2d4469734a845920e5cf35dd44c629764868",
    "sql": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1",
    "linq": "context.Dorms.OrderByDescending(row => row.StudentCapacity).Select(row => new { row.DormName }).Take(1).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "69f1d9bfa130fb11591de40c3d5688f6d6d04a2bf4a2b25fecb128a20a61e14f",
    "sql": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
    "linq": "context.DormAmenities.OrderBy(row => row.AmenityName).Select(row => new { row.AmenityName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fea648e130128643c059cf1f80d6faa6f6cb288a78930c902176aab0457d1b6f",
    "sql": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Students.GroupBy(row => new { row.CityCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CityCode }).Take(1).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a09149d415c53a261c01e05556932f708a0017b95e50560cbd574342fc573268",
    "sql": "SELECT fname , lname FROM student WHERE age < (SELECT avg(age) FROM student)",
    "linq": "context.Students.Where(row => row.Age < context.Students.Select(row => row.Age).Average()).Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bf58846467b49976a3984152b933d8a0f7321b050823861864e20f70ad7b2b34",
    "sql": "SELECT fname , lname FROM student WHERE city_code != 'HKG' ORDER BY age",
    "linq": "context.Students.Where(row => row.CityCode != \"HKG\").OrderBy(row => row.Age).Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "405f69d3b310d8c683aa0ab5f19b9ef4a4ab4bc696f8821fd422d2778129fe00",
    "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid = T1.amenid JOIN dorm AS T3 ON T2.dormid = T3.dormid WHERE T3.dorm_name = 'Anonymous Donor Hall' ORDER BY T1.amenity_name",
    "linq": "context.DormAmenities.Join(context.HasAmenities, T1 => T1.Amenid, T2 => T2.Amenid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DormName == \"Anonymous Donor Hall\").OrderBy(row => row.T1.AmenityName).Select(row => new { row.T1.AmenityName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f5c5afa959cff6fe1cd36a1572f9aa0bd1692119a89bfc2bb459c1a8941b40fd",
    "sql": "SELECT count(*) , sum(student_capacity) , gender FROM dorm GROUP BY gender",
    "linq": "context.Dorms.GroupBy(row => new { row.Gender }).Select(group => new { Count = group.Count(), SumStudentCapacity = group.Select(row => row.StudentCapacity).Sum(), group.Key.Gender }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "01fd43eecb3eabd717274ab330d579d2c98d9ab9b0c5286580c654a6be9372e4",
    "sql": "SELECT avg(age) , max(age) , sex FROM student GROUP BY sex",
    "linq": "context.Students.GroupBy(row => new { row.Sex }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), MaxAge = group.Select(row => row.Age).Max(), group.Key.Sex }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dc4414b76cc76dc03d836e0b575a244e29e2791d86117768c6ec2f4187286ac8",
    "sql": "SELECT count(*) , major FROM student GROUP BY major",
    "linq": "context.Students.GroupBy(row => new { row.Major }).Select(group => new { Count = group.Count(), group.Key.Major }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f2830f69149340ef58cd03816015e8dd7a96dfa18a6fb1b1b596f2744c54a283",
    "sql": "SELECT count(*) , avg(age) , city_code FROM student GROUP BY city_code",
    "linq": "context.Students.GroupBy(row => new { row.CityCode }).Select(group => new { Count = group.Count(), AverageAge = group.Select(row => row.Age).Average(), group.Key.CityCode }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e3fe4acf64b56c2f1ebca7e568f0c99a521822180faf8d2b0460c9ff83089435",
    "sql": "SELECT count(*) , avg(age) , city_code FROM student WHERE sex = 'M' GROUP BY city_code",
    "linq": "context.Students.Where(row => row.Sex == \"M\").GroupBy(row => new { row.CityCode }).Select(group => new { Count = group.Count(), AverageAge = group.Select(row => row.Age).Average(), group.Key.CityCode }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "478b6dbf2382fcf0e117d168855157d4cece3567f231d57ca29e9a35d427553b",
    "sql": "SELECT count(*) , city_code FROM student GROUP BY city_code HAVING count(*) > 1",
    "linq": "context.Students.GroupBy(row => new { row.CityCode }).Select(group => new { Count = group.Count(), group.Key.CityCode }).Where(group => group.Count > 1).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a5034f1df0b631d1d5d492eb29639b67d99fdc3dc6843d341f447346d754fe74",
    "sql": "SELECT fname , lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
    "linq": "context.Students.Where(row => row.Major != context.Students.GroupBy(row => new { row.Major }).OrderByDescending(group => group.Count()).Select(group => group.Key.Major).Take(1).First()).Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1ddcd3bf04800641b418baefbb8a312f230b857a41bfb18460ea9d7ce85946bd",
    "sql": "SELECT count(*) , sex FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY sex",
    "linq": "context.Students.Where(row => row.Age > context.Students.Select(row => row.Age).Average()).GroupBy(row => new { row.Sex }).Select(group => new { Count = group.Count(), group.Key.Sex }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c87b3f0371cfa3769fecf5281f7879b3f7905adf1bbf2a54dd942ab6f8301852",
    "sql": "SELECT avg(T1.age) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name",
    "linq": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.DormName }).Select(group => new { AverageAge = group.Select(row => row.T1.Age).Average(), group.Key.DormName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bbe7e251975d3659d25cf3f2ea7ec0786d9a12487bb8abc78361a5b1ee8ed3bc",
    "sql": "SELECT count(*) , T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid WHERE T1.student_capacity > 100 GROUP BY T1.dormid",
    "linq": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StudentCapacity > 100).GroupBy(row => new { row.T1.Dormid }).Select(group => new { Count = group.Count(), group.Key.Dormid }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c1de05810276153e11840f17b1f93291016783e6d9e88ca63c48cbc9fe897ca7",
    "sql": "SELECT count(*) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name",
    "linq": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Age > 20).GroupBy(row => new { row.T3.DormName }).Select(group => new { Count = group.Count(), group.Key.DormName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ae4eff51e3f640e74a5f5969d822c3c2dccde11d9488cb468cf742cec3f0b7d1",
    "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall'",
    "linq": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DormName == \"Smith Hall\").Select(row => new { row.T1.Fname }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "16e447b07939a3f7bf0b7e744c27a7e32df48722fcbe90794cfe4f8bd2d7e572",
    "sql": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.student_capacity = (SELECT max(student_capacity) FROM dorm)",
    "linq": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.StudentCapacity == context.Dorms.Select(row => row.StudentCapacity).Max()).Select(row => row.T1.Age).Average();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4ca450a8bd5323d4154be8f188e7317022dbdd51720789a451a5e02131b952a9",
    "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.gender = 'M'",
    "linq": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Gender == \"M\").Count();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dac58085ef138e3fab959b6793960e8c4b636296b6f3dde06cef7138feeb4c69",
    "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' AND T1.sex = 'F'",
    "linq": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DormName == \"Smith Hall\" && row.T1.Sex == \"F\").Count();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cc93c9b31581b551b0c14cdd9da44052436637aad5d73d759d4705b13253483b",
    "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall'",
    "linq": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.DormName == \"Smith Hall\").Select(row => new { row.T3.AmenityName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bad10c731f8e57e0ba197fc3c9a527dd162009a86f7f4e0a77775757257d5069",
    "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall' ORDER BY T3.amenity_name",
    "linq": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.DormName == \"Smith Hall\").OrderBy(row => row.T3.AmenityName).Select(row => new { row.T3.AmenityName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "66107aac4e969e2272b7d2783b0347e40366e03bb0c5dd15b9ce9c95546cc2d3",
    "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid = T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.DormAmenities.Join(context.HasAmenities, T1 => T1.Amenid, T2 => T2.Amenid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Amenid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.AmenityName }).Take(1).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "10d04b495ef6f9c7843969a447e7533c803ca58ba7a1ab4e19affac8ed513b04",
    "sql": "SELECT T1.dorm_name , T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
    "linq": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T2.Dormid }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.DormName, group.First().T1.StudentCapacity }).Take(1).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "291a612d87c8d7001a4957521e66f6bf7318091da2539a05a4cc087107f47e08",
    "sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'",
    "linq": "context.Dorms.Select(row => row.DormName).Except(context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.AmenityName == \"TV Lounge\").Select(row => row.T1.DormName)).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e6f81612f399cf8271ab3b5a007607d86808431bb73f17408265897b0d7bf826",
    "sql": "SELECT T1.fname , T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')",
    "linq": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Dormid.HasValue && context.HasAmenities.Join(context.DormAmenities, T3 => T3.Amenid, T4 => T4.Amenid, (T3, T4) => new { T3, T4 }).Where(row => row.T4.AmenityName == \"TV Lounge\").Select(row => row.T3.Dormid).Contains(row.T2.Dormid.Value)).Select(row => new { row.T1.Fname, row.T1.Lname }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6e24268546f17bd426b85adfd6fed61a31002161d18cd9d6d6227651b1fc117c",
    "sql": "SELECT T1.fname , T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')",
    "linq": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Dormid.HasValue && !context.HasAmenities.Join(context.DormAmenities, T3 => T3.Amenid, T4 => T4.Amenid, (T3, T4) => new { T3, T4 }).Where(row => row.T4.AmenityName == \"TV Lounge\").Select(row => row.T3.Dormid).Contains(row.T2.Dormid.Value)).Select(row => new { row.T1.Fname, row.T1.Age }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a9daee2cd8cb4da06c94c908b9a3c7c190ee2b6f910531aff20e30c796a3ba27",
    "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid WHERE T5.lname = 'Smith'",
    "linq": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.LivesIns, joined => joined.T1.Dormid, T4 => T4.Dormid, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Join(context.Students, joined => joined.T4.Stuid, T5 => T5.StuId, (joined, T5) => new { joined.T1, joined.T2, joined.T3, joined.T4, T5 }).Where(row => row.T5.Lname == \"Smith\").Select(row => new { row.T3.AmenityName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0cfcb66f4c888ca4a766af3ebcfcc2393d8dba24c0016fdf6466dd621ecbd267",
    "sql": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.coupon_amount = 500",
    "linq": "context.Customers.Join(context.DiscountCoupons, T1 => T1.CouponId, T2 => T2.CouponId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CouponAmount == 500).Select(row => new { row.T1.GoodOrBadCustomer }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a7afb5073e2e36e6784d20345d9f35838fe463bcbbf53ad8de1551e52eb6b1b8",
    "sql": "SELECT T1.customer_id , T1.first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
    "linq": "context.Customers.Join(context.Bookings, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Select(group => new { group.Key.CustomerId, group.First().T1.FirstName, Count = group.Count() }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f72fccab5bcee54549cdd7e674b78ee6d09a8743f28efcf3c2eb4063e55eba3e",
    "sql": "SELECT customer_id , sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1",
    "linq": "context.Payments.GroupBy(row => new { row.CustomerId }).Select(group => new { group.Key.CustomerId, SumAmountPaid = group.Select(row => (double) row.AmountPaid).Sum() }).OrderByDescending(group => group.SumAmountPaid).Take(1).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8cfd0b3fd72256bdd93edfe77a0bc6c8a7241274dfff121dabf735be8fe10637",
    "sql": "SELECT T1.booking_id , T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Bookings.Join(context.Payments, T1 => T1.BookingId, T2 => T2.BookingId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.BookingId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BookingId, group.First().T1.AmountOfRefund }).Take(1).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "769b0b2809ee5d7a458cd8b2ea02a43fef507811111bca15ee74e8d76796683b",
    "sql": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*) = 3",
    "linq": "context.ProductsBookeds.GroupBy(row => new { row.ProductId }).Where(group => group.Count() == 3).Select(group => new { group.Key.ProductId }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2d0d76d16f6fce3ee6bf9ba8dcf32c1b64e4a5c47e9e94a7b3e042a5fc3e6d1c",
    "sql": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.booked_amount = 102.76",
    "linq": "context.ProductsBookeds.Join(context.ProductsForHires, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookedAmount == 102.76).Select(row => new { row.T2.ProductDescription }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c76bfba9de3e6b2f4619e72ae5e222f56d1199267bf2bf3f4033102d377c42a8",
    "sql": "SELECT T3.booking_start_date , T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id = T2.product_id JOIN bookings AS T3 ON T2.booking_id = T3.booking_id WHERE T1.product_name = 'Book collection A'",
    "linq": "context.ProductsForHires.Join(context.ProductsBookeds, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Bookings, joined => joined.T2.BookingId, T3 => T3.BookingId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.ProductName == \"Book collection A\").Select(row => new { row.T3.BookingStartDate, row.T3.BookingEndDate }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bf0a97834f74415f6f1808b4b86e217a2641c6d377b1025a57cea61c6504c482",
    "sql": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.available_yn = 1",
    "linq": "context.ViewProductAvailabilities.Join(context.ProductsForHires, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.AvailableYn == \"1\").Select(row => new { row.T2.ProductName }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fdfce1bef421eece8c940c562f004bed49daf21f28c270a756e562e5daa5ba9b",
    "sql": "SELECT count(DISTINCT product_type_code) FROM products_for_hire",
    "linq": "context.ProductsForHires.Select(row => row.ProductTypeCode).Distinct().Count();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "23d1ed9eb0730c65d63dde6ab0637940a09bb98696b52150b36555487b573f13",
    "sql": "SELECT first_name , last_name , gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY last_name",
    "linq": "context.Customers.Where(row => row.GoodOrBadCustomer == \"good\").OrderBy(row => row.LastName).Select(row => new { row.FirstName, row.LastName, row.GenderMf }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "742be9284988b1d34de70fc70fb82f04a2660ec618c8fcb116aa4e42b6996753",
    "sql": "SELECT avg(amount_due) FROM payments",
    "linq": "context.Payments.Select(row => (double) row.AmountDue).Average();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "acf6c40c90cff7394303cb258934f33dd40e3f74872b0663e2c760d2f352c313",
    "sql": "SELECT max(booked_count) , min(booked_count) , avg(booked_count) FROM products_booked",
    "linq": "context.ProductsBookeds.GroupBy(row => 1).Select(group => new { MaxBookedCount = group.Select(row => row.BookedCount).Max(), MinBookedCount = group.Select(row => row.BookedCount).Min(), AverageBookedCount = group.Select(row => row.BookedCount).Average() }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c44fb65978b2908beefba8ba89e872fb32c4e8fba942c14422b01e039d5023ce",
    "sql": "SELECT DISTINCT payment_type_code FROM payments",
    "linq": "context.Payments.Select(row => new { row.PaymentTypeCode }).Distinct().ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "59d116c9eb9aed021fa861b0d70ee63538b096fa450b72a5a773169a831d4cc6",
    "sql": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'",
    "linq": "context.ProductsForHires.Where(row => EF.Functions.Like(row.ProductName, \"%Book%\")).Select(row => new { row.DailyHireCost }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0266dc57369a9d8e1b4270777f000b3c45885cad7715239b982dd5626bb22429",
    "sql": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount > 200 )",
    "linq": "context.ProductsForHires.Where(row => !context.ProductsBookeds.Where(row => row.BookedAmount > 200).Select(row => row.ProductId).Contains(row.ProductId)).Count();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "736e68bca55630f8f04496c9ce2cfdd6c1ebcd63f16743a48d023aa085ef95ff",
    "sql": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'bad'",
    "linq": "context.DiscountCoupons.Join(context.Customers, T1 => T1.CouponId, T2 => T2.CouponId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.GoodOrBadCustomer == \"good\").Where(row => row.T1.CouponAmount.HasValue).Select(row => T1CouponAmount = row.T1.CouponAmount.Value).Intersect(context.DiscountCoupons.Join(context.Customers, T1 => T1.CouponId, T2 => T2.CouponId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.GoodOrBadCustomer == \"bad\").Where(row => row.T1.CouponAmount.HasValue).Select(row => T1CouponAmount = row.T1.CouponAmount.Value)).ToList();",
    "db_name": "products_for_hire",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,505): error CS0103: The name 'T1CouponAmount' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    148 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.56",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f04e271da9715840c8f5454c2d66f2ad277d1b2368356762849baddf5cb7c3f8",
    "sql": "SELECT payment_date FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'",
    "linq": "context.Payments.Where(row => row.AmountPaid > 300 || row.PaymentTypeCode == \"Check\").Select(row => new { row.PaymentDate }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "30626d0defb5ee3fb596e097564c92bbb3edff09fbbab05ce9b1d66cb809a46d",
    "sql": "SELECT product_name , product_description FROM products_for_hire WHERE product_type_code = 'Cutlery' AND daily_hire_cost < 20",
    "linq": "context.ProductsForHires.Where(row => row.ProductTypeCode == \"Cutlery\" && row.DailyHireCost < 20).Select(row => new { row.ProductName, row.ProductDescription }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8fa8565a412fd4ebee6546fae3eb2fadc6b58b27ae383bbf052457e2cb43fcf9",
    "sql": "SELECT count(*) FROM member WHERE Membership_card = 'Black'",
    "linq": "context.Members.Where(row => row.MembershipCard == \"Black\").Count();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "12711642429c2483b9a783f3109450526f4b550f396d2c9c5f0541fe28aeb342",
    "sql": "SELECT count(*) , address FROM member GROUP BY address",
    "linq": "context.Members.GroupBy(row => new { row.Address }).Select(group => new { Count = group.Count(), group.Key.Address }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dfbb9ec0fda416c4639405a8b5fc635501db3af0395c0326d9095ef7d196f3f4",
    "sql": "SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'",
    "linq": "context.Members.Where(row => row.Address == \"Harford\" || row.Address == \"Waterbury\").Select(row => new { row.Name }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "91f83f13e1b05a1f400540048f6528eaaa2cf529883bd9c777df3dfc43422df5",
    "sql": "SELECT name , member_id FROM member WHERE Membership_card = 'Black' OR age < 30",
    "linq": "context.Members.Where(row => row.MembershipCard == \"Black\" || row.Age < 30).Select(row => new { row.Name, row.MemberId }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "01616c53f22ceeaa0a0226f7a655da0774db07bcc899057304274f26206d1a78",
    "sql": "SELECT Time_of_purchase , age , address FROM member ORDER BY Time_of_purchase",
    "linq": "context.Members.OrderBy(row => row.TimeOfPurchase).Select(row => new { row.TimeOfPurchase, row.Age, row.Address }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1021699273705d25b5e7f88cbbe4ba01780ba5017c696863acbc706a4349019f",
    "sql": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*) > 5",
    "linq": "context.Members.GroupBy(row => new { row.MembershipCard }).Where(group => group.Count() > 5).Select(group => new { group.Key.MembershipCard }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1484620e845bab7d645db0ed77d0fbf0c1297bf403b5a0b442f9bd706a0c4bf4",
    "sql": "SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40",
    "linq": "context.Members.Where(row => row.Age < 30).Select(row => row.Address).Intersect(context.Members.Where(row => row.Age > 40).Select(row => row.Address)).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "386be3816d68084ebd35c2d8d0ecadb2541896c1c6a6402d02123c78cd5b4a38",
    "sql": "SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'",
    "linq": "context.Members.Where(row => row.Address == \"Hartford\").Select(row => row.MembershipCard).Intersect(context.Members.Where(row => row.Address == \"Waterbury\").Select(row => row.MembershipCard)).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f1beb69f724a89e5ecc005db5e91168532b03ed18b59e612c7429daeaf27dd27",
    "sql": "SELECT count(*) FROM member WHERE address != 'Hartford'",
    "linq": "context.Members.Where(row => row.Address != \"Hartford\").Count();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "35b1b5c5c444730674827bc3c74063e2aededec0147a46a40134f4fadbcf8697",
    "sql": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card = 'Black'",
    "linq": "context.Members.Select(row => row.Address).Except(context.Members.Where(row => row.MembershipCard == \"Black\").Select(row => row.Address)).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "680c5421057ec2197991714e8115a378a9a6c8fb32f1fbeac85764de6a0e5197",
    "sql": "SELECT address FROM shop ORDER BY open_year",
    "linq": "context.Shops.OrderBy(row => row.OpenYear).Select(row => new { row.Address }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "62e21fd938da4ff90386eab18bee929110dce192d2a7ddd1dd54c06c33478d5e",
    "sql": "SELECT avg(num_of_staff) , avg(score) FROM shop",
    "linq": "context.Shops.GroupBy(row => 1).Select(group => new { AverageNumOfStaff = group.Select(row => row.NumOfStaff).Average(), AverageScore = group.Select(row => row.Score).Average() }).ToList();",
    "db_name": "coffee_shop",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,86): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.58",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3fa5f711e714b7447b5282603eabfc59cc10382ea98a1c75e6b2cbea9c5d9edf",
    "sql": "SELECT shop_id , address FROM shop WHERE score < (SELECT avg(score) FROM shop)",
    "linq": "context.Shops.Where(row => row.Score < context.Shops.Select(row => (double) row.Score).Average()).Select(row => new { row.ShopId, row.Address }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6c3c9209d3687e5f484f785e34550541d4782b9e7159f8cb993d9002f7546d5d",
    "sql": "SELECT address , num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)",
    "linq": "context.Shops.Where(row => !context.HappyHours.Select(row => row.ShopId).Contains(row.ShopId)).Select(row => new { row.Address, row.NumOfStaff }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6f114ed571dbeb3d6ad6a06950db27fcb6cbd82bc01fc12538855e6777349908",
    "sql": "SELECT t1.address , t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'",
    "linq": "context.Shops.Join(context.HappyHours, t1 => t1.ShopId, t2 => t2.ShopId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Month == \"May\").Select(row => new { row.t1.Address, row.t1.ShopId }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4b9b13d1e4c29ec7d1ddd4550f9d9dc4a9e43613aa0012f1689ba9a87e61bd40",
    "sql": "SELECT shop_id , count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.HappyHours.GroupBy(row => new { row.ShopId }).Select(group => new { group.Key.ShopId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0d46416c08b72b9048106b530468685d4f0d55fb0bdb676674ac88f8576ef7f1",
    "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.HappyHours.GroupBy(row => new { row.Month }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Month }).Take(1).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "74a654c01691a874cc73d195d94dab8ee5d404d04177a916f623d14c1e35859a",
    "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*) > 2",
    "linq": "context.HappyHours.GroupBy(row => new { row.Month }).Where(group => group.Count() > 2).Select(group => new { group.Key.Month }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e34ebee9c740cf057b15005c4ba353afd37aadb933cef8ce805df8d7867b1f4d",
    "sql": "SELECT count(*) FROM ALBUM",
    "linq": "context.Albums.Count();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ca9fafe8785ada71f7c90bf38418176dea5c9cfbd78aa8a92028c3f8006e5cbe",
    "sql": "SELECT Name FROM GENRE",
    "linq": "context.Genres.Select(row => new { row.Name }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f0faad642a71fc8fd3a95b038cfa2f9c9bb7b06fee71f31aa2754d05c43e300c",
    "sql": "SELECT * FROM CUSTOMER WHERE State = \"NY\"",
    "linq": "context.Customers.Where(row => row.State == \"NY\").Select(row => new { row.CustomerId, row.FirstName, row.LastName, row.Company, row.Address, row.City, row.State, row.Country, row.PostalCode, row.Phone, row.Fax, row.Email, row.SupportRepId }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3135b6ac78118607834f6a1408c39ceec28bae9ab2b7cfdfded0985368057433",
    "sql": "SELECT FirstName , LastName FROM EMPLOYEE WHERE City = \"Calgary\"",
    "linq": "context.Employees.Where(row => row.City == \"Calgary\").Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "93c2a7182b36249a17b0df586a7417d0f90a7f3c99efeb1670016e5cc91087df",
    "sql": "SELECT distinct(BillingCountry) FROM INVOICE",
    "linq": "context.Invoices.Select(row => new { row.BillingCountry }).Distinct().ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c5a4fd0b5cc7ad6f95668c648b5158c66ab9350126e352b7e1bca7e5b300e54e",
    "sql": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
    "linq": "context.Artists.Where(row => EF.Functions.Like(row.Name, \"%a%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fa1046b5f3f6829d8aac3de10ac87cf166415da8a42d2fc50d79cf988ddc8191",
    "sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"AC/DC\"",
    "linq": "context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"AC/DC\").Select(row => new { row.T1.Title }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aa502880f0b66601011d4299f94a9be3149fd2c4e78c56227080a8139e88c2d4",
    "sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"Metallica\"",
    "linq": "context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Metallica\").Count();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2d24adcc5c92d8f50a20a84937ad20f7d2778123e43d4f16487264d9af89a393",
    "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = \"Balls to the Wall\"",
    "linq": "context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Title == \"Balls to the Wall\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5ce31f19f6407aa886f1cd0d8501e801d91a108aecca4f9b20ec6cac68cc08bb",
    "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Name }).Take(1).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4faa6cf9b036f15de4c6330ea0da8b6ddfef5b4bf49306e162df3845f1f69b8c",
    "sql": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
    "linq": "context.Tracks.Where(row => EF.Functions.Like(row.Name, \"%you%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "47b8ad531d299f3d4223b056c356baba37b72438005fa7720038eef89111bc49",
    "sql": "SELECT AVG(UnitPrice) FROM TRACK",
    "linq": "context.Tracks.Select(row => (double) row.UnitPrice).Average();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fce0d98d9d113efba222b6de0eeca429e52661c06f54bd549c7124d192a66342",
    "sql": "SELECT max(Milliseconds) , min(Milliseconds) FROM TRACK",
    "linq": "context.Tracks.GroupBy(row => 1).Select(group => new { MaxMilliseconds = group.Select(row => row.Milliseconds).Max(), MinMilliseconds = group.Select(row => row.Milliseconds).Min() }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fbf1987d376135a1d99fcc496e9bb9346ff17973c781f455aa51c09ebb006e1c",
    "sql": "SELECT T1.Title , T2.AlbumID , COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID",
    "linq": "context.Albums.Join(context.Tracks, T1 => T1.AlbumId, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AlbumId }).Select(group => new { group.First().T1.Title, group.Key.AlbumId, Count = group.Count() }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8e4162f518b5ee8afe4c7e94acf5e6a9d2311ef10ac4150dbdb878e0fcd28a52",
    "sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.GenreId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name }).Take(1).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d17c216582fd2cf98dde1b3fbb3a473565f87a7b345128ad865560e2d51b4331",
    "sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
    "linq": "context.MediaTypes.Join(context.Tracks, T1 => T1.MediaTypeId, T2 => T2.MediaTypeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.MediaTypeId }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.Name }).Take(1).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "589c35aaec18687fd2f61a0569bcac60900d50a738cb07c69f329f1c8bfdcc43",
    "sql": "SELECT T1.Title , T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID",
    "linq": "context.Albums.Join(context.Tracks, T1 => T1.AlbumId, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.UnitPrice > 1).GroupBy(row => new { row.T2.AlbumId }).Select(group => new { group.First().T1.Title, group.Key.AlbumId }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8483d3c93d9d6b89050e8be768b60ddf82f9cdc3a61da2f57f9af5a645c70150",
    "sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\"",
    "linq": "context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Rock\").Count();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "16146d8646009438e0b3ce6afd5b8dd8a2c61444b91e56eca81b74b28d41eb3e",
    "sql": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Jazz\"",
    "linq": "context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Jazz\").Select(row => (double) row.T2.UnitPrice).Average();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d06e5f3c8041bb1c74a6a76b66b89fcf20151d8d9468c8ad13b7c040a3703440",
    "sql": "SELECT FirstName , LastName FROM CUSTOMER WHERE Email = \"luisg@embraer.com.br\"",
    "linq": "context.Customers.Where(row => row.Email == \"luisg@embraer.com.br\").Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f367baf8f590b24dfe24832479a02c0f26756b2028530d52f116a4b89a44e555",
    "sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
    "linq": "context.Customers.Where(row => EF.Functions.Like(row.Email, \"%gmail.com%\")).Count();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "54095fa59827170493ae960c6aab6b9a994cd80a270008d3c5cfa5b0478b3538",
    "sql": "SELECT T2.FirstName , T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = \"Leonie\"",
    "linq": "context.Customers.Join(context.Employees, T1 => T1.SupportRepId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"Leonie\").Select(row => new { row.T2.FirstName, row.T2.LastName }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c305ca9db190a4ed2e21b6a7129ced8cde80d9fe534cdb8095dd45465f1d9cd3",
    "sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = \"70174\"",
    "linq": "context.Customers.Join(context.Employees, T1 => T1.SupportRepId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PostalCode == \"70174\").Select(row => new { row.T2.City }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aa45d8cf188e5eded0e54cd60414b2e5d27212449e20d32b6bd0bf2c431f67c1",
    "sql": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
    "linq": "context.Employees.Select(row => row.City).Distinct().Count();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "11d4a454ddb9c8bc08adf9f1a21e448b5471712be3584cfc13ad3985a8fbde4e",
    "sql": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"",
    "linq": "context.Customers.Join(context.Invoices, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"Astrid\" && row.T1.LastName == \"Gruber\").Select(row => new { row.T2.InvoiceDate }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "21dd27db694e631c18db45e6ad93382eae73f0e69ce7528d534fa89b993b928e",
    "sql": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20",
    "linq": "context.Customers.Select(row => row.LastName).Except(context.Customers.Join(context.Invoices, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Total > 20).Select(row => row.T1.LastName)).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9d210d8f75351636249c5627f15e555bb3c78649c8df8f4954c1674503e7d3aa",
    "sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Brazil\"",
    "linq": "context.Customers.Join(context.Invoices, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Country == \"Brazil\").Select(row => new { row.T1.FirstName }).Distinct().ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f6eb46f9391ca9b6a7a2122468b489c06fcbe1e1aa282ad048aba1e9017089f7",
    "sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Germany\"",
    "linq": "context.Customers.Join(context.Invoices, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Country == \"Germany\").Select(row => new { row.T1.Address }).Distinct().ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bc7f863c05155ddd6e0cfe029bb32e1ab575b1e0afa0dbb9d172a67a81dcce3f",
    "sql": "SELECT Phone FROM EMPLOYEE",
    "linq": "context.Employees.Select(row => new { row.Phone }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4d97efc51a994d77f99576fa618ad0e22c1bd35485623106b8baea8a595b3c9a",
    "sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = \"AAC audio file\"",
    "linq": "context.MediaTypes.Join(context.Tracks, T1 => T1.MediaTypeId, T2 => T2.MediaTypeId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"AAC audio file\").Count();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5ef2add2d4d5a48a54c69631fe3591094344650f4637cd65b557b7b80bff346a",
    "sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Latin\" OR T1.Name = \"Pop\"",
    "linq": "context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Latin\" || row.T1.Name == \"Pop\").Select(row => row.T2.Milliseconds).Average();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0ca777c41e4e7d6b7248382891fb1b4d0129d2d1093dcb0cb6692abe32cac427",
    "sql": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) >= 10",
    "linq": "context.Customers.Join(context.Employees, T1 => T1.SupportRepId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SupportRepId }).Where(group => group.Count() >= 10).Select(group => new { group.First().T1.FirstName, group.Key.SupportRepId }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8c4667c322f49efb728a9c6fe69d9d2df74c075f5ba071eb585b93571b2052b4",
    "sql": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) <= 20",
    "linq": "context.Customers.Join(context.Employees, T1 => T1.SupportRepId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SupportRepId }).Where(group => group.Count() <= 20).Select(group => new { group.First().T1.LastName }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c9c74336dd2046108fb3fd99079889701004fe08d27e58fa9407fb30b16539aa",
    "sql": "SELECT Title FROM ALBUM ORDER BY Title",
    "linq": "context.Albums.OrderBy(row => row.Title).Select(row => new { row.Title }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "088d4e0472154f05b070ed539817ed805c2371d9be8e15caf1d20fc5131af7a8",
    "sql": "SELECT T2.Name , T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*) >= 3 ORDER BY T2.Name",
    "linq": "context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ArtistId }).Where(group => group.Count() >= 3).OrderBy(group => group.First().T2.Name).Select(group => new { group.First().T2.Name, group.Key.ArtistId }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e7f7e72eea076805d212b14bfdd76430f68714e56cac4be59d744d48435761e",
    "sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId",
    "linq": "context.Artists.Select(row => row.Name).Except(context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Select(row => row.T2.Name)).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e0433fb23f1990a42b682673452b3b5f243f1d5f07f87ee2fced10c958cba01d",
    "sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\"",
    "linq": "context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Rock\").Select(row => (double) row.T2.UnitPrice).Average();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1ae4c37a19b7e9dd762378900aa7f50c24683de68ac9eb3169c4dffd64cfe40f",
    "sql": "SELECT max(Milliseconds) , min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Pop\"",
    "linq": "context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Pop\").GroupBy(row => 1).Select(group => new { MaxMillisecondsT2 = group.Select(row => row.T2.Milliseconds).Max(), MinMillisecondsT2 = group.Select(row => row.T2.Milliseconds).Min() }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "86e7d28d23cd98cf42c5a5999b492dac5580db7bc1197ffcf08cfaaae9b37183",
    "sql": "SELECT BirthDate FROM EMPLOYEE WHERE City = \"Edmonton\"",
    "linq": "context.Employees.Where(row => row.City == \"Edmonton\").Select(row => new { row.BirthDate }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8cecea13f722b19ca37db7a2178deaadbcd6247ad057c38934cfe7ab4b0cf57f",
    "sql": "SELECT distinct(UnitPrice) FROM TRACK",
    "linq": "context.Tracks.Select(row => new { row.UnitPrice }).Distinct().ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b98f1b0db991fbcb8366c23e36d55650da2e8f57d5dbe3b0a8af21c59a2a2458",
    "sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
    "linq": "context.Artists.Where(row => !context.Albums.Select(row => row.ArtistId).Contains(row.ArtistId)).Count();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fe0ec872fcac881b9535b1470327e0616920e20a6db5198c8201fc35fe5baa8f",
    "sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'",
    "linq": "context.Albums.Join(context.Tracks, T1 => T1.AlbumId, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Genres, joined => joined.T2.GenreId, T3 => T3.GenreId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Reggae\").Select(row => row.T1.Title).Intersect(context.Albums.Join(context.Tracks, T1 => T1.AlbumId, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Genres, joined => joined.T2.GenreId, T3 => T3.GenreId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Rock\").Select(row => row.T1.Title)).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cd95e13b54bbff8989861e35dfc59a674231ec0d7ade06ca5cc99971c7e2f633",
    "sql": "SELECT count(*) FROM ASSESSMENT_NOTES",
    "linq": "context.AssessmentNotes.Count();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "af6f12f9ca967a16607ea4c958f9db75cd39640ea4283924974817d0b281f8e3",
    "sql": "SELECT date_of_notes FROM Assessment_Notes",
    "linq": "context.AssessmentNotes.Select(row => new { row.DateOfNotes }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a932169fe22be3f056c5a68ec815bb4839af241112699357de7160f95cb3c845",
    "sql": "SELECT count(*) FROM ADDRESSES WHERE zip_postcode = \"197\"",
    "linq": "context.Addresses.Where(row => row.ZipPostcode == \"197\").Count();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c5365d86e3de53e57a25ddbe3e1e8f17946729620f5ff0443657c2bf2ea1baeb",
    "sql": "SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident",
    "linq": "context.BehaviorIncidents.Select(row => row.IncidentTypeCode).Distinct().Count();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dfdb08cc3a2c9aa08957e7957e5c19f814c6f5fcc86b30af8fcdc52bc0162642",
    "sql": "SELECT DISTINCT detention_type_code FROM Detention",
    "linq": "context.Detentions.Select(row => new { row.DetentionTypeCode }).Distinct().ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "512d96109cd1564a1fecf77783765f9aa526c9b15ca058b92ebf646e896b6101",
    "sql": "SELECT date_incident_start , date_incident_end FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"",
    "linq": "context.BehaviorIncidents.Where(row => row.IncidentTypeCode == \"NOISE\").Select(row => new { row.DateIncidentStart, row.DateIncidentEnd }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a83bf1b5b9b36bbdc155c977623ef4f6d2f3c5c8bddd3d71096b5f6814c40a44",
    "sql": "SELECT detention_summary FROM Detention",
    "linq": "context.Detentions.Select(row => new { row.DetentionSummary }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f8a852204098105aa85b6d7e124c046deb5cd4ee08bfe980fc226c1013b22718",
    "sql": "SELECT cell_mobile_number , email_address FROM STUDENTS",
    "linq": "context.Students.Select(row => new { row.CellMobileNumber, row.EmailAddress }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2b12fb1da0477c272a18e711ac72f939cf3e17b1b9553de0c523d505b9c7253c",
    "sql": "SELECT email_address FROM Students WHERE first_name = \"Emma\" AND last_name = \"Rohan\"",
    "linq": "context.Students.Where(row => row.FirstName == \"Emma\" && row.LastName == \"Rohan\").Select(row => new { row.EmailAddress }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c7a213f1c8521a82ad4ae639d2222a792d262815ba178375c505ee0ca74d9cdd",
    "sql": "SELECT count(DISTINCT student_id) FROM Students_in_Detention",
    "linq": "context.StudentsInDetentions.Select(row => row.StudentId).Distinct().Count();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1334e9ec3e67822d1485523610a270dafa47d7fc398c212f026d466ff55c306e",
    "sql": "SELECT gender FROM TEACHERS WHERE last_name = \"Medhurst\"",
    "linq": "context.Teachers.Where(row => row.LastName == \"Medhurst\").Select(row => new { row.Gender }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f099327e1190d7e1ce350dada592fff3736592c821ad78b964ee5fd6f9743291",
    "sql": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = \"VIOLENCE\"",
    "linq": "context.RefIncidentTypes.Where(row => row.IncidentTypeCode == \"VIOLENCE\").Select(row => new { row.IncidentTypeDescription }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a1449ec0df060670adcb9093f44cea500ab992a1d0469c9f7fe1414b71f49f91",
    "sql": "SELECT max(monthly_rental) , min(monthly_rental) FROM Student_Addresses",
    "linq": "context.StudentAddresses.GroupBy(row => 1).Select(group => new { MaxMonthlyRental = group.Select(row => (double) row.MonthlyRental).Max(), MinMonthlyRental = group.Select(row => (double) row.MonthlyRental).Min() }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3d134cf8625308009d4bf1510bbc68b7303b8dcabc8bf95c963a2c8a92dce969",
    "sql": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'",
    "linq": "context.Teachers.Where(row => EF.Functions.Like(row.EmailAddress, \"%man%\")).Select(row => new { row.FirstName }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6330165907ee5ce82f071b35a0384a05d79bf77214fc1dbcb06710a7da98d039",
    "sql": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC",
    "linq": "context.AssessmentNotes.OrderBy(row => row.DateOfNotes).Select(row => new { row.NotesId, row.StudentId, row.TeacherId, row.DateOfNotes, row.TextOfNotes, row.OtherDetails }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aa74265001aa2eb1d221b4cdeab0dcee7162d3ead5422134905738161adacd84",
    "sql": "SELECT city FROM Addresses ORDER BY city",
    "linq": "context.Addresses.OrderBy(row => row.City).Select(row => new { row.City }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a981f2b665714b8916c8cb914594f971dde4c3c0b43a7c5fa1d5b03d17f4b96e",
    "sql": "SELECT first_name , last_name FROM Teachers ORDER BY last_name",
    "linq": "context.Teachers.OrderBy(row => row.LastName).Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "197030c1dd3c1b595f8aad5329e47a308f786092432606723c880f9eb5646487",
    "sql": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC",
    "linq": "context.StudentAddresses.OrderByDescending(row => (double) row.MonthlyRental).Select(row => new { row.StudentId, row.AddressId, row.DateAddressFrom, row.DateAddressTo, row.MonthlyRental, row.OtherDetails }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a6ea13749d53ba179aa9ae42ffc7acbb5c80d230d93b5d0661584ed460dad38e",
    "sql": "SELECT T1.student_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.AssessmentNotes.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StudentId, group.First().T2.FirstName }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8911b4f679950315a39d111ffe26692fab693f75004eb973f25ae2c1aadda7ce",
    "sql": "SELECT T1.teacher_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3",
    "linq": "context.AssessmentNotes.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TeacherId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.TeacherId, group.First().T2.FirstName }).Take(3).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2ecce82402785a33a44e57adbb3d3347644a7cdd8678f907296c67187437f3a6",
    "sql": "SELECT T1.student_id , T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.BehaviorIncidents.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StudentId, group.First().T2.LastName }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9d1ca6651c2a70a36247e4dfe04d22ed252bdd4c8336bc23781427d1c0d549dc",
    "sql": "SELECT T1.teacher_id , T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.detention_type_code = \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Detentions.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DetentionTypeCode == \"AFTER\").GroupBy(row => new { row.T1.TeacherId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.TeacherId, group.First().T2.LastName }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "83ff3df5b091ec79bd2b6742040485ebe6501d47567c780a4213f147efcbdc44",
    "sql": "SELECT T1.student_id , T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
    "linq": "context.StudentAddresses.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).OrderByDescending(group => group.Average(row => (double) row.T1.MonthlyRental)).Select(group => new { group.Key.StudentId, group.First().T2.FirstName }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f2cc45259fd4f74570c5718d77e88a7946ea13e30d650c3d47f103e950325196",
    "sql": "SELECT T2.address_id , T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
    "linq": "context.Addresses.Join(context.StudentAddresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AddressId }).OrderByDescending(group => group.Average(row => (double) row.T2.MonthlyRental)).Select(group => new { group.Key.AddressId, group.First().T1.City }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f0f02ea31b4cd82e65b4cddf92ea7c07b673648caf631850792edaebc9f9762a",
    "sql": "SELECT T1.incident_type_code , T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.BehaviorIncidents.Join(context.RefIncidentTypes, T1 => T1.IncidentTypeCode, T2 => T2.IncidentTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.IncidentTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.IncidentTypeCode, group.First().T2.IncidentTypeDescription }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1afb4574cb4e148d69fc99bbe1b1b29cba104be9b441444b7b82b7f67c9a0c24",
    "sql": "SELECT T1.detention_type_code , T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.Detentions.Join(context.RefDetentionTypes, T1 => T1.DetentionTypeCode, T2 => T2.DetentionTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DetentionTypeCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.DetentionTypeCode, group.First().T2.DetentionTypeDescription }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ea109022e00ef46aff42c808cfa7763093ac26b8ec5b832e71ed4afdc7f79978",
    "sql": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"",
    "linq": "context.AssessmentNotes.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Fanny\").Select(row => new { row.T1.DateOfNotes }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d14b0bd7a1aad6eaf5a4b8eeb983c93c297aa46b270542f69b12481450fd0a0e",
    "sql": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = \"Schuster\"",
    "linq": "context.AssessmentNotes.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.LastName == \"Schuster\").Select(row => new { row.T1.TextOfNotes }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "20efb110e258d6abefb845024d34bbe4682210e961c867fc5efc11a2f8b067a8",
    "sql": "SELECT T1.date_incident_start , date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.last_name = \"Fahey\"",
    "linq": "context.BehaviorIncidents.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.LastName == \"Fahey\").Select(row => new { row.T1.DateIncidentStart, row.T1.DateIncidentEnd }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bac7ec0a13ac76d4e67a102649210c9b3048ccc53b12aa36017139805f1ac53d",
    "sql": "SELECT T1.datetime_detention_start , datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = \"Schultz\"",
    "linq": "context.Detentions.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.LastName == \"Schultz\").Select(row => new { row.T1.DatetimeDetentionStart, row.T1.DatetimeDetentionEnd }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "18d3e1d15e66b6befc509a8c321c8b500c95a45bf17755d3e73ccb99f7eec09d",
    "sql": "SELECT T2.address_id , T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY monthly_rental DESC LIMIT 1",
    "linq": "context.Addresses.Join(context.StudentAddresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => (double) row.T2.MonthlyRental).Select(row => new { row.T2.AddressId, row.T1.ZipPostcode }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0b17e5200e47fcb20a85a8f9694b7f1bdfdeefca39e5b05b9f953b888d53cf57",
    "sql": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1",
    "linq": "context.StudentAddresses.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).OrderBy(row => (double) row.T1.MonthlyRental).Select(row => new { row.T2.CellMobileNumber }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dfbbeede59c6a50f7b7523c215a1df40475418c90f45e8c844714941defda250",
    "sql": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Texas\"",
    "linq": "context.Addresses.Join(context.StudentAddresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StateProvinceCounty == \"Texas\").Select(row => new { row.T2.MonthlyRental }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f9424c5ac7cd0a59f70bce0331a810851a12121f5ea7716421e3b34bab506313",
    "sql": "SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Wisconsin\"",
    "linq": "context.Addresses.Join(context.Students, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StateProvinceCounty == \"Wisconsin\").Select(row => new { row.T2.FirstName, row.T2.LastName }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6e0168b135d61f82f5838984a3c2d069ce7fe111b4ef63be7698152eda6a9b38",
    "sql": "SELECT T1.line_1 , avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id",
    "linq": "context.Addresses.Join(context.StudentAddresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AddressId }).Select(group => new { group.First().T1.Line1, AverageMonthlyRental = group.Select(row => (double) row.T2.MonthlyRental).Average() }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d5c0cfcda43b3d071fa1f2567aa4a5d608e80c67d39e6e494d2f5978a4a6ea90",
    "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = \"Lyla\"",
    "linq": "context.Addresses.Join(context.Teachers, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Lyla\").Select(row => new { row.T1.ZipPostcode }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bd8967a820b5c5fafd2bc759387ad995e8e6ca9baf10ac9a75cb87c81582640c",
    "sql": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T1.zip_postcode = \"918\"",
    "linq": "context.Addresses.Join(context.Teachers, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ZipPostcode == \"918\").Select(row => new { row.T2.EmailAddress }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "918c3a8d070bce71f69629b181139521c685d8fbff58e63df641c2042b198796",
    "sql": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )",
    "linq": "context.Students.Where(row => !context.BehaviorIncidents.Select(row => row.StudentId).Contains(row.StudentId)).Count();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e9689d1181aaa3f532d4b2bb0edc55670d7f26435651cd19bc30e598d3a9a6db",
    "sql": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id",
    "linq": "context.Teachers.Select(row => row.LastName).Except(context.Teachers.Join(context.Detentions, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.LastName)).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "55eace2a25e0cf63514f79b4e720182b38ef430937799e003be8e0516c0b2711",
    "sql": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id",
    "linq": "context.Addresses.Join(context.Students, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Line1).Intersect(context.Addresses.Join(context.Teachers, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Line1)).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7492ad4bd64d152dd8d2bc05fbbcf915b9e77b02015c5dc6384f0d0d052a7102",
    "sql": "SELECT school , nickname FROM university ORDER BY founded",
    "linq": "context.Universities.OrderBy(row => row.Founded).Select(row => new { row.School, row.Nickname }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "40a36c0f8eba5c7c2c3d162bfcd72f26c008b704f7c90cd6726f9cb4459f1b14",
    "sql": "SELECT school , LOCATION FROM university WHERE affiliation = 'Public'",
    "linq": "context.Universities.Where(row => row.Affiliation == \"Public\").Select(row => new { row.School, row.Location }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f9432e02b62ccdf1121a17e9ba921c2021cbacca45f7c248750f5f1231e33bdd",
    "sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
    "linq": "context.Universities.OrderByDescending(row => row.Enrollment).Select(row => new { row.Founded }).Take(1).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e544e87379d4f29694dc560780f3cfd93de0ece1dad5dd953dadf6e968cc6e17",
    "sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
    "linq": "context.Universities.Where(row => row.Affiliation != \"Public\").OrderByDescending(row => row.Founded).Select(row => new { row.Founded }).Take(1).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cbb2eaea77e2dea769bed6407d497f7c07797f9b642fb97cfd77504b848e057a",
    "sql": "SELECT count(DISTINCT school_id) FROM basketball_match",
    "linq": "context.BasketballMatches.Select(row => row.SchoolId).Distinct().Count();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f6eeee9ac18138339781d1139140b9ac9899363f7893c34d95b3c869127c71a0",
    "sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
    "linq": "context.BasketballMatches.OrderByDescending(row => row.AccPercent).Select(row => new { row.AccPercent }).Take(1).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "75ded989188317ea1e5784a3f866a9ab556b175b2eb3013aa63612e9e0cef694",
    "sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1",
    "linq": "context.Universities.Join(context.BasketballMatches, t1 => t1.SchoolId, t2 => t2.SchoolId, (t1, t2) => new { t1, t2 }).OrderBy(row => row.t2.AccPercent).Select(row => new { row.t1.PrimaryConference }).Take(1).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "434e0bac448f7e9094ea2befa304815b383a09ed95eb6c77206c882a5e8d42b5",
    "sql": "SELECT t2.team_name , t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1",
    "linq": "context.Universities.Join(context.BasketballMatches, t1 => t1.SchoolId, t2 => t2.SchoolId, (t1, t2) => new { t1, t2 }).OrderBy(row => row.t1.Founded).Select(row => new { row.t2.TeamName, row.t2.AccRegularSeason }).Take(1).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3967e60c3dec298dbfa76aafc72418856fc1feef8eb83d07adc9da7fc0884850",
    "sql": "SELECT t2.All_Games , t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'",
    "linq": "context.Universities.Join(context.BasketballMatches, t1 => t1.SchoolId, t2 => t2.SchoolId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TeamName == \"Clemson\").Select(row => new { row.t2.AllGames, row.t1.Location }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "006074d251095953d3ba78972707c683ce747c6c7d011e1900d39658e140f2e6",
    "sql": "SELECT avg(enrollment) FROM university WHERE founded < 1850",
    "linq": "context.Universities.Where(row => row.Founded < 1850).Select(row => (double) row.Enrollment).Average();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8b611363235b093cbaf6ee41c620a161f2c0b4ce4eb1e622b6826d13c8378d45",
    "sql": "SELECT enrollment , primary_conference FROM university ORDER BY founded LIMIT 1",
    "linq": "context.Universities.OrderBy(row => row.Founded).Select(row => new { row.Enrollment, row.PrimaryConference }).Take(1).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5b4984361374702d536f51a449c54e586a4e26959e052b2e63bf19a3cb28dfe3",
    "sql": "SELECT sum(enrollment) , min(enrollment) FROM university",
    "linq": "context.Universities.GroupBy(row => 1).Select(group => new { SumEnrollment = group.Select(row => row.Enrollment).Sum(), MinEnrollment = group.Select(row => row.Enrollment).Min() }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ed759fbe64369265455ef4e103a39f82688b6de9f2aee3852ae15047f8f7ddda",
    "sql": "SELECT sum(enrollment) , affiliation FROM university GROUP BY affiliation",
    "linq": "context.Universities.GroupBy(row => new { row.Affiliation }).Select(group => new { SumEnrollment = group.Select(row => row.Enrollment).Sum(), group.Key.Affiliation }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "db8f245c4e20fa9eb836108e19f2c4e6a6a0e9a475c0c0af5184ed291252ddd0",
    "sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
    "linq": "context.Universities.Where(row => !context.BasketballMatches.Select(row => row.SchoolId).Contains(row.SchoolId)).Count();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c3dc693c2c622b446df85da3b1ebba054803e1c40723090e6f03a55b850b4a31",
    "sql": "SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public'",
    "linq": "context.Universities.Where(row => row.Founded > 1850 || row.Affiliation == \"Public\").Select(row => new { row.School }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cb1be22edf68e0fe9944abceb1c5a86eaafc108d32a3241fe52913258299fb8c",
    "sql": "SELECT count(DISTINCT affiliation) FROM university",
    "linq": "context.Universities.Select(row => row.Affiliation).Distinct().Count();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ceac1c3c24d88b9087b36788d98e37504955b368af53403e50e492d7f87aeb0b",
    "sql": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
    "linq": "context.Universities.Where(row => EF.Functions.Like(row.Location, \"%NY%\")).Count();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9abb950b084d43ac1c3980918e7aa178c08cca9e4448c2716fa6b82c44cd894a",
    "sql": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < (SELECT avg(enrollment) FROM university)",
    "linq": "context.Universities.Join(context.BasketballMatches, t1 => t1.SchoolId, t2 => t2.SchoolId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Enrollment < context.Universities.Select(row => (double) row.Enrollment).Average()).Select(row => new { row.t2.TeamName }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "929fb6a2ca9c09da111588bc7acd5facfa8dff68a808949ca7730480519e1c1d",
    "sql": "SELECT count(*) , affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation",
    "linq": "context.Universities.Where(row => row.Enrollment > 20000).GroupBy(row => new { row.Affiliation }).Select(group => new { Count = group.Count(), group.Key.Affiliation }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "59041e0f165fd1d2d9eed5bdd5bd1dc0f368469af06d13f6905c10ea4621fa78",
    "sql": "SELECT sum(Enrollment) , affiliation FROM university WHERE founded > 1850 GROUP BY affiliation",
    "linq": "context.Universities.Where(row => row.Founded > 1850).GroupBy(row => new { row.Affiliation }).Select(group => new { SumEnrollment = group.Select(row => row.Enrollment).Sum(), group.Key.Affiliation }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5a6649bfbc97e98e8d6f78a7cd2d0ab2221c0611a713c95b543a88bb59f6c849",
    "sql": "SELECT max(Enrollment) FROM university",
    "linq": "context.Universities.Select(row => row.Enrollment).Max();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a2d2bb9d16f5a6b3a2e27af48562848e0ab021606227a9baec72da3101f2f79b",
    "sql": "SELECT * FROM basketball_match",
    "linq": "context.BasketballMatches.Select(row => new { row.TeamId, row.SchoolId, row.TeamName, row.AccRegularSeason, row.AccPercent, row.AccHome, row.AccRoad, row.AllGames, row.AllGamesPercent, row.AllHome, row.AllRoad, row.AllNeutral }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8ff600d9b14f3b0091de9a8a5030ae5960d9cabb85bcb4571077f46cb24fd5f2",
    "sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
    "linq": "context.BasketballMatches.OrderByDescending(row => row.AllHome).Select(row => new { row.TeamName }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "57ea257c7044984a379ac8038dd0ebcb9b7d8da9b18b70115252375fd97d5b64",
    "sql": "SELECT count(*) FROM camera_lens WHERE focal_length_mm > 15",
    "linq": "context.CameraLens.Where(row => row.FocalLengthMm > 15).Count();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "41292f7f7a50042c53b8af3c955ca52717cb4d31dd126b12f3e1f25de0a33b3a",
    "sql": "SELECT brand , name FROM camera_lens ORDER BY max_aperture DESC",
    "linq": "context.CameraLens.OrderByDescending(row => row.MaxAperture).Select(row => new { row.Brand, row.Name }).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f83e54ed96e0110f4c2be6d1e99e0a58c332c8724cc1502e1c38cc8e11105050",
    "sql": "SELECT id , color , name FROM photos",
    "linq": "context.Photos.Select(row => new { row.Id, row.Color, row.Name }).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2bab63052116022bf9568ea30682647cf58a21dabad5d7698b2b1501d5cc350f",
    "sql": "SELECT max(height) , avg(height) FROM mountain",
    "linq": "context.Mountains.GroupBy(row => 1).Select(group => new { MaxHeight = group.Select(row => row.Height).Max(), AverageHeight = group.Select(row => row.Height).Average() }).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0644450b8ea0c5878637a7e93ae2cf2be792e19077b57398d1997326a48e8d7e",
    "sql": "SELECT avg(prominence) FROM mountain WHERE country = 'Morocco'",
    "linq": "context.Mountains.Where(row => row.Country == \"Morocco\").Select(row => (double) row.Prominence).Average();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e6f513150ba454332388d9c2e421e92fd984f12b75ffedf4c33c327618af6893",
    "sql": "SELECT name , height , prominence FROM mountain WHERE range != 'Aberdare Range'",
    "linq": "context.Mountains.Where(row => row.Range != \"Aberdare Range\").Select(row => new { row.Name, row.Height, row.Prominence }).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "943dcf3f8cafb1450be5bcbb261e5a62716e9839a1106453eb81007ee2d2a928",
    "sql": "SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.height > 4000",
    "linq": "context.Mountains.Join(context.Photos, T1 => T1.Id, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Height > 4000).Select(row => new { row.T1.Id, row.T1.Name }).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2278f4aef31f9e4ddb138a72c462fec9679a4fac7f6298f58037bc1fe3ea5588",
    "sql": "SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING count(*) >= 2",
    "linq": "context.Mountains.Join(context.Photos, T1 => T1.Id, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d84b8a18d1d760613e75153683ce5c6132f9b94d0c39240db8e8c5ce7aed52f7",
    "sql": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Photos.Join(context.CameraLens, T1 => T1.CameraLensId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name }).Take(1).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c2fcb7a51873abe8ad9846ce452d8f24ebfc6261c104095f144bcbfa12466873",
    "sql": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus'",
    "linq": "context.CameraLens.Join(context.Photos, T1 => T1.Id, T2 => T2.CameraLensId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Brand == \"Sigma\" || row.T1.Brand == \"Olympus\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dddea7e10c98d6a921c3ee18ba6abaec4d1331534b1fde6cd4a373deff810a39",
    "sql": "SELECT count(DISTINCT brand) FROM camera_lens",
    "linq": "context.CameraLens.Select(row => row.Brand).Distinct().Count();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2d2de978af6bd101bfa1a4b1b8a4aae66d8d5347f28e7c22c73e7811836e1cda",
    "sql": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
    "linq": "context.CameraLens.Where(row => !context.Photos.Select(row => row.CameraLensId).Contains(row.Id)).Count();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3c212682fea208023c3ee932eb0402c3bae005fd7681836c853d48d07cf18135",
    "sql": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.country = 'Ethiopia'",
    "linq": "context.Mountains.Join(context.Photos, T1 => T1.Id, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Country == \"Ethiopia\").Select(row => row.T2.CameraLensId).Distinct().Count();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0a98342e37a982e53201c5059f1fc899baf0a45e1a55cd9bb430497e5c3a2973",
    "sql": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Lasta Massif'",
    "linq": "context.Mountains.Join(context.Photos, T1 => T1.Id, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Join(context.CameraLens, joined => joined.T2.CameraLensId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Range == \"Toubkal Atlas\").Select(row => row.T3.Brand).Intersect(context.Mountains.Join(context.Photos, T1 => T1.Id, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Join(context.CameraLens, joined => joined.T2.CameraLensId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Range == \"Lasta Massif\").Select(row => row.T3.Brand)).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d28e2fb08a43f7fccafdc0266fcd3be0e7ff400c016d4fe77e627c09a14cfea0",
    "sql": "SELECT name , prominence FROM mountain EXCEPT SELECT T1.name , T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T3.brand = 'Sigma'",
    "linq": "context.Mountains.Where(row => row.Prominence.HasValue).Select(row => new { row.Name, row.Prominence.Value }).Except(context.Mountains.Join(context.Photos, T1 => T1.Id, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Join(context.CameraLens, joined => joined.T2.CameraLensId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Brand == \"Sigma\").Where(row => row.T1.Prominence.HasValue).Select(row => new { row.T1.Name, row.T1.Prominence.Value })).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ba22e1775d56804142c4c081d44c2dca70ac9d8b9b8648c52c51e658a1f75a82",
    "sql": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"",
    "linq": "context.CameraLens.Where(row => EF.Functions.Like(row.Name, \"%Digital%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "384cef371903f2f077c0164ee03262b05a223377a8269dddf60aa3e8955d3f39",
    "sql": "SELECT T1.name , count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id = T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)",
    "linq": "context.CameraLens.Join(context.Photos, T1 => T1.Id, T2 => T2.CameraLensId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Select(group => new { group.First().T1.Name, Count = group.Count() }).OrderBy(group => group.Count).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "680d07a7b2de7af2d6839ac2bb717e24a7917f027b9fdbff57b47c9495ebe6a7",
    "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"chi\";",
    "linq": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.VenueName == \"chi\").Select(row => new { row.t1.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5af9836aeb58fbda7397ca3b42021cbefa868aa0f508cab8fe26d5ffc20c5638",
    "sql": "SELECT DISTINCT paperid FROM paper WHERE title = \"machine networks for one shot learning\";",
    "linq": "context.Papers.Where(row => row.Title == \"machine networks for one shot learning\").Select(row => new { row.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d08e9312cf027740e2c3436cf4e6aa7eb21a270916fad54bb7d73193bd4c29a7",
    "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.datasetname = \"RGB-D Object Dataset\" AND t3.title = \"Class consistent multi-modal fusion with binary features\" AND t3.year = 2016 AND t4.venuename = \"CVPR\";",
    "linq": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Venues, joined => joined.t3.VenueId, t4 => t4.VenueId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.DatasetName == \"RGB-D Object Dataset\" && row.t3.Title == \"Class consistent multi-modal fusion with binary features\" && row.t3.Year == 2016 && row.t4.VenueName == \"CVPR\").Select(row => new { row.t3.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7f4d94059a197c8874f66794d0ec171ac71967f9f4d8d7bdec243f1f95bdcf1b",
    "sql": "SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;",
    "linq": "context.Papers.Select(row => row.PaperId).Distinct().Count().Distinct();",
    "db_name": "scholar",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,73): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.65",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c60fbd4cc77ddc8aefc0443988bcbb8e9296d31533caba3c6778e1c5ed2dd420",
    "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
    "linq": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => EF.Functions.Like(row.t1.DatasetName, \"ImageNet\")).Select(row => row.t3.PaperId).Distinct().Count().Distinct();",
    "db_name": "scholar",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,356): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.53",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a68c677ae8b78c1083bfc6562719357cfc4707087e4445ea0a865d862a29a508",
    "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"nature communications\";",
    "linq": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Year == 2015 && row.t2.VenueName == \"nature communications\").Select(row => row.t1.PaperId).Count().Distinct();",
    "db_name": "scholar",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,231): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a572e2dc62a3da745c98ee0cfcfb6628e457fae5d4b5f7b012551419edf505e5",
    "sql": "SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t4.venuename = \"ACL\";",
    "linq": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Venues, joined => joined.t3.VenueId, t4 => t4.VenueId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t4.VenueName == \"ACL\").Select(row => new { row.t1.DatasetId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f79d4f8079d75d90239891aa137a6c363a49ffd09e428dfdcfe89bb96d59316b",
    "sql": "SELECT DISTINCT COUNT ( t1.paperid ) , t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
    "linq": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.VenueName == \"NIPS\").GroupBy(row => new { row.t1.Year }).Select(group => new { CountPaperId = group.Select(row => row.t1.PaperId).Count(), group.Key.Year }).OrderByDescending(group => group.CountPaperId).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5c1171730a2a7061ad8e3c332aff0a466bb7b0c7e8e1f72b957033c33a0d11b5",
    "sql": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"ACL\";",
    "linq": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Year == 2015 && row.t2.VenueName == \"ACL\").Select(row => row.t1.PaperId).Distinct().Count().Distinct();",
    "db_name": "scholar",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,224): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.55",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e09a9e798812b1b74b34acc5ca9eba8772a036750dd6af9182afcd5e3e4359ae",
    "sql": "SELECT DISTINCT paperid FROM paper WHERE YEAR = 2014;",
    "linq": "context.Papers.Where(row => row.Year == 2014).Select(row => new { row.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6391db9222834c7ddd33c1296edd9f22591c6b0f4497c021b2f63ba1dda6008a",
    "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"WebKB\";",
    "linq": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.DatasetName == \"WebKB\").Select(row => new { row.t3.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1e02c3abdcfb136731234139699369e8721e77fa4e9d35b049df816efe74ee90",
    "sql": "SELECT DISTINCT venueid FROM paper WHERE YEAR = 2013;",
    "linq": "context.Papers.Where(row => row.Year == 2013).Select(row => new { row.VenueId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "32f6a3ac3302ad87c0700edbe84abfb8cf7c4699b7611f2010b5d315d67b8d46",
    "sql": "SELECT DISTINCT paperid FROM paper WHERE YEAR = ( SELECT MAX ( YEAR ) FROM paper );",
    "linq": "context.Papers.Where(row => row.Year == context.Papers.Select(row => row.Year).Max()).Select(row => new { row.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5736fe4b6ac34826130254a6da8f83cbe3aceeb356cc95e256667e9c95be3087",
    "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"sigir\";",
    "linq": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.VenueName == \"sigir\").Select(row => row.t1.PaperId).Count().Distinct();",
    "db_name": "scholar",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,192): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.54",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fadbee0370621ab4dd2523713f1e88e2b58ddaa10e1eadb1a26188eabedda8b5",
    "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";",
    "linq": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Year == 2015 && row.t2.VenueName == \"pldi\").Select(row => new { row.t1.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "37c1d6302e8e4b468d0abdc8c55c5a5ad4fdfb7e5b95d6704b6e39981efe335b",
    "sql": "SELECT DISTINCT journalid FROM paper WHERE YEAR = 2011 GROUP BY journalid;",
    "linq": "context.Papers.Where(row => row.Year == 2011).GroupBy(row => new { row.JournalId }).Select(group => new { group.Key.JournalId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c6cd384c5232214ad199a20a14efa3dc45e0c1a62c07feccac35a547a5e3307c",
    "sql": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.title LIKE \"neural attention\" AND t1.year = 2016 AND t2.venuename = \"ACL\";",
    "linq": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => EF.Functions.Like(row.t1.Title, \"neural attention\") && row.t1.Year == 2016 && row.t2.VenueName == \"ACL\").Select(row => new { row.t1.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bf28de0cbc6450c56353850ea12d033f1afeab1cd15750bbb8d48fe984de7cb1",
    "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"ImageNet\" AND t3.year = 2014;",
    "linq": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.DatasetName == \"ImageNet\" && row.t3.Year == 2014).Select(row => new { row.t3.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fe229f6dbcc28568537f9a7c48f32b59f524ee65ed672e25adfe4e50c686f377",
    "sql": "SELECT DISTINCT t3.venueid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"ImageNet\";",
    "linq": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.DatasetName == \"ImageNet\").Select(row => new { row.t3.VenueId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f80640f88bb8f9f765e84654bc385cb50513954f6ea5a155fffb3f59c501044",
    "sql": "SELECT DISTINCT t2.paperid FROM paper AS t2 JOIN journal AS t1 ON t2.journalid = t1.journalid WHERE t1.journalname = \"Academic radiology\" AND t2.year = 1995;",
    "linq": "context.Papers.Join(context.Journals, t2 => t2.JournalId, t1 => t1.JournalId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.JournalName == \"Academic radiology\" && row.t2.Year == 1995).Select(row => new { row.t2.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8fe5e703524854b297e969cb1a50509ab7875f10ee65f7a07a0ffdd7a2e91d79",
    "sql": "SELECT DISTINCT paperid FROM paper WHERE YEAR != 2015;",
    "linq": "context.Papers.Where(row => row.Year != 2015).Select(row => new { row.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fcbded16402678daf332cc5802aa1e61018072f75cff27e9c377ff2c729ca0f6",
    "sql": "SELECT DISTINCT paperid , title FROM paper WHERE title LIKE \"the effects of juicing for cancer patients\" AND YEAR > 2006;",
    "linq": "context.Papers.Where(row => EF.Functions.Like(row.Title, \"the effects of juicing for cancer patients\") && row.Year > 2006).Select(row => new { row.PaperId, row.Title }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "654a71cdc8dde292cdd9affad9ba6bc3680012079f86a2a31a49350ed639da14",
    "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.datasetname = \"ImageNet\" AND t3.year = 2014 AND t4.venuename = \"eccv\";",
    "linq": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Venues, joined => joined.t3.VenueId, t4 => t4.VenueId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.DatasetName == \"ImageNet\" && row.t3.Year == 2014 && row.t4.VenueName == \"eccv\").Select(row => new { row.t3.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "121335e5a086538790750690679d1859b2b5ca902c161e50c2df3d519610b408",
    "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.datasetname = \"ImageNet\" AND t4.venuename = \"cvpr\";",
    "linq": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Venues, joined => joined.t3.VenueId, t4 => t4.VenueId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.DatasetName == \"ImageNet\" && row.t4.VenueName == \"cvpr\").Select(row => row.t3.PaperId).Count().Distinct();",
    "db_name": "scholar",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,487): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.65",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cbf62ed601c6945bab9854e2128375e141aa56f17a64e65c9a1332afb8e2655d",
    "sql": "SELECT DISTINCT venueid FROM venue WHERE venuename = \"Neuroscience\";",
    "linq": "context.Venues.Where(row => row.VenueName == \"Neuroscience\").Select(row => new { row.VenueId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "10b6d5585dae79680cf3920e10a9afcad9a6389c91dc4e60a59dfb95af09a28b",
    "sql": "SELECT DISTINCT venueid FROM paper WHERE title = \"Fracture of acrylic bone cement\";",
    "linq": "context.Papers.Where(row => row.Title == \"Fracture of acrylic bone cement\").Select(row => new { row.VenueId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3a6bf553a8824d49829ca852668d68c9546cd119459c81eefc30115e70af6702",
    "sql": "SELECT DISTINCT title , YEAR FROM paper WHERE title = \"A Switching Architecture For ISDN\";",
    "linq": "context.Papers.Where(row => row.Title == \"A Switching Architecture For ISDN\").Select(row => new { row.Title, row.Year }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c0449212ae0a3585f0aebe410674a4c59186d7011e8f99b7e0236e694cf68bae",
    "sql": "SELECT count(*) FROM film",
    "linq": "context.Films.Count();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "34ec12138f36caf4b87fe36a1e5dae55a7886dad726934f50c75fde2a35ee016",
    "sql": "SELECT DISTINCT Director FROM film",
    "linq": "context.Films.Select(row => new { row.Director }).Distinct().ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "885b52f566575cc54e7d2675ed382b5d9f2e6123c60ea20c8a6b4e03182ac2cc",
    "sql": "SELECT avg(Gross_in_dollar) FROM film",
    "linq": "context.Films.Select(row => row.GrossInDollar).Average();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c831087da99ef9609bbd85cdf4f67a033799391f18d5981b45211d9dcaa32daf",
    "sql": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
    "linq": "context.FilmMarketEstimations.Select(row => new { row.LowEstimate, row.HighEstimate }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e35740d317618752003f23eed91c55e4c4514e38def7d01a8be2229015d18d71",
    "sql": "SELECT TYPE FROM film_market_estimation WHERE YEAR = 1995",
    "linq": "context.FilmMarketEstimations.Where(row => row.Year == 1995).Select(row => new { row.Type }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c4056af4869a04aedf9e7d7981acffe7b363e232edc60c8eaa644bab62be4f47",
    "sql": "SELECT max(Number_cities) , min(Number_cities) FROM market",
    "linq": "context.Markets.GroupBy(row => 1).Select(group => new { MaxNumberCities = group.Select(row => row.NumberCities).Max(), MinNumberCities = group.Select(row => row.NumberCities).Min() }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e4e326ff708b0b0b973f8dc84f492803f0fea807dd7615511609188436ef36f",
    "sql": "SELECT count(*) FROM market WHERE Number_cities < 300",
    "linq": "context.Markets.Where(row => row.NumberCities < 300).Count();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4e796eb5ee8a4ee83a7fa8bd71ad274457b447a6262ab675250dad930ca41634",
    "sql": "SELECT Country FROM market ORDER BY Country ASC",
    "linq": "context.Markets.OrderBy(row => row.Country).Select(row => new { row.Country }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "437874b2b8583a732a745859e897e85ac5cbdf6f4f4b46b8e16bb795490eef5d",
    "sql": "SELECT Country FROM market ORDER BY Number_cities DESC",
    "linq": "context.Markets.OrderByDescending(row => row.NumberCities).Select(row => new { row.Country }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bee07668915f4b0d8040b9104f287ca5b4d4f00b485badcca418eb28f5808965",
    "sql": "SELECT T1.Title , T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID",
    "linq": "context.Films.Join(context.FilmMarketEstimations, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Title, row.T2.Type }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c2ad5eed05a73371b1556b9b379f07ca57a52d137e67af6edfb8cab100f1ef3b",
    "sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Year = 1995",
    "linq": "context.Films.Join(context.FilmMarketEstimations, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 1995).Select(row => new { row.T1.Director }).Distinct().ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2bc409abf3edf719f94c85953c2fd2411281a5eff16f137abb6fff9482444a84",
    "sql": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000",
    "linq": "context.FilmMarketEstimations.Join(context.Markets, T1 => T1.MarketId, T2 => T2.MarketId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.LowEstimate > 10000).Select(row => row.T2.NumberCities).Average();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c87ba63c37163c8d2dba82d0abbd9cb115d81f6d8230452e37421b1a61c6d70b",
    "sql": "SELECT T2.Country , T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID",
    "linq": "context.FilmMarketEstimations.Join(context.Markets, T1 => T1.MarketId, T2 => T2.MarketId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Country, row.T1.Year }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f07b422d1e1aba60906bd974aac99f2bf5ee6d60d2c856f0b3ee83cbf458d8c5",
    "sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country = \"Japan\" ORDER BY T1.Year DESC",
    "linq": "context.FilmMarketEstimations.Join(context.Markets, T1 => T1.MarketId, T2 => T2.MarketId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country == \"Japan\").OrderByDescending(row => row.T1.Year).Select(row => new { row.T1.Year }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ea48064b550157d562a3906d3c68b40f785074f020c47dfc80289cc0f3e78daf",
    "sql": "SELECT Studio , COUNT(*) FROM film GROUP BY Studio",
    "linq": "context.Films.GroupBy(row => new { row.Studio }).Select(group => new { group.Key.Studio, Count = group.Count() }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1be3eb2ef5a65385a63bb95b5e98a6abad9d2677484e34d0eeb7062e2cf99503",
    "sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Films.GroupBy(row => new { row.Studio }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Studio }).Take(1).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b2f7881fa5098a2ef711f9e718697c93ba6fe06df0b17db2ec4e95ddacb4cf8b",
    "sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*) >= 2",
    "linq": "context.Films.GroupBy(row => new { row.Studio }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Studio }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "53acf32b954118833b71c00070668f86d7f34105ac59063d55404b37f69038eb",
    "sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)",
    "linq": "context.Films.Where(row => !context.FilmMarketEstimations.Select(row => row.FilmId).Contains(row.FilmId)).Select(row => new { row.Title }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "51b88851cbc564c27e820bfb9585fc70d58484723e64e2eea991c214c68f7f9e",
    "sql": "SELECT Studio FROM film WHERE Director = \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director = \"Walter Hill\"",
    "linq": "context.Films.Where(row => row.Director == \"Nicholas Meyer\").Select(row => row.Studio).Intersect(context.Films.Where(row => row.Director == \"Walter Hill\").Select(row => row.Studio)).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eb7f3196c681b4af4e73ff9c6f8f097008da698921a3da5d0395aa1b74490471",
    "sql": "SELECT title , Studio FROM film WHERE Studio LIKE \"%Universal%\"",
    "linq": "context.Films.Where(row => EF.Functions.Like(row.Studio, \"%Universal%\")).Select(row => new { row.Title, row.Studio }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5fc4fcb5f18cbd7f70ce7d712dadaa181a77e41cc14e716d1bb59e8c8ce14650",
    "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director = \"Walter Hill\"",
    "linq": "context.Films.Select(row => row.Studio).Except(context.Films.Where(row => row.Director == \"Walter Hill\").Select(row => row.Studio)).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0e5ea380e0077d7b399d3ac6a15c81b859faf95ae91e259de8ffd0a52a0e63f6",
    "sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar) >= 4500000",
    "linq": "context.Films.GroupBy(row => new { row.Studio }).Where(group => group.Average(row => row.GrossInDollar) >= 4500000).Select(group => new { group.Key.Studio }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9e243aae45d0a4817481afff943386ea7176775f9757c905ce0d17e5ecef83da",
    "sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID ORDER BY high_estimate DESC LIMIT 1",
    "linq": "context.Films.Join(context.FilmMarketEstimations, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.HighEstimate).Select(row => new { row.T1.Title }).Take(1).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bd84cb383c840a5021d079c7ebb363b6c1399540c60ee4092e4c5ae4a9095e29",
    "sql": "SELECT title , director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id = T2.Market_ID WHERE country = 'China')",
    "linq": "context.Films.Where(row => !context.FilmMarketEstimations.Join(context.Markets, T1 => T1.MarketId, T2 => T2.MarketId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country == \"China\").Select(row => row.T1.FilmId).Contains(row.FilmId)).Select(row => new { row.Title, row.Director }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "acb43bcfc0ff3cfddddeaac832deddaffc89c494d180299412df5ae06674cf6a",
    "sql": "SELECT count(*) FROM artist",
    "linq": "context.Artists.Count();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "17a491a43f730b7a60d14ebef2aaae90ec2679ac1d27d2f3726d0e4f98e19e58",
    "sql": "SELECT name , age , country FROM artist ORDER BY Year_Join",
    "linq": "context.Artists.OrderBy(row => row.YearJoin).Select(row => new { row.Name, row.Age, row.Country }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "14ee312aa4fdec9349502be183f0ef57d0b13e828d195915e5b5713cf562062a",
    "sql": "SELECT DISTINCT country FROM artist",
    "linq": "context.Artists.Select(row => new { row.Country }).Distinct().ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6c68b20d5418775009bd4f988bf1ccdf5f9ffb9c5e884c39fa22fac931f73248",
    "sql": "SELECT name , year_join FROM artist WHERE country != 'United States'",
    "linq": "context.Artists.Where(row => row.Country != \"United States\").Select(row => new { row.Name, row.YearJoin }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4c9c2aeeddfebabd1bd1810e1144dd6b54bed5a38210075358d85437554f8608",
    "sql": "SELECT count(*) FROM artist WHERE age > 46 AND year_join > 1990",
    "linq": "context.Artists.Where(row => row.Age > 46 && row.YearJoin > 1990).Count();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e7631599d50b0575c9fd0a9f4cc095e749d68d7d3814fc11771a8555ca21a5ea",
    "sql": "SELECT avg(age) , min(age) FROM artist WHERE country = 'United States'",
    "linq": "context.Artists.Where(row => row.Country == \"United States\").GroupBy(row => 1).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), MinAge = group.Select(row => row.Age).Min() }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8cd1d7f53fa2040fbf83720d69513a595add9470ed8ad66e5affc3a4b7300249",
    "sql": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1",
    "linq": "context.Artists.OrderByDescending(row => row.YearJoin).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "be48fc8c38afe02fdda8ad980b5c80662eb93767d5a0e2b96503d8bd8220cc56",
    "sql": "SELECT count(*) FROM exhibition WHERE YEAR >= 2005",
    "linq": "context.Exhibitions.Where(row => row.Year >= 2005).Count();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "81e5c0481735a804b44e58657670ad19d91655b1d4a617550e2934eba1701ffd",
    "sql": "SELECT theme , YEAR FROM exhibition WHERE ticket_price < 15",
    "linq": "context.Exhibitions.Where(row => row.TicketPrice < 15).Select(row => new { row.Theme, row.Year }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3d1257c2be009fd8da7fcb29836f99e313450da92d99f3101cc560c4d932faa5",
    "sql": "SELECT T2.name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id",
    "linq": "context.Exhibitions.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ArtistId }).Select(group => new { group.First().T2.Name, Count = group.Count() }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2ca8ca28bdbd9f2f9acd7d6437c5f6164a525f210606f39433e51618ba3e99b1",
    "sql": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Exhibitions.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ArtistId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name, group.First().T2.Country }).Take(1).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3e86921da95bcb2dbca6d63c38253e127c43dd61467c3fda316e487ee3f0b022",
    "sql": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
    "linq": "context.Artists.Where(row => !context.Exhibitions.Select(row => row.ArtistId).Contains(row.ArtistId)).Select(row => new { row.Name }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "54117626e49f581a46b1a9ebcdbe654368c92b9cdddbeeafe94085a5f437df7d",
    "sql": "SELECT T1.theme , T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.ticket_price > (SELECT avg(ticket_price) FROM exhibition)",
    "linq": "context.Exhibitions.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.TicketPrice > context.Exhibitions.Select(row => (double) row.TicketPrice).Average()).Select(row => new { row.T1.Theme, row.T2.Name }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0dcc17e7e6d31afbf282e65e07e83068fa3b521f4149119ffa2480a467c79d49",
    "sql": "SELECT avg(ticket_price) , min(ticket_price) , max(ticket_price) FROM exhibition WHERE YEAR < 2009",
    "linq": "context.Exhibitions.Where(row => row.Year < 2009).GroupBy(row => 1).Select(group => new { AverageTicketPrice = group.Select(row => row.TicketPrice).Average(), MinTicketPrice = group.Select(row => row.TicketPrice).Min(), MaxTicketPrice = group.Select(row => row.TicketPrice).Max() }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ac6a5746cbb496f2831a7e2b7bf6afa21d8684446df52ba7fc8c6f30ee8cd23d",
    "sql": "SELECT theme , YEAR FROM exhibition ORDER BY ticket_price DESC",
    "linq": "context.Exhibitions.OrderByDescending(row => row.TicketPrice).Select(row => new { row.Theme, row.Year }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0e091c96a15492bf6d5025d13cbcc6ba0266c912f898b9687c0434ab9428e01a",
    "sql": "SELECT T2.theme , T1.date , T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004",
    "linq": "context.ExhibitionRecords.Join(context.Exhibitions, T1 => T1.ExhibitionId, T2 => T2.ExhibitionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2004).Select(row => new { row.T2.Theme, row.T1.Date, row.T1.Attendance }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3bcef390fb2156ee0d38dc4619cef2f246ef0e2dbf87e991bf8944ef273fb5ef",
    "sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year = 2004",
    "linq": "context.Artists.Select(row => row.Name).Except(context.Exhibitions.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2004).Select(row => row.T2.Name)).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2eca07f58292a4c21633aa56b4d8637944408e2affaad1bcfcd5f8e6c7cf3e2f",
    "sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500",
    "linq": "context.ExhibitionRecords.Join(context.Exhibitions, T1 => T1.ExhibitionId, T2 => T2.ExhibitionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Attendance < 100).Select(row => row.T2.Theme).Intersect(context.ExhibitionRecords.Join(context.Exhibitions, T1 => T1.ExhibitionId, T2 => T2.ExhibitionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Attendance > 500).Select(row => row.T2.Theme)).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a21a84181077c40bad65157c892fa395bafa55630a5d0dcd732ca785932a2774",
    "sql": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100 OR T2.ticket_price < 10",
    "linq": "context.ExhibitionRecords.Join(context.Exhibitions, T1 => T1.ExhibitionId, T2 => T2.ExhibitionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Attendance > 100 || row.T2.TicketPrice < 10).Count();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0f05588c59ffa3d426fe8f3648e12404efede4b00bfe7f4da33dedb8f40ddf33",
    "sql": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id JOIN artist AS T3 ON T3.artist_id = T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance) > 200",
    "linq": "context.ExhibitionRecords.Join(context.Exhibitions, T1 => T1.ExhibitionId, T2 => T2.ExhibitionId, (T1, T2) => new { T1, T2 }).Join(context.Artists, joined => joined.T2.ArtistId, T3 => T3.ArtistId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.ArtistId }).Where(group => group.Average(row => row.T1.Attendance) > 200).Select(group => new { group.First().T3.Name }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c6ecbcaa28d0a15286a84a85652a540da8fd312afe9600494cd40b675c368eeb",
    "sql": "SELECT individual_first_name , individual_middle_name , individual_last_name FROM individuals ORDER BY individual_last_name",
    "linq": "context.Individuals.OrderBy(row => row.IndividualLastName).Select(row => new { row.IndividualFirstName, row.IndividualMiddleName, row.IndividualLastName }).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "396db897b2865689b95a8835978c0bba694f293515b52a217477b2732602ad95",
    "sql": "SELECT DISTINCT form_type_code FROM forms",
    "linq": "context.Forms.Select(row => new { row.FormTypeCode }).Distinct().ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "86fe4697a3a46c8581d68f9352073b19802f11997d07165a4b22c3c2dc083d27",
    "sql": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Forms.Join(context.PartyForms, t1 => t1.FormId, t2 => t2.FormId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.FormId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.FormName }).Take(1).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8a7225180bc6a0dfc4b04b51e7962bc80421d1a4c34cedf74fcf7da3b86b8564",
    "sql": "SELECT payment_method_code , party_phone FROM parties WHERE party_email = \"enrico09@example.com\"",
    "linq": "context.Parties.Where(row => row.PartyEmail == \"enrico09@example.com\").Select(row => new { row.PaymentMethodCode, row.PartyPhone }).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0a8084be7d43798bc59d3bcad88a04526907e3efafd7f673706f9d6d69897232",
    "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id WHERE t2.form_id = (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
    "linq": "context.Parties.Join(context.PartyForms, t1 => t1.PartyId, t2 => t2.PartyId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.FormId == context.PartyForms.GroupBy(row => new { row.FormId }).OrderByDescending(group => group.Count()).Select(group => group.Key.FormId).Take(1).First()).Select(row => new { row.t1.PartyEmail }).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "09da55110e21504449ee615ebe7d07a6911b9d7e611672fa1e82fb304080c742",
    "sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
    "linq": "context.Organizations.OrderBy(row => row.DateFormed).Select(row => new { row.OrganizationName }).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ebf8c5ff929ef3829744b6a4521026406109e37ec3490a38bbdededaec635c8b",
    "sql": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
    "linq": "context.Organizations.OrderByDescending(row => row.DateFormed).Select(row => new { row.OrganizationName }).Take(1).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c2d9eebff6cab552b2916ad7118e58da55769b39eccb022414cee37cd694ccdd",
    "sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
    "linq": "context.Organizations.Join(context.OrganizationContactIndividuals, t1 => t1.OrganizationId, t2 => t2.OrganizationId, (t1, t2) => new { t1, t2 }).Join(context.Individuals, joined => joined.t2.IndividualId, t3 => t3.IndividualId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.OrganizationName == \"Labour Party\").OrderByDescending(row => row.t2.DateContactTo).Select(row => new { row.t3.IndividualLastName }).Take(1).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0bb85b0479c80ea0f7eff6989d364503013305373fb27eb43120a2fdac3b1567",
    "sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.uk_vat_number = (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1",
    "linq": "context.Organizations.Join(context.OrganizationContactIndividuals, t1 => t1.OrganizationId, t2 => t2.OrganizationId, (t1, t2) => new { t1, t2 }).Join(context.Individuals, joined => joined.t2.IndividualId, t3 => t3.IndividualId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.UkVatNumber == context.Organizations.Select(row => row.UkVatNumber).Max()).OrderBy(row => row.t2.DateContactTo).Select(row => new { row.t3.IndividualLastName }).Take(1).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "386bb948bbd3b63bdb6f902f0a106b59bb157f8bdcf3c0d3cc2dfec81581b9b9",
    "sql": "SELECT count(*) FROM services",
    "linq": "context.Services.Count();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "86a9ba7cf951f19b436805e55c2d230b48c1f82199dd5fcc1098be3446917a66",
    "sql": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id",
    "linq": "context.Services.Select(row => row.ServiceName).Except(context.Services.Join(context.PartyServices, t1 => t1.ServiceId, t2 => t2.ServiceId, (t1, t2) => new { t1, t2 }).Select(row => row.t1.ServiceName)).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b35a22883e44db4388a4a237f49114ef62f6b504f9c76a60c12726a39bdfc83b",
    "sql": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
    "linq": "context.Addresses.Select(row => row.TownCity).Union(context.Addresses.Select(row => row.StateProvinceCounty)).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ac934db8af439ab8d014051e3af4323c04418b8aa24126f83b4ce099e9b0ed88",
    "sql": "SELECT count(*) FROM addresses WHERE state_province_county = \"Colorado\"",
    "linq": "context.Addresses.Where(row => row.StateProvinceCounty == \"Colorado\").Count();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2d1c950f2ba7eb23a480738396f628ff037ea5fc584e889dc30695875cfd36f7",
    "sql": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*) > 3",
    "linq": "context.Parties.GroupBy(row => new { row.PaymentMethodCode }).Where(group => group.Count() > 3).Select(group => new { group.Key.PaymentMethodCode }).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3a6c7c725c8d7355e35e7a97c1514506ed2df60dfb44dacd9e38664060063749",
    "sql": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"",
    "linq": "context.Organizations.Where(row => EF.Functions.Like(row.OrganizationName, \"%Party%\")).Select(row => new { row.OrganizationName }).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7680030c5d97707997a88672482cb24eeae4ac7ec751655cadc6c69c91bf5ea8",
    "sql": "SELECT count(DISTINCT payment_method_code) FROM parties",
    "linq": "context.Parties.Select(row => row.PaymentMethodCode).Distinct().Count();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6b3fa178d456367eb29fbda8804f069778e629e49f9a5f8fd6fef10bbada2652",
    "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Parties.Join(context.PartyServices, t1 => t1.PartyId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.PartyEmail }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PartyEmail }).Take(1).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d067d3fbf93447aa20f0caaa75b6908bd15e9d2d67ed5a701f333f3fe39a9a52",
    "sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
    "linq": "context.Addresses.Where(row => EF.Functions.Like(row.Line1NumberBuilding, \"%6862 Kaitlyn Knolls%\")).Select(row => new { row.StateProvinceCounty }).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0fa89c6fe213ac0a3af089f9e5b750d7a39b3c5080dfc2c30d5bbc7752971532",
    "sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Organizations.Join(context.OrganizationContactIndividuals, t1 => t1.OrganizationId, t2 => t2.OrganizationId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.OrganizationName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.OrganizationName }).Take(1).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "04cfbebd1023dd07e96bdddf871bea75174d8f30034b53eedcac91a71a4c95b2",
    "sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id",
    "linq": "context.Individuals.Join(context.OrganizationContactIndividuals, t1 => t1.IndividualId, t2 => t2.IndividualId, (t1, t2) => new { t1, t2 }).Select(row => new { row.t1.IndividualLastName }).Distinct().ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "37c91d62e175c61f32ac673fabeac9880405756bbee9b267a95303fdfe1b855b",
    "sql": "SELECT roomName FROM Rooms WHERE basePrice < 160 AND beds = 2 AND decor = 'modern';",
    "linq": "context.Rooms.Where(row => row.BasePrice < 160 && row.Beds == 2 && row.Decor == \"modern\").Select(row => new { row.RoomName }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "96adee69a2bebc2db87c7e35e684c0dee914f9ec3b7f38ae152ad189a812ea32",
    "sql": "SELECT roomName , RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2;",
    "linq": "context.Rooms.Where(row => row.BasePrice > 160 && row.MaxOccupancy > 2).Select(row => new { row.RoomName, row.RoomId }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0f39bb6733234f4fa77c4c38386afa0a60e3158481d6bd483a227705bf05b3a5",
    "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
    "linq": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Room }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.RoomName }).Take(1).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a3d34e12a3d41297a4ef4087493ce4d6195396e9091b2a9610511f0b09d9e7af",
    "sql": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\";",
    "linq": "context.Reservations.Where(row => row.FirstName == \"ROY\" && row.LastName == \"SWEAZY\").Select(row => new { row.Kids }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "40ce71e70037ac8f5ac9eeeba4e2acdecedcbc942f8407eadf1777d69694534e",
    "sql": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\";",
    "linq": "context.Reservations.Where(row => row.FirstName == \"ROY\" && row.LastName == \"SWEAZY\").Count();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "06091ff92d354ed424965e0b7db10fd9712fa2a1e737a865f4dbe7e57aa0eea7",
    "sql": "SELECT T2.roomName , T1.Rate , T1.CheckIn , T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;",
    "linq": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Room }).OrderByDescending(group => group.First().T1.Rate).Select(group => new { group.First().T2.RoomName, group.First().T1.Rate, group.First().T1.CheckIn, group.First().T1.CheckOut }).Take(1).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9d220a62dbf26f096d9152e08e5ff55051419918f3641f51cf1dbc150e20cdfa",
    "sql": "SELECT Adults FROM Reservations WHERE CheckIn = \"2010-10-23\" AND FirstName = \"CONRAD\" AND LastName = \"SELBIG\";",
    "linq": "context.Reservations.Where(row => row.CheckIn == \"2010-10-23\" && row.FirstName == \"CONRAD\" && row.LastName == \"SELBIG\").Select(row => new { row.Adults }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1c8548b3e4d60451238bdaa0547b1a4532c40656796b32920d397a8c90325e7e",
    "sql": "SELECT Kids FROM Reservations WHERE CheckIn = \"2010-09-21\" AND FirstName = \"DAMIEN\" AND LastName = \"TRACHSEL\";",
    "linq": "context.Reservations.Where(row => row.CheckIn == \"2010-09-21\" && row.FirstName == \"DAMIEN\" && row.LastName == \"TRACHSEL\").Select(row => new { row.Kids }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ab1c2ec8233716d16d448901215365fd6c53175116b00bc0b406806a0f754c34",
    "sql": "SELECT sum(beds) FROM Rooms WHERE bedtype = 'King';",
    "linq": "context.Rooms.Where(row => row.BedType == \"King\").Select(row => row.Beds).Sum();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ff8891edf84001399fee4977379a2bbcf5e946608a8470f83c022b38b0ac125d",
    "sql": "SELECT roomName , decor FROM Rooms WHERE bedtype = 'King' ORDER BY basePrice;",
    "linq": "context.Rooms.Where(row => row.BedType == \"King\").OrderBy(row => row.BasePrice).Select(row => new { row.RoomName, row.Decor }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ea4627c23041c3ff1a96f2b82ad8cf96e7bcad92172e96673bfd5d74801d843a",
    "sql": "SELECT roomName , basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;",
    "linq": "context.Rooms.OrderBy(row => row.BasePrice).Select(row => new { row.RoomName, row.BasePrice }).Take(1).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2ef52113548953aa626633bb44b7993f8d2d3bdaff186323cef538800a50a36c",
    "sql": "SELECT decor FROM Rooms WHERE roomName = \"Recluse and defiance\";",
    "linq": "context.Rooms.Where(row => row.RoomName == \"Recluse and defiance\").Select(row => new { row.Decor }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "485e8983d3733c39bbc9a9fc5738637fa32f157c9638e8c0c7e3e12e6d926507",
    "sql": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType;",
    "linq": "context.Rooms.GroupBy(row => new { row.BedType }).Select(group => new { group.Key.BedType, AverageBasePrice = group.Select(row => row.BasePrice).Average() }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3cffb0aca3ed4d91051a616647659b06c0db43cef436708ac64351f53a4f6537",
    "sql": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor = 'modern';",
    "linq": "context.Rooms.Where(row => row.Decor == \"modern\").Select(row => row.MaxOccupancy).Sum();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ad996b0ae2644d926819eb570c2338a4b30e825b87908b1d6dd7b93309af31e5",
    "sql": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;",
    "linq": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Decor }).OrderBy(group => group.Count(row => row.T2.Decor != null)).Select(group => new { group.Key.Decor }).Take(1).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "301ba2b5fae1a840c7c4cf64ffefe77fd57e5e728beec7e8b5eddf97e6177d04",
    "sql": "SELECT count(*) FROM Rooms;",
    "linq": "context.Rooms.Count();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9e5b8dac7f5f148ddbaf7a146d913e37faddd9c5415de142d843fcb598e64c7b",
    "sql": "SELECT count(*) FROM Rooms WHERE bedType = \"King\";",
    "linq": "context.Rooms.Where(row => row.BedType == \"King\").Count();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9d647a6dd9dd004cffaef2686676ba4c697a8f23fd627bb121d8ca3ce410b6aa",
    "sql": "SELECT bedType , count(*) FROM Rooms GROUP BY bedType;",
    "linq": "context.Rooms.GroupBy(row => new { row.BedType }).Select(group => new { group.Key.BedType, Count = group.Count() }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6479a1f4fafeca4f2de7e6488a915a176d56693669ee685600fff59e42314b52",
    "sql": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;",
    "linq": "context.Rooms.OrderByDescending(row => row.MaxOccupancy).Select(row => new { row.RoomName }).Take(1).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cdff4720dcf19c029c0ca827ecd5aaf494d87adea0a58a99931bfce9ed8718e7",
    "sql": "SELECT RoomId , roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;",
    "linq": "context.Rooms.OrderByDescending(row => row.BasePrice).Select(row => new { row.RoomId, row.RoomName }).Take(1).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2f7ed7bd3c82edf69a336c2e409212ecd4e99d78f0ec8d7bb78142550a2c82d5",
    "sql": "SELECT roomName , bedType FROM Rooms WHERE decor = \"traditional\";",
    "linq": "context.Rooms.Where(row => row.Decor == \"traditional\").Select(row => new { row.RoomName, row.BedType }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bb1ad23824dce468bd8c8800837ebefbdeb0881bf157f9c689c270ca15c62461",
    "sql": "SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;",
    "linq": "context.Rooms.Where(row => row.BedType == \"King\").GroupBy(row => new { row.Decor }).Select(group => new { group.Key.Decor, Count = group.Count() }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2ef4aa38acea8617ffc8f1a4bf283862ad70f375c539b892abb048c21253917e",
    "sql": "SELECT decor , avg(basePrice) , min(basePrice) FROM Rooms GROUP BY decor;",
    "linq": "context.Rooms.GroupBy(row => new { row.Decor }).Select(group => new { group.Key.Decor, AverageBasePrice = group.Select(row => row.BasePrice).Average(), MinBasePrice = group.Select(row => row.BasePrice).Min() }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d6770727b3c2ac6f4c76d23fb15656fdbefcbb92a6daca22ea136f66744da87a",
    "sql": "SELECT roomName FROM Rooms ORDER BY basePrice;",
    "linq": "context.Rooms.OrderBy(row => row.BasePrice).Select(row => new { row.RoomName }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1d70ca386e43ff37786dd22bbe06e8977630418b9727b944b92f59f1857205db",
    "sql": "SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor;",
    "linq": "context.Rooms.Where(row => row.BasePrice > 120).GroupBy(row => new { row.Decor }).Select(group => new { group.Key.Decor, Count = group.Count() }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "42bbb9c22e4ed3d7290dbc1f71ef7751f22b86f38cfdd0227c5c7893301a7b6c",
    "sql": "SELECT roomName FROM Rooms WHERE bedType = \"King\" OR bedType = \"Queen\";",
    "linq": "context.Rooms.Where(row => row.BedType == \"King\" || row.BedType == \"Queen\").Select(row => new { row.RoomName }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2409d990b7a41ef87a961b3b9dabde50a2da9c28b77e1db74af5d1ff19380fd9",
    "sql": "SELECT count(DISTINCT bedType) FROM Rooms;",
    "linq": "context.Rooms.Select(row => row.BedType).Distinct().Count();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e94e56cbd0029f2b4110517512c58df49f36084265c33af4022d7eadf67b89ea",
    "sql": "SELECT RoomId , roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
    "linq": "context.Rooms.OrderByDescending(row => row.BasePrice).Select(row => new { row.RoomId, row.RoomName }).Take(3).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8fe3f7958e3f2e735fb3d4710f36482c5d9c00fe0935623b68c833fb4214c0b7",
    "sql": "SELECT roomName FROM Rooms WHERE basePrice > ( SELECT avg(basePrice) FROM Rooms );",
    "linq": "context.Rooms.Where(row => row.BasePrice > context.Rooms.Select(row => row.BasePrice).Average()).Select(row => new { row.RoomName }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c6de4a6a5d5555de50c598ce53dba9e5894bece08c21816e941dfb123cec623e",
    "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
    "linq": "context.Rooms.Where(row => !context.Reservations.Select(row => row.Room).Distinct().Contains(row.RoomId)).Count();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2a639aafe96549e6d477a508afc50a1176b867dee3ee4fd1683d2e0db9dee225",
    "sql": "SELECT T2.roomName , count(*) , T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room",
    "linq": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Room }).Select(group => new { group.First().T2.RoomName, Count = group.Count(), group.Key.Room }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a8a396a4d8917ac6b9b9106f2f7d2af77216326836a0a341609662817dcbf9ac",
    "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING count(*) > 60",
    "linq": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Room }).Where(group => group.Count() > 60).Select(group => new { group.First().T2.RoomName }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a65af6231058403736b67ef534ae2af90affdda3af72a83ba8dff894bccac6f4",
    "sql": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150",
    "linq": "context.Rooms.Where(row => row.BasePrice >= 120 && row.BasePrice <= 150).Select(row => new { row.RoomName }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8250d1a55a6140d1e5fd1023b3bc3d2a034d6f3e9ec59abed55deb61c97dbe4f",
    "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%'",
    "linq": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.FirstName, \"%ROY%\")).Select(row => new { row.T2.RoomName }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bbfd8020dbd42581c0a984f309693a1d1154a2311437eca08dd0e1b055a83956",
    "sql": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1",
    "linq": "context.ProblemLogs.OrderByDescending(row => row.LogEntryDate).Select(row => new { row.ProblemLogId }).Take(1).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3f6009c713c539d41823e6f99dcd71acc88b44d3c90d950b38b27e62cd5b47fb",
    "sql": "SELECT problem_log_id , problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
    "linq": "context.ProblemLogs.OrderBy(row => row.LogEntryDate).Select(row => new { row.ProblemLogId, row.ProblemId }).Take(1).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c171f9cd7b663d5c077ae3a1a97c3b6ed6991e0d8d695d20256abe01dbd04e68",
    "sql": "SELECT problem_log_id , log_entry_date FROM problem_log WHERE problem_id = 10",
    "linq": "context.ProblemLogs.Where(row => row.ProblemId == 10).Select(row => new { row.ProblemLogId, row.LogEntryDate }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c6cf9efc996740d031d14f9b31adc60ecaf1f8b6919136a50dda137cc82e4d1",
    "sql": "SELECT problem_log_id , log_entry_description FROM problem_log",
    "linq": "context.ProblemLogs.Select(row => new { row.ProblemLogId, row.LogEntryDescription }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f90f18d8b8f9d1b59297b84b97af76f74e7f5f17228426391afe67c041665665",
    "sql": "SELECT DISTINCT staff_first_name , staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1",
    "linq": "context.Staff.Join(context.ProblemLogs, T1 => T1.StaffId, T2 => T2.AssignedToStaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ProblemId == 1).Select(row => new { row.T1.StaffFirstName, row.T1.StaffLastName }).Distinct().ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "12a3ef4fcc4a6b95b7bdbcbcadab8d2ba1983d33015d2d12ea717160e5b72bf0",
    "sql": "SELECT DISTINCT T2.problem_id , T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"",
    "linq": "context.Staff.Join(context.ProblemLogs, T1 => T1.StaffId, T2 => T2.AssignedToStaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StaffFirstName == \"Rylan\" && row.T1.StaffLastName == \"Homenick\").Select(row => new { row.T2.ProblemId, row.T2.ProblemLogId }).Distinct().ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "981ec070c2ac3c539123b3f4d7630b6325fd01ce060f9d0fd171c1491bf48787",
    "sql": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"",
    "linq": "context.Products.Join(context.Problems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ProductName == \"voluptatem\").Count();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a69cf56abda743b7914359599ebf7fabce8f4f7e068a82dfeaa1f802473e252f",
    "sql": "SELECT count(*) , T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Products.Join(context.Problems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductName }).Select(group => new { Count = group.Count(), group.Key.ProductName }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d4c41dd86dc649bcfef3c9c8b0cff273e5e4604436ca9548d8ef70d757c3c635",
    "sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"",
    "linq": "context.Problems.Join(context.Staff, T1 => T1.ReportedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.StaffFirstName == \"Christop\").Select(row => new { row.T1.ProblemDescription }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "40c7b90d1c9a1bd72db04f91df036301bd3097055d6958f27ca17cefbb6db04c",
    "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"",
    "linq": "context.Problems.Join(context.Staff, T1 => T1.ReportedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.StaffLastName == \"Bosco\").Select(row => new { row.T1.ProblemId }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "72abce6284b8e19eb9f9f6bd9d9a86338c6ba899219d0de254ef8a53e11eed77",
    "sql": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"",
    "linq": "context.Problems.Where(row => row.DateProblemReported > \"1978-06-26\").Select(row => new { row.ProblemId }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.76",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cb839eefb3e6c80170c376d8ba70e09799743e97846483b99906cdd101e3f70e",
    "sql": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"",
    "linq": "context.Problems.Where(row => row.DateProblemReported < \"1978-06-26\").Select(row => new { row.ProblemId }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '<' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.51",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1de86f56a55ca995ac1290929ff0d8eee6b35cc925c782159164476948056d9a",
    "sql": "SELECT count(*) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
    "linq": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ProductId }).Select(group => new { Count = group.Count(), group.Key.ProductId }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e732dcfa8b8ed7a627dac25d76e4d9177a1f65d25d06a1389a012713d52211e4",
    "sql": "SELECT count(*) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
    "linq": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DateProblemReported > \"1986-11-13\").GroupBy(row => new { row.T2.ProductId }).Select(group => new { Count = group.Count(), group.Key.ProductId }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,133): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d611cc059e3384997e54b2e091f29b163063dbbe1565a894ceaa6b1836503875",
    "sql": "SELECT DISTINCT product_name FROM product ORDER BY product_name",
    "linq": "context.Products.OrderBy(row => row.ProductName).Select(row => new { row.ProductName }).Distinct().ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7967ba875dcc81e67c13ddbe2988e57cdac80d94914579fa79bc6a67e90711c1",
    "sql": "SELECT DISTINCT product_name FROM product ORDER BY product_id",
    "linq": "context.Products.OrderBy(row => row.ProductId).Select(row => new { row.ProductName }).Distinct().ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "91387f989ddcf770b0ca417b022adfc688358be367b32e2338c66a970b4c23c3",
    "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"",
    "linq": "context.Problems.Join(context.Staff, T1 => T1.ReportedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.StaffFirstName == \"Dameon\" && row.T2.StaffLastName == \"Frami\").Select(row => row.T1.ProductId).Union(context.Problems.Join(context.Staff, T1 => T1.ReportedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.StaffFirstName == \"Jolie\" && row.T2.StaffLastName == \"Weber\").Select(row => row.T1.ProductId)).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e71a7d93cb77845d5c3e301cbc4059808433ead6d0d103adcf82d7ddb0af6081",
    "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"",
    "linq": "context.Problems.Join(context.Staff, T1 => T1.ReportedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.StaffFirstName == \"Christop\" && row.T2.StaffLastName == \"Berge\").Select(row => row.T1.ProductId).Intersect(context.Problems.Join(context.Staff, T1 => T1.ClosureAuthorisedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.StaffFirstName == \"Ashley\" && row.T2.StaffLastName == \"Medhurst\").Select(row => row.T1.ProductId)).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f4110caa4fb10ac5902f4e5355158966fdffa4a284f82bb3bcf15a96e7776cb7",
    "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported < ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )",
    "linq": "context.Problems.Join(context.Staff, T1 => T1.ReportedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DateProblemReported < context.Problems.Join(context.Staff, T3 => T3.ReportedByStaffId, T4 => T4.StaffId, (T3, T4) => new { T3, T4 }).Where(row => row.T4.StaffFirstName == \"Lysanne\" && row.T4.StaffLastName == \"Turcotte\").Select(row => row.T3.DateProblemReported).Min()).Select(row => new { row.T1.ProblemId }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "38d129522d4ef4e15921e4aa6ab2ef8999b341b796ee0f5efa272020f5fcbfd1",
    "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported > ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )",
    "linq": "context.Problems.Join(context.Staff, T1 => T1.ReportedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DateProblemReported > context.Problems.Join(context.Staff, T3 => T3.ReportedByStaffId, T4 => T4.StaffId, (T3, T4) => new { T3, T4 }).Where(row => row.T4.StaffFirstName == \"Rylan\" && row.T4.StaffLastName == \"Homenick\").Select(row => row.T3.DateProblemReported).Max()).Select(row => new { row.T1.ProblemId }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3ced4ddb1ea8c031d30a25ad50461040ccdaf9cea7209dc471d3f59a59001dbf",
    "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3",
    "linq": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ProductName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ProductName }).Take(3).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e0c3d4bf2c79f38a678e0272b84e3654bc515c0b2bf4b971f33c26defc9094e0",
    "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"",
    "linq": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ProductName == \"voluptatem\" && row.T1.DateProblemReported > \"1995\").Select(row => new { row.T1.ProblemId }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,171): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.53",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "54f6680e04ead543ddedb005d3bf9b1c6d2fb86762504536a98cdd6fcd16757c",
    "sql": "SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
    "linq": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Staff, joined => joined.T1.ReportedByStaffId, T3 => T3.StaffId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.ProductName == \"rem\").Select(row => new { row.T3.StaffFirstName, row.T3.StaffLastName }).Except(context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Staff, joined => joined.T1.ReportedByStaffId, T3 => T3.StaffId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.ProductName == \"aut\").Select(row => new { row.T3.StaffFirstName, row.T3.StaffLastName })).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b1fc1dc9a46a07bfa2a1256d6e1fe128ae5facd4998947021ff52a9b7f2816e8",
    "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"",
    "linq": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Staff, joined => joined.T1.ReportedByStaffId, T3 => T3.StaffId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.StaffFirstName == \"Lacey\" && row.T3.StaffLastName == \"Bosco\").Select(row => row.T2.ProductName).Intersect(context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Staff, joined => joined.T1.ReportedByStaffId, T3 => T3.StaffId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.StaffFirstName == \"Kenton\" && row.T3.StaffLastName == \"Champlin\").Select(row => row.T2.ProductName)).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3d2d27c2e385c1e27834264aeafe5fc478060f4c047c7bc149371c81e9ce398e",
    "sql": "SELECT count(*) FROM player",
    "linq": "context.Players.Count();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fad22c07a0b1990a36876b2e7b88e29a69b663adbcec4bac4683ac409bfaaaab",
    "sql": "SELECT Player_name FROM player ORDER BY Votes ASC",
    "linq": "context.Players.OrderBy(row => row.Votes).Select(row => new { row.PlayerName }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bd6b2d598a40acd47d0e0de89c4602588f46e942294bdee984d660e3b49f3cd4",
    "sql": "SELECT Gender , Occupation FROM player",
    "linq": "context.Players.Select(row => new { row.Gender, row.Occupation }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cab59a40630d3544643b3d542767c60e9936f87ae4cec696d800f470fa0a777c",
    "sql": "SELECT Player_name , residence FROM player WHERE Occupation != \"Researcher\"",
    "linq": "context.Players.Where(row => row.Occupation != \"Researcher\").Select(row => new { row.PlayerName, row.Residence }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fab02bbe89f5f7162e660e66d2ec4ef10691e2a0d0f9970ca53240ebff1382b3",
    "sql": "SELECT Sponsor_name FROM player WHERE Residence = \"Brandon\" OR Residence = \"Birtle\"",
    "linq": "context.Players.Where(row => row.Residence == \"Brandon\" || row.Residence == \"Birtle\").Select(row => new { row.SponsorName }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "55503dcf773c562893a5a797591298413c35388e858eddd2f602a67c8183c610",
    "sql": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1",
    "linq": "context.Players.OrderByDescending(row => row.Votes).Select(row => new { row.PlayerName }).Take(1).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cc5051dd1024d24f997f2ad3ec556a2f203258e7d24e0bb7cd41619ebac94b86",
    "sql": "SELECT Occupation , COUNT(*) FROM player GROUP BY Occupation",
    "linq": "context.Players.GroupBy(row => new { row.Occupation }).Select(group => new { group.Key.Occupation, Count = group.Count() }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "17a4dad0555fd8bf08b0d32a5c123dcf178749a92be1ed4f5fec323b33cf55d4",
    "sql": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Players.GroupBy(row => new { row.Occupation }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Occupation }).Take(1).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cd1b10ef5ffda563f58fbaebe36ec2e79b017f0d5e2e8089904a086db903d48d",
    "sql": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*) >= 2",
    "linq": "context.Players.GroupBy(row => new { row.Residence }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Residence }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9e7529e8b43bdc9371a30cf24bf2545d6a4e3df49d4631042438dfcb91b268fa",
    "sql": "SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID",
    "linq": "context.PlayerCoaches.Join(context.Coaches, T1 => T1.CoachId, T2 => T2.CoachId, (T1, T2) => new { T1, T2 }).Join(context.Players, joined => joined.T1.PlayerId, T3 => T3.PlayerId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.PlayerName, row.T2.CoachName }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ef8b5694dacddb7b421a7a0190c92139e65c249f80d4ce489baa1483947ad654",
    "sql": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T2.Rank = 1",
    "linq": "context.PlayerCoaches.Join(context.Coaches, T1 => T1.CoachId, T2 => T2.CoachId, (T1, T2) => new { T1, T2 }).Join(context.Players, joined => joined.T1.PlayerId, T3 => T3.PlayerId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Rank == 1).Select(row => new { row.T3.PlayerName }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1e3db548023998f769290d6d04649b12dfd62349d01df76e45c04e0e04093f7f",
    "sql": "SELECT T3.Player_name , T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T1.Starting_year > 2011",
    "linq": "context.PlayerCoaches.Join(context.Coaches, T1 => T1.CoachId, T2 => T2.CoachId, (T1, T2) => new { T1, T2 }).Join(context.Players, joined => joined.T1.PlayerId, T3 => T3.PlayerId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.StartingYear > 2011).Select(row => new { row.T3.PlayerName, row.T3.Gender }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0c3aecc973096bed162d4ff9b30be63f5970ac5221eb15227d035f2f67a436fc",
    "sql": "SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID ORDER BY T3.Votes DESC",
    "linq": "context.PlayerCoaches.Join(context.Coaches, T1 => T1.CoachId, T2 => T2.CoachId, (T1, T2) => new { T1, T2 }).Join(context.Players, joined => joined.T1.PlayerId, T3 => T3.PlayerId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T3.Votes).Select(row => new { row.T3.PlayerName, row.T2.CoachName }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "65c8f9441bab6827a5c406219c462ec40a2c7519442338741a59d372bbd96663",
    "sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)",
    "linq": "context.Players.Where(row => !context.PlayerCoaches.Select(row => row.PlayerId).Contains(row.PlayerId)).Select(row => new { row.PlayerName }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6e212f4c22a8b118e4689118265a183f56ebeb2342b431ddbecd6794a89900b4",
    "sql": "SELECT Residence FROM player WHERE gender = \"M\" INTERSECT SELECT Residence FROM player WHERE gender = \"F\"",
    "linq": "context.Players.Where(row => row.Gender == \"M\").Select(row => row.Residence).Intersect(context.Players.Where(row => row.Gender == \"F\").Select(row => row.Residence)).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "213af11661b6490fc973912e54d652410ba15d07be724813c62dc4b974fce184",
    "sql": "SELECT T1.club_id , T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id",
    "linq": "context.Clubs.Join(context.Coaches, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClubId }).Select(group => new { group.Key.ClubId, group.First().T1.ClubName, Count = group.Count() }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b573636168cad4e1ea202767870d651e0d7670ae395ed9f8ed0f5743e379aba7",
    "sql": "SELECT T1.club_id , T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.MatchResults.Join(context.Coaches, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClubId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ClubId, group.First().T1.Gold }).Take(1).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8950dcb0c7c02f41a82ed864bf3013d50714d9e5ef1a15591009d128e07f5081",
    "sql": "SELECT count(*) FROM ship",
    "linq": "context.Ships.Count();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8df942ee8a9009fbdc38d84d3463bdee94ec40825d858f2f05841fc01d4d8e07",
    "sql": "SELECT Name FROM ship ORDER BY Tonnage ASC",
    "linq": "context.Ships.OrderBy(row => row.Tonnage).Select(row => new { row.Name }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "287394bb4e896ff4ec56908e3b4db87cbd306158d26bddde4e082de724cc3d1a",
    "sql": "SELECT TYPE , Nationality FROM ship",
    "linq": "context.Ships.Select(row => new { row.Type, row.Nationality }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b747e054cb7eb2c9801c923b1851eaae9e8d0f07badba638021f4c6256e8d012",
    "sql": "SELECT Name FROM ship WHERE Nationality != \"United States\"",
    "linq": "context.Ships.Where(row => row.Nationality != \"United States\").Select(row => new { row.Name }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bb1337b73d74b091be841592ad4845b48db415f913ac1427ae9faf3eb7a7412e",
    "sql": "SELECT Name FROM ship WHERE Nationality = \"United States\" OR Nationality = \"United Kingdom\"",
    "linq": "context.Ships.Where(row => row.Nationality == \"United States\" || row.Nationality == \"United Kingdom\").Select(row => new { row.Name }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2695b457a54298dddfeea076377126f6f1ac1417c3a508974bc7d2d358af4920",
    "sql": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1",
    "linq": "context.Ships.OrderByDescending(row => row.Tonnage).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fb9b3e3c1b0de51529ab70005ec15fc722b46741a7a4fccefb5dd7de14552eaa",
    "sql": "SELECT TYPE , COUNT(*) FROM ship GROUP BY TYPE",
    "linq": "context.Ships.GroupBy(row => new { row.Type }).Select(group => new { group.Key.Type, Count = group.Count() }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ed8d1780a9fed0fe048dd6a4b8229b033f9905a64669993fad3ae7a427226cb1",
    "sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Ships.GroupBy(row => new { row.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d4f8db9bb924bd2573aad7ea2c7e89512d0443c7bb1820cc890864afa2adf56f",
    "sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*) > 2",
    "linq": "context.Ships.GroupBy(row => new { row.Nationality }).Where(group => group.Count() > 2).Select(group => new { group.Key.Nationality }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "96f8130b5ec0cdea1f7d16e3c2a57b56b9735b4d74d204284dbd834e3bb3c87c",
    "sql": "SELECT TYPE , avg(Tonnage) FROM ship GROUP BY TYPE",
    "linq": "context.Ships.GroupBy(row => new { row.Type }).Select(group => new { group.Key.Type, AverageTonnage = group.Select(row => row.Tonnage).Average() }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "da206319787bc84de3f751918b585a59fd5cbe4a46c7d4d79bc6aecf1a7dc207",
    "sql": "SELECT T1.Code , T1.Fate , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID",
    "linq": "context.Missions.Join(context.Ships, T1 => T1.ShipId, T2 => T2.ShipId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Code, row.T1.Fate, row.T2.Name }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a4ca1a8713b0dae81b7fa962362c2d91657b7a703c5b0c57a94683b933c392cc",
    "sql": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928",
    "linq": "context.Missions.Join(context.Ships, T1 => T1.ShipId, T2 => T2.ShipId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.LaunchedYear > 1928).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "109c3e2659d8ecbe88df2cdafec6be87e16bc1cb2e7835d0bc5b7da947bacdc3",
    "sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Nationality = \"United States\"",
    "linq": "context.Missions.Join(context.Ships, T1 => T1.ShipId, T2 => T2.ShipId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Nationality == \"United States\").Select(row => new { row.T1.Fate }).Distinct().ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c9569b355ffc830008d853ada3e50cca445801ff56bef2ef31e7ce8584f46a8a",
    "sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)",
    "linq": "context.Ships.Where(row => !context.Missions.Select(row => row.ShipId).Contains(row.ShipId)).Select(row => new { row.Name }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6aa22f7b197d4a1129100e99c98594f67b528077831ea35cbaf9cc9e888ccbb6",
    "sql": "SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000",
    "linq": "context.Ships.Where(row => row.Tonnage > 6000).Select(row => row.Type).Intersect(context.Ships.Where(row => row.Tonnage < 4000).Select(row => row.Type)).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3825973768eae2da217442472a3e721c5f6c4c12fb39ab495f1a1553529a4cf3",
    "sql": "SELECT T1.asset_id , T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING count(*) = 2 INTERSECT SELECT T1.asset_id , T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING count(*) < 2",
    "linq": "context.Assets.Join(context.AssetParts, T1 => T1.AssetId, T2 => T2.AssetId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AssetId }).Where(group => group.Count() == 2).Select(group => new { group.Key.AssetId, group.First().T1.AssetDetails }).Intersect(context.Assets.Join(context.FaultLogs, T1 => T1.AssetId, T2 => T2.AssetId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AssetId }).Where(group => group.Count() < 2).Select(group => new { group.Key.AssetId, group.First().T1.AssetDetails })).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "27b09f48821482fbe125543e437c880cd0e52156b57c0e673c9f0ba5c20d01f8",
    "sql": "SELECT count(*) , T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
    "linq": "context.MaintenanceContracts.Join(context.Assets, T1 => T1.MaintenanceContractId, T2 => T2.MaintenanceContractId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MaintenanceContractId }).Select(group => new { Count = group.Count(), group.Key.MaintenanceContractId }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a408936fe799d0d45bce9620eabafec7af6e1f242e8731184dabcb1e721dd642",
    "sql": "SELECT count(*) , T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id GROUP BY T1.company_id",
    "linq": "context.ThirdPartyCompanies.Join(context.Assets, T1 => T1.CompanyId, T2 => T2.SupplierCompanyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CompanyId }).Select(group => new { Count = group.Count(), group.Key.CompanyId }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cb9acef72e1953a67ae5fd13393aec45a6aca870151e3df20ad7580b79733d71",
    "sql": "SELECT T1.company_id , T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING count(*) >= 2 UNION SELECT T3.company_id , T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id = T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*) >= 2",
    "linq": "context.ThirdPartyCompanies.Join(context.MaintenanceEngineers, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CompanyId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.CompanyId, group.First().T1.CompanyName }).Union(context.ThirdPartyCompanies.Join(context.MaintenanceContracts, T3 => T3.CompanyId, T4 => T4.MaintenanceContractCompanyId, (T3, T4) => new { T3, T4 }).GroupBy(row => new { row.T3.CompanyId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.CompanyId, group.First().T3.CompanyName })).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "07389c8ccc539ac430f724f53c5ce14a77076652a0a9574614a88e59e8a47e01",
    "sql": "SELECT T1.staff_name , T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name , T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id = T4.contact_staff_id",
    "linq": "context.Staff.Join(context.FaultLogs, T1 => T1.StaffId, T2 => T2.RecordedByStaffId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.StaffName, row.T1.StaffId }).Except(context.Staff.Join(context.EngineerVisits, T3 => T3.StaffId, T4 => T4.ContactStaffId, (T3, T4) => new { T3, T4 }).Select(row => new { row.T3.StaffName, row.T3.StaffId })).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c33f4c835d949e8412039de1d2101e9c5497a9eee68db1499966a55a870b9bd",
    "sql": "SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.MaintenanceEngineers.SelectMany(s => context.EngineerVisits, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EngineerId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.EngineerId, group.First().T1.FirstName, group.First().T1.LastName }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c82cc465f526452fa1a580ee35c072a0959e7ba8fa4411c010df9eea6ba364eb",
    "sql": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING count(*) > 2",
    "linq": "context.Parts.Join(context.PartFaults, T1 => T1.PartId, T2 => T2.PartId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PartId }).Where(group => group.Count() > 2).Select(group => new { group.First().T1.PartName, group.Key.PartId }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1011dca63245c1b3c2e92f5bde0271d2a3f758e39feab00eb72c9958a0c95b59",
    "sql": "SELECT T1.first_name , T1.last_name , T1.other_details , T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id",
    "linq": "context.MaintenanceEngineers.Join(context.EngineerSkills, T1 => T1.EngineerId, T2 => T2.EngineerId, (T1, T2) => new { T1, T2 }).Join(context.Skills, joined => joined.T2.SkillId, T3 => T3.SkillId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.FirstName, row.T1.LastName, row.T1.OtherDetails, row.T3.SkillDescription }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "397f1f8bbb2e7c35b296ef133c1821641cfdfb3fa397e7085a67dc65dfa63020",
    "sql": "SELECT T1.fault_short_name , T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id",
    "linq": "context.PartFaults.Join(context.SkillsRequiredToFixes, T1 => T1.PartFaultId, T2 => T2.PartFaultId, (T1, T2) => new { T1, T2 }).Join(context.Skills, joined => joined.T2.SkillId, T3 => T3.SkillId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.FaultShortName, row.T3.SkillDescription }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fd914cc88273ba3377d1ca6326dcfaa8c0fc39cad3da967bb183ae8d8f6a9b84",
    "sql": "SELECT T1.part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name",
    "linq": "context.Parts.Join(context.AssetParts, T1 => T1.PartId, T2 => T2.PartId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PartName }).Select(group => new { group.Key.PartName, Count = group.Count() }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "30bc74bd0b2ebf82421a14735fbef1fa874ceb8ea58c9ad46ebf957811fb8d58",
    "sql": "SELECT T1.fault_description , T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id",
    "linq": "context.FaultLogs.Join(context.FaultLogParts, T1 => T1.FaultLogEntryId, T2 => T2.FaultLogEntryId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.FaultDescription, row.T2.FaultStatus }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6d9ef5087bab06e488d96bb04c19b27a1680a4554d65f2e9d9b1fbc1b2cef619",
    "sql": "SELECT count(*) , T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.FaultLogs.Join(context.EngineerVisits, T1 => T1.FaultLogEntryId, T2 => T2.FaultLogEntryId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FaultLogEntryId }).Select(group => new { Count = group.Count(), group.Key.FaultLogEntryId }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "08b312c1f0152a36d86f40d9259be22216cccf9ef276b26c7f6817959de7c92f",
    "sql": "SELECT DISTINCT last_name FROM Maintenance_Engineers",
    "linq": "context.MaintenanceEngineers.Select(row => new { row.LastName }).Distinct().ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b3713f6779c1fa2ec594de965e979b34dcded7c86e85f2587ad538cdf3b48474",
    "sql": "SELECT DISTINCT fault_status FROM Fault_Log_Parts",
    "linq": "context.FaultLogParts.Select(row => new { row.FaultStatus }).Distinct().ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b8242072f96fc4a60931f2739686fb347a7dd2336b917697ccbadd602e403e40",
    "sql": "SELECT first_name , last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",
    "linq": "context.MaintenanceEngineers.Where(row => !context.EngineerVisits.Select(row => row.EngineerId).Contains(row.EngineerId)).Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a3d4683d210e55c485a3f711b1b9f023a8cf2b8c6dc5a54e35732fe35cb0f2c5",
    "sql": "SELECT asset_id , asset_details , asset_make , asset_model FROM Assets",
    "linq": "context.Assets.Select(row => new { row.AssetId, row.AssetDetails, row.AssetMake, row.AssetModel }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ba390eb7de7fbfc3546dc6f3777185cf90546bfe06997026ce70840e9163335c",
    "sql": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1",
    "linq": "context.Assets.OrderBy(row => row.AssetAcquiredDate).Select(row => new { row.AssetAcquiredDate }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "82fb5ff1f8040ca84b9e088a6ffd52d5e04468268519cc69c894780b76574f50",
    "sql": "SELECT T1.part_id , T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Parts.Join(context.PartFaults, T1 => T1.PartId, T2 => T2.PartId, (T1, T2) => new { T1, T2 }).Join(context.SkillsRequiredToFixes, joined => joined.T2.PartFaultId, T3 => T3.PartFaultId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.PartId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PartId, group.First().T1.PartName }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5dc1ec70bccbfd8f81bb4c1983834d6e0509707c71e895d63d7a744919d9d744",
    "sql": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.Parts.Join(context.PartFaults, T1 => T1.PartId, T2 => T2.PartId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PartName }).OrderBy(group => group.Count()).Select(group => new { group.Key.PartName }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "758b4109fe19643a6c92616c99c7f9f496eae3453c8647123c7895234f91d77a",
    "sql": "SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.MaintenanceEngineers.Join(context.EngineerVisits, T1 => T1.EngineerId, T2 => T2.EngineerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EngineerId }).OrderBy(group => group.Count()).Select(group => new { group.Key.EngineerId, group.First().T1.FirstName, group.First().T1.LastName }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "212bac62c47677d5011b7d86587c3e56cd2a4b2fc7d806f06c263b43000197a1",
    "sql": "SELECT T1.staff_name , T3.first_name , T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id",
    "linq": "context.Staff.Join(context.EngineerVisits, T1 => T1.StaffId, T2 => T2.ContactStaffId, (T1, T2) => new { T1, T2 }).Join(context.MaintenanceEngineers, joined => joined.T2.EngineerId, T3 => T3.EngineerId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.StaffName, row.T3.FirstName, row.T3.LastName }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6cf2ad2023e48a119d0ec4981e4dcf18ba0fab38fbd16635842d4596b146bd15",
    "sql": "SELECT T1.fault_log_entry_id , T1.fault_description , T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.FaultLogs.Join(context.FaultLogParts, T1 => T1.FaultLogEntryId, T2 => T2.FaultLogEntryId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FaultLogEntryId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.FaultLogEntryId, group.First().T1.FaultDescription, group.First().T1.FaultLogEntryDatetime }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b011c4edb51153e048e9a85b92b758bddc72c89fa9572f0faf3844bf36e2a5f5",
    "sql": "SELECT T1.skill_id , T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Skills.Join(context.SkillsRequiredToFixes, T1 => T1.SkillId, T2 => T2.SkillId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SkillId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.SkillId, group.First().T1.SkillDescription }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c494dd8a510b7106b5c010ebbd1cfbf8f28e4a460d1ba217786acea1fc5daf8",
    "sql": "SELECT DISTINCT asset_model FROM Assets",
    "linq": "context.Assets.Select(row => new { row.AssetModel }).Distinct().ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f7b2e5358454db5f11b1d254739d272a352d54918f0a0f0a09a28a7b2c63f76f",
    "sql": "SELECT asset_make , asset_model , asset_details FROM Assets ORDER BY asset_disposed_date ASC",
    "linq": "context.Assets.OrderBy(row => row.AssetDisposedDate).Select(row => new { row.AssetMake, row.AssetModel, row.AssetDetails }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0a0d7356d985143c948d94e6f7473567f765adeff586a063bbbab36c9e118855",
    "sql": "SELECT part_id , chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
    "linq": "context.Parts.OrderBy(row => row.ChargeableAmount).Select(row => new { row.PartId, row.ChargeableAmount }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7e124a6bed6bc8db2dee8fa01215b8306cf2143b497d0214eff41d4a27c4a921",
    "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1",
    "linq": "context.ThirdPartyCompanies.Join(context.MaintenanceContracts, T1 => T1.CompanyId, T2 => T2.MaintenanceContractCompanyId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.ContractStartDate).Select(row => new { row.T1.CompanyName }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "704003ce5a6c33d03fdec96686571371333c110c0af596258d2753b48c61d227",
    "sql": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Staff.GroupBy(row => new { row.Gender }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Gender }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7090e048998bed2db6bf649bd29463e8097be14ebe089209ada56f444acfd75a",
    "sql": "SELECT T1.staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name",
    "linq": "context.Staff.Join(context.EngineerVisits, T1 => T1.StaffId, T2 => T2.ContactStaffId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StaffName }).Select(group => new { group.Key.StaffName, Count = group.Count() }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "44f4965c61457686a051194590eb2e87d0116c361e0b6babcb9dd8f68ce64f22",
    "sql": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)",
    "linq": "context.Assets.Where(row => !context.FaultLogs.Select(row => row.AssetId).Contains(row.AssetId)).Select(row => new { row.AssetModel }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6a12dc262eb872890bdbddf81e50bfc9df01cd9fbb49c1397c9ab9fc254d7194",
    "sql": "SELECT count(*) FROM body_builder",
    "linq": "context.BodyBuilders.Count();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ae15d2034cb2f3c4c86fde56edb2102d8c57b3bd0833def3b88d7e81dcb2b3a7",
    "sql": "SELECT Total FROM body_builder ORDER BY Total ASC",
    "linq": "context.BodyBuilders.OrderBy(row => row.Total).Select(row => new { row.Total }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "20ecde1609111686097fe3adbe80cde370fb8b3dd7d1920a4d14c7d56c653eb6",
    "sql": "SELECT Snatch , Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
    "linq": "context.BodyBuilders.OrderBy(row => row.Snatch).Select(row => new { row.Snatch, row.CleanJerk }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eee10ddc768e00236ce3a1c87b13752f179e9efec71a3f05ad709846940cf995",
    "sql": "SELECT avg(Snatch) FROM body_builder",
    "linq": "context.BodyBuilders.Select(row => (double) row.Snatch).Average();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "747c5ecb4d0f19e287a110066734554952511e4a59e930a5cc9823e5010b7715",
    "sql": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
    "linq": "context.BodyBuilders.OrderByDescending(row => row.Total).Select(row => new { row.CleanJerk }).Take(1).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fe03014a68f6d7b60935d714ace19d8216296710eaec92619af69fc5b8474b5c",
    "sql": "SELECT Birth_Date FROM People ORDER BY Height ASC",
    "linq": "context.People.OrderBy(row => row.Height).Select(row => new { row.BirthDate }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "147d53f493162a742e5809b3868c19848e522b1dfae02dec82cd5c7d43af3471",
    "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
    "linq": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e4dffab8b58a91e0c48252c0d3285405f46ede6ce85c9af8f7cb00c14bef7408",
    "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300",
    "linq": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Total > 300).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "196cfb46c62f73fd9a789ec9b0fc1b2ccf3f6e4165798ebf8f2518e86c9d3476",
    "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
    "linq": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Weight).Select(row => new { row.T2.Name }).Take(1).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e872b18982940d6f6570423e344170f93e1aa54d9c5268dda21e1544cd3b2dcd",
    "sql": "SELECT T2.Birth_Date , T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 1",
    "linq": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Total).Select(row => new { row.T2.BirthDate, row.T2.BirthPlace }).Take(1).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9fa6dc4a2dea1377f6584fa1f2819ffc3fc6f34fe9bcc5cba50549b21b1a8fac",
    "sql": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total < 315",
    "linq": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Total < 315).Select(row => new { row.T2.Height }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "28c50e3c81e332291c1c50ec15ed537715f4ace916e00670ea0be4e3409c9c15",
    "sql": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200",
    "linq": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Height > 200).Select(row => (double) row.T1.Total).Average();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a9d1fa4304a7d3328cade8114713fbb11337102e4cf5c436e4a31a5ebeedd526",
    "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC",
    "linq": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Total).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "471b80ea7b7005c0c6784fa22ef26f0f38966eac7f04e79e1b5531c0528dcd0e",
    "sql": "SELECT Birth_Place , COUNT(*) FROM people GROUP BY Birth_Place",
    "linq": "context.People.GroupBy(row => new { row.BirthPlace }).Select(group => new { group.Key.BirthPlace, Count = group.Count() }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5fc2c0e7475f643ca08347465f71fae5b03e8761511b0eebf421202da55fdf6b",
    "sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.People.GroupBy(row => new { row.BirthPlace }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BirthPlace }).Take(1).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "94a6e05cd9170b2d869bc13b58221564bdb9dd3ed6f753b51ab2767091d55ae7",
    "sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*) >= 2",
    "linq": "context.People.GroupBy(row => new { row.BirthPlace }).Where(group => group.Count() >= 2).Select(group => new { group.Key.BirthPlace }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b4726e9de9ebbd504837667889552374170b71e7639f6308bec7c23690c28e33",
    "sql": "SELECT Height , Weight FROM people ORDER BY Height DESC",
    "linq": "context.People.OrderByDescending(row => row.Height).Select(row => new { row.Height, row.Weight }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "44a3e13e98aba608b2bc0e46808822922988400435dd547cac7b05c458158e7e",
    "sql": "SELECT * FROM body_builder",
    "linq": "context.BodyBuilders.Select(row => new { row.BodyBuilderId, row.PeopleId, row.Snatch, row.CleanJerk, row.Total }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "28b9116288667faf8b3f33ff1f39db3047c5bb229fbb6e4b65355f75baf0ae2f",
    "sql": "SELECT Name , birth_place FROM people EXCEPT SELECT T1.Name , T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id",
    "linq": "context.People.Select(row => new { row.Name, row.BirthPlace }).Except(context.People.Join(context.BodyBuilders, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name, row.T1.BirthPlace })).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "31e0b6995b1944590a27586b0970cdea24dfe4419721c8a3a7d186175f8808bd",
    "sql": "SELECT count(DISTINCT Birth_Place) FROM people",
    "linq": "context.People.Select(row => row.BirthPlace).Distinct().Count();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eb6c91d414de92da6b85b94c1475aea48660a5435551095e959b559d49a1d80b",
    "sql": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)",
    "linq": "context.People.Where(row => !context.BodyBuilders.Select(row => row.PeopleId).Contains(row.PeopleId)).Count();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "45dc41b0bd6268900ab3ec532febe5b2608a1b27003dd8ff25e6252456df6286",
    "sql": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.snatch > 140 OR T2.height > 200;",
    "linq": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Snatch > 140 || row.T2.Height > 200).Select(row => new { row.T2.Weight }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7b30b26548b3398edd8036a21b8e59ebf5a23a29eccede9ecac731b0b97de6f1",
    "sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";",
    "linq": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.BirthDate, \"%January%\")).Select(row => new { row.T1.Total }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "554d200951eac5fbd1f623eb524121e73a892018aa56bd626e63fcc099d68d74",
    "sql": "SELECT min(snatch) FROM body_builder",
    "linq": "context.BodyBuilders.Select(row => row.Snatch).Min();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "115ecd3a591e96f1fc55275816c52612f8e5499c42cc17c5ac83a386bad2153d",
    "sql": "SELECT count(*) FROM school",
    "linq": "context.Schools.Count();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b2614c931a04fb155d65e07afc588a78a5962056aa056a3cb5afb94a0e2c35a1",
    "sql": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
    "linq": "context.Schools.OrderBy(row => row.Enrollment).Select(row => new { row.Location }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8983aa7fe027efff51bb23b7959cc42eb2da162f37e92635bb71bcc187465563",
    "sql": "SELECT LOCATION FROM school ORDER BY Founded DESC",
    "linq": "context.Schools.OrderByDescending(row => row.Founded).Select(row => new { row.Location }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5826de322a189cd6375343c2ad56facb429073492fc9249d2d0e53c3ecbb8a46",
    "sql": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"",
    "linq": "context.Schools.Where(row => row.Denomination != \"Catholic\").Select(row => new { row.Enrollment }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "da7346a93fe596a8c6b1bf4693b59a9dc1d3288d86cfcc4faaa3ab60ae05faaf",
    "sql": "SELECT avg(Enrollment) FROM school",
    "linq": "context.Schools.Select(row => (double) row.Enrollment).Average();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b2a20e5205b00344ce5c1e4f91dc3344853baf3972f0fe4df9575a5a4b02548a",
    "sql": "SELECT Team FROM player ORDER BY Team ASC",
    "linq": "context.Players.OrderBy(row => row.Team).Select(row => new { row.Team }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "41f3c6a25b999a5d47451d916b1a40731d047b4dfe7143b3c9f3dc8d4f0a1b1b",
    "sql": "SELECT count(DISTINCT POSITION) FROM player",
    "linq": "context.Players.Select(row => row.Position).Distinct().Count();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9f881353eacd1addef8b58cdfa6dfd48c9bfb394ff0beafecaa5429c9cbd3449",
    "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1",
    "linq": "context.Players.OrderByDescending(row => row.Age).Select(row => new { row.Team }).Take(1).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fbfca44de12ea734b4d2e5f96d5f4d356856508b8065133c6942f3bcad304903",
    "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
    "linq": "context.Players.OrderByDescending(row => row.Age).Select(row => new { row.Team }).Take(5).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "25f6012560e265c14f5b5199fcbf6d63a74227e9016c4984e8c3a60aafd21ed0",
    "sql": "SELECT T1.Team , T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID",
    "linq": "context.Players.Join(context.Schools, T1 => T1.SchoolId, T2 => T2.SchoolId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Team, row.T2.Location }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "66d3af8cd0aba8c004a3d817806740bdbaa2fc3b06b3c798e8f07c760db07668",
    "sql": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*) > 1",
    "linq": "context.Players.Join(context.Schools, T1 => T1.SchoolId, T2 => T2.SchoolId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SchoolId }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.Location }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0e933dea3b78ab89971bbfa4652656aee5436449b91de04ba20f4b15afedc583",
    "sql": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Players.Join(context.Schools, T1 => T1.SchoolId, T2 => T2.SchoolId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SchoolId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Denomination }).Take(1).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c7b661c1e0291315eb83e71938f034422e47d464d8a08e56b061fc0cb92ae557",
    "sql": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
    "linq": "context.Schools.Join(context.SchoolDetails, T1 => T1.SchoolId, T2 => T2.SchoolId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Location, row.T2.Nickname }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "628ff98ba11ca62af7292466bf2a95bcfe76cb823df942dc2947a0cc7fcb68dd",
    "sql": "SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination",
    "linq": "context.Schools.GroupBy(row => new { row.Denomination }).Select(group => new { group.Key.Denomination, Count = group.Count() }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "386dca83edc9e2ea6e00d1c9113bc0504761afc04f1fd350112883fbc2f980ca",
    "sql": "SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC",
    "linq": "context.Schools.GroupBy(row => new { row.Denomination }).Select(group => new { group.Key.Denomination, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a8a168d19151fe7143e45b2aa8ce5fb8f6c901e2497374fed53d74f3d36f8b15",
    "sql": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
    "linq": "context.Schools.OrderByDescending(row => row.Enrollment).Select(row => new { row.SchoolColors }).Take(1).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "68ddd641c2f233bf7dfc834c5513dc00db0b9f30dd8ffaa127e4609937d5352a",
    "sql": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)",
    "linq": "context.Schools.Where(row => !context.Players.Select(row => row.SchoolId).Contains(row.SchoolId)).Select(row => new { row.Location }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9f4a0b50bad7ff581d93abf517688b6b9f3b8176b16487a044055af3c4e26c14",
    "sql": "SELECT Denomination FROM school WHERE Founded < 1890 INTERSECT SELECT Denomination FROM school WHERE Founded > 1900",
    "linq": "context.Schools.Where(row => row.Founded < 1890).Select(row => row.Denomination).Intersect(context.Schools.Where(row => row.Founded > 1900).Select(row => row.Denomination)).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c4b45c161e32701ab5fa8f8b803a8aa0b6758fd74afa0b843b1c1e8aa7dee7c7",
    "sql": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
    "linq": "context.SchoolDetails.Where(row => row.Division != \"Division 1\").Select(row => new { row.Nickname }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b973083bda71edcfaacdb034ad713795a779c2f681f02f1213789645bfecf850",
    "sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*) > 1",
    "linq": "context.Schools.GroupBy(row => new { row.Denomination }).Where(group => group.Count() > 1).Select(group => new { group.Key.Denomination }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "08e0b5d5e4d32a3b57abb10a16e7771c3028a24e2b4eeb9167d4a92139bf5d08",
    "sql": "SELECT count(*) FROM Aircraft",
    "linq": "context.Aircraft.Count();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9a31e5e6ab28601a46574f4e1a56b0cbc98385264233fdcf30fd69236cb7a6b4",
    "sql": "SELECT name , distance FROM Aircraft",
    "linq": "context.Aircraft.Select(row => new { row.Name, row.Distance }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b7b7b4e750f37dee04323f9dfbb7b1f1482c019296ebcef2240638797c4b9cfc",
    "sql": "SELECT aid FROM Aircraft WHERE distance > 1000",
    "linq": "context.Aircraft.Where(row => row.Distance > 1000).Select(row => new { row.Aid }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8722ebbfc06a795cbab2b28297e49e522a6e60b6f0a05e24032addc89d097c92",
    "sql": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
    "linq": "context.Aircraft.Where(row => row.Distance >= 1000 && row.Distance <= 5000).Count();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "26ff1b0cebcc66e6689ba10eb423db6f55828022c4de2fd9d4fe7a63a61e0705",
    "sql": "SELECT name , distance FROM Aircraft WHERE aid = 12",
    "linq": "context.Aircraft.Where(row => row.Aid == 12).Select(row => new { row.Name, row.Distance }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f264111ce047377a509c2460b219ea43e436607689a23f255f51f710f8da1974",
    "sql": "SELECT min(distance) , avg(distance) , max(distance) FROM Aircraft",
    "linq": "context.Aircraft.GroupBy(row => 1).Select(group => new { MinDistance = group.Select(row => row.Distance).Min(), AverageDistance = group.Select(row => row.Distance).Average(), MaxDistance = group.Select(row => row.Distance).Max() }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1fddef03fcb1d38b17a2a28786ff871d2dc80127501780cc74de8ee05acaf1fe",
    "sql": "SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1",
    "linq": "context.Aircraft.OrderByDescending(row => row.Distance).Select(row => new { row.Aid, row.Name }).Take(1).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "80d3e590224899051dda5a2d1cf1216946bb139a7db3c8708736f79debc1d850",
    "sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
    "linq": "context.Aircraft.OrderBy(row => row.Distance).Select(row => new { row.Name }).Take(3).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "09dd547d66a94bb71d4a2953ae8523f2bfee8c21198b85a2865fdc3bf45d2e77",
    "sql": "SELECT name FROM Aircraft WHERE distance > (SELECT avg(distance) FROM Aircraft)",
    "linq": "context.Aircraft.Where(row => row.Distance > context.Aircraft.Select(row => row.Distance).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ba79bf406dcce2b83f802209501cdfb6fdbe039b2379ac6fbeccbfc05b0f592b",
    "sql": "SELECT count(*) FROM Employee",
    "linq": "context.Employees.Count();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c414d7e4e2dcee077b410ec85869948b620ad512dc58bd2931f5e9368e330154",
    "sql": "SELECT name , salary FROM Employee ORDER BY salary",
    "linq": "context.Employees.OrderBy(row => row.Salary).Select(row => new { row.Name, row.Salary }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4b99a835c836671d0c7cc615ea0b41d3397c41a68b8ea086526fda83fad8584d",
    "sql": "SELECT eid FROM Employee WHERE salary > 100000",
    "linq": "context.Employees.Where(row => row.Salary > 100000).Select(row => new { row.Eid }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e21be9bb15628f5315c39ba2db6c57f4be4344be53c4b56b9ce1918dcd6d6367",
    "sql": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000",
    "linq": "context.Employees.Where(row => row.Salary >= 100000 && row.Salary <= 200000).Count();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ab70e702a2f9a3a1dd0ae79b96afe2fb2378f6b6087dfe6ab79088f4711c92dd",
    "sql": "SELECT name , salary FROM Employee WHERE eid = 242518965",
    "linq": "context.Employees.Where(row => row.Eid == 242518965).Select(row => new { row.Name, row.Salary }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dc30bf4ec36b9e5c77ea9f6c6fb7d50d659fbc8f31b6255bbb92ae1de32487ad",
    "sql": "SELECT avg(salary) , max(salary) FROM Employee",
    "linq": "context.Employees.GroupBy(row => 1).Select(group => new { AverageSalary = group.Select(row => row.Salary).Average(), MaxSalary = group.Select(row => row.Salary).Max() }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f982df520da585eb88283cfa5b10e438399505e1213d5d6e5171a0a279e32cc6",
    "sql": "SELECT eid , name FROM Employee ORDER BY salary DESC LIMIT 1",
    "linq": "context.Employees.OrderByDescending(row => row.Salary).Select(row => new { row.Eid, row.Name }).Take(1).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "518344f9ba3e7c1ed7086ddf0eabb20cb6dd74008beec0ddce9e138c2abef1b2",
    "sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
    "linq": "context.Employees.OrderBy(row => row.Salary).Select(row => new { row.Name }).Take(3).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f980bd03487da99ba6c554c09aa7caebed4edc0283c1c96edb95038d2e9c6f4e",
    "sql": "SELECT name FROM Employee WHERE salary > (SELECT avg(salary) FROM Employee)",
    "linq": "context.Employees.Where(row => row.Salary > context.Employees.Select(row => row.Salary).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4a1f6d0902bb372b9ee12620515820ad7c7423bc76428308aaa4c46cec9ccbef",
    "sql": "SELECT eid , salary FROM Employee WHERE name = 'Mark Young'",
    "linq": "context.Employees.Where(row => row.Name == \"Mark Young\").Select(row => new { row.Eid, row.Salary }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c828a42c7f1e74d8205e46c6281b316a87db98a06c73e71a8ddc3c1986147093",
    "sql": "SELECT count(*) FROM Flight",
    "linq": "context.Flights.Count();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "75ecf765965dcc41686459094b1d14ae296e84266cb9d88c1ef3ead238e51877",
    "sql": "SELECT flno , origin , destination FROM Flight ORDER BY origin",
    "linq": "context.Flights.OrderBy(row => row.Origin).Select(row => new { row.Flno, row.Origin, row.Destination }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "181cef14e5f016c37771b91b73b8c9ce6398d621cca8aa9df36a2a3b83521c1e",
    "sql": "SELECT flno FROM Flight WHERE origin = \"Los Angeles\"",
    "linq": "context.Flights.Where(row => row.Origin == \"Los Angeles\").Select(row => new { row.Flno }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6e98519f8aca2f28dc12397a07d3a5c4d61902a35339aef0fc60c1f972dc9b0f",
    "sql": "SELECT origin FROM Flight WHERE destination = \"Honolulu\"",
    "linq": "context.Flights.Where(row => row.Destination == \"Honolulu\").Select(row => new { row.Origin }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4f9e7d27ae57b6c643ef140c0379512029804fc0b2237e38eb7f1c9f134475fd",
    "sql": "SELECT departure_date , arrival_date FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
    "linq": "context.Flights.Where(row => row.Origin == \"Los Angeles\" && row.Destination == \"Honolulu\").Select(row => new { row.DepartureDate, row.ArrivalDate }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4998f9df5f9b3c7f8cf2706699b004f48a8e456038ee7c926588e57f2cfca23f",
    "sql": "SELECT flno FROM Flight WHERE distance > 2000",
    "linq": "context.Flights.Where(row => row.Distance > 2000).Select(row => new { row.Flno }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "af5f28c2561b7d893e27ea3408810d24fc60998427433b84a7c306fbfc72cd47",
    "sql": "SELECT avg(price) FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
    "linq": "context.Flights.Where(row => row.Origin == \"Los Angeles\" && row.Destination == \"Honolulu\").Select(row => (double) row.Price).Average();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "69a121056b268b405198a89fbd0643c0b811f679cc37a968c517fc14bb461c71",
    "sql": "SELECT origin , destination FROM Flight WHERE price > 300",
    "linq": "context.Flights.Where(row => row.Price > 300).Select(row => new { row.Origin, row.Destination }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "098da6fbdb39e35d9f4598eaafca1038a715db4abec60046f96f6b0e8efb4b87",
    "sql": "SELECT flno , distance FROM Flight ORDER BY price DESC LIMIT 1",
    "linq": "context.Flights.OrderByDescending(row => row.Price).Select(row => new { row.Flno, row.Distance }).Take(1).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3626b257a6b6adce994efe0716527d311d151799babaa2f4131bc93609be40cb",
    "sql": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
    "linq": "context.Flights.OrderBy(row => row.Distance).Select(row => new { row.Flno }).Take(3).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dd964aba88c752c629c4fe01ec10dde6932874a0e6275cad9db5da854bacdc77",
    "sql": "SELECT avg(distance) , avg(price) FROM Flight WHERE origin = \"Los Angeles\"",
    "linq": "context.Flights.Where(row => row.Origin == \"Los Angeles\").GroupBy(row => 1).Select(group => new { AverageDistance = group.Select(row => row.Distance).Average(), AveragePrice = group.Select(row => row.Price).Average() }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "101dc98813ffc8de68271ce8260ed2d68e1716b2190f3f7ee3af29f6546f7866",
    "sql": "SELECT origin , count(*) FROM Flight GROUP BY origin",
    "linq": "context.Flights.GroupBy(row => new { row.Origin }).Select(group => new { group.Key.Origin, Count = group.Count() }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d9d6889269926f56b1bbeb6ec9e4c73032c7716c1ff1402a7ef8d9c7734ee3a3",
    "sql": "SELECT destination , count(*) FROM Flight GROUP BY destination",
    "linq": "context.Flights.GroupBy(row => new { row.Destination }).Select(group => new { group.Key.Destination, Count = group.Count() }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "094923db2a8d51a22d341bbf85a259a89910368049e54fe50c4f9fa89442ac07",
    "sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Flights.GroupBy(row => new { row.Origin }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Origin }).Take(1).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bad4918520567b2259ce8504371d6cecd7c76e6b49ab764db133371864642a7a",
    "sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
    "linq": "context.Flights.GroupBy(row => new { row.Destination }).OrderBy(group => group.Count()).Select(group => new { group.Key.Destination }).Take(1).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cd4cfc8e5b76cef7ef4e84820f1582a2ae42a13264fb781cf840347840b27e50",
    "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99",
    "linq": "context.Flights.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Flno == 99).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "45147de9d4cf2ec49e2c52c74817026a48eac877315d439bc76ddbf333cfe7fe",
    "sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = \"Airbus A340-300\"",
    "linq": "context.Flights.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Airbus A340-300\").Select(row => new { row.T1.Flno }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c8b598140871a291f5c4506801559ae21770c60dc24dffe649ff57f968c725d7",
    "sql": "SELECT T2.name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid",
    "linq": "context.Flights.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Aid }).Select(group => new { group.First().T2.Name, Count = group.Count() }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a59a65e24895a3ec730b111d0850789cf3ef8fde04cf30221a01572cf119bf2a",
    "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count(*) >= 2",
    "linq": "context.Flights.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Aid }).Where(group => group.Count() >= 2).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ae5f1e65fbeb047e860af4e7e83d85c6e794802acebc75a17860910edd631299",
    "sql": "SELECT count(DISTINCT eid) FROM Certificate",
    "linq": "context.Certificate.Select(row => row.Eid).Distinct().Count();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.41",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "79ff0363ce1630309958a11eb81faffdfbe68c6e19033fb80d7bc078dc89957f",
    "sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
    "linq": "context.Employees.Select(row => row.Eid).Except(context.Certificate.Select(row => row.Eid)).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,68): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.36",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ecb00f7bcea943f82e8e2d979bfd1d8918cd5ad937d840c72c379021b65f000d",
    "sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = \"John Williams\"",
    "linq": "context.Employees.Join(context.Certificate, T1 => T1.Eid, T2 => T2.Eid, (T1, T2) => new { T1, T2 }).Join(context.Aircraft, joined => joined.T2.Aid, T3 => T3.Aid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Williams\").Select(row => new { row.T3.Name }).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.35",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5d27285591cc4c58a71d8de18cd8f52710b80829e86589ed4837eed1c1ca9e0d",
    "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\"",
    "linq": "context.Employees.Join(context.Certificate, T1 => T1.Eid, T2 => T2.Eid, (T1, T2) => new { T1, T2 }).Join(context.Aircraft, joined => joined.T2.Aid, T3 => T3.Aid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Boeing 737-800\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.44",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "49085baef1a4dfd853e61dddfbc296e642f076613230aa2664757795dd0f68a4",
    "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Airbus A340-300\"",
    "linq": "context.Employees.Join(context.Certificate, T1 => T1.Eid, T2 => T2.Eid, (T1, T2) => new { T1, T2 }).Join(context.Aircraft, joined => joined.T2.Aid, T3 => T3.Aid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Boeing 737-800\").Select(row => row.T1.Name).Intersect(context.Employees.Join(context.Certificate, T1 => T1.Eid, T2 => T2.Eid, (T1, T2) => new { T1, T2 }).Join(context.Aircraft, joined => joined.T2.Aid, T3 => T3.Aid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Airbus A340-300\").Select(row => row.T1.Name)).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,338): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.25",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "34a898a26bbbeb81e2d069aad904888f3a1b3751a34dc3dd264b661a6c70b212",
    "sql": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\"",
    "linq": "context.Employees.Select(row => row.Name).Except(context.Employees.Join(context.Certificate, T1 => T1.Eid, T2 => T2.Eid, (T1, T2) => new { T1, T2 }).Join(context.Aircraft, joined => joined.T2.Aid, T3 => T3.Aid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Boeing 737-800\").Select(row => row.T1.Name)).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,92): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.24",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "62595da86ce5851a2641e119c797a5738680c90e550084032b7ac91ac432f336",
    "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Certificate.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Aid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name }).Take(1).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a3ca9321dcd93d15b7c9a8048e5ce172449e752744522600249d3202f76832fc",
    "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY count(*) >= 5",
    "linq": "context.Certificate.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Distance > 5000).GroupBy(row => new { row.T1.Aid }).OrderBy(group => row.Count() >= 5).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,200): error CS0103: The name 'row' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.43",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e7314482cc5c2dac94fc45d3b05315d0e1fe6a25a44b44bec216032dca530c26",
    "sql": "SELECT T1.name , T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Employees.Join(context.Certificate, T1 => T1.Eid, T2 => T2.Eid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Eid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name, group.First().T1.Salary }).Take(1).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.32",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2d5a24055fa2ce152a518207219d8d34ec70df8ae1a3f2a46dd1813d21b49f2a",
    "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Employees.Join(context.Certificate, T1 => T1.Eid, T2 => T2.Eid, (T1, T2) => new { T1, T2 }).Join(context.Aircraft, joined => joined.T2.Aid, T3 => T3.Aid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Distance > 5000).GroupBy(row => new { row.T1.Eid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name }).Take(1).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.21",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8e99e5f9ce0a8efbdfd1cf57c6591c77d63030b3fbe279ef3de23d9742668f09",
    "sql": "SELECT song_name , releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
    "linq": "context.Songs.OrderByDescending(row => row.Releasedate).Select(row => new { row.SongName, row.Releasedate }).Take(1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8d4e0019be8f86604525e400e8452904f351ab297d7fe5e6a5950018f55a481b",
    "sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
    "linq": "context.Files.OrderByDescending(row => row.Duration).Select(row => new { row.FId }).Take(1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8176dc3411b263faca7698ddba55163fec99db45c717683cd8c557cd3eb2ad10",
    "sql": "SELECT song_name FROM song WHERE languages = \"english\"",
    "linq": "context.Songs.Where(row => row.Languages == \"english\").Select(row => new { row.SongName }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4b9eda0189df6b9b2f5493453b99a5ab50a9f6203f51eff2319399d2271bc229",
    "sql": "SELECT f_id FROM files WHERE formats = \"mp3\"",
    "linq": "context.Files.Where(row => row.Formats == \"mp3\").Select(row => new { row.FId }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9f9986be979975919d5dc5eca36d2d01c283f5e7167e2d4de01549f2e95f3377",
    "sql": "SELECT DISTINCT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 9",
    "linq": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Rating > 9).Select(row => new { row.T1.ArtistName, row.T1.Country }).Distinct().ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "142167c364b03a2cb3901c6889a9e838bc56b8620bf9b1e84884f7918b44c737",
    "sql": "SELECT DISTINCT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 800",
    "linq": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Resolution < 800).Select(row => new { row.T1.FileSize, row.T1.Formats }).Distinct().ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f733db065a4e59882f74cd362654c675d1b21d92b0e8f1340e979bfe83baab04",
    "sql": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id ORDER BY T2.duration LIMIT 1",
    "linq": "context.Songs.Join(context.Files, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Duration).Select(row => new { row.T1.ArtistName }).Take(1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ad95b2cbd95c553cedf6b93264a1dc607f7312321fd30d6b82417082544be19f",
    "sql": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
    "linq": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Rating).Select(row => new { row.T1.ArtistName, row.T1.Country }).Take(3).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "417d78c020510e3dd3700df364a972474eeeca0b3ff78072c1c47f9dadcd8e50",
    "sql": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
    "linq": "context.Files.Where(row => EF.Functions.Like(row.Duration, \"4:%\")).Count();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7a30b22958b10d7c6b02038b9cb46cdea4a8056af346f9018733f9bb32bf057e",
    "sql": "SELECT count(*) FROM artist WHERE country = \"Bangladesh\"",
    "linq": "context.Artists.Where(row => row.Country == \"Bangladesh\").Count();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "66057bd00733ae4a08e47a4034b3cd9783bf9997117119c310cb27546672ba35",
    "sql": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = \"Female\"",
    "linq": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Gender == \"Female\").Select(row => row.T2.Rating).Average();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f670b003218b5526f2481ebaf60e598f93b079abb4b5d0629e861a9e5559dd8",
    "sql": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1",
    "linq": "context.Files.GroupBy(row => new { row.Formats }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Formats }).Take(1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fb1d69bfc835fd9feb6529c6b9831149117ac585d8b81b18936706c49a15e909",
    "sql": "SELECT artist_name FROM artist WHERE country = \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages = \"english\"",
    "linq": "context.Artists.Where(row => row.Country == \"UK\").Select(row => row.ArtistName).Intersect(context.Songs.Where(row => row.Languages == \"english\").Select(row => row.ArtistName)).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f23e67465ca8515d167286195b4fa0b06dc2ea66510cd06341e5a899a085ebee",
    "sql": "SELECT f_id FROM files WHERE formats = \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution < 1000",
    "linq": "context.Files.Where(row => row.Formats == \"mp4\").Select(row => row.FId).Intersect(context.Songs.Where(row => row.Resolution < 1000).Where(row => row.FId.HasValue).Select(row => FId = row.FId.Value)).ToList();",
    "db_name": "music_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,189): error CS0103: The name 'FId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "709f28dc3fd4e3186e853df59294fe21d65f7da5d8066e48b0ade5229f21104e",
    "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = \"Female\" AND T2.languages = \"bangla\"",
    "linq": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Gender == \"Female\" && row.T2.Languages == \"bangla\").Select(row => new { row.T1.Country }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8b347a29d1acc3966d2262470d384c133c5adf71fed82dd69c94ea7d1f5798cf",
    "sql": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = \"mp3\" AND T2.resolution < 800",
    "linq": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Formats == \"mp3\" && row.T2.Resolution < 800).Select(row => row.T1.Duration).ToList().Select(value => double.Parse(value)).Average();",
    "db_name": "music_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "702ddafa6401caf9309b8eb82376414df8252702ef0e19eb9db717f66aae4727",
    "sql": "SELECT count(*) , gender FROM artist GROUP BY gender",
    "linq": "context.Artists.GroupBy(row => new { row.Gender }).Select(group => new { Count = group.Count(), group.Key.Gender }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f3a1d11695868c3dbcf54fab4f03d528165a1be7a2bb4f1723b29441c735f1cc",
    "sql": "SELECT avg(rating) , languages FROM song GROUP BY languages",
    "linq": "context.Songs.GroupBy(row => new { row.Languages }).Select(group => new { AverageRating = group.Select(row => row.Rating).Average(), group.Key.Languages }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "57c5def5086030abd004bc068f1593ac7bea1d8aa0be70e30bb19d9f1670cd50",
    "sql": "SELECT T1.gender , T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.resolution LIMIT 1",
    "linq": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Resolution).Select(row => new { row.T1.Gender, row.T1.ArtistName }).Take(1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e0e5473b2d2a9a58a3a62c9f4f20671569dfd6f2e51388277c543050835b3cd2",
    "sql": "SELECT count(*) , formats FROM files GROUP BY formats",
    "linq": "context.Files.GroupBy(row => new { row.Formats }).Select(group => new { Count = group.Count(), group.Key.Formats }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dba2e6a1f28ff42b211c6e235228b4666b66be2c80573d8d33224e2c88909687",
    "sql": "SELECT DISTINCT song_name FROM song WHERE resolution > (SELECT min(resolution) FROM song WHERE languages = \"english\")",
    "linq": "context.Songs.Where(row => row.Resolution > context.Songs.Where(row => row.Languages == \"english\").Select(row => row.Resolution).Min()).Select(row => new { row.SongName }).Distinct().ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "50be8ff4f81ad161e0f715e81c6d45ae9b4a52f10046ee287a24d65275c1b0ef",
    "sql": "SELECT song_name FROM song WHERE rating < (SELECT max(rating) FROM song WHERE genre_is = \"blues\")",
    "linq": "context.Songs.Where(row => row.Rating < context.Songs.Where(row => row.GenreIs == \"blues\").Select(row => row.Rating).Max()).Select(row => new { row.SongName }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6fe501d685612b9c08c833d0e9c827b305db6759779be42dba3c60f7fceaab7f",
    "sql": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
    "linq": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.SongName, \"%love%\")).Select(row => new { row.T1.ArtistName, row.T1.Country }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "66f6ce639339ddb6314e67f50da2a59947d038ef199b83d5abcbf853a2a7d3ad",
    "sql": "SELECT T1.artist_name , T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
    "linq": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.Releasedate, \"%Mar%\")).Select(row => new { row.T1.ArtistName, row.T1.Gender }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "24cb08468517834936a3a4aeace4dd66cbaac8860e26759b0495a861eb826c7b",
    "sql": "SELECT g_name , rating FROM genre ORDER BY g_name",
    "linq": "context.Genres.OrderBy(row => row.GName).Select(row => new { row.GName, row.Rating }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a21c643b010fd97267e850b15e3986ef22acacd804c6e7ba53325caff480fb5e",
    "sql": "SELECT song_name FROM song ORDER BY resolution",
    "linq": "context.Songs.OrderBy(row => row.Resolution).Select(row => new { row.SongName }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f4b619299b7825c1e8d13bb9de07f9341d098bc1589abf6b34e7de94c8d3aa63",
    "sql": "SELECT f_id FROM files WHERE formats = \"mp4\" UNION SELECT f_id FROM song WHERE resolution > 720",
    "linq": "context.Files.Where(row => row.Formats == \"mp4\").Select(row => row.FId).Union(context.Songs.Where(row => row.Resolution > 720).Where(row => row.FId.HasValue).Select(row => FId = row.FId.Value)).ToList();",
    "db_name": "music_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,184): error CS0103: The name 'FId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.41",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7e7108e8ae090330c6a128a30f305b9df889e8f8e28c5636e27ca93ba5560acd",
    "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages = \"english\"",
    "linq": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.Duration, \"4:%\")).Select(row => row.T2.SongName).Union(context.Songs.Where(row => row.Languages == \"english\").Select(row => row.SongName)).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4cf4151ddf11f6cc87aa14c6b649f497f47101fb56aa9101228b881fed058e0e",
    "sql": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Songs.GroupBy(row => new { row.Languages }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Languages }).Take(1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5290c946afbe1fd21ba7282657119b68dc7807f1be0196516c5d10c032994f84",
    "sql": "SELECT artist_name FROM song WHERE resolution > 500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Songs.Where(row => row.Resolution > 500).GroupBy(row => new { row.Languages }).OrderByDescending(group => group.Count()).Select(group => new { group.First().ArtistName }).Take(1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "05f2fadd7efa95e00574e4cd1fa5b34174131543ab802e735e6f651db01591ea",
    "sql": "SELECT artist_name FROM artist WHERE country = \"UK\" AND gender = \"Male\"",
    "linq": "context.Artists.Where(row => row.Country == \"UK\" && row.Gender == \"Male\").Select(row => new { row.ArtistName }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "05574102d43a54819d185c0390ad7cd3861cb98b895994bbcc62e9cbf94aa7a2",
    "sql": "SELECT song_name FROM song WHERE genre_is = \"modern\" OR languages = \"english\"",
    "linq": "context.Songs.Where(row => row.GenreIs == \"modern\" || row.Languages == \"english\").Select(row => new { row.SongName }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "40331961a2e1fa458f31dec6eca581eb6841d99078b58ea0441f9732e3319aa1",
    "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution < 1000",
    "linq": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Formats == \"mp3\").Select(row => row.T2.SongName).Intersect(context.Songs.Where(row => row.Resolution < 1000).Select(row => row.SongName)).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e934f5b44dbd13863938fa7f2d8534ded1e785ca43a1e10a5ba62dc158e71dff",
    "sql": "SELECT artist_name FROM artist WHERE country = \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = \"english\"",
    "linq": "context.Artists.Where(row => row.Country == \"UK\").Select(row => row.ArtistName).Intersect(context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Languages == \"english\").Select(row => row.T1.ArtistName)).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "22d734e9a7565bafbb6ac9920425dc485ae6b5694b7fc85090d1e848527452e0",
    "sql": "SELECT avg(rating) , avg(resolution) FROM song WHERE languages = \"bangla\"",
    "linq": "context.Songs.Where(row => row.Languages == \"bangla\").GroupBy(row => 1).Select(group => new { AverageRating = group.Select(row => row.Rating).Average(), AverageResolution = group.Select(row => row.Resolution).Average() }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f6de4150a5f6045cb7265ea2223628e794b3f2c5a54692a17fce894e236c8a92",
    "sql": "SELECT max(T2.resolution) , min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE \"3:%\"",
    "linq": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.Duration, \"3:%\")).GroupBy(row => 1).Select(group => new { MaxResolutionT2 = group.Select(row => row.T2.Resolution).Max(), MinResolutionT2 = group.Select(row => row.T2.Resolution).Min() }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f95ecad6dd9be596eba1c5e7331155eed967ae203101329806c656665b0ae769",
    "sql": "SELECT max(T1.duration) , max(T2.resolution) , T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
    "linq": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Languages }).OrderBy(group => group.First().T2.Languages).Select(group => new { MaxDuration = group.Select(row => row.T1.Duration).Max(), MaxResolution = group.Select(row => row.T2.Resolution).Max(), group.Key.Languages }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ecb4acc0e509155004e32ecd555f0fe33412b8593a2a12f1b34ae19d5b4a809b",
    "sql": "SELECT min(T1.duration) , min(T2.rating) , T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
    "linq": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.GenreIs }).OrderBy(group => group.First().T2.GenreIs).Select(group => new { MinDuration = group.Select(row => row.T1.Duration).Min(), MinRating = group.Select(row => row.T2.Rating).Min(), group.Key.GenreIs }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a0438afb1f393cdd20ae15013a242917ce9484b484fed25672c4267adb716a23",
    "sql": "SELECT T1.artist_name , count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = \"english\" GROUP BY T2.artist_name HAVING count(*) >= 1",
    "linq": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Languages == \"english\").GroupBy(row => new { row.T2.ArtistName }).Select(group => new { group.First().T1.ArtistName, Count = group.Count() }).Where(group => group.Count >= 1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d79717b8f6a52624d26402c8d693d7092c32f8199f009a1577132c5318b4ae3f",
    "sql": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.resolution > 900 GROUP BY T2.artist_name HAVING count(*) >= 1",
    "linq": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Resolution > 900).GroupBy(row => new { row.T2.ArtistName }).Where(group => group.Count() >= 1).Select(group => new { group.First().T1.ArtistName, group.First().T1.Country }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a2dc1d9367aa026fb96ede260127812f58ff138afea3277615eaea3a793c81a1",
    "sql": "SELECT T1.artist_name , count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
    "linq": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ArtistName }).Select(group => new { group.First().T1.ArtistName, Count = group.Count() }).OrderByDescending(group => group.Count).Take(3).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "79b13e9cab3962e4e164a88a7abed10b30565ddb86335c6a430d02fc15c4e091",
    "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1",
    "linq": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ArtistName }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.Country }).Take(1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5a72f4fa7d9430812da188c351cef2ea305f26129b4ea1582204bb2ab28dce1e",
    "sql": "SELECT song_name FROM song WHERE rating < (SELECT min(rating) FROM song WHERE languages = 'english')",
    "linq": "context.Songs.Where(row => row.Rating < context.Songs.Where(row => row.Languages == \"english\").Select(row => row.Rating).Min()).Select(row => new { row.SongName }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d4f0d30a7e0aef6acf8d535c2b4d0f4fcd76c2cdd7c254c07fbbb1228bc66b38",
    "sql": "SELECT f_id FROM song WHERE resolution > (SELECT max(resolution) FROM song WHERE rating < 8)",
    "linq": "context.Songs.Where(row => row.Resolution > context.Songs.Where(row => row.Rating < 8).Select(row => row.Resolution).Max()).Select(row => new { row.FId }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2bac434891e62305135697b126e8e301e5b0c3cdbe26238f5a8d6b54f94ce3c4",
    "sql": "SELECT f_id FROM song WHERE resolution > (SELECT avg(resolution) FROM song WHERE genre_is = \"modern\")",
    "linq": "context.Songs.Where(row => row.Resolution > context.Songs.Where(row => row.GenreIs == \"modern\").Select(row => row.Resolution).Average()).Select(row => new { row.FId }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bbd719630a012734fa8899792abc1dc4b07a086a288a2cc8a4ea397f7c1b516e",
    "sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
    "linq": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Languages == \"bangla\").GroupBy(row => new { row.T2.ArtistName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ArtistName }).Take(3).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "124716ebfb3bb174ed6084c349e4c05c7311a98ee2d498bf50de5d0d8ac1f03e",
    "sql": "SELECT f_id , genre_is , artist_name FROM song WHERE languages = \"english\" ORDER BY rating",
    "linq": "context.Songs.Where(row => row.Languages == \"english\").OrderBy(row => row.Rating).Select(row => new { row.FId, row.GenreIs, row.ArtistName }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "60c1a8535e44e141c60a81a2e20723ba5b405530ee2f4e74b530aadce016129b",
    "sql": "SELECT T1.duration , T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.genre_is = \"pop\" ORDER BY T2.song_name",
    "linq": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.GenreIs == \"pop\").OrderBy(row => row.T2.SongName).Select(row => new { row.T1.Duration, row.T1.FileSize, row.T1.Formats }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ab12bca39e19decca5acfb707c8e608c4548f3d1cc9b27c4ac9cdbcb3cb366d7",
    "sql": "SELECT DISTINCT artist_name FROM song WHERE languages = \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 8",
    "linq": "context.Songs.Where(row => row.Languages == \"english\").Select(row => row.ArtistName).Distinct().Except(context.Songs.Where(row => row.Rating > 8).Select(row => row.ArtistName).Distinct()).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7670c63e876139a3ec0f011ba4427616d223e084c699d0cca4b4b0230fa9618e",
    "sql": "SELECT DISTINCT artist_name FROM artist WHERE country = \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 7",
    "linq": "context.Artists.Where(row => row.Country == \"Bangladesh\").Select(row => row.ArtistName).Distinct().Except(context.Songs.Where(row => row.Rating > 7).Select(row => row.ArtistName).Distinct()).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d7a4f1a5786af8a62c7a26acebba93302d134727f6d15f8cdf794be0284764d5",
    "sql": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id WHERE T2.sent_date < '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date > '1989-03-16 18:27:16'",
    "linq": "context.Grants.Join(context.Documents, T1 => T1.GrantId, T2 => T2.GrantId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SentDate < \"1986-08-26 20:49:27\").Select(row => row.T1.GrantAmount).Intersect(context.Grants.Where(row => row.GrantEndDate > \"1989-03-16 18:27:16\").Select(row => row.GrantAmount)).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,241): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.39",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c036674e280f2f3fba3305feb5de3487d180ae661dc10155159dc51e31f32917",
    "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Patent'",
    "linq": "context.Projects.Join(context.ProjectOutcomes, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OutcomeCode == \"Paper\").Select(row => row.T1.ProjectDetails).Intersect(context.Projects.Join(context.ProjectOutcomes, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OutcomeCode == \"Patent\").Select(row => row.T1.ProjectDetails)).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d4943e93cdb24c50d10e9952398f259fdd6beed96e3e9f212197fed9b1c0891d",
    "sql": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type = T3.organisation_type WHERE T3.organisation_type_description = 'Research'",
    "linq": "context.Grants.Join(context.Organisations, T1 => T1.OrganisationId, T2 => T2.OrganisationId, (T1, T2) => new { T1, T2 }).Join(context.OrganisationTypes, joined => joined.T2.OrganisationType, T3 => T3.OrganisationType1, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.OrganisationTypeDescription == \"Research\").Select(row => (double) row.T1.GrantAmount).Sum();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8530633f6d3518bdfe913b7640007db2390839c4b50f25ca61e68c2abe29dd34",
    "sql": "SELECT date_from , date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from , date_to FROM Project_Staff WHERE role_code = 'leader'",
    "linq": "context.ProjectStaffs.Where(row => context.ProjectStaffs.GroupBy(row => new { row.ProjectId }).OrderByDescending(group => group.Count()).Select(group => group.Key.ProjectId).Take(1).Contains(row.ProjectId)).Select(row => new { row.DateFrom, row.DateTo }).Union(context.ProjectStaffs.Where(row => row.RoleCode == \"leader\").Select(row => new { row.DateFrom, row.DateTo })).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5af373f6e1cc927c5991ab577ea4676535d231d6ce2c92472a7299d9b301c9c5",
    "sql": "SELECT T2.organisation_id , T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount) > 6000",
    "linq": "context.Grants.Join(context.Organisations, T1 => T1.OrganisationId, T2 => T2.OrganisationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.OrganisationId }).Where(group => group.Sum(row => row.T1.GrantAmount) > 6000).Select(group => new { group.Key.OrganisationId, group.First().T2.OrganisationDetails }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5710f8b19284e2185614575c6c73570191f627f8037b17677e5bd71401cc6772",
    "sql": "SELECT T1.organisation_type , T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Organisations.Join(context.ResearchStaffs, T1 => T1.OrganisationId, T2 => T2.EmployerOrganisationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.OrganisationId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.OrganisationType, group.Key.OrganisationId }).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fa052e82db8d0a62e9e71fc15b07c265ccaa380b880502ccc88392d21c5f1df6",
    "sql": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Organisations.Join(context.ResearchStaffs, T1 => T1.OrganisationId, T2 => T2.EmployerOrganisationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.OrganisationType }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.OrganisationType }).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "53ed273ad29cadfe5fbc70061dc9a07d7dfe8def4e14113391bda1ccfadd673d",
    "sql": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id = T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type = T4.organisation_type WHERE T2.grant_amount > 5000 AND T4.organisation_type_description = 'Research'",
    "linq": "context.Documents.Join(context.Grants, T1 => T1.GrantId, T2 => T2.GrantId, (T1, T2) => new { T1, T2 }).Join(context.Organisations, joined => joined.T2.OrganisationId, T3 => T3.OrganisationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.OrganisationTypes, joined => joined.T3.OrganisationType, T4 => T4.OrganisationType1, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T2.GrantAmount > 5000 && row.T4.OrganisationTypeDescription == \"Research\").Select(row => new { row.T1.SentDate }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d9ad5358cdc7fcf6041e7d834539ee062798a06a48f3c5b029963800f2ff90a8",
    "sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T1.grant_id = T3.grant_id WHERE T2.document_description = 'Regular' OR T3.grant_amount > 100",
    "linq": "context.Documents.Join(context.DocumentTypes, T1 => T1.DocumentTypeCode, T2 => T2.DocumentTypeCode, (T1, T2) => new { T1, T2 }).Join(context.Grants, joined => joined.T1.GrantId, T3 => T3.GrantId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.DocumentDescription == \"Regular\" || row.T3.GrantAmount > 100).Select(row => new { row.T1.ResponseReceivedDate }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cd397e77613c14c7467900016a6b065546997da9510da2e60176739a2ab3758d",
    "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code = 'researcher' )",
    "linq": "context.Projects.Where(row => !context.ProjectStaffs.Where(row => row.RoleCode == \"researcher\").Select(row => row.ProjectId).Contains(row.ProjectId)).Select(row => new { row.ProjectDetails }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c42221c1e751bfaa5380270e363a8f999c0a7366ab96b75aecd9340ce97a9513",
    "sql": "SELECT T1.task_details , T1.task_id , T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'omnis' UNION SELECT T1.task_details , T1.task_id , T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.project_id HAVING count(*) > 2",
    "linq": "context.Tasks.Join(context.Projects, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ProjectDetails == \"omnis\").Select(row => new { row.T1.TaskDetails, row.T1.TaskId, row.T2.ProjectId }).Union(context.Tasks.Join(context.Projects, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Join(context.ProjectOutcomes, joined => joined.T2.ProjectId, T3 => T3.ProjectId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T2.ProjectId }).Where(group => group.Count() > 2).Select(group => new { group.First().T1.TaskDetails, group.First().T1.TaskId, group.Key.ProjectId })).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d7b3878c5bda726ab2603b614e3f7e63759c65da0b547bb6bd6dd86be36c3a0f",
    "sql": "SELECT date_from , date_to FROM Project_Staff WHERE role_code = 'researcher'",
    "linq": "context.ProjectStaffs.Where(row => row.RoleCode == \"researcher\").Select(row => new { row.DateFrom, row.DateTo }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "32d7350cb4913ecbf69f265623417349340a935bb0bf1f984266bc1b5c9d0927",
    "sql": "SELECT count(DISTINCT role_code) FROM Project_Staff",
    "linq": "context.ProjectStaffs.Select(row => row.RoleCode).Distinct().Count();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "66da6956e2b264106a239700817f4c0008032e6f699c4cebd5a6acc73ab545b5",
    "sql": "SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
    "linq": "context.Grants.GroupBy(row => new { row.OrganisationId }).Select(group => new { SumGrantAmount = group.Select(row => (double) row.GrantAmount).Sum(), group.Key.OrganisationId }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "01e89ff2ecdde4fb4112268ef273b607d44354ba7b6c5702c08df0890cf8d6fe",
    "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code = T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'",
    "linq": "context.Projects.Join(context.ProjectOutcomes, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Join(context.ResearchOutcomes, joined => joined.T2.OutcomeCode, T3 => T3.OutcomeCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => EF.Functions.Like(row.T3.OutcomeDescription, \"%Published%\")).Select(row => new { row.T1.ProjectDetails }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "432205f35b5e34504c19f64025ff7e08c7ccadee64f309458eecd0f6510b13dc",
    "sql": "SELECT T1.project_id , count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC",
    "linq": "context.ProjectStaffs.Join(context.Projects, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProjectId }).Select(group => new { group.Key.ProjectId, Count = group.Count() }).OrderBy(group => group.Count).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "15cc6556d2ba40ab0aeee56648d78133bcdd5417c429a0c58046a2daa4fdf5fc",
    "sql": "SELECT role_description FROM Staff_Roles WHERE role_code = 'researcher'",
    "linq": "context.StaffRoles.Where(row => row.RoleCode == \"researcher\").Select(row => new { row.RoleDescription }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "301fea284ed2713162fa045a89ea35c0d14e4756062324ffb12515d8cfab1fa3",
    "sql": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1",
    "linq": "context.ProjectStaffs.OrderBy(row => row.DateFrom).Select(row => new { row.DateFrom }).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "011b02933c712f92eb15738b1d99188be3a5f8b3a63604cdf027823f577b29f8",
    "sql": "SELECT T1.project_details , T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Projects.Join(context.ProjectOutcomes, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProjectId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.ProjectDetails, group.Key.ProjectId }).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b42383b8c71b9da714cfd6a9b1bcda984c3f4f0157b07a00a2ce44668de8d2a9",
    "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
    "linq": "context.Projects.Where(row => !context.ProjectOutcomes.Select(row => row.ProjectId).Contains(row.ProjectId)).Select(row => new { row.ProjectDetails }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "70b779ff8cc88ecdb4b5be8bb2eeb272152a4dcf746f890ca01ed965dfb3afbf",
    "sql": "SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Organisations.Join(context.ResearchStaffs, T1 => T1.OrganisationId, T2 => T2.EmployerOrganisationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.OrganisationId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.OrganisationId, group.First().T1.OrganisationType, group.First().T1.OrganisationDetails }).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9865c35e1bdcf7c8049d16a604ea41efd89f22d66f9416a68b6df0385c5f1645",
    "sql": "SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.StaffRoles.Join(context.ProjectStaffs, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Join(context.ProjectOutcomes, joined => joined.T2.ProjectId, T3 => T3.ProjectId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T2.StaffId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.RoleDescription, group.Key.StaffId }).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3aff065bfe7da69cfe407993426e78d515f88e9e41d490d0ec5ce4c76945c3f8",
    "sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'",
    "linq": "context.DocumentTypes.Where(row => EF.Functions.Like(row.DocumentDescription, \"Initial%\")).Select(row => new { row.DocumentTypeCode }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c3ce42c6f623c2fac8b64609cd0883b484a637edbc0af22b4c0074836e841424",
    "sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'",
    "linq": "context.Grants.Join(context.Documents, T1 => T1.GrantId, T2 => T2.GrantId, (T1, T2) => new { T1, T2 }).Join(context.DocumentTypes, joined => joined.T2.DocumentTypeCode, T3 => T3.DocumentTypeCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DocumentDescription == \"Regular\").Select(row => row.T1.GrantStartDate).Intersect(context.Grants.Join(context.Documents, T1 => T1.GrantId, T2 => T2.GrantId, (T1, T2) => new { T1, T2 }).Join(context.DocumentTypes, joined => joined.T2.DocumentTypeCode, T3 => T3.DocumentTypeCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DocumentDescription == \"Initial Application\").Select(row => row.T1.GrantStartDate)).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 1979-10-29 07:44:22}, {0: 1982-04-07 00:07:43}, {0: 2004-11-10 02:26:01}]\", linq_results: \"[{0: 1979-10-29 00:00:00, 1: 29, 2: Monday, 3: 302, 4: 7, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 44, 10: 10, 11: 2024-08-06 16:24:26, 12: 22, 13: 624456278620000000, 14: 07:44:22, 15: 2024-08-06 00:00:00, 16: 1979, 17: 2024-08-06 13:24:26}, {0: 1982-04-07 00:00:00, 1: 7, 2: Wednesday, 3: 97, 4: 0, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 7, 10: 4, 11: 2024-08-06 16:24:26, 12: 43, 13: 625225828630000000, 14: 00:07:43, 15: 2024-08-06 00:00:00, 16: 1982, 17: 2024-08-06 13:24:26}, {0: 2004-11-10 00:00:00, 1: 10, 2: Wednesday, 3: 315, 4: 2, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 26, 10: 11, 11: 2024-08-06 16:24:26, 12: 1, 13: 632356503610000000, 14: 02:26:01, 15: 2024-08-06 00:00:00, 16: 2004, 17: 2024-08-06 13:24:26}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ec53ba1e84c1c8c514741290f879d5eae3a2802db4ab1ac0b24664ca8ce0b8b2",
    "sql": "SELECT grant_id , count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Documents.GroupBy(row => new { row.GrantId }).Select(group => new { group.Key.GrantId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "615ad1a21018adf03b0bcea17161c42606b71741d86503bb8fcd12c5433e22b1",
    "sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_details = 'quo'",
    "linq": "context.OrganisationTypes.Join(context.Organisations, T1 => T1.OrganisationType1, T2 => T2.OrganisationType, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrganisationDetails == \"quo\").Select(row => new { row.T1.OrganisationTypeDescription }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "683a49f9e9f5a7ba83f4ca15d74c27bbb6a5b64ee2708c6201d9590be88b584d",
    "sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_type_description = 'Sponsor' ORDER BY organisation_details",
    "linq": "context.Organisations.Join(context.OrganisationTypes, T1 => T1.OrganisationType, T2 => T2.OrganisationType1, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrganisationTypeDescription == \"Sponsor\").OrderBy(row => row.T1.OrganisationDetails).Select(row => new { row.T1.OrganisationDetails }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b1b616a3133f97ba3b5dd0a61870acfa7cbf091aab3e5a18f97cdb446178b1b8",
    "sql": "SELECT count(*) FROM Project_outcomes WHERE outcome_code = 'Patent'",
    "linq": "context.ProjectOutcomes.Where(row => row.OutcomeCode == \"Patent\").Count();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b775fcce714afe40fb7ab130e50fb4b90662d22d3def180730821519a9a53b0b",
    "sql": "SELECT count(*) FROM Project_Staff WHERE role_code = 'leader' OR date_from < '1989-04-24 23:51:54'",
    "linq": "context.ProjectStaffs.Where(row => row.RoleCode == \"leader\" || row.DateFrom < \"1989-04-24 23:51:54\").Count();",
    "db_name": "tracking_grants_for_research",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,75): error CS0019: Operator '<' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8d641d2ab001852d521d59854dd637ff27604384c022102eb2e59c8b3e4b7cc6",
    "sql": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1",
    "linq": "context.ProjectStaffs.OrderByDescending(row => row.DateTo).Select(row => new { row.DateTo }).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ee2bd6d51226d6f9edcc242614c63f8a4d90c72c77c76c04189d79be2b64d10e",
    "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sint'",
    "linq": "context.ResearchOutcomes.Join(context.ProjectOutcomes, T1 => T1.OutcomeCode, T2 => T2.OutcomeCode, (T1, T2) => new { T1, T2 }).Join(context.Projects, joined => joined.T2.ProjectId, T3 => T3.ProjectId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.ProjectDetails == \"sint\").Select(row => new { row.T1.OutcomeDescription }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7e97b032ffa719cb63b5b16f6491dfb107ca3d060290a9e424466aa23dcb75f5",
    "sql": "SELECT T1.organisation_id , count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Projects.Join(context.ProjectOutcomes, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.OrganisationId }).Select(group => new { group.Key.OrganisationId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7fece010ee8054a402e7ab95787ae19f4e53b490d3604f85f2c820fc3747361e",
    "sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )",
    "linq": "context.Projects.Where(row => context.Projects.GroupBy(row => new { row.OrganisationId }).OrderByDescending(group => group.Count()).Select(group => group.Key.OrganisationId).Take(1).Contains(row.OrganisationId)).Select(row => new { row.ProjectDetails }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0762394aeac90073dde6149a2b15525034d140f1dcbfc0baf7595193639f360e",
    "sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC",
    "linq": "context.ResearchStaffs.OrderBy(row => row.StaffDetails).Select(row => new { row.StaffDetails }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5eb34627321cee64e7012731923dd0e11028974e6d4b57b575723d803f30a90d",
    "sql": "SELECT count(*) FROM Tasks",
    "linq": "context.Tasks.Count();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "430a7be10045f437e98ea46fcb28699cd9f7f5c80ff8d0c5cec4cd40a6bce98d",
    "sql": "SELECT count(*) , T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id",
    "linq": "context.Projects.Join(context.Tasks, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProjectId }).Select(group => new { Count = group.Count(), group.First().T1.ProjectDetails }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "804eca3742c015e1efb37fac8545bdebfcd2186150698993d79be052c76b6e00",
    "sql": "SELECT role_code FROM Project_Staff WHERE date_from > '2003-04-19 15:06:20' AND date_to < '2016-03-15 00:33:18'",
    "linq": "context.ProjectStaffs.Where(row => row.DateFrom > \"2003-04-19 15:06:20\" && row.DateTo < \"2016-03-15 00:33:18\").Select(row => new { row.RoleCode }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,87): error CS0019: Operator '<' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.37",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8391854af91f976c1426bf31295b6ff5d51f624a5e9e51079d20d7f8b9f38e69",
    "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code",
    "linq": "context.ResearchOutcomes.Join(context.ProjectOutcomes, T1 => T1.OutcomeCode, T2 => T2.OutcomeCode, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.OutcomeDescription }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "479494a8f4e148be657accf5165e9033634fee072a1065fbdd030dac2bebc7e7",
    "sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.ProjectStaffs.GroupBy(row => new { row.RoleCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.RoleCode }).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f9652c40234dc5da219edc0dc2ad89e419441913cbfc743b6168623f4c55987d",
    "sql": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
    "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.FirstName, row.T2.DepartmentName }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6938e05012fc8b3790f0fd40d827fbea94894100a542c9716a6fa8deb0f3ea63",
    "sql": "SELECT first_name , last_name , salary FROM employees WHERE salary < 6000",
    "linq": "context.Employees.Where(row => row.Salary < 6000).Select(row => new { row.FirstName, row.LastName, row.Salary }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2286601f8bfbc57508a97bb32a175070c2208eec5d24a5fb226b17219becc2b4",
    "sql": "SELECT first_name , department_id FROM employees WHERE last_name = 'McEwen'",
    "linq": "context.Employees.Where(row => row.LastName == \"McEwen\").Select(row => new { row.FirstName, row.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0194d5c0c6fdb9a3a3527b35703d83c78f4bdeab5cfa8f73a69a48e95e598dd4",
    "sql": "SELECT * FROM employees WHERE department_id = \"null\"",
    "linq": "context.Employees.Where(row => row.DepartmentId == \"null\").Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Email, row.PhoneNumber, row.HireDate, row.JobId, row.Salary, row.CommissionPct, row.ManagerId, row.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.43",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ba8486570870b54a908395ce35ccf839e2a922561ebb6a6380f13d978c6ab41c",
    "sql": "SELECT * FROM departments WHERE department_name = 'Marketing'",
    "linq": "context.Departments.Where(row => row.DepartmentName == \"Marketing\").Select(row => new { row.DepartmentId, row.DepartmentName, row.ManagerId, row.LocationId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1093adc26b663ab945c27ecfe6aa0b12f871d1f1b199872c2220959e55b6df14",
    "sql": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
    "linq": "context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%M%\")).Select(row => new { row.HireDate }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 1987-06-17}, {0: 1987-06-18}, {0: 1987-06-19}, {0: 1987-06-20}, {0: 1987-06-21}, {0: 1987-06-22}, {0: 1987-06-23}, {0: 1987-06-24}, {0: 1987-06-25}, {0: 1987-06-26}, {0: 1987-06-27}, {0: 1987-06-30}, {0: 1987-07-01}, {0: 1987-07-02}, {0: 1987-07-03}, {0: 1987-07-04}, {0: 1987-07-05}, {0: 1987-07-06}, {0: 1987-07-10}, {0: 1987-07-11}, {0: 1987-07-12}, {0: 1987-07-13}, {0: 1987-07-15}, {0: 1987-07-16}, {0: 1987-07-19}, {0: 1987-07-20}, {0: 1987-07-22}, {0: 1987-07-23}, {0: 1987-07-24}, {0: 1987-07-25}, {0: 1987-07-26}, {0: 1987-07-27}, {0: 1987-07-28}, {0: 1987-07-29}, {0: 1987-07-30}, {0: 1987-07-31}, {0: 1987-08-01}, {0: 1987-08-02}, {0: 1987-08-03}, {0: 1987-08-04}, {0: 1987-08-05}, {0: 1987-08-06}, {0: 1987-08-07}, {0: 1987-08-08}, {0: 1987-08-09}, {0: 1987-08-10}, {0: 1987-08-11}, {0: 1987-08-12}, {0: 1987-08-13}, {0: 1987-08-14}, {0: 1987-08-15}, {0: 1987-08-16}, {0: 1987-08-17}, {0: 1987-08-18}, {0: 1987-08-19}, {0: 1987-08-21}, {0: 1987-08-22}, {0: 1987-08-24}, {0: 1987-08-25}, {0: 1987-08-26}, {0: 1987-08-28}, {0: 1987-08-29}, {0: 1987-08-30}, {0: 1987-08-31}, {0: 1987-09-01}, {0: 1987-09-02}, {0: 1987-09-04}, {0: 1987-09-05}, {0: 1987-09-06}, {0: 1987-09-08}, {0: 1987-09-09}, {0: 1987-09-10}, {0: 1987-09-11}, {0: 1987-09-12}, {0: 1987-09-13}, {0: 1987-09-14}, {0: 1987-09-16}, {0: 1987-09-17}, {0: 1987-09-18}, {0: 1987-09-20}, {0: 1987-09-21}, {0: 1987-09-22}, {0: 1987-09-23}, {0: 1987-09-24}, {0: 1987-09-25}, {0: 1987-09-27}, {0: 1987-09-28}, {0: 1987-09-30}]\", linq_results: \"[{0: 28.06.1987}, {0: 29.06.1987}, {0: 07.07.1987}, {0: 08.07.1987}, {0: 09.07.1987}, {0: 14.07.1987}, {0: 17.07.1987}, {0: 18.07.1987}, {0: 21.07.1987}, {0: 20.08.1987}, {0: 23.08.1987}, {0: 27.08.1987}, {0: 03.09.1987}, {0: 07.09.1987}, {0: 15.09.1987}, {0: 19.09.1987}, {0: 26.09.1987}, {0: 29.09.1987}, {0: 01.10.1987}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "80384fb4b3676d7b10f81efecf2d804a3604d91956380c15a791788254666d87",
    "sql": "SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%'",
    "linq": "context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%M%\")).Select(row => new { row.FirstName, row.LastName, row.HireDate, row.Salary, row.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: Steven, 1: King, 2: 1987-06-17, 3: 24000, 4: 90}, {0: Neena, 1: Kochhar, 2: 1987-06-18, 3: 17000, 4: 90}, {0: Lex, 1: De Haan, 2: 1987-06-19, 3: 17000, 4: 90}, {0: Alexander, 1: Hunold, 2: 1987-06-20, 3: 9000, 4: 60}, {0: Bruce, 1: Ernst, 2: 1987-06-21, 3: 6000, 4: 60}, {0: David, 1: Austin, 2: 1987-06-22, 3: 4800, 4: 60}, {0: Valli, 1: Pataballa, 2: 1987-06-23, 3: 4800, 4: 60}, {0: Diana, 1: Lorentz, 2: 1987-06-24, 3: 4200, 4: 60}, {0: Nancy, 1: Greenberg, 2: 1987-06-25, 3: 12000, 4: 100}, {0: Daniel, 1: Faviet, 2: 1987-06-26, 3: 9000, 4: 100}, {0: John, 1: Chen, 2: 1987-06-27, 3: 8200, 4: 100}, {0: Luis, 1: Popp, 2: 1987-06-30, 3: 6900, 4: 100}, {0: Den, 1: Raphaely, 2: 1987-07-01, 3: 11000, 4: 30}, {0: Alexander, 1: Khoo, 2: 1987-07-02, 3: 3100, 4: 30}, {0: Shelli, 1: Baida, 2: 1987-07-03, 3: 2900, 4: 30}, {0: Sigal, 1: Tobias, 2: 1987-07-04, 3: 2800, 4: 30}, {0: Guy, 1: Himuro, 2: 1987-07-05, 3: 2600, 4: 30}, {0: Karen, 1: Colmenares, 2: 1987-07-06, 3: 2500, 4: 30}, {0: Shanta, 1: Vollman, 2: 1987-07-10, 3: 6500, 4: 50}, {0: Kevin, 1: Mourgos, 2: 1987-07-11, 3: 5800, 4: 50}, {0: Julia, 1: Nayer, 2: 1987-07-12, 3: 3200, 4: 50}, {0: Irene, 1: Mikkilineni, 2: 1987-07-13, 3: 2700, 4: 50}, {0: Steven, 1: Markle, 2: 1987-07-15, 3: 2200, 4: 50}, {0: Laura, 1: Bissot, 2: 1987-07-16, 3: 3300, 4: 50}, {0: TJ, 1: Olson, 2: 1987-07-19, 3: 2100, 4: 50}, {0: Jason, 1: Mallin, 2: 1987-07-20, 3: 3300, 4: 50}, {0: Ki, 1: Gee, 2: 1987-07-22, 3: 2400, 4: 50}, {0: Hazel, 1: Philtanker, 2: 1987-07-23, 3: 2200, 4: 50}, {0: Renske, 1: Ladwig, 2: 1987-07-24, 3: 3600, 4: 50}, {0: Stephen, 1: Stiles, 2: 1987-07-25, 3: 3200, 4: 50}, {0: John, 1: Seo, 2: 1987-07-26, 3: 2700, 4: 50}, {0: Joshua, 1: Patel, 2: 1987-07-27, 3: 2500, 4: 50}, {0: Trenna, 1: Rajs, 2: 1987-07-28, 3: 3500, 4: 50}, {0: Curtis, 1: Davies, 2: 1987-07-29, 3: 3100, 4: 50}, {0: Randall, 1: Matos, 2: 1987-07-30, 3: 2600, 4: 50}, {0: Peter, 1: Vargas, 2: 1987-07-31, 3: 2500, 4: 50}, {0: John, 1: Russell, 2: 1987-08-01, 3: 14000, 4: 80}, {0: Karen, 1: Partners, 2: 1987-08-02, 3: 13500, 4: 80}, {0: Alberto, 1: Errazuriz, 2: 1987-08-03, 3: 12000, 4: 80}, {0: Gerald, 1: Cambrault, 2: 1987-08-04, 3: 11000, 4: 80}, {0: Eleni, 1: Zlotkey, 2: 1987-08-05, 3: 10500, 4: 80}, {0: Peter, 1: Tucker, 2: 1987-08-06, 3: 10000, 4: 80}, {0: David, 1: Bernstein, 2: 1987-08-07, 3: 9500, 4: 80}, {0: Peter, 1: Hall, 2: 1987-08-08, 3: 9000, 4: 80}, {0: Christopher, 1: Olsen, 2: 1987-08-09, 3: 8000, 4: 80}, {0: Nanette, 1: Cambrault, 2: 1987-08-10, 3: 7500, 4: 80}, {0: Oliver, 1: Tuvault, 2: 1987-08-11, 3: 7000, 4: 80}, {0: Janette, 1: King, 2: 1987-08-12, 3: 10000, 4: 80}, {0: Patrick, 1: Sully, 2: 1987-08-13, 3: 9500, 4: 80}, {0: Allan, 1: McEwen, 2: 1987-08-14, 3: 9000, 4: 80}, {0: Lindsey, 1: Smith, 2: 1987-08-15, 3: 8000, 4: 80}, {0: Louise, 1: Doran, 2: 1987-08-16, 3: 7500, 4: 80}, {0: Sarath, 1: Sewall, 2: 1987-08-17, 3: 7000, 4: 80}, {0: Clara, 1: Vishney, 2: 1987-08-18, 3: 10500, 4: 80}, {0: Danielle, 1: Greene, 2: 1987-08-19, 3: 9500, 4: 80}, {0: David, 1: Lee, 2: 1987-08-21, 3: 6800, 4: 80}, {0: Sundar, 1: Ande, 2: 1987-08-22, 3: 6400, 4: 80}, {0: Lisa, 1: Ozer, 2: 1987-08-24, 3: 11500, 4: 80}, {0: Harrison, 1: Bloom, 2: 1987-08-25, 3: 10000, 4: 80}, {0: Tayler, 1: Fox, 2: 1987-08-26, 3: 9600, 4: 80}, {0: Elizabeth, 1: Bates, 2: 1987-08-28, 3: 7300, 4: 80}, {0: Sundita, 1: Kumar, 2: 1987-08-29, 3: 6100, 4: 80}, {0: Ellen, 1: Abel, 2: 1987-08-30, 3: 11000, 4: 80}, {0: Alyssa, 1: Hutton, 2: 1987-08-31, 3: 8800, 4: 80}, {0: Jonathon, 1: Taylor, 2: 1987-09-01, 3: 8600, 4: 80}, {0: Jack, 1: Livingston, 2: 1987-09-02, 3: 8400, 4: 80}, {0: Charles, 1: Johnson, 2: 1987-09-04, 3: 6200, 4: 80}, {0: Winston, 1: Taylor, 2: 1987-09-05, 3: 3200, 4: 50}, {0: Jean, 1: Fleaur, 2: 1987-09-06, 3: 3100, 4: 50}, {0: Girard, 1: Geoni, 2: 1987-09-08, 3: 2800, 4: 50}, {0: Nandita, 1: Sarchand, 2: 1987-09-09, 3: 4200, 4: 50}, {0: Alexis, 1: Bull, 2: 1987-09-10, 3: 4100, 4: 50}, {0: Julia, 1: Dellinger, 2: 1987-09-11, 3: 3400, 4: 50}, {0: Anthony, 1: Cabrio, 2: 1987-09-12, 3: 3000, 4: 50}, {0: Kelly, 1: Chung, 2: 1987-09-13, 3: 3800, 4: 50}, {0: Jennifer, 1: Dilly, 2: 1987-09-14, 3: 3600, 4: 50}, {0: Randall, 1: Perkins, 2: 1987-09-16, 3: 2500, 4: 50}, {0: Sarah, 1: Bell, 2: 1987-09-17, 3: 4000, 4: 50}, {0: Britney, 1: Everett, 2: 1987-09-18, 3: 3900, 4: 50}, {0: Vance, 1: Jones, 2: 1987-09-20, 3: 2800, 4: 50}, {0: Alana, 1: Walsh, 2: 1987-09-21, 3: 3100, 4: 50}, {0: Kevin, 1: Feeney, 2: 1987-09-22, 3: 3000, 4: 50}, {0: Donald, 1: OConnell, 2: 1987-09-23, 3: 2600, 4: 50}, {0: Douglas, 1: Grant, 2: 1987-09-24, 3: 2600, 4: 50}, {0: Jennifer, 1: Whalen, 2: 1987-09-25, 3: 4400, 4: 10}, {0: Pat, 1: Fay, 2: 1987-09-27, 3: 6000, 4: 20}, {0: Susan, 1: Mavris, 2: 1987-09-28, 3: 6500, 4: 40}, {0: Shelley, 1: Higgins, 2: 1987-09-30, 3: 12000, 4: 110}]\", linq_results: \"[{0: Ismael, 1: Sciarra, 2: 28.06.1987, 3: 7700, 4: 100}, {0: Jose Manuel, 1: Urman, 2: 29.06.1987, 3: 7800, 4: 100}, {0: Matthew, 1: Weiss, 2: 07.07.1987, 3: 8000, 4: 50}, {0: Adam, 1: Fripp, 2: 08.07.1987, 3: 8200, 4: 50}, {0: Payam, 1: Kaufling, 2: 09.07.1987, 3: 7900, 4: 50}, {0: James, 1: Landry, 2: 14.07.1987, 3: 2400, 4: 50}, {0: Mozhe, 1: Atkinson, 2: 17.07.1987, 3: 2800, 4: 50}, {0: James, 1: Marlow, 2: 18.07.1987, 3: 2500, 4: 50}, {0: Michael, 1: Rogers, 2: 21.07.1987, 3: 2900, 4: 50}, {0: Mattea, 1: Marvins, 2: 20.08.1987, 3: 7200, 4: 80}, {0: Amit, 1: Banda, 2: 23.08.1987, 3: 6200, 4: 80}, {0: William, 1: Smith, 2: 27.08.1987, 3: 7400, 4: 80}, {0: Kimberely, 1: Grant, 2: 03.09.1987, 3: 7000, 4: 0}, {0: Martha, 1: Sullivan, 2: 07.09.1987, 3: 2500, 4: 50}, {0: Timothy, 1: Gates, 2: 15.09.1987, 3: 2900, 4: 50}, {0: Samuel, 1: McCain, 2: 19.09.1987, 3: 3200, 4: 50}, {0: Michael, 1: Hartstein, 2: 26.09.1987, 3: 13000, 4: 20}, {0: Hermann, 1: Baer, 2: 29.09.1987, 3: 10000, 4: 70}, {0: William, 1: Gietz, 2: 01.10.1987, 3: 8300, 4: 110}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3f69ff35b6a888123befd70c378d2e76745fdf3524ae3511218c3ac90a08b81b",
    "sql": "SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
    "linq": "context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%M%\")).OrderBy(row => row.DepartmentId).Select(row => new { row.FirstName, row.LastName, row.HireDate, row.Salary, row.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: Jennifer, 1: Whalen, 2: 1987-09-25, 3: 4400, 4: 10}, {0: Pat, 1: Fay, 2: 1987-09-27, 3: 6000, 4: 20}, {0: Den, 1: Raphaely, 2: 1987-07-01, 3: 11000, 4: 30}, {0: Alexander, 1: Khoo, 2: 1987-07-02, 3: 3100, 4: 30}, {0: Shelli, 1: Baida, 2: 1987-07-03, 3: 2900, 4: 30}, {0: Sigal, 1: Tobias, 2: 1987-07-04, 3: 2800, 4: 30}, {0: Guy, 1: Himuro, 2: 1987-07-05, 3: 2600, 4: 30}, {0: Karen, 1: Colmenares, 2: 1987-07-06, 3: 2500, 4: 30}, {0: Susan, 1: Mavris, 2: 1987-09-28, 3: 6500, 4: 40}, {0: Shanta, 1: Vollman, 2: 1987-07-10, 3: 6500, 4: 50}, {0: Kevin, 1: Mourgos, 2: 1987-07-11, 3: 5800, 4: 50}, {0: Julia, 1: Nayer, 2: 1987-07-12, 3: 3200, 4: 50}, {0: Irene, 1: Mikkilineni, 2: 1987-07-13, 3: 2700, 4: 50}, {0: Steven, 1: Markle, 2: 1987-07-15, 3: 2200, 4: 50}, {0: Laura, 1: Bissot, 2: 1987-07-16, 3: 3300, 4: 50}, {0: TJ, 1: Olson, 2: 1987-07-19, 3: 2100, 4: 50}, {0: Jason, 1: Mallin, 2: 1987-07-20, 3: 3300, 4: 50}, {0: Ki, 1: Gee, 2: 1987-07-22, 3: 2400, 4: 50}, {0: Hazel, 1: Philtanker, 2: 1987-07-23, 3: 2200, 4: 50}, {0: Renske, 1: Ladwig, 2: 1987-07-24, 3: 3600, 4: 50}, {0: Stephen, 1: Stiles, 2: 1987-07-25, 3: 3200, 4: 50}, {0: John, 1: Seo, 2: 1987-07-26, 3: 2700, 4: 50}, {0: Joshua, 1: Patel, 2: 1987-07-27, 3: 2500, 4: 50}, {0: Trenna, 1: Rajs, 2: 1987-07-28, 3: 3500, 4: 50}, {0: Curtis, 1: Davies, 2: 1987-07-29, 3: 3100, 4: 50}, {0: Randall, 1: Matos, 2: 1987-07-30, 3: 2600, 4: 50}, {0: Peter, 1: Vargas, 2: 1987-07-31, 3: 2500, 4: 50}, {0: Winston, 1: Taylor, 2: 1987-09-05, 3: 3200, 4: 50}, {0: Jean, 1: Fleaur, 2: 1987-09-06, 3: 3100, 4: 50}, {0: Girard, 1: Geoni, 2: 1987-09-08, 3: 2800, 4: 50}, {0: Nandita, 1: Sarchand, 2: 1987-09-09, 3: 4200, 4: 50}, {0: Alexis, 1: Bull, 2: 1987-09-10, 3: 4100, 4: 50}, {0: Julia, 1: Dellinger, 2: 1987-09-11, 3: 3400, 4: 50}, {0: Anthony, 1: Cabrio, 2: 1987-09-12, 3: 3000, 4: 50}, {0: Kelly, 1: Chung, 2: 1987-09-13, 3: 3800, 4: 50}, {0: Jennifer, 1: Dilly, 2: 1987-09-14, 3: 3600, 4: 50}, {0: Randall, 1: Perkins, 2: 1987-09-16, 3: 2500, 4: 50}, {0: Sarah, 1: Bell, 2: 1987-09-17, 3: 4000, 4: 50}, {0: Britney, 1: Everett, 2: 1987-09-18, 3: 3900, 4: 50}, {0: Vance, 1: Jones, 2: 1987-09-20, 3: 2800, 4: 50}, {0: Alana, 1: Walsh, 2: 1987-09-21, 3: 3100, 4: 50}, {0: Kevin, 1: Feeney, 2: 1987-09-22, 3: 3000, 4: 50}, {0: Donald, 1: OConnell, 2: 1987-09-23, 3: 2600, 4: 50}, {0: Douglas, 1: Grant, 2: 1987-09-24, 3: 2600, 4: 50}, {0: Alexander, 1: Hunold, 2: 1987-06-20, 3: 9000, 4: 60}, {0: Bruce, 1: Ernst, 2: 1987-06-21, 3: 6000, 4: 60}, {0: David, 1: Austin, 2: 1987-06-22, 3: 4800, 4: 60}, {0: Valli, 1: Pataballa, 2: 1987-06-23, 3: 4800, 4: 60}, {0: Diana, 1: Lorentz, 2: 1987-06-24, 3: 4200, 4: 60}, {0: John, 1: Russell, 2: 1987-08-01, 3: 14000, 4: 80}, {0: Karen, 1: Partners, 2: 1987-08-02, 3: 13500, 4: 80}, {0: Alberto, 1: Errazuriz, 2: 1987-08-03, 3: 12000, 4: 80}, {0: Gerald, 1: Cambrault, 2: 1987-08-04, 3: 11000, 4: 80}, {0: Eleni, 1: Zlotkey, 2: 1987-08-05, 3: 10500, 4: 80}, {0: Peter, 1: Tucker, 2: 1987-08-06, 3: 10000, 4: 80}, {0: David, 1: Bernstein, 2: 1987-08-07, 3: 9500, 4: 80}, {0: Peter, 1: Hall, 2: 1987-08-08, 3: 9000, 4: 80}, {0: Christopher, 1: Olsen, 2: 1987-08-09, 3: 8000, 4: 80}, {0: Nanette, 1: Cambrault, 2: 1987-08-10, 3: 7500, 4: 80}, {0: Oliver, 1: Tuvault, 2: 1987-08-11, 3: 7000, 4: 80}, {0: Janette, 1: King, 2: 1987-08-12, 3: 10000, 4: 80}, {0: Patrick, 1: Sully, 2: 1987-08-13, 3: 9500, 4: 80}, {0: Allan, 1: McEwen, 2: 1987-08-14, 3: 9000, 4: 80}, {0: Lindsey, 1: Smith, 2: 1987-08-15, 3: 8000, 4: 80}, {0: Louise, 1: Doran, 2: 1987-08-16, 3: 7500, 4: 80}, {0: Sarath, 1: Sewall, 2: 1987-08-17, 3: 7000, 4: 80}, {0: Clara, 1: Vishney, 2: 1987-08-18, 3: 10500, 4: 80}, {0: Danielle, 1: Greene, 2: 1987-08-19, 3: 9500, 4: 80}, {0: David, 1: Lee, 2: 1987-08-21, 3: 6800, 4: 80}, {0: Sundar, 1: Ande, 2: 1987-08-22, 3: 6400, 4: 80}, {0: Lisa, 1: Ozer, 2: 1987-08-24, 3: 11500, 4: 80}, {0: Harrison, 1: Bloom, 2: 1987-08-25, 3: 10000, 4: 80}, {0: Tayler, 1: Fox, 2: 1987-08-26, 3: 9600, 4: 80}, {0: Elizabeth, 1: Bates, 2: 1987-08-28, 3: 7300, 4: 80}, {0: Sundita, 1: Kumar, 2: 1987-08-29, 3: 6100, 4: 80}, {0: Ellen, 1: Abel, 2: 1987-08-30, 3: 11000, 4: 80}, {0: Alyssa, 1: Hutton, 2: 1987-08-31, 3: 8800, 4: 80}, {0: Jonathon, 1: Taylor, 2: 1987-09-01, 3: 8600, 4: 80}, {0: Jack, 1: Livingston, 2: 1987-09-02, 3: 8400, 4: 80}, {0: Charles, 1: Johnson, 2: 1987-09-04, 3: 6200, 4: 80}, {0: Steven, 1: King, 2: 1987-06-17, 3: 24000, 4: 90}, {0: Neena, 1: Kochhar, 2: 1987-06-18, 3: 17000, 4: 90}, {0: Lex, 1: De Haan, 2: 1987-06-19, 3: 17000, 4: 90}, {0: Nancy, 1: Greenberg, 2: 1987-06-25, 3: 12000, 4: 100}, {0: Daniel, 1: Faviet, 2: 1987-06-26, 3: 9000, 4: 100}, {0: John, 1: Chen, 2: 1987-06-27, 3: 8200, 4: 100}, {0: Luis, 1: Popp, 2: 1987-06-30, 3: 6900, 4: 100}, {0: Shelley, 1: Higgins, 2: 1987-09-30, 3: 12000, 4: 110}]\", linq_results: \"[{0: Kimberely, 1: Grant, 2: 03.09.1987, 3: 7000, 4: 0}, {0: Michael, 1: Hartstein, 2: 26.09.1987, 3: 13000, 4: 20}, {0: Matthew, 1: Weiss, 2: 07.07.1987, 3: 8000, 4: 50}, {0: Adam, 1: Fripp, 2: 08.07.1987, 3: 8200, 4: 50}, {0: Payam, 1: Kaufling, 2: 09.07.1987, 3: 7900, 4: 50}, {0: James, 1: Landry, 2: 14.07.1987, 3: 2400, 4: 50}, {0: Mozhe, 1: Atkinson, 2: 17.07.1987, 3: 2800, 4: 50}, {0: James, 1: Marlow, 2: 18.07.1987, 3: 2500, 4: 50}, {0: Michael, 1: Rogers, 2: 21.07.1987, 3: 2900, 4: 50}, {0: Martha, 1: Sullivan, 2: 07.09.1987, 3: 2500, 4: 50}, {0: Timothy, 1: Gates, 2: 15.09.1987, 3: 2900, 4: 50}, {0: Samuel, 1: McCain, 2: 19.09.1987, 3: 3200, 4: 50}, {0: Hermann, 1: Baer, 2: 29.09.1987, 3: 10000, 4: 70}, {0: Mattea, 1: Marvins, 2: 20.08.1987, 3: 7200, 4: 80}, {0: Amit, 1: Banda, 2: 23.08.1987, 3: 6200, 4: 80}, {0: William, 1: Smith, 2: 27.08.1987, 3: 7400, 4: 80}, {0: Ismael, 1: Sciarra, 2: 28.06.1987, 3: 7700, 4: 100}, {0: Jose Manuel, 1: Urman, 2: 29.06.1987, 3: 7800, 4: 100}, {0: William, 1: Gietz, 2: 01.10.1987, 3: 8300, 4: 110}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4d660b8003dabc7be87a23a87c466d497c5d44657e6df9bf6a26ea74b1a7522c",
    "sql": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000",
    "linq": "context.Employees.Where(row => row.Salary >= 8000 && row.Salary <= 12000).Select(row => new { row.PhoneNumber }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f99c69f720b1f1dcfb1da44337bcfd1694a5850c0e21e38e196dd4a12545d105",
    "sql": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
    "linq": "context.Employees.Where(row => row.Salary >= 8000 && row.Salary <= 12000 && row.CommissionPct != \"null\" || row.DepartmentId != 40).Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Email, row.PhoneNumber, row.HireDate, row.JobId, row.Salary, row.CommissionPct, row.ManagerId, row.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,88): error CS0019: Operator '!=' cannot be applied to operands of type 'decimal?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.31",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "17b31da72dab64e61a48dc834fee6a587c1be758130b19b7013e66ab3eaccee6",
    "sql": "SELECT first_name , last_name , salary FROM employees WHERE commission_pct = \"null\"",
    "linq": "context.Employees.Where(row => row.CommissionPct == \"null\").Select(row => new { row.FirstName, row.LastName, row.Salary }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS0019: Operator '==' cannot be applied to operands of type 'decimal?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6f532ba37ae24bcbf26530cd5bcf1be8ebaafef40e012358a310cb6896d01d7b",
    "sql": "SELECT first_name , last_name , salary FROM employees WHERE first_name LIKE '%m'",
    "linq": "context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%m\")).Select(row => new { row.FirstName, row.LastName, row.Salary }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "715cc6d307a25afb1c8f62369f62c6d954ef2f67d6ceb001e089a65c1c9e2e16",
    "sql": "SELECT job_id , hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
    "linq": "context.Employees.Where(row => row.HireDate >= '2007-11-05' && row.HireDate <= '2009-07-05').Select(row => new { row.JobId, row.HireDate }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,91): error CS1012: Too many characters in character literal [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    143 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:00.66",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "38f76159a5b9ab7c8610df3d7915bd61fa347b63a75e43f9615a179b3162a5e0",
    "sql": "SELECT first_name , last_name FROM employees WHERE department_id = 70 OR department_id = 90",
    "linq": "context.Employees.Where(row => row.DepartmentId == 70 || row.DepartmentId == 90).Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a349dfe21523c0eb1623f79a25d5f7516a0c183e8937522b79c02c38a504543b",
    "sql": "SELECT salary , manager_id FROM employees WHERE manager_id != \"null\"",
    "linq": "context.Employees.Where(row => row.ManagerId != \"null\").Select(row => new { row.Salary, row.ManagerId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS0019: Operator '!=' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e1e597221750ba88056eaea72e56ad81bc65e30bc4692691d75ee1ab21979274",
    "sql": "SELECT * FROM employees WHERE hire_date < '2002-06-21'",
    "linq": "context.Employees.Where(row => row.HireDate < \"2002-06-21\").Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Email, row.PhoneNumber, row.HireDate, row.JobId, row.Salary, row.CommissionPct, row.ManagerId, row.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS0019: Operator '<' cannot be applied to operands of type 'DateOnly' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.48",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5e14cf67225e4e8b860c5bd7fc7854581f9064decac0a7585bd3d7dc0d521f37",
    "sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
    "linq": "context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%D%\") || EF.Functions.Like(row.FirstName, \"%S%\")).OrderByDescending(row => row.Salary).Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Email, row.PhoneNumber, row.HireDate, row.JobId, row.Salary, row.CommissionPct, row.ManagerId, row.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 100, 1: Steven, 2: King, 3: SKING, 4: 515.123.4567, 5: 1987-06-17, 6: AD_PRES, 7: 24000, 8: 0, 9: 0, 10: 90}, {0: 205, 1: Shelley, 2: Higgins, 3: SHIGGINS, 4: 515.123.8080, 5: 1987-09-30, 6: AC_MGR, 7: 12000, 8: 0, 9: 101, 10: 110}, {0: 168, 1: Lisa, 2: Ozer, 3: LOZER, 4: 011.44.1343.929268, 5: 1987-08-24, 6: SA_REP, 7: 11500, 8: 0.25, 9: 148, 10: 80}, {0: 114, 1: Den, 2: Raphaely, 3: DRAPHEAL, 4: 515.127.4561, 5: 1987-07-01, 6: PU_MAN, 7: 11000, 8: 0, 9: 100, 10: 30}, {0: 148, 1: Gerald, 2: Cambrault, 3: GCAMBRAU, 4: 011.44.1344.619268, 5: 1987-08-04, 6: SA_MAN, 7: 11000, 8: 0.3, 9: 100, 10: 80}, {0: 169, 1: Harrison, 2: Bloom, 3: HBLOOM, 4: 011.44.1343.829268, 5: 1987-08-25, 6: SA_REP, 7: 10000, 8: 0.2, 9: 148, 10: 80}, {0: 151, 1: David, 2: Bernstein, 3: DBERNSTE, 4: 011.44.1344.345268, 5: 1987-08-07, 6: SA_REP, 7: 9500, 8: 0.25, 9: 145, 10: 80}, {0: 163, 1: Danielle, 2: Greene, 3: DGREENE, 4: 011.44.1346.229268, 5: 1987-08-19, 6: SA_REP, 7: 9500, 8: 0.15, 9: 147, 10: 80}, {0: 103, 1: Alexander, 2: Hunold, 3: AHUNOLD, 4: 590.423.4567, 5: 1987-06-20, 6: IT_PROG, 7: 9000, 8: 0, 9: 102, 10: 60}, {0: 109, 1: Daniel, 2: Faviet, 3: DFAVIET, 4: 515.124.4169, 5: 1987-06-26, 6: FI_ACCOUNT, 7: 9000, 8: 0, 9: 108, 10: 100}, {0: 175, 1: Alyssa, 2: Hutton, 3: AHUTTON, 4: 011.44.1644.429266, 5: 1987-08-31, 6: SA_REP, 7: 8800, 8: 0.25, 9: 149, 10: 80}, {0: 121, 1: Adam, 2: Fripp, 3: AFRIPP, 4: 650.123.2234, 5: 1987-07-08, 6: ST_MAN, 7: 8200, 8: 0, 9: 100, 10: 50}, {0: 153, 1: Christopher, 2: Olsen, 3: COLSEN, 4: 011.44.1344.498718, 5: 1987-08-09, 6: SA_REP, 7: 8000, 8: 0.2, 9: 145, 10: 80}, {0: 159, 1: Lindsey, 2: Smith, 3: LSMITH, 4: 011.44.1345.729268, 5: 1987-08-15, 6: SA_REP, 7: 8000, 8: 0.3, 9: 146, 10: 80}, {0: 112, 1: Jose Manuel, 2: Urman, 3: JMURMAN, 4: 515.124.4469, 5: 1987-06-29, 6: FI_ACCOUNT, 7: 7800, 8: 0, 9: 108, 10: 100}, {0: 111, 1: Ismael, 2: Sciarra, 3: ISCIARRA, 4: 515.124.4369, 5: 1987-06-28, 6: FI_ACCOUNT, 7: 7700, 8: 0, 9: 108, 10: 100}, {0: 160, 1: Louise, 2: Doran, 3: LDORAN, 4: 011.44.1345.629268, 5: 1987-08-16, 6: SA_REP, 7: 7500, 8: 0.3, 9: 146, 10: 80}, {0: 161, 1: Sarath, 2: Sewall, 3: SSEWALL, 4: 011.44.1345.529268, 5: 1987-08-17, 6: SA_REP, 7: 7000, 8: 0.25, 9: 146, 10: 80}, {0: 113, 1: Luis, 2: Popp, 3: LPOPP, 4: 515.124.4567, 5: 1987-06-30, 6: FI_ACCOUNT, 7: 6900, 8: 0, 9: 108, 10: 100}, {0: 165, 1: David, 2: Lee, 3: DLEE, 4: 011.44.1346.529268, 5: 1987-08-21, 6: SA_REP, 7: 6800, 8: 0.1, 9: 147, 10: 80}, {0: 123, 1: Shanta, 2: Vollman, 3: SVOLLMAN, 4: 650.123.4234, 5: 1987-07-10, 6: ST_MAN, 7: 6500, 8: 0, 9: 100, 10: 50}, {0: 203, 1: Susan, 2: Mavris, 3: SMAVRIS, 4: 515.123.7777, 5: 1987-09-28, 6: HR_REP, 7: 6500, 8: 0, 9: 101, 10: 40}, {0: 166, 1: Sundar, 2: Ande, 3: SANDE, 4: 011.44.1346.629268, 5: 1987-08-22, 6: SA_REP, 7: 6400, 8: 0.1, 9: 147, 10: 80}, {0: 179, 1: Charles, 2: Johnson, 3: CJOHNSON, 4: 011.44.1644.429262, 5: 1987-09-04, 6: SA_REP, 7: 6200, 8: 0.1, 9: 149, 10: 80}, {0: 173, 1: Sundita, 2: Kumar, 3: SKUMAR, 4: 011.44.1343.329268, 5: 1987-08-29, 6: SA_REP, 7: 6100, 8: 0.1, 9: 148, 10: 80}, {0: 105, 1: David, 2: Austin, 3: DAUSTIN, 4: 590.423.4569, 5: 1987-06-22, 6: IT_PROG, 7: 4800, 8: 0, 9: 103, 10: 60}, {0: 107, 1: Diana, 2: Lorentz, 3: DLORENTZ, 4: 590.423.5567, 5: 1987-06-24, 6: IT_PROG, 7: 4200, 8: 0, 9: 103, 10: 60}, {0: 184, 1: Nandita, 2: Sarchand, 3: NSARCHAN, 4: 650.509.1876, 5: 1987-09-09, 6: SH_CLERK, 7: 4200, 8: 0, 9: 121, 10: 50}, {0: 185, 1: Alexis, 2: Bull, 3: ABULL, 4: 650.509.2876, 5: 1987-09-10, 6: SH_CLERK, 7: 4100, 8: 0, 9: 121, 10: 50}, {0: 192, 1: Sarah, 2: Bell, 3: SBELL, 4: 650.501.1876, 5: 1987-09-17, 6: SH_CLERK, 7: 4000, 8: 0, 9: 123, 10: 50}, {0: 137, 1: Renske, 2: Ladwig, 3: RLADWIG, 4: 650.121.1234, 5: 1987-07-24, 6: ST_CLERK, 7: 3600, 8: 0, 9: 123, 10: 50}, {0: 133, 1: Jason, 2: Mallin, 3: JMALLIN, 4: 650.127.1934, 5: 1987-07-20, 6: ST_CLERK, 7: 3300, 8: 0, 9: 122, 10: 50}, {0: 138, 1: Stephen, 2: Stiles, 3: SSTILES, 4: 650.121.2034, 5: 1987-07-25, 6: ST_CLERK, 7: 3200, 8: 0, 9: 123, 10: 50}, {0: 180, 1: Winston, 2: Taylor, 3: WTAYLOR, 4: 650.507.9876, 5: 1987-09-05, 6: SH_CLERK, 7: 3200, 8: 0, 9: 120, 10: 50}, {0: 194, 1: Samuel, 2: McCain, 3: SMCCAIN, 4: 650.501.3876, 5: 1987-09-19, 6: SH_CLERK, 7: 3200, 8: 0, 9: 123, 10: 50}, {0: 115, 1: Alexander, 2: Khoo, 3: AKHOO, 4: 515.127.4562, 5: 1987-07-02, 6: PU_CLERK, 7: 3100, 8: 0, 9: 114, 10: 30}, {0: 142, 1: Curtis, 2: Davies, 3: CDAVIES, 4: 650.121.2994, 5: 1987-07-29, 6: ST_CLERK, 7: 3100, 8: 0, 9: 124, 10: 50}, {0: 116, 1: Shelli, 2: Baida, 3: SBAIDA, 4: 515.127.4563, 5: 1987-07-03, 6: PU_CLERK, 7: 2900, 8: 0, 9: 114, 10: 30}, {0: 117, 1: Sigal, 2: Tobias, 3: STOBIAS, 4: 515.127.4564, 5: 1987-07-04, 6: PU_CLERK, 7: 2800, 8: 0, 9: 114, 10: 30}, {0: 183, 1: Girard, 2: Geoni, 3: GGEONI, 4: 650.507.9879, 5: 1987-09-08, 6: SH_CLERK, 7: 2800, 8: 0, 9: 120, 10: 50}, {0: 143, 1: Randall, 2: Matos, 3: RMATOS, 4: 650.121.2874, 5: 1987-07-30, 6: ST_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 198, 1: Donald, 2: OConnell, 3: DOCONNEL, 4: 650.507.9833, 5: 1987-09-23, 6: SH_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 199, 1: Douglas, 2: Grant, 3: DGRANT, 4: 650.507.9844, 5: 1987-09-24, 6: SH_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 131, 1: James, 2: Marlow, 3: JAMRLOW, 4: 650.124.7234, 5: 1987-07-18, 6: ST_CLERK, 7: 2500, 8: 0, 9: 121, 10: 50}, {0: 140, 1: Joshua, 2: Patel, 3: JPATEL, 4: 650.121.1834, 5: 1987-07-27, 6: ST_CLERK, 7: 2500, 8: 0, 9: 123, 10: 50}, {0: 191, 1: Randall, 2: Perkins, 3: RPERKINS, 4: 650.505.4876, 5: 1987-09-16, 6: SH_CLERK, 7: 2500, 8: 0, 9: 122, 10: 50}, {0: 127, 1: James, 2: Landry, 3: JLANDRY, 4: 650.124.1334, 5: 1987-07-14, 6: ST_CLERK, 7: 2400, 8: 0, 9: 120, 10: 50}, {0: 128, 1: Steven, 2: Markle, 3: SMARKLE, 4: 650.124.1434, 5: 1987-07-15, 6: ST_CLERK, 7: 2200, 8: 0, 9: 120, 10: 50}]\", linq_results: \"[{0: 100, 1: Steven, 2: King, 3: SKING, 4: 515.123.4567, 5: 17.06.1987, 6: AD_PRES, 7: 24000, 8: 0, 9: 0, 10: 90}, {0: 205, 1: Shelley, 2: Higgins, 3: SHIGGINS, 4: 515.123.8080, 5: 30.09.1987, 6: AC_MGR, 7: 12000, 8: 0, 9: 101, 10: 110}, {0: 168, 1: Lisa, 2: Ozer, 3: LOZER, 4: 011.44.1343.929268, 5: 24.08.1987, 6: SA_REP, 7: 11500, 8: 0.25, 9: 148, 10: 80}, {0: 114, 1: Den, 2: Raphaely, 3: DRAPHEAL, 4: 515.127.4561, 5: 01.07.1987, 6: PU_MAN, 7: 11000, 8: 0, 9: 100, 10: 30}, {0: 148, 1: Gerald, 2: Cambrault, 3: GCAMBRAU, 4: 011.44.1344.619268, 5: 04.08.1987, 6: SA_MAN, 7: 11000, 8: 0.3, 9: 100, 10: 80}, {0: 169, 1: Harrison, 2: Bloom, 3: HBLOOM, 4: 011.44.1343.829268, 5: 25.08.1987, 6: SA_REP, 7: 10000, 8: 0.2, 9: 148, 10: 80}, {0: 151, 1: David, 2: Bernstein, 3: DBERNSTE, 4: 011.44.1344.345268, 5: 07.08.1987, 6: SA_REP, 7: 9500, 8: 0.25, 9: 145, 10: 80}, {0: 163, 1: Danielle, 2: Greene, 3: DGREENE, 4: 011.44.1346.229268, 5: 19.08.1987, 6: SA_REP, 7: 9500, 8: 0.15, 9: 147, 10: 80}, {0: 103, 1: Alexander, 2: Hunold, 3: AHUNOLD, 4: 590.423.4567, 5: 20.06.1987, 6: IT_PROG, 7: 9000, 8: 0, 9: 102, 10: 60}, {0: 109, 1: Daniel, 2: Faviet, 3: DFAVIET, 4: 515.124.4169, 5: 26.06.1987, 6: FI_ACCOUNT, 7: 9000, 8: 0, 9: 108, 10: 100}, {0: 175, 1: Alyssa, 2: Hutton, 3: AHUTTON, 4: 011.44.1644.429266, 5: 31.08.1987, 6: SA_REP, 7: 8800, 8: 0.25, 9: 149, 10: 80}, {0: 121, 1: Adam, 2: Fripp, 3: AFRIPP, 4: 650.123.2234, 5: 08.07.1987, 6: ST_MAN, 7: 8200, 8: 0, 9: 100, 10: 50}, {0: 153, 1: Christopher, 2: Olsen, 3: COLSEN, 4: 011.44.1344.498718, 5: 09.08.1987, 6: SA_REP, 7: 8000, 8: 0.2, 9: 145, 10: 80}, {0: 159, 1: Lindsey, 2: Smith, 3: LSMITH, 4: 011.44.1345.729268, 5: 15.08.1987, 6: SA_REP, 7: 8000, 8: 0.3, 9: 146, 10: 80}, {0: 112, 1: Jose Manuel, 2: Urman, 3: JMURMAN, 4: 515.124.4469, 5: 29.06.1987, 6: FI_ACCOUNT, 7: 7800, 8: 0, 9: 108, 10: 100}, {0: 111, 1: Ismael, 2: Sciarra, 3: ISCIARRA, 4: 515.124.4369, 5: 28.06.1987, 6: FI_ACCOUNT, 7: 7700, 8: 0, 9: 108, 10: 100}, {0: 160, 1: Louise, 2: Doran, 3: LDORAN, 4: 011.44.1345.629268, 5: 16.08.1987, 6: SA_REP, 7: 7500, 8: 0.3, 9: 146, 10: 80}, {0: 161, 1: Sarath, 2: Sewall, 3: SSEWALL, 4: 011.44.1345.529268, 5: 17.08.1987, 6: SA_REP, 7: 7000, 8: 0.25, 9: 146, 10: 80}, {0: 113, 1: Luis, 2: Popp, 3: LPOPP, 4: 515.124.4567, 5: 30.06.1987, 6: FI_ACCOUNT, 7: 6900, 8: 0, 9: 108, 10: 100}, {0: 165, 1: David, 2: Lee, 3: DLEE, 4: 011.44.1346.529268, 5: 21.08.1987, 6: SA_REP, 7: 6800, 8: 0.1, 9: 147, 10: 80}, {0: 123, 1: Shanta, 2: Vollman, 3: SVOLLMAN, 4: 650.123.4234, 5: 10.07.1987, 6: ST_MAN, 7: 6500, 8: 0, 9: 100, 10: 50}, {0: 203, 1: Susan, 2: Mavris, 3: SMAVRIS, 4: 515.123.7777, 5: 28.09.1987, 6: HR_REP, 7: 6500, 8: 0, 9: 101, 10: 40}, {0: 166, 1: Sundar, 2: Ande, 3: SANDE, 4: 011.44.1346.629268, 5: 22.08.1987, 6: SA_REP, 7: 6400, 8: 0.1, 9: 147, 10: 80}, {0: 179, 1: Charles, 2: Johnson, 3: CJOHNSON, 4: 011.44.1644.429262, 5: 04.09.1987, 6: SA_REP, 7: 6200, 8: 0.1, 9: 149, 10: 80}, {0: 173, 1: Sundita, 2: Kumar, 3: SKUMAR, 4: 011.44.1343.329268, 5: 29.08.1987, 6: SA_REP, 7: 6100, 8: 0.1, 9: 148, 10: 80}, {0: 105, 1: David, 2: Austin, 3: DAUSTIN, 4: 590.423.4569, 5: 22.06.1987, 6: IT_PROG, 7: 4800, 8: 0, 9: 103, 10: 60}, {0: 107, 1: Diana, 2: Lorentz, 3: DLORENTZ, 4: 590.423.5567, 5: 24.06.1987, 6: IT_PROG, 7: 4200, 8: 0, 9: 103, 10: 60}, {0: 184, 1: Nandita, 2: Sarchand, 3: NSARCHAN, 4: 650.509.1876, 5: 09.09.1987, 6: SH_CLERK, 7: 4200, 8: 0, 9: 121, 10: 50}, {0: 185, 1: Alexis, 2: Bull, 3: ABULL, 4: 650.509.2876, 5: 10.09.1987, 6: SH_CLERK, 7: 4100, 8: 0, 9: 121, 10: 50}, {0: 192, 1: Sarah, 2: Bell, 3: SBELL, 4: 650.501.1876, 5: 17.09.1987, 6: SH_CLERK, 7: 4000, 8: 0, 9: 123, 10: 50}, {0: 137, 1: Renske, 2: Ladwig, 3: RLADWIG, 4: 650.121.1234, 5: 24.07.1987, 6: ST_CLERK, 7: 3600, 8: 0, 9: 123, 10: 50}, {0: 133, 1: Jason, 2: Mallin, 3: JMALLIN, 4: 650.127.1934, 5: 20.07.1987, 6: ST_CLERK, 7: 3300, 8: 0, 9: 122, 10: 50}, {0: 138, 1: Stephen, 2: Stiles, 3: SSTILES, 4: 650.121.2034, 5: 25.07.1987, 6: ST_CLERK, 7: 3200, 8: 0, 9: 123, 10: 50}, {0: 180, 1: Winston, 2: Taylor, 3: WTAYLOR, 4: 650.507.9876, 5: 05.09.1987, 6: SH_CLERK, 7: 3200, 8: 0, 9: 120, 10: 50}, {0: 194, 1: Samuel, 2: McCain, 3: SMCCAIN, 4: 650.501.3876, 5: 19.09.1987, 6: SH_CLERK, 7: 3200, 8: 0, 9: 123, 10: 50}, {0: 115, 1: Alexander, 2: Khoo, 3: AKHOO, 4: 515.127.4562, 5: 02.07.1987, 6: PU_CLERK, 7: 3100, 8: 0, 9: 114, 10: 30}, {0: 142, 1: Curtis, 2: Davies, 3: CDAVIES, 4: 650.121.2994, 5: 29.07.1987, 6: ST_CLERK, 7: 3100, 8: 0, 9: 124, 10: 50}, {0: 116, 1: Shelli, 2: Baida, 3: SBAIDA, 4: 515.127.4563, 5: 03.07.1987, 6: PU_CLERK, 7: 2900, 8: 0, 9: 114, 10: 30}, {0: 117, 1: Sigal, 2: Tobias, 3: STOBIAS, 4: 515.127.4564, 5: 04.07.1987, 6: PU_CLERK, 7: 2800, 8: 0, 9: 114, 10: 30}, {0: 183, 1: Girard, 2: Geoni, 3: GGEONI, 4: 650.507.9879, 5: 08.09.1987, 6: SH_CLERK, 7: 2800, 8: 0, 9: 120, 10: 50}, {0: 143, 1: Randall, 2: Matos, 3: RMATOS, 4: 650.121.2874, 5: 30.07.1987, 6: ST_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 198, 1: Donald, 2: OConnell, 3: DOCONNEL, 4: 650.507.9833, 5: 23.09.1987, 6: SH_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 199, 1: Douglas, 2: Grant, 3: DGRANT, 4: 650.507.9844, 5: 24.09.1987, 6: SH_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 131, 1: James, 2: Marlow, 3: JAMRLOW, 4: 650.124.7234, 5: 18.07.1987, 6: ST_CLERK, 7: 2500, 8: 0, 9: 121, 10: 50}, {0: 140, 1: Joshua, 2: Patel, 3: JPATEL, 4: 650.121.1834, 5: 27.07.1987, 6: ST_CLERK, 7: 2500, 8: 0, 9: 123, 10: 50}, {0: 191, 1: Randall, 2: Perkins, 3: RPERKINS, 4: 650.505.4876, 5: 16.09.1987, 6: SH_CLERK, 7: 2500, 8: 0, 9: 122, 10: 50}, {0: 127, 1: James, 2: Landry, 3: JLANDRY, 4: 650.124.1334, 5: 14.07.1987, 6: ST_CLERK, 7: 2400, 8: 0, 9: 120, 10: 50}, {0: 128, 1: Steven, 2: Markle, 3: SMARKLE, 4: 650.124.1434, 5: 15.07.1987, 6: ST_CLERK, 7: 2200, 8: 0, 9: 120, 10: 50}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0db240aaf2068d868c9539644e906d73fc8ba068ffd34b2183866047e51bbd32",
    "sql": "SELECT * FROM employees WHERE hire_date > '1987-09-07'",
    "linq": "context.Employees.Where(row => row.HireDate > \"1987-09-07\").Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Email, row.PhoneNumber, row.HireDate, row.JobId, row.Salary, row.CommissionPct, row.ManagerId, row.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS0019: Operator '>' cannot be applied to operands of type 'DateOnly' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.68",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "addbbb3d3abc068cfcbea9df6e76c4cabf9dd1f32b9dc51fc9a02bbfef8affc1",
    "sql": "SELECT job_title FROM jobs WHERE min_salary > 9000",
    "linq": "context.Jobs.Where(row => row.MinSalary > 9000).Select(row => new { row.JobTitle }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "406d978ab1fc3bb8e4a163de2167159f9426b46c3f7de9b94b1fc1a4ce0de7e8",
    "sql": "SELECT job_title , max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
    "linq": "context.Jobs.Where(row => row.MaxSalary >= 12000 && row.MaxSalary <= 18000).Select(row => new { row.JobTitle, Diff = row.MaxSalary - row.MinSalary }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fab18ed544ab636034f2ae1a4ede27b964e6ceb11aa759f45463fc13af69db00",
    "sql": "SELECT email FROM employees WHERE commission_pct = \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",
    "linq": "context.Employees.Where(row => row.CommissionPct == \"null\" && row.Salary >= 7000 && row.Salary <= 12000 && row.DepartmentId == 50).Select(row => new { row.Email }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS0019: Operator '==' cannot be applied to operands of type 'decimal?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.45",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b123f100a94b4809a97a53e3f987a4ccae8391b2424de79a256b23754f305b4f",
    "sql": "SELECT employee_id , MAX(end_date) FROM job_history GROUP BY employee_id",
    "linq": "context.JobHistories.GroupBy(row => new { row.EmployeeId }).Select(group => new { group.Key.EmployeeId, MaxEndDate = group.Select(row => row.EndDate).Max() }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "73f10ab01d2cf0b904c2ef67e5ad7f48b266120a34083bd7cdf1c9cefdac910e",
    "sql": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
    "linq": "context.Employees.GroupBy(row => new { row.DepartmentId }).Where(group => group.Count(row => row.CommissionPct != null) > 10).Select(group => new { group.Key.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aa8f5920ac5c8a0cdc5a482163053ccc692a8d15a20c1ed1fda11b8b514f4fab",
    "sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id , manager_id HAVING COUNT(employee_id) >= 4",
    "linq": "context.Employees.GroupBy(row => new { row.DepartmentId, row.ManagerId }).Where(group => group.Count(row => row.EmployeeId != null) >= 4).Select(group => new { group.Key.DepartmentId }).Distinct().ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9524f5ebb54442a26c24fbdb9c00af4267e4d03d6a18eb0d808ec605d2a226c8",
    "sql": "SELECT department_id , AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
    "linq": "context.Employees.Where(row => row.CommissionPct != \"null\").GroupBy(row => new { row.DepartmentId }).Select(group => new { group.Key.DepartmentId, AverageSalary = group.Select(row => row.Salary).Average() }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS0019: Operator '!=' cannot be applied to operands of type 'decimal?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.65",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "928a7a968bd43db6e82ecd07ba2a345106647873d3e75c8e662cb73f9972a93e",
    "sql": "SELECT country_id , COUNT(*) FROM locations GROUP BY country_id",
    "linq": "context.Locations.GroupBy(row => new { row.CountryId }).Select(group => new { group.Key.CountryId, Count = group.Count() }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dd2c09e4b3c064dff1bf51e645de1677bdd17ea4df91e04d7c64754cc6980557",
    "sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2",
    "linq": "context.JobHistories.GroupBy(row => new { row.EmployeeId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.EmployeeId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8f7548dca2b7098baf59c1014ba2952c78f7f79777fe68db6cb58434469504e5",
    "sql": "SELECT T1.employee_id , T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id",
    "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Locations, joined => joined.T2.LocationId, T3 => T3.LocationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Countries, joined => joined.T3.CountryId, T4 => T4.CountryId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Select(row => new { row.T1.EmployeeId, row.T4.CountryName }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4e670485014e6e0809d53cb9198708a61e71668760cdb0ba4e03adc68e44d223",
    "sql": "SELECT T2.department_name , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name",
    "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DepartmentName }).Select(group => new { group.Key.DepartmentName, Count = group.Count() }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a3bcb9c593d8dca257660f9424e6a884549f8ab03d3e7c2cfd9529549d842cc7",
    "sql": "SELECT * FROM job_history AS T1 JOIN employees AS T2 ON T1.employee_id = T2.employee_id WHERE T2.salary >= 12000",
    "linq": "context.JobHistories.Join(context.Employees, T1 => T1.EmployeeId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Salary >= 12000).Select(row => new { T1Employeeid = rowT1..EmployeeId, rowT1..StartDate, rowT1..EndDate, T1Jobid = rowT1..JobId, T1Departmentid = rowT1..DepartmentId, T2Employeeid = rowT2..EmployeeId, rowT2..FirstName, rowT2..LastName, rowT2..Email, rowT2..PhoneNumber, rowT2..HireDate, T2Jobid = rowT2..JobId, rowT2..Salary, rowT2..CommissionPct, rowT2..ManagerId, T2Departmentid = rowT2..DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,537): error CS0103: The name 'DepartmentId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    42 Error(s)\n\nTime Elapsed 00:00:01.62",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "467f2f319779f9f76dc1b2044468ca72fb96f4f671062a7529af0674c56115b6",
    "sql": "SELECT job_title , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title",
    "linq": "context.Employees.Join(context.Jobs, T1 => T1.JobId, T2 => T2.JobId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.JobTitle }).Select(group => new { group.Key.JobTitle, AverageSalary = group.Select(row => row.T1.Salary).Average() }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "50dcd8c7d93c61127bf8345695ae8ed6ccd46dfb304eeedb4031cf9e03ee2117",
    "sql": "SELECT first_name , last_name FROM employees WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163 )",
    "linq": "context.Employees.Where(row => row.Salary > context.Employees.Where(row => row.EmployeeId == 163).Select(row => row.Salary).First()).Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a6788862f6906e923edbb6ac18cd5638eb8d26f5a644bc100952d84e09181f5d",
    "sql": "SELECT MIN(salary) , department_id FROM employees GROUP BY department_id",
    "linq": "context.Employees.GroupBy(row => new { row.DepartmentId }).Select(group => new { MinSalary = group.Select(row => row.Salary).Min(), group.Key.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c4af868647524e9438062edda9b3f5c716be0dad220cfe8523ad9769b0d22640",
    "sql": "SELECT first_name , last_name , department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)",
    "linq": "context.Employees.Where(row => row.Salary.HasValue && context.Employees.GroupBy(row => new { row.DepartmentId }).Select(group => MinSalary = group.Select(row => row.Salary).Min()).Contains(row.Salary.Value)).Select(row => new { row.FirstName, row.LastName, row.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,141): error CS0103: The name 'MinSalary' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.53",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3d051c7f9fe6c7e4b98b27f9a0be1a37cc76b76aa9f5175ed61cdf88ea93d87c",
    "sql": "SELECT employee_id FROM employees WHERE salary > (SELECT AVG(salary) FROM employees)",
    "linq": "context.Employees.Where(row => row.Salary > context.Employees.Select(row => row.Salary).Average()).Select(row => new { row.EmployeeId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ba44aa11a2e0167ce567c1cd9813266aa523abd6b9875030f326633854fe763b",
    "sql": "SELECT employee_id , salary FROM employees WHERE manager_id = (SELECT employee_id FROM employees WHERE first_name = 'Payam' )",
    "linq": "context.Employees.Where(row => row.ManagerId == context.Employees.Where(row => row.FirstName == \"Payam\").Select(row => row.EmployeeId).First()).Select(row => new { row.EmployeeId, row.Salary }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3ec7c9376389a3dd32cfcd41cbc86099d7c76c74571a25b0f0d32e8aaba1766c",
    "sql": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
    "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.DepartmentName }).Distinct().ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "758e92e518d0ace74288107c3493a8b9d9cd1106c9067a526d1b57034715e6b4",
    "sql": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
    "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.EmployeeId == row.T2.ManagerId).Select(row => new { rowT1..EmployeeId, rowT1..FirstName, rowT1..LastName, rowT1..Email, rowT1..PhoneNumber, rowT1..HireDate, rowT1..JobId, rowT1..Salary, rowT1..CommissionPct, T1Managerid = rowT1..ManagerId, T1Departmentid = rowT1..DepartmentId, T2Departmentid = rowT2..DepartmentId, rowT2..DepartmentName, T2Managerid = rowT2..ManagerId, rowT2..LocationId }).Distinct().ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,528): error CS0103: The name 'LocationId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    41 Error(s)\n\nTime Elapsed 00:00:01.57",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "054e36fd1b9814c958a474a215ebebe606355705784961242679fccca185f265",
    "sql": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
    "linq": "context.Employees.GroupBy(row => new { row.JobId }).Where(group => group.Average(row => row.Salary) > 8000).Select(group => new { group.Key.JobId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6d64e4d289056a7d3b42c231941d5fe25ee5bc40ea1f98cb0d79fec3fb004d15",
    "sql": "SELECT T1.employee_id , T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80",
    "linq": "context.Employees.Join(context.Jobs, T1 => T1.JobId, T2 => T2.JobId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DepartmentId == 80).Select(row => new { row.T1.EmployeeId, row.T2.JobTitle }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8ac1330c6c01454a5f95d64b57719ad3366b942cdd349aa7a1a765d3b8578119",
    "sql": "SELECT T1.first_name , T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance'",
    "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DepartmentName == \"Finance\").Select(row => new { row.T1.FirstName, row.T1.JobId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "891b77c45112db9bc338b4f866bc8912bd8fd1c8a04577ef5648b1da5e12498d",
    "sql": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
    "linq": "context.Employees.Where(row => row.Salary >= context.Employees.Select(row => row.Salary).Min() && row.Salary <= 2500).Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Email, row.PhoneNumber, row.HireDate, row.JobId, row.Salary, row.CommissionPct, row.ManagerId, row.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 119, 1: Karen, 2: Colmenares, 3: KCOLMENA, 4: 515.127.4566, 5: 1987-07-06, 6: PU_CLERK, 7: 2500, 8: 0, 9: 114, 10: 30}, {0: 127, 1: James, 2: Landry, 3: JLANDRY, 4: 650.124.1334, 5: 1987-07-14, 6: ST_CLERK, 7: 2400, 8: 0, 9: 120, 10: 50}, {0: 128, 1: Steven, 2: Markle, 3: SMARKLE, 4: 650.124.1434, 5: 1987-07-15, 6: ST_CLERK, 7: 2200, 8: 0, 9: 120, 10: 50}, {0: 131, 1: James, 2: Marlow, 3: JAMRLOW, 4: 650.124.7234, 5: 1987-07-18, 6: ST_CLERK, 7: 2500, 8: 0, 9: 121, 10: 50}, {0: 132, 1: TJ, 2: Olson, 3: TJOLSON, 4: 650.124.8234, 5: 1987-07-19, 6: ST_CLERK, 7: 2100, 8: 0, 9: 121, 10: 50}, {0: 135, 1: Ki, 2: Gee, 3: KGEE, 4: 650.127.1734, 5: 1987-07-22, 6: ST_CLERK, 7: 2400, 8: 0, 9: 122, 10: 50}, {0: 136, 1: Hazel, 2: Philtanker, 3: HPHILTAN, 4: 650.127.1634, 5: 1987-07-23, 6: ST_CLERK, 7: 2200, 8: 0, 9: 122, 10: 50}, {0: 140, 1: Joshua, 2: Patel, 3: JPATEL, 4: 650.121.1834, 5: 1987-07-27, 6: ST_CLERK, 7: 2500, 8: 0, 9: 123, 10: 50}, {0: 144, 1: Peter, 2: Vargas, 3: PVARGAS, 4: 650.121.2004, 5: 1987-07-31, 6: ST_CLERK, 7: 2500, 8: 0, 9: 124, 10: 50}, {0: 182, 1: Martha, 2: Sullivan, 3: MSULLIVA, 4: 650.507.9878, 5: 1987-09-07, 6: SH_CLERK, 7: 2500, 8: 0, 9: 120, 10: 50}, {0: 191, 1: Randall, 2: Perkins, 3: RPERKINS, 4: 650.505.4876, 5: 1987-09-16, 6: SH_CLERK, 7: 2500, 8: 0, 9: 122, 10: 50}]\", linq_results: \"[{0: 119, 1: Karen, 2: Colmenares, 3: KCOLMENA, 4: 515.127.4566, 5: 06.07.1987, 6: PU_CLERK, 7: 2500, 8: 0, 9: 114, 10: 30}, {0: 127, 1: James, 2: Landry, 3: JLANDRY, 4: 650.124.1334, 5: 14.07.1987, 6: ST_CLERK, 7: 2400, 8: 0, 9: 120, 10: 50}, {0: 128, 1: Steven, 2: Markle, 3: SMARKLE, 4: 650.124.1434, 5: 15.07.1987, 6: ST_CLERK, 7: 2200, 8: 0, 9: 120, 10: 50}, {0: 131, 1: James, 2: Marlow, 3: JAMRLOW, 4: 650.124.7234, 5: 18.07.1987, 6: ST_CLERK, 7: 2500, 8: 0, 9: 121, 10: 50}, {0: 132, 1: TJ, 2: Olson, 3: TJOLSON, 4: 650.124.8234, 5: 19.07.1987, 6: ST_CLERK, 7: 2100, 8: 0, 9: 121, 10: 50}, {0: 135, 1: Ki, 2: Gee, 3: KGEE, 4: 650.127.1734, 5: 22.07.1987, 6: ST_CLERK, 7: 2400, 8: 0, 9: 122, 10: 50}, {0: 136, 1: Hazel, 2: Philtanker, 3: HPHILTAN, 4: 650.127.1634, 5: 23.07.1987, 6: ST_CLERK, 7: 2200, 8: 0, 9: 122, 10: 50}, {0: 140, 1: Joshua, 2: Patel, 3: JPATEL, 4: 650.121.1834, 5: 27.07.1987, 6: ST_CLERK, 7: 2500, 8: 0, 9: 123, 10: 50}, {0: 144, 1: Peter, 2: Vargas, 3: PVARGAS, 4: 650.121.2004, 5: 31.07.1987, 6: ST_CLERK, 7: 2500, 8: 0, 9: 124, 10: 50}, {0: 182, 1: Martha, 2: Sullivan, 3: MSULLIVA, 4: 650.507.9878, 5: 07.09.1987, 6: SH_CLERK, 7: 2500, 8: 0, 9: 120, 10: 50}, {0: 191, 1: Randall, 2: Perkins, 3: RPERKINS, 4: 650.505.4876, 5: 16.09.1987, 6: SH_CLERK, 7: 2500, 8: 0, 9: 122, 10: 50}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2a11dc72ae279105f25f5c137452020f2e2a1d71e89e1e6d8b83b1fcf08827dd",
    "sql": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
    "linq": "context.Employees.Where(row => row.DepartmentId.HasValue && !context.Departments.Where(row => row.ManagerId >= 100 && row.ManagerId <= 200).Select(row => row.DepartmentId).Contains(row.DepartmentId.Value)).Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Email, row.PhoneNumber, row.HireDate, row.JobId, row.Salary, row.CommissionPct, row.ManagerId, row.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 178, 1: Kimberely, 2: Grant, 3: KGRANT, 4: 011.44.1644.429263, 5: 1987-09-03, 6: SA_REP, 7: 7000, 8: 0.15, 9: 149, 10: 0}, {0: 201, 1: Michael, 2: Hartstein, 3: MHARTSTE, 4: 515.123.5555, 5: 1987-09-26, 6: MK_MAN, 7: 13000, 8: 0, 9: 100, 10: 20}, {0: 202, 1: Pat, 2: Fay, 3: PFAY, 4: 603.123.6666, 5: 1987-09-27, 6: MK_REP, 7: 6000, 8: 0, 9: 201, 10: 20}, {0: 203, 1: Susan, 2: Mavris, 3: SMAVRIS, 4: 515.123.7777, 5: 1987-09-28, 6: HR_REP, 7: 6500, 8: 0, 9: 101, 10: 40}, {0: 204, 1: Hermann, 2: Baer, 3: HBAER, 4: 515.123.8888, 5: 1987-09-29, 6: PR_REP, 7: 10000, 8: 0, 9: 101, 10: 70}, {0: 205, 1: Shelley, 2: Higgins, 3: SHIGGINS, 4: 515.123.8080, 5: 1987-09-30, 6: AC_MGR, 7: 12000, 8: 0, 9: 101, 10: 110}, {0: 206, 1: William, 2: Gietz, 3: WGIETZ, 4: 515.123.8181, 5: 1987-10-01, 6: AC_ACCOUNT, 7: 8300, 8: 0, 9: 205, 10: 110}]\", linq_results: \"[{0: 178, 1: Kimberely, 2: Grant, 3: KGRANT, 4: 011.44.1644.429263, 5: 03.09.1987, 6: SA_REP, 7: 7000, 8: 0.15, 9: 149, 10: 0}, {0: 201, 1: Michael, 2: Hartstein, 3: MHARTSTE, 4: 515.123.5555, 5: 26.09.1987, 6: MK_MAN, 7: 13000, 8: 0, 9: 100, 10: 20}, {0: 202, 1: Pat, 2: Fay, 3: PFAY, 4: 603.123.6666, 5: 27.09.1987, 6: MK_REP, 7: 6000, 8: 0, 9: 201, 10: 20}, {0: 203, 1: Susan, 2: Mavris, 3: SMAVRIS, 4: 515.123.7777, 5: 28.09.1987, 6: HR_REP, 7: 6500, 8: 0, 9: 101, 10: 40}, {0: 204, 1: Hermann, 2: Baer, 3: HBAER, 4: 515.123.8888, 5: 29.09.1987, 6: PR_REP, 7: 10000, 8: 0, 9: 101, 10: 70}, {0: 205, 1: Shelley, 2: Higgins, 3: SHIGGINS, 4: 515.123.8080, 5: 30.09.1987, 6: AC_MGR, 7: 12000, 8: 0, 9: 101, 10: 110}, {0: 206, 1: William, 2: Gietz, 3: WGIETZ, 4: 515.123.8181, 5: 01.10.1987, 6: AC_ACCOUNT, 7: 8300, 8: 0, 9: 205, 10: 110}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7af2e349f65fb6635d89fadeaa9933a9ea0a00566b0e343b7b6ed0773642c7eb",
    "sql": "SELECT first_name , last_name , hire_date FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = \"Clara\")",
    "linq": "context.Employees.Where(row => row.DepartmentId == context.Employees.Where(row => row.FirstName == \"Clara\").Select(row => row.DepartmentId).First()).Select(row => new { row.FirstName, row.LastName, row.HireDate }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: John, 1: Russell, 2: 1987-08-01}, {0: Karen, 1: Partners, 2: 1987-08-02}, {0: Alberto, 1: Errazuriz, 2: 1987-08-03}, {0: Gerald, 1: Cambrault, 2: 1987-08-04}, {0: Eleni, 1: Zlotkey, 2: 1987-08-05}, {0: Peter, 1: Tucker, 2: 1987-08-06}, {0: David, 1: Bernstein, 2: 1987-08-07}, {0: Peter, 1: Hall, 2: 1987-08-08}, {0: Christopher, 1: Olsen, 2: 1987-08-09}, {0: Nanette, 1: Cambrault, 2: 1987-08-10}, {0: Oliver, 1: Tuvault, 2: 1987-08-11}, {0: Janette, 1: King, 2: 1987-08-12}, {0: Patrick, 1: Sully, 2: 1987-08-13}, {0: Allan, 1: McEwen, 2: 1987-08-14}, {0: Lindsey, 1: Smith, 2: 1987-08-15}, {0: Louise, 1: Doran, 2: 1987-08-16}, {0: Sarath, 1: Sewall, 2: 1987-08-17}, {0: Clara, 1: Vishney, 2: 1987-08-18}, {0: Danielle, 1: Greene, 2: 1987-08-19}, {0: Mattea, 1: Marvins, 2: 1987-08-20}, {0: David, 1: Lee, 2: 1987-08-21}, {0: Sundar, 1: Ande, 2: 1987-08-22}, {0: Amit, 1: Banda, 2: 1987-08-23}, {0: Lisa, 1: Ozer, 2: 1987-08-24}, {0: Harrison, 1: Bloom, 2: 1987-08-25}, {0: Tayler, 1: Fox, 2: 1987-08-26}, {0: William, 1: Smith, 2: 1987-08-27}, {0: Elizabeth, 1: Bates, 2: 1987-08-28}, {0: Sundita, 1: Kumar, 2: 1987-08-29}, {0: Ellen, 1: Abel, 2: 1987-08-30}, {0: Alyssa, 1: Hutton, 2: 1987-08-31}, {0: Jonathon, 1: Taylor, 2: 1987-09-01}, {0: Jack, 1: Livingston, 2: 1987-09-02}, {0: Charles, 1: Johnson, 2: 1987-09-04}]\", linq_results: \"[{0: John, 1: Russell, 2: 01.08.1987}, {0: Karen, 1: Partners, 2: 02.08.1987}, {0: Alberto, 1: Errazuriz, 2: 03.08.1987}, {0: Gerald, 1: Cambrault, 2: 04.08.1987}, {0: Eleni, 1: Zlotkey, 2: 05.08.1987}, {0: Peter, 1: Tucker, 2: 06.08.1987}, {0: David, 1: Bernstein, 2: 07.08.1987}, {0: Peter, 1: Hall, 2: 08.08.1987}, {0: Christopher, 1: Olsen, 2: 09.08.1987}, {0: Nanette, 1: Cambrault, 2: 10.08.1987}, {0: Oliver, 1: Tuvault, 2: 11.08.1987}, {0: Janette, 1: King, 2: 12.08.1987}, {0: Patrick, 1: Sully, 2: 13.08.1987}, {0: Allan, 1: McEwen, 2: 14.08.1987}, {0: Lindsey, 1: Smith, 2: 15.08.1987}, {0: Louise, 1: Doran, 2: 16.08.1987}, {0: Sarath, 1: Sewall, 2: 17.08.1987}, {0: Clara, 1: Vishney, 2: 18.08.1987}, {0: Danielle, 1: Greene, 2: 19.08.1987}, {0: Mattea, 1: Marvins, 2: 20.08.1987}, {0: David, 1: Lee, 2: 21.08.1987}, {0: Sundar, 1: Ande, 2: 22.08.1987}, {0: Amit, 1: Banda, 2: 23.08.1987}, {0: Lisa, 1: Ozer, 2: 24.08.1987}, {0: Harrison, 1: Bloom, 2: 25.08.1987}, {0: Tayler, 1: Fox, 2: 26.08.1987}, {0: William, 1: Smith, 2: 27.08.1987}, {0: Elizabeth, 1: Bates, 2: 28.08.1987}, {0: Sundita, 1: Kumar, 2: 29.08.1987}, {0: Ellen, 1: Abel, 2: 30.08.1987}, {0: Alyssa, 1: Hutton, 2: 31.08.1987}, {0: Jonathon, 1: Taylor, 2: 01.09.1987}, {0: Jack, 1: Livingston, 2: 02.09.1987}, {0: Charles, 1: Johnson, 2: 04.09.1987}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c94bd9cbb2bc0d6cf0a93eaaff20ae3f26cae7e7bb2d562157bcfc3780339a1b",
    "sql": "SELECT first_name , last_name , hire_date FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\") AND first_name != \"Clara\"",
    "linq": "context.Employees.Where(row => row.DepartmentId == context.Employees.Where(row => row.FirstName == \"Clara\").Select(row => row.DepartmentId).First() && row.FirstName != \"Clara\").Select(row => new { row.FirstName, row.LastName, row.HireDate }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: John, 1: Russell, 2: 1987-08-01}, {0: Karen, 1: Partners, 2: 1987-08-02}, {0: Alberto, 1: Errazuriz, 2: 1987-08-03}, {0: Gerald, 1: Cambrault, 2: 1987-08-04}, {0: Eleni, 1: Zlotkey, 2: 1987-08-05}, {0: Peter, 1: Tucker, 2: 1987-08-06}, {0: David, 1: Bernstein, 2: 1987-08-07}, {0: Peter, 1: Hall, 2: 1987-08-08}, {0: Christopher, 1: Olsen, 2: 1987-08-09}, {0: Nanette, 1: Cambrault, 2: 1987-08-10}, {0: Oliver, 1: Tuvault, 2: 1987-08-11}, {0: Janette, 1: King, 2: 1987-08-12}, {0: Patrick, 1: Sully, 2: 1987-08-13}, {0: Allan, 1: McEwen, 2: 1987-08-14}, {0: Lindsey, 1: Smith, 2: 1987-08-15}, {0: Louise, 1: Doran, 2: 1987-08-16}, {0: Sarath, 1: Sewall, 2: 1987-08-17}, {0: Danielle, 1: Greene, 2: 1987-08-19}, {0: Mattea, 1: Marvins, 2: 1987-08-20}, {0: David, 1: Lee, 2: 1987-08-21}, {0: Sundar, 1: Ande, 2: 1987-08-22}, {0: Amit, 1: Banda, 2: 1987-08-23}, {0: Lisa, 1: Ozer, 2: 1987-08-24}, {0: Harrison, 1: Bloom, 2: 1987-08-25}, {0: Tayler, 1: Fox, 2: 1987-08-26}, {0: William, 1: Smith, 2: 1987-08-27}, {0: Elizabeth, 1: Bates, 2: 1987-08-28}, {0: Sundita, 1: Kumar, 2: 1987-08-29}, {0: Ellen, 1: Abel, 2: 1987-08-30}, {0: Alyssa, 1: Hutton, 2: 1987-08-31}, {0: Jonathon, 1: Taylor, 2: 1987-09-01}, {0: Jack, 1: Livingston, 2: 1987-09-02}, {0: Charles, 1: Johnson, 2: 1987-09-04}]\", linq_results: \"[{0: John, 1: Russell, 2: 01.08.1987}, {0: Karen, 1: Partners, 2: 02.08.1987}, {0: Alberto, 1: Errazuriz, 2: 03.08.1987}, {0: Gerald, 1: Cambrault, 2: 04.08.1987}, {0: Eleni, 1: Zlotkey, 2: 05.08.1987}, {0: Peter, 1: Tucker, 2: 06.08.1987}, {0: David, 1: Bernstein, 2: 07.08.1987}, {0: Peter, 1: Hall, 2: 08.08.1987}, {0: Christopher, 1: Olsen, 2: 09.08.1987}, {0: Nanette, 1: Cambrault, 2: 10.08.1987}, {0: Oliver, 1: Tuvault, 2: 11.08.1987}, {0: Janette, 1: King, 2: 12.08.1987}, {0: Patrick, 1: Sully, 2: 13.08.1987}, {0: Allan, 1: McEwen, 2: 14.08.1987}, {0: Lindsey, 1: Smith, 2: 15.08.1987}, {0: Louise, 1: Doran, 2: 16.08.1987}, {0: Sarath, 1: Sewall, 2: 17.08.1987}, {0: Danielle, 1: Greene, 2: 19.08.1987}, {0: Mattea, 1: Marvins, 2: 20.08.1987}, {0: David, 1: Lee, 2: 21.08.1987}, {0: Sundar, 1: Ande, 2: 22.08.1987}, {0: Amit, 1: Banda, 2: 23.08.1987}, {0: Lisa, 1: Ozer, 2: 24.08.1987}, {0: Harrison, 1: Bloom, 2: 25.08.1987}, {0: Tayler, 1: Fox, 2: 26.08.1987}, {0: William, 1: Smith, 2: 27.08.1987}, {0: Elizabeth, 1: Bates, 2: 28.08.1987}, {0: Sundita, 1: Kumar, 2: 29.08.1987}, {0: Ellen, 1: Abel, 2: 30.08.1987}, {0: Alyssa, 1: Hutton, 2: 31.08.1987}, {0: Jonathon, 1: Taylor, 2: 01.09.1987}, {0: Jack, 1: Livingston, 2: 02.09.1987}, {0: Charles, 1: Johnson, 2: 04.09.1987}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1335d53e0fe00f26d5c65a7b044801256641b9b8778faa87b8e9440581dc0ae6",
    "sql": "SELECT employee_id , first_name , last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",
    "linq": "context.Employees.Where(row => row.DepartmentId.HasValue && context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%T%\")).Select(row => row.DepartmentId).Contains(row.DepartmentId.Value)).Select(row => new { row.EmployeeId, row.FirstName, row.LastName }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "61cbfc3a709600cea1667e0ee1f68b8ed51087bb389b1a0d770d5522b219af70",
    "sql": "SELECT employee_id , first_name , last_name , salary FROM employees WHERE salary > ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
    "linq": "context.Employees.Where(row => row.Salary > context.Employees.Select(row => row.Salary).Average() && row.DepartmentId.HasValue && context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%J%\")).Select(row => row.DepartmentId).Contains(row.DepartmentId.Value)).Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Salary }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a4896b4a6c5f36842e0c49a92078fb4953a67199dc8e9367441f27965fb27c59",
    "sql": "SELECT employee_id , job_id FROM employees WHERE salary < ( SELECT min(salary) FROM employees WHERE job_id = 'MK_MAN' )",
    "linq": "context.Employees.Where(row => row.Salary < context.Employees.Where(row => row.JobId == \"MK_MAN\").Select(row => row.Salary).Min()).Select(row => new { row.EmployeeId, row.JobId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8feca5cffc352b31c765f2a145935b291d5e6f1fa2b86449ed08bc2087b8035d",
    "sql": "SELECT employee_id , first_name , last_name , job_id FROM employees WHERE salary > ( SELECT max(salary) FROM employees WHERE job_id = 'PU_MAN' )",
    "linq": "context.Employees.Where(row => row.Salary > context.Employees.Where(row => row.JobId == \"PU_MAN\").Select(row => row.Salary).Max()).Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.JobId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dc5b414c8db68ce1ceefc4670c5c8a94754c2ffb6974d46073f2f862c4789d11",
    "sql": "SELECT department_id , SUM(salary) FROM employees GROUP BY department_id HAVING count(*) >= 2",
    "linq": "context.Employees.GroupBy(row => new { row.DepartmentId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.DepartmentId, SumSalary = group.Select(row => row.Salary).Sum() }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "93819dbe7a72e548b1e527f511518d780edb05220b7d8f7882f131c0235b3ec6",
    "sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
    "linq": "context.Employees.Where(row => !context.JobHistories.Select(row => row.EmployeeId).Contains(row.EmployeeId)).Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Email, row.PhoneNumber, row.HireDate, row.JobId, row.Salary, row.CommissionPct, row.ManagerId, row.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 100, 1: Steven, 2: King, 3: SKING, 4: 515.123.4567, 5: 1987-06-17, 6: AD_PRES, 7: 24000, 8: 0, 9: 0, 10: 90}, {0: 103, 1: Alexander, 2: Hunold, 3: AHUNOLD, 4: 590.423.4567, 5: 1987-06-20, 6: IT_PROG, 7: 9000, 8: 0, 9: 102, 10: 60}, {0: 104, 1: Bruce, 2: Ernst, 3: BERNST, 4: 590.423.4568, 5: 1987-06-21, 6: IT_PROG, 7: 6000, 8: 0, 9: 103, 10: 60}, {0: 105, 1: David, 2: Austin, 3: DAUSTIN, 4: 590.423.4569, 5: 1987-06-22, 6: IT_PROG, 7: 4800, 8: 0, 9: 103, 10: 60}, {0: 106, 1: Valli, 2: Pataballa, 3: VPATABAL, 4: 590.423.4560, 5: 1987-06-23, 6: IT_PROG, 7: 4800, 8: 0, 9: 103, 10: 60}, {0: 107, 1: Diana, 2: Lorentz, 3: DLORENTZ, 4: 590.423.5567, 5: 1987-06-24, 6: IT_PROG, 7: 4200, 8: 0, 9: 103, 10: 60}, {0: 108, 1: Nancy, 2: Greenberg, 3: NGREENBE, 4: 515.124.4569, 5: 1987-06-25, 6: FI_MGR, 7: 12000, 8: 0, 9: 101, 10: 100}, {0: 109, 1: Daniel, 2: Faviet, 3: DFAVIET, 4: 515.124.4169, 5: 1987-06-26, 6: FI_ACCOUNT, 7: 9000, 8: 0, 9: 108, 10: 100}, {0: 110, 1: John, 2: Chen, 3: JCHEN, 4: 515.124.4269, 5: 1987-06-27, 6: FI_ACCOUNT, 7: 8200, 8: 0, 9: 108, 10: 100}, {0: 111, 1: Ismael, 2: Sciarra, 3: ISCIARRA, 4: 515.124.4369, 5: 1987-06-28, 6: FI_ACCOUNT, 7: 7700, 8: 0, 9: 108, 10: 100}, {0: 112, 1: Jose Manuel, 2: Urman, 3: JMURMAN, 4: 515.124.4469, 5: 1987-06-29, 6: FI_ACCOUNT, 7: 7800, 8: 0, 9: 108, 10: 100}, {0: 113, 1: Luis, 2: Popp, 3: LPOPP, 4: 515.124.4567, 5: 1987-06-30, 6: FI_ACCOUNT, 7: 6900, 8: 0, 9: 108, 10: 100}, {0: 115, 1: Alexander, 2: Khoo, 3: AKHOO, 4: 515.127.4562, 5: 1987-07-02, 6: PU_CLERK, 7: 3100, 8: 0, 9: 114, 10: 30}, {0: 116, 1: Shelli, 2: Baida, 3: SBAIDA, 4: 515.127.4563, 5: 1987-07-03, 6: PU_CLERK, 7: 2900, 8: 0, 9: 114, 10: 30}, {0: 117, 1: Sigal, 2: Tobias, 3: STOBIAS, 4: 515.127.4564, 5: 1987-07-04, 6: PU_CLERK, 7: 2800, 8: 0, 9: 114, 10: 30}, {0: 118, 1: Guy, 2: Himuro, 3: GHIMURO, 4: 515.127.4565, 5: 1987-07-05, 6: PU_CLERK, 7: 2600, 8: 0, 9: 114, 10: 30}, {0: 119, 1: Karen, 2: Colmenares, 3: KCOLMENA, 4: 515.127.4566, 5: 1987-07-06, 6: PU_CLERK, 7: 2500, 8: 0, 9: 114, 10: 30}, {0: 120, 1: Matthew, 2: Weiss, 3: MWEISS, 4: 650.123.1234, 5: 1987-07-07, 6: ST_MAN, 7: 8000, 8: 0, 9: 100, 10: 50}, {0: 121, 1: Adam, 2: Fripp, 3: AFRIPP, 4: 650.123.2234, 5: 1987-07-08, 6: ST_MAN, 7: 8200, 8: 0, 9: 100, 10: 50}, {0: 123, 1: Shanta, 2: Vollman, 3: SVOLLMAN, 4: 650.123.4234, 5: 1987-07-10, 6: ST_MAN, 7: 6500, 8: 0, 9: 100, 10: 50}, {0: 124, 1: Kevin, 2: Mourgos, 3: KMOURGOS, 4: 650.123.5234, 5: 1987-07-11, 6: ST_MAN, 7: 5800, 8: 0, 9: 100, 10: 50}, {0: 125, 1: Julia, 2: Nayer, 3: JNAYER, 4: 650.124.1214, 5: 1987-07-12, 6: ST_CLERK, 7: 3200, 8: 0, 9: 120, 10: 50}, {0: 126, 1: Irene, 2: Mikkilineni, 3: IMIKKILI, 4: 650.124.1224, 5: 1987-07-13, 6: ST_CLERK, 7: 2700, 8: 0, 9: 120, 10: 50}, {0: 127, 1: James, 2: Landry, 3: JLANDRY, 4: 650.124.1334, 5: 1987-07-14, 6: ST_CLERK, 7: 2400, 8: 0, 9: 120, 10: 50}, {0: 128, 1: Steven, 2: Markle, 3: SMARKLE, 4: 650.124.1434, 5: 1987-07-15, 6: ST_CLERK, 7: 2200, 8: 0, 9: 120, 10: 50}, {0: 129, 1: Laura, 2: Bissot, 3: LBISSOT, 4: 650.124.5234, 5: 1987-07-16, 6: ST_CLERK, 7: 3300, 8: 0, 9: 121, 10: 50}, {0: 130, 1: Mozhe, 2: Atkinson, 3: MATKINSO, 4: 650.124.6234, 5: 1987-07-17, 6: ST_CLERK, 7: 2800, 8: 0, 9: 121, 10: 50}, {0: 131, 1: James, 2: Marlow, 3: JAMRLOW, 4: 650.124.7234, 5: 1987-07-18, 6: ST_CLERK, 7: 2500, 8: 0, 9: 121, 10: 50}, {0: 132, 1: TJ, 2: Olson, 3: TJOLSON, 4: 650.124.8234, 5: 1987-07-19, 6: ST_CLERK, 7: 2100, 8: 0, 9: 121, 10: 50}, {0: 133, 1: Jason, 2: Mallin, 3: JMALLIN, 4: 650.127.1934, 5: 1987-07-20, 6: ST_CLERK, 7: 3300, 8: 0, 9: 122, 10: 50}, {0: 134, 1: Michael, 2: Rogers, 3: MROGERS, 4: 650.127.1834, 5: 1987-07-21, 6: ST_CLERK, 7: 2900, 8: 0, 9: 122, 10: 50}, {0: 135, 1: Ki, 2: Gee, 3: KGEE, 4: 650.127.1734, 5: 1987-07-22, 6: ST_CLERK, 7: 2400, 8: 0, 9: 122, 10: 50}, {0: 136, 1: Hazel, 2: Philtanker, 3: HPHILTAN, 4: 650.127.1634, 5: 1987-07-23, 6: ST_CLERK, 7: 2200, 8: 0, 9: 122, 10: 50}, {0: 137, 1: Renske, 2: Ladwig, 3: RLADWIG, 4: 650.121.1234, 5: 1987-07-24, 6: ST_CLERK, 7: 3600, 8: 0, 9: 123, 10: 50}, {0: 138, 1: Stephen, 2: Stiles, 3: SSTILES, 4: 650.121.2034, 5: 1987-07-25, 6: ST_CLERK, 7: 3200, 8: 0, 9: 123, 10: 50}, {0: 139, 1: John, 2: Seo, 3: JSEO, 4: 650.121.2019, 5: 1987-07-26, 6: ST_CLERK, 7: 2700, 8: 0, 9: 123, 10: 50}, {0: 140, 1: Joshua, 2: Patel, 3: JPATEL, 4: 650.121.1834, 5: 1987-07-27, 6: ST_CLERK, 7: 2500, 8: 0, 9: 123, 10: 50}, {0: 141, 1: Trenna, 2: Rajs, 3: TRAJS, 4: 650.121.8009, 5: 1987-07-28, 6: ST_CLERK, 7: 3500, 8: 0, 9: 124, 10: 50}, {0: 142, 1: Curtis, 2: Davies, 3: CDAVIES, 4: 650.121.2994, 5: 1987-07-29, 6: ST_CLERK, 7: 3100, 8: 0, 9: 124, 10: 50}, {0: 143, 1: Randall, 2: Matos, 3: RMATOS, 4: 650.121.2874, 5: 1987-07-30, 6: ST_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 144, 1: Peter, 2: Vargas, 3: PVARGAS, 4: 650.121.2004, 5: 1987-07-31, 6: ST_CLERK, 7: 2500, 8: 0, 9: 124, 10: 50}, {0: 145, 1: John, 2: Russell, 3: JRUSSEL, 4: 011.44.1344.429268, 5: 1987-08-01, 6: SA_MAN, 7: 14000, 8: 0.4, 9: 100, 10: 80}, {0: 146, 1: Karen, 2: Partners, 3: KPARTNER, 4: 011.44.1344.467268, 5: 1987-08-02, 6: SA_MAN, 7: 13500, 8: 0.3, 9: 100, 10: 80}, {0: 147, 1: Alberto, 2: Errazuriz, 3: AERRAZUR, 4: 011.44.1344.429278, 5: 1987-08-03, 6: SA_MAN, 7: 12000, 8: 0.3, 9: 100, 10: 80}, {0: 148, 1: Gerald, 2: Cambrault, 3: GCAMBRAU, 4: 011.44.1344.619268, 5: 1987-08-04, 6: SA_MAN, 7: 11000, 8: 0.3, 9: 100, 10: 80}, {0: 149, 1: Eleni, 2: Zlotkey, 3: EZLOTKEY, 4: 011.44.1344.429018, 5: 1987-08-05, 6: SA_MAN, 7: 10500, 8: 0.2, 9: 100, 10: 80}, {0: 150, 1: Peter, 2: Tucker, 3: PTUCKER, 4: 011.44.1344.129268, 5: 1987-08-06, 6: SA_REP, 7: 10000, 8: 0.3, 9: 145, 10: 80}, {0: 151, 1: David, 2: Bernstein, 3: DBERNSTE, 4: 011.44.1344.345268, 5: 1987-08-07, 6: SA_REP, 7: 9500, 8: 0.25, 9: 145, 10: 80}, {0: 152, 1: Peter, 2: Hall, 3: PHALL, 4: 011.44.1344.478968, 5: 1987-08-08, 6: SA_REP, 7: 9000, 8: 0.25, 9: 145, 10: 80}, {0: 153, 1: Christopher, 2: Olsen, 3: COLSEN, 4: 011.44.1344.498718, 5: 1987-08-09, 6: SA_REP, 7: 8000, 8: 0.2, 9: 145, 10: 80}, {0: 154, 1: Nanette, 2: Cambrault, 3: NCAMBRAU, 4: 011.44.1344.987668, 5: 1987-08-10, 6: SA_REP, 7: 7500, 8: 0.2, 9: 145, 10: 80}, {0: 155, 1: Oliver, 2: Tuvault, 3: OTUVAULT, 4: 011.44.1344.486508, 5: 1987-08-11, 6: SA_REP, 7: 7000, 8: 0.15, 9: 145, 10: 80}, {0: 156, 1: Janette, 2: King, 3: JKING, 4: 011.44.1345.429268, 5: 1987-08-12, 6: SA_REP, 7: 10000, 8: 0.35, 9: 146, 10: 80}, {0: 157, 1: Patrick, 2: Sully, 3: PSULLY, 4: 011.44.1345.929268, 5: 1987-08-13, 6: SA_REP, 7: 9500, 8: 0.35, 9: 146, 10: 80}, {0: 158, 1: Allan, 2: McEwen, 3: AMCEWEN, 4: 011.44.1345.829268, 5: 1987-08-14, 6: SA_REP, 7: 9000, 8: 0.35, 9: 146, 10: 80}, {0: 159, 1: Lindsey, 2: Smith, 3: LSMITH, 4: 011.44.1345.729268, 5: 1987-08-15, 6: SA_REP, 7: 8000, 8: 0.3, 9: 146, 10: 80}, {0: 160, 1: Louise, 2: Doran, 3: LDORAN, 4: 011.44.1345.629268, 5: 1987-08-16, 6: SA_REP, 7: 7500, 8: 0.3, 9: 146, 10: 80}, {0: 161, 1: Sarath, 2: Sewall, 3: SSEWALL, 4: 011.44.1345.529268, 5: 1987-08-17, 6: SA_REP, 7: 7000, 8: 0.25, 9: 146, 10: 80}, {0: 162, 1: Clara, 2: Vishney, 3: CVISHNEY, 4: 011.44.1346.129268, 5: 1987-08-18, 6: SA_REP, 7: 10500, 8: 0.25, 9: 147, 10: 80}, {0: 163, 1: Danielle, 2: Greene, 3: DGREENE, 4: 011.44.1346.229268, 5: 1987-08-19, 6: SA_REP, 7: 9500, 8: 0.15, 9: 147, 10: 80}, {0: 164, 1: Mattea, 2: Marvins, 3: MMARVINS, 4: 011.44.1346.329268, 5: 1987-08-20, 6: SA_REP, 7: 7200, 8: 0.1, 9: 147, 10: 80}, {0: 165, 1: David, 2: Lee, 3: DLEE, 4: 011.44.1346.529268, 5: 1987-08-21, 6: SA_REP, 7: 6800, 8: 0.1, 9: 147, 10: 80}, {0: 166, 1: Sundar, 2: Ande, 3: SANDE, 4: 011.44.1346.629268, 5: 1987-08-22, 6: SA_REP, 7: 6400, 8: 0.1, 9: 147, 10: 80}, {0: 167, 1: Amit, 2: Banda, 3: ABANDA, 4: 011.44.1346.729268, 5: 1987-08-23, 6: SA_REP, 7: 6200, 8: 0.1, 9: 147, 10: 80}, {0: 168, 1: Lisa, 2: Ozer, 3: LOZER, 4: 011.44.1343.929268, 5: 1987-08-24, 6: SA_REP, 7: 11500, 8: 0.25, 9: 148, 10: 80}, {0: 169, 1: Harrison, 2: Bloom, 3: HBLOOM, 4: 011.44.1343.829268, 5: 1987-08-25, 6: SA_REP, 7: 10000, 8: 0.2, 9: 148, 10: 80}, {0: 170, 1: Tayler, 2: Fox, 3: TFOX, 4: 011.44.1343.729268, 5: 1987-08-26, 6: SA_REP, 7: 9600, 8: 0.2, 9: 148, 10: 80}, {0: 171, 1: William, 2: Smith, 3: WSMITH, 4: 011.44.1343.629268, 5: 1987-08-27, 6: SA_REP, 7: 7400, 8: 0.15, 9: 148, 10: 80}, {0: 172, 1: Elizabeth, 2: Bates, 3: EBATES, 4: 011.44.1343.529268, 5: 1987-08-28, 6: SA_REP, 7: 7300, 8: 0.15, 9: 148, 10: 80}, {0: 173, 1: Sundita, 2: Kumar, 3: SKUMAR, 4: 011.44.1343.329268, 5: 1987-08-29, 6: SA_REP, 7: 6100, 8: 0.1, 9: 148, 10: 80}, {0: 174, 1: Ellen, 2: Abel, 3: EABEL, 4: 011.44.1644.429267, 5: 1987-08-30, 6: SA_REP, 7: 11000, 8: 0.3, 9: 149, 10: 80}, {0: 175, 1: Alyssa, 2: Hutton, 3: AHUTTON, 4: 011.44.1644.429266, 5: 1987-08-31, 6: SA_REP, 7: 8800, 8: 0.25, 9: 149, 10: 80}, {0: 177, 1: Jack, 2: Livingston, 3: JLIVINGS, 4: 011.44.1644.429264, 5: 1987-09-02, 6: SA_REP, 7: 8400, 8: 0.2, 9: 149, 10: 80}, {0: 178, 1: Kimberely, 2: Grant, 3: KGRANT, 4: 011.44.1644.429263, 5: 1987-09-03, 6: SA_REP, 7: 7000, 8: 0.15, 9: 149, 10: 0}, {0: 179, 1: Charles, 2: Johnson, 3: CJOHNSON, 4: 011.44.1644.429262, 5: 1987-09-04, 6: SA_REP, 7: 6200, 8: 0.1, 9: 149, 10: 80}, {0: 180, 1: Winston, 2: Taylor, 3: WTAYLOR, 4: 650.507.9876, 5: 1987-09-05, 6: SH_CLERK, 7: 3200, 8: 0, 9: 120, 10: 50}, {0: 181, 1: Jean, 2: Fleaur, 3: JFLEAUR, 4: 650.507.9877, 5: 1987-09-06, 6: SH_CLERK, 7: 3100, 8: 0, 9: 120, 10: 50}, {0: 182, 1: Martha, 2: Sullivan, 3: MSULLIVA, 4: 650.507.9878, 5: 1987-09-07, 6: SH_CLERK, 7: 2500, 8: 0, 9: 120, 10: 50}, {0: 183, 1: Girard, 2: Geoni, 3: GGEONI, 4: 650.507.9879, 5: 1987-09-08, 6: SH_CLERK, 7: 2800, 8: 0, 9: 120, 10: 50}, {0: 184, 1: Nandita, 2: Sarchand, 3: NSARCHAN, 4: 650.509.1876, 5: 1987-09-09, 6: SH_CLERK, 7: 4200, 8: 0, 9: 121, 10: 50}, {0: 185, 1: Alexis, 2: Bull, 3: ABULL, 4: 650.509.2876, 5: 1987-09-10, 6: SH_CLERK, 7: 4100, 8: 0, 9: 121, 10: 50}, {0: 186, 1: Julia, 2: Dellinger, 3: JDELLING, 4: 650.509.3876, 5: 1987-09-11, 6: SH_CLERK, 7: 3400, 8: 0, 9: 121, 10: 50}, {0: 187, 1: Anthony, 2: Cabrio, 3: ACABRIO, 4: 650.509.4876, 5: 1987-09-12, 6: SH_CLERK, 7: 3000, 8: 0, 9: 121, 10: 50}, {0: 188, 1: Kelly, 2: Chung, 3: KCHUNG, 4: 650.505.1876, 5: 1987-09-13, 6: SH_CLERK, 7: 3800, 8: 0, 9: 122, 10: 50}, {0: 189, 1: Jennifer, 2: Dilly, 3: JDILLY, 4: 650.505.2876, 5: 1987-09-14, 6: SH_CLERK, 7: 3600, 8: 0, 9: 122, 10: 50}, {0: 190, 1: Timothy, 2: Gates, 3: TGATES, 4: 650.505.3876, 5: 1987-09-15, 6: SH_CLERK, 7: 2900, 8: 0, 9: 122, 10: 50}, {0: 191, 1: Randall, 2: Perkins, 3: RPERKINS, 4: 650.505.4876, 5: 1987-09-16, 6: SH_CLERK, 7: 2500, 8: 0, 9: 122, 10: 50}, {0: 192, 1: Sarah, 2: Bell, 3: SBELL, 4: 650.501.1876, 5: 1987-09-17, 6: SH_CLERK, 7: 4000, 8: 0, 9: 123, 10: 50}, {0: 193, 1: Britney, 2: Everett, 3: BEVERETT, 4: 650.501.2876, 5: 1987-09-18, 6: SH_CLERK, 7: 3900, 8: 0, 9: 123, 10: 50}, {0: 194, 1: Samuel, 2: McCain, 3: SMCCAIN, 4: 650.501.3876, 5: 1987-09-19, 6: SH_CLERK, 7: 3200, 8: 0, 9: 123, 10: 50}, {0: 195, 1: Vance, 2: Jones, 3: VJONES, 4: 650.501.4876, 5: 1987-09-20, 6: SH_CLERK, 7: 2800, 8: 0, 9: 123, 10: 50}, {0: 196, 1: Alana, 2: Walsh, 3: AWALSH, 4: 650.507.9811, 5: 1987-09-21, 6: SH_CLERK, 7: 3100, 8: 0, 9: 124, 10: 50}, {0: 197, 1: Kevin, 2: Feeney, 3: KFEENEY, 4: 650.507.9822, 5: 1987-09-22, 6: SH_CLERK, 7: 3000, 8: 0, 9: 124, 10: 50}, {0: 198, 1: Donald, 2: OConnell, 3: DOCONNEL, 4: 650.507.9833, 5: 1987-09-23, 6: SH_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 199, 1: Douglas, 2: Grant, 3: DGRANT, 4: 650.507.9844, 5: 1987-09-24, 6: SH_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 202, 1: Pat, 2: Fay, 3: PFAY, 4: 603.123.6666, 5: 1987-09-27, 6: MK_REP, 7: 6000, 8: 0, 9: 201, 10: 20}, {0: 203, 1: Susan, 2: Mavris, 3: SMAVRIS, 4: 515.123.7777, 5: 1987-09-28, 6: HR_REP, 7: 6500, 8: 0, 9: 101, 10: 40}, {0: 204, 1: Hermann, 2: Baer, 3: HBAER, 4: 515.123.8888, 5: 1987-09-29, 6: PR_REP, 7: 10000, 8: 0, 9: 101, 10: 70}, {0: 205, 1: Shelley, 2: Higgins, 3: SHIGGINS, 4: 515.123.8080, 5: 1987-09-30, 6: AC_MGR, 7: 12000, 8: 0, 9: 101, 10: 110}, {0: 206, 1: William, 2: Gietz, 3: WGIETZ, 4: 515.123.8181, 5: 1987-10-01, 6: AC_ACCOUNT, 7: 8300, 8: 0, 9: 205, 10: 110}]\", linq_results: \"[{0: 100, 1: Steven, 2: King, 3: SKING, 4: 515.123.4567, 5: 17.06.1987, 6: AD_PRES, 7: 24000, 8: 0, 9: 0, 10: 90}, {0: 103, 1: Alexander, 2: Hunold, 3: AHUNOLD, 4: 590.423.4567, 5: 20.06.1987, 6: IT_PROG, 7: 9000, 8: 0, 9: 102, 10: 60}, {0: 104, 1: Bruce, 2: Ernst, 3: BERNST, 4: 590.423.4568, 5: 21.06.1987, 6: IT_PROG, 7: 6000, 8: 0, 9: 103, 10: 60}, {0: 105, 1: David, 2: Austin, 3: DAUSTIN, 4: 590.423.4569, 5: 22.06.1987, 6: IT_PROG, 7: 4800, 8: 0, 9: 103, 10: 60}, {0: 106, 1: Valli, 2: Pataballa, 3: VPATABAL, 4: 590.423.4560, 5: 23.06.1987, 6: IT_PROG, 7: 4800, 8: 0, 9: 103, 10: 60}, {0: 107, 1: Diana, 2: Lorentz, 3: DLORENTZ, 4: 590.423.5567, 5: 24.06.1987, 6: IT_PROG, 7: 4200, 8: 0, 9: 103, 10: 60}, {0: 108, 1: Nancy, 2: Greenberg, 3: NGREENBE, 4: 515.124.4569, 5: 25.06.1987, 6: FI_MGR, 7: 12000, 8: 0, 9: 101, 10: 100}, {0: 109, 1: Daniel, 2: Faviet, 3: DFAVIET, 4: 515.124.4169, 5: 26.06.1987, 6: FI_ACCOUNT, 7: 9000, 8: 0, 9: 108, 10: 100}, {0: 110, 1: John, 2: Chen, 3: JCHEN, 4: 515.124.4269, 5: 27.06.1987, 6: FI_ACCOUNT, 7: 8200, 8: 0, 9: 108, 10: 100}, {0: 111, 1: Ismael, 2: Sciarra, 3: ISCIARRA, 4: 515.124.4369, 5: 28.06.1987, 6: FI_ACCOUNT, 7: 7700, 8: 0, 9: 108, 10: 100}, {0: 112, 1: Jose Manuel, 2: Urman, 3: JMURMAN, 4: 515.124.4469, 5: 29.06.1987, 6: FI_ACCOUNT, 7: 7800, 8: 0, 9: 108, 10: 100}, {0: 113, 1: Luis, 2: Popp, 3: LPOPP, 4: 515.124.4567, 5: 30.06.1987, 6: FI_ACCOUNT, 7: 6900, 8: 0, 9: 108, 10: 100}, {0: 115, 1: Alexander, 2: Khoo, 3: AKHOO, 4: 515.127.4562, 5: 02.07.1987, 6: PU_CLERK, 7: 3100, 8: 0, 9: 114, 10: 30}, {0: 116, 1: Shelli, 2: Baida, 3: SBAIDA, 4: 515.127.4563, 5: 03.07.1987, 6: PU_CLERK, 7: 2900, 8: 0, 9: 114, 10: 30}, {0: 117, 1: Sigal, 2: Tobias, 3: STOBIAS, 4: 515.127.4564, 5: 04.07.1987, 6: PU_CLERK, 7: 2800, 8: 0, 9: 114, 10: 30}, {0: 118, 1: Guy, 2: Himuro, 3: GHIMURO, 4: 515.127.4565, 5: 05.07.1987, 6: PU_CLERK, 7: 2600, 8: 0, 9: 114, 10: 30}, {0: 119, 1: Karen, 2: Colmenares, 3: KCOLMENA, 4: 515.127.4566, 5: 06.07.1987, 6: PU_CLERK, 7: 2500, 8: 0, 9: 114, 10: 30}, {0: 120, 1: Matthew, 2: Weiss, 3: MWEISS, 4: 650.123.1234, 5: 07.07.1987, 6: ST_MAN, 7: 8000, 8: 0, 9: 100, 10: 50}, {0: 121, 1: Adam, 2: Fripp, 3: AFRIPP, 4: 650.123.2234, 5: 08.07.1987, 6: ST_MAN, 7: 8200, 8: 0, 9: 100, 10: 50}, {0: 123, 1: Shanta, 2: Vollman, 3: SVOLLMAN, 4: 650.123.4234, 5: 10.07.1987, 6: ST_MAN, 7: 6500, 8: 0, 9: 100, 10: 50}, {0: 124, 1: Kevin, 2: Mourgos, 3: KMOURGOS, 4: 650.123.5234, 5: 11.07.1987, 6: ST_MAN, 7: 5800, 8: 0, 9: 100, 10: 50}, {0: 125, 1: Julia, 2: Nayer, 3: JNAYER, 4: 650.124.1214, 5: 12.07.1987, 6: ST_CLERK, 7: 3200, 8: 0, 9: 120, 10: 50}, {0: 126, 1: Irene, 2: Mikkilineni, 3: IMIKKILI, 4: 650.124.1224, 5: 13.07.1987, 6: ST_CLERK, 7: 2700, 8: 0, 9: 120, 10: 50}, {0: 127, 1: James, 2: Landry, 3: JLANDRY, 4: 650.124.1334, 5: 14.07.1987, 6: ST_CLERK, 7: 2400, 8: 0, 9: 120, 10: 50}, {0: 128, 1: Steven, 2: Markle, 3: SMARKLE, 4: 650.124.1434, 5: 15.07.1987, 6: ST_CLERK, 7: 2200, 8: 0, 9: 120, 10: 50}, {0: 129, 1: Laura, 2: Bissot, 3: LBISSOT, 4: 650.124.5234, 5: 16.07.1987, 6: ST_CLERK, 7: 3300, 8: 0, 9: 121, 10: 50}, {0: 130, 1: Mozhe, 2: Atkinson, 3: MATKINSO, 4: 650.124.6234, 5: 17.07.1987, 6: ST_CLERK, 7: 2800, 8: 0, 9: 121, 10: 50}, {0: 131, 1: James, 2: Marlow, 3: JAMRLOW, 4: 650.124.7234, 5: 18.07.1987, 6: ST_CLERK, 7: 2500, 8: 0, 9: 121, 10: 50}, {0: 132, 1: TJ, 2: Olson, 3: TJOLSON, 4: 650.124.8234, 5: 19.07.1987, 6: ST_CLERK, 7: 2100, 8: 0, 9: 121, 10: 50}, {0: 133, 1: Jason, 2: Mallin, 3: JMALLIN, 4: 650.127.1934, 5: 20.07.1987, 6: ST_CLERK, 7: 3300, 8: 0, 9: 122, 10: 50}, {0: 134, 1: Michael, 2: Rogers, 3: MROGERS, 4: 650.127.1834, 5: 21.07.1987, 6: ST_CLERK, 7: 2900, 8: 0, 9: 122, 10: 50}, {0: 135, 1: Ki, 2: Gee, 3: KGEE, 4: 650.127.1734, 5: 22.07.1987, 6: ST_CLERK, 7: 2400, 8: 0, 9: 122, 10: 50}, {0: 136, 1: Hazel, 2: Philtanker, 3: HPHILTAN, 4: 650.127.1634, 5: 23.07.1987, 6: ST_CLERK, 7: 2200, 8: 0, 9: 122, 10: 50}, {0: 137, 1: Renske, 2: Ladwig, 3: RLADWIG, 4: 650.121.1234, 5: 24.07.1987, 6: ST_CLERK, 7: 3600, 8: 0, 9: 123, 10: 50}, {0: 138, 1: Stephen, 2: Stiles, 3: SSTILES, 4: 650.121.2034, 5: 25.07.1987, 6: ST_CLERK, 7: 3200, 8: 0, 9: 123, 10: 50}, {0: 139, 1: John, 2: Seo, 3: JSEO, 4: 650.121.2019, 5: 26.07.1987, 6: ST_CLERK, 7: 2700, 8: 0, 9: 123, 10: 50}, {0: 140, 1: Joshua, 2: Patel, 3: JPATEL, 4: 650.121.1834, 5: 27.07.1987, 6: ST_CLERK, 7: 2500, 8: 0, 9: 123, 10: 50}, {0: 141, 1: Trenna, 2: Rajs, 3: TRAJS, 4: 650.121.8009, 5: 28.07.1987, 6: ST_CLERK, 7: 3500, 8: 0, 9: 124, 10: 50}, {0: 142, 1: Curtis, 2: Davies, 3: CDAVIES, 4: 650.121.2994, 5: 29.07.1987, 6: ST_CLERK, 7: 3100, 8: 0, 9: 124, 10: 50}, {0: 143, 1: Randall, 2: Matos, 3: RMATOS, 4: 650.121.2874, 5: 30.07.1987, 6: ST_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 144, 1: Peter, 2: Vargas, 3: PVARGAS, 4: 650.121.2004, 5: 31.07.1987, 6: ST_CLERK, 7: 2500, 8: 0, 9: 124, 10: 50}, {0: 145, 1: John, 2: Russell, 3: JRUSSEL, 4: 011.44.1344.429268, 5: 01.08.1987, 6: SA_MAN, 7: 14000, 8: 0.4, 9: 100, 10: 80}, {0: 146, 1: Karen, 2: Partners, 3: KPARTNER, 4: 011.44.1344.467268, 5: 02.08.1987, 6: SA_MAN, 7: 13500, 8: 0.3, 9: 100, 10: 80}, {0: 147, 1: Alberto, 2: Errazuriz, 3: AERRAZUR, 4: 011.44.1344.429278, 5: 03.08.1987, 6: SA_MAN, 7: 12000, 8: 0.3, 9: 100, 10: 80}, {0: 148, 1: Gerald, 2: Cambrault, 3: GCAMBRAU, 4: 011.44.1344.619268, 5: 04.08.1987, 6: SA_MAN, 7: 11000, 8: 0.3, 9: 100, 10: 80}, {0: 149, 1: Eleni, 2: Zlotkey, 3: EZLOTKEY, 4: 011.44.1344.429018, 5: 05.08.1987, 6: SA_MAN, 7: 10500, 8: 0.2, 9: 100, 10: 80}, {0: 150, 1: Peter, 2: Tucker, 3: PTUCKER, 4: 011.44.1344.129268, 5: 06.08.1987, 6: SA_REP, 7: 10000, 8: 0.3, 9: 145, 10: 80}, {0: 151, 1: David, 2: Bernstein, 3: DBERNSTE, 4: 011.44.1344.345268, 5: 07.08.1987, 6: SA_REP, 7: 9500, 8: 0.25, 9: 145, 10: 80}, {0: 152, 1: Peter, 2: Hall, 3: PHALL, 4: 011.44.1344.478968, 5: 08.08.1987, 6: SA_REP, 7: 9000, 8: 0.25, 9: 145, 10: 80}, {0: 153, 1: Christopher, 2: Olsen, 3: COLSEN, 4: 011.44.1344.498718, 5: 09.08.1987, 6: SA_REP, 7: 8000, 8: 0.2, 9: 145, 10: 80}, {0: 154, 1: Nanette, 2: Cambrault, 3: NCAMBRAU, 4: 011.44.1344.987668, 5: 10.08.1987, 6: SA_REP, 7: 7500, 8: 0.2, 9: 145, 10: 80}, {0: 155, 1: Oliver, 2: Tuvault, 3: OTUVAULT, 4: 011.44.1344.486508, 5: 11.08.1987, 6: SA_REP, 7: 7000, 8: 0.15, 9: 145, 10: 80}, {0: 156, 1: Janette, 2: King, 3: JKING, 4: 011.44.1345.429268, 5: 12.08.1987, 6: SA_REP, 7: 10000, 8: 0.35, 9: 146, 10: 80}, {0: 157, 1: Patrick, 2: Sully, 3: PSULLY, 4: 011.44.1345.929268, 5: 13.08.1987, 6: SA_REP, 7: 9500, 8: 0.35, 9: 146, 10: 80}, {0: 158, 1: Allan, 2: McEwen, 3: AMCEWEN, 4: 011.44.1345.829268, 5: 14.08.1987, 6: SA_REP, 7: 9000, 8: 0.35, 9: 146, 10: 80}, {0: 159, 1: Lindsey, 2: Smith, 3: LSMITH, 4: 011.44.1345.729268, 5: 15.08.1987, 6: SA_REP, 7: 8000, 8: 0.3, 9: 146, 10: 80}, {0: 160, 1: Louise, 2: Doran, 3: LDORAN, 4: 011.44.1345.629268, 5: 16.08.1987, 6: SA_REP, 7: 7500, 8: 0.3, 9: 146, 10: 80}, {0: 161, 1: Sarath, 2: Sewall, 3: SSEWALL, 4: 011.44.1345.529268, 5: 17.08.1987, 6: SA_REP, 7: 7000, 8: 0.25, 9: 146, 10: 80}, {0: 162, 1: Clara, 2: Vishney, 3: CVISHNEY, 4: 011.44.1346.129268, 5: 18.08.1987, 6: SA_REP, 7: 10500, 8: 0.25, 9: 147, 10: 80}, {0: 163, 1: Danielle, 2: Greene, 3: DGREENE, 4: 011.44.1346.229268, 5: 19.08.1987, 6: SA_REP, 7: 9500, 8: 0.15, 9: 147, 10: 80}, {0: 164, 1: Mattea, 2: Marvins, 3: MMARVINS, 4: 011.44.1346.329268, 5: 20.08.1987, 6: SA_REP, 7: 7200, 8: 0.1, 9: 147, 10: 80}, {0: 165, 1: David, 2: Lee, 3: DLEE, 4: 011.44.1346.529268, 5: 21.08.1987, 6: SA_REP, 7: 6800, 8: 0.1, 9: 147, 10: 80}, {0: 166, 1: Sundar, 2: Ande, 3: SANDE, 4: 011.44.1346.629268, 5: 22.08.1987, 6: SA_REP, 7: 6400, 8: 0.1, 9: 147, 10: 80}, {0: 167, 1: Amit, 2: Banda, 3: ABANDA, 4: 011.44.1346.729268, 5: 23.08.1987, 6: SA_REP, 7: 6200, 8: 0.1, 9: 147, 10: 80}, {0: 168, 1: Lisa, 2: Ozer, 3: LOZER, 4: 011.44.1343.929268, 5: 24.08.1987, 6: SA_REP, 7: 11500, 8: 0.25, 9: 148, 10: 80}, {0: 169, 1: Harrison, 2: Bloom, 3: HBLOOM, 4: 011.44.1343.829268, 5: 25.08.1987, 6: SA_REP, 7: 10000, 8: 0.2, 9: 148, 10: 80}, {0: 170, 1: Tayler, 2: Fox, 3: TFOX, 4: 011.44.1343.729268, 5: 26.08.1987, 6: SA_REP, 7: 9600, 8: 0.2, 9: 148, 10: 80}, {0: 171, 1: William, 2: Smith, 3: WSMITH, 4: 011.44.1343.629268, 5: 27.08.1987, 6: SA_REP, 7: 7400, 8: 0.15, 9: 148, 10: 80}, {0: 172, 1: Elizabeth, 2: Bates, 3: EBATES, 4: 011.44.1343.529268, 5: 28.08.1987, 6: SA_REP, 7: 7300, 8: 0.15, 9: 148, 10: 80}, {0: 173, 1: Sundita, 2: Kumar, 3: SKUMAR, 4: 011.44.1343.329268, 5: 29.08.1987, 6: SA_REP, 7: 6100, 8: 0.1, 9: 148, 10: 80}, {0: 174, 1: Ellen, 2: Abel, 3: EABEL, 4: 011.44.1644.429267, 5: 30.08.1987, 6: SA_REP, 7: 11000, 8: 0.3, 9: 149, 10: 80}, {0: 175, 1: Alyssa, 2: Hutton, 3: AHUTTON, 4: 011.44.1644.429266, 5: 31.08.1987, 6: SA_REP, 7: 8800, 8: 0.25, 9: 149, 10: 80}, {0: 177, 1: Jack, 2: Livingston, 3: JLIVINGS, 4: 011.44.1644.429264, 5: 02.09.1987, 6: SA_REP, 7: 8400, 8: 0.2, 9: 149, 10: 80}, {0: 178, 1: Kimberely, 2: Grant, 3: KGRANT, 4: 011.44.1644.429263, 5: 03.09.1987, 6: SA_REP, 7: 7000, 8: 0.15, 9: 149, 10: 0}, {0: 179, 1: Charles, 2: Johnson, 3: CJOHNSON, 4: 011.44.1644.429262, 5: 04.09.1987, 6: SA_REP, 7: 6200, 8: 0.1, 9: 149, 10: 80}, {0: 180, 1: Winston, 2: Taylor, 3: WTAYLOR, 4: 650.507.9876, 5: 05.09.1987, 6: SH_CLERK, 7: 3200, 8: 0, 9: 120, 10: 50}, {0: 181, 1: Jean, 2: Fleaur, 3: JFLEAUR, 4: 650.507.9877, 5: 06.09.1987, 6: SH_CLERK, 7: 3100, 8: 0, 9: 120, 10: 50}, {0: 182, 1: Martha, 2: Sullivan, 3: MSULLIVA, 4: 650.507.9878, 5: 07.09.1987, 6: SH_CLERK, 7: 2500, 8: 0, 9: 120, 10: 50}, {0: 183, 1: Girard, 2: Geoni, 3: GGEONI, 4: 650.507.9879, 5: 08.09.1987, 6: SH_CLERK, 7: 2800, 8: 0, 9: 120, 10: 50}, {0: 184, 1: Nandita, 2: Sarchand, 3: NSARCHAN, 4: 650.509.1876, 5: 09.09.1987, 6: SH_CLERK, 7: 4200, 8: 0, 9: 121, 10: 50}, {0: 185, 1: Alexis, 2: Bull, 3: ABULL, 4: 650.509.2876, 5: 10.09.1987, 6: SH_CLERK, 7: 4100, 8: 0, 9: 121, 10: 50}, {0: 186, 1: Julia, 2: Dellinger, 3: JDELLING, 4: 650.509.3876, 5: 11.09.1987, 6: SH_CLERK, 7: 3400, 8: 0, 9: 121, 10: 50}, {0: 187, 1: Anthony, 2: Cabrio, 3: ACABRIO, 4: 650.509.4876, 5: 12.09.1987, 6: SH_CLERK, 7: 3000, 8: 0, 9: 121, 10: 50}, {0: 188, 1: Kelly, 2: Chung, 3: KCHUNG, 4: 650.505.1876, 5: 13.09.1987, 6: SH_CLERK, 7: 3800, 8: 0, 9: 122, 10: 50}, {0: 189, 1: Jennifer, 2: Dilly, 3: JDILLY, 4: 650.505.2876, 5: 14.09.1987, 6: SH_CLERK, 7: 3600, 8: 0, 9: 122, 10: 50}, {0: 190, 1: Timothy, 2: Gates, 3: TGATES, 4: 650.505.3876, 5: 15.09.1987, 6: SH_CLERK, 7: 2900, 8: 0, 9: 122, 10: 50}, {0: 191, 1: Randall, 2: Perkins, 3: RPERKINS, 4: 650.505.4876, 5: 16.09.1987, 6: SH_CLERK, 7: 2500, 8: 0, 9: 122, 10: 50}, {0: 192, 1: Sarah, 2: Bell, 3: SBELL, 4: 650.501.1876, 5: 17.09.1987, 6: SH_CLERK, 7: 4000, 8: 0, 9: 123, 10: 50}, {0: 193, 1: Britney, 2: Everett, 3: BEVERETT, 4: 650.501.2876, 5: 18.09.1987, 6: SH_CLERK, 7: 3900, 8: 0, 9: 123, 10: 50}, {0: 194, 1: Samuel, 2: McCain, 3: SMCCAIN, 4: 650.501.3876, 5: 19.09.1987, 6: SH_CLERK, 7: 3200, 8: 0, 9: 123, 10: 50}, {0: 195, 1: Vance, 2: Jones, 3: VJONES, 4: 650.501.4876, 5: 20.09.1987, 6: SH_CLERK, 7: 2800, 8: 0, 9: 123, 10: 50}, {0: 196, 1: Alana, 2: Walsh, 3: AWALSH, 4: 650.507.9811, 5: 21.09.1987, 6: SH_CLERK, 7: 3100, 8: 0, 9: 124, 10: 50}, {0: 197, 1: Kevin, 2: Feeney, 3: KFEENEY, 4: 650.507.9822, 5: 22.09.1987, 6: SH_CLERK, 7: 3000, 8: 0, 9: 124, 10: 50}, {0: 198, 1: Donald, 2: OConnell, 3: DOCONNEL, 4: 650.507.9833, 5: 23.09.1987, 6: SH_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 199, 1: Douglas, 2: Grant, 3: DGRANT, 4: 650.507.9844, 5: 24.09.1987, 6: SH_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 202, 1: Pat, 2: Fay, 3: PFAY, 4: 603.123.6666, 5: 27.09.1987, 6: MK_REP, 7: 6000, 8: 0, 9: 201, 10: 20}, {0: 203, 1: Susan, 2: Mavris, 3: SMAVRIS, 4: 515.123.7777, 5: 28.09.1987, 6: HR_REP, 7: 6500, 8: 0, 9: 101, 10: 40}, {0: 204, 1: Hermann, 2: Baer, 3: HBAER, 4: 515.123.8888, 5: 29.09.1987, 6: PR_REP, 7: 10000, 8: 0, 9: 101, 10: 70}, {0: 205, 1: Shelley, 2: Higgins, 3: SHIGGINS, 4: 515.123.8080, 5: 30.09.1987, 6: AC_MGR, 7: 12000, 8: 0, 9: 101, 10: 110}, {0: 206, 1: William, 2: Gietz, 3: WGIETZ, 4: 515.123.8181, 5: 01.10.1987, 6: AC_ACCOUNT, 7: 8300, 8: 0, 9: 205, 10: 110}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "de0065198dc171aa60c06f1b12e943584d6eb6eb809dff2417a48bf126c5040a",
    "sql": "SELECT first_name , last_name , salary , department_id , MAX(salary) FROM employees GROUP BY department_id",
    "linq": "context.Employees.GroupBy(row => new { row.DepartmentId }).Select(group => new { group.First().FirstName, group.First().LastName, group.First().Salary, group.Key.DepartmentId, MaxSalary = group.Select(row => row.Salary).Max() }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: Kimberely, 1: Grant, 2: 7000, 3: 0, 4: 7000}, {0: Jennifer, 1: Whalen, 2: 4400, 3: 10, 4: 4400}, {0: Michael, 1: Hartstein, 2: 13000, 3: 20, 4: 13000}, {0: Den, 1: Raphaely, 2: 11000, 3: 30, 4: 11000}, {0: Susan, 1: Mavris, 2: 6500, 3: 40, 4: 6500}, {0: Adam, 1: Fripp, 2: 8200, 3: 50, 4: 8200}, {0: Alexander, 1: Hunold, 2: 9000, 3: 60, 4: 9000}, {0: Hermann, 1: Baer, 2: 10000, 3: 70, 4: 10000}, {0: John, 1: Russell, 2: 14000, 3: 80, 4: 14000}, {0: Steven, 1: King, 2: 24000, 3: 90, 4: 24000}, {0: Nancy, 1: Greenberg, 2: 12000, 3: 100, 4: 12000}, {0: Shelley, 1: Higgins, 2: 12000, 3: 110, 4: 12000}]\", linq_results: \"[{0: Kimberely, 1: Grant, 2: 7000, 3: 0, 4: 7000}, {0: Jennifer, 1: Whalen, 2: 4400, 3: 10, 4: 4400}, {0: Michael, 1: Hartstein, 2: 13000, 3: 20, 4: 13000}, {0: Den, 1: Raphaely, 2: 11000, 3: 30, 4: 11000}, {0: Susan, 1: Mavris, 2: 6500, 3: 40, 4: 6500}, {0: Matthew, 1: Weiss, 2: 8000, 3: 50, 4: 8200}, {0: Alexander, 1: Hunold, 2: 9000, 3: 60, 4: 9000}, {0: Hermann, 1: Baer, 2: 10000, 3: 70, 4: 10000}, {0: John, 1: Russell, 2: 14000, 3: 80, 4: 14000}, {0: Steven, 1: King, 2: 24000, 3: 90, 4: 24000}, {0: Nancy, 1: Greenberg, 2: 12000, 3: 100, 4: 12000}, {0: Shelley, 1: Higgins, 2: 12000, 3: 110, 4: 12000}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a39cc81b6a3fa03212b22825fc9882b9fdfeeae4404560f7ef894756d012fe15",
    "sql": "SELECT T1.first_name , T1.last_name , T2.department_name , T3.city , T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id",
    "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Locations, joined => joined.T2.LocationId, T3 => T3.LocationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.FirstName, row.T1.LastName, row.T2.DepartmentName, row.T3.City, row.T3.StateProvince }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e28079c617c7a61e298acf6b1a33bdbc3e500caf32e06a7abb5d815b14e1d2c7",
    "sql": "SELECT T1.first_name , T1.last_name , T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T1.first_name LIKE '%z%'",
    "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Locations, joined => joined.T2.LocationId, T3 => T3.LocationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => EF.Functions.Like(row.T1.FirstName, \"%z%\")).Select(row => new { row.T1.FirstName, row.T1.LastName, row.T3.City }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "af7c395f8c61539dcdf8386ab0235e8bce93ffb51939a4d0f9687c2d283f38ef",
    "sql": "SELECT T1.department_name , T2.city , T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id = T1.location_id",
    "linq": "context.Departments.Join(context.Locations, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.DepartmentName, row.T2.City, row.T2.StateProvince }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4d6e04af4cd5a61ff8ef800a073cdd899f76c15cfbad80b6502b14617173d6d5",
    "sql": "SELECT T1.first_name , T1.last_name , T1.employee_id , T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id",
    "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Locations, joined => joined.T2.LocationId, T3 => T3.LocationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Countries, joined => joined.T3.CountryId, T4 => T4.CountryId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Select(row => new { row.T1.FirstName, row.T1.LastName, row.T1.EmployeeId, row.T4.CountryName }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1e262dd0af5f1b640f4efdc38bb9ac02a4dd1274841590ec266df0f2099016d3",
    "sql": "SELECT department_name , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name",
    "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DepartmentName }).Select(group => new { group.Key.DepartmentName, Count = group.Count() }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f381c744eb77bbe9b33f2bb6c83f72faa38498410a5547c444a3e8cd0697c977",
    "sql": "SELECT first_name , last_name , salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T3.city = 'London'",
    "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Locations, joined => joined.T2.LocationId, T3 => T3.LocationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.City == \"London\").Select(row => new { row.T1.FirstName, row.T1.LastName, row.T1.Salary }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "39d1839997ce8cfe5c6ba11689ee583a56f1401272245212bb4bc4c67400cd8f",
    "sql": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"wyoming\" ) AND state_name = \"wyoming\";",
    "linq": "context.Cities.Where(row => row.Population == context.Cities.Where(row => row.StateName == \"wyoming\").Select(row => row.Population).Max() && row.StateName == \"wyoming\").Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a5a994f66c9b1e395bf2010d071aba09c908d0be8d2caa5d40fd24846b18c468",
    "sql": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city ) );",
    "linq": "context.Rivers.Where(row => context.Cities.Where(row => row.Population == context.Cities.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bc874b3462e610ce7a6ae6a6f60d6f8f76de97e4ea53b9ef1433b31140cb4e2e",
    "sql": "SELECT area FROM state WHERE state_name = \"new mexico\";",
    "linq": "context.States.Where(row => row.StateName == \"new mexico\").Select(row => new { row.Area }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c7d6689c0a29a62640c393a68ccbe3805c4a2a20fc7f98e4b711687176bc14cd",
    "sql": "SELECT population FROM state WHERE state_name = \"california\";",
    "linq": "context.States.Where(row => row.StateName == \"california\").Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0c9ba1d9f71a2dfaa7b0675cd4879faf7b8d8def13bb7106b230e9d48258a3d6",
    "sql": "SELECT state_name FROM state WHERE population = ( SELECT MIN ( population ) FROM state );",
    "linq": "context.States.Where(row => row.Population == context.States.Select(row => row.Population).Min()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "989de22a8c8aff0c7d53df2c15fbf4b5ca495d2ef1ae5d8c2f33ea7165cb3d5c",
    "sql": "SELECT city_name FROM city WHERE state_name = \"texas\";",
    "linq": "context.Cities.Where(row => row.StateName == \"texas\").Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1afdc42bac89dc4399d1cd8127a5acdc8446d485af8f129899667ee98b919b1d",
    "sql": "SELECT area FROM state WHERE capital = \"albany\";",
    "linq": "context.States.Where(row => row.Capital == \"albany\").Select(row => new { row.Area }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8126ecba2dd98b6003327997222fb62a5eac7e6c66a0f25a2815cc1a97ee25d4",
    "sql": "SELECT lake_name FROM lake WHERE state_name = \"california\";",
    "linq": "context.Lakes.Where(row => row.StateName == \"california\").Select(row => new { row.LakeName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "581f0b4fa47360a2c4bc6c2bf12eabb8e2539c27c28635ae2ceee5270c247718",
    "sql": "SELECT lake_name FROM lake WHERE area > 750 AND state_name = \"michigan\";",
    "linq": "context.Lakes.Where(row => row.Area > 750 && row.StateName == \"michigan\").Select(row => new { row.LakeName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "191143eee71af8f6ba2a06ab7a4a37bc1fbdd01bca29462fbed2240993c99a95",
    "sql": "SELECT state_name FROM state;",
    "linq": "context.States.Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "945fc623d7aed2e335c12acf668602f4fd5ae8affbd4ac7f1123015f8b20bb8c",
    "sql": "SELECT traverse FROM river WHERE river_name = \"ohio\";",
    "linq": "context.Rivers.Where(row => row.RiverName == \"ohio\").Select(row => new { row.Traverse }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ad78f8078a33c0ef55d5b00ea8093bdf67728cc210e621678ca7074a076a7ae0",
    "sql": "SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state );",
    "linq": "context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4e14bfe16c6892c2ea8b918f8f9626fb9348efce2f68a888aaa5975c4f66820a",
    "sql": "SELECT lowest_elevation FROM highlow WHERE state_name = \"pennsylvania\";",
    "linq": "context.Highlows.Where(row => row.StateName == \"pennsylvania\").Select(row => new { row.LowestElevation }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "57723b7dc1b66f80acf5e4fa6bd942d3c021a7290d8dd114ae1528664fd10776",
    "sql": "SELECT highest_point , state_name FROM highlow WHERE lowest_elevation = 0;",
    "linq": "context.Highlows.Where(row => row.LowestElevation == \"0\").Select(row => new { row.HighestPoint, row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "119ad6648093f8a661b89ac5e377039f8f2aba669bd46b6dd200d3881d6c98db",
    "sql": "SELECT LENGTH FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );",
    "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => new { row.Length }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b1518cfc6c552ea1abbed2ad8a8c783d0db3a94e807a8431df2ce6f384dd9593",
    "sql": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = \"texas\" ) AND traverse = \"texas\";",
    "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Where(row => row.Traverse == \"texas\").Select(row => row.Length).Max() && row.Traverse == \"texas\").Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b12da6095dee306f729d3b51cc438cca7459313c6481d2968909c9557b2d3b53",
    "sql": "SELECT COUNT ( river_name ) FROM river WHERE traverse = \"idaho\";",
    "linq": "context.Rivers.Where(row => row.Traverse == \"idaho\").Select(row => row.RiverName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "927c5bf9cf5eba0517671805aaa5b97d0893bfb1515d5ef90e863e1318dc4ad5",
    "sql": "SELECT border FROM border_info WHERE state_name = \"kentucky\";",
    "linq": "context.BorderInfo.Where(row => row.StateName == \"kentucky\").Select(row => new { row.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.56",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1c404100371bcb9d53a00d6e02587a52d1743bc3b0b40ddeeacab78451c68189",
    "sql": "SELECT river_name FROM river WHERE traverse = \"illinois\";",
    "linq": "context.Rivers.Where(row => row.Traverse == \"illinois\").Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6fd8dd6830920457e1efa89ccdc8d0ea4357d98d0e992a9d636fcff64602716d",
    "sql": "SELECT state_name FROM city WHERE city_name = \"springfield\";",
    "linq": "context.Cities.Where(row => row.CityName == \"springfield\").Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8e5b4af3f069e309676a3345662d27c8d82bab787b19f517dddb9261638d8638",
    "sql": "SELECT population FROM state WHERE area = ( SELECT MAX ( area ) FROM state );",
    "linq": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2501721bec29f6512614a07858228df349bd67f7c2fad59b986ac37b5bcb355d",
    "sql": "SELECT population FROM city WHERE city_name = \"boulder\";",
    "linq": "context.Cities.Where(row => row.CityName == \"boulder\").Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b2bbcd807bcae51f49fea8198677d9c1e770c42f9ca59ecb93d984d0ccf7afdf",
    "sql": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city WHERE state_name = \"alaska\" ) AND state_name = \"alaska\";",
    "linq": "context.Cities.Where(row => row.Population == context.Cities.Where(row => row.StateName == \"alaska\").Select(row => row.Population).Min() && row.StateName == \"alaska\").Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e7fd7ee7305270b4e08183974395274f5a0e8bf2ba13db96d82baa05d9e3f502",
    "sql": "SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );",
    "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => new { row.Traverse }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f3a564bef9319e5bd730611e62ed4fdd13a0b157a694b80f7f1fdbbfd7d8bd80",
    "sql": "SELECT density FROM state WHERE area = ( SELECT MIN ( area ) FROM state );",
    "linq": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => new { row.Density }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fd233cd0520f4dd749d7160d6cf61dbf138c0074da3b1d01ffa790a25736377a",
    "sql": "SELECT state_name FROM highlow WHERE highest_elevation > ( SELECT highest_elevation FROM highlow WHERE state_name = \"colorado\" );",
    "linq": "context.Highlows.Where(row => row.HighestElevation > context.Highlows.Where(row => row.StateName == \"colorado\").Select(row => row.HighestElevation).First()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.37",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "10d71524589656f9e0f11d50f070c5b9539cec48c78981130d90c21f57e796f9",
    "sql": "SELECT highest_elevation FROM highlow WHERE state_name = \"delaware\";",
    "linq": "context.Highlows.Where(row => row.StateName == \"delaware\").Select(row => new { row.HighestElevation }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1babf804ba3a5fe1fb20a18888ecf4638537cbb9cf765b9b2c1196e5c6b40b35",
    "sql": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );",
    "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "256a5dc0560bf031347444c079f534466562d888ab4d9fab8427824b7f691db7",
    "sql": "SELECT state_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );",
    "linq": "context.Cities.Where(row => row.Population == context.Cities.Select(row => row.Population).Max()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2166df386afc638acfa060cc59dfeaf6098458f964e6b67a965e7fb2fb0bb138",
    "sql": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "linq": "context.Cities.Where(row => row.Population == context.Cities.Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.StateName)).Select(row => row.Population).Min() && context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "769ebba859b16d1360b029557111dd80d467b4c2fa48443ad2cbc5293774d63b",
    "sql": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state );",
    "linq": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "28fcd8652cdd2a02dd65d9413120e006539ce0ac0f48dd4927c54bcda65082f6",
    "sql": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"mississippi\" );",
    "linq": "context.Highlows.Where(row => context.BorderInfo.Where(row => row.StateName == \"mississippi\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,50): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3f4d4d7efbd4dc7b1cb923a514d571318eadd6b9879f26d2db86f33ce5dcba94",
    "sql": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;",
    "linq": "context.Highlows.Where(row => context.BorderInfo.Where(row => row.StateName == \"colorado\").Select(row => row.Border).Contains(row.StateName)).OrderByDescending(row => row.HighestElevation).Select(row => new { row.HighestPoint }).Take(1).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,50): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.54",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c14471b1fdc67aa630685ab68f83f842d0f7049774b2c45678dbbc4b690c7a2a",
    "sql": "SELECT state_name FROM state WHERE density = ( SELECT MIN ( density ) FROM state );",
    "linq": "context.States.Where(row => row.Density == context.States.Select(row => row.Density).Min()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ad7f3522c52c80018eaf9ac223f29c504467862fb7011b98b57ee2f74ef95913",
    "sql": "SELECT highest_point FROM highlow WHERE state_name = \"texas\";",
    "linq": "context.Highlows.Where(row => row.StateName == \"texas\").Select(row => new { row.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "77125927956d3449a65b334ec8268315b258078bb8c3acb649bb90ccbc03cf8f",
    "sql": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );",
    "linq": "context.States.Where(row => !context.BorderInfo.Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,49): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.65",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "78497357737a7932d172be593f194a5ceacb21dd31982b8fab1c57d3eff395bc",
    "sql": "SELECT area FROM state WHERE density = ( SELECT MIN ( density ) FROM state );",
    "linq": "context.States.Where(row => row.Density == context.States.Select(row => row.Density).Min()).Select(row => new { row.Area }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9a1d817885a991bfcee7d713ed904deb2b5e077ade24870ef5aff0487d7a2867",
    "sql": "SELECT COUNT ( state_name ) FROM highlow WHERE lowest_elevation < ( SELECT lowest_elevation FROM highlow WHERE state_name = \"alabama\" );",
    "linq": "context.Highlows.Where(row => row.LowestElevation < context.Highlows.Where(row => row.StateName == \"alabama\").Select(row => row.LowestElevation).First()).Select(row => row.StateName).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "14c6782ce6abb0448da45c41c4ea3225ddb0455ca05e537edf7db889c0b900b0",
    "sql": "SELECT highest_elevation FROM highlow WHERE highest_point = \"guadalupe peak\";",
    "linq": "context.Highlows.Where(row => row.HighestPoint == \"guadalupe peak\").Select(row => new { row.HighestElevation }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f026b83da2ca9e2a41f465cc8f200ce6d962709920659658a6665e690fa0cc60",
    "sql": "SELECT MAX ( highest_elevation ) FROM highlow;",
    "linq": "context.Highlows.Select(row => row.HighestElevation).Max();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4b1b68f8dbbe18bb0b279f6f68bba249427117f101d97485f55ab366bd854dd6",
    "sql": "SELECT LENGTH FROM river WHERE river_name = \"rio grande\";",
    "linq": "context.Rivers.Where(row => row.RiverName == \"rio grande\").Select(row => new { row.Length }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8a4a9e6484beb671d9b2170ad21745d2356ccdd89bd6f293e7bc593122be87e3",
    "sql": "SELECT LENGTH FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = \"texas\" ) AND traverse = \"texas\";",
    "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Where(row => row.Traverse == \"texas\").Select(row => row.Length).Max() && row.Traverse == \"texas\").Select(row => new { row.Length }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9326acde3d51be82efea66196b160c9ca6fc3364c0ecc5fb584f7e3dd3d24bdd",
    "sql": "SELECT COUNT ( capital ) FROM state WHERE state_name = \"rhode island\";",
    "linq": "context.States.Where(row => row.StateName == \"rhode island\").Select(row => row.Capital).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f96fb803d251a7e6a7451a4c609338e452aeed193b539643e2a8a4beb96a035e",
    "sql": "SELECT COUNT ( city_name ) FROM city;",
    "linq": "context.Cities.Select(row => row.CityName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1869a5d3852ff803d5afc2744a70fec2a823d377727027dbaeba50c673113c9b",
    "sql": "SELECT COUNT ( city_name ) FROM city WHERE population > 150000;",
    "linq": "context.Cities.Where(row => row.Population > 150000).Select(row => row.CityName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8d0554de9fb40253aca516829df6dc941050031dd3874e145cc4762b9b441471",
    "sql": "SELECT population FROM city WHERE population = ( SELECT MAX ( population ) FROM city );",
    "linq": "context.Cities.Where(row => row.Population == context.Cities.Select(row => row.Population).Max()).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5a3a8b538c64a711a15201ed82386fad5beebd2dada151779e27bae8c963ee9b",
    "sql": "SELECT COUNT ( river_name ) FROM river WHERE river_name = \"colorado\";",
    "linq": "context.Rivers.Where(row => row.RiverName == \"colorado\").Select(row => row.RiverName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6266e0deb5a61dfa6400d824e691e3e23275e6a8ad7e78516ac0495e7e57d2c1",
    "sql": "SELECT population FROM city WHERE city_name = \"seattle\" AND state_name = \"washington\";",
    "linq": "context.Cities.Where(row => row.CityName == \"seattle\" && row.StateName == \"washington\").Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4e65fb20709fd94e0f82542f0dd697abcfcb3ae41b039d9d998a8091c7c4cff7",
    "sql": "SELECT population FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"alaska\" ) AND state_name = \"alaska\";",
    "linq": "context.Cities.Where(row => row.Population == context.Cities.Where(row => row.StateName == \"alaska\").Select(row => row.Population).Max() && row.StateName == \"alaska\").Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4e5e88296a436fd5d10bb7ac21775e615dee93b370615c670975752bf7f41ed7",
    "sql": "SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE state_name = \"texas\" );",
    "linq": "context.Cities.Where(row => row.CityName == context.States.Where(row => row.StateName == \"texas\").Select(row => row.Capital).First()).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7558679fd0fcad1f62eca6e358ef316a6b24f7eacf7fbc438d1e994b5f30fb55",
    "sql": "SELECT SUM ( population ) FROM state;",
    "linq": "context.States.Select(row => row.Population).Sum();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b2d058b41af33a00fa6d8992c56d0f16a49169fc9dcba0212e7dd62bb64ae1e6",
    "sql": "SELECT COUNT ( state_name ) FROM state;",
    "linq": "context.States.Select(row => row.StateName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a770ba61830f92dae988bd357dc325009cc66b0ce406a641b038e269da0d781f",
    "sql": "SELECT COUNT ( border ) FROM border_info WHERE state_name = \"kentucky\";",
    "linq": "context.BorderInfo.Where(row => row.StateName == \"kentucky\").Select(row => row.Border).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.60",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f947b4b4d7eec115428cbfdb453c94f944650e9b1a3c406b7de5612170d72410",
    "sql": "SELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );",
    "linq": "context.BorderInfo.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.StateName)).Select(row => row.Border).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:03.29",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6f7313739bb95bf09542d799729f47acef97b2276095fdceaf09096b2bee467e",
    "sql": "SELECT COUNT ( DISTINCT state_name ) FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );",
    "linq": "context.States.Where(row => !context.Rivers.Select(row => row.Traverse).Contains(row.StateName)).Select(row => row.StateName).Distinct().Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e83003ddc7f6f681999d0ed6844d6eea444fd86d8eddfc2786cf8c69613ea920",
    "sql": "SELECT COUNT ( state_name ) FROM highlow WHERE highest_elevation > ( SELECT highest_elevation FROM highlow WHERE state_name = ( SELECT state_name FROM state WHERE capital = ( SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city ) ) ) );",
    "linq": "context.Highlows.Where(row => row.HighestElevation > context.Highlows.Where(row => row.StateName == context.States.Where(row => row.Capital == context.Cities.Where(row => row.Population == context.Cities.Select(row => row.Population).Max()).Select(row => row.CityName).First()).Select(row => row.StateName).First()).Select(row => row.HighestElevation).First()).Select(row => row.StateName).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.67",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b20af55c8c559013349e743fb7a64a7a2835ac11e445b1aa35bc665fdcfdd88b",
    "sql": "SELECT river_name FROM river WHERE LENGTH > 750 AND traverse = \"illinois\";",
    "linq": "context.Rivers.Where(row => row.Length > 750 && row.Traverse == \"illinois\").Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9140bf4e1db28617765479069e0332d4cfa60f46fc3b1746b8a04ec8c185b3ff",
    "sql": "SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = \"texas\" );",
    "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Where(row => row.Traverse == \"texas\").Select(row => row.Length).Max()).Select(row => new { row.Traverse }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d14c128c73a6292ad4edd449e4f73d72ce1da67c85525328ee91cd2e3fe0187d",
    "sql": "SELECT capital FROM state WHERE state_name = \"texas\";",
    "linq": "context.States.Where(row => row.StateName == \"texas\").Select(row => new { row.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f5d43095f12ba44d263a57e9c2a48bcaa94ab9f80648116c55869955a6e0e065",
    "sql": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border WHERE t1.state_name = \"texas\";",
    "linq": "context.States.Join(context.BorderInfo, t2 => t2.StateName, t1 => t1.Border, (t2, t1) => new { t2, t1 }).Where(row => row.t1.StateName == \"texas\").Select(row => new { row.t2.Capital }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,40): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.76",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "40ccdefea766af0ed005a6e485b20901142ebce8ed65bbbdceebb54054ce4445",
    "sql": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );",
    "linq": "context.Cities.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "95e5c8b0e3f82c4941992a5c8d7160ea3a2bfc11ba37b70b645ef1c3db1545e9",
    "sql": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow ) );",
    "linq": "context.Cities.Where(row => context.Highlows.Where(row => row.HighestElevation == context.Highlows.Select(row => row.HighestElevation).Max()).Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "01c31a9b554cca333077694e4658a8cd9b8e412fa64b633a7a312b1422b84557",
    "sql": "SELECT highest_point FROM highlow;",
    "linq": "context.Highlows.Select(row => new { row.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "84ef0e9cf46f4d179e4db9250e2f3f34fa9664842cad21babfb6c25419cf89ff",
    "sql": "SELECT city_name FROM city WHERE population > 150000 AND state_name = \"kansas\";",
    "linq": "context.Cities.Where(row => row.Population > 150000 && row.StateName == \"kansas\").Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "937b6ebbe21b1ab783573efb71e69f9cde0d833f94901617a93331142273533b",
    "sql": "SELECT city_name FROM city WHERE population > 150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH > 750 AND river_name = \"mississippi\" );",
    "linq": "context.Cities.Where(row => row.Population > 150000 && context.Rivers.Where(row => row.Length > 750 && row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "83ebe1dc29bf653373b33a82371dd88772895114b8d2ef3fd0816c917d8f933c",
    "sql": "SELECT city_name FROM city WHERE population > 150000;",
    "linq": "context.Cities.Where(row => row.Population > 150000).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8577ce96f86ce5df01cccee833f1e75733ceabef890085367bd21edb2f571567",
    "sql": "SELECT density FROM state;",
    "linq": "context.States.Select(row => new { row.Density }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fcef814d46bb3c4b3dc9ebb799e5bac09f8b94cef2a26796e9fb1588d5f019d7",
    "sql": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );",
    "linq": "context.States.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4f8277bb8da53d1e125d2f8d46d1947594549428079d9d84090794ffb617043a",
    "sql": "SELECT t2.population FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border WHERE t1.state_name = \"texas\";",
    "linq": "context.States.Join(context.BorderInfo, t2 => t2.StateName, t1 => t1.Border, (t2, t1) => new { t2, t1 }).Where(row => row.t1.StateName == \"texas\").Select(row => new { row.t2.Population }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,40): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.81",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f12f12a64ce99446dd4457e33e80aeaa6f2ee8fe123f59f7223eb6fb36c11c86",
    "sql": "SELECT population FROM city WHERE population > 150000 AND state_name = \"wisconsin\";",
    "linq": "context.Cities.Where(row => row.Population > 150000 && row.StateName == \"wisconsin\").Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1319f4cd168e59fdd823448a28012b4a6602eaa6a55be71a6abdc534d1bd317f",
    "sql": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );",
    "linq": "context.Cities.Where(row => row.Population == context.Cities.Select(row => row.Population).Max()).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dcfc4eacfbc64e96a0da67d3d2460f2dfec379a7c967f0b0bdb60e73b4395905",
    "sql": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );",
    "linq": "context.Cities.Where(row => row.Population == context.States.Join(context.Cities, t2 => t2.Capital, t1 => t1.CityName, (t2, t1) => new { t2, t1 }).Select(row => row.t1.Population).Max()).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d9284e11fa9356153199ca566f87b871bf37629add7698732df0b56066af60ef",
    "sql": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.state_name = t1.state_name WHERE t1.city_name = \"durham\";",
    "linq": "context.States.Join(context.Cities, t2 => t2.StateName, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t1.CityName == \"durham\").Select(row => new { row.t2.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "65c55c8c0fde5b9fec7f08f42b4da63a3a1d2a0fa82d5b157d1ac29d821f9350",
    "sql": "SELECT capital FROM state WHERE area = ( SELECT MIN ( area ) FROM state );",
    "linq": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => new { row.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7d3cb3ed56f2214a5c4b31c397ffc98e18a7b368ba7ecdc7640996b355500bf6",
    "sql": "SELECT DISTINCT capital FROM state WHERE density = ( SELECT MAX ( density ) FROM state );",
    "linq": "context.States.Where(row => row.Density == context.States.Select(row => row.Density).Max()).Select(row => new { row.Capital }).Distinct().ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cce7cab80679b444ea08cc3b1f07ad6cb50fff89550602b2602657701f0a8a87",
    "sql": "SELECT capital FROM state WHERE population = ( SELECT MAX ( population ) FROM state );",
    "linq": "context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => new { row.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "baa9d5c2ab9a4a66221e58904e2fbc6808ae1d67a7357813a9109a286d5fc2f2",
    "sql": "SELECT capital FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) );",
    "linq": "context.States.Where(row => context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a777a5ce032cdcd36088c109790ad6cacf3e5fa3a3e9751dccd1ba8c5b480d19",
    "sql": "SELECT SUM ( area ) FROM state;",
    "linq": "context.States.Select(row => row.Area).Sum();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f655ff79a600eba21faa56398499a066651ce480c3f2c419e8b9498f27c91d72",
    "sql": "SELECT density FROM state WHERE state_name = \"wyoming\";",
    "linq": "context.States.Where(row => row.StateName == \"wyoming\").Select(row => new { row.Density }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "919702d3d71309273409de750cf60f86c02dca5894f3b8a55c5a16d7f6a13d00",
    "sql": "SELECT mountain_name FROM mountain WHERE mountain_altitude = ( SELECT MAX ( mountain_altitude ) FROM mountain );",
    "linq": "context.Mountains.Where(row => row.MountainAltitude == context.Mountains.Select(row => row.MountainAltitude).Max()).Select(row => new { row.MountainName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2069813839a3da219ac60b075912bc7f0ffb9c26aecd0a078f0cec1e26698169",
    "sql": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital = \"des moines\" );",
    "linq": "context.Highlows.Where(row => context.States.Where(row => row.Capital == \"des moines\").Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a2f98ee883b5d0a2a2e7986643ab45573dee73f5a0ba6368c8d281bf0757b369",
    "sql": "SELECT highest_point FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );",
    "linq": "context.Highlows.Where(row => row.HighestElevation == context.Highlows.Select(row => row.HighestElevation).Max()).Select(row => new { row.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4c5dde637a6c6558391a67659b328226bb68510c8af910e54b47fbca90ad0a0b",
    "sql": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density = ( SELECT MIN ( density ) FROM state ) );",
    "linq": "context.Highlows.Where(row => context.States.Where(row => row.Density == context.States.Select(row => row.Density).Min()).Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "669915a6ec7277e2017313b11538d515795eeb389d3277c4aacd68c39e6e2160",
    "sql": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) AND area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) ) ) ORDER BY population DESC LIMIT 1;",
    "linq": "context.Cities.Where(row => context.States.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName) && row.Area == context.States.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => row.Area).Min()).Select(row => row.StateName).Contains(row.StateName)).OrderByDescending(row => row.Population).Select(row => new { row.CityName }).Take(1).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9d288908d249a24a65da6682f49ad19a2de4b1a6277e3ba730c3c6422220c279",
    "sql": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );",
    "linq": "context.Cities.Where(row => row.Population == context.Cities.Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).Contains(row.StateName)).Select(row => row.Population).Max() && context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "540e2ffa7e98291ba6cec3cff3f1d2543749ffded130761806864ca66fc0cc75",
    "sql": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" );",
    "linq": "context.States.Where(row => row.Area == context.States.Where(row => context.BorderInfo.Where(row => row.StateName == \"california\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.Area).Max() && context.BorderInfo.Where(row => row.StateName == \"california\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,235): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:03.43",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "06d92823bbfb38f0e7bcd6bc7c1f0e60bac655e7216cf46cc1357d9f17b887c6",
    "sql": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => row.Length).Max() && context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "13f1d59622972aa7354157cc284ccc1d8014a72398e29f4feb44d2d19b8e0e10",
    "sql": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name = \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name = \"tennessee\" );",
    "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Where(row => context.BorderInfo.Where(row => row.StateName == \"tennessee\").Select(row => row.Border).Contains(row.Traverse)).Select(row => row.Length).Max() && context.BorderInfo.Where(row => row.StateName == \"tennessee\").Select(row => row.Border).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,237): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:02.48",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7f6e558a6c969422a0cb4e5884a72cb59ac979a4eea97520ee094031d719a4d1",
    "sql": "SELECT river_name FROM river WHERE traverse = ( SELECT state_name FROM city WHERE population > 150000 GROUP BY state_name ORDER BY COUNT ( city_name ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1;",
    "linq": "context.Rivers.Where(row => row.Traverse == context.Cities.Where(row => row.Population > 150000).GroupBy(row => new { row.StateName }).OrderByDescending(group => group.Count(row => row.CityName != null)).Select(group => group.Key.StateName).Take(1).First()).OrderByDescending(row => row.Length).Select(row => new { row.RiverName }).Take(1).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4b5a793d387cc833f94cce88cac49b65700e8643651131b75d3a7b0611ff7408",
    "sql": "SELECT lowest_point FROM highlow WHERE state_name = \"iowa\";",
    "linq": "context.Highlows.Where(row => row.StateName == \"iowa\").Select(row => new { row.LowestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "05a444a555c8cadcd05ba87b1bcda1b5b8da68c2b4690af8fe4dab0c08fb120b",
    "sql": "SELECT lowest_point FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow );",
    "linq": "context.Highlows.Where(row => row.LowestElevation == context.Highlows.Select(row => row.LowestElevation).Min()).Select(row => new { row.LowestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "56e1213baf85d6741e86bb1c2bd32a45f9f8bd6aa87530d7f93021e18da78cfe",
    "sql": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;",
    "linq": "context.Highlows.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).OrderBy(row => row.LowestElevation).Select(row => new { row.LowestPoint }).Take(1).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "52786cd56d6819c7d8ab003899ea5600749e10510a796788d11bebadb367a8eb",
    "sql": "SELECT state_name FROM state WHERE density = ( SELECT MAX ( density ) FROM state );",
    "linq": "context.States.Where(row => row.Density == context.States.Select(row => row.Density).Max()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1857f0587ee31ae0ac93e15dbf220e170f9982ca5357bd93003dd706ac06b6b4",
    "sql": "SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );",
    "linq": "context.States.Where(row => row.Population == context.States.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => row.Population).Max() && context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1515a4d53a609a759bf5ae77251270373c70568f073822ccf544c396adec3da8",
    "sql": "SELECT density FROM state WHERE area = ( SELECT MAX ( area ) FROM state );",
    "linq": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => new { row.Density }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "22ab1de6903e084f3f813f2008845449a6641cff2f10bf94f0c85f74622ed69d",
    "sql": "SELECT population FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "linq": "context.Cities.Where(row => row.Population == context.Cities.Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.StateName)).Select(row => row.Population).Max() && context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e2f1fa62a2acfd7c8394133c60285a4384b40c4f06433ef266aa23a151f16d78",
    "sql": "SELECT population FROM state WHERE area = ( SELECT MIN ( area ) FROM state );",
    "linq": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a3b64720b15768bd8908e3eef8a3cf045cf49f9614d89164e1cfe12c11188823",
    "sql": "SELECT population FROM state WHERE density = ( SELECT MAX ( density ) FROM state );",
    "linq": "context.States.Where(row => row.Density == context.States.Select(row => row.Density).Max()).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "312bed61b5401310260ae52b4f22933e2b3e4d096ed1453a3315b8bbc851fb9b",
    "sql": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city );",
    "linq": "context.Cities.Where(row => row.Population == context.Cities.Select(row => row.Population).Min()).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5549c76735201ea8cdb75893f8306d9a9ab71e601912b4066fb777699ec7a0d5",
    "sql": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" );",
    "linq": "context.States.Where(row => row.Area == context.States.Where(row => context.BorderInfo.Where(row => row.StateName == \"texas\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.Area).Min() && context.BorderInfo.Where(row => row.StateName == \"texas\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,230): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.43",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "842941c0b35dfa15419826db4ce4356f33075313958d93db6cc690a73cf197b2",
    "sql": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );",
    "linq": "context.States.Where(row => row.Area == context.States.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => row.Area).Min() && context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "70cec35c176186451ae268bd50af1d9f76d1b0319cdbbf946273657209556901",
    "sql": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state );",
    "linq": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a6a6911cc1658d5dd9b6d5b55ee2ff803e5dc53f2f7d9e7698768fa001261d1f",
    "sql": "SELECT SUM ( LENGTH ) FROM river;",
    "linq": "context.Rivers.Select(row => row.Length).Sum();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d5b7cbc8c520cdcf5e46f33973c7ebcda697a2432d3890d6eb01dcf83039e1b9",
    "sql": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name = \"alabama\" );",
    "linq": "context.Rivers.Where(row => context.BorderInfo.Where(row => row.StateName == \"alabama\").Select(row => row.Border).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,48): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0c2b4395ae44163aa80fb318b09d3a22ac947aca81ec11d95c6e035affc07875",
    "sql": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
    "linq": "context.States.Where(row => context.BorderInfo.Where(row => row.StateName == \"oklahoma\").Select(row => row.Border).Contains(row.StateName)).OrderByDescending(row => row.Population).Select(row => new { row.StateName }).Take(1).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,48): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.44",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8d691fb8043f4c68df1df7f2b65029a40f3e22ee1a99339db865e35f7888951d",
    "sql": "SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"colorado\" ) );",
    "linq": "context.Highlows.Where(row => row.HighestElevation == context.Highlows.Where(row => context.Rivers.Where(row => row.RiverName == \"colorado\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => row.HighestElevation).Max()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d4413895790ed4b2ffb1a5525b4bebfde2b51e4ead262756ed13eac3ba01d255",
    "sql": "SELECT state_name FROM city WHERE population = ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );",
    "linq": "context.Cities.Where(row => row.Population == context.States.Join(context.Cities, t2 => t2.Capital, t1 => t1.CityName, (t2, t1) => new { t2, t1 }).Select(row => row.t1.Population).Max()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f19507d4a8687b65af0c9c6b973a5d502b4f93cacb76fcff5584f8dcfb9959fa",
    "sql": "SELECT DISTINCT traverse FROM river WHERE LENGTH = ( SELECT MAX ( DISTINCT LENGTH ) FROM river );",
    "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Distinct().Max()).Select(row => new { row.Traverse }).Distinct().ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e8743259f3f84114bef6713cba7cba22050f5f7d122fc6013ecd5a5b3cc299da",
    "sql": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) LIMIT 1;",
    "linq": "context.Cities.GroupBy(row => new { row.StateName }).OrderBy(group => group.Sum(row => row.Population)).Select(group => new { group.Key.StateName }).Take(1).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3ef28a81c3cb0b2f7a5cca36761f92d42c2a2747f38f055ba50fd893903355e1",
    "sql": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"colorado\" );",
    "linq": "context.BorderInfo.Where(row => context.BorderInfo.Where(row => row.StateName == \"colorado\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,52): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.76",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3063a0e0f5728c0842a6e538d7e7b462959753c20a665eb3b224db82c3d0a460",
    "sql": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );",
    "linq": "context.BorderInfo.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.64",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1bfcfded11a7b20998706356f402aaabb434a712ce88871ec7e6fe888be13d14",
    "sql": "SELECT state_name FROM border_info WHERE border = \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH > 750 );",
    "linq": "context.BorderInfo.Where(row => row.Border == \"texas\" && context.Rivers.Where(row => row.Length > 750).Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.55",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "da3be118e45eb0a30ab5177c9610b03327b227d4df0d7a72ea1fd047f8b95dce",
    "sql": "SELECT border FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );",
    "linq": "context.BorderInfo.Where(row => row.StateName == context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).First()).Select(row => new { row.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.40",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4c194ec7ffc81aeda1ce8580daf89860493c5603f08803552679eaa3b90859f0",
    "sql": "SELECT border FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );",
    "linq": "context.BorderInfo.Where(row => row.StateName == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).First()).Select(row => new { row.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.68",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "861793194a2c41bd5c4f4d6a12f015dd67575310eb21adcec1f29ec9f0b32470",
    "sql": "SELECT traverse FROM river WHERE LENGTH > 750;",
    "linq": "context.Rivers.Where(row => row.Length > 750).Select(row => new { row.Traverse }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "57dbe1916bbaf02c3a2f545dac8422c46f6bbd4fc264ddae17fa9aec275c9ca7",
    "sql": "SELECT state_name FROM mountain;",
    "linq": "context.Mountains.Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ace0c814ef06c4301a52a93872e734eba8e363f95ea7b7d56e74a15301cf5e25",
    "sql": "SELECT state_name FROM mountain WHERE mountain_altitude = ( SELECT MAX ( mountain_altitude ) FROM mountain );",
    "linq": "context.Mountains.Where(row => row.MountainAltitude == context.Mountains.Select(row => row.MountainAltitude).Max()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b2d54e64e69c907445dc73e139454728f9be0c14e28d8f54f710c60d7486200d",
    "sql": "SELECT state_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city );",
    "linq": "context.Cities.Where(row => row.Population == context.Cities.Select(row => row.Population).Min()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "449d1d9be455854dfd9479c8772cf49a2dab034ff81f730fe6c951c23b7d0465",
    "sql": "SELECT density FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) );",
    "linq": "context.States.Where(row => context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.Density }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2186fde9369f30ac30c47a8b3eff07e6454a9ec7f3cd101c73fd82ed17fb9f91",
    "sql": "SELECT mountain_name FROM mountain WHERE mountain_altitude = ( SELECT MAX ( mountain_altitude ) FROM mountain WHERE state_name != \"alaska\" );",
    "linq": "context.Mountains.Where(row => row.MountainAltitude == context.Mountains.Where(row => row.StateName != \"alaska\").Select(row => row.MountainAltitude).Max()).Select(row => new { row.MountainName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "56da31c4c77be54cc8da5f7f09d49b1cd74711a840cf365b494e84282b1e1857",
    "sql": "SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse = \"tennessee\" );",
    "linq": "context.Rivers.Where(row => !context.Rivers.Where(row => row.Traverse == \"tennessee\").Select(row => row.RiverName).Contains(row.RiverName)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9fdee8d1b8dc1d10a86998615ece7787bd6edd11628f2fdfa5611f6c8f3dcaad",
    "sql": "SELECT river_name FROM river WHERE country_name != \"usa\";",
    "linq": "context.Rivers.Where(row => row.CountryName != \"usa\").Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6915c8316b7ec818e9ad1f98fe9dd17c16edbd96e61c2c6b72396d3bb530ab27",
    "sql": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital = \"atlanta\" ) );",
    "linq": "context.Rivers.Where(row => context.BorderInfo.Where(row => context.States.Where(row => row.Capital == \"atlanta\").Select(row => row.StateName).Contains(row.StateName)).Select(row => row.Border).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,48): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a55bd0d821ce201e568c534c84ba0e1dd7d519a1a7f6fd5db6c118337bd914ef",
    "sql": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );",
    "linq": "context.Cities.Where(row => row.Population == context.States.Join(context.Cities, t2 => t2.Capital, t1 => t1.CityName, (t2, t1) => new { t2, t1 }).Select(row => row.t1.Population).Min()).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ece2b7dd45fde7f3fbd2700a50eff49a7651bac493ca8ef6f7a42e74df365703",
    "sql": "SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );",
    "linq": "context.Highlows.Where(row => row.HighestElevation == context.Highlows.Select(row => row.HighestElevation).Max()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "28732193713d13bbdb5943563d16394de0ae1ff5ee7b3bedba114e032d2a33ac",
    "sql": "SELECT state_name FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow );",
    "linq": "context.Highlows.Where(row => row.LowestElevation == context.Highlows.Select(row => row.LowestElevation).Min()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2358f6de14e0cf180561a6253b92b9fed87d4264361a55b4fb57ab243305ea99",
    "sql": "SELECT state_name FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"idaho\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"idaho\" );",
    "linq": "context.Highlows.Where(row => row.LowestElevation == context.Highlows.Where(row => context.BorderInfo.Where(row => row.StateName == \"idaho\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.LowestElevation).Min() && context.BorderInfo.Where(row => row.StateName == \"idaho\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,256): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.68",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "68f4056d4197d26dd27c65ba837313810748ab64288f0957342e0fc1dc0e2972",
    "sql": "SELECT state_name FROM city GROUP BY state_name ORDER BY AVG ( population ) LIMIT 1;",
    "linq": "context.Cities.GroupBy(row => new { row.StateName }).OrderBy(group => group.Average(row => row.Population)).Select(group => new { group.Key.StateName }).Take(1).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "08461536a8eedc7f46f6bcad264dbf15dfc8d86a248c646244d2faca390eb59f",
    "sql": "SELECT state_name FROM mountain WHERE mountain_name = \"whitney\";",
    "linq": "context.Mountains.Where(row => row.MountainName == \"whitney\").Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0c5a8c4b38ac92fcbb3ec7308a0414c6fdf52029735f25f7ec57aa13ff6c924b",
    "sql": "SELECT traverse FROM river;",
    "linq": "context.Rivers.Select(row => new { row.Traverse }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "576dd99bb517d8f1e3eccc53fc367fd1fb925169b3b8f304a13ffcad159eff18",
    "sql": "SELECT state_name FROM city WHERE city_name = \"austin\" AND population > 150000;",
    "linq": "context.Cities.Where(row => row.CityName == \"austin\" && row.Population > 150000).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "db54115df5a0fb1860f075b38ce3fe1bdd30f33683dcaa094defacd3ca282d0a",
    "sql": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" );",
    "linq": "context.Cities.Where(row => row.Population == context.Cities.Where(row => context.BorderInfo.Where(row => row.StateName == \"california\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.Population).Max() && context.BorderInfo.Where(row => row.StateName == \"california\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,247): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.53",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2965e62dc5524ddb44c647841fca10c79f824d3ecce131d1f4e7d3e05d2c227a",
    "sql": "SELECT COUNT ( river_name ) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital = \"albany\" );",
    "linq": "context.Rivers.Where(row => !context.States.Where(row => row.Capital == \"albany\").Select(row => row.StateName).Contains(row.Traverse)).Select(row => row.RiverName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2d0c97474a46a28eb0d804664eb0d1415f5e8321d7ef08100490d209ab050710",
    "sql": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river WHERE traverse = \"texas\" ) AND traverse = \"texas\";",
    "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Where(row => row.Traverse == \"texas\").Select(row => row.Length).Min() && row.Traverse == \"texas\").Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "af340b0ca86a9f29a5c643d652b97fc544c2479e9b05340d1fddd862397c24f1",
    "sql": "SELECT city_name FROM city WHERE population > 150000 AND state_name = ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );",
    "linq": "context.Cities.Where(row => row.Population > 150000 && row.StateName == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).First()).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "58f006728003c102e29f45103a66ece5c543b8df9a6911645ff9669cf2ed0443",
    "sql": "SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE area = ( SELECT MAX ( t1.area ) FROM state AS t1 JOIN river AS t2 ON t1.state_name = t2.traverse WHERE t2.river_name = \"mississippi\" ) );",
    "linq": "context.Cities.Where(row => row.CityName == context.States.Where(row => row.Area == context.States.Join(context.Rivers, t1 => t1.StateName, t2 => t2.Traverse, (t1, t2) => new { t1, t2 }).Where(row => row.t2.RiverName == \"mississippi\").Select(row => row.t1.Area).Max()).Select(row => row.Capital).First()).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8dd35e546f654d6b529c26d9235aef0e6293f5b7265f52e694f811ec1fd6fc9b",
    "sql": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river );",
    "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Min()).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "be967c64b1cdfbd67f1fc81ff115df81e6561d8b76e7ca0783030bccceedec59",
    "sql": "SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" ) );",
    "linq": "context.States.Where(row => context.BorderInfo.Where(row => context.BorderInfo.Where(row => row.StateName == \"texas\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.Capital }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,80): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.41",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f74c853fc085be83a4eea4c17fbc725ad02eac219114756c8c5365ed71e04c63",
    "sql": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );",
    "linq": "context.Cities.Where(row => row.Population == context.Cities.Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).Contains(row.StateName)).Select(row => row.Population).Min() && context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b83af13a6754695200f7ce03e16658a8d7e9129d43ef2a1efa27188412b7a3ea",
    "sql": "SELECT population FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" );",
    "linq": "context.States.Where(row => row.Area == context.States.Where(row => context.BorderInfo.Where(row => row.StateName == \"texas\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.Area).Max() && context.BorderInfo.Where(row => row.StateName == \"texas\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,230): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.41",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bd1260e5f5c27b7177545a7f653f26ef20fcc8965cbacf54c329f955072b5936",
    "sql": "SELECT state_name FROM state WHERE capital = \"salem\";",
    "linq": "context.States.Where(row => row.Capital == \"salem\").Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9da03f4acdaddafd6a2e120a7295329a7526940ea2af5f0a271393854ddf7964",
    "sql": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );",
    "linq": "context.Rivers.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "88b832ddc0da6b10bc1c8e5681d23b97663a22642ce5c64ed0b44741a32061a0",
    "sql": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) ) );",
    "linq": "context.States.Where(row => row.Area == context.States.Where(row => context.BorderInfo.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.Border)).Select(row => row.StateName).Contains(row.StateName)).Select(row => row.Area).Max() && context.BorderInfo.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.Border)).Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,356): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.50",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f6693ad71b27afebbcab70e4aace9bb029dde30978730e7f6c738cdb3061be0e",
    "sql": "SELECT COUNT ( river_name ) FROM river;",
    "linq": "context.Rivers.Select(row => row.RiverName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "894fd2319a36f4a57a5494045d49c208da7bf483b06413cde99e05f8da711cc2",
    "sql": "SELECT DISTINCT capital FROM state;",
    "linq": "context.States.Select(row => new { row.Capital }).Distinct().ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e4cc14de728911f2d8b9191c0aaadca3533a0ba04bd260d2f5fa3b6968b4dfa7",
    "sql": "SELECT COUNT ( state_name ) FROM city WHERE city_name = \"springfield\";",
    "linq": "context.Cities.Where(row => row.CityName == \"springfield\").Select(row => row.StateName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "39be2c49d52de83c75c8943e796bdbaed229f81f2a635c7f877f9d55d27659d1",
    "sql": "SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MIN ( population ) FROM state ) );",
    "linq": "context.BorderInfo.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Min()).Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0732322fca42efec09cfe05d89ad0cbb8214b9c947bae38b27f53cb06089ef82",
    "sql": "SELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" );",
    "linq": "context.Lakes.Where(row => context.BorderInfo.Where(row => row.StateName == \"texas\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.LakeName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,47): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.37",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d95884bf43921b3616b672866824e6607e906c61a858f3dd78263d4fd68178f7",
    "sql": "SELECT COUNT ( city_name ) FROM city WHERE population > 150000 AND state_name = \"texas\";",
    "linq": "context.Cities.Where(row => row.Population > 150000 && row.StateName == \"texas\").Select(row => row.CityName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "85208c97ad222c85dca56283edf231981d1656b87d497cb886dc318d42b349d0",
    "sql": "SELECT highest_elevation FROM highlow;",
    "linq": "context.Highlows.Select(row => new { row.HighestElevation }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4da9d6b4b4753c205f4ad82e75954c719969c516b57b0e875af6db9177a5e9c5",
    "sql": "SELECT COUNT ( traverse ) FROM river WHERE river_name = \"missouri\";",
    "linq": "context.Rivers.Where(row => row.RiverName == \"missouri\").Select(row => row.Traverse).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "917ca6bb2137f31bee461dd8ab8d2d73c76bc0abe6305a97d8ad7e7785b9c000",
    "sql": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );",
    "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => row.Length).Max() && context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "40afe3d686a8e833adcecc811536065308c4e3a0e44745be65a1daa3da084bdc",
    "sql": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"florida\" ) );",
    "linq": "context.BorderInfo.Where(row => context.BorderInfo.Where(row => context.BorderInfo.Where(row => row.StateName == \"florida\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,84): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    3 Error(s)\n\nTime Elapsed 00:00:01.47",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "86a49298d37b45b15621822d7c38a842211bb68083e73990c57fcf3fb200ef59",
    "sql": "SELECT COUNT ( DISTINCT state_name ) FROM border_info;",
    "linq": "context.BorderInfo.Select(row => row.StateName).Distinct().Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "add01580f111892fbec2a6d051f5afb6506ab8b8824bfb60e1d04ec8d3ddc2d5",
    "sql": "SELECT MAX ( DISTINCT highest_elevation ) FROM highlow WHERE state_name = \"texas\";",
    "linq": "context.Highlows.Where(row => row.StateName == \"texas\").Select(row => row.HighestElevation).Distinct().Max();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2c49d1f9ef6cd5dfed6fc371fd0f2fe5aff46cb39b18264703677f7a8df42588",
    "sql": "SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name = \"new mexico\" ) AND state_name = \"colorado\";",
    "linq": "context.BorderInfo.Where(row => context.BorderInfo.Where(row => row.StateName == \"new mexico\").Select(row => row.Border).Contains(row.Border) && row.StateName == \"colorado\").Select(row => row.Border).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,52): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.35",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d0dfb21228eedbefe8c7c7729513fd5e5c2a6c45bc509a0aa995080e6ab0151b",
    "sql": "SELECT COUNT ( city_name ) FROM city WHERE population > 150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"nebraska\" );",
    "linq": "context.Cities.Where(row => row.Population > 150000 && context.BorderInfo.Where(row => row.StateName == \"nebraska\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.CityName).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,75): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.33",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fc24cfccf7e9cc347803994ec7e8e0f1c9c342cefeb2e250f10cf973aea51e0e",
    "sql": "SELECT SUM ( t2.population ) FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border WHERE t1.state_name = \"texas\";",
    "linq": "context.States.Join(context.BorderInfo, t2 => t2.StateName, t1 => t1.Border, (t2, t1) => new { t2, t1 }).Where(row => row.t1.StateName == \"texas\").Select(row => row.t2.Population).Sum();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,40): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.27",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d592a5a6d8279755bf704ab5cbd004532320b438ef9440d6cb3150d05aa5a8e3",
    "sql": "SELECT lake_name FROM lake WHERE area > 750;",
    "linq": "context.Lakes.Where(row => row.Area > 750).Select(row => new { row.LakeName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "46d85321983080b02ad17e6b9561b61c6ebc900aa7692c3497d3f6d4e127c148",
    "sql": "SELECT lake_name FROM lake;",
    "linq": "context.Lakes.Select(row => new { row.LakeName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "94dc9948433d25fcb6b5466b5d8bf54ca3771134fc30f6af597d89f419dae77d",
    "sql": "SELECT COUNT ( river_name ) FROM river WHERE LENGTH > 750 AND traverse = \"ohio\";",
    "linq": "context.Rivers.Where(row => row.Length > 750 && row.Traverse == \"ohio\").Select(row => row.RiverName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eaffe840814e3d267ccddbdd509a1e47a56df99d198428e7d88b5cd0cd513287",
    "sql": "SELECT DISTINCT traverse FROM river WHERE LENGTH = ( SELECT MIN ( DISTINCT LENGTH ) FROM river );",
    "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Distinct().Min()).Select(row => new { row.Traverse }).Distinct().ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ff63305964df23a380006ac71d6f0b3808eb03e1b7d94fe4a66d2621d8590258",
    "sql": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH > 750;",
    "linq": "context.Rivers.Where(row => row.Length > 750).Select(row => row.Traverse).Distinct().Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6f53680c95e5ce4a66d439b92a89094706fff75c812db951c467e5e8ce7e2828",
    "sql": "SELECT mountain_altitude FROM mountain WHERE mountain_name = \"mckinley\";",
    "linq": "context.Mountains.Where(row => row.MountainName == \"mckinley\").Select(row => new { row.MountainAltitude }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "37468a56a3e62c35799d41974fe5b20eddc1db4dfc3451e1be63510ee79757f0",
    "sql": "SELECT traverse FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river );",
    "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Min()).Select(row => new { row.Traverse }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "60cb7d08758e630956ba570dee1f3459f2ba8029234a62cbe708924719f24ca8",
    "sql": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name = t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MIN ( population ) FROM state ) );",
    "linq": "context.States.Join(context.Highlows, t1 => t1.StateName, t2 => t2.StateName, (t1, t2) => new { t1, t2 }).Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Min()).Select(row => row.StateName).Contains(row.t1.StateName)).Select(row => new { row.t2.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "28679111c3ed2659fc970db1fc56d71ea0ba45f7052b22dcd4c8a2e1f902e1af",
    "sql": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow ) );",
    "linq": "context.Rivers.Where(row => context.Highlows.Where(row => row.LowestElevation == context.Highlows.Select(row => row.LowestElevation).Min()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cdd08644e19df9c07cd9d376cc86a8227baaf3b4a4235948113f616a95377f89",
    "sql": "SELECT mountain_name FROM mountain WHERE state_name = \"alaska\";",
    "linq": "context.Mountains.Where(row => row.StateName == \"alaska\").Select(row => new { row.MountainName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "597b72eb136729cbbd94a8e67b0014f1c690533cd74819fe13faee3ee94f7527",
    "sql": "SELECT COUNT ( traverse ) FROM river WHERE LENGTH > 750;",
    "linq": "context.Rivers.Where(row => row.Length > 750).Select(row => row.Traverse).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4117ee13cef4ca86c2feb76710782ee9369b515dea307b12242182be971394cf",
    "sql": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) ) ) AND state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) );",
    "linq": "context.States.Where(row => row.Area == context.States.Where(row => context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => row.Traverse).Contains(row.StateName)).Select(row => row.Area).Min() && context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4fae36efebf051f544a6ed6c99f9b19ef472ba06c1b6f3fd53daf097fedf7cbe",
    "sql": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name = \"rio grande\" );",
    "linq": "context.States.Where(row => row.Area == context.States.Where(row => context.Rivers.Where(row => row.RiverName == \"rio grande\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => row.Area).Max() && context.Rivers.Where(row => row.RiverName == \"rio grande\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "decbf7ee9344f60dd27181a3735f39a4d2e4172927671bd1d039fd8789539e76",
    "sql": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name = \"colorado\" );",
    "linq": "context.Rivers.Where(row => context.BorderInfo.Where(row => row.StateName == \"colorado\").Select(row => row.Border).Contains(row.Traverse)).Select(row => row.RiverName).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,48): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.48",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "734e8d9fb73128c1116d8c7b7871afe8c209af5b5b604234afb70a47ae97fc46",
    "sql": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );",
    "linq": "context.States.Where(row => !context.Rivers.Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c22c855f4a7ba611621c8160f6067a182ed63739c3304dc1cc4e0309221789ce",
    "sql": "SELECT capital FROM state WHERE area = ( SELECT MAX ( area ) FROM state );",
    "linq": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => new { row.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "50f6b9abd5c02c6c2d95a3248f231601aa132327a76011a4daa941b584a6bff4",
    "sql": "SELECT COUNT ( city_name ) FROM city WHERE state_name = \"texas\";",
    "linq": "context.Cities.Where(row => row.StateName == \"texas\").Select(row => row.CityName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "548cf1f20bdaedac66e4bc22968da5c37a64ca9d6445781384c5586661f23725",
    "sql": "SELECT area FROM state;",
    "linq": "context.States.Select(row => new { row.Area }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9f462957906ffdb38da836b60ce9583f3ebcaddae18bed385dbd7f18370efecb",
    "sql": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH = ( SELECT MIN ( DISTINCT LENGTH ) FROM river );",
    "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Distinct().Min()).Select(row => row.Traverse).Distinct().Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c3d6819040fe5917b98883ecea4f7e4c402efc01c4d67eaae7455501635095ad",
    "sql": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) ) );",
    "linq": "context.Rivers.Where(row => context.BorderInfo.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.StateName)).Select(row => row.Border).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,48): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3a6fbf2fd0a72d71e9fda191710458dd5c27dff124308f15511e1b182fd64748",
    "sql": "SELECT city_name FROM city WHERE population > 150000 AND state_name = ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "linq": "context.Cities.Where(row => row.Population > 150000 && row.StateName == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).First()).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "07a4e96898a9764efbe57282763129143d85860a299097250549abe55b36eb45",
    "sql": "SELECT area FROM state WHERE area = ( SELECT MIN ( area ) FROM state );",
    "linq": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => new { row.Area }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d643232916d11e36af9e5c19e3d48493e37d728e285a5134a337a73055670d79",
    "sql": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) );",
    "linq": "context.BorderInfo.Where(row => context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.56",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fa525f3afd964d29b2e4976567f50b997aa7bc4e17a57aa0872289ddbdfa50c5",
    "sql": "SELECT density FROM state WHERE population = ( SELECT MIN ( population ) FROM state );",
    "linq": "context.States.Where(row => row.Population == context.States.Select(row => row.Population).Min()).Select(row => new { row.Density }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "23be1210db4fb3a8a3c76478dab97603365d6ab70c49b7fe15cc9b5210a93ca8",
    "sql": "SELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );",
    "linq": "context.BorderInfo.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => row.Border).Distinct().Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.47",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3031c0a791211f45f2bc7f7a90986de31222ef7904fcb5f2e12a8c2b13f3f99a",
    "sql": "SELECT t1.state_name FROM state AS t1 JOIN highlow AS t2 ON t1.capital = t2.highest_point;",
    "linq": "context.States.Join(context.Highlows, t1 => t1.Capital, t2 => t2.HighestPoint, (t1, t2) => new { t1, t2 }).Select(row => new { row.t1.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1e8befa5fe9628440ef44c197b851abb0cd1507c1993110cd64688b7569edf15",
    "sql": "SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );",
    "linq": "context.Cities.Where(row => row.CityName == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.Capital).First()).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "315974e88f0d90346d235867747d7bc119e1e17249a4cc2a0196145310f610ef",
    "sql": "SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "linq": "context.Cities.Where(row => row.CityName == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.Capital).First()).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "849e313a9131597767f02d48c48a6224257aefa37338b6fb0bd9785a906948ad",
    "sql": "SELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name = t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "linq": "context.States.Join(context.Highlows, t1 => t1.StateName, t2 => t2.StateName, (t1, t2) => new { t1, t2 }).Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.t1.StateName)).Select(row => new { row.t2.LowestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "da0cc049c0090830a1db63989d2308e609d3bd17496f5f3b9c2b8b7b904c25fb",
    "sql": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border = t1.state_name WHERE t2.state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );",
    "linq": "context.BorderInfo.Join(context.BorderInfo, t2 => t2.Border, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.t2.StateName)).Select(row => new { row.t1.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,44): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.46",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c4df51cf1f0398dd3136758b7ce0feb8f8e4e8f12c777826e15479f1a94bf9f0",
    "sql": "SELECT MAX ( area ) FROM state;",
    "linq": "context.States.Select(row => row.Area).Max();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ca633bca906216ae5e8222d80897aea31ece17d112ac49e579a2da3367340ade",
    "sql": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name WHERE t1.population <= 150000;",
    "linq": "context.States.Join(context.Cities, t2 => t2.Capital, t1 => t1.CityName, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Population <= 150000).Select(row => new { row.t2.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1b6601455644ca6be0c91e2c723edd507f55b0c38505ef0a413297ef8441dce4",
    "sql": "SELECT city_name FROM city;",
    "linq": "context.Cities.Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bd8b4d1f8c2884cc861de2b886870506c49efa7a136cad6cbb77a4616604a7c1",
    "sql": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name = t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "linq": "context.States.Join(context.Highlows, t1 => t1.StateName, t2 => t2.StateName, (t1, t2) => new { t1, t2 }).Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.t1.StateName)).Select(row => new { row.t2.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6c95706fedb7923ef48de4eb1130ed169b2471fbedad7bb21e34a2fb968a1592",
    "sql": "SELECT country_name FROM state WHERE state_name = \"massachusetts\";",
    "linq": "context.States.Where(row => row.StateName == \"massachusetts\").Select(row => new { row.CountryName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ec41ad74faa33579e8781545f2a619650cd3cb3a405f547e5e16c791bb67668a",
    "sql": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) DESC LIMIT 1;",
    "linq": "context.Cities.GroupBy(row => new { row.StateName }).OrderByDescending(group => group.Sum(row => row.Population)).Select(group => new { group.Key.StateName }).Take(1).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b2f1956f92c653884e36d5ea3d7c8bdd88ad0817502c4e9bdfc436f4fb083754",
    "sql": "SELECT river_name FROM river;",
    "linq": "context.Rivers.Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "19682467564e8d18bf29a62931f10bb0e987c04883d7a49c9f4c42cd4eefa067",
    "sql": "SELECT COUNT ( city_name ) FROM city WHERE city_name = \"austin\";",
    "linq": "context.Cities.Where(row => row.CityName == \"austin\").Select(row => row.CityName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "af01d0965c43b6b739fccd3429f98ec819010d163b408678e5e10702aefee66b",
    "sql": "SELECT population FROM state WHERE population = ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"wyoming\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"wyoming\" );",
    "linq": "context.States.Where(row => row.Population == context.States.Where(row => context.BorderInfo.Where(row => row.StateName == \"wyoming\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.Population).Max() && context.BorderInfo.Where(row => row.StateName == \"wyoming\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,244): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.52",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "72cec0bd42ae6108af95f1a75345121d15ad7a0acdf38d312da431ce75e1ae19",
    "sql": "SELECT LENGTH FROM river WHERE river_name = \"colorado\" AND traverse = \"texas\";",
    "linq": "context.Rivers.Where(row => row.RiverName == \"colorado\" && row.Traverse == \"texas\").Select(row => new { row.Length }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "492ee3a0232a14e660e0615da248e3c43164116f3d565364ab9e4e0187f48674",
    "sql": "SELECT density FROM state WHERE capital = \"austin\";",
    "linq": "context.States.Where(row => row.Capital == \"austin\").Select(row => new { row.Density }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4b94edb21f818be64d07754fb5111cf4d1a4138e85c2137fc335441338d61fb0",
    "sql": "SELECT LENGTH FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river );",
    "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Min()).Select(row => new { row.Length }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4d407fef905ab619026f5f59ec1495f6ff88a883e2990df29943955910647acf",
    "sql": "SELECT lowest_elevation FROM highlow WHERE lowest_point = \"death valley\";",
    "linq": "context.Highlows.Where(row => row.LowestPoint == \"death valley\").Select(row => new { row.LowestElevation }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3e5d6167b5df842a1ae0f337ac35e7214a57d40ce47d9bf8e669d40006b966c4",
    "sql": "SELECT AVG ( population ) FROM state;",
    "linq": "context.States.Select(row => row.Population).Average();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2f171bc57aae131f7d34e0629319c69852ead132245543b053e96d4c06d67675",
    "sql": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "linq": "context.Rivers.Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f69a2c53e9d80921f3769643b31e3259331660294b3780540210433203d0ae36",
    "sql": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border = t1.state_name JOIN border_info AS t3 ON t3.border = t2.state_name JOIN border_info AS t4 ON t4.border = t3.state_name WHERE t4.state_name = \"texas\";",
    "linq": "context.BorderInfo.Join(context.BorderInfo, t2 => t2.Border, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Join(context.BorderInfo, joined => joined.t2.StateName, t3 => t3.Border, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.BorderInfo, joined => joined.t3.StateName, t4 => t4.Border, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t4.StateName == \"texas\").Select(row => new { row.t1.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,257): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    4 Error(s)\n\nTime Elapsed 00:00:01.47",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c8f9e9e9c7e2f9729a984db5ea777ab46a81659fc3d35b9930bf51496c095119",
    "sql": "SELECT COUNT ( border ) FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE capital = \"boston\" );",
    "linq": "context.BorderInfo.Where(row => row.StateName == context.States.Where(row => row.Capital == \"boston\").Select(row => row.StateName).First()).Select(row => row.Border).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.48",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eb77dbeee421b28f2c87bfa16dde15b2a230d01522c64c47661433ac800d1dc2",
    "sql": "SELECT city_name FROM city WHERE population > 150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH > 750 AND traverse = \"virginia\" ) );",
    "linq": "context.Cities.Where(row => row.Population > 150000 && context.Rivers.Where(row => context.Rivers.Where(row => row.Length > 750 && row.Traverse == \"virginia\").Select(row => row.RiverName).Contains(row.RiverName)).Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cdf64ca55f45b8db6df890aef5668abba29fc7ba196a944603c3bc1e60b519b2",
    "sql": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name = \"texas\" );",
    "linq": "context.States.Where(row => !context.BorderInfo.Where(row => row.StateName == \"texas\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,49): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.59",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8baffb6b0c05b903abd80a133d3b28809d1bb740d65c1e61bfac3ec04c322c0f",
    "sql": "SELECT COUNT ( border ) FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "linq": "context.BorderInfo.Where(row => row.StateName == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).First()).Select(row => row.Border).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fec1cc71bdcc121400a0a4e54d3dbda5199924fe148d040b8e26f298e12a203d",
    "sql": "SELECT state_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"montana\" ) AND state_name = \"montana\";",
    "linq": "context.Cities.Where(row => row.Population == context.Cities.Where(row => row.StateName == \"montana\").Select(row => row.Population).Max() && row.StateName == \"montana\").Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "98e28c0d3a2c38e8875a64af265489b4947560be856f5a48cfe322987c1d2552",
    "sql": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t2.lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow ) ;",
    "linq": "context.Highlows.Join(context.States, t2 => t2.StateName, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t2.LowestElevation == context.Highlows.Select(row => row.LowestElevation).Min()).Select(row => new { row.t1.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "24919f4f7c28d241a5b7c2aa31a4c5b8d9d8453814e9b533f66f490cb4493804",
    "sql": "SELECT DISTINCT t1.city_name FROM city AS t1 JOIN river AS t2 ON t2.traverse = t1.state_name WHERE t1.population = ( SELECT MAX ( t1.population ) FROM river AS t2 JOIN city AS t1 ON t2.traverse = t1.state_name );",
    "linq": "context.Cities.Join(context.Rivers, t1 => t1.StateName, t2 => t2.Traverse, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Population == context.Rivers.Join(context.Cities, t2 => t2.Traverse, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Select(row => row.t1.Population).Max()).Select(row => new { row.t1.CityName }).Distinct().ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e13d466a1bbdce4ef4a4bf38a32e1fa3ef8c3faed9f6157280506bccc44b7b92",
    "sql": "SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name = t2.traverse WHERE t1.state_name = ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );",
    "linq": "context.Rivers.Join(context.States, t2 => t2.Traverse, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t1.StateName == context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).First()).Select(row => row.t2.RiverName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "89d3c56d0a3d3cba79b5069c106560eacb5dac804d897a08a1ae8e7aefaecbc6",
    "sql": "SELECT t1.state_name FROM highlow AS t3 JOIN border_info AS t1 ON t3.state_name = t1.border JOIN state AS t2 ON t2.state_name = t1.border WHERE t3.lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow ) ORDER BY t2.area DESC LIMIT 1;",
    "linq": "context.Highlows.Join(context.BorderInfo, t3 => t3.StateName, t1 => t1.Border, (t3, t1) => new { t3, t1 }).Join(context.States, joined => joined.t1.Border, t2 => t2.StateName, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t3.LowestElevation == context.Highlows.Select(row => row.LowestElevation).Min()).OrderByDescending(row => row.t2.Area).Select(row => new { row.t1.StateName }).Take(1).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.44",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "62f2b0f6c4e96b2954cff6238639c3b2e176eaf7489cbc55603b5883957ec0f0",
    "sql": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t2.highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );",
    "linq": "context.Highlows.Join(context.States, t2 => t2.StateName, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t2.HighestElevation == context.Highlows.Select(row => row.HighestElevation).Max()).Select(row => new { row.t1.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "736eda0a6bb233049cb27a0057df9db5e68257899ebf768f7dd6930340ebae09",
    "sql": "SELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t1.area = ( SELECT MIN ( area ) FROM state );",
    "linq": "context.Highlows.Join(context.States, t2 => t2.StateName, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Area == context.States.Select(row => row.Area).Min()).Select(row => new { row.t2.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0305229979dc4805438c6064cdd935600391383bef35cf310d4573cfacbee558",
    "sql": "SELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse = t2.state_name WHERE t2.highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );",
    "linq": "context.Highlows.Join(context.Rivers, t2 => t2.StateName, t1 => t1.Traverse, (t2, t1) => new { t2, t1 }).Where(row => row.t2.HighestElevation == context.Highlows.Select(row => row.HighestElevation).Max()).Select(row => row.t1.RiverName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b993381edf52452f98828c8b79439de389698bff8a80233b20ba618cc3a2f330",
    "sql": "SELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t1.area = ( SELECT MAX ( area ) FROM state );",
    "linq": "context.Highlows.Join(context.States, t2 => t2.StateName, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Area == context.States.Select(row => row.Area).Max()).Select(row => new { row.t2.HighestElevation }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8ffe6edb1986946932d17d21e6377a4968d6ab40dbce3c000817e4a13c1cfdd8",
    "sql": "SELECT t1.river_name FROM highlow AS t2 JOIN river AS t1 ON t1.traverse = t2.state_name WHERE t2.highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow ) ORDER BY t1.length DESC LIMIT 1;",
    "linq": "context.Highlows.Join(context.Rivers, t2 => t2.StateName, t1 => t1.Traverse, (t2, t1) => new { t2, t1 }).Where(row => row.t2.HighestElevation == context.Highlows.Select(row => row.HighestElevation).Max()).OrderByDescending(row => row.t1.Length).Select(row => new { row.t1.RiverName }).Take(1).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a3df1067f233185f781cba9b899dea7de87db866772b6a400077dd6f8e2b11e3",
    "sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
    "linq": "context.Movies.Where(row => row.Director == \"Steven Spielberg\").Select(row => new { row.Title }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dec641b9b410272bd54ca66e79b846a56d3241f68ba699ac06bcc2fce6f196d7",
    "sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR > 2000",
    "linq": "context.Movies.Where(row => row.Director == \"James Cameron\" && row.Year > 2000).Select(row => new { row.Title }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "68c8eed132d2fff4628d93e93d058d89ff2d212c1679449437ebc31b83d0ad6e",
    "sql": "SELECT count(*) FROM Movie WHERE YEAR < 2000",
    "linq": "context.Movies.Where(row => row.Year < 2000).Count();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fcbe716c900cd729acc81fd5aecd12a6d0cb3755d74898fa036bc5f779d795a6",
    "sql": "SELECT director FROM Movie WHERE title = 'Avatar'",
    "linq": "context.Movies.Where(row => row.Title == \"Avatar\").Select(row => new { row.Director }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2115ed5381c9626472e4491e142e52b4cbf7279b27f3d04a25099ebab1a5b534",
    "sql": "SELECT count(*) FROM Reviewer",
    "linq": "context.Reviewers.Count();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b5a6e0e17411dd13c55c8e25e2622f7b7b93170190fa00178bba18b696932a30",
    "sql": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"",
    "linq": "context.Reviewers.Where(row => EF.Functions.Like(row.Name, \"%Mike%\")).Select(row => new { row.RId }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "032fa04e9b62f40e292ec6e433dce8ed5f108a83ead78df70fb7202088793848",
    "sql": "SELECT rID FROM Reviewer WHERE name = \"Daniel Lewis\"",
    "linq": "context.Reviewers.Where(row => row.Name == \"Daniel Lewis\").Select(row => new { row.RId }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8888957bac21375cc2e24fef1b6af129811212f741877630d9d54dbe803439a0",
    "sql": "SELECT count(*) FROM Rating WHERE stars > 3",
    "linq": "context.Ratings.Where(row => row.Stars > 3).Count();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6673f78e23407a5fbd02c3e037f1a057c3309ce52c58346b1cb8524bc39d1994",
    "sql": "SELECT max(stars) , min(stars) FROM Rating",
    "linq": "context.Ratings.GroupBy(row => 1).Select(group => new { MaxStars = group.Select(row => row.Stars).Max(), MinStars = group.Select(row => row.Stars).Min() }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "47c6142b3454bcf081b53e2217ba402b7cf9f172cc9211032292d27df69177bb",
    "sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4 ORDER BY T1.year",
    "linq": "context.Movies.Join(context.Ratings, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Stars >= 4).OrderBy(row => row.T1.Year).Select(row => new { row.T1.Year }).Distinct().ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7a8cf368e681a01a52ecee0d8634dd26528e48194af816667c501672c2ef7e5e",
    "sql": "SELECT T1.director , T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 5",
    "linq": "context.Movies.Join(context.Ratings, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Stars == 5).Select(row => new { row.T1.Director, row.T1.Title }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0633c573279c087625f05809f0baa0f956d891e0916e64ff7306efbd3a5db1b2",
    "sql": "SELECT T2.name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name",
    "linq": "context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { group.Key.Name, AverageStars = group.Select(row => row.T1.Stars).Average() }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3cd2009b9a90228083180766493ab170b874cad257da867dc9a6ba9411a54498",
    "sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)",
    "linq": "context.Movies.Where(row => !context.Ratings.Select(row => row.MId).Contains(row.MId)).Select(row => new { row.Title }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1c68806c2605953243053f2bbf2c3ef6444daeb2ec9dad4639a9cd113887c4fe",
    "sql": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE ratingDate = \"null\"",
    "linq": "context.Reviewers.Join(context.Ratings, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.RatingDate == \"null\").Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "movie_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,121): error CS0019: Operator '==' cannot be applied to operands of type 'DateOnly?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0e90cfc8f3f292831858cd6eb0115a7ce10f7a42a276eeb3bdea148ce0c3b276",
    "sql": "SELECT avg(T1.stars) , T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT min(YEAR) FROM Movie)",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == context.Movies.Select(row => row.Year).Min()).Select(row => new { AverageStars = row.Select(row => row.T1.Stars).Average(), row.T2.Title }).ToList();",
    "db_name": "movie_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,218): error CS1061: '<anonymous type: Rating T1, Movie T2>' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type '<anonymous type: Rating T1, Movie T2>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fbca1a36652b0c3c8f120cce30c2608dddfa80132ffe83444d0c75ae53c6d976",
    "sql": "SELECT title FROM Movie WHERE YEAR = (SELECT max(YEAR) FROM Movie)",
    "linq": "context.Movies.Where(row => row.Year == context.Movies.Select(row => row.Year).Max()).Select(row => new { row.Title }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7a7067556c18e4527cd5b2f30ae3e7f85f1ce7a00cc6ea877f7aeda98d5a193f",
    "sql": "SELECT max(T1.stars) , T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT max(YEAR) FROM Movie)",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == context.Movies.Select(row => row.Year).Max()).Select(row => new { MaxStars = row.Select(row => row.T1.Stars).Max(), row.T2.Year }).ToList();",
    "db_name": "movie_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,214): error CS1061: '<anonymous type: Rating T1, Movie T2>' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type '<anonymous type: Rating T1, Movie T2>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.41",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "be2dc3f5629cf85c694724014116cc129ac366ad26c178fd3769708ad479e941",
    "sql": "SELECT title FROM Movie WHERE YEAR > (SELECT max(YEAR) FROM Movie WHERE director = \"Steven Spielberg\")",
    "linq": "context.Movies.Where(row => row.Year > context.Movies.Where(row => row.Director == \"Steven Spielberg\").Select(row => row.Year).Max()).Select(row => new { row.Title }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2030d58c807dc7f32fc0871794027d571e42022b45387a887e89488c0448ca24",
    "sql": "SELECT T2.title , T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars > (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = \"James Cameron\")",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars > context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Director == \"James Cameron\").Select(row => row.T1.Stars).Average()).Select(row => new { row.T2.Title, row.T2.Director }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2077d9bdb6fec3c7dd431e77fdadeebfa1077076e32819bc53463f053bbf4270",
    "sql": "SELECT T3.name , T2.title , T1.stars , T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID ORDER BY T3.name , T2.title , T1.stars",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Join(context.Reviewers, joined => joined.T1.RId, T3 => T3.RId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T3.Name).ThenBy(row => row.T2.Title).ThenBy(row => row.T1.Stars).Select(row => new { row.T3.Name, row.T2.Title, row.T1.Stars, row.T1.RatingDate }).ToList();",
    "db_name": "movie_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: Ashley White, 1: E.T., 2: 3, 3: 2011-01-02}, {0: Brittany Harris, 1: Raiders of the Lost Ark, 2: 2, 3: 2011-01-30}, {0: Brittany Harris, 1: Raiders of the Lost Ark, 2: 4, 3: 2011-01-12}, {0: Brittany Harris, 1: The Sound of Music, 2: 2, 3: 2011-01-20}, {0: Chris Jackson, 1: E.T., 2: 2, 3: 2011-01-22}, {0: Chris Jackson, 1: Raiders of the Lost Ark, 2: 4}, {0: Chris Jackson, 1: The Sound of Music, 2: 3, 3: 2011-01-27}, {0: Daniel Lewis, 1: Snow White, 2: 4}, {0: Elizabeth Thomas, 1: Avatar, 2: 3, 3: 2011-01-15}, {0: Elizabeth Thomas, 1: Snow White, 2: 5, 3: 2011-01-19}, {0: James Cameron, 1: Avatar, 2: 5, 3: 2011-01-20}, {0: Mike Anderson, 1: Gone with the Wind, 2: 3, 3: 2011-01-09}, {0: Sarah Martinez, 1: Gone with the Wind, 2: 2, 3: 2011-01-22}, {0: Sarah Martinez, 1: Gone with the Wind, 2: 4, 3: 2011-01-27}]\", linq_results: \"[{0: Ashley White, 1: E.T., 2: 3, 3: 02.01.2011}, {0: Brittany Harris, 1: Raiders of the Lost Ark, 2: 2, 3: 30.01.2011}, {0: Brittany Harris, 1: Raiders of the Lost Ark, 2: 4, 3: 12.01.2011}, {0: Brittany Harris, 1: The Sound of Music, 2: 2, 3: 20.01.2011}, {0: Chris Jackson, 1: E.T., 2: 2, 3: 22.01.2011}, {0: Chris Jackson, 1: Raiders of the Lost Ark, 2: 4}, {0: Chris Jackson, 1: The Sound of Music, 2: 3, 3: 27.01.2011}, {0: Daniel Lewis, 1: Snow White, 2: 4}, {0: Elizabeth Thomas, 1: Avatar, 2: 3, 3: 15.01.2011}, {0: Elizabeth Thomas, 1: Snow White, 2: 5, 3: 19.01.2011}, {0: James Cameron, 1: Avatar, 2: 5, 3: 20.01.2011}, {0: Mike Anderson, 1: Gone with the Wind, 2: 3, 3: 09.01.2011}, {0: Sarah Martinez, 1: Gone with the Wind, 2: 2, 3: 22.01.2011}, {0: Sarah Martinez, 1: Gone with the Wind, 2: 4, 3: 27.01.2011}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "426491d1780414f80fa69d3a2f5833bcc736530ea9a6a20688db0c313943fbc9",
    "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T1.rID HAVING COUNT(*) >= 3",
    "linq": "context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.RId }).Where(group => group.Count() >= 3).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c50e01b7bd124f2f767110a3cd067004f6e2d9b8d713609cfef7bb78a6da4cd5",
    "sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.title = 'Gone with the Wind'",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Join(context.Reviewers, joined => joined.T1.RId, T3 => T3.RId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Title == \"Gone with the Wind\").Select(row => new { row.T3.Name }).Distinct().ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f54d22d18114abe0744c5e7d6cca129d1f834084cebf9a9a34e97894ebfa2b62",
    "sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Sarah Martinez'",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Join(context.Reviewers, joined => joined.T1.RId, T3 => T3.RId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Sarah Martinez\").Select(row => new { row.T2.Director }).Distinct().ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a49f5151dc56617789433a5489ec93e595be3a4f4c6b1f95610032c4d6b4a44f",
    "sql": "SELECT DISTINCT T3.name , T2.title , T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Join(context.Reviewers, joined => joined.T1.RId, T3 => T3.RId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Director == row.T3.Name).Select(row => new { row.T3.Name, row.T2.Title, row.T1.Stars }).Distinct().ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9d494023dbe631008f10f09451426277c8a7af764df4a38d3d75b06e88ac9a1e",
    "sql": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
    "linq": "context.Reviewers.Select(row => row.Name).Union(context.Movies.Select(row => row.Title)).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7cf2ae8dd3108039bce82319e2a26d6f209c32ab084667b20bc410e3c4f6782a",
    "sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson'",
    "linq": "context.Movies.Select(row => row.Title).Distinct().Except(context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Join(context.Reviewers, joined => joined.T1.RId, T3 => T3.RId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Chris Jackson\").Select(row => row.T2.Title)).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6971fb65f94a26cafe5b116f066dd580f3d1714afebc5b0ddd4226f93bcdfe0d",
    "sql": "SELECT T1.title , T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title ORDER BY T1.director , T1.title",
    "linq": "context.Movies.Join(context.Movies, T1 => T1.Director, T2 => T2.Director, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Title != row.T2.Title).OrderBy(row => row.T1.Director).ThenBy(row => row.T1.Title).Select(row => new { row.T1.Title, row.T1.Director }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ac99010bb211f5b74802ef832a91e37f82705ecc3390f55ae7c18124f609c7de",
    "sql": "SELECT T1.title , T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title",
    "linq": "context.Movies.Join(context.Movies, T1 => T1.Director, T2 => T2.Director, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Title != row.T2.Title).Select(row => new { row.T1.Title, row.T1.Year }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "94df1fdfeccb4c5fae72c7cce148afa36eb667121a45d09088cae6e3bf28becc",
    "sql": "SELECT director FROM Movie GROUP BY director HAVING count(*) = 1",
    "linq": "context.Movies.GroupBy(row => new { row.Director }).Where(group => group.Count() == 1).Select(group => new { group.Key.Director }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ea68943776ba3aadaa63b6c9b79a26c13ebf5b33959a8bab32999270139ce4ab",
    "sql": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*) = 1",
    "linq": "context.Movies.Where(row => row.Director != \"null\").GroupBy(row => new { row.Director }).Where(group => group.Count() == 1).Select(group => new { group.Key.Director }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "357b16b3067ddb8929e7546d8bac69b4206db26dfa7d9957a858834e9ed0e74d",
    "sql": "SELECT count(*) , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director",
    "linq": "context.Movies.Join(context.Ratings, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Director }).Select(group => new { Count = group.Count(), group.Key.Director }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "23cc9aaf3a36dbbe2acf875fd4eddde0f61bbb33ff4192a5e20efa727650289e",
    "sql": "SELECT T2.title , avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MId }).Select(group => new { group.First().T2.Title, AverageStars = group.Select(row => row.T1.Stars).Average() }).OrderByDescending(group => group.AverageStars).Take(1).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2f6d7a045e8e189dc1c3dcca78c0108e74b14129e127eaf1c2ccc9f1c753c0d8",
    "sql": "SELECT T2.title , avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MId }).Select(group => new { group.First().T2.Title, AverageStars = group.Select(row => row.T1.Stars).Average() }).OrderBy(group => group.AverageStars).Take(1).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "21a1949af2285aa5b4c1978d795162e5ee4e0944be575eb30f50be10d965d97a",
    "sql": "SELECT T2.title , T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY T1.stars DESC LIMIT 3",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Stars).Select(row => new { row.T2.Title, row.T2.Year }).Take(3).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "730e8ff02cd60e417e71be6b17c92933cd4f74a1998940db2f4b09d0b8e72fdc",
    "sql": "SELECT T2.title , T1.stars , T2.director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Director != \"null\").GroupBy(row => new { row.T2.Director }).Select(group => new { group.OrderByDescending(row => row.T1.Stars).First().T2.Title, T1Stars = group.OrderByDescending(row => row.T1.Stars).First().T1.Stars, group.Key.Director, MaxStarsT1 = group.Select(row => row.T1.Stars).Max() }).ToList();",
    "db_name": "movie_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: Avatar, 1: 5, 2: James Cameron, 3: 5}, {0: The Sound of Music, 1: 3, 2: Robert Wise, 3: 3}, {0: Raiders of the Lost Ark, 1: 4, 2: Steven Spielberg, 3: 4}, {0: Gone with the Wind, 1: 4, 2: Victor Fleming, 3: 4}]\", linq_results: \"[{0: Snow White, 1: 5, 3: 5}, {0: Avatar, 1: 5, 2: James Cameron, 3: 5}, {0: The Sound of Music, 1: 3, 2: Robert Wise, 3: 3}, {0: Raiders of the Lost Ark, 1: 4, 2: Steven Spielberg, 3: 4}, {0: Gone with the Wind, 1: 4, 2: Victor Fleming, 3: 4}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2b16d0ec7c475a7320f270694035ac8dee8dbc8241db6b647d4849b1a32075ea",
    "sql": "SELECT T2.title , T1.rID , T1.stars , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.rID",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.RId }).Select(group => new { group.OrderBy(row => row.T1.Stars).First().T2.Title, group.Key.RId, group.OrderBy(row => row.T1.Stars).First().T1.Stars, MinStarsT1 = group.Select(row => row.T1.Stars).Min() }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "88f4a995ae10a0a034e01afb4344e3c509ffd2223f9de8abdf8d64dfa456697d",
    "sql": "SELECT T2.title , T1.stars , T2.director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.director",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Director }).Select(group => new { group.OrderBy(row => row.T1.Stars).First().T2.Title, group.OrderBy(row => row.T1.Stars).First().T1.Stars, group.Key.Director, MinStarsT1 = group.Select(row => row.T1.Stars).Min() }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "41941e2a2c5c1eae2b565351322011b3de2f53006764701422ab9b8b177bc07e",
    "sql": "SELECT T2.title , T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Title, group.Key.MId }).Take(1).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "05e89660950c42b305f0519f9900bdb933b85de9ea323810d9cfdc4f67910dd0",
    "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars >= 3 && row.T1.Stars <= 5).Select(row => new { row.T2.Title }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "de2b137e3f99c857526e564a8595f025b46eb4244ef97fccfb06105266fa3088",
    "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars > 3",
    "linq": "context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars > 3).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "27d6126226f8292212e6c26c40806bbdd929c68397bf2f3656c7ae7a99cf6219",
    "sql": "SELECT mID , avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = \"Brittany Harris\") GROUP BY mID",
    "linq": "context.Ratings.Where(row => row.MId.HasValue && !context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Brittany Harris\").Select(row => row.T1.MId).Contains(row.MId.Value)).GroupBy(row => new { row.MId }).Select(group => new { group.Key.MId, AverageStars = group.Select(row => row.Stars).Average() }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2e6408ff62c09197cef9dba41f2b139372dc0c98b6687af9b555d7fd0e3ac81b",
    "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = \"Brittany Harris\"",
    "linq": "context.Ratings.Where(row => row.MId.HasValue).Select(row => row.MId.Value).Except(context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Brittany Harris\").Where(row => row.T1.MId.HasValue).Select(row => row.T1.MId.Value)).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ae19bb70c7d69ad1f15f1d16f9310b5de7dac065a7a0d01f9080f5649b11ce9b",
    "sql": "SELECT mID , avg(stars) FROM Rating GROUP BY mID HAVING count(*) >= 2",
    "linq": "context.Ratings.GroupBy(row => new { row.MId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.MId, AverageStars = group.Select(row => row.Stars).Average() }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a554f41b1d7d3a53cbe05fa5c59ef7bcd7af3bd09b50aa62328286b69fa01997",
    "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = 4",
    "linq": "context.Ratings.Where(row => row.RId.HasValue).Select(row => row.RId.Value).Except(context.Ratings.Where(row => row.Stars == 4).Where(row => row.RId.HasValue).Select(row => row.RId.Value)).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4618f9a85422a308d4f5c30bf92bc28dc4fccc956a4d3b083fb346dc7b811e60",
    "sql": "SELECT rID FROM Rating WHERE stars != 4",
    "linq": "context.Ratings.Where(row => row.Stars != 4).Select(row => new { row.RId }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "af488407df732dc387d04a98adc369564cce3ce509b8cad8f2120fcd1139f450",
    "sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris' OR T2.year > 2000",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Join(context.Reviewers, joined => joined.T1.RId, T3 => T3.RId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Brittany Harris\" || row.T2.Year > 2000).Select(row => new { row.T2.Title }).Distinct().ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "efa98abf9de0010ec958b09f44e285a3961e9e0e5dcae9900c8238a60d223d55",
    "sql": "SELECT title FROM Movie WHERE director = \"James Cameron\" OR YEAR < 1980",
    "linq": "context.Movies.Where(row => row.Director == \"James Cameron\" || row.Year < 1980).Select(row => new { row.Title }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7ebf0bfcf601c500a9a7c1c3899744d894d5b93952061a1ba233d88ffc958b74",
    "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 4",
    "linq": "context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars == 3).Select(row => row.T2.Name).Intersect(context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars == 4).Select(row => row.T2.Name)).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d2eb800a30090a389b99cbcfe1846903d38c9b19146b2670353d65844da033ea",
    "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 4",
    "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars == 3).Select(row => row.T2.Title).Intersect(context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars == 4).Select(row => row.T2.Title)).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "108a4d2df29892dea663b8d26ebaf4c853cbb43e14eea433efa3e82416aa9d42",
    "sql": "SELECT count(*) FROM Accounts",
    "linq": "context.Accounts.Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f5a7772e7e9cde75e7cda214d5e0fc67d9492c8016c71605fccfc10b59020311",
    "sql": "SELECT account_id , customer_id , account_name FROM Accounts",
    "linq": "context.Accounts.Select(row => new { row.AccountId, row.CustomerId, row.AccountName }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "265d431dd2b5d3c64c9116a7409135e12e50dac4e7c452fae576836d8229bc05",
    "sql": "SELECT other_account_details FROM Accounts WHERE account_name = \"338\"",
    "linq": "context.Accounts.Where(row => row.AccountName == \"338\").Select(row => new { row.OtherAccountDetails }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "938941fd7d85f0cfcd08bc4b46d6abbb4b0634ab5aa129871e6b5814eb9415e6",
    "sql": "SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"162\"",
    "linq": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.AccountName == \"162\").Select(row => new { row.T2.CustomerFirstName, row.T2.CustomerLastName, row.T2.CustomerPhone }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b44ce37d2be1b1187caa4c1d1e75a8deb3793cd833e8df6682dc0232f4579d5a",
    "sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\"",
    "linq": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CustomerFirstName == \"Art\" && row.T2.CustomerLastName == \"Turcotte\").Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9f4793992d3babdea82c6aa3151c859802e783539bb441c7d5053de157116fef",
    "sql": "SELECT customer_id , count(*) FROM Accounts GROUP BY customer_id",
    "linq": "context.Accounts.GroupBy(row => new { row.CustomerId }).Select(group => new { group.Key.CustomerId, Count = group.Count() }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f077c3b417a37d0d3a05e6ef4507392ba2207ec6b606a5900aa976e85950ef15",
    "sql": "SELECT customer_id , count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Accounts.GroupBy(row => new { row.CustomerId }).Select(group => new { group.Key.CustomerId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "338f524b88d579bbf20a2eaddf088f8c8c9f231ed02c1cf93dc4cbd626b301a5",
    "sql": "SELECT T2.customer_first_name , T2.customer_last_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderBy(group => group.Count()).Select(group => new { group.First().T2.CustomerFirstName, group.First().T2.CustomerLastName, group.Key.CustomerId }).Take(1).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "305b03c486a0ce6e5c361613f281929abfeb7af468b8549b5307c545b960f175",
    "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
    "linq": "context.Customers.Where(row => !context.Accounts.Select(row => row.CustomerId).Contains(row.CustomerId)).Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b876af56b74cec30ec04f8adfe4e72190f05789dd4c24f4dacabc5b4c5acae26",
    "sql": "SELECT customer_first_name , customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
    "linq": "context.Customers.Select(row => new { row.CustomerFirstName, row.CustomerLastName }).Except(context.Customers.Join(context.Accounts, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.CustomerFirstName, row.T1.CustomerLastName })).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d034ed2c5041cce352024034ccee1771f4fd5612a5782f4087337deca8ea9543",
    "sql": "SELECT DISTINCT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
    "linq": "context.Customers.Join(context.Accounts, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.CustomerFirstName, row.T1.CustomerLastName }).Distinct().ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b475bd5ac0a5f64aaf0852beaa668b572a18056005491d508e87c5da3013cea9",
    "sql": "SELECT count(DISTINCT customer_id) FROM Accounts",
    "linq": "context.Accounts.Select(row => row.CustomerId).Distinct().Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7e41906e365ae47a4aff703c19b9e1cea1c4a974a0544d19d5afe1c1eeafcc21",
    "sql": "SELECT count(*) FROM Customers",
    "linq": "context.Customers.Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6677aa484c4518fd7c78ff9e5946f398b5132a4b1b228fc512ca1b2b32c912a9",
    "sql": "SELECT customer_id , customer_first_name , customer_last_name , customer_phone FROM Customers",
    "linq": "context.Customers.Select(row => new { row.CustomerId, row.CustomerFirstName, row.CustomerLastName, row.CustomerPhone }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6eb32cff8707c7e5d379235ac77ac7b3e6b500e7ee7a3f75d429dc58a48ebb84",
    "sql": "SELECT customer_phone , customer_email FROM Customers WHERE customer_first_name = \"Aniyah\" AND customer_last_name = \"Feest\"",
    "linq": "context.Customers.Where(row => row.CustomerFirstName == \"Aniyah\" && row.CustomerLastName == \"Feest\").Select(row => new { row.CustomerPhone, row.CustomerEmail }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fa37a0d0cfaad41971d84fed4fe7b7c7564b043a94863cc7735f02560eaee9eb",
    "sql": "SELECT count(*) FROM Customers_cards",
    "linq": "context.CustomersCards.Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "38750da255f134770e5cdb5383dff5b43f5e9607c479d12962881498f5eaa3b4",
    "sql": "SELECT card_id , customer_id , card_type_code , card_number FROM Customers_cards",
    "linq": "context.CustomersCards.Select(row => new { row.CardId, row.CustomerId, row.CardTypeCode, row.CardNumber }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fbca3ff108241a4c593c2724e25b61c09bc0269f055829a1b0e91d47da80caea",
    "sql": "SELECT date_valid_from , date_valid_to FROM Customers_cards WHERE card_number = \"4560596484842\"",
    "linq": "context.CustomersCards.Where(row => row.CardNumber == \"4560596484842\").Select(row => new { row.DateValidFrom, row.DateValidTo }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a53fe0988234e5adcaf771afb6a6edc68e36d0744aff35ff6798cdba5cfe095a",
    "sql": "SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = \"4560596484842\"",
    "linq": "context.CustomersCards.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CardNumber == \"4560596484842\").Select(row => new { row.T2.CustomerFirstName, row.T2.CustomerLastName, row.T2.CustomerPhone }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a9f096c6dbacc61190bbb15cd70c272704b5f7af6e98de971dee4ae39474efa0",
    "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\"",
    "linq": "context.CustomersCards.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CustomerFirstName == \"Art\" && row.T2.CustomerLastName == \"Turcotte\").Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f611fed4cdfcd620f857e9070047325ee3b3a47ac57341f8c1ba0d7ac5281d1b",
    "sql": "SELECT count(*) FROM Customers_cards WHERE card_type_code = \"Debit\"",
    "linq": "context.CustomersCards.Where(row => row.CardTypeCode == \"Debit\").Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4fba573e4d4186b5b1d9f9b2932d96f8d1de1a95f12e26b2e0826f8ed683ce85",
    "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Blanche\" AND T2.customer_last_name = \"Huels\" AND T1.card_type_code = \"Credit\"",
    "linq": "context.CustomersCards.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CustomerFirstName == \"Blanche\" && row.T2.CustomerLastName == \"Huels\" && row.T1.CardTypeCode == \"Credit\").Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "03c9b9efffb524b95ca15be89615b2690c4a491e9b85160446fc843cf798bd7e",
    "sql": "SELECT customer_id , count(*) FROM Customers_cards GROUP BY customer_id",
    "linq": "context.CustomersCards.GroupBy(row => new { row.CustomerId }).Select(group => new { group.Key.CustomerId, Count = group.Count() }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7001bf21a46315a20ba7693492ff65835b95178f07faaf350fe1fa09cd843c7a",
    "sql": "SELECT customer_id , count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.CustomersCards.GroupBy(row => new { row.CustomerId }).Select(group => new { group.Key.CustomerId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "99332a3c701c4042be511ff83fbb6a69edd01495b82abe371f388b16833b964d",
    "sql": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2",
    "linq": "context.CustomersCards.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.CustomerId, group.First().T2.CustomerFirstName, group.First().T2.CustomerLastName }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "abad0dd6af991806930171a363b0a8a1bf0a5bb3e6e1cb321cf6a097e441bc69",
    "sql": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.CustomersCards.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderBy(group => group.Count()).Select(group => new { group.Key.CustomerId, group.First().T2.CustomerFirstName, group.First().T2.CustomerLastName }).Take(1).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e7e7655a5ae07280f444475b90bf3eae3c3647048a3ada6492d0b03c50504c94",
    "sql": "SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code",
    "linq": "context.CustomersCards.GroupBy(row => new { row.CardTypeCode }).Select(group => new { group.Key.CardTypeCode, Count = group.Count() }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a7fb27066bd694df0362b2b98aab3b4f74a68789a3a8619739ebfb8ea40637bd",
    "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.CustomersCards.GroupBy(row => new { row.CardTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CardTypeCode }).Take(1).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6bc76fc77b4e2d889cfa589af62a727068762cf9caf45a948c3d5d64ca9e7c69",
    "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*) >= 5",
    "linq": "context.CustomersCards.GroupBy(row => new { row.CardTypeCode }).Where(group => group.Count() >= 5).Select(group => new { group.Key.CardTypeCode }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "34abc888a2046b80d58c2d9f1e2c1d126040f2d15070725c8ddd9b0f35317af9",
    "sql": "SELECT card_type_code , count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
    "linq": "context.CustomersCards.GroupBy(row => new { row.CardTypeCode }).Select(group => new { group.Key.CardTypeCode, CountDistinctCustomerId = group.Select(row => row.CustomerId).Distinct().Count() }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "14cdcc18b5e06390c69fbc9d225dcbf71f7e3113b9edb4f2fdd03d355d36ba5a",
    "sql": "SELECT customer_id , customer_first_name FROM Customers EXCEPT SELECT T1.customer_id , T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE card_type_code = \"Credit\"",
    "linq": "context.Customers.Select(row => new { row.CustomerId, row.CustomerFirstName }).Except(context.CustomersCards.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CardTypeCode == \"Credit\").Select(row => new { row.T1.CustomerId, row.T2.CustomerFirstName })).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9a4e7be6b3b4a4e84b2cd82557088f1ffd32267d2af26dc65f50cc944e21ef56",
    "sql": "SELECT DISTINCT card_type_code FROM Customers_Cards",
    "linq": "context.CustomersCards.Select(row => new { row.CardTypeCode }).Distinct().ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0cded5288436d797cc4ac800903e74de6874a7a688988d6bdb2e81196504d498",
    "sql": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
    "linq": "context.CustomersCards.Select(row => row.CardTypeCode).Distinct().Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "750fc3f76ae04f5dcfd5e0f6291fc8ff3f21ddd6c6881a58c4d8f00b1a694ed6",
    "sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions",
    "linq": "context.FinancialTransactions.Select(row => new { row.TransactionType }).Distinct().ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d975e906d2ebea2175708153bce781dafbf4a0b42f1d18ef2005ac59b70ed6d2",
    "sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
    "linq": "context.FinancialTransactions.Select(row => row.TransactionType).Distinct().Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3bec6e4a0ec5c7ed90132d9f36daef625c34a0664489ae96c5e8228e74d3a2e4",
    "sql": "SELECT avg(transaction_amount) , sum(transaction_amount) FROM Financial_transactions",
    "linq": "context.FinancialTransactions.GroupBy(row => 1).Select(group => new { AverageTransactionAmount = group.Select(row => row.TransactionAmount).Average(), SumTransactionAmount = group.Select(row => row.TransactionAmount).Sum() }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cee8afee0c454d75e05f586a49e40d4f8a32a30f74b8c20d54b20e42f8363267",
    "sql": "SELECT T2.card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code",
    "linq": "context.FinancialTransactions.Join(context.CustomersCards, T1 => T1.CardId, T2 => T2.CardId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CardTypeCode }).Select(group => new { group.Key.CardTypeCode, Count = group.Count() }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "97d7c7a93b7ddec659a2559daa7843f4fa533abdaf5ce55a5d8d2a665028c305",
    "sql": "SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type",
    "linq": "context.FinancialTransactions.GroupBy(row => new { row.TransactionType }).Select(group => new { group.Key.TransactionType, Count = group.Count() }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "87107356c470c99274996fa3be96b897966548d0b0f6156b136f4d95f470b6b1",
    "sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
    "linq": "context.FinancialTransactions.GroupBy(row => new { row.TransactionType }).OrderByDescending(group => group.Sum(row => row.TransactionAmount)).Select(group => new { group.Key.TransactionType }).Take(1).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1f02130850bc2c4e2c3fb4b9eb240390eccfd0409f0eb0d1132b7ed1a70651de",
    "sql": "SELECT account_id , count(*) FROM Financial_transactions GROUP BY account_id",
    "linq": "context.FinancialTransactions.GroupBy(row => new { row.AccountId }).Select(group => new { group.Key.AccountId, Count = group.Count() }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9faece589fba6bbcce68665daf7a141172a69492e0dd9e32e801362cea98e633",
    "sql": "SELECT count(*) FROM addresses WHERE country = 'USA'",
    "linq": "context.Addresses.Where(row => row.Country == \"USA\").Count();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "35d258e410a039e7115e298761f363fbc95b2f5772d6267d7fcf2ae96a7c3058",
    "sql": "SELECT DISTINCT city FROM addresses",
    "linq": "context.Addresses.Select(row => new { row.City }).Distinct().ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "84eb45ad7ad8deb3cd9d1d02d926b8caa0714195eb98ba24e336d353facd3d50",
    "sql": "SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
    "linq": "context.Addresses.GroupBy(row => new { row.StateProvinceCounty }).Select(group => new { group.Key.StateProvinceCounty, Count = group.Count() }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4909d8528dd9a1e9ff27e8d375ee6c0b59f8cbf26edf65f87b79095234be681b",
    "sql": "SELECT customer_name , customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)",
    "linq": "context.Customers.Where(row => !context.CustomerAddressHistories.Select(row => row.CustomerId).Contains(row.CustomerId)).Select(row => new { row.CustomerName, row.CustomerPhone }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8fc9c1899e9c5bcecca442257984e40889339f509cfced7210f31a3f18dce1e4",
    "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.CustomerName }).Take(1).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d4114af8791113e53ea1b1d4f15a56ed00804782529f697629657a0681aea9b7",
    "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*) >= 2",
    "linq": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProductTypeCode }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d3fbe0b68947fc254f8989d436a3f9f61012066d953388f83e07cac5db8310f2",
    "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Part'",
    "linq": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatusCode == \"Completed\").Select(row => row.T1.CustomerName).Intersect(context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatusCode == \"Part\").Select(row => row.T1.CustomerName)).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "abe591c86f306a2fbd64e5bb71acf2744bf3a77046de828a306c1eaac0918121",
    "sql": "SELECT customer_name , customer_phone , payment_method_code FROM customers ORDER BY customer_number DESC",
    "linq": "context.Customers.OrderByDescending(row => row.CustomerNumber).Select(row => new { row.CustomerName, row.CustomerPhone, row.PaymentMethodCode }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a455899d6aaff4913f76273d3b9a2d9eda23777add8eb0df7e8d3c34262b3c24",
    "sql": "SELECT T1.product_name , sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id",
    "linq": "context.Products.Join(context.OrderItems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductId }).Select(group => new { group.First().T1.ProductName, SumOrderQuantity = group.Select(row => row.T2.OrderQuantity).Sum() }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,234): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.56",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ea6bf891b24c82bd0659379186ff707e053f0924c3bd8a000b9ef29fa15d9e11",
    "sql": "SELECT min(product_price) , max(product_price) , avg(product_price) FROM products",
    "linq": "context.Products.GroupBy(row => 1).Select(group => new { MinProductPrice = group.Select(row => row.ProductPrice).Min(), MaxProductPrice = group.Select(row => row.ProductPrice).Max(), AverageProductPrice = group.Select(row => row.ProductPrice).Average() }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "31c6b816d3e23d231f31a95997195f5dcd7e78242aa7218cb79abb3c67ba4d5f",
    "sql": "SELECT count(*) FROM products WHERE product_price > (SELECT avg(product_price) FROM products)",
    "linq": "context.Products.Where(row => row.ProductPrice > context.Products.Select(row => (double) row.ProductPrice).Average()).Count();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f9bad3b5f51b9beede41d7fc53109c6887bba61bb2dd164fe1e189beab3a4f4d",
    "sql": "SELECT T2.customer_name , T3.city , T1.date_from , T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id",
    "linq": "context.CustomerAddressHistories.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.Addresses, joined => joined.T1.AddressId, T3 => T3.AddressId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.CustomerName, row.T3.City, row.T1.DateFrom, row.T1.DateTo }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "65f416e7b5b8a271d24e11917132c6c4ff7eb558364e2f33fd0f714c2e11eb4c",
    "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_method_code = 'Credit Card' GROUP BY T1.customer_id HAVING count(*) > 2",
    "linq": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PaymentMethodCode == \"Credit Card\").GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() > 2).Select(group => new { group.First().T1.CustomerName }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0ed43593609f9f5ce43502b79baf616288f35a7d88856ff3d3408f774eabcc3f",
    "sql": "SELECT T1.customer_name , T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1",
    "linq": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.OrderItems, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Sum(row => row.T3.OrderQuantity)).Select(group => new { group.First().T1.CustomerName, group.First().T1.CustomerPhone }).Take(1).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,337): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.63",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "83a599c77dec8c7bfbf783c7f74fab9ef144b4075ee2278228b8c81c3b755e11",
    "sql": "SELECT product_type_code , product_name FROM products WHERE product_price > 1000 OR product_price < 500",
    "linq": "context.Products.Where(row => row.ProductPrice > 1000 || row.ProductPrice < 500).Select(row => new { row.ProductTypeCode, row.ProductName }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cd6d2272474a66011e00b0035a9e479e9aa5945c35177fe73266cdeca1a1df0d",
    "sql": "SELECT vehicle_id FROM Vehicles;",
    "linq": "context.Vehicles.Select(row => new { row.VehicleId }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0d8caa6edd0bcb53fb1b1ab2035329b3e85a1e94a3b447c4479d2ba2fb94af91",
    "sql": "SELECT count(*) FROM Vehicles;",
    "linq": "context.Vehicles.Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9473eed89a1349b1f28e7cfc2448ac6f936ba8853c8ba2166f63d2b0b1097e55",
    "sql": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;",
    "linq": "context.Vehicles.Where(row => row.VehicleId == 1).Select(row => new { row.VehicleDetails }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8acbfc85d9e0ef51db057d01b86a3b238c06bd2456f53861e11b7206f32f5025",
    "sql": "SELECT first_name , middle_name , last_name FROM Staff;",
    "linq": "context.Staff.Select(row => new { row.FirstName, row.MiddleName, row.LastName }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fb86ad13e76abc9ce4c0fbc231f9a39725d589f9acc783477a639b1f6c41ceda",
    "sql": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
    "linq": "context.Staff.Where(row => row.FirstName == \"Janessa\" && row.LastName == \"Sawayn\").Select(row => new { row.DateOfBirth }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a4cf2bf9a310276357ce7a2a311d98033ba5783d675af6cd9932e8bdcbdde08e",
    "sql": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
    "linq": "context.Staff.Where(row => row.FirstName == \"Janessa\" && row.LastName == \"Sawayn\").Select(row => new { row.DateJoinedStaff }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ba0334ea11c71e7b580c079b302c55505b128cb429cde7c112ec8b65e820209e",
    "sql": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
    "linq": "context.Staff.Where(row => row.FirstName == \"Janessa\" && row.LastName == \"Sawayn\").Select(row => new { row.DateLeftStaff }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "70f65b7685dbaf7a8814a5b6320e13e23a65102834e4743f515fa4b48df0d0a3",
    "sql": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";",
    "linq": "context.Staff.Where(row => row.FirstName == \"Ludie\").Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8d6d1b50d6f24abadbfb89a8835724fa2932d0a9557b9011562e3ba4271f1721",
    "sql": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
    "linq": "context.Staff.Where(row => row.FirstName == \"Janessa\" && row.LastName == \"Sawayn\").Select(row => new { row.Nickname }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "72594906deda2fb519acd01269889c8c12d643aa66d62aac784beb56f6f4a474",
    "sql": "SELECT count(*) FROM Staff;",
    "linq": "context.Staff.Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "572a8c89e7231115fcdcc6d7a078e51604d8f5ac49b04bd25bf4b1ec259860c3",
    "sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
    "linq": "context.Addresses.Join(context.Staff, T1 => T1.AddressId, T2 => T2.StaffAddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Janessa\" && row.T2.LastName == \"Sawayn\").Select(row => new { row.T1.City }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "63260585a8767800449bda9cd2eb9be66fec59a70fe2f1f5e85bf89c8ec9895a",
    "sql": "SELECT T1.country , T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
    "linq": "context.Addresses.Join(context.Staff, T1 => T1.AddressId, T2 => T2.StaffAddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Janessa\" && row.T2.LastName == \"Sawayn\").Select(row => new { row.T1.Country, row.T1.StateProvinceCounty }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3d2fc477b3c21006f13ae96d1eb4fd84b4aeaa6baed6999ba061712349ce0959",
    "sql": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";",
    "linq": "context.Lessons.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Rylan\" && row.T2.LastName == \"Goodwin\").Select(row => row.T1.LessonTime).ToList().Select(value => double.Parse(value)).Sum();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "33ea70c179f3f0942bfae503c994cd6b04f4f48028072293060a9871444880d6",
    "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
    "linq": "context.Addresses.Join(context.Staff, T1 => T1.AddressId, T2 => T2.StaffAddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Janessa\" && row.T2.LastName == \"Sawayn\").Select(row => new { row.T1.ZipPostcode }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "da2e3390f871ed454369034ece57365f90441f7348bc04a8708e8a1152341a19",
    "sql": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";",
    "linq": "context.Addresses.Where(row => row.StateProvinceCounty == \"Georgia\").Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d2fe4db96d993673817b076e0b814b2dbc94739d41fbaa5b4304e9c78be11a48",
    "sql": "SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";",
    "linq": "context.Addresses.Join(context.Staff, T1 => T1.AddressId, T2 => T2.StaffAddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.City == \"Damianfort\").Select(row => new { row.T2.FirstName, row.T2.LastName }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dad651ca6c20825eae2374a046fc55cafeb20a19a32d4653b5df73231733e9ef",
    "sql": "SELECT T1.city , count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;",
    "linq": "context.Addresses.Join(context.Staff, T1 => T1.AddressId, T2 => T2.StaffAddressId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.City }).Select(group => new { group.Key.City, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cc93cc501c1e2e226ae7758946aa9ed3e03af894835ac3d4c4c0bbada16b77f5",
    "sql": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
    "linq": "context.Addresses.Join(context.Staff, T1 => T1.AddressId, T2 => T2.StaffAddressId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StateProvinceCounty }).Where(group => group.Count() >= 2 && group.Count() <= 4).Select(group => new { group.Key.StateProvinceCounty }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5c58eb2ead8059bea549eb6512b5bec46755255c93bc5029ec28ac63ad18186f",
    "sql": "SELECT first_name , last_name FROM Customers;",
    "linq": "context.Customers.Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f4d1bc9e2b5cf7c4157b6ea8258c6aae68c422556c76ff1e5db7d92bd1da9846",
    "sql": "SELECT email_address , date_of_birth FROM Customers WHERE first_name = \"Carole\"",
    "linq": "context.Customers.Where(row => row.FirstName == \"Carole\").Select(row => new { row.EmailAddress, row.DateOfBirth }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "341697de199138b9f333d2a66f12dbc1a3fb47042600a6c05ced49f514caefcf",
    "sql": "SELECT phone_number , email_address FROM Customers WHERE amount_outstanding > 2000;",
    "linq": "context.Customers.Where(row => row.AmountOutstanding > 2000).Select(row => new { row.PhoneNumber, row.EmailAddress }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "034542f3b289519efcb5d8d11480e277583233b2e3668c2adbb09a476f8b43ab",
    "sql": "SELECT customer_status_code , cell_mobile_phone_number , email_address FROM Customers WHERE first_name = \"Marina\" OR last_name = \"Kohler\"",
    "linq": "context.Customers.Where(row => row.FirstName == \"Marina\" || row.LastName == \"Kohler\").Select(row => new { row.CustomerStatusCode, row.CellMobilePhoneNumber, row.EmailAddress }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "825fbb3c1d702df76cc66cb4c1fe1e4af16eef4641e718699e45fc3560f1e79e",
    "sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer'",
    "linq": "context.Customers.Where(row => row.CustomerStatusCode == \"Good Customer\").Select(row => new { row.DateOfBirth }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "404cb3490cbcc8a15206530c94cc931d536760d4f611e576b25fcbc9e48e9eac",
    "sql": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";",
    "linq": "context.Customers.Where(row => row.FirstName == \"Carole\" && row.LastName == \"Bernhard\").Select(row => new { row.DateBecameCustomer }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1be331fe1718285c48b85982c0589c8a5886a6ef0d335ac440e0ec80b586821a",
    "sql": "SELECT count(*) FROM Customers;",
    "linq": "context.Customers.Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "371d201ca5ece52433b41623a804133cb5e3ab68cf9ec1b17e35e7948f495533",
    "sql": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;",
    "linq": "context.Customers.GroupBy(row => new { row.CustomerStatusCode }).Select(group => new { group.Key.CustomerStatusCode, Count = group.Count() }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f338c6792f9325df9bb8cb319db3efe9729b4566808a05626e64b27003271fe6",
    "sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;",
    "linq": "context.Customers.GroupBy(row => new { row.CustomerStatusCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.CustomerStatusCode }).Take(1).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a3bb67ea3b9596198303925478e53c9bc9c29d2f3525bd8231941951e02054e3",
    "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";",
    "linq": "context.Lessons.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Rylan\" && row.T2.LastName == \"Goodwin\" && row.T1.LessonStatusCode == \"Completed\").Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9179bc7472842f36a95cffcb8bef7633c4e6193fe4c0a7f3a5f643eaaa98636c",
    "sql": "SELECT max(amount_outstanding) , min(amount_outstanding) , avg(amount_outstanding) FROM Customers;",
    "linq": "context.Customers.GroupBy(row => 1).Select(group => new { MaxAmountOutstanding = group.Select(row => row.AmountOutstanding).Max(), MinAmountOutstanding = group.Select(row => row.AmountOutstanding).Min(), AverageAmountOutstanding = group.Select(row => row.AmountOutstanding).Average() }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7ccc6da7870632ac6db34b67efd2ce933d832e7a1cdf57db04e2171204f58720",
    "sql": "SELECT first_name , last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;",
    "linq": "context.Customers.Where(row => row.AmountOutstanding >= 1000 && row.AmountOutstanding <= 3000).Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "71ea166d2402c1d254a5a9bd4223d12636c3232a277685d1a0e5910a48fd6362",
    "sql": "SELECT T1.first_name , T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";",
    "linq": "context.Customers.Join(context.Addresses, T1 => T1.CustomerAddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City == \"Lockmanfurt\").Select(row => new { row.T1.FirstName, row.T1.LastName }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "546e6279ab502b8e3e04cb00ecdb95bfa2ff13a3fd3c9cfd68a2cc53f47353cc",
    "sql": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
    "linq": "context.Customers.Join(context.Addresses, T1 => T1.CustomerAddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"Carole\" && row.T1.LastName == \"Bernhard\").Select(row => new { row.T2.Country }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "98d289cef04c77bf067fd5587afa872d4401517d27498c62d0ab0ade666f060c",
    "sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
    "linq": "context.Customers.Join(context.Addresses, T1 => T1.CustomerAddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"Carole\" && row.T1.LastName == \"Bernhard\").Select(row => new { row.T2.ZipPostcode }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a790bbc9fc8720121bdb532756bea8320c5354ba57512855da8c2133643d4d1c",
    "sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;",
    "linq": "context.Customers.Join(context.Addresses, T1 => T1.CustomerAddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.City }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.City }).Take(1).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "955e3d2737d80c3953df747e7517e84b17472f678f3dca59f351b94ea8eedf6a",
    "sql": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"",
    "linq": "context.CustomerPayments.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Carole\" && row.T2.LastName == \"Bernhard\").Select(row => row.T1.AmountPayment).Sum();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "853a26bf95e7237af3ede18cf0fe45a855023afdcdee5b13c8cdf60b75ea2e44",
    "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );",
    "linq": "context.Customers.Where(row => !context.CustomerPayments.Select(row => row.CustomerId).Contains(row.CustomerId)).Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ca5bf77e4f73c9890f1332beeef830c1335b79f6b77f13a25ad7ae4c8f657e55",
    "sql": "SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) > 2;",
    "linq": "context.CustomerPayments.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() > 2).Select(group => new { group.First().T2.FirstName, group.First().T2.LastName }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7d0ed195d918d5e2caab0cfefcebf78923bf27fada81ea559888371473b0cd9e",
    "sql": "SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code;",
    "linq": "context.CustomerPayments.GroupBy(row => new { row.PaymentMethodCode }).Select(group => new { group.Key.PaymentMethodCode, Count = group.Count() }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dd07fcbaa7fedb47a3f6bf7ee6529866f392877d88ad50927ab147a987d685c0",
    "sql": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";",
    "linq": "context.Lessons.Where(row => row.LessonStatusCode == \"Cancelled\").Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "41f72561d970df48f8a4795e364b2e2a96befba8efc272fbe19e5d8b9c1f0d34",
    "sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
    "linq": "context.Lessons.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Janessa\" && row.T2.LastName == \"Sawayn\" && EF.Functions.Like(row.T2.Nickname, \"%s%\")).Select(row => new { row.T1.LessonId }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7b6c6217c9845cd3e56a253ddd79b3e52edcb6b371b7a82184125d5f2cd4c670",
    "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"",
    "linq": "context.Lessons.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.FirstName, \"%a%\")).Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e97ea1d98e335605730d659cf29af9c1c70cfa8a43be5552efc12f1afe524f2a",
    "sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
    "linq": "context.Lessons.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Janessa\" && row.T2.LastName == \"Sawayn\").Select(row => row.T1.LessonTime).ToList().Select(value => double.Parse(value)).Sum();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "be06d309f57ae2a3c7181a1da09e90acbc72ba973722b839b2a09fdd0dd07ee0",
    "sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
    "linq": "context.Lessons.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Janessa\" && row.T2.LastName == \"Sawayn\").Select(row => (double) row.T1.Price).Average();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2dedaf9566f3eee390122364b3698b3c263908a79d5911d844c4601a8b25a9af",
    "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Ray\"",
    "linq": "context.Lessons.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Ray\").Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4b156a41a17d6f1b344e5dbfdabc37de13f4484cb135a3f034360ce11e0276d2",
    "sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
    "linq": "context.Customers.Select(row => row.LastName).Intersect(context.Staff.Select(row => row.LastName)).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "206e5aab8fbbab6ebbf9110a584fec54f2c3a594604addd9c82fc2ce860dfd30",
    "sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id",
    "linq": "context.Staff.Select(row => row.FirstName).Except(context.Lessons.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Select(row => row.T2.FirstName)).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b826ef4107ba346e006d185e3ab2afc85f00ae6244380dc1e0a9a3c96357cfd6",
    "sql": "SELECT T1.vehicle_id , T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id = T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Vehicles.Join(context.Lessons, T1 => T1.VehicleId, T2 => T2.VehicleId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.VehicleId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.VehicleId, group.First().T1.VehicleDetails }).Take(1).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d0e366f7e4454075c66c5a6459b178ce259e595b9ea7a02c27a9e617f9919c1a",
    "sql": "SELECT T1.Date_Claim_Made , T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.Claim_id HAVING count(*) > 2 UNION SELECT T1.Date_Claim_Made , T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id WHERE T1.Amount_Claimed = ( SELECT max(Amount_Claimed) FROM Claims )",
    "linq": "context.Claims.Join(context.Settlements, T1 => T1.ClaimId, T2 => T2.ClaimId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClaimId }).Where(group => group.Count() > 2).Select(group => new { group.First().T1.DateClaimMade, group.Key.ClaimId }).Union(context.Claims.Join(context.Settlements, T1 => T1.ClaimId, T2 => T2.ClaimId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.AmountClaimed == context.Claims.Select(row => row.AmountClaimed).Max()).Select(row => new { row.T1.DateClaimMade, row.T1.ClaimId })).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 2017-08-03, 1: 571}, {0: 2017-10-21, 1: 801}]\", linq_results: \"[{0: 03.08.2017, 1: 571}, {0: 21.10.2017, 1: 801}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "88da9d59a71976688c266bdb1b0acf9293ab921d71ab85a912dbfe09ebcef265",
    "sql": "SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2 EXCEPT SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3 ON T2.policy_id = T3.policy_id",
    "linq": "context.Customers.Join(context.CustomerPolicies, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.CustomerDetails, group.Key.CustomerId }).Except(context.Customers.Join(context.CustomerPolicies, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.Claims, joined => joined.T2.PolicyId, T3 => T3.PolicyId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.CustomerDetails, row.T1.CustomerId })).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1cde5226b9f4b026ca925866805898d3d1985feae7aa4d9f1225c80e73e40f63",
    "sql": "SELECT Payment_Method_Code , Date_Payment_Made , Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
    "linq": "context.Payments.OrderBy(row => row.DatePaymentMade).Select(row => new { row.PaymentMethodCode, row.DatePaymentMade, row.AmountPayment }).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: Visa, 1: 2017-05-03, 2: 172309}, {0: Discover Card, 1: 2017-05-04, 2: 123255}, {0: MasterCard, 1: 2017-05-28, 2: 448613}, {0: Visa, 1: 2017-05-28, 2: 155654}, {0: MasterCard, 1: 2017-06-24, 2: 456098}, {0: MasterCard, 1: 2017-07-31, 2: 423154}, {0: Discover Card, 1: 2017-08-06, 2: 38324}, {0: Discover Card, 1: 2017-10-07, 2: 71246}, {0: Visa, 1: 2017-12-16, 2: 459407}, {0: MasterCard, 1: 2018-01-10, 2: 407235}, {0: American Express, 1: 2018-01-19, 2: 177130}, {0: MasterCard, 1: 2018-01-28, 2: 319142}, {0: MasterCard, 1: 2018-02-16, 2: 241730}, {0: MasterCard, 1: 2018-02-18, 2: 235893}, {0: Visa, 1: 2018-02-24, 2: 7343}]\", linq_results: \"[{0: Visa, 1: 03.05.2017, 2: 172309}, {0: Discover Card, 1: 04.05.2017, 2: 123255}, {0: MasterCard, 1: 28.05.2017, 2: 448613}, {0: Visa, 1: 28.05.2017, 2: 155654}, {0: MasterCard, 1: 24.06.2017, 2: 456098}, {0: MasterCard, 1: 31.07.2017, 2: 423154}, {0: Discover Card, 1: 06.08.2017, 2: 38324}, {0: Discover Card, 1: 07.10.2017, 2: 71246}, {0: Visa, 1: 16.12.2017, 2: 459407}, {0: MasterCard, 1: 10.01.2018, 2: 407235}, {0: American Express, 1: 19.01.2018, 2: 177130}, {0: MasterCard, 1: 28.01.2018, 2: 319142}, {0: MasterCard, 1: 16.02.2018, 2: 241730}, {0: MasterCard, 1: 18.02.2018, 2: 235893}, {0: Visa, 1: 24.02.2018, 2: 7343}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ca4e7ef954107cbeb9fff16ae5d6cbde41d202c7f3bd1cf5ec920f5709edd49b",
    "sql": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1",
    "linq": "context.Claims.OrderByDescending(row => row.AmountClaimed).Select(row => new { row.AmountSettled, row.AmountClaimed }).Take(1).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6ca1125654966eb32e753b60cc326255c71966d39fbab1d45051c94247fbfd6e",
    "sql": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
    "linq": "context.Claims.OrderBy(row => row.AmountSettled).Select(row => new { row.AmountSettled, row.AmountClaimed }).Take(1).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f22acb40c934e81ff36696c871fc9310899409f280071a8d3535fdea61922596",
    "sql": "SELECT Date_Claim_Made , Date_Claim_Settled FROM Claims WHERE Amount_Claimed > ( SELECT avg(Amount_Claimed) FROM Claims )",
    "linq": "context.Claims.Where(row => row.AmountClaimed > context.Claims.Select(row => row.AmountClaimed).Average()).Select(row => new { row.DateClaimMade, row.DateClaimSettled }).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 2016-08-12, 1: 2018-01-27}, {0: 2017-02-24, 1: 2018-01-21}, {0: 2018-06-14, 1: 2017-12-20}, {0: 2017-08-03, 1: 2018-02-18}, {0: 2016-08-26, 1: 2017-09-04}, {0: 2018-07-13, 1: 2017-11-22}]\", linq_results: \"[{0: 12.08.2016, 1: 27.01.2018}, {0: 24.02.2017, 1: 21.01.2018}, {0: 14.06.2018, 1: 20.12.2017}, {0: 03.08.2017, 1: 18.02.2018}, {0: 26.08.2016, 1: 04.09.2017}, {0: 13.07.2018, 1: 22.11.2017}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "27da16485b27af8136f55ff8bf2b283792de53ab6a61bab28b6a2c8f27104739",
    "sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled <= ( SELECT avg(Amount_Settled) FROM Claims )",
    "linq": "context.Claims.Where(row => row.AmountSettled <= context.Claims.Select(row => row.AmountSettled).Average()).Select(row => new { row.DateClaimMade }).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 2017-03-11}, {0: 2017-02-24}, {0: 2017-05-03}, {0: 2018-07-15}, {0: 2016-08-26}, {0: 2017-10-21}, {0: 2018-11-08}]\", linq_results: \"[{0: 11.03.2017}, {0: 24.02.2017}, {0: 03.05.2017}, {0: 15.07.2018}, {0: 26.08.2016}, {0: 21.10.2017}, {0: 08.11.2018}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "301444c9dce28f91a18f3409802f6e476a09b57a2d2383ac350aba9004c26160",
    "sql": "SELECT T1.Claim_id , count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id",
    "linq": "context.Claims.Join(context.Settlements, T1 => T1.ClaimId, T2 => T2.ClaimId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClaimId }).Select(group => new { group.Key.ClaimId, Count = group.Count() }).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6ca689af88c26d3680e238461fbc3b4c8ac2085aeabadcd6207f949f87b05355",
    "sql": "SELECT T1.claim_id , T1.date_claim_made , count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Claims.Join(context.Settlements, T1 => T1.ClaimId, T2 => T2.ClaimId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClaimId }).Select(group => new { group.Key.ClaimId, group.First().T1.DateClaimMade, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 801, 1: 2017-10-21, 2: 4}]\", linq_results: \"[{0: 801, 1: 21.10.2017, 2: 4}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2bf5635e2dae59204479c92131477b18ae40ef0d95f8c9b16b442feaf7efb82c",
    "sql": "SELECT count(*) , T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1",
    "linq": "context.Claims.Join(context.Settlements, T1 => T1.ClaimId, T2 => T2.ClaimId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClaimId }).OrderByDescending(group => group.First().T1.DateClaimSettled).Select(group => new { Count = group.Count(), group.Key.ClaimId }).Take(1).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "02a44d8fdeb895381c57cb4c3471f6afda5270581555bb77db8c54aa2f9dc1dd",
    "sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
    "linq": "context.Claims.OrderBy(row => row.DateClaimMade).Select(row => new { row.DateClaimMade }).Take(1).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 2016-08-02}]\", linq_results: \"[{0: 02.08.2016}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "79a4c53c41dbb3541f103125cfca88263d64f84bf5e51f11ea3c6e60db5c8d03",
    "sql": "SELECT sum(Amount_Settled) FROM Settlements",
    "linq": "context.Settlements.Select(row => row.AmountSettled).Sum();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0c259c9f81596a047eb0933fbd996d52ddc46905782b816353def1a6d4f13fef",
    "sql": "SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING count(*) > 1",
    "linq": "context.Customers.Join(context.CustomerPolicies, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.CustomerDetails, group.Key.CustomerId }).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ff53e9855465576bc920ad8c9669f7c9a9b5fe45f66600312d156da6eca3320c",
    "sql": "SELECT Date_Claim_Made , Date_Claim_Settled FROM Settlements",
    "linq": "context.Settlements.Select(row => new { row.DateClaimMade, row.DateClaimSettled }).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 2018-08-07, 1: 2018-01-16}, {0: 2017-08-27, 1: 2018-02-04}, {0: 2016-09-05, 1: 2018-03-02}, {0: 2016-05-18, 1: 2018-02-11}, {0: 2017-05-19, 1: 2017-10-06}, {0: 2018-11-10, 1: 2018-02-15}, {0: 2018-05-12, 1: 2017-11-30}, {0: 2016-07-04, 1: 2018-02-20}, {0: 2017-04-18, 1: 2017-12-24}, {0: 2017-07-31, 1: 2018-01-27}, {0: 2017-09-22, 1: 2018-02-14}, {0: 2017-03-04, 1: 2018-02-20}, {0: 2017-04-14, 1: 2017-11-15}, {0: 2017-03-29, 1: 2018-02-20}, {0: 2016-07-19, 1: 2017-11-04}]\", linq_results: \"[{0: 07.08.2018, 1: 16.01.2018}, {0: 27.08.2017, 1: 04.02.2018}, {0: 05.09.2016, 1: 02.03.2018}, {0: 18.05.2016, 1: 11.02.2018}, {0: 19.05.2017, 1: 06.10.2017}, {0: 10.11.2018, 1: 15.02.2018}, {0: 12.05.2018, 1: 30.11.2017}, {0: 04.07.2016, 1: 20.02.2018}, {0: 18.04.2017, 1: 24.12.2017}, {0: 31.07.2017, 1: 27.01.2018}, {0: 22.09.2017, 1: 14.02.2018}, {0: 04.03.2017, 1: 20.02.2018}, {0: 14.04.2017, 1: 15.11.2017}, {0: 29.03.2017, 1: 20.02.2018}, {0: 19.07.2016, 1: 04.11.2017}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a0b4dcb45b95ee45771ee53be902c4cb836528fc5259d8012c85f8c312f23292",
    "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Payments.GroupBy(row => new { row.PaymentMethodCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PaymentMethodCode }).Take(1).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6b02764ebb9d7303462004f4e90451870e94198b50caf659db9914d7cb1112af",
    "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.Payments.GroupBy(row => new { row.PaymentMethodCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.PaymentMethodCode }).Take(1).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0bc487fa39338ab5e1041c710e8fe95bcaa883e662963383fdf17e52427994bd",
    "sql": "SELECT sum(Amount_Payment) FROM Payments",
    "linq": "context.Payments.Select(row => row.AmountPayment).Sum();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "204bd744d61e327742d659e54ad1bf51cb3ddc638cb91c66a0a3a090554353b2",
    "sql": "SELECT DISTINCT customer_details FROM Customers",
    "linq": "context.Customers.Select(row => new { row.CustomerDetails }).Distinct().ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "56e5e44db3004d0813df9bdadee6b34181e26b0baf898801a7fabaefae2bffac",
    "sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.CustomerPolicies.GroupBy(row => new { row.PolicyTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PolicyTypeCode }).Take(1).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "451d4a68bd406a834cc6f922eafaf17b721f74a9ee824510ec7b76aba7c6c142",
    "sql": "SELECT count(*) FROM Settlements",
    "linq": "context.Settlements.Count();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b3535552458abbaba18926e5832db7520ac66437802e7303173021cf72fb412a",
    "sql": "SELECT Payment_ID , Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "linq": "context.Payments.Where(row => row.PaymentMethodCode == \"Visa\").Select(row => new { row.PaymentId, row.DatePaymentMade, row.AmountPayment }).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 678, 1: 2017-12-16, 2: 459407}, {0: 754, 1: 2018-02-24, 2: 7343}, {0: 779, 1: 2017-05-28, 2: 155654}, {0: 791, 1: 2017-05-03, 2: 172309}]\", linq_results: \"[{0: 678, 1: 16.12.2017, 2: 459407}, {0: 754, 1: 24.02.2018, 2: 7343}, {0: 779, 1: 28.05.2017, 2: 155654}, {0: 791, 1: 03.05.2017, 2: 172309}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "46efba62c2c822aea422121117c1e36bb2c036f4cbc0315bd1b779d88ee95d92",
    "sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id",
    "linq": "context.Customers.Select(row => row.CustomerDetails).Except(context.Customers.Join(context.CustomerPolicies, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.CustomerDetails)).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "11603b8df02de0615e70ec180dec05043f5faa3407f9211e65046045fe39b47a",
    "sql": "SELECT T1.claim_id , T1.date_claim_made , T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.claim_id HAVING count(*) = 1",
    "linq": "context.Claims.Join(context.Settlements, T1 => T1.ClaimId, T2 => T2.ClaimId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClaimId }).Where(group => group.Count() == 1).Select(group => new { group.Key.ClaimId, group.First().T1.DateClaimMade, group.First().T1.DateClaimSettled }).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 563, 1: 2016-08-02, 2: 2017-09-04}, {0: 569, 1: 2018-07-15, 2: 2017-11-19}, {0: 571, 1: 2017-08-03, 2: 2018-02-18}, {0: 843, 1: 2017-10-14, 2: 2018-02-20}, {0: 957, 1: 2018-11-08, 2: 2017-09-15}]\", linq_results: \"[{0: 563, 1: 02.08.2016, 2: 04.09.2017}, {0: 569, 1: 15.07.2018, 2: 19.11.2017}, {0: 571, 1: 03.08.2017, 2: 18.02.2018}, {0: 843, 1: 14.10.2017, 2: 20.02.2018}, {0: 957, 1: 08.11.2018, 2: 15.09.2017}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0ef1c26770256804018ced2a3f73d3e3f4edb9b176e60ed5609acb9fea2b6e61",
    "sql": "SELECT sum(Amount_Claimed) FROM Claims",
    "linq": "context.Claims.Select(row => row.AmountClaimed).Sum();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5d74c8e862dbbac575e11e8d06519edce13d6df9ff3dcdf8add59ef6b2924031",
    "sql": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
    "linq": "context.CatalogContents.Select(row => new { row.CatalogEntryName }).Distinct().ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c778c3bde811a29bea14df6e6a3842517d0ddcb269f74f8c8139ab8335515760",
    "sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3",
    "linq": "context.AttributeDefinitions.GroupBy(row => new { row.AttributeDataType }).Where(group => group.Count() > 3).Select(group => new { group.Key.AttributeDataType }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dd968f5b510e7a200c5e94bd24406497f469671842abab05780754160d6759d3",
    "sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = \"Green\"",
    "linq": "context.AttributeDefinitions.Where(row => row.AttributeName == \"Green\").Select(row => new { row.AttributeDataType }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "819f81c36c68c9f7dbf2a7559dc4845b2f399bd87f1a147a1727beb475bddf5d",
    "sql": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "linq": "context.CatalogStructures.Where(row => row.CatalogLevelNumber >= 5 && row.CatalogLevelNumber <= 10).Select(row => new { row.CatalogLevelName, row.CatalogLevelNumber }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8da8f2aad169113a4a5f600333cf94ab2eb1371c36f2e0d69395a07b318161f0",
    "sql": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
    "linq": "context.Catalogs.Where(row => EF.Functions.Like(row.CatalogPublisher, \"%Murray%\")).Select(row => new { row.CatalogPublisher }).Distinct().ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a6a627d75a876003e3046392ff6bd02b852f79d3cb77874f30718872ed6b302d",
    "sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Catalogs.GroupBy(row => new { row.CatalogPublisher }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CatalogPublisher }).Take(1).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "82f715be7ec85fc632359607b1994db75839b822a9b3343dd51c5236cf81d7f4",
    "sql": "SELECT t1.catalog_name , t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5",
    "linq": "context.Catalogs.Join(context.CatalogStructures, t1 => t1.CatalogId, t2 => t2.CatalogId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CatalogLevelNumber > 5).Select(row => new { row.t1.CatalogName, row.t1.DateOfPublication }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a7c4aa3322ec8da3520010a78628f4c9d3e9a08a941d32743b5f2dfc62c07be6",
    "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
    "linq": "context.CatalogContents.Join(context.CatalogContentsAdditionalAttributes, t1 => t1.CatalogEntryId, t2 => t2.CatalogEntryId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.AttributeValue == context.CatalogContentsAdditionalAttributes.GroupBy(row => new { row.AttributeValue }).OrderByDescending(group => group.Count()).Select(group => group.Key.AttributeValue).Take(1).First()).Select(row => new { row.t1.CatalogEntryName }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6aaf378b0540c4056f932b1ac54bb59276c4c3e15709d8e8898ecd39b5ae6b99",
    "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
    "linq": "context.CatalogContents.OrderByDescending(row => row.PriceInDollars).Select(row => new { row.CatalogEntryName }).Take(1).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "61cdf257a72211644df334ff2c2467a7fab9e18313eac57d446399b084aeabba",
    "sql": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
    "linq": "context.CatalogContents.Join(context.CatalogStructures, t1 => t1.CatalogLevelNumber, t2 => t2.CatalogLevelNumber, (t1, t2) => new { t1, t2 }).OrderBy(row => row.t1.PriceInDollars).Select(row => new { row.t2.CatalogLevelName }).Take(1).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2a34e66f15532fbca0f8bf9b3d703709b5bc7049b9b924783ffeca0eb4d2e857",
    "sql": "SELECT avg(price_in_euros) , min(price_in_euros) FROM catalog_contents",
    "linq": "context.CatalogContents.GroupBy(row => 1).Select(group => new { AveragePriceInEuros = group.Select(row => row.PriceInEuros).Average(), MinPriceInEuros = group.Select(row => row.PriceInEuros).Min() }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ffdfeea3c3dca02dd49c17edfd29c454f065a741e76fc59013155f2747297664",
    "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
    "linq": "context.CatalogContents.OrderByDescending(row => row.Height).Select(row => new { row.CatalogEntryName }).Take(1).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3dfda281061e4d6372554acaf3b22af2952f60c8cf0e2f5568f4394766474f8d",
    "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
    "linq": "context.CatalogContents.OrderBy(row => row.Capacity).Select(row => new { row.CatalogEntryName }).Take(1).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dbe62344f1f60995fb909c665ac425b6a269f5d8cc140d4cf761b9c917135258",
    "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
    "linq": "context.CatalogContents.Where(row => EF.Functions.Like(row.ProductStockNumber, \"2%\")).Select(row => new { row.CatalogEntryName }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "78d38d09d2a83e087ff51e3b6688078357365e90626c79e504844f73794c197a",
    "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\"",
    "linq": "context.CatalogContents.Join(context.CatalogContentsAdditionalAttributes, t1 => t1.CatalogEntryId, t2 => t2.CatalogEntryId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CatalogLevelNumber == \"8\").Select(row => new { row.t1.CatalogEntryName }).ToList();",
    "db_name": "product_catalog",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,177): error CS0019: Operator '==' cannot be applied to operands of type 'int' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.65",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7148e594e0c72a6089f9f58463f1c7480f54e043147f8825f613fbb5b5c50df5",
    "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5",
    "linq": "context.CatalogContents.Where(row => row.Length < \"3\" || row.Width > \"5\").Select(row => new { row.CatalogEntryName }).ToList();",
    "db_name": "product_catalog",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,69): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.54",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "65f102f480605a38f813e6cbcb4dd863cbb082903533a1c30ecb2afca3f8683e",
    "sql": "SELECT t1.attribute_name , t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0",
    "linq": "context.AttributeDefinitions.Join(context.CatalogContentsAdditionalAttributes, t1 => t1.AttributeId, t2 => t2.AttributeId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.AttributeValue == \"0\").Select(row => new { row.t1.AttributeName, row.t1.AttributeId }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "45961ab610f9c6f0fc4ebf88750f8e4cfefbc42cff4290e80d218353d84c7e7b",
    "sql": "SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "linq": "context.CatalogContents.Where(row => row.PriceInDollars > 700).Select(row => new { row.CatalogEntryName, row.Capacity }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c18f0a3ba942be772a53d0422e5d575574bf9e3777cbf433a199f97cd0a3de87",
    "sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*) > 1",
    "linq": "context.Catalogs.GroupBy(row => new { row.DateOfLatestRevision }).Where(group => group.Count() > 1).Select(group => new { group.Key.DateOfLatestRevision }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e3ebe201097a37435937c2fca37351d3da64721eb2eefc27c6ac7e0794c72e37",
    "sql": "SELECT count(*) FROM catalog_contents",
    "linq": "context.CatalogContents.Count();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a3ce286b80f21dfc5bc91b347e9bdb5e5f1a73ebc946fc3de01b384c9a0ce8d8",
    "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8",
    "linq": "context.CatalogContents.Where(row => row.NextEntryId > 8).Select(row => new { row.CatalogEntryName }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c4133cf9ecb8baf2a9dc918503ca9db215daa37dd5291280b771123f454c4f9c",
    "sql": "SELECT customer_phone FROM available_policies",
    "linq": "context.AvailablePolicies.Select(row => new { row.CustomerPhone }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cecc0533413778cf45b042c89744874dbc60d8604d10eaaaf3c72b8242774ace",
    "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code = \"Life Insurance\"",
    "linq": "context.AvailablePolicies.Where(row => row.PolicyTypeCode == \"Life Insurance\").Select(row => new { row.CustomerPhone }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9fbbc7614f5b4fca143ee0f9f765c67143a2042b6ae5b3ceb5d08600c4380f86",
    "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.AvailablePolicies.GroupBy(row => new { row.PolicyTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PolicyTypeCode }).Take(1).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "186d98c2894411f066c2092949edf26e792b48e90f2a1ce6b32a8c07877a3971",
    "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)",
    "linq": "context.AvailablePolicies.Where(row => row.PolicyTypeCode == context.AvailablePolicies.GroupBy(row => new { row.PolicyTypeCode }).OrderByDescending(group => group.Count()).Select(group => group.Key.PolicyTypeCode).Take(1).First()).Select(row => new { row.CustomerPhone }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b2c50027fc76dff5db89689dd1e72616dd91f8c037fa224bc62bb3217b8b3da8",
    "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*) > 4",
    "linq": "context.AvailablePolicies.GroupBy(row => new { row.PolicyTypeCode }).Where(group => group.Count() > 4).Select(group => new { group.Key.PolicyTypeCode }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c1bf4411aabbdf35a7752ece466ef592429fb48e17b8ff3cd00e610f3c69ac9e",
    "sql": "SELECT sum(settlement_amount) , avg(settlement_amount) FROM settlements",
    "linq": "context.Settlements.GroupBy(row => 1).Select(group => new { SumSettlementAmount = group.Select(row => row.SettlementAmount).Sum(), AverageSettlementAmount = group.Select(row => row.SettlementAmount).Average() }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9c4cdf05ad5331fa78ba5e13dccf50869eaeb3112512753f30f9f19f3062adc1",
    "sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING count(*) > 2",
    "linq": "context.FirstNotificationOfLosses.Join(context.Services, t1 => t1.ServiceId, t2 => t2.ServiceId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ServiceId }).Where(group => group.Count() > 2).Select(group => new { group.First().t2.ServiceName }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f087505aa768d1a6f056be3cc7b6a5388dc4cbdf3468a02c47e6a5fab6a32587",
    "sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
    "linq": "context.Claims.Join(context.Settlements, t1 => t1.ClaimId, t2 => t2.ClaimId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ClaimId }).OrderByDescending(group => group.Sum(row => row.t2.SettlementAmount)).Select(group => new { group.First().t1.EffectiveDate }).Take(1).ToList();",
    "db_name": "insurance_fnol",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 2009-02-11}]\", linq_results: \"[{0: 11.02.2009}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b209fc0331369594329ecb80f111b197d34977dddbf477234ec8a6ef747207d8",
    "sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Dayana Robel\"",
    "linq": "context.Customers.Join(context.CustomersPolicies, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.CustomerName == \"Dayana Robel\").Count();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a59273aa075f5def7cac35beb8f9cc2787e8b3d06037530f86f959cf6d147cf4",
    "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Customers.Join(context.CustomersPolicies, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.CustomerName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CustomerName }).Take(1).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e69a66c0ba0232ae02654616ae0410a4f7a51556f26f21720adeb1eb94b1ce7d",
    "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = \"Dayana Robel\"",
    "linq": "context.Customers.Join(context.CustomersPolicies, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.AvailablePolicies, joined => joined.t2.PolicyId, t3 => t3.PolicyId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.CustomerName == \"Dayana Robel\").Select(row => new { row.t3.PolicyTypeCode }).Distinct().ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "eb4fdb5412681a4597d02ba85dd39ab4c4b1cdab0644fa9acd241d0ecd131671",
    "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
    "linq": "context.Customers.Join(context.CustomersPolicies, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.AvailablePolicies, joined => joined.t2.PolicyId, t3 => t3.PolicyId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.CustomerName == context.Customers.Join(context.CustomersPolicies, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.CustomerName }).OrderByDescending(group => group.Count()).Select(group => group.Key.CustomerName).Take(1).First()).Select(row => new { row.t3.PolicyTypeCode }).Distinct().ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3f3b1fe13451b3f21ecb27fc7bd5134bf82438e3dd56e95f8b7ce8b8da8fbcc0",
    "sql": "SELECT service_name FROM services ORDER BY service_name",
    "linq": "context.Services.OrderBy(row => row.ServiceName).Select(row => new { row.ServiceName }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ac429fbfd01517a2de40c22694ea57898019fdebb4bb11a797b2f9aedeabaa40",
    "sql": "SELECT count(*) FROM services",
    "linq": "context.Services.Count();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6e28bb57cfa07b5abf22e8e50ed452013361a6cf5ace904ad5db646de9585553",
    "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id",
    "linq": "context.Customers.Select(row => row.CustomerName).Except(context.Customers.Join(context.FirstNotificationOfLosses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Select(row => row.t1.CustomerName)).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "42a5577ad17cfe46a831efbf19fa401e66283ecd47566946c2fa0d68f9515a01",
    "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" OR t3.service_name = \"Upgrade a policy\"",
    "linq": "context.Customers.Join(context.FirstNotificationOfLosses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Services, joined => joined.t2.ServiceId, t3 => t3.ServiceId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.ServiceName == \"Close a policy\" || row.t3.ServiceName == \"Upgrade a policy\").Select(row => new { row.t1.CustomerName }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "760d699f4b2fc1e9ff87ffe5af707e8afde8170495ea977cfb32b2477f659bf7",
    "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"New policy application\"",
    "linq": "context.Customers.Join(context.FirstNotificationOfLosses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Services, joined => joined.t2.ServiceId, t3 => t3.ServiceId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.ServiceName == \"Close a policy\").Select(row => row.t1.CustomerName).Intersect(context.Customers.Join(context.FirstNotificationOfLosses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Services, joined => joined.t2.ServiceId, t3 => t3.ServiceId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.ServiceName == \"New policy application\").Select(row => row.t1.CustomerName)).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1e8b05423af12d28f283547503729b7398c01d09f805fa938e4149260412d1ed",
    "sql": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
    "linq": "context.Customers.Where(row => EF.Functions.Like(row.CustomerName, \"%Diana%\")).Select(row => new { row.CustomerId }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "620bf3558f93ffaf2a643debd375c1979e59ac558215adc37674d7ae754b39c6",
    "sql": "SELECT max(settlement_amount) , min(settlement_amount) FROM settlements",
    "linq": "context.Settlements.GroupBy(row => 1).Select(group => new { MaxSettlementAmount = group.Select(row => row.SettlementAmount).Max(), MinSettlementAmount = group.Select(row => row.SettlementAmount).Min() }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1051cf6138af5ff7eb2f8f54868151c4d478a9d0d2543e384e3ad1f0d1de479e",
    "sql": "SELECT customer_id , customer_name FROM customers ORDER BY customer_id ASC",
    "linq": "context.Customers.OrderBy(row => row.CustomerId).Select(row => new { row.CustomerId, row.CustomerName }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9f8c8ad9e94b8c26ff0b703d7db046c2ee87ec416b830c8514d0a9654d040050",
    "sql": "SELECT t2.date_opened , t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
    "linq": "context.Customers.Join(context.CustomersPolicies, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => EF.Functions.Like(row.t1.CustomerName, \"%Diana%\")).Select(row => new { row.t2.DateOpened, row.t2.DateClosed }).ToList();",
    "db_name": "insurance_fnol",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 2017-01-09, 1: 2018-03-08}, {0: 2016-06-24, 1: 2018-02-22}]\", linq_results: \"[{0: 09.01.2017, 1: 08.03.2018}, {0: 24.06.2016, 1: 22.02.2018}]\" }",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8102da83248efe078d5cd6105bb92fc9f4e6fd0a23aadeca3e6e0ea1ec308334",
    "sql": "SELECT job_id FROM job_history WHERE end_date - start_date > 300 GROUP BY job_id HAVING COUNT(*) >= 2",
    "linq": "context.JobHistories.Where(row => row.EndDate - row.StartDate > 300).GroupBy(row => new { row.JobId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.JobId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,46): error CS0019: Operator '-' cannot be applied to operands of type 'DateOnly' and 'DateOnly' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.92",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7dca9310978c1f528ead6a098bc9402de3327086478c6041d36d8f37dbfa9271",
    "sql": "SELECT T1.firstname , T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.Rate - T2.basePrice > 0",
    "linq": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Rate - row.T2.BasePrice > 0).Select(row => new { row.T1.FirstName, row.T1.LastName }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c470fd09e6ec099ca5f28a624df4b821d3b5d265a03268f63ea46dcdda2bc3d7",
    "sql": "SELECT Title FROM Cartoon ORDER BY title",
    "linq": "context.Cartoons.OrderBy(row => row.Title).Select(row => new { row.Title }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "ca358956ab0843f321aac69c6bee410022806d4fa6baa078e08b7c7c2dd5c720",
    "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "linq": "context.Cartoons.Where(row => row.DirectedBy == \"Ben Jones\").Select(row => new { row.Title }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "de2adae40fffc989533b52537d4b4f441301d3fb860105eade216667b32cb772",
    "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "linq": "context.Cartoons.Where(row => row.WrittenBy == \"Joseph Kuhr\").Count();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "929e37527c634a97c4bbe788e2e58e000bef46fe7cf4d3ebd5943cef2d821c7c",
    "sql": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
    "linq": "context.Cartoons.OrderBy(row => row.OriginalAirDate).Select(row => new { row.Title, row.DirectedBy }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "2c8df15ec55d61f14c922f802dcda2bc15da6c8928d63f151558d79c16c52b65",
    "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "linq": "context.Cartoons.Where(row => row.DirectedBy == \"Ben Jones\" || row.DirectedBy == \"Brandon Vietti\").Select(row => new { row.Title }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "0d4c390bb6024bf9e3ff1edba47d8a1bf67a081dcdfeb978c05c16749e10ff9e",
    "sql": "SELECT Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "linq": "context.TvChannels.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "1057b0f1394a3aef893bcf7a99d4327a442a944237028110e422d084466bd404",
    "sql": "SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
    "linq": "context.TvChannels.GroupBy(row => 1).Select(group => new { CountDistinctSeriesName = group.Select(row => row.SeriesName).Distinct().Count(), CountDistinctContent = group.Select(row => row.Content).Distinct().Count() }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "fbad217cd4a25a9931a912924e6242b1a8e2b563b95b16dc2bf745c0c24f9233",
    "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "linq": "context.TvChannels.Where(row => row.SeriesName == \"Sky Radio\").Select(row => new { row.Content }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "ac279160ad20c5d888403133cdad6fcf0de970bb6f57901eb92d399ffaa41b33",
    "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "linq": "context.TvChannels.Where(row => row.SeriesName == \"Sky Radio\").Select(row => new { row.PackageOption }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "61894fbd408ea37c181d9550847970c859cc7d31b5549d8b89c4f055c42f2370",
    "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "linq": "context.TvChannels.Where(row => row.Language == \"English\").Count();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "9a51b1c4cb21eac8f027be8425a86d0bde414bfa59491360c7745710e1892c6d",
    "sql": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "linq": "context.TvChannels.GroupBy(row => new { row.Language }).Select(group => new { group.Key.Language, Count = group.Count() }).OrderBy(group => group.Count).Take(1).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "34f7cb2f393d6add97a4fac77e1fd199d330c5e173d34690d5591a8a118579a6",
    "sql": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "linq": "context.TvChannels.GroupBy(row => new { row.Language }).Select(group => new { group.Key.Language, Count = group.Count() }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "280a16e5221a3ddb96f746c1d38f1186f7285c3e1b0aecccc163aa5b04987406",
    "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "linq": "context.TvChannels.Join(context.Cartoons, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"The Rise of the Blue Beetle!\").Select(row => new { row.T1.SeriesName }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a360b65de638378755bdda7edecdee80bf7674e6469826efc11f6038d7730ad3",
    "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "linq": "context.TvChannels.Join(context.Cartoons, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T1.SeriesName == \"Sky Radio\").Select(row => new { row.T2.Title }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "544930b300295e94a8bc3f6164bfaf963e07860231a282cc83cfd77e4dcdef28",
    "sql": "SELECT Episode FROM TV_series ORDER BY rating",
    "linq": "context.TvSeries.OrderBy(row => (double) row.Rating).Select(row => new { row.Episode }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "ce52e98c4cb3e79681f2dee47201865e65ee439f556ba2596cc4999fed6d4de5",
    "sql": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "linq": "context.TvSeries.OrderByDescending(row => (double) row.Rating).Select(row => new { row.Episode, row.Rating }).Take(3).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a73f773e5ea46dd93cd1ec38014e151537b6ff7a256e540a967f71af8ff6610a",
    "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "linq": "context.TvSeries.GroupBy(row => 1).Select(group => new { MaxShare = group.Select(row => row.Share).Max(), MinShare = group.Select(row => row.Share).Min() }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "57066229c4de74a0696b009b91efeb79876d326b2c16345aaf62941cb3b52b50",
    "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "linq": "context.TvSeries.Where(row => row.Episode == \"A Love of a Lifetime\").Select(row => new { row.AirDate }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "5f7415ada062d9b9b919a3d50a8543ab8319bdec674c4814e728cbbf9f3f99e1",
    "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "linq": "context.TvSeries.Where(row => row.Episode == \"A Love of a Lifetime\").Select(row => new { row.WeeklyRank }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "dfeefea26b623219752b8c3131ebe5844490b44441e075cb76833865db305062",
    "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "linq": "context.TvChannels.Join(context.TvSeries, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Episode == \"A Love of a Lifetime\").Select(row => new { row.T1.SeriesName }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "0d731f3a2bd46b3ba20299ef474985fcffeb6f243de0cc2235f72f87bae6269f",
    "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "linq": "context.TvChannels.Join(context.TvSeries, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T1.SeriesName == \"Sky Radio\").Select(row => new { row.T2.Episode }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "01b8ad6d88659ea3b8d2ddfbc918c6ad5625a15cf79ae53c3217a37770076574",
    "sql": "SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
    "linq": "context.Cartoons.GroupBy(row => new { row.DirectedBy }).Select(group => new { Count = group.Count(), group.Key.DirectedBy }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "40bf4895307b6dc445fbe3606599625f5f4f52406cae0a77db6c545599e5a1d6",
    "sql": "select production_code , channel from cartoon order by original_air_date desc limit 1",
    "linq": "context.Cartoons.OrderByDescending(row => row.OriginalAirDate).Select(row => new { row.ProductionCode, row.Channel }).Take(1).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "3a22895822fdf0a1510abfc1312338bcd92aa5eed1b08e833872244199558154",
    "sql": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
    "linq": "context.TvChannels.Where(row => row.HightDefinitionTv == \"yes\").Select(row => new { row.PackageOption, row.SeriesName }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "46fa43b86db719906d10ab780681026382c3023f9e3d305c03fb646f2cd04b6d",
    "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
    "linq": "context.TvChannels.Join(context.Cartoons, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WrittenBy == \"Todd Casey\").Select(row => new { row.T1.Country }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "7ef2f6ed58db7dc9910af63120c84e80bb460e9ef363610b1f0c9915d16b6c35",
    "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
    "linq": "context.TvChannels.Select(row => row.Country).Except(context.TvChannels.Join(context.Cartoons, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WrittenBy == \"Todd Casey\").Select(row => row.T1.Country)).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "17540f0b15c528f27019573d9c5d28b399be0ebe26fb17a8771c61ec338869af",
    "sql": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
    "linq": "context.TvChannels.Join(context.Cartoons, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DirectedBy == \"Michael Chang\").Select(row => new { row.T1.SeriesName, row.T1.Country }).Intersect(context.TvChannels.Join(context.Cartoons, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DirectedBy == \"Ben Jones\").Select(row => new { row.T1.SeriesName, row.T1.Country })).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "4e685d775638f6efc23ef6fcf189d754f267c239b74294dcd64f095ec5148f5d",
    "sql": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
    "linq": "context.TvChannels.Where(row => row.Language != \"English\").Select(row => new { row.PixelAspectRatioPar, row.Country }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "5fc30f05832813ab3f220502234ab6f1467654bbde8f7c9d8ebf076748581e92",
    "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*) > 2",
    "linq": "context.TvChannels.GroupBy(row => new { row.Country }).Where(group => group.Count() > 2).Select(group => new { group.First().Id }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "2de515c15de9f823a46728c559d3f151cfd5e5fe3f9a14d93a1b445ee56a5620",
    "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
    "linq": "context.TvChannels.Select(row => row.Id).Except(context.Cartoons.Where(row => row.DirectedBy == \"Ben Jones\").Select(row => row.Channel)).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "3072283af7a53ad3b2e6f7fc92573dd3ffc1ef1d589c9f7e6b08eb388275875f",
    "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
    "linq": "context.TvChannels.Where(row => !context.Cartoons.Where(row => row.DirectedBy == \"Ben Jones\").Select(row => row.Channel).Contains(row.Id)).Select(row => new { row.PackageOption }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d42372c8ea42ba1a4eba52d08d2f4d11f2af9c735d5c14cad71b20b60a4f411d",
    "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "linq": "context.Owners.Select(row => row.State).Intersect(context.Professionals.Select(row => row.State)).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "95c94b42d9676461fe1e952babd1f870d36f25afcb8907d24734ddb80399332f",
    "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "linq": "context.Dogs.Where(row => context.Treatments.Select(row => row.DogId).Contains(row.DogId)).Select(row => row.Age).ToList().Select(value => double.Parse(value)).Average();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a32a1811d2814fb77494b9e4fc3b9b7deac46e38b1c65a459d8704942b0d15b4",
    "sql": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
    "linq": "context.Professionals.Where(row => row.State == \"Indiana\").Select(row => new { row.ProfessionalId, row.LastName, row.CellNumber }).Union(context.Professionals.Join(context.Treatments, T1 => T1.ProfessionalId, T2 => T2.ProfessionalId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProfessionalId }).Where(group => group.Count() > 2).Select(group => new { group.Key.ProfessionalId, group.First().T1.LastName, group.First().T1.CellNumber })).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "dfddecfda80b52da4db677bfa175ac3fad474e171b963d124a57a4dbe73e7cf3",
    "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
    "linq": "context.Dogs.Where(row => !context.Treatments.GroupBy(row => new { row.DogId }).Where(group => group.Sum(row => row.CostOfTreatment) > 1000).Select(group => group.Key.DogId).Contains(row.DogId)).Select(row => new { row.Name }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "9ef3a5bca5dcc674a72f924338ef11dd67127af9ca71314000ec68545a4fa0be",
    "sql": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
    "linq": "context.Professionals.Select(row => new { row.ProfessionalId, row.RoleCode, row.EmailAddress }).Except(context.Professionals.Join(context.Treatments, T1 => T1.ProfessionalId, T2 => T2.ProfessionalId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.ProfessionalId, row.T1.RoleCode, row.T1.EmailAddress })).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d9445ec17913a2bc694be67914a8b63bdf4d3d9de5c36c3d84d404219c911425",
    "sql": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Dogs.Join(context.Owners, T1 => T1.OwnerId, T2 => T2.OwnerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.OwnerId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.OwnerId, group.First().T2.FirstName, group.First().T2.LastName }).Take(1).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "fa5e38e651b68be6407c681de38a60612fc5e8274b705d5027e0b1d9f1348cf8",
    "sql": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
    "linq": "context.Professionals.Join(context.Treatments, T1 => T1.ProfessionalId, T2 => T2.ProfessionalId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProfessionalId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProfessionalId, group.First().T1.RoleCode, group.First().T1.FirstName }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "6b45b5a6caa79d71e1073efe05fe1111829c2714059c48adefde4c0834369cf4",
    "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Breeds.Join(context.Dogs, T1 => T1.BreedCode, T2 => T2.BreedCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.BreedName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BreedName }).Take(1).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "7cb049ab0629ecb4df9704bfc65da7beab5d60501ca58d1309c3c932dae16db1",
    "sql": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Owners.Join(context.Dogs, T1 => T1.OwnerId, T2 => T2.OwnerId, (T1, T2) => new { T1, T2 }).Join(context.Treatments, joined => joined.T2.DogId, T3 => T3.DogId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.OwnerId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.OwnerId, group.First().T1.LastName }).Take(1).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "1ced02002a7d454b37d7a1d2a918bc6e951baf4223c6facd5ca0c46e08058e6a",
    "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "linq": "context.TreatmentTypes.Join(context.Treatments, T1 => T1.TreatmentTypeCode, T2 => T2.TreatmentTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TreatmentTypeCode }).OrderBy(group => group.Sum(row => row.T2.CostOfTreatment)).Select(group => new { group.First().T1.TreatmentTypeDescription }).Take(1).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "051383769d5e92150cb0e93e71a5126067a3078613357b749e82260515d3d822",
    "sql": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "linq": "context.Owners.Join(context.Dogs, T1 => T1.OwnerId, T2 => T2.OwnerId, (T1, T2) => new { T1, T2 }).Join(context.Treatments, joined => joined.T2.DogId, T3 => T3.DogId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.OwnerId }).OrderByDescending(group => group.Sum(row => row.T3.CostOfTreatment)).Select(group => new { group.Key.OwnerId, group.First().T1.ZipCode }).Take(1).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d6a5eba3763c22eba9c00b5be5846c2902a7c3441917a6101b069a37e415acca",
    "sql": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
    "linq": "context.Professionals.Join(context.Treatments, T1 => T1.ProfessionalId, T2 => T2.ProfessionalId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProfessionalId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProfessionalId, group.First().T1.CellNumber }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "590d158b92a7a7f4a503305d565c00ce0006c4c4f5ae3f45e5b8b256eeb988c1",
    "sql": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "linq": "context.Professionals.SelectMany(s => context.Treatments, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CostOfTreatment < context.Treatments.Select(row => row.CostOfTreatment).Average()).Select(row => new { row.T1.FirstName, row.T1.LastName }).Distinct().ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d32aca72f4272c1befa88d50066386dbd8d1501e9190bf40c5c392bb47a41088",
    "sql": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
    "linq": "context.Treatments.Join(context.Professionals, T1 => T1.ProfessionalId, T2 => T2.ProfessionalId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.DateOfTreatment, row.T2.FirstName }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "c3791c006cc86c878750fc7f5c7cc913ed9a53d4ad86defefa996bdfd99aa2a2",
    "sql": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
    "linq": "context.Treatments.Join(context.TreatmentTypes, T1 => T1.TreatmentTypeCode, T2 => T2.TreatmentTypeCode, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.CostOfTreatment, row.T2.TreatmentTypeDescription }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "52b8740e6c37ea559e6781c61e90f8d56b0494e098485d8066b7fdc464b7a833",
    "sql": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
    "linq": "context.Owners.Join(context.Dogs, T1 => T1.OwnerId, T2 => T2.OwnerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.FirstName, row.T1.LastName, row.T2.SizeCode }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "157191d7a3fc6b769fd87183d7ca0ee463ba127d03a57561f2a420a6264d549a",
    "sql": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
    "linq": "context.Owners.Join(context.Dogs, T1 => T1.OwnerId, T2 => T2.OwnerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.FirstName, row.T2.Name }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "9c4c249747d4218081cdd5bf1065c570abb1c703e5e3cf94dd11fd5eddd82193",
    "sql": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "linq": "context.Dogs.Join(context.Treatments, T1 => T1.DogId, T2 => T2.DogId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BreedCode == context.Dogs.GroupBy(row => new { row.BreedCode }).OrderBy(group => group.Count()).Select(group => group.Key.BreedCode).Take(1).First()).Select(row => new { row.T1.Name, row.T2.DateOfTreatment }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "3ddc918863d9c4c561efab9221a117e9b53e279f8cd9e250380a31a8b8c3fbfd",
    "sql": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
    "linq": "context.Owners.Join(context.Dogs, T1 => T1.OwnerId, T2 => T2.OwnerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.State == \"Virginia\").Select(row => new { row.T1.FirstName, row.T2.Name }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "094ba8da3ce84139dce276a290c4036090c09acc7d002120a2f0d48ec5429d03",
    "sql": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
    "linq": "context.Dogs.Join(context.Treatments, T1 => T1.DogId, T2 => T2.DogId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.DateArrived, row.T1.DateDeparted }).Distinct().ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "feffedaf6698d91e615894c315bfcdec7cff39e03639e4aa2aeff7903ba78c71",
    "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs )",
    "linq": "context.Owners.Join(context.Dogs, T1 => T1.OwnerId, T2 => T2.OwnerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Age == context.Dogs.Select(row => row.Age).Max()).Select(row => new { row.T1.LastName }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "6d30b799fc70540e7d0f15fc27c7b78122198210ea4d4304e8d1b7e1f0286952",
    "sql": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "linq": "context.Professionals.Where(row => row.State == \"Hawaii\" || row.State == \"Wisconsin\").Select(row => new { row.EmailAddress }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "4d73f0abc8164395a126ae5197a943613ba52153dfebe655cf83e3742dfbd1ff",
    "sql": "SELECT date_arrived , date_departed FROM Dogs",
    "linq": "context.Dogs.Select(row => new { row.DateArrived, row.DateDeparted }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "1f18f093ad48d53cef667ced4648138192187b13d7bd461e058e2bb95574612b",
    "sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "linq": "context.Treatments.Select(row => row.DogId).Distinct().Count();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "bfc136dca1335a9fc3067b0ab6e7a2a775532f32f7046fdf7b965e0044850e3c",
    "sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "linq": "context.Treatments.Select(row => row.ProfessionalId).Distinct().Count();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "3b61519ae6d8d2883161017556e881197c5c79c6ebbf7dfcef2365fcb5f5d88e",
    "sql": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
    "linq": "context.Professionals.Where(row => EF.Functions.Like(row.City, \"%West%\")).Select(row => new { row.RoleCode, row.Street, row.City, row.State }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "2154d5af069f42c46a77cc827a20db9245ef559728d3f0c7dd1072c722b61b9a",
    "sql": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
    "linq": "context.Owners.Where(row => EF.Functions.Like(row.State, \"%North%\")).Select(row => new { row.FirstName, row.LastName, row.EmailAddress }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "622507d3e27208ba20bdefd2b48679ccd349f3a115bcbf398845feaccc6d6c1a",
    "sql": "SELECT count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
    "linq": "context.Dogs.Where(row => row.Age < context.Dogs.Select(row => row.Age).ToList().Select(value => double.Parse(value)).Average()).Count();",
    "db_name": "dog_kennels",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,38): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.53",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "5b0abe4001457bbdae1282d804a795a0e34ecc9d197d964bcd8a96f01793627e",
    "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "linq": "context.Treatments.OrderByDescending(row => row.DateOfTreatment).Select(row => new { row.CostOfTreatment }).Take(1).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "85e6682c0f260daed93e4180d9eccef29dc3ff4e0d959321551fcfb1b8d6c430",
    "sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
    "linq": "context.Dogs.Where(row => !context.Treatments.Select(row => row.DogId).Contains(row.DogId)).Count();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "10b95951f7e6f35966c06f9e36eadb51c061b917da74cf3844e7261ff1e936dc",
    "sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
    "linq": "context.Dogs.Where(row => !context.Treatments.Select(row => row.DogId).Contains(row.DogId)).Count();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "8a3a7b664fd33c5ff0ff5d6e59bdb2e5d895466e450e53090f49d946d996c172",
    "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
    "linq": "context.Owners.Where(row => !context.Dogs.Select(row => row.OwnerId).Contains(row.OwnerId)).Count();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a6ab0e9469856b953a2181c9650f3811550618b443e47716fabba49d5369c51b",
    "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
    "linq": "context.Professionals.Where(row => !context.Treatments.Select(row => row.ProfessionalId).Contains(row.ProfessionalId)).Count();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d23c135fcd1a38a43ec9d96f2d947f2ea5cb3c5600ae45d577743f858725b9c8",
    "sql": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
    "linq": "context.Dogs.Where(row => row.AbandonedYn == \"1\").Select(row => new { row.Name, row.Age, row.Weight }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "4022458c3743d54cb2808f0b4f8bc77e50c815d08e41eb8216d4475804c79d6d",
    "sql": "SELECT avg(age) FROM Dogs",
    "linq": "context.Dogs.Select(row => row.Age).ToList().Select(value => double.Parse(value)).Average();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "2e0c0696eeaab4865d7be3a2fec9b4310a32ba492768d32a76dcf4b1270ec3c3",
    "sql": "SELECT max(age) FROM Dogs",
    "linq": "context.Dogs.Select(row => row.Age).Max();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "71c13571d855a01c1348759995588aeacfb8d7fc1beb0c0b3edc1901572aebd1",
    "sql": "SELECT charge_type , charge_amount FROM Charges",
    "linq": "context.Charges.Select(row => new { row.ChargeType, row.ChargeAmount }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d6395eeac86a33313509f706cf593872837c2c4017e74e40bd73892d48187a8b",
    "sql": "SELECT max(charge_amount) FROM Charges",
    "linq": "context.Charges.Select(row => row.ChargeAmount).Max();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "6bb5c94280fed064c8fb74ca6d1e66ff4dd6729d7461f38e13b69006a173685f",
    "sql": "SELECT email_address , cell_number , home_phone FROM professionals",
    "linq": "context.Professionals.Select(row => new { row.EmailAddress, row.CellNumber, row.HomePhone }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "db10816466dd41de4e77b75ce1fcf8d9e4439ef874fcfc6e0e89668334f72fac",
    "sql": "SELECT DISTINCT breed_code , size_code FROM dogs",
    "linq": "context.Dogs.Select(row => new { row.BreedCode, row.SizeCode }).Distinct().ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "f2164f492e760fa55565a0be08e02632bc0eedcf6345656d57c995312e75c0b2",
    "sql": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
    "linq": "context.Professionals.Join(context.Treatments, T1 => T1.ProfessionalId, T2 => T2.ProfessionalId, (T1, T2) => new { T1, T2 }).Join(context.TreatmentTypes, joined => joined.T2.TreatmentTypeCode, T3 => T3.TreatmentTypeCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.FirstName, row.T3.TreatmentTypeDescription }).Distinct().ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "4cf9536fcfe00c779886dd51bafec6c4cd0e6c9fcdf0e54e495d72e68b0b51a3",
    "sql": "SELECT count(*) FROM players",
    "linq": "context.Players.Count();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "35babf822262ebd2d22a14ce26cbaeddc839a0ab99178ed09f65c5d8ffd05c26",
    "sql": "SELECT count(*) FROM matches",
    "linq": "context.Matches.Count();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "823f4973662dc0294fe19ef68e55a5fb2afd7a4d1cb613a5720f4e98838c55cd",
    "sql": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
    "linq": "context.Players.Where(row => row.CountryCode == \"USA\").Select(row => new { row.FirstName, row.BirthDate }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a64e6e8b46f8c08276448975bc46acdf544d5823e7070d9697fb587c988c765e",
    "sql": "SELECT avg(loser_age) , avg(winner_age) FROM matches",
    "linq": "context.Matches.GroupBy(row => 1).Select(group => new { AverageLoserAge = group.Select(row => row.LoserAge).Average(), AverageWinnerAge = group.Select(row => row.WinnerAge).Average() }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "25e858a83f88c116f12efa5f9e0716ac8fac360f10abcde6443a48d5a3e45a57",
    "sql": "SELECT avg(winner_rank) FROM matches",
    "linq": "context.Matches.Select(row => row.WinnerRank).Average();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "ec69700aba5d5f900120dac98d0c2f7d193bf0aab22a31c25ee51536341c1149",
    "sql": "SELECT min(loser_rank) FROM matches",
    "linq": "context.Matches.Select(row => row.LoserRank).Min();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "835a17c1e18e3bfc781b97ee3deaa7756a6e24e71fbc5eb61c30706816db9005",
    "sql": "SELECT count(DISTINCT country_code) FROM players",
    "linq": "context.Players.Select(row => row.CountryCode).Distinct().Count();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "019bcccc16e2c5eb02b3e7d270f6c081c64042d015c5c89c474c9a24a30da7ca",
    "sql": "SELECT count(DISTINCT loser_name) FROM matches",
    "linq": "context.Matches.Select(row => row.LoserName).Distinct().Count();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "527f9c428cc124cfad8ebbe7705c7d2631f4e3f6615e3abe8acbfcaafa8c9a73",
    "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
    "linq": "context.Matches.GroupBy(row => new { row.TourneyName }).Where(group => group.Count() > 10).Select(group => new { group.Key.TourneyName }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "0ce3056ef14a79066bc048a669bbd0b1d29968bbf6fac5d8fc05879eab010007",
    "sql": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
    "linq": "context.Matches.Where(row => row.Year == 2013).Select(row => row.WinnerName).Intersect(context.Matches.Where(row => row.Year == 2016).Select(row => row.WinnerName)).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a9052821fc49f041913324659c952561c4dc0dd0447ab55853d22325ed75326e",
    "sql": "SELECT count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
    "linq": "context.Matches.Where(row => row.Year == 2013 || row.Year == 2016).Count();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "683044bf75379dfcc43da1caa6cfb100854777e95c5bbbb6dbe6ba1083813d2a",
    "sql": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
    "linq": "context.Players.Join(context.Matches, T1 => T1.PlayerId, T2 => T2.WinnerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TourneyName == \"WTA Championships\").Select(row => new { row.T1.CountryCode, row.T1.FirstName }).Intersect(context.Players.Join(context.Matches, T1 => T1.PlayerId, T2 => T2.WinnerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TourneyName == \"Australian Open\").Select(row => new { row.T1.CountryCode, row.T1.FirstName })).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "104c8b44a7f35180953ead90398134e939da0cbc378450ad54a48b1156604ee3",
    "sql": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
    "linq": "context.Players.OrderBy(row => row.BirthDate).Select(row => new { row.FirstName, row.CountryCode }).Take(1).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "ecd13a3a517fa4eb8bffde420c6fc16f0709cb07b3117dc81aaf34ea5606b858",
    "sql": "SELECT first_name , last_name FROM players ORDER BY birth_date",
    "linq": "context.Players.OrderBy(row => row.BirthDate).Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "32fd77bc7172e7f24d168470a3621363a841f079d729ab8086167963fc4c7d7c",
    "sql": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "linq": "context.Players.Where(row => row.Hand == \"L\").OrderBy(row => row.BirthDate).Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "fb224e53194a242b4d904e3edc7fe7d0fe3ce9bbeb54b3ce6e7cb4b40566b49e",
    "sql": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "linq": "context.Players.Join(context.Rankings, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Tours).Select(row => new { row.T1.CountryCode, row.T1.FirstName }).Take(1).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "fb6ce904c03e4b9c0dc70f05a08e4054b04fffdcf7dca2becdf85cc2a81c11db",
    "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Matches.GroupBy(row => new { row.Year }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Year }).Take(1).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "374f17a40decdb022c6a8d33b229784630420bf5c3ddb58224f735f447e9c738",
    "sql": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Matches.GroupBy(row => new { row.WinnerName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.WinnerName, group.First().WinnerRankPoints }).Take(1).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "fe71048f22e29439a42e2b5a423362772f5cae5f5ba261af7273dfe780c2e9cb",
    "sql": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "linq": "context.Matches.Where(row => row.TourneyName == \"Australian Open\").OrderByDescending(row => row.WinnerRankPoints).Select(row => new { row.WinnerName }).Take(1).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "6f6f3cfb80faf05b206d8f3e9dc0145677405c7b813bd0f131eb933fc86ae622",
    "sql": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "linq": "context.Matches.OrderByDescending(row => row.Minutes).Select(row => new { row.WinnerName, row.LoserName }).Take(1).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "bb7de7397d5645cca88c6a17793c2c9c1892ef5b1912eb3aa0da98aa163855d2",
    "sql": "SELECT avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
    "linq": "context.Players.Join(context.Rankings, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FirstName }).Select(group => new { AverageRanking1 = group.Select(row => row.T2.Ranking1).Average(), group.Key.FirstName }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "145aa433e2d1c3540316328767bbfcbf779232361def053b15ed8a8d264f9d9b",
    "sql": "SELECT sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
    "linq": "context.Players.Join(context.Rankings, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FirstName }).Select(group => new { SumRankingPoints = group.Select(row => row.T2.RankingPoints).Sum(), group.Key.FirstName }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "07b468898db285c2ddb9e5e17187ef12b90531a6f2d9c34dd318a49fdf9667f3",
    "sql": "SELECT count(*) , country_code FROM players GROUP BY country_code",
    "linq": "context.Players.GroupBy(row => new { row.CountryCode }).Select(group => new { Count = group.Count(), group.Key.CountryCode }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "bd4a47c3871ba8f82152931d1b187570a0ea5b2fe9e8db2d49f76528a9a1f226",
    "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Players.GroupBy(row => new { row.CountryCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CountryCode }).Take(1).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "07916ccea70020deb51120a27683000816fdd5ba7f331fb84f328679604836a4",
    "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
    "linq": "context.Players.GroupBy(row => new { row.CountryCode }).Where(group => group.Count() > 50).Select(group => new { group.Key.CountryCode }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "cfff06ee5f998321f630f5dcdb964ef25f970c343403142487945da32bb7d8d7",
    "sql": "SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
    "linq": "context.Rankings.GroupBy(row => new { row.RankingDate }).Select(group => new { SumTours = group.Select(row => row.Tours).Sum(), group.Key.RankingDate }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "b5c8c2447fd7ce8869a66b7388351638ac0155eb6cef76d11ed3e9d7c170f608",
    "sql": "SELECT count(*) , YEAR FROM matches GROUP BY YEAR",
    "linq": "context.Matches.GroupBy(row => new { row.Year }).Select(group => new { Count = group.Count(), group.Key.Year }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "22c94cd3db84bd9d7ac14ad6b92805a4e7a779baa9ae2dfda7897a399374a211",
    "sql": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "linq": "context.Matches.OrderBy(row => row.WinnerAge).Select(row => new { row.WinnerName, row.WinnerRank }).Distinct().Take(3).ToList();",
    "db_name": "wta_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: Madison Keys, 1: 17}, {0: Madison Keys, 1: 24}, {0: Madison Keys, 1: 16}]\", linq_results: \"[{0: Serena Williams, 1: 1}, {0: Petra Kvitova, 1: 6}, {0: Angelique Kerber, 1: 9}]\" }",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "324a0fbd1b27bbae75cd7ea9a1098ded1080536e314ac327f43201b13b4f10e3",
    "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
    "linq": "context.Matches.Where(row => row.TourneyName == \"WTA Championships\" && row.WinnerHand == \"L\").Select(row => row.WinnerName).Distinct().Count();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a9082d4187b9e5a7ad4dc49697ecc69230f95bf5a25e15c0f10576f4f9f6edd7",
    "sql": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "linq": "context.Players.Join(context.Matches, T1 => T1.PlayerId, T2 => T2.WinnerId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.WinnerRankPoints).Select(row => new { row.T1.FirstName, row.T1.CountryCode, row.T1.BirthDate }).Take(1).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "b82816a345d641d4dfa6f330cbecdab754791a3721c2d67ab71fdc15995b1bef",
    "sql": "SELECT count(*) , hand FROM players GROUP BY hand",
    "linq": "context.Players.GroupBy(row => new { row.Hand }).Select(group => new { Count = group.Count(), group.Key.Hand }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "66eca33f35e54972462ca2a01e100985874ccb5c6cc9df57d19406b31a6ea2c6",
    "sql": "SELECT count(*) FROM pets WHERE weight > 10",
    "linq": "context.Pets.Where(row => row.Weight > 10).Count();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "f43bd6c09c5bb0364acfcde05590459c41fc1e8759c7505693212a54999daae8",
    "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "linq": "context.Pets.OrderBy(row => row.PetAge).Select(row => new { row.Weight }).Take(1).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "c545cb1bd55646ccd3aca1a95d21ab5a87183aaf3ef6a73e0fd80570b9d3e0fd",
    "sql": "SELECT max(weight) , petType FROM pets GROUP BY petType",
    "linq": "context.Pets.GroupBy(row => new { row.PetType }).Select(group => new { MaxWeight = group.Select(row => row.Weight).Max(), group.Key.PetType }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "93d34030b9b32518b8d23b72ebb57e53e20d15c9b154406eb74a92f3bed6be61",
    "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
    "linq": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age > 20).Count();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "70210a2ac0c155823905e87dc6ee48c7aa17e6b4badbb5f402f07cfa4ddd280b",
    "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
    "linq": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Sex == \"F\" && row.T3.PetType == \"dog\").Count();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "5d7dd3654a55ca5ed6142ca9e4652577c6fe51b318f3a9a4ec6fb4b8a79000bc",
    "sql": "SELECT count(DISTINCT pettype) FROM pets",
    "linq": "context.Pets.Select(row => row.PetType).Distinct().Count();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "13f4256e4f523927dfeec3ece5be987585a8ffb70e6c5e10c6e54f4af6f2fa13",
    "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
    "linq": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetType == \"cat\" || row.T3.PetType == \"dog\").Select(row => new { row.T1.Fname }).Distinct().ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "dac1144d6d1e0b365aa1194a6da991b6b9d314bbc5903e1e8f804616d95b16b5",
    "sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
    "linq": "context.Students.Join(context.HasPets, t1 => t1.StuId, t2 => t2.StuId, (t1, t2) => new { t1, t2 }).Join(context.Pets, joined => joined.t2.PetId, t3 => t3.PetId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.PetType == \"cat\").Select(row => row.t1.Fname).Intersect(context.Students.Join(context.HasPets, t1 => t1.StuId, t2 => t2.StuId, (t1, t2) => new { t1, t2 }).Join(context.Pets, joined => joined.t2.PetId, t3 => t3.PetId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.PetType == \"dog\").Select(row => row.t1.Fname)).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "7600ec31274e446d66b67d9153730e0d3639a0947e2d8dcd586cd07c477f86f1",
    "sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
    "linq": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetType == \"cat\").Select(row => row.T1.Fname).Intersect(context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetType == \"dog\").Select(row => row.T1.Fname)).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "c97217141eab7d088081cc4e43ce6bade26c586319a17d7fb662a1260762ca88",
    "sql": "SELECT major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
    "linq": "context.Students.Where(row => !context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetType == \"cat\").Select(row => row.T1.StuId).Contains(row.StuId)).Select(row => new { row.Major, row.Age }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "4d1f92fcdbb330bc1ba9165b9b998da59ac6d928fa3b1c5b016e9debfbd9fc3c",
    "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
    "linq": "context.Students.Select(row => row.StuId).Except(context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetType == \"cat\").Select(row => row.T1.StuId)).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "7e74bb6342356a977ade9b3f88df7a6a095192c1a2db4abf76d8ca55f8f91809",
    "sql": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
    "linq": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetType == \"dog\" && !context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetType == \"cat\").Select(row => row.T1.StuId).Contains(row.T1.StuId)).Select(row => new { row.T1.Fname, row.T1.Age }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a5e8c391683d07fe63b6a0c0c3f1f48c0a70248ee0f0a7c66e327a4b9e56f4f9",
    "sql": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
    "linq": "context.Pets.OrderBy(row => row.PetAge).Select(row => new { row.PetType, row.Weight }).Take(1).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "944b876f7312e84e555790e0f327e2f16cf5410a4fef8c9c7603918248278f9e",
    "sql": "SELECT petid , weight FROM pets WHERE pet_age > 1",
    "linq": "context.Pets.Where(row => row.PetAge > 1).Select(row => new { row.PetId, row.Weight }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "fddc5bf29cde0049040d4f889592102ffbb02306b6b38eaef4eb0d9d78de70ef",
    "sql": "SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
    "linq": "context.Pets.GroupBy(row => new { row.PetType }).Select(group => new { AveragePetAge = group.Select(row => row.PetAge).Average(), MaxPetAge = group.Select(row => row.PetAge).Max(), group.Key.PetType }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "17dee5bc1688bd23835c67210fb7dea66891a4a383ed9db45df299dfc9e19ba8",
    "sql": "SELECT avg(weight) , pettype FROM pets GROUP BY pettype",
    "linq": "context.Pets.GroupBy(row => new { row.PetType }).Select(group => new { AverageWeight = group.Select(row => row.Weight).Average(), group.Key.PetType }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "b4a252b3903767751e4376a56c266b5ba8de2a367e7a916e6675b45b87d5dba5",
    "sql": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
    "linq": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Fname, row.T1.Age }).Distinct().ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "6e1a4d4d1715a6497879012405faf8205b3e564d054334b739d2c26d384f1913",
    "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
    "linq": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Lname == \"Smith\").Select(row => new { row.T2.PetId }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "19823612ac6956f30e82c72101ea8d2e3cc2634035d24170e58a493e4ecf6ca8",
    "sql": "SELECT count(*) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
    "linq": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StuId }).Select(group => new { Count = group.Count(), group.Key.StuId }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "1972de18467b1a6535f3c40bf6f8ef473d9ed4b9b3a0afb3ad48c6230a3fee22",
    "sql": "select count(*) , t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
    "linq": "context.Students.Join(context.HasPets, t1 => t1.StuId, t2 => t2.StuId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.StuId }).Select(group => new { Count = group.Count(), group.Key.StuId }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "0010b88d3e59f79e090346244c72fc31f88fa1fb92f0c5ea4b4e0a28a57b6acc",
    "sql": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
    "linq": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StuId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Fname, group.First().T1.Sex }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "f37c5add7ed3a4aa3e60288597d926d4b8ea7a77b6dd839d0dbf9bf696986036",
    "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
    "linq": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetAge == 3 && row.T3.PetType == \"cat\").Select(row => new { row.T1.Lname }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "ca88acbeb9ce3f09ba6cdbeda963bb9e254b5c08ab0ce48417978c555639a2b2",
    "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
    "linq": "context.Students.Where(row => !context.HasPets.Select(row => row.StuId).Contains(row.StuId)).Select(row => row.Age).Average();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "990293bbd485873e269ea98c9db936a0747d01a628734fcb19ff17087342cd78",
    "sql": "SELECT count(*) FROM Documents",
    "linq": "context.Documents.Count();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "45d2a989744e69c3cc556958821ed2d9b77d1835902e5a536e7f21f0e048bb51",
    "sql": "SELECT document_id , document_name , document_description FROM Documents",
    "linq": "context.Documents.Select(row => new { row.DocumentId, row.DocumentName, row.DocumentDescription }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "20ad7d79084fa5803a00360f83ae86cbcf5345b1646424a7bd9245d63c2487f4",
    "sql": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "linq": "context.Documents.Where(row => EF.Functions.Like(row.DocumentDescription, \"%w%\")).Select(row => new { row.DocumentName, row.TemplateId }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "001a895bfa506a6417d7bd37a5faf41272482450128fd64be049a739cb2980d6",
    "sql": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
    "linq": "context.Documents.Where(row => row.DocumentName == \"Robbin CV\").Select(row => new { row.DocumentId, row.TemplateId, row.DocumentDescription }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "5e8687a258418d7fdbf19fea4e8af8d3d2cf032dfa4b88d5fc3881db3a23ff5b",
    "sql": "SELECT count(DISTINCT template_id) FROM Documents",
    "linq": "context.Documents.Select(row => row.TemplateId).Distinct().Count();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "22c165762c6787d1285b6dda1618ff30024e94beb819795c2fcab5aceed9493a",
    "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
    "linq": "context.Documents.Join(context.Templates, T1 => T1.TemplateId, T2 => T2.TemplateId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TemplateTypeCode == \"PPT\").Count();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "818b23f5ebdf670c0a513042a8229d9db76050c1d9d451566bf11190fd32c54f",
    "sql": "SELECT template_id , count(*) FROM Documents GROUP BY template_id",
    "linq": "context.Documents.GroupBy(row => new { row.TemplateId }).Select(group => new { group.Key.TemplateId, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "bea0ee105ae056c461cda41060785ec5b2ad58a919f89eda002400e5929a1c70",
    "sql": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Documents.Join(context.Templates, T1 => T1.TemplateId, T2 => T2.TemplateId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TemplateId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.TemplateId, group.First().T2.TemplateTypeCode }).Take(1).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "957d6e2a565da865cc883549b7b637b43b9c5376311c8bc19bd05665b394bf10",
    "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
    "linq": "context.Documents.GroupBy(row => new { row.TemplateId }).Where(group => group.Count() > 1).Select(group => new { group.Key.TemplateId }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "f2117bca0b17613b96d22e74f52141bb74406bca28f9f8cb4b2852021a28715c",
    "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "linq": "context.Templates.Select(row => row.TemplateId).Except(context.Documents.Where(row => row.TemplateId.HasValue).Select(row => TemplateId = row.TemplateId.Value)).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,137): error CS0103: The name 'TemplateId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.05",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "518d97da950a4922bd2881c9438f25498536cc24a7bf47b910cf03c6db6a8193",
    "sql": "SELECT count(*) FROM Templates",
    "linq": "context.Templates.Count();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "15904d4d06107657bcd68888c1df455f7ceea361dd17e093b0c63fc6e6881173",
    "sql": "SELECT template_id , version_number , template_type_code FROM Templates",
    "linq": "context.Templates.Select(row => new { row.TemplateId, row.VersionNumber, row.TemplateTypeCode }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "42d004aa6f7b49b3cf93bc2ec8421f89c8b4ba5477a18265b84b02b36f599496",
    "sql": "SELECT DISTINCT template_type_code FROM Templates",
    "linq": "context.Templates.Select(row => new { row.TemplateTypeCode }).Distinct().ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "b8c3a0859be80d93c943bf92bde5539cf8ddfb40cfdd3712b427638afda91f8a",
    "sql": "SELECT template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
    "linq": "context.Templates.Where(row => row.TemplateTypeCode == \"PP\" || row.TemplateTypeCode == \"PPT\").Select(row => new { row.TemplateId }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d701ce13c9d5baa00e036f2029a29ffe356819544683f751effd2384f0f0405b",
    "sql": "SELECT count(*) FROM Templates WHERE template_type_code = \"CV\"",
    "linq": "context.Templates.Where(row => row.TemplateTypeCode == \"CV\").Count();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "223e483ff3de69f130cc11e0e7ae433067bba56341c6ca4fb4f0862ea2a2ee49",
    "sql": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
    "linq": "context.Templates.Where(row => row.VersionNumber > 5).Select(row => new { row.VersionNumber, row.TemplateTypeCode }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a69c3e59e77c4c7aa70e751ae4b9bf64091dc6415837dc69361cfa727732b9aa",
    "sql": "SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code",
    "linq": "context.Templates.GroupBy(row => new { row.TemplateTypeCode }).Select(group => new { group.Key.TemplateTypeCode, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a685f4c223a1b99f6c602d8f9f9596ff5845ba7221a4ee82a23a8ba89bdb38cc",
    "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Templates.GroupBy(row => new { row.TemplateTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.TemplateTypeCode }).Take(1).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "551e50052b5874a2c8699e7bd4d5ae32792e50529cba5fb263c9da84e341cb9b",
    "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
    "linq": "context.Templates.GroupBy(row => new { row.TemplateTypeCode }).Where(group => group.Count() < 3).Select(group => new { group.Key.TemplateTypeCode }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "f004219ea1001c7ebcdf46468ff18faef7da30b7fbe7d047614f4140bc1ff231",
    "sql": "SELECT min(Version_Number) , template_type_code FROM Templates",
    "linq": "context.Templates.Select(row => new { MinVersionNumber = row.Select(row => row.VersionNumber).Min(), row.TemplateTypeCode }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,73): error CS1061: 'Template' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type 'Template' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.45",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "3730e96253dad9e49523311bbe5c5ba03a143141b726eadb57c270e2b908c004",
    "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
    "linq": "context.Templates.Join(context.Documents, T1 => T1.TemplateId, T2 => T2.TemplateId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == \"Data base\").Select(row => new { row.T1.TemplateTypeCode }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "87dfae25895efcc57738627e8e0d5d71b1912febb9af371d3e436f4ff5055594",
    "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
    "linq": "context.Templates.Join(context.Documents, T1 => T1.TemplateId, T2 => T2.TemplateId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.TemplateTypeCode == \"BK\").Select(row => new { row.T2.DocumentName }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "8fb6fd67b9c6f7d2d8b11423835c05e5f639f870162cde47bd0e46f8a4745b9e",
    "sql": "SELECT T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
    "linq": "context.Templates.Join(context.Documents, T1 => T1.TemplateId, T2 => T2.TemplateId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TemplateTypeCode }).Select(group => new { group.Key.TemplateTypeCode, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "530701984117426d6ef09141d9e8ce30c3572bac1b13fb152efe331ba6ca2444",
    "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Templates.Join(context.Documents, T1 => T1.TemplateId, T2 => T2.TemplateId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TemplateTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.TemplateTypeCode }).Take(1).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "5b6ec2b75958b90b7eeab158f86bb9c1ea9dfb86349bef4118c101140fa94c51",
    "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
    "linq": "context.Templates.Select(row => row.TemplateTypeCode).Except(context.Templates.Join(context.Documents, T1 => T1.TemplateId, T2 => T2.TemplateId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.TemplateTypeCode)).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "893350d25ddc2ec946fddc313a8466ae8adb4313ddcab6a4f5a18cdde090219c",
    "sql": "SELECT template_type_code , template_type_description FROM Ref_template_types",
    "linq": "context.RefTemplateTypes.Select(row => new { row.TemplateTypeCode, row.TemplateTypeDescription }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "cc60fed84e185bedf49ac6db0983787182bdb8775ac0a619c1665ecec1cbdb25",
    "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
    "linq": "context.RefTemplateTypes.Where(row => row.TemplateTypeCode == \"AD\").Select(row => new { row.TemplateTypeDescription }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "e732fb32a7679454fd702250af1b56460caec89428d1d8ae0cc99f7bf9863342",
    "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
    "linq": "context.RefTemplateTypes.Where(row => row.TemplateTypeDescription == \"Book\").Select(row => new { row.TemplateTypeCode }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "1f19c7eacd9d455b6dcdb1c54ca38185f19cf2a5d2a3cad0ed793a796c282946",
    "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
    "linq": "context.RefTemplateTypes.Join(context.Templates, T1 => T1.TemplateTypeCode, T2 => T2.TemplateTypeCode, (T1, T2) => new { T1, T2 }).Join(context.Documents, joined => joined.T2.TemplateId, T3 => T3.TemplateId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.TemplateTypeDescription }).Distinct().ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "7eb40b3ed0b92a5237ab5b303187886dfe464f8dbba2d30042c48bdf3c975afe",
    "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
    "linq": "context.RefTemplateTypes.Join(context.Templates, T1 => T1.TemplateTypeCode, T2 => T2.TemplateTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.TemplateTypeDescription == \"Presentation\").Select(row => new { row.T2.TemplateId }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "997fbd5a9100271f1eebbb76d65dc4df6a0d3bcc845940c588cc90652c681ea1",
    "sql": "SELECT count(*) FROM Paragraphs",
    "linq": "context.Paragraphs.Count();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "cbc2cf9c39f889f8e39c386294702b4fc3e5f3f90331b49a99eb37877b508f5f",
    "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
    "linq": "context.Paragraphs.Join(context.Documents, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == \"Summer Show\").Count();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "b9a95ac7590a215e569f508c01ac7f4330d1b471934c1f67d53ed9e26f396dae",
    "sql": "select other_details from paragraphs where paragraph_text like 'korea'",
    "linq": "context.Paragraphs.Where(row => EF.Functions.Like(row.ParagraphText, \"korea\")).Select(row => new { row.OtherDetails }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "5801695432bed0abd3e0f939c22e3d502c210f7add23c3cfc18e53762dbf5dd5",
    "sql": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
    "linq": "context.Paragraphs.Join(context.Documents, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == \"Welcome to NY\").Select(row => new { row.T1.ParagraphId, row.T1.ParagraphText }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "cb2efba88e7df7aeb71cc6a67ed1a2f4c911f61f4714ff06aaed34870b072847",
    "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
    "linq": "context.Paragraphs.Join(context.Documents, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == \"Customer reviews\").Select(row => new { row.T1.ParagraphText }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "6c3c2726e0a022f76e3577d47dad133e4da4dc206667d6a974e20d0f9110f117",
    "sql": "SELECT document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "linq": "context.Paragraphs.GroupBy(row => new { row.DocumentId }).OrderBy(group => group.DocumentId).Select(group => new { group.Key.DocumentId, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,93): error CS1061: 'IGrouping<<anonymous type: int DocumentId>, Paragraph>' does not contain a definition for 'DocumentId' and no accessible extension method 'DocumentId' accepting a first argument of type 'IGrouping<<anonymous type: int DocumentId>, Paragraph>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.51",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "750f8f71e66f1659cb49a7ea0850a13cc378cd72021c1f581209f6f46071544d",
    "sql": "SELECT T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
    "linq": "context.Paragraphs.Join(context.Documents, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DocumentId }).Select(group => new { group.Key.DocumentId, group.First().T2.DocumentName, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d5ce6718ad881eadd88afeb5c812e14849c2eee59e2ce0252e4ea8141ab6e4f3",
    "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
    "linq": "context.Paragraphs.GroupBy(row => new { row.DocumentId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.DocumentId }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "9924510fce82a126033c0444be3a0a876dd9e6897308ab6ddb59448648c3acb9",
    "sql": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Paragraphs.Join(context.Documents, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DocumentId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DocumentId, group.First().T2.DocumentName }).Take(1).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "f148f8aea68f766f231bccf1ea218276990b3beea0262224b82f504430713b03",
    "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.Paragraphs.GroupBy(row => new { row.DocumentId }).OrderBy(group => group.Count()).Select(group => new { group.Key.DocumentId }).Take(1).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "ac71e7929916522163aebcd7f9346d2e88d78c51c3959ab00ed4cc00c10941b6",
    "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "linq": "context.Paragraphs.GroupBy(row => new { row.DocumentId }).Where(group => group.Count() >= 1 && group.Count() <= 2).Select(group => new { group.Key.DocumentId }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "7b6354dbefafa298d03de2215430e3875ecc4144de0ec8e6222d1cf65ae2fe59",
    "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
    "linq": "context.Paragraphs.Where(row => row.ParagraphText == \"Brazil\").Select(row => row.DocumentId).Intersect(context.Paragraphs.Where(row => row.ParagraphText == \"Ireland\").Select(row => row.DocumentId)).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "16f3bf0cfbf2c7cf7d2e0dd4d63b9e745cf049b089cf521a7047398070c20ba3",
    "sql": "SELECT count(*) FROM teacher",
    "linq": "context.Teachers.Count();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "c9f1cd72a734a8097ba3584f970309612354cbff8e9209df54aec613861a028e",
    "sql": "SELECT Name FROM teacher ORDER BY Age ASC",
    "linq": "context.Teachers.OrderBy(row => row.Age).Select(row => new { row.Name }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "fc62faf3002ea2bc3521a91adf899a13d1fea05be93764b6901d75c1b3f55d4e",
    "sql": "SELECT Age , Hometown FROM teacher",
    "linq": "context.Teachers.Select(row => new { row.Age, row.Hometown }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a0757f3f7f19acf3d5b25e20d8c54eb6aeea681fab283e739fddba0f016909f9",
    "sql": "select name from teacher where hometown != \"little lever urban district\"",
    "linq": "context.Teachers.Where(row => row.Hometown != \"little lever urban district\").Select(row => new { row.Name }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "cfe2edf7263406bdce6374298b7894d409581f56504311fdd7e82001ffc7c0a5",
    "sql": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
    "linq": "context.Teachers.Where(row => row.Age == \"32\" || row.Age == \"33\").Select(row => new { row.Name }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "627f594ed335aee3c839383b9ccc300729969bc2ef703897740c2bf8578a1702",
    "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "linq": "context.Teachers.OrderBy(row => row.Age).Select(row => new { row.Hometown }).Take(1).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "2b8c56a72832d50a29fe119d76538be2efef6db7f28e859888d393412a265858",
    "sql": "SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
    "linq": "context.Teachers.GroupBy(row => new { row.Hometown }).Select(group => new { group.Key.Hometown, Count = group.Count() }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "43d98da9363f0caa3fd591f87207a9718fdc7f3dd83dd357c2fc929cba42b08b",
    "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Teachers.GroupBy(row => new { row.Hometown }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Hometown }).Take(1).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "7fb103eb6f0569fafb763bbdb59905b9ca6e9056140d306952e00da1f2fd0a30",
    "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
    "linq": "context.Teachers.GroupBy(row => new { row.Hometown }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Hometown }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "aae73e9377c66268b12733f65097b8badfcb8011595493fe4349358fe04d1f83",
    "sql": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
    "linq": "context.CourseArranges.Join(context.Courses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Join(context.Teachers, joined => joined.T1.TeacherId, T3 => T3.TeacherId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Name, row.T2.Course1 }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "4fe29d07f6f1c5b630c6274102b80f964bbac8ac3ec94ab563bcca710a0ec256",
    "sql": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
    "linq": "context.CourseArranges.Join(context.Courses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Join(context.Teachers, joined => joined.T1.TeacherId, T3 => T3.TeacherId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T3.Name).Select(row => new { row.T3.Name, row.T2.Course1 }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "1b3756c95bd94a8c4e2f43f2ffe21cdadc5aa2a7ebfc7766e1b68bf9d571ea84",
    "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
    "linq": "context.CourseArranges.Join(context.Courses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Join(context.Teachers, joined => joined.T1.TeacherId, T3 => T3.TeacherId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Course1 == \"Math\").Select(row => new { row.T3.Name }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "e7a5012c0e5cf80f561abcb91efd63dead244fa190fb8813b6b6a59ed569b54b",
    "sql": "SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
    "linq": "context.CourseArranges.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { group.Key.Name, Count = group.Count() }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "bc1601187c8b4a2824ac1be77bd3da1869ba2b9ce8ef331340c3703429e2ac8b",
    "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
    "linq": "context.CourseArranges.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Name }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "5ebb1f24ec7abfcdddfe68076fe94d0946d13b11996dca6839e087ec0680c89c",
    "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
    "linq": "context.Teachers.Where(row => !context.CourseArranges.Select(row => row.TeacherId).Contains(row.TeacherId)).Select(row => new { row.Name }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "cee06d19675d954549bf837714993f1d5c5c24e0106de957dd0d66aef0b94f25",
    "sql": "SELECT Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
    "linq": "context.Airlines.Where(row => row.Airline1 == \"JetBlue Airways\").Select(row => new { row.Country }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "61fc1dd4da0512b1f0bbe3b516eccf6616b36f139f8c7c84142a2bc753361c78",
    "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
    "linq": "context.Airlines.Where(row => row.Airline1 == \"JetBlue Airways\").Select(row => new { row.Abbreviation }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "8eaf3cc0f7c48a180370335f53d38843c54b32674e38b0416743c405cda3ab20",
    "sql": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
    "linq": "context.Airlines.Where(row => row.Country == \"USA\").Select(row => new { row.Airline1, row.Abbreviation }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "b22905e77d29ff89bfb4df8a7c440fd001c301552a20191f5bc14f03c35ad94c",
    "sql": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
    "linq": "context.Airports.Where(row => row.City == \"Anthony\").Select(row => new { row.AirportCode, row.AirportName }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "c305fc5ec9ec9f32654498a43ac69b5d6873eb24b61cebaabe199abd525e70fb",
    "sql": "SELECT count(*) FROM AIRLINES",
    "linq": "context.Airlines.Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "6c6bbebc7cae780f47c4ae1e50e6609c80c41c08823d336fb2ea1e9d401afaac",
    "sql": "SELECT count(*) FROM AIRPORTS",
    "linq": "context.Airports.Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "b0bf2cf631435674f05a915014758c25ba2393b51aadf4a02564fd79c8a9f946",
    "sql": "SELECT count(*) FROM FLIGHTS",
    "linq": "context.Flights.Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "f71c5bd1aa0a7c2b2666e1123ed0b0765362c9346b45ffdc1c6cb99edf8b3809",
    "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
    "linq": "context.Airlines.Where(row => row.Abbreviation == \"UAL\").Select(row => new { row.Airline1 }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "af3963d1cad0a1630f93fc58beb8b6ed958e9b5309ba01b9d808784156079383",
    "sql": "SELECT count(*) FROM AIRLINES WHERE Country = \"USA\"",
    "linq": "context.Airlines.Where(row => row.Country == \"USA\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "baf6fe4c390681cf76ce8adb38368a6356b6b05acc17be75e607d8e4f221d095",
    "sql": "SELECT City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
    "linq": "context.Airports.Where(row => row.AirportName == \"Alton\").Select(row => new { row.City, row.Country }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "cbf01d00b73db6fd0f5b9fe2aa5d26f7e75006cfc739e7704e052156e236cd3c",
    "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
    "linq": "context.Airports.Where(row => row.AirportCode == \"AKO\").Select(row => new { row.AirportName }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "5927d3cbd58fac2655021078f1325e819e99cb3795e5ae7381764394422638a8",
    "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "linq": "context.Airports.Where(row => row.City == \"Aberdeen\").Select(row => new { row.AirportName }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "ab3f8c5f7348af355073f9ec5c5ad852808bfe269bc3be6346648562bf66fba9",
    "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
    "linq": "context.Flights.Where(row => row.SourceAirport == \"APG\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "b38df73b66c9d77bc7e59fe78b3f66c1f1767813f9fa049da9fe74481e9ea9fb",
    "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\"",
    "linq": "context.Flights.Where(row => row.DestAirport == \"ATO\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "8d37fcf34129c33eea6d41e6853e69e1c4ce02e2a0fb9f49913d1a03c282141e",
    "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
    "linq": "context.Flights.Join(context.Airports, T1 => T1.SourceAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City == \"Aberdeen\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "39365160261ee6b466826cf5c254b9b0c23bbf6e68f589723d5f88f74f1022ec",
    "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
    "linq": "context.Flights.Join(context.Airports, T1 => T1.DestAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City == \"Aberdeen\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "dc969ee344ec2f122414b1cb1f6413d3e74ddb75e9e6f924abaaf3f768d7e70e",
    "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\"",
    "linq": "context.Flights.Join(context.Airports, T1 => T1.DestAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Join(context.Airports, joined => joined.T1.SourceAirport, T3 => T3.AirportCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.City == \"Ashley\" && row.T3.City == \"Aberdeen\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "8be9ba998ebf16c3ff42b80f8840baa7ffa6065f2dc05da9f0112074d2da3513",
    "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "linq": "context.Flights.Join(context.Airlines, T1 => T1.Airline, T2 => T2.Uid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Airline1 == \"JetBlue Airways\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "9e0aef5e7e91afc087aa0e8304923c90556e18ec1240aac58def93f828e153bf",
    "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\"",
    "linq": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Airline1 == \"United Airlines\" && row.T2.DestAirport == \"ASY\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "646539917e78b578fb81a84336c0621b2ea851a15e96bc99fbfec62a6f4cd0e6",
    "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
    "linq": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Airline1 == \"United Airlines\" && row.T2.SourceAirport == \"AHD\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "7995ef138c61b35491ccd37e257088c7c0980611c7b5ad671ca389bb83752865",
    "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\"",
    "linq": "context.Flights.Join(context.Airports, T1 => T1.DestAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Join(context.Airlines, joined => joined.T1.Airline, T3 => T3.Uid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.City == \"Aberdeen\" && row.T3.Airline1 == \"United Airlines\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "3fe205c1dbf1ab10cab1b37a8d32dff1f8a6538b61f86696e1709045f47202be",
    "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Airports.Join(context.Flights, T1 => T1.AirportCode, T2 => T2.DestAirport, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.City }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.City }).Take(1).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "f953980a64b3b89adf5508a140171bee4594da2203f30d54784469604679bad1",
    "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Airports.Join(context.Flights, T1 => T1.AirportCode, T2 => T2.SourceAirport, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.City }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.City }).Take(1).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "969bf0e715621ff41fc967f06da235ab8c4b47d265142e6d7043076970b61ead",
    "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Airports.Join(context.Flights, T1 => new { Pair1 = T1.AirportCode, Pair2 = T1.AirportCode }, T2 => new { Pair1 = T2.DestAirport, Pair2 = T2.SourceAirport }, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AirportCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AirportCode }).Take(1).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "963fd3e0b4b74f435a59871d0300859052747dbbe91e3cee78b611c0658638d7",
    "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "linq": "context.Airports.Join(context.Flights, T1 => new { Pair1 = T1.AirportCode, Pair2 = T1.AirportCode }, T2 => new { Pair1 = T2.DestAirport, Pair2 = T2.SourceAirport }, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AirportCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.AirportCode }).Take(1).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "e6e0b349f5d3f6ed42cd835f27e8fa89f5537c7c6883a9f91d36b26cc6dc782d",
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Airline1 }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Airline1 }).Take(1).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "12e63de3ce4b018e4f46845537897f51a8a6af75eb9a3ad548ae09e4749558eb",
    "sql": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "linq": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Airline1 }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.Abbreviation, group.First().T1.Country }).Take(1).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "7313ae02dd7ed3dcd68405ac3040d7a473012e44961daa45bca57023bf811dd7",
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
    "linq": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SourceAirport == \"AHD\").Select(row => new { row.T1.Airline1 }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "2fad3504eb983f6393b41853dc09b4736c35034744bbe2d0b2939a16bd9a7419",
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
    "linq": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DestAirport == \"AHD\").Select(row => new { row.T1.Airline1 }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d24da8ef07179a99796feeba3744633a45ac0ed2d1e1559da6041d8b93e1a865",
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
    "linq": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SourceAirport == \"APG\").Select(row => row.T1.Airline1).Intersect(context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SourceAirport == \"CVO\").Select(row => row.T1.Airline1)).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "f5755de1b000681626efde0574efeddd936cd8aa8a2c7384a6b651a063e2fc2c",
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
    "linq": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SourceAirport == \"CVO\").Select(row => row.T1.Airline1).Except(context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SourceAirport == \"APG\").Select(row => row.T1.Airline1)).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "8130de2d84da41bf40190a8a25d7b5fa87989306d06da75c9db5156530bbd733",
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10",
    "linq": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Airline1 }).Where(group => group.Count() > 10).Select(group => new { group.Key.Airline1 }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "ce17762fa8ae49a01c6b795418f737f8e4e861ded90b60db2a36e9f3bc7b6e0b",
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
    "linq": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Airline1 }).Where(group => group.Count() < 200).Select(group => new { group.Key.Airline1 }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "c648056c816c48b7f9b27c43c780b5e4f7ba61abf7bd410be9ac61ba903320a2",
    "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\"",
    "linq": "context.Flights.Join(context.Airlines, T1 => T1.Airline, T2 => T2.Uid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Airline1 == \"United Airlines\").Select(row => new { row.T1.FlightNo }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "ebc65e87acadb8ede92d2aa26f2093f02e8ee89f43563ca1b6cb6c1c7b098691",
    "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
    "linq": "context.Flights.Where(row => row.SourceAirport == \"APG\").Select(row => new { row.FlightNo }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "e31f053c7adf17ddbd0fdc9b3e6029355f2d8ec9679b61f173d91418bd948148",
    "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
    "linq": "context.Flights.Where(row => row.DestAirport == \"APG\").Select(row => new { row.FlightNo }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "e2b0569ab0af8ce42836f2f914ec7dd5c4126ae7fa1ee23d00316cdd3a35c0f2",
    "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
    "linq": "context.Flights.Join(context.Airports, T1 => T1.SourceAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City == \"Aberdeen\").Select(row => new { row.T1.FlightNo }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "4450caab660a725749aa20e04cffae9b455827ceef8a27aa24dd03511634645a",
    "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
    "linq": "context.Flights.Join(context.Airports, T1 => T1.DestAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City == \"Aberdeen\").Select(row => new { row.T1.FlightNo }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "98819e27908bf6ecc301bd69ed8401524fe73656074ab1af2cbd5484e403959f",
    "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\"",
    "linq": "context.Flights.Join(context.Airports, T1 => T1.DestAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City == \"Aberdeen\" || row.T2.City == \"Abilene\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "40ae4ef0a793b92417af5c87d805f28c860a7e0fe462354fbca542ac0e93e497",
    "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "linq": "context.Airports.Where(row => !context.Flights.Select(row => row.SourceAirport).Union(context.Flights.Select(row => row.DestAirport)).Contains(row.AirportCode)).Select(row => new { row.AirportName }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "091454a5eaa33e664f21d358cf4240f62b85c0aadd4c494d107ebe83684cfdc0",
    "sql": "SELECT count(*) FROM poker_player",
    "linq": "context.PokerPlayers.Count();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "e195f9f3f932751c6e3836e1c8ae5ea94276e008e823c463318c178f8881e120",
    "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "linq": "context.PokerPlayers.OrderByDescending(row => row.Earnings).Select(row => new { row.Earnings }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "162ade29d3461d724d608a8becc387efe5bc8de97b456472e0eb80ad3474a77d",
    "sql": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
    "linq": "context.PokerPlayers.Select(row => new { row.FinalTableMade, row.BestFinish }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "4c74a55411400f2441db3d1fc6fd49bdfed5815d61110c5b6b45cef1aa28903a",
    "sql": "SELECT avg(Earnings) FROM poker_player",
    "linq": "context.PokerPlayers.Select(row => (double) row.Earnings).Average();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "9af82479e7645729ffad9ffdf2c20dfa8003c033533c8fe0a945b5ffcf9fc2da",
    "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "linq": "context.PokerPlayers.OrderByDescending(row => row.Earnings).Select(row => new { row.MoneyRank }).Take(1).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "2b582abeceb5be8cba37449fa3df61019c18969d66c1d26f88298d34a206b9a5",
    "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
    "linq": "context.PokerPlayers.Where(row => row.Earnings < 200000).Select(row => row.FinalTableMade).Max();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "738e52ac877b752792ba63732aa91b13156c85b30e947dc53aa38f9f403466a6",
    "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
    "linq": "context.People.Join(context.PokerPlayers, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a19add7aad9e5b643138f18fc7df9d3b637939bb814fe0c66f1e4523a3914f47",
    "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
    "linq": "context.People.Join(context.PokerPlayers, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Earnings > 300000).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "f223bdfff8fe128e72262e3de9fc1a57d1e894e2b3da48f74f04ffff5f02fd1b",
    "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
    "linq": "context.People.Join(context.PokerPlayers, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.FinalTableMade).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "051a938efd9919dbcace628b943069e8df69a5cfcc8de8c65f5f62a25bf66ddb",
    "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "linq": "context.People.Join(context.PokerPlayers, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Earnings).Select(row => new { row.T1.BirthDate }).Take(1).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "cb4fcc40d9af31e821388dcac449139056aa2b54486934bc6cb9c6136ecd9447",
    "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "linq": "context.People.Join(context.PokerPlayers, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Height).Select(row => new { row.T2.MoneyRank }).Take(1).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d61f8082da1258ce97d80efb16a8a481b90a7110a2cd8971dba597639ba15a03",
    "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
    "linq": "context.People.Join(context.PokerPlayers, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Height > 200).Select(row => (double) row.T2.Earnings).Average();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "be51e0302a9881de667db5ec364175c7026bbd65a99fa42d36093ca9134e8c45",
    "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
    "linq": "context.People.Join(context.PokerPlayers, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Earnings).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "b598685955f17c4d705021be02eb6ffa26d87ce54da907f4699c82580156ed70",
    "sql": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
    "linq": "context.People.GroupBy(row => new { row.Nationality }).Select(group => new { group.Key.Nationality, Count = group.Count() }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d278cc7599104f873528d1f96e25c70a9fd9e9b46a936e0d70940d61fe37c330",
    "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.People.GroupBy(row => new { row.Nationality }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Nationality }).Take(1).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "2e61476805c8a6d0c5f76f4585e6103282a670076a989c365b538f9fd5c727e0",
    "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
    "linq": "context.People.GroupBy(row => new { row.Nationality }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Nationality }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "15b2f9e61b6dc6f56aa474171140f953991a35ac324545dc8c28cc820c9718b6",
    "sql": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
    "linq": "context.People.OrderBy(row => row.Name).Select(row => new { row.Name, row.BirthDate }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "6d2c06e0e62888024b74b7a7e97ba0d01b80108af0e41add0619094c29baaecf",
    "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "linq": "context.People.Where(row => row.Nationality != \"Russia\").Select(row => new { row.Name }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "6b96fd719662bb23fb5131ccdb22d82856467240bba4c2f366296a58925c3ca6",
    "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
    "linq": "context.People.Where(row => !context.PokerPlayers.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "dba4e554b1a4cc3635180a4d0266c0b8a687bc1093f7c7f77aa8e81a8c1b8b8b",
    "sql": "SELECT count(DISTINCT Nationality) FROM people",
    "linq": "context.People.Select(row => row.Nationality).Distinct().Count();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "aeea048935a3ba86439344500873c3636e4c012eda34b7ee94d5888e0cd0c1c7",
    "sql": "SELECT count(*) FROM Highschooler",
    "linq": "context.Highschoolers.Count();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "2b14f61500c546abceb47975ed02233daa994ffb13fe54628f5d2d6a80c1624f",
    "sql": "SELECT name , grade FROM Highschooler",
    "linq": "context.Highschoolers.Select(row => new { row.Name, row.Grade }).ToList();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "7778d90ac24700b6e9db3bea1cef1591dd2514a54eba0b822a03f88c70de4955",
    "sql": "SELECT grade FROM Highschooler",
    "linq": "context.Highschoolers.Select(row => new { row.Grade }).ToList();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "23e43e7edce3bd93ff22eadaf24b42cba536bed36ef79cd147db8db07b0e9ee1",
    "sql": "SELECT grade FROM Highschooler WHERE name = \"Kyle\"",
    "linq": "context.Highschoolers.Where(row => row.Name == \"Kyle\").Select(row => new { row.Grade }).ToList();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "6b19d6ce1c0c7521ce6e1e4fb3ab6a81d5484d4f16ed4dcc83e136961e0c8fac",
    "sql": "SELECT name FROM Highschooler WHERE grade = 10",
    "linq": "context.Highschoolers.Where(row => row.Grade == 10).Select(row => new { row.Name }).ToList();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "82437a9782cba90f79b619c90c1a43d59b1d37d684f72fcfcaabc9e6f96f4346",
    "sql": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
    "linq": "context.Highschoolers.Where(row => row.Name == \"Kyle\").Select(row => new { row.Id }).ToList();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "065ae53c7b1e07212b676755ee6f5635cd706324014a4ee955a7ac353d2a3f8e",
    "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "linq": "",
    "db_name": "dog_kennels",
    "status": "QueryBuildFailed",
    "error": "Unknown set expression type",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "8d34be5b379631cbaf8c3e1b8ee41ee0af83c5ec9575933cc6dbfeafed34f486",
    "sql": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
    "linq": "context.Highschoolers.Where(row => row.Grade == 9 || row.Grade == 10).Count();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d2084dd16e9604dff945cd34093e123978ca587f404aefe369ebb5ed1e8f17e9",
    "sql": "SELECT grade , count(*) FROM Highschooler GROUP BY grade",
    "linq": "context.Highschoolers.GroupBy(row => new { row.Grade }).Select(group => new { group.Key.Grade, Count = group.Count() }).ToList();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "f14602b7e0ab03ef2a5d84d048448c4327bb701997143d9bc19ae0fc04da5d60",
    "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Highschoolers.GroupBy(row => new { row.Grade }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Grade }).Take(1).ToList();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "213b555ac0aee47c25389f49447ff079d5f343ee1b70340a1ef16bec2555d5a2",
    "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
    "linq": "context.Highschoolers.GroupBy(row => new { row.Grade }).Where(group => group.Count() >= 4).Select(group => new { group.Key.Grade }).ToList();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "1cfdc46d8e2d6cb3877a67cd4beb828f6bbbaba819c85f7c70fa902860ca40d7",
    "sql": "SELECT student_id , count(*) FROM Friend GROUP BY student_id",
    "linq": "context.Friend.GroupBy(row => new { row.StudentId }).Select(group => new { group.Key.StudentId, Count = group.Count() }).ToList();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.42",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "17bf38a2edc664acd342b4e6da434ad9287dad9d1854dbe1e5b24dfae4b5933e",
    "sql": "SELECT T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
    "linq": "context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).Select(group => new { group.First().T2.Name, Count = group.Count() }).ToList();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.88",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "739289a29b88a26deeeb2371a18d4d5ade5ee064e25e18e7dcd9a41852683607",
    "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name }).Take(1).ToList();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.35",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "01b4433add82283121c483c7fb1d7fb21f3854a731f31ea0fc568dc275eb009e",
    "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
    "linq": "context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).Where(group => group.Count() >= 3).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.78",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "0bdafcc69f31e161077d14aa846999ef19999705f042973a4aab2adbe238c682",
    "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
    "linq": "context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Highschoolers, joined => joined.T1.FriendId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Name == \"Kyle\").Select(row => new { row.T3.Name }).ToList();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.90",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "3beea422203a7a551b89d1e48ee2a2ea8c5501f01e89e138b909eedb79e57776",
    "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
    "linq": "context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Kyle\").Count();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.63",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "9d39019cb346acdc27799b222b669c43907ebcf2096f531cf79c70eaeae698bf",
    "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "linq": "context.Highschoolers.Select(row => row.Id).Except(context.Friend.Select(row => row.StudentId)).ToList();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,71): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "234eb7d7ab5191f32c1410169f3fc742407bbfb5f3888afadf65300f475c9c74",
    "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
    "linq": "context.Highschoolers.Select(row => row.Name).Except(context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Select(row => row.T2.Name)).ToList();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,73): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.75",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "c8bc4f6488348a62e40d8aabb5af68db4e586f5472492226a42f84368f5f7713",
    "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "linq": "",
    "db_name": "network_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "fd91e13b50d0f7e110055400280b2f0222612ec902d96efc0380b5e7b61bf4c5",
    "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
    "linq": "",
    "db_name": "network_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d238db81d40679fb92f9a438e9f2735f4fcc129c358ecfbc1cc36efb4391040a",
    "sql": "SELECT student_id , count(*) FROM Likes GROUP BY student_id",
    "linq": "",
    "db_name": "network_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "89b317b8bba487ec0b4d6f606122e7e937087cf3f5b05ffc7a60ae059422f6fd",
    "sql": "SELECT T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
    "linq": "",
    "db_name": "network_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "548cb300cfd8734fc973fe6c99443b6ba89c2baeff3b84cef57af8f9c2e17651",
    "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "",
    "db_name": "network_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "e6fcd211797bb62383eec8473a5e4a3a36e687dbe92970c016772b700018d952",
    "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
    "linq": "",
    "db_name": "network_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "4d235b9ad63765f08ef071798efb65c49942c0b429f59ac3e933e94d3df1de94",
    "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
    "linq": "context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Grade > 5).GroupBy(row => new { row.T1.StudentId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.66",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "55178ac629580eb978f0019b38b4c155620edda45be66428d0875440628f903c",
    "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
    "linq": "",
    "db_name": "network_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "dac6b0d1463f89e4215bd2dce04255d1589988a19e54a472b6cf1261b0e88357",
    "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
    "linq": "context.Highschoolers.Where(row => context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Select(row => row.T1.StudentId).Contains(row.Id)).Select(row => row.Grade).Average();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,55): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.35",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "506aa88bcee5a462115f7e9e469d7e4b7d9702b6c6621107fe4cfed8b729ab8e",
    "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
    "linq": "context.Highschoolers.Where(row => !context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Select(row => row.T1.StudentId).Contains(row.Id)).Select(row => row.Grade).Min();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,56): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.68",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "58e2d814afea3e9b2357733bbd73ccbbf8b67f20e0bf3d32e3d45c75a79a5607",
    "sql": "SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'",
    "linq": "context.Ships.Where(row => row.DispositionOfShip == \"Captured\").Count();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "f49c34ad2f1db339924d00f5009b5683b80e7e96e7d6cb50fa2bc0ccd736f0ca",
    "sql": "SELECT name , tonnage FROM ship ORDER BY name DESC",
    "linq": "context.Ships.OrderByDescending(row => row.Name).Select(row => new { row.Name, row.Tonnage }).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "1411febafc299f1df14da9b170d063bd1a3089ec91c195f508d989041d0099bc",
    "sql": "SELECT name , date FROM battle",
    "linq": "context.Battles.Select(row => new { row.Name, row.Date }).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "75187d7c403f6b9c439da2d5470f6a12decf753adbdbf17ed81bb6bff2e4320f",
    "sql": "SELECT max(killed) , min(killed) FROM death",
    "linq": "context.Deaths.GroupBy(row => 1).Select(group => new { MaxKilled = group.Select(row => row.Killed).Max(), MinKilled = group.Select(row => row.Killed).Min() }).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "156e72e10ca949ede22bd96a052da835bd96c650ef19fe29dac5ad70c79b6af6",
    "sql": "SELECT avg(injured) FROM death",
    "linq": "context.Deaths.Select(row => row.Injured).Average();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "14ae57f12366893b00e8e546a0f54804cff00cedae3e9ed24b1634589f7c1426",
    "sql": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
    "linq": "context.Deaths.Join(context.Ships, T1 => T1.CausedByShipId, t2 => t2.Id, (T1, t2) => new { T1, t2 }).Where(row => row.t2.Tonnage == \"t\").Select(row => new { row.T1.Killed, row.T1.Injured }).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "40dfa0acc95257c256fa99006791bfd168c1ca3dfab5688b6f706ada7e87f985",
    "sql": "SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
    "linq": "context.Battles.Where(row => row.BulgarianCommander != \"Boril\").Select(row => new { row.Name, row.Result }).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "317b269c114c7db3ff284adfd8372859bb436e23b9b87f95d1396a3c8d6ea91a",
    "sql": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
    "linq": "context.Battles.Join(context.Ships, T1 => T1.Id, T2 => T2.LostInBattle, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ShipType == \"Brig\").Select(row => new { row.T1.Id, row.T1.Name }).Distinct().ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "1222c33e0523820670deffa9ce66e6cc7663ebe297082bc1456f99dcfaf8edba",
    "sql": "SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed) > 10",
    "linq": "context.Battles.Join(context.Ships, T1 => T1.Id, T2 => T2.LostInBattle, (T1, T2) => new { T1, T2 }).Join(context.Deaths, joined => joined.T2.Id, T3 => T3.CausedByShipId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Sum(row => row.T3.Killed) > 10).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "f5ce865f2c1dd15b59f401d3012288eb19422db5b75270019444ff720e66b578",
    "sql": "SELECT T2.id , T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Deaths.Join(context.Ships, T1 => T1.CausedByShipId, t2 => t2.Id, (T1, t2) => new { T1, t2 }).GroupBy(row => new { row.t2.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().t2.Name }).Take(1).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "dc1dd1fdc99ea0a10d689ae026300669218c56e4e34aa33babd175f2be54a7a8",
    "sql": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
    "linq": "context.Battles.Where(row => row.BulgarianCommander == \"Kaloyan\" && row.LatinCommander == \"Baldwin I\").Select(row => new { row.Name }).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "b60d98e307fb578a4de43b41b346ba4b9eefef26598eccc03443f52ddd494ddc",
    "sql": "SELECT count(DISTINCT RESULT) FROM battle",
    "linq": "context.Battles.Select(row => row.Result).Distinct().Count();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "b8035058fe30b7f865e09c56297699a824a7d19a556f3feeea73278e7d42f03b",
    "sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );",
    "linq": "context.Battles.Where(row => !context.Ships.Where(row => row.Tonnage == \"225\").Select(row => row.LostInBattle).Contains(row.Id)).Count();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "da013593c025c95a0880b541b322dba92293dfc1b24f87a843146006917f0231",
    "sql": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
    "linq": "context.Battles.Join(context.Ships, T1 => T1.Id, T2 => T2.LostInBattle, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Lettice\").Select(row => new { row.T1.Name, row.T1.Date }).Intersect(context.Battles.Join(context.Ships, T1 => T1.Id, T2 => T2.LostInBattle, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"HMS Atalanta\").Select(row => new { row.T1.Name, row.T1.Date })).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "95ab44dabec21bfb7f28f00b0eee5641bbb1c23c9885637dc7c44020ab33b210",
    "sql": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'",
    "linq": "context.Battles.Select(row => new { row.Name, row.Result, row.BulgarianCommander }).Except(context.Battles.Join(context.Ships, T1 => T1.Id, T2 => T2.LostInBattle, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Location == \"English Channel\").Select(row => new { row.T1.Name, row.T1.Result, row.T1.BulgarianCommander })).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "538003edd1162c0ee9d454b36c0740620a35b24848c2130b7a2a7adb2587b8ef",
    "sql": "SELECT note FROM death WHERE note LIKE '%East%'",
    "linq": "context.Deaths.Where(row => EF.Functions.Like(row.Note, \"%East%\")).Select(row => new { row.Note }).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "051384bdb4cfacdfa6c5b78c4152c747fea0ec268e249954aae1db498d23bd77",
    "sql": "SELECT count(*) FROM singer",
    "linq": "context.Singers.Count();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "cc2f8400c8e21eb0f6e164e2609b9cd5b18f7575eb5cef4f2a4dab3616f29714",
    "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "linq": "context.Singers.OrderBy(row => row.NetWorthMillions).Select(row => new { row.Name }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "88f455b6834513890180aa86e0a31fc61c56ec83ada06f86cd6a5e85fb2a1658",
    "sql": "SELECT Birth_Year , Citizenship FROM singer",
    "linq": "context.Singers.Select(row => new { row.BirthYear, row.Citizenship }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "1e33984acb3e283d2d23fbae68b06eafb1cb6d7da8c8267f89f3568bc4cb96f9",
    "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "linq": "context.Singers.Where(row => row.Citizenship != \"France\").Select(row => new { row.Name }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d0d28f98180e9550e13419794f08c7aaf06dfb2e59835d037092a6b429ae3b9e",
    "sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
    "linq": "context.Singers.Where(row => row.BirthYear == 1948 || row.BirthYear == 1949).Select(row => new { row.Name }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "10c4447697ca3d5d8a13a3198bb41662d1a781d7c9f5c6f146f191998883ab02",
    "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "linq": "context.Singers.OrderByDescending(row => row.NetWorthMillions).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "c4ded3c6aac572a0c6bcb2428dd68312d8337847f9af59f6c07fef742e520cb5",
    "sql": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "linq": "context.Singers.GroupBy(row => new { row.Citizenship }).Select(group => new { group.Key.Citizenship, Count = group.Count() }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "8cb9e97cb56c7dcd1703bb6076205fc709b4bd616110d55eea22413ad278a253",
    "sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Singers.GroupBy(row => new { row.Citizenship }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Citizenship }).Take(1).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "bcb0fef4988a02ef4b2fbbfe4bdff0fe9d9b010ca5ae1d35634a91004221707e",
    "sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
    "linq": "context.Singers.GroupBy(row => new { row.Citizenship }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Citizenship }).Take(1).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "8ed3f3ec2a3a2a6c425caa6684f517d9ac959b8740aa354043ba64ec8adf2889",
    "sql": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "linq": "context.Singers.GroupBy(row => new { row.Citizenship }).Select(group => new { group.Key.Citizenship, MaxNetWorthMillions = group.Select(row => row.NetWorthMillions).Max() }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "2be98229219a8621967e7573d3a3b531ac303cb5e8812c348f25627bf53de88d",
    "sql": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
    "linq": "context.Singers.Join(context.Songs, T1 => T1.SingerId, T2 => T2.SingerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Title, row.T1.Name }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "5448be9db9af19af0e955f64d6c203ad8f4750f93ad967e258e81acfedf7df94",
    "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
    "linq": "context.Singers.Join(context.Songs, T1 => T1.SingerId, T2 => T2.SingerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Sales > 300000).Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "f3d79b68212e77ea1570441215bac88f368b7928b4576f5801dfccf4c90c0546",
    "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
    "linq": "context.Singers.Join(context.Songs, T1 => T1.SingerId, T2 => T2.SingerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Where(group => group.Count() > 1).Select(group => new { group.Key.Name }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "627fde0ff136bbfa0d6be4687a4835ca48cca17d7bbc860fe9737824040a44ce",
    "sql": "SELECT T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
    "linq": "context.Singers.Join(context.Songs, T1 => T1.SingerId, T2 => T2.SingerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Select(group => new { group.Key.Name, SumSales = group.Select(row => row.T2.Sales).Sum() }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d345f1c05b5ce76412e12c9465dbbea229c2b77728e57519e128a399c2c23c5c",
    "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
    "linq": "context.Singers.Where(row => !context.Songs.Select(row => row.SingerId).Contains(row.SingerId)).Select(row => new { row.Name }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "8ac068cecbcf1b1a8244a01b5c478a94611ea557163fd0b57a0ec3bbeb44adbf",
    "sql": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
    "linq": "context.Singers.Where(row => row.BirthYear < 1945).Select(row => row.Citizenship).Intersect(context.Singers.Where(row => row.BirthYear > 1955).Select(row => row.Citizenship)).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d9dc284919019c7ae0649547ca2d226fbb5d5380acd1c455e8371a112f31b38b",
    "sql": "SELECT Name FROM country WHERE IndepYear > 1950",
    "linq": "context.Countries.Where(row => row.IndepYear > 1950).Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "0d32105241d60837c05dfbf52cc819fb2aaab9804ae9c23247e786d3d25083e0",
    "sql": "SELECT count(*) FROM country WHERE GovernmentForm = \"Republic\"",
    "linq": "context.Countries.Where(row => row.GovernmentForm == \"Republic\").Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "32e19eae1c7a3e59863bdb0d7d4c4dee5f49d24a672809ce88c9378cc18b4194",
    "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
    "linq": "context.Countries.Where(row => row.Region == \"Caribbean\").Select(row => row.SurfaceArea).Sum();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "7c07cc4de9bcc747272158aa04dacc1c664294b0aaf74274533cca700b9a9aa6",
    "sql": "SELECT Continent FROM country WHERE Name = \"Anguilla\"",
    "linq": "context.Countries.Where(row => row.Name == \"Anguilla\").Select(row => new { row.Continent }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "e265eebd83c53dd7af1c9878df0cb579cf1c167eb5cbb0e40d5b31f05ff302c8",
    "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
    "linq": "context.Countries.Join(context.Cities, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Kabul\").Select(row => new { row.T1.Region }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "91a2ebcc88229e1b62e1da7fb8755a0884f5d36b87ad1ef196e6c6c4a14dcf21",
    "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Aruba\").OrderByDescending(row => row.T2.Percentage).Select(row => new { row.T2.Language }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "39baea7a52f49f10c8c35b7d84b7e74d757a83c3516e45033c21370a30f087b1",
    "sql": "SELECT Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
    "linq": "context.Countries.Where(row => row.Name == \"Brazil\").Select(row => new { row.Population, row.LifeExpectancy }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "4112b34b37dfeb113361a2963ee68fca6c48b727a4c5592069a07815545e25de",
    "sql": "SELECT Population , Region FROM country WHERE Name = \"Angola\"",
    "linq": "context.Countries.Where(row => row.Name == \"Angola\").Select(row => new { row.Population, row.Region }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "783f02901cef985ed9550fe894892e82fb30cb0becfc1eebf863c39dada2c1cc",
    "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
    "linq": "context.Countries.Where(row => row.Region == \"Central Africa\").Select(row => (double) row.LifeExpectancy).Average();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a47c4f619edcfd38a5803eb790efe721892b919eb82e46dd8832facf157fe8ea",
    "sql": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "linq": "context.Countries.Where(row => row.Continent == \"Asia\").OrderBy(row => row.LifeExpectancy).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d9f159203289d0096b87c56f517b66a9457b31dd8de3f1b5d2e5fec1ff88c424",
    "sql": "SELECT sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
    "linq": "context.Countries.Where(row => row.Continent == \"Asia\").GroupBy(row => 1).Select(group => new { SumPopulation = group.Select(row => row.Population).Sum(), MaxGnp = group.Select(row => row.Gnp).Max() }).ToList();",
    "db_name": "world_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "25576ffd70a9e85514635c8c8c7e02026ccf0b28aaa94b4007711a00d9984a60",
    "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
    "linq": "context.Countries.Where(row => row.Continent == \"Africa\" && row.GovernmentForm == \"Republic\").Select(row => (double) row.LifeExpectancy).Average();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "3340aa8945f1766afcadfb580f7d3dd2329b52d44c8d8d29a5f3d9ac8d244c4e",
    "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
    "linq": "context.Countries.Where(row => row.Continent == \"Asia\" || row.Continent == \"Europe\").Select(row => row.SurfaceArea).Sum();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "7d4ad9e1950ee9182c2f827389ab79a997cac9525380c8a6efe07f964d71ec2b",
    "sql": "SELECT sum(Population) FROM city WHERE District = \"Gelderland\"",
    "linq": "context.Cities.Where(row => row.District == \"Gelderland\").Select(row => row.Population).Sum();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "7f809ab034e0e52861dc3283d3777883d83e9c397764a0d4067bae38bd6c609d",
    "sql": "SELECT avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
    "linq": "context.Countries.Where(row => row.GovernmentForm == \"US Territory\").GroupBy(row => 1).Select(group => new { AverageGnp = group.Select(row => row.Gnp).Average(), SumPopulation = group.Select(row => row.Population).Sum() }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "09aa1aeb5b926d607bbf06c562441f38ccf0c1ff5d79142028989c1f8e301319",
    "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "linq": "context.Countrylanguages.Select(row => row.Language).Distinct().Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "abd7406913100ebe8e4ce11a2d1b08f16ba25635d67027db8c9e10e3c8914e29",
    "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
    "linq": "context.Countries.Where(row => row.Continent == \"Africa\").Select(row => row.GovernmentForm).Distinct().Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d5295a1008ae70de9caf054759d5e5e9dd49045c61f6574e44858a16420fbbcd",
    "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Aruba\").Select(row => row.T2.Language).Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "0b94436d2d5d229bf3f9287958ff2f09a3d4fa02fe89e86bbeede0fa2ed4c835",
    "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Afghanistan\" && row.T2.IsOfficial == \"T\").Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "3982112a1e7a15e350482c4152f3659c8e2ffdb626dbe5841e2196f80bbc34fe",
    "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Name }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "263e20ade0a0fcac4121506addb8c859520221c64402db99d3af27a2e0e0b455",
    "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Continent }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Continent }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "3b55c375632239f11ecd029d250f3b690caabd532b1796cc8a8be1c806cef619",
    "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\").Select(row => row.T1.Name).Intersect(context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"Dutch\").Select(row => row.T1.Name)).Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "021972046547d44e9062656aaa475f0552731caeae602a7697bdc08110f36de9",
    "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\").Select(row => row.T1.Name).Intersect(context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"French\").Select(row => row.T1.Name)).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "1a1ab208c303f82f05c11ab6bc9ddc919dec137f97ad0705ec07a7b58d695eb0",
    "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\" && row.T2.IsOfficial == \"T\").Select(row => row.T1.Name).Intersect(context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"French\" && row.T2.IsOfficial == \"T\").Select(row => row.T1.Name)).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "be296b5514813d4c530a6e0f63ddc39b52eff560a0bb33337bf78c8254c35bf0",
    "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"Chinese\").Select(row => row.T1.Continent).Distinct().Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "45bb87e7f64bc4de3073b193e2e881de0032a49d6a3ae38fb5cb0a93870244fc",
    "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\" || row.T2.Language == \"Dutch\").Select(row => new { row.T1.Region }).Distinct().ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "0a57245883190540b82fde109307f7f47d50dc00f5c83fdbf9a6509e6c0a4204",
    "sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"english\" and isofficial = \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"dutch\" and isofficial = \"t\"",
    "linq": "context.Countries.Join(context.Countrylanguages, t1 => t1.Code, t2 => t2.CountryCode, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Language == \"english\" && row.t2.IsOfficial == \"t\").Select(row => row.t1.Name).Union(context.Countries.Join(context.Countrylanguages, t1 => t1.Code, t2 => t2.CountryCode, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Language == \"dutch\" && row.t2.IsOfficial == \"t\").Select(row => row.t1.Name)).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "03174eae1fe074eb96704c3253b2d022f9c26addc6cd98adbe6ac3624f04ac71",
    "sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND IsOfficial = \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\" AND IsOfficial = \"T\"",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\" && row.T2.IsOfficial == \"T\").Select(row => new { rowT1..Code, rowT1..Name, rowT1..Continent, rowT1..Region, rowT1..SurfaceArea, rowT1..IndepYear, rowT1..Population, rowT1..LifeExpectancy, rowT1..Gnp, rowT1..Gnpold, rowT1..LocalName, rowT1..GovernmentForm, rowT1..HeadOfState, rowT1..Capital, rowT1..Code2, rowT2..CountryCode, rowT2..Language, rowT2..IsOfficial, rowT2..Percentage }).Union(context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"Dutch\" && row.T2.IsOfficial == \"T\").Select(row => new { rowT1..Code, rowT1..Name, rowT1..Continent, rowT1..Region, rowT1..SurfaceArea, rowT1..IndepYear, rowT1..Population, rowT1..LifeExpectancy, rowT1..Gnp, rowT1..Gnpold, rowT1..LocalName, rowT1..GovernmentForm, rowT1..HeadOfState, rowT1..Capital, rowT1..Code2, rowT2..CountryCode, rowT2..Language, rowT2..IsOfficial, rowT2..Percentage })).ToList();",
    "db_name": "world_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,1080): error CS0103: The name 'Percentage' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    114 Error(s)\n\nTime Elapsed 00:00:01.31",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "cf16be68b2a6e635895a81a9caac1878fc810c00bc2bf56ca2a1287d868daecb",
    "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Continent == \"Asia\").GroupBy(row => new { row.T2.Language }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Language }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "07a7fe0930b4f9dfecf083190c2c923302b168b98d4487bf8a2c4fb4752000ed",
    "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.GovernmentForm == \"Republic\").GroupBy(row => new { row.T2.Language }).Where(group => group.Count() == 1).Select(group => new { group.Key.Language }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "e8b21dc34a4d8545e34463580df1e8936d42a0f8ec48bd150244405a17a477f9",
    "sql": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "linq": "context.Cities.Join(context.Countrylanguages, T1 => T1.CountryCode, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\").OrderByDescending(row => row.T1.Population).Select(row => new { row.T1.Name, row.T1.Population }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "dd39987cca45c7c01ee605cf0f1df2be218038f40fb8b4d8975dbd27f343b144",
    "sql": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "linq": "context.Countries.Where(row => row.Continent == \"Asia\").OrderByDescending(row => row.SurfaceArea).Select(row => new { row.Name, row.Population, row.LifeExpectancy }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "178961869ae60ccf1de35187fc7db8b1a04ad96f79f2069fdba67f2879f0a63f",
    "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
    "linq": "context.Countries.Where(row => !context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\" && row.T2.IsOfficial == \"T\").Select(row => row.T1.Name).Contains(row.Name)).Select(row => (double) row.LifeExpectancy).Average();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "e63a52a74b5d73badd07afd559081d131e4fdc9627b83c1e887fa18d23d5f2df",
    "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
    "linq": "context.Countries.Where(row => !context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\").Select(row => row.T1.Name).Contains(row.Name)).Select(row => row.Population).Sum();",
    "db_name": "world_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "ae71904a96ec50789acbf50314bc1b37307d778d105b03cc568fea13a6978ede",
    "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.HeadOfState == \"Beatrix\" && row.T2.IsOfficial == \"T\").Select(row => new { row.T2.Language }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "7e537952acb3902ca9615be5397119d25a707708ffabd11c37242b7e77b6c48e",
    "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.IndepYear < 1930 && row.T2.IsOfficial == \"T\").Select(row => row.T2.Language).Distinct().Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d2563037f025ec78ee8a9709ae514fd09e3380397f4e5ef6acfa4a738941841a",
    "sql": "SELECT Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\")",
    "linq": "context.Countries.Where(row => row.SurfaceArea > context.Countries.Where(row => row.Continent == \"Europe\").Select(row => row.SurfaceArea).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d5c267be22c05ad2101ef20c8895d700e8b7c8e9699a7c42b35f784bb100e55e",
    "sql": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT max(population) FROM country WHERE Continent = \"Asia\")",
    "linq": "context.Countries.Where(row => row.Continent == \"Africa\" && row.Population < context.Countries.Where(row => row.Continent == \"Asia\").Select(row => row.Population).Max()).Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "05b723577b1e052b5fe4118eb66ff8dbf1246cdcb9d6cc0119f0ff0101778e2d",
    "sql": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT min(population) FROM country WHERE Continent = \"Asia\")",
    "linq": "context.Countries.Where(row => row.Continent == \"Africa\" && row.Population < context.Countries.Where(row => row.Continent == \"Asia\").Select(row => row.Population).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "961999bd0fe83857fc677270ad34f6f1172f0ca4fc29e2e2c76cfc5de04adfb6",
    "sql": "SELECT Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT max(population) FROM country WHERE Continent = \"Africa\")",
    "linq": "context.Countries.Where(row => row.Continent == \"Asia\" && row.Population > context.Countries.Where(row => row.Continent == \"Africa\").Select(row => row.Population).Max()).Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "ad4e71d351addacb2debdf19d83d079b95201a82c2cea564dbdc8396661b03d5",
    "sql": "SELECT Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT min(population) FROM country WHERE Continent = \"Africa\")",
    "linq": "context.Countries.Where(row => row.Continent == \"Asia\" && row.Population > context.Countries.Where(row => row.Continent == \"Africa\").Select(row => row.Population).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "914d1fea5e0a5aeba7e2642c39d62e8fb8f9229b82f0496632b7a300fedf859d",
    "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
    "linq": "context.Countrylanguages.Select(row => row.CountryCode).Except(context.Countrylanguages.Where(row => row.Language == \"English\").Select(row => row.CountryCode)).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "59b13d82cbd416d649318b3d81d40767cfc02d35d3b89058903f22d903707b7c",
    "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "linq": "context.Countrylanguages.Where(row => row.Language != \"English\").Select(row => new { row.CountryCode }).Distinct().ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "90f30f286864247688ffd9806d8261433610a84fbcc577ecb2d532ba4e679030",
    "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
    "linq": "context.Countries.Where(row => row.GovernmentForm != \"Republic\").Select(row => row.Code).Except(context.Countrylanguages.Where(row => row.Language == \"English\").Select(row => row.CountryCode)).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "8eb0851ff076ec403abeeeae4da9350278f907802f6bade686ace6ab7909f896",
    "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
    "linq": "context.Countries.Join(context.Cities, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Continent == \"Europe\" && !context.Countries.Join(context.Countrylanguages, T3 => T3.Code, T4 => T4.CountryCode, (T3, T4) => new { T3, T4 }).Where(row => row.T4.IsOfficial == \"T\" && row.T4.Language == \"English\").Select(row => row.T3.Name).Contains(row.T1.Name)).Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "663b6b2b1ff9b6dc8c6595d4b7b960f7e547b919c6c2f709444be4355017963b",
    "sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 't' and t2.language = 'chinese' and t1.continent = \"asia\"",
    "linq": "context.Countries.Join(context.Countrylanguages, t1 => t1.Code, t2 => t2.CountryCode, (t1, t2) => new { t1, t2 }).Join(context.Cities, joined => joined.t1.Code, t3 => t3.CountryCode, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.IsOfficial == \"t\" && row.t2.Language == \"chinese\" && row.t1.Continent == \"asia\").Select(row => new { row.t3.Name }).Distinct().ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "67c49648db6777c46022e34cf051ee9afae081d6f04836f72329e137fc738c2a",
    "sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = \"Asia\"",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Join(context.Cities, joined => joined.T1.Code, T3 => T3.CountryCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.IsOfficial == \"T\" && row.T2.Language == \"Chinese\" && row.T1.Continent == \"Asia\").Select(row => new { row.T3.Name }).Distinct().ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "041d019a60dbefe86d84517e8bad858ab96ff74feb74a1ac114073ad13b2c60e",
    "sql": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
    "linq": "context.Countries.OrderBy(row => row.Population).Select(row => new { row.Name, row.SurfaceArea, row.IndepYear }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "e85d060d27d548d8075b11d327a4b983232d9f805381a3648e143fe3058856e2",
    "sql": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "linq": "context.Countries.OrderByDescending(row => row.SurfaceArea).Select(row => new { row.Name, row.Population, row.HeadOfState }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "53fa37e37d4f90c745a616dd765bfc0049409e9b5a48e56fefe3a63acba060a8",
    "sql": "SELECT COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
    "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Where(group => group.Count() > 2).Select(group => new { CountLanguage = group.Select(row => row.T2.Language).Count(), group.Key.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "9fdb1bcdbcd973e225585519d042bbd5b97df47ba784d7fd5e99bf08cdaa7317",
    "sql": "SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
    "linq": "context.Cities.Where(row => row.Population > context.Cities.Select(row => row.Population).Average()).GroupBy(row => new { row.District }).Select(group => new { Count = group.Count(), group.Key.District }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "6dcee331ae79a78bb69300de0cd353259a0c36424435297f00e5de10ac5c6b00",
    "sql": "SELECT sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
    "linq": "context.Countries.GroupBy(row => new { row.GovernmentForm }).Where(group => group.Average(row => row.LifeExpectancy) > 72).Select(group => new { SumPopulation = group.Select(row => row.Population).Sum(), group.Key.GovernmentForm }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "6dcd7cc5201397bbcba986e2b8179be53749c51a9b6b55edeb5cd1539a437379",
    "sql": "SELECT sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
    "linq": "context.Countries.GroupBy(row => new { row.Continent }).Select(group => new { SumPopulation = group.Select(row => row.Population).Sum(), AverageLifeExpectancy = group.Select(row => row.LifeExpectancy).Average(), group.Key.Continent }).Where(group => group.AverageLifeExpectancy < 72).ToList();",
    "db_name": "world_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "c3b2645b50aea09550800713c39585192b4f6dada8b75ad673480d7d82461a6c",
    "sql": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "linq": "context.Countries.OrderByDescending(row => row.SurfaceArea).Select(row => new { row.Name, row.SurfaceArea }).Take(5).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "e3aa65ce90c67392affa7ba5d02b01453a9d7cf3e64332299bb970035130cb85",
    "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "linq": "context.Countries.OrderByDescending(row => row.Population).Select(row => new { row.Name }).Take(3).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "370057547326b5327742d5b73bfc86989578744005605323016b4b1ce273dceb",
    "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "linq": "context.Countries.OrderBy(row => row.Population).Select(row => new { row.Name }).Take(3).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "8a119b68fc2cde6cca9255a433ddd46730eb4d72a7ed1534e54b0a188533ad3f",
    "sql": "SELECT count(*) FROM country WHERE continent = \"Asia\"",
    "linq": "context.Countries.Where(row => row.Continent == \"Asia\").Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "3c901e947f1d7961151f7430619c73d2d0182eb8b2b433578ba4b3b342699e60",
    "sql": "SELECT Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
    "linq": "context.Countries.Where(row => row.Continent == \"Europe\" && row.Population == \"80000\").Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,72): error CS0019: Operator '==' cannot be applied to operands of type 'int' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.40",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "613537b637c9c661312945ecafa407c83f1606aac07364ac32244edbec8c6826",
    "sql": "select sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
    "linq": "context.Countries.Where(row => row.Continent == \"north america\" && row.SurfaceArea > 3000).GroupBy(row => 1).Select(group => new { SumPopulation = group.Select(row => row.Population).Sum(), AverageSurfaceArea = group.Select(row => row.SurfaceArea).Average() }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "02555a4cef88db84789fe367bd1c3d4f946ecb6934bd18e6f5ef9b42876747ce",
    "sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
    "linq": "context.Cities.Where(row => row.Population >= 160000 && row.Population <= 900000).Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "77582d98768d0644ae1933e4677b0ea51af40fd84fc7a1c540a281f3013861ef",
    "sql": "select name from city where population between 160000 and 900000",
    "linq": "context.Cities.Where(row => row.Population >= 160000 && row.Population <= 900000).Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "5c53219b26fa5dff7ce4d0c476bea9424b8f48b9218c8130c8eecf9b9cca3db8",
    "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Countrylanguages.GroupBy(row => new { row.Language }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Language }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "6e9aa6847b42beeff3a39555e2ae4c99d4c1fb5386805bdc98d561c66fd71a37",
    "sql": "SELECT LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "linq": "context.Countrylanguages.GroupBy(row => new { row.CountryCode }).Select(group => new { group.First().Language, group.Key.CountryCode, MaxPercentage = group.Select(row => row.Percentage).Max() }).ToList();",
    "db_name": "world_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: Papiamento, 1: ABW, 2: 76,7}, {0: Pashto, 1: AFG, 2: 52,4}, {0: Ovimbundu, 1: AGO, 2: 37,2}, {0: English, 1: AIA, 2: 0}, {0: Albaniana, 1: ALB, 2: 97,9}, {0: Spanish, 1: AND, 2: 44,6}, {0: Papiamento, 1: ANT, 2: 86,2}, {0: Arabic, 1: ARE, 2: 42}, {0: Spanish, 1: ARG, 2: 96,8}, {0: Armenian, 1: ARM, 2: 93,4}, {0: Samoan, 1: ASM, 2: 90,6}, {0: Creole English, 1: ATG, 2: 95,7}, {0: English, 1: AUS, 2: 81,2}, {0: German, 1: AUT, 2: 92}, {0: Azerbaijani, 1: AZE, 2: 89}, {0: Kirundi, 1: BDI, 2: 98,1}, {0: Dutch, 1: BEL, 2: 59,2}, {0: Fon, 1: BEN, 2: 39,8}, {0: Mossi, 1: BFA, 2: 50,2}, {0: Bengali, 1: BGD, 2: 97,7}, {0: Bulgariana, 1: BGR, 2: 83,2}, {0: Arabic, 1: BHR, 2: 67,7}, {0: Creole English, 1: BHS, 2: 89,7}, {0: Serbo-Croatian, 1: BIH, 2: 99,2}, {0: Belorussian, 1: BLR, 2: 65,6}, {0: English, 1: BLZ, 2: 50,8}, {0: English, 1: BMU, 2: 100}, {0: Spanish, 1: BOL, 2: 87,7}, {0: Portuguese, 1: BRA, 2: 97,5}, {0: Bajan, 1: BRB, 2: 95,1}, {0: Malay, 1: BRN, 2: 45,5}, {0: Dzongkha, 1: BTN, 2: 50}, {0: Tswana, 1: BWA, 2: 75,5}, {0: Gbaya, 1: CAF, 2: 23,8}, {0: English, 1: CAN, 2: 60,4}, {0: English, 1: CCK, 2: 0}, {0: German, 1: CHE, 2: 63,6}, {0: Spanish, 1: CHL, 2: 89,7}, {0: Chinese, 1: CHN, 2: 92}, {0: Akan, 1: CIV, 2: 30}, {0: Fang, 1: CMR, 2: 19,7}, {0: Luba, 1: COD, 2: 18}, {0: Kongo, 1: COG, 2: 51,5}, {0: English, 1: COK, 2: 0}, {0: Spanish, 1: COL, 2: 99}, {0: Comorian, 1: COM, 2: 75}, {0: Crioulo, 1: CPV, 2: 100}, {0: Spanish, 1: CRI, 2: 97,5}, {0: Spanish, 1: CUB, 2: 100}, {0: Chinese, 1: CXR, 2: 0}, {0: English, 1: CYM, 2: 0}, {0: Greek, 1: CYP, 2: 74,1}, {0: Czech, 1: CZE, 2: 81,2}, {0: German, 1: DEU, 2: 91,3}, {0: Somali, 1: DJI, 2: 43,9}, {0: Creole English, 1: DMA, 2: 100}, {0: Danish, 1: DNK, 2: 93,5}, {0: Spanish, 1: DOM, 2: 98}, {0: Arabic, 1: DZA, 2: 86}, {0: Spanish, 1: ECU, 2: 93}, {0: Arabic, 1: EGY, 2: 98,8}, {0: Tigrinja, 1: ERI, 2: 49,1}, {0: Arabic, 1: ESH, 2: 100}, {0: Spanish, 1: ESP, 2: 74,4}, {0: Estonian, 1: EST, 2: 65,3}, {0: Oromo, 1: ETH, 2: 31}, {0: Finnish, 1: FIN, 2: 92,7}, {0: Fijian, 1: FJI, 2: 50,8}, {0: English, 1: FLK, 2: 0}, {0: French, 1: FRA, 2: 93,6}, {0: Faroese, 1: FRO, 2: 100}, {0: Trukese, 1: FSM, 2: 41,6}, {0: Fang, 1: GAB, 2: 35,8}, {0: English, 1: GBR, 2: 97,3}, {0: Georgiana, 1: GEO, 2: 71,7}, {0: Akan, 1: GHA, 2: 52,4}, {0: English, 1: GIB, 2: 88,9}, {0: Ful, 1: GIN, 2: 38,6}, {0: Creole French, 1: GLP, 2: 95}, {0: Malinke, 1: GMB, 2: 34,1}, {0: Crioulo, 1: GNB, 2: 36,4}, {0: Fang, 1: GNQ, 2: 84,8}, {0: Greek, 1: GRC, 2: 98,5}, {0: Creole English, 1: GRD, 2: 100}, {0: Greenlandic, 1: GRL, 2: 87,5}, {0: Spanish, 1: GTM, 2: 64,7}, {0: Creole French, 1: GUF, 2: 94,3}, {0: English, 1: GUM, 2: 37,5}, {0: Creole English, 1: GUY, 2: 96,4}, {0: Canton Chinese, 1: HKG, 2: 88,7}, {0: Spanish, 1: HND, 2: 97,2}, {0: Serbo-Croatian, 1: HRV, 2: 95,9}, {0: Haiti Creole, 1: HTI, 2: 100}, {0: Hungarian, 1: HUN, 2: 98,5}, {0: Javanese, 1: IDN, 2: 39,4}, {0: Hindi, 1: IND, 2: 39,9}, {0: English, 1: IRL, 2: 98,4}, {0: Persian, 1: IRN, 2: 45,7}, {0: Arabic, 1: IRQ, 2: 77,2}, {0: Icelandic, 1: ISL, 2: 95,7}, {0: Hebrew, 1: ISR, 2: 63,1}, {0: Italian, 1: ITA, 2: 94,1}, {0: Creole English, 1: JAM, 2: 94,2}, {0: Arabic, 1: JOR, 2: 97,9}, {0: Japanese, 1: JPN, 2: 99,1}, {0: Kazakh, 1: KAZ, 2: 46}, {0: Kikuyu, 1: KEN, 2: 20,9}, {0: Kirgiz, 1: KGZ, 2: 59,7}, {0: Khmer, 1: KHM, 2: 88,6}, {0: Kiribati, 1: KIR, 2: 98,9}, {0: Creole English, 1: KNA, 2: 100}, {0: Korean, 1: KOR, 2: 99,9}, {0: Arabic, 1: KWT, 2: 78,1}, {0: Lao, 1: LAO, 2: 67,2}, {0: Arabic, 1: LBN, 2: 93}, {0: Kpelle, 1: LBR, 2: 19,5}, {0: Arabic, 1: LBY, 2: 96}, {0: Creole French, 1: LCA, 2: 80}, {0: German, 1: LIE, 2: 89}, {0: Singali, 1: LKA, 2: 60,3}, {0: Sotho, 1: LSO, 2: 85}, {0: Lithuanian, 1: LTU, 2: 81,6}, {0: Luxembourgish, 1: LUX, 2: 64,4}, {0: Latvian, 1: LVA, 2: 55,1}, {0: Canton Chinese, 1: MAC, 2: 85,6}, {0: Arabic, 1: MAR, 2: 65}, {0: French, 1: MCO, 2: 41,9}, {0: Romanian, 1: MDA, 2: 61,9}, {0: Malagasy, 1: MDG, 2: 98,9}, {0: Dhivehi, 1: MDV, 2: 100}, {0: Spanish, 1: MEX, 2: 92,1}, {0: Marshallese, 1: MHL, 2: 96,8}, {0: Macedonian, 1: MKD, 2: 66,5}, {0: Bambara, 1: MLI, 2: 31,8}, {0: Maltese, 1: MLT, 2: 95,8}, {0: Burmese, 1: MMR, 2: 69}, {0: Mongolian, 1: MNG, 2: 78,8}, {0: Philippene Languages, 1: MNP, 2: 34,1}, {0: Makua, 1: MOZ, 2: 27,8}, {0: Hassaniya, 1: MRT, 2: 81,7}, {0: English, 1: MSR, 2: 0}, {0: Creole French, 1: MTQ, 2: 96,6}, {0: Creole French, 1: MUS, 2: 70,6}, {0: Chichewa, 1: MWI, 2: 58,3}, {0: Malay, 1: MYS, 2: 58,4}, {0: Mahoré, 1: MYT, 2: 41,9}, {0: Ovambo, 1: NAM, 2: 50,7}, {0: Malenasian Languages, 1: NCL, 2: 45,4}, {0: Hausa, 1: NER, 2: 53,1}, {0: English, 1: NFK, 2: 0}, {0: Joruba, 1: NGA, 2: 21,4}, {0: Spanish, 1: NIC, 2: 97,6}, {0: English, 1: NIU, 2: 0}, {0: Dutch, 1: NLD, 2: 95,6}, {0: Norwegian, 1: NOR, 2: 96,6}, {0: Nepali, 1: NPL, 2: 50,4}, {0: Nauru, 1: NRU, 2: 57,5}, {0: English, 1: NZL, 2: 87}, {0: Arabic, 1: OMN, 2: 76,7}, {0: Punjabi, 1: PAK, 2: 48,2}, {0: Spanish, 1: PAN, 2: 76,8}, {0: Pitcairnese, 1: PCN, 2: 0}, {0: Spanish, 1: PER, 2: 79,8}, {0: Pilipino, 1: PHL, 2: 29,3}, {0: Palau, 1: PLW, 2: 82,2}, {0: Papuan Languages, 1: PNG, 2: 78,1}, {0: Polish, 1: POL, 2: 97,6}, {0: Spanish, 1: PRI, 2: 51,3}, {0: Korean, 1: PRK, 2: 99,9}, {0: Portuguese, 1: PRT, 2: 99}, {0: Spanish, 1: PRY, 2: 55,1}, {0: Arabic, 1: PSE, 2: 95,9}, {0: Tahitian, 1: PYF, 2: 46,4}, {0: Arabic, 1: QAT, 2: 40,7}, {0: Creole French, 1: REU, 2: 91,5}, {0: Romanian, 1: ROM, 2: 90,7}, {0: Russian, 1: RUS, 2: 86,6}, {0: Rwanda, 1: RWA, 2: 100}, {0: Arabic, 1: SAU, 2: 95}, {0: Arabic, 1: SDN, 2: 49,4}, {0: Wolof, 1: SEN, 2: 48,1}, {0: Chinese, 1: SGP, 2: 77,1}, {0: English, 1: SHN, 2: 0}, {0: Norwegian, 1: SJM, 2: 0}, {0: Malenasian Languages, 1: SLB, 2: 85,6}, {0: Mende, 1: SLE, 2: 34,8}, {0: Spanish, 1: SLV, 2: 100}, {0: Italian, 1: SMR, 2: 100}, {0: Somali, 1: SOM, 2: 98,3}, {0: French, 1: SPM, 2: 0}, {0: Crioulo, 1: STP, 2: 86,3}, {0: Sranantonga, 1: SUR, 2: 81}, {0: Slovak, 1: SVK, 2: 85,6}, {0: Slovene, 1: SVN, 2: 87,9}, {0: Swedish, 1: SWE, 2: 89,5}, {0: Swazi, 1: SWZ, 2: 89,9}, {0: Seselwa, 1: SYC, 2: 91,3}, {0: Arabic, 1: SYR, 2: 90}, {0: English, 1: TCA, 2: 0}, {0: Sara, 1: TCD, 2: 27,7}, {0: Ewe, 1: TGO, 2: 23,2}, {0: Thai, 1: THA, 2: 52,6}, {0: Tadzhik, 1: TJK, 2: 62,2}, {0: English, 1: TKL, 2: 0}, {0: Turkmenian, 1: TKM, 2: 76,7}, {0: Portuguese, 1: TMP, 2: 0}, {0: Tongan, 1: TON, 2: 98,3}, {0: English, 1: TTO, 2: 93,5}, {0: Arabic, 1: TUN, 2: 69,9}, {0: Turkish, 1: TUR, 2: 87,6}, {0: Tuvalu, 1: TUV, 2: 92,5}, {0: Min, 1: TWN, 2: 66,7}, {0: Nyamwesi, 1: TZA, 2: 21,1}, {0: Ganda, 1: UGA, 2: 18,1}, {0: Ukrainian, 1: UKR, 2: 64,7}, {0: English, 1: UMI, 2: 0}, {0: Spanish, 1: URY, 2: 95,7}, {0: English, 1: USA, 2: 86,2}, {0: Uzbek, 1: UZB, 2: 72,6}, {0: Italian, 1: VAT, 2: 0}, {0: Creole English, 1: VCT, 2: 99,1}, {0: Spanish, 1: VEN, 2: 96,9}, {0: English, 1: VGB, 2: 0}, {0: English, 1: VIR, 2: 81,7}, {0: Vietnamese, 1: VNM, 2: 86,8}, {0: Bislama, 1: VUT, 2: 56,6}, {0: Futuna, 1: WLF, 2: 0}, {0: Samoan-English, 1: WSM, 2: 52}, {0: Arabic, 1: YEM, 2: 99,6}, {0: Serbo-Croatian, 1: YUG, 2: 75,2}, {0: Zulu, 1: ZAF, 2: 22,7}, {0: Bemba, 1: ZMB, 2: 29,7}, {0: Shona, 1: ZWE, 2: 72,1}]\", linq_results: \"[{0: Dutch, 1: ABW, 2: 76,7}, {0: Balochi, 1: AFG, 2: 52,4}, {0: Ambo, 1: AGO, 2: 37,2}, {0: English, 1: AIA, 2: 0}, {0: Albaniana, 1: ALB, 2: 97,9}, {0: Catalan, 1: AND, 2: 44,6}, {0: Dutch, 1: ANT, 2: 86,2}, {0: Arabic, 1: ARE, 2: 42}, {0: Indian Languages, 1: ARG, 2: 96,8}, {0: Armenian, 1: ARM, 2: 93,4}, {0: English, 1: ASM, 2: 90,6}, {0: Creole English, 1: ATG, 2: 95,7}, {0: Arabic, 1: AUS, 2: 81,2}, {0: Czech, 1: AUT, 2: 92}, {0: Armenian, 1: AZE, 2: 89}, {0: French, 1: BDI, 2: 98,1}, {0: Arabic, 1: BEL, 2: 59,2}, {0: Adja, 1: BEN, 2: 39,8}, {0: Busansi, 1: BFA, 2: 50,2}, {0: Bengali, 1: BGD, 2: 97,7}, {0: Bulgariana, 1: BGR, 2: 83,2}, {0: Arabic, 1: BHR, 2: 67,7}, {0: Creole English, 1: BHS, 2: 89,7}, {0: Serbo-Croatian, 1: BIH, 2: 99,2}, {0: Belorussian, 1: BLR, 2: 65,6}, {0: English, 1: BLZ, 2: 50,8}, {0: English, 1: BMU, 2: 100}, {0: Aimará, 1: BOL, 2: 87,7}, {0: German, 1: BRA, 2: 97,5}, {0: Bajan, 1: BRB, 2: 95,1}, {0: Chinese, 1: BRN, 2: 45,5}, {0: Asami, 1: BTN, 2: 50}, {0: Khoekhoe, 1: BWA, 2: 75,5}, {0: Banda, 1: CAF, 2: 23,8}, {0: Chinese, 1: CAN, 2: 60,4}, {0: English, 1: CCK, 2: 0}, {0: French, 1: CHE, 2: 63,6}, {0: Aimará, 1: CHL, 2: 89,7}, {0: Chinese, 1: CHN, 2: 92}, {0: Akan, 1: CIV, 2: 30}, {0: Bamileke-bamum, 1: CMR, 2: 19,7}, {0: Boa, 1: COD, 2: 18}, {0: Kongo, 1: COG, 2: 51,5}, {0: English, 1: COK, 2: 0}, {0: Arawakan, 1: COL, 2: 99}, {0: Comorian, 1: COM, 2: 75}, {0: Crioulo, 1: CPV, 2: 100}, {0: Chibcha, 1: CRI, 2: 97,5}, {0: Spanish, 1: CUB, 2: 100}, {0: Chinese, 1: CXR, 2: 0}, {0: English, 1: CYM, 2: 0}, {0: Greek, 1: CYP, 2: 74,1}, {0: Czech, 1: CZE, 2: 81,2}, {0: German, 1: DEU, 2: 91,3}, {0: Afar, 1: DJI, 2: 43,9}, {0: Creole English, 1: DMA, 2: 100}, {0: Arabic, 1: DNK, 2: 93,5}, {0: Creole French, 1: DOM, 2: 98}, {0: Arabic, 1: DZA, 2: 86}, {0: Ketšua, 1: ECU, 2: 93}, {0: Arabic, 1: EGY, 2: 98,8}, {0: Afar, 1: ERI, 2: 49,1}, {0: Arabic, 1: ESH, 2: 100}, {0: Basque, 1: ESP, 2: 74,4}, {0: Belorussian, 1: EST, 2: 65,3}, {0: Amhara, 1: ETH, 2: 31}, {0: Estonian, 1: FIN, 2: 92,7}, {0: Fijian, 1: FJI, 2: 50,8}, {0: English, 1: FLK, 2: 0}, {0: Arabic, 1: FRA, 2: 93,6}, {0: Danish, 1: FRO, 2: 100}, {0: Kosrean, 1: FSM, 2: 41,6}, {0: Fang, 1: GAB, 2: 35,8}, {0: English, 1: GBR, 2: 97,3}, {0: Abhyasi, 1: GEO, 2: 71,7}, {0: Akan, 1: GHA, 2: 52,4}, {0: Arabic, 1: GIB, 2: 88,9}, {0: Ful, 1: GIN, 2: 38,6}, {0: Creole French, 1: GLP, 2: 95}, {0: Diola, 1: GMB, 2: 34,1}, {0: Balante, 1: GNB, 2: 36,4}, {0: Bubi, 1: GNQ, 2: 84,8}, {0: Greek, 1: GRC, 2: 98,5}, {0: Creole English, 1: GRD, 2: 100}, {0: Danish, 1: GRL, 2: 87,5}, {0: Cakchiquel, 1: GTM, 2: 64,7}, {0: Creole French, 1: GUF, 2: 94,3}, {0: Chamorro, 1: GUM, 2: 37,5}, {0: Arawakan, 1: GUY, 2: 96,4}, {0: Canton Chinese, 1: HKG, 2: 88,7}, {0: Creole English, 1: HND, 2: 97,2}, {0: Serbo-Croatian, 1: HRV, 2: 95,9}, {0: French, 1: HTI, 2: 100}, {0: German, 1: HUN, 2: 98,5}, {0: Bali, 1: IDN, 2: 39,4}, {0: Asami, 1: IND, 2: 39,9}, {0: English, 1: IRL, 2: 98,4}, {0: Arabic, 1: IRN, 2: 45,7}, {0: Arabic, 1: IRQ, 2: 77,2}, {0: English, 1: ISL, 2: 95,7}, {0: Arabic, 1: ISR, 2: 63,1}, {0: Albaniana, 1: ITA, 2: 94,1}, {0: Creole English, 1: JAM, 2: 94,2}, {0: Arabic, 1: JOR, 2: 97,9}, {0: Ainu, 1: JPN, 2: 99,1}, {0: German, 1: KAZ, 2: 46}, {0: Gusii, 1: KEN, 2: 20,9}, {0: Kazakh, 1: KGZ, 2: 59,7}, {0: Chinese, 1: KHM, 2: 88,6}, {0: Kiribati, 1: KIR, 2: 98,9}, {0: Creole English, 1: KNA, 2: 100}, {0: Chinese, 1: KOR, 2: 99,9}, {0: Arabic, 1: KWT, 2: 78,1}, {0: Lao, 1: LAO, 2: 67,2}, {0: Arabic, 1: LBN, 2: 93}, {0: Bassa, 1: LBR, 2: 19,5}, {0: Arabic, 1: LBY, 2: 96}, {0: Creole French, 1: LCA, 2: 80}, {0: German, 1: LIE, 2: 89}, {0: Mixed Languages, 1: LKA, 2: 60,3}, {0: English, 1: LSO, 2: 85}, {0: Belorussian, 1: LTU, 2: 81,6}, {0: French, 1: LUX, 2: 64,4}, {0: Belorussian, 1: LVA, 2: 55,1}, {0: Canton Chinese, 1: MAC, 2: 85,6}, {0: Arabic, 1: MAR, 2: 65}, {0: English, 1: MCO, 2: 41,9}, {0: Bulgariana, 1: MDA, 2: 61,9}, {0: French, 1: MDG, 2: 98,9}, {0: Dhivehi, 1: MDV, 2: 100}, {0: Mixtec, 1: MEX, 2: 92,1}, {0: English, 1: MHL, 2: 96,8}, {0: Albaniana, 1: MKD, 2: 66,5}, {0: Bambara, 1: MLI, 2: 31,8}, {0: English, 1: MLT, 2: 95,8}, {0: Burmese, 1: MMR, 2: 69}, {0: Bajad, 1: MNG, 2: 78,8}, {0: Carolinian, 1: MNP, 2: 34,1}, {0: Chuabo, 1: MOZ, 2: 27,8}, {0: Ful, 1: MRT, 2: 81,7}, {0: English, 1: MSR, 2: 0}, {0: Creole French, 1: MTQ, 2: 96,6}, {0: Bhojpuri, 1: MUS, 2: 70,6}, {0: Chichewa, 1: MWI, 2: 58,3}, {0: Chinese, 1: MYS, 2: 58,4}, {0: French, 1: MYT, 2: 41,9}, {0: Afrikaans, 1: NAM, 2: 50,7}, {0: French, 1: NCL, 2: 45,4}, {0: Ful, 1: NER, 2: 53,1}, {0: English, 1: NFK, 2: 0}, {0: Bura, 1: NGA, 2: 21,4}, {0: Creole English, 1: NIC, 2: 97,6}, {0: English, 1: NIU, 2: 0}, {0: Arabic, 1: NLD, 2: 95,6}, {0: Danish, 1: NOR, 2: 96,6}, {0: Bhojpuri, 1: NPL, 2: 50,4}, {0: Chinese, 1: NRU, 2: 57,5}, {0: English, 1: NZL, 2: 87}, {0: Arabic, 1: OMN, 2: 76,7}, {0: Balochi, 1: PAK, 2: 48,2}, {0: Arabic, 1: PAN, 2: 76,8}, {0: Pitcairnese, 1: PCN, 2: 0}, {0: Aimará, 1: PER, 2: 79,8}, {0: Bicol, 1: PHL, 2: 29,3}, {0: Chinese, 1: PLW, 2: 82,2}, {0: Malenasian Languages, 1: PNG, 2: 78,1}, {0: Belorussian, 1: POL, 2: 97,6}, {0: English, 1: PRI, 2: 51,3}, {0: Chinese, 1: PRK, 2: 99,9}, {0: Portuguese, 1: PRT, 2: 99}, {0: German, 1: PRY, 2: 55,1}, {0: Arabic, 1: PSE, 2: 95,9}, {0: Chinese, 1: PYF, 2: 46,4}, {0: Arabic, 1: QAT, 2: 40,7}, {0: Chinese, 1: REU, 2: 91,5}, {0: German, 1: ROM, 2: 90,7}, {0: Avarian, 1: RUS, 2: 86,6}, {0: French, 1: RWA, 2: 100}, {0: Arabic, 1: SAU, 2: 95}, {0: Arabic, 1: SDN, 2: 49,4}, {0: Diola, 1: SEN, 2: 48,1}, {0: Chinese, 1: SGP, 2: 77,1}, {0: English, 1: SHN, 2: 0}, {0: Norwegian, 1: SJM, 2: 0}, {0: Malenasian Languages, 1: SLB, 2: 85,6}, {0: Bullom-sherbro, 1: SLE, 2: 34,8}, {0: Nahua, 1: SLV, 2: 100}, {0: Italian, 1: SMR, 2: 100}, {0: Arabic, 1: SOM, 2: 98,3}, {0: French, 1: SPM, 2: 0}, {0: Crioulo, 1: STP, 2: 86,3}, {0: Hindi, 1: SUR, 2: 81}, {0: Czech and Moravian, 1: SVK, 2: 85,6}, {0: Hungarian, 1: SVN, 2: 87,9}, {0: Arabic, 1: SWE, 2: 89,5}, {0: Swazi, 1: SWZ, 2: 89,9}, {0: English, 1: SYC, 2: 91,3}, {0: Arabic, 1: SYR, 2: 90}, {0: English, 1: TCA, 2: 0}, {0: Arabic, 1: TCD, 2: 27,7}, {0: Ane, 1: TGO, 2: 23,2}, {0: Chinese, 1: THA, 2: 52,6}, {0: Russian, 1: TJK, 2: 62,2}, {0: English, 1: TKL, 2: 0}, {0: Kazakh, 1: TKM, 2: 76,7}, {0: Portuguese, 1: TMP, 2: 0}, {0: English, 1: TON, 2: 98,3}, {0: Creole English, 1: TTO, 2: 93,5}, {0: Arabic, 1: TUN, 2: 69,9}, {0: Arabic, 1: TUR, 2: 87,6}, {0: English, 1: TUV, 2: 92,5}, {0: Ami, 1: TWN, 2: 66,7}, {0: Chaga and Pare, 1: TZA, 2: 21,1}, {0: Acholi, 1: UGA, 2: 18,1}, {0: Belorussian, 1: UKR, 2: 64,7}, {0: English, 1: UMI, 2: 0}, {0: Spanish, 1: URY, 2: 95,7}, {0: Chinese, 1: USA, 2: 86,2}, {0: Karakalpak, 1: UZB, 2: 72,6}, {0: Italian, 1: VAT, 2: 0}, {0: Creole English, 1: VCT, 2: 99,1}, {0: Goajiro, 1: VEN, 2: 96,9}, {0: English, 1: VGB, 2: 0}, {0: English, 1: VIR, 2: 81,7}, {0: Chinese, 1: VNM, 2: 86,8}, {0: Bislama, 1: VUT, 2: 56,6}, {0: Futuna, 1: WLF, 2: 0}, {0: English, 1: WSM, 2: 52}, {0: Arabic, 1: YEM, 2: 99,6}, {0: Albaniana, 1: YUG, 2: 75,2}, {0: Afrikaans, 1: ZAF, 2: 22,7}, {0: Bemba, 1: ZMB, 2: 29,7}, {0: English, 1: ZWE, 2: 72,1}]\" }",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a6e353157fa562d3940b92f7eeed096f131e667c0904af4e86e24cfa7c60eb9c",
    "sql": "SELECT count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
    "linq": "context.Countrylanguages.Where(row => row.Language == \"Spanish\").GroupBy(row => new { row.CountryCode }).Select(group => new { Count = group.Count(), MaxPercentage = group.Select(row => row.Percentage).Max() }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "91ac8ecdfd489ee1be5ba8690a907665614d97eb057f837e2f5714c245d7248d",
    "sql": "SELECT CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
    "linq": "context.Countrylanguages.Where(row => row.Language == \"Spanish\").GroupBy(row => new { row.CountryCode }).Select(group => new { group.Key.CountryCode, MaxPercentage = group.Select(row => row.Percentage).Max() }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "311a603ea72b87d8089f8d2104df1f46c27ce7307b27765a9d1363f8c0e5791e",
    "sql": "SELECT count(*) FROM Other_Available_Features",
    "linq": "context.OtherAvailableFeatures.Count();",
    "db_name": "real_estate_properties",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "fb07365044818450a0fd4bf86197bd182da7fbaa32145cd00775acde44894832",
    "sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = \"AirCon\"",
    "linq": "context.OtherAvailableFeatures.Join(context.RefFeatureTypes, T1 => T1.FeatureTypeCode, T2 => T2.FeatureTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FeatureName == \"AirCon\").Select(row => new { row.T2.FeatureTypeName }).ToList();",
    "db_name": "real_estate_properties",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "7d42746df3766a66e4dc235c27dfa6ef9c186fbfae735dd5fb37c202cd559812",
    "sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
    "linq": "context.Properties.Join(context.RefPropertyTypes, T1 => T1.PropertyTypeCode, T2 => T2.PropertyTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PropertyTypeCode }).Select(group => new { group.First().T2.PropertyTypeDescription }).ToList();",
    "db_name": "real_estate_properties",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "b9ab0e0bab8708786e006f7c379b5cf78b421dc3aedff86550e912c4eb2ed525",
    "sql": "SELECT property_name FROM Properties WHERE property_type_code = \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code = \"Apartment\" AND room_count > 1",
    "linq": "context.Properties.Where(row => row.PropertyTypeCode == \"House\").Select(row => row.PropertyName).Union(context.Properties.Where(row => row.PropertyTypeCode == \"Apartment\" && row.RoomCount > 1).Select(row => row.PropertyName)).ToList();",
    "db_name": "real_estate_properties",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "edd02ade58bc10da95dd5988deec6ac4f9fbbe2f8bfda241360ac261b707cfa2",
    "sql": "SELECT line_1 , line_2 FROM addresses",
    "linq": "context.Addresses.Select(row => new { row.Line1, row.Line2 }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "b1023f83f55cd726a6bb46f9d5d0ba361e1502b05af7965f4fe63b7a7359c3b2",
    "sql": "SELECT count(*) FROM Courses",
    "linq": "context.Courses.Count();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "b76c70d5f135ed6894e396aeacb4a94456140239bfada248d6882c188c2d86c6",
    "sql": "SELECT course_description FROM Courses WHERE course_name = 'math'",
    "linq": "context.Courses.Where(row => row.CourseName == \"math\").Select(row => new { row.CourseDescription }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "848a973c8e028a158b2832e0cccde39a7be060c904fc98980b4fb3e4996440e6",
    "sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
    "linq": "context.Addresses.Where(row => row.City == \"Port Chelsea\").Select(row => new { row.ZipPostcode }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "724523041eda17134416f8e0a302c8152446ba190a088779d43757ffa249bc05",
    "sql": "SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.DegreePrograms.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DepartmentId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.DepartmentName, group.Key.DepartmentId }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "f8532442bbbb2e60dcc87960c7f633262971786307c61a9c57b679124cd29d90",
    "sql": "select t2.department_name , t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
    "linq": "context.DegreePrograms.Join(context.Departments, t1 => t1.DepartmentId, t2 => t2.DepartmentId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.DepartmentId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t2.DepartmentName, group.Key.DepartmentId }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "449d32bf5e216e1b4a376334f6edf7ad367740e24577a8fab63bdc352a44ad64",
    "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "linq": "context.DegreePrograms.Select(row => row.DepartmentId).Distinct().Count();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "5f7b415294095c44a747f7b754e164a70fb1382d03c857409b9dc11043aaf0ba",
    "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "linq": "context.DegreePrograms.Select(row => row.DegreeSummaryName).Distinct().Count();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "858489ef0a1f6eb4f9bbf52bb269dcbac6328d4cf82d955f16fc9cdd4f42f50f",
    "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
    "linq": "context.Departments.Join(context.DegreePrograms, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DepartmentName == \"engineer\").Count();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "e6466cd67a3db68e0deea6d7175567d19a862cc047d6cf226c4938269001c909",
    "sql": "SELECT section_name , section_description FROM Sections",
    "linq": "context.Sections.Select(row => new { row.SectionName, row.SectionDescription }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "011dbd5787de67a9d2cd0ee432774911c09f8cb794f0921e4a57c10fd36037fd",
    "sql": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
    "linq": "context.Courses.Join(context.Sections, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CourseId }).Where(group => group.Count() <= 2).Select(group => new { group.First().T1.CourseName, group.Key.CourseId }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "612838a5d892fb524fe115273d61807f31fd9df5e00e3c3688f1f9775d671045",
    "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "linq": "context.Sections.OrderByDescending(row => row.SectionName).Select(row => new { row.SectionName }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a3ce948d52e2ca55e7fe4b91e45e200c5a2e68424115711434034569b053e555",
    "sql": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Semesters.Join(context.StudentEnrolments, T1 => T1.SemesterId, T2 => T2.SemesterId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SemesterId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.SemesterName, group.Key.SemesterId }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a42e5521a9474eb395ba14687385d2f7798cf73ae95a59a605fe73844aff092f",
    "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "linq": "context.Departments.Where(row => EF.Functions.Like(row.DepartmentName, \"%computer%\")).Select(row => new { row.DepartmentDescription }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "0696c99098de7fdcf8caafc45193f691b155abbc775ed552ffbfa1234eefc177",
    "sql": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
    "linq": "context.Students.Join(context.StudentEnrolments, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).Where(group => group.Count() == 2).Select(group => new { group.First().T1.FirstName, group.First().T1.MiddleName, group.First().T1.LastName, group.Key.StudentId }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "c6b5212c5dd814667f6a4b2a8fd4edfe9d7c143161f93fdfb432759b0bc517f7",
    "sql": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
    "linq": "context.Students.Join(context.StudentEnrolments, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Join(context.DegreePrograms, joined => joined.T2.DegreeProgramId, T3 => T3.DegreeProgramId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DegreeSummaryName == \"Bachelor\").Select(row => new { row.T1.FirstName, row.T1.MiddleName, row.T1.LastName }).Distinct().ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "bdbbb28550fd41ebf5e2b23af151059c1dc35b5cb406169f32fc7be059f69cf6",
    "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.DegreePrograms.Join(context.StudentEnrolments, T1 => T1.DegreeProgramId, T2 => T2.DegreeProgramId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DegreeSummaryName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DegreeSummaryName }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "ac08716a9539250cf0308abbdedb59d642d6ed13e121a64c9a995be28928a8a5",
    "sql": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.DegreePrograms.Join(context.StudentEnrolments, T1 => T1.DegreeProgramId, T2 => T2.DegreeProgramId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DegreeProgramId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DegreeProgramId, group.First().T1.DegreeSummaryName }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "13358b9a500955ce04a487202fb4387f1699b1a3ac36f111e51bc2f9c6e2d8c1",
    "sql": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Students.Join(context.StudentEnrolments, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).Select(group => new { T1StudentId = group.Key.StudentId, group.First().T1.FirstName, group.First().T1.MiddleName, group.First().T1.LastName, Count = group.Count(), T1StudentId2 = group.Key.StudentId }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "218dd0462426b03f73827f2bc42fbf88d47ad6cc393bb57c25c1a8ce12331ea0",
    "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "linq": "context.Semesters.Where(row => !context.StudentEnrolments.Select(row => row.SemesterId).Contains(row.SemesterId)).Select(row => new { row.SemesterName }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "2efa4ce971b7af202a2c355fe5ecc7f39381bf4e819cca9d363dc6c8a987ce67",
    "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
    "linq": "context.Courses.Join(context.StudentEnrolmentCourses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.CourseName }).Distinct().ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "5d5e72643e4105b85e32ce1e87d62540e4bd1b4c3e444bf2f7858fd72d757228",
    "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Courses.Join(context.StudentEnrolmentCourses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CourseName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CourseName }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "8f3fdd924e287adfd06126b9c970d6f7f034921bc848801b1c38208b47236916",
    "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
    "linq": "context.Students.Join(context.Addresses, T1 => T1.CurrentAddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.StateProvinceCounty == \"NorthCarolina\").Select(row => row.T1.LastName).Except(context.Students.Join(context.StudentEnrolments, T3 => T3.StudentId, T4 => T4.StudentId, (T3, T4) => new { T3, T4 }).Select(row => row.T3.LastName).Distinct()).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d92428b65deef0c8c8e67e9c322469dc31699503a9f340eed37f10719b5f0137",
    "sql": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
    "linq": "context.TranscriptContents.Join(context.Transcripts, T1 => T1.TranscriptId, T2 => T2.TranscriptId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TranscriptId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T2.TranscriptDate, group.Key.TranscriptId }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "8c2cbbf9ac9a096947700034ebb460f9b975371e9dc443fd77262566bbd08dec",
    "sql": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "linq": "context.Students.Where(row => row.FirstName == \"Timmothy\" && row.LastName == \"Ward\").Select(row => new { row.CellMobileNumber }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "af3806d1df7143fc27f59bf6a9f53ac9112fc1b2d9366af7acdfd7a5dfe0569e",
    "sql": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
    "linq": "context.Students.Where(row => row.FirstName == \"timmothy\" && row.LastName == \"ward\").Select(row => new { row.CellMobileNumber }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "b8250e49333d7f4518c4b8c1653a7ae234250b04dd0006e213221319d3c34fef",
    "sql": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "linq": "context.Students.OrderBy(row => row.DateFirstRegistered).Select(row => new { row.FirstName, row.MiddleName, row.LastName }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "e2f17c592effd04a5f6a71afb8271661a481f87ea47853300c37b7b114480186",
    "sql": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "linq": "context.Students.OrderBy(row => row.DateLeft).Select(row => new { row.FirstName, row.MiddleName, row.LastName }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "5b05d98f53b9f99ab899336c91526179d1ff2bd2cb7daca8db542cf55060842c",
    "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "linq": "context.Students.Where(row => row.CurrentAddressId != row.PermanentAddressId).Select(row => new { row.FirstName }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "9a90fd01adac28ecd12af9a22b10eecac3c3fc3ac3d3cc8118c5206b1730d271",
    "sql": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.Addresses.Join(context.Students, T1 => T1.AddressId, T2 => T2.CurrentAddressId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AddressId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AddressId, group.First().T1.Line1, group.First().T1.Line2 }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "9da4c9c8b81f4b3544300dc39054c6a94efecfee7eefbd666e1e5276311b95de",
    "sql": "SELECT avg(transcript_date) FROM Transcripts",
    "linq": "context.Transcripts.Select(row => (double) row.TranscriptDate).Average();",
    "db_name": "student_transcripts_tracking",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,46): error CS0030: Cannot convert type 'System.DateTime?' to 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.61",
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "c9d7b87870ff7d4121122ab5ed215ba45d08af349d9e02275cdff3169daa7481",
    "sql": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "linq": "context.Transcripts.OrderBy(row => row.TranscriptDate).Select(row => new { row.TranscriptDate, row.OtherDetails }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "06df624e2eef6fe8641d2cf3715574ffbed1f9b3557c496b1097a15703f99ff8",
    "sql": "SELECT count(*) FROM Transcripts",
    "linq": "context.Transcripts.Count();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "a66deecabb4fff7ca679da3c87b4618970cbd768ee88f2a2b3d471e0713ba457",
    "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "linq": "context.Transcripts.OrderByDescending(row => row.TranscriptDate).Select(row => new { row.TranscriptDate }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "daf01db42d891ee24a946921b27c4eb64d9bd602a935dbfcafd3b3d270cd744c",
    "sql": "SELECT count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "linq": "context.TranscriptContents.GroupBy(row => new { row.StudentCourseId }).Select(group => new { Count = group.Count(), group.Key.StudentCourseId }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "d381986a4e9e100f8d220877a3a28879dfdd4148d2bc7830baeb53603fd599a5",
    "sql": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "linq": "context.TranscriptContents.Join(context.Transcripts, T1 => T1.TranscriptId, T2 => T2.TranscriptId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TranscriptId }).OrderBy(group => group.Count()).Select(group => new { group.First().T2.TranscriptDate, group.Key.TranscriptId }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "6f8cc21ccd466d2e376a6e80e5139cf49b0ad5c823ed33b92a69d99ed6c11f1f",
    "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
    "linq": "context.DegreePrograms.Join(context.StudentEnrolments, T1 => T1.DegreeProgramId, T2 => T2.DegreeProgramId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DegreeSummaryName == \"Master\").Select(row => row.T2.SemesterId).Distinct().Intersect(context.DegreePrograms.Join(context.StudentEnrolments, T1 => T1.DegreeProgramId, T2 => T2.DegreeProgramId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DegreeSummaryName == \"Bachelor\").Select(row => row.T2.SemesterId).Distinct()).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "1f396a58782e92bed39a180042235350f5fc0314a45bcd33a0883650200e9b5f",
    "sql": "SELECT count(DISTINCT current_address_id) FROM Students",
    "linq": "context.Students.Select(row => row.CurrentAddressId).Distinct().Count();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "2c4b53ca26bbafaabc5d6b2548c6dac5ac60d9a4289f09b96ac505380a0389b5",
    "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "linq": "context.Students.OrderByDescending(row => row.OtherStudentDetails).Select(row => new { row.OtherStudentDetails }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "b1b55c50b094e9bf7fd37334c87233a675522d436264ecbac415748dbeba8bb8",
    "sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
    "linq": "context.Sections.Where(row => row.SectionName == \"h\").Select(row => new { row.SectionDescription }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "2e77ba7ed764ec208fdd938d6a1b1e445335348a8b3ccafad6be45aa6c21caed",
    "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
    "linq": "context.Students.Join(context.Addresses, t1 => t1.PermanentAddressId, t2 => t2.AddressId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Country == \"haiti\" || row.t1.CellMobileNumber == \"09700166582\").Select(row => new { row.t1.FirstName }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false,
    "split": "Dev"
  },
  {
    "id": "991bab5d4b8f27a3de927395aad56b8c5d6a236829dfc3ff7a6b47a9ad6c1cd9",
    "sql": "SELECT count(*) FROM scientists",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "2ebe6bfb155ba35fe97f1a7432d8b09192af4592b4d8b6e338c9e482c8698a89",
    "sql": "SELECT count(DISTINCT scientist) FROM assignedto",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3ea3c7bf6a182bf8a50a7da07e3124732823f2532ac609963ce015132537081c",
    "sql": "SELECT T1.name , T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "93d7ae27cf90e3968f4f7a028ac311bd416fac618edc2d982bc794c2d18b72e8",
    "sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%'",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6ea503e4dead5e549922bb14b14aba51371eb95ae9211a05c48964a261154fd2",
    "sql": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0e847cffe92c8f9c9f5750341d25c2878054bebf23d2dae8b26be6165662c2ed",
    "sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Puzzling Parallax'",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7d6dcc75f2435232ae876f4fc811433faf2e2fcb013f755c0582a65b87f4733a",
    "sql": "SELECT name FROM scientists ORDER BY name",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "78f95e4aa0ac9c3def3f4bced2e7c48866f1c5dcc006680a13cf76a741960687",
    "sql": "SELECT count(*) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5e029c84e98aafc113f7cde9091848c8ef285db51b0c6b163b46e8ed4a7dbaa9",
    "sql": "SELECT count(*) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "18bf67ad9d7af1e49cc3b33fcfdaffec9695cb7bc76c0c038e1553cb2e4e40aa",
    "sql": "SELECT count(*) , T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist GROUP BY T1.name",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4acdeb64ae67cfceb1a783748cf332d09f1e2a5a4808f70ddebfc7d44eb5237e",
    "sql": "SELECT T3.ssn , T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT max(hours) FROM projects)",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cb2d3b8125198eca1d2022413d5e4e1fcb0053f0dc567fd300658960463f316f",
    "sql": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist = T2.ssn",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8d7415c18c19afc27ef9bc4d2d3dfbcae687428c8c2e0d0afe37ea47a8f4e4a7",
    "sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5ab9958f2bc1c85e3aff3f11fb15f36501be086a1c0a340914348ac9b05f82b7",
    "sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c6ebc3ba708ddaa252c9a2caca23619a77fffa90f0e6697c12e1e9914804503",
    "sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d6ca24bf7ce9641ba0a5d679cb4841f07ec335ae5067375eb99b89d4c0b4474c",
    "sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT max(hours) FROM projects)",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bc5eb64817156810c666870669fb2baac0da6e649a98c42aa897684f9f7959ac",
    "sql": "SELECT T1.Name , T3.Name , T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name , T1.Name",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "892db484dc979a1b4737ca33cbc15a3b7405c584ab65ac27900cd3ac7de034fe",
    "sql": "SELECT T2.name , T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT min(hours) FROM projects)",
    "linq": "",
    "db_name": "scientist_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f9846185f7d940d96b5649acbcbe570f35833cb249e70884d831888799520ff4",
    "sql": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3",
    "linq": "",
    "db_name": "document_management",
    "status": "QueryBuildFailed",
    "error": "called `Result::unwrap()` on an `Err` value: ParserError(\"Expected end of statement, found: INTERSECT at Line: 1, Column 96\")",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b1065a66616721a3cdd0f96906d95c772582b58972ec0170e48c716ad7d792c8",
    "sql": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
    "linq": "",
    "db_name": "geo",
    "status": "QueryBuildFailed",
    "error": "Unknown expression type",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fb4cd37edb855421cac00c430e067ccf4d3d6eea516e9644e2233dd4510b1c9c",
    "sql": "SELECT population / area FROM state WHERE state_name = \"pennsylvania\";",
    "linq": "",
    "db_name": "geo",
    "status": "QueryBuildFailed",
    "error": "Unknown comparison operator",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "47948fe164452824c5e9842347bb17dd13ab4678ef0229da91dc0a9e429c8f29",
    "sql": "SELECT T1.name , T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id",
    "linq": "",
    "db_name": "soccer_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1f22565f81c53701882b4db6a19a4e38335c44b4fef5e10804111f9af205fa72",
    "sql": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id WHERE T1.name = \"England\"",
    "linq": "",
    "db_name": "soccer_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0909725b3af48a8cc3db3b60d3ee392635b53c2df3d0e506c80b6770cfdd8a75",
    "sql": "SELECT avg(weight) FROM Player",
    "linq": "",
    "db_name": "soccer_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f91accd4947abadf4261942ddb7c274490d2d7adb9c76de0062e138c63c56061",
    "sql": "SELECT max(weight) , min(weight) FROM Player",
    "linq": "",
    "db_name": "soccer_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8421bd06c634c3839e751664d9eeef3b828003d09e96eab5442326597ef4d1b4",
    "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > ( SELECT avg(overall_rating) FROM Player_Attributes )",
    "linq": "",
    "db_name": "soccer_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d9b40df1bef969145751c22774a306a25035eb425212454934433d13ec74e681",
    "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling = ( SELECT max(overall_rating) FROM Player_Attributes)",
    "linq": "",
    "db_name": "soccer_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0b5970710fb1c9870303d81e61acc1f8a33da3bc4379ae5db40548df79fb7e6a",
    "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing > 90 AND T2.preferred_foot = \"right\"",
    "linq": "",
    "db_name": "soccer_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6e3b345cc354139e980d5b070f33d888bccac5baffea9b0af980e24848783d4b",
    "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot = \"left\" AND T2.overall_rating >= 85 AND T2.overall_rating <= 90",
    "linq": "",
    "db_name": "soccer_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "db1d58aa318a213e9d500f70ffa5b87dc1bac56dd637b6c832e6cc9e25fef666",
    "sql": "SELECT preferred_foot , avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot",
    "linq": "",
    "db_name": "soccer_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "100eaa3b3831afc97faba3bf8e1eeb042440f5c9db9be06b6df43b5b773623e7",
    "sql": "SELECT preferred_foot , count(*) FROM Player_Attributes WHERE overall_rating > 80 GROUP BY preferred_foot",
    "linq": "",
    "db_name": "soccer_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "70c077b3594e196918295cb7cea00970bdc8dde691a19677ea69e1214d5e10c0",
    "sql": "SELECT player_api_id FROM Player WHERE height >= 180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85",
    "linq": "",
    "db_name": "soccer_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3074ac8dfb142c0f63c656a6c307a58cc1cb360c1dc334ab8ed45bf222c1f103",
    "sql": "SELECT player_api_id FROM Player WHERE height >= 180 AND height <= 190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = \"left\"",
    "linq": "",
    "db_name": "soccer_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d39bd623a3a0d0a40a6536c695bbbd0e7b8b9ed2c1bbf9bd0ea7b62a254c6829",
    "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY overall_rating DESC LIMIT 3",
    "linq": "",
    "db_name": "soccer_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "06228cd0dcb12f6dd05dda2db32a0e917b4c297002665a10cca517e879e6a6ca",
    "sql": "SELECT DISTINCT T1.player_name , T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY potential DESC LIMIT 5",
    "linq": "",
    "db_name": "soccer_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "77743f944c0340ba89191a8624e6948647958ad9acf55b5b98d5c615570341a7",
    "sql": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
    "linq": "",
    "db_name": "customers_and_addresses",
    "status": "QueryBuildFailed",
    "error": "Invalid function argument",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a49ee3109b01e74c8912d4f8e93c0552aeecb3f21e18286164fcd68fecaa0014",
    "sql": "SELECT channel_code , contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date = (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
    "linq": "",
    "db_name": "customers_and_addresses",
    "status": "QueryBuildFailed",
    "error": "Unknown expression type",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "97dda8f73b269f005533352b6b953017247b27f1b9700cb2ee2a4eb9fc447e3b",
    "sql": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code = 'Marriage'",
    "linq": "",
    "db_name": "local_govt_in_alabama",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5ced0caa35631772cb0dead327ea9db14bf3fb820be1eac4eafd5c0328eeae3e",
    "sql": "SELECT T1.event_id , T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_ID HAVING count(*) > 1",
    "linq": "",
    "db_name": "local_govt_in_alabama",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9d1bd536630c25faef1825b86fd6184ea3a6f3b66fa360e5e62cb4bfdc4ab81a",
    "sql": "SELECT T1.Participant_ID , T1.Participant_Type_Code , count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_ID",
    "linq": "",
    "db_name": "local_govt_in_alabama",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f8db61900c08c8a055c5d9f146b8d5af74b3a6333510e4306b6b4095b95b2757",
    "sql": "SELECT service_id , event_details FROM EVENTS",
    "linq": "",
    "db_name": "local_govt_in_alabama",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6ba528b5dc06fe1f216af1ea7002733b9eba6f3fd2173accb8b94604f5706f59",
    "sql": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'",
    "linq": "",
    "db_name": "local_govt_in_alabama",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0657baac0b2ea8aa4aad0527fda8864eb8a7ddea41f8f4baafd455618ac63824",
    "sql": "SELECT T3.service_id , T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID = T3.Event_ID JOIN services AS T4 ON T3.service_id = T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",
    "linq": "",
    "db_name": "local_govt_in_alabama",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a1d229a2384992040d871247e7ba2144d0e2769552431dfbcf38ec39f7390903",
    "sql": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE Participant_Details = 'Kenyatta Kuhn'",
    "linq": "",
    "db_name": "local_govt_in_alabama",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "05c6215ae8b5479fbc7e6a33ef5a52eb10c7f58a77148c12379b218730b6abc0",
    "sql": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Fail'",
    "linq": "",
    "db_name": "local_govt_in_alabama",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d8c324be978ac7bdd6ea163979f380f80811b5b095ea3edb09ba675ff692e794",
    "sql": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
    "linq": "",
    "db_name": "local_govt_in_alabama",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "81509d49a43733800ae82f3dd47ec3da48d27a70f39abaa90240a7b7f18b7915",
    "sql": "SELECT count(DISTINCT participant_id) FROM participants_in_Events",
    "linq": "",
    "db_name": "local_govt_in_alabama",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "45d804acfbc74a041d909855308a57286abbe9a449044cfa7d4bf5ec7533b66f",
    "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)",
    "linq": "",
    "db_name": "dorm_1",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ee7bf65728a20e1ad8ec9ec6a4c9ca45fc0b9469b22067132f55c5ac3f1a306c",
    "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b61b4b10c3b859149cbfd9cbc6cbe823dec392956f82318b9d85ee3ed765ea60",
    "sql": "SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5437c97c7aae9ad00b6b11a2839901906b96b2c11c98b3403476c1aa4bec5f3c",
    "sql": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"noah a smith\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "23e3f6a076c342e8ea661ccd5ce9b06dfda9faff67c6f39a281320bb61ad00d1",
    "sql": "SELECT DISTINCT COUNT ( t3.paperid ) , t2.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"mirella lapata\" AND t3.year = 2016 GROUP BY t2.authorid;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "034aa2266e199bd78c070725b0767c1f537ac98c6776732193c7e51b558c90a0",
    "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "152508bdcd2bad120e5407c1bd995ec07a793799f5c2c137af64881239f7505c",
    "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"oren etzioni\" ORDER BY t3.year DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "134ad02cb2e16aa6f3bea6afd526e282fb7cd6c710a21e0f1064a7fd3c31dde7",
    "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"monte carlo simulation\" AND t3.year > 2011;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "96cda6dfff4c24a5a6e0f40b98013590bb0c214db896fa5150c294639dd0b1c0",
    "sql": "SELECT COUNT ( t3.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"ras bodik\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "68216f30308b2085e9047bcb94d618758caf20f5cef12376e23b8b9f8a034902",
    "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"David M. Blei\" AND t4.venuename = \"AISTATS\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d2beef928fed799e1208a7f59e8f8f1b40cafedc7939587c9ce3494f6486901c",
    "sql": "SELECT DISTINCT t3.citedpaperid , COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t1.year = 2010 AND t2.venuename = \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c65c6c0c604e2d1247b4a0cab71ee40ae9260a81d70e4cc3ad3695e9bf2f8a54",
    "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b97462de16ba80bbe6166209244f568fa60c70e1ff619aed40329f7a548960ce",
    "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Christopher D. Manning\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "267d49872d86afb35f05f3408674a0a3add61f425ff4205913050840aba25fb4",
    "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Luke Zettlemoyer\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "471e95abc721ddfe59cfe98308d5fb6d619e2e51387ff5f3ccdf3e78bc1270c6",
    "sql": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Daniella Coelho\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6bda0af5a84d59053a8599fdee73efb3a7e7fb33dc80aa58e2424568c9cd8867",
    "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t1.paperid JOIN author AS t2 ON t3.authorid = t2.authorid WHERE t2.authorname = \"Ed Desmond\" AND t4.keyphrasename = \"Semantic Parsing\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "284080ed78fb6830a6131c4267151380b2f057552e192639e8e306a5634f7c77",
    "sql": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"li dong\" AND t3.year = 2016;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ff9a19833cc80f5cf8c5951ebeb4b0eb3deca787e458a423b553299ee664fa6c",
    "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"Parsing\" AND t3.year = 2012 AND t4.venuename = \"acl\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "020387c6295fef8c87ab5fd598841d9aa3d8b63a2504e5546f630f00131712c5",
    "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"dependent types\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "73c32303e6d34375b85b9d9da90647f1dc398bcaa8763f330cecd8180db6778b",
    "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "35b48b45dfe2a0da277fb566440a2ebe040a80e42d92486f35f5f36aad5b8700",
    "sql": "SELECT DISTINCT t2.keyphraseid , t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"Luke S Zettlemoyer\" ORDER BY t3.year , t2.keyphraseid;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f4cb2feb5c097bdf4d7ae57343c8e2f6273d4533abddddce200f3ea73a52300b",
    "sql": "SELECT DISTINCT t1.keyphrasename , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"sanjeev arora\" ORDER BY t3.year DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bb0c5dc933ec14a64d6612514c7f8a1965fb3b383accfc116d96d2b66eff8af4",
    "sql": "SELECT DISTINCT t3.paperid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"balakrishnan prabhakaran\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bfbb9dea64300249bb753853c12f086eb09fa0b47c690062db56282b6117eebc",
    "sql": "SELECT DISTINCT t3.paperid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"zachary tatlock\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "56e473ba3070529a0d109a01eba290fc048a74908ca72a656a3e9c6ed2d001d8",
    "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"subhasis chaudhuri\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5579fde2986e032a23dca750731a5681ac2c3ecef870f2a5ca9cb83d004f64a6",
    "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"parsing\" AND t3.year = 2014 AND t4.venuename = \"ACL\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "52d02877a984378caecebeca7d7dd44304354a93590aa03b24bb20f7226616a6",
    "sql": "SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"brian curless\" AND t5.keyphrasename = \"convolution\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5560fa9fe053b04842db9d9a8a839d7ee78a064a9be3db4f1ecbcb00c680ec78",
    "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Liwen Xiong\" AND t3.year = 2015;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "48dedfb20764e54eb709c3ca9d47816bf63c11e87645084b3f31a4f64f3c2a22",
    "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"TAIL\" AND t4.venuename = \"NIPS\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ddc36363367f9281e077781d73ebec239af529f9231e8cf17b365d6f24f787c7",
    "sql": "SELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname != \"Mark Steedman\" AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Mark Steedman\" );",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9e830f7c6ee90324700660e718e7965fd6a2e7bc3422862dd28e132778a7d7f2",
    "sql": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"Christof Dallermassl\" AND t3.year = 2000;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "762d17d8628cfad593d6054845ba3dc73dbc1d3449beedfacf47c0c5c9d649c8",
    "sql": "SELECT DISTINCT t1.authorname , COUNT ( t3.citingpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t3 ON t2.paperid = t3.citedpaperid GROUP BY t1.authorname ORDER BY COUNT ( t3.citingpaperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d0e61dee1042f97765df2b50d96470986c021bed9f47b2d3b8656b7438a610e5",
    "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"mohammad rastegari\" AND t3.journalid >= 0;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e3153a20b6df1bb97fffd3f8e8b2baa728eb053ee9df75f46bb057aa920e2b3e",
    "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid ) , t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t1.year = 2014 AND t2.venuename = \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b77debf49b9e38d3df41a9caaf400bf97ab02b2915ab9279de790ff099389c5e",
    "sql": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2016 AND t3.venuename = \"acl\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d9a9f1e1884d00f09e975d52851970e7fd87931625612fdadc1bd13828ceddbf",
    "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Multiuser Receiver in the Decision Feedback\" AND t3.year = 2016 GROUP BY t3.paperid HAVING COUNT ( DISTINCT t1.keyphrasename ) > 1;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4961d51008ac6c1ec13137a351e6e8c1cb4e07cfc7338b44ff42cf3d81ce745f",
    "sql": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t3 ON t2.paperid = t3.citingpaperid WHERE t1.authorname = \"Mirella Lapata\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "41e1be48e0e119373e86dfb05e936152fca8ac507594bb7717adfbd2caf75850",
    "sql": "SELECT DISTINCT t3.year FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Michael Stonebraker\" AND t4.venuename = \"VLDB\" ORDER BY t3.year;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "25cc0533cbd4d74de0ce25ce34c98e7b480295c681c7edad3e467305220033a3",
    "sql": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid WHERE t4.keyphrasename = \"semantic parsing\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8b944beb122e8ff654558636442e3f491d05b71019022655cac8d9b4f1763c87",
    "sql": "SELECT DISTINCT t3.journalid , t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Peter Mertens\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1b109fb9956a2cfad7ec556ba3686dbc6414c91f8ab9798d9653b42a6e845e78",
    "sql": "SELECT DISTINCT t2.datasetid , t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN paper AS t4 ON t4.paperid = t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid = t5.keyphraseid WHERE t5.keyphrasename = \"deep learning\" ORDER BY t4.year ASC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "84220bedb0e7ba74930df5c783ac1a3bdb8e3b12942950065048c70ce8f060f9",
    "sql": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid = t3.keyphraseid JOIN paper AS t2 ON t2.paperid = t5.paperid JOIN venue AS t6 ON t6.venueid = t2.venueid JOIN writes AS t4 ON t4.paperid = t2.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"li dong\" AND t3.keyphrasename = \"semantic parsing\" AND t2.year = 2016 AND t6.venuename = \"acl\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "39dc7cf077a1d5d7afe50015cf949b08ac619588a708a79daea4bb83a1c208c7",
    "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"convolutional neural networks\" AND t3.year = 2016;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dd5e9e15a56141d5178b85780d6824bf99de690f82f7891d3b963b007c45c376",
    "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"question answering\" AND t3.year = 2016;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8e6bea3fe082c9d740b586ebc748810faac0d667eb280d419ee00179ea5fd71d",
    "sql": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Noah A Smith\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "aa5c75d3cb2e3f7dacabe650e910317bf38a848ec92d770230411256c0e6eb7e",
    "sql": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"jitendra malik\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6e1a181af9a987a43ea7673a0e7956a24d24a0bbdaa603bb2156061afa0cd83e",
    "sql": "SELECT DISTINCT t3.paperid , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\" ORDER BY t3.year DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f36a0c8237a0de09acb6ef60c59bdd37a31649dae80add1533c824d8d97c6dca",
    "sql": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Pedro Domingos\" GROUP BY t3.year;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "498d05c7d0ccc79994be11fdac9b62c3597679e99b35514e061e3752d6a297e2",
    "sql": "SELECT DISTINCT t3.paperid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"jamie callan\" ORDER BY t3.year;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "74f00a09a2d7a8d9f87b2fdeb388375bbb0bb745fedcb9cc460fcacb417a4a3a",
    "sql": "SELECT DISTINCT COUNT ( t3.paperid ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"jamie callan\" GROUP BY t3.year;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "550ad16cecc385ce230a9a410562b611b4b140abf4d93fb8290c23174aa8184b",
    "sql": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citingpaperid JOIN writes AS t2 ON t2.paperid = t4.citedpaperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"oren etzioni\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "13da20cc3fd71dafc9312f5e2aa8e43959dba7d2b67f3c16d6400bac8941d590",
    "sql": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citingpaperid JOIN writes AS t2 ON t2.paperid = t4.citedpaperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Daniel Jurafsky\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9617f1c9cae3200a55eea5d7749aaea178dd82b07adda121d6d1369169d1b18c",
    "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"instance segmentation\" AND t3.journalid >= 0;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "fc07790bff1ef4cd4f6b9460603184407d35d87aae6ecfc1f001ff011d480163",
    "sql": "SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"semantic parsing\" AND t4.year > 2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "73a187fc1594b599bdc120c8b7aefb1de56ee543c3c7c04cfb526483b700a45d",
    "sql": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t3 ON t2.keyphraseid = t3.keyphraseid JOIN writes AS t4 ON t4.paperid = t2.paperid JOIN cite AS t5 ON t4.paperid = t5.citedpaperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"Dan Makumbi\" AND t3.keyphrasename = \"Genetic Identity\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "86a4443bd013c2bd0264b69d4ab6a892240444d8bbdb8c0dc5172d2e99d6efb8",
    "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"character recognition\" AND t3.year < 2010;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c24287ed8c4ba5b4352374c2f9eabb7a2761cabcef896806284c784c044d5a03",
    "sql": "SELECT DISTINCT COUNT ( t2.keyphraseid ) , t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"oren etzioni\" GROUP BY t2.keyphraseid ORDER BY COUNT ( t2.keyphraseid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d7a32d262a47b5e6818495d5c7bf32fa7b0b4065ba7482b479ab87dc209f3bfd",
    "sql": "SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paper AS t4 ON t4.paperid = t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid = t1.paperid JOIN keyphrase AS t5 ON t1.keyphraseid = t5.keyphraseid WHERE t2.datasetname = \"ImageNet\" AND t5.keyphrasename = \"deep learning\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "83629c64cff59347dd496147e8559dddf4cfca0942b289c48ad8efbdc52e1ac6",
    "sql": "SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "54ec79193ce189eb0e8e407d272071e01369b42d7dff9430e71cb7a7fa9a5b96",
    "sql": "SELECT DISTINCT t3.year , t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname LIKE \"Michael Armstrong\" AND t3.year LIKE \"199\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "511c0298a09f389da84a1d06181c33bdc0e0ffc8561f4f050ecc58fd9c0f6311",
    "sql": "SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "77df06975b9f220f3d1e8e07c52dece7063d32499a4caeb35db25aa380431671",
    "sql": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"michael i. jordan\" AND t3.year = 2016;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a6b986679f9808f0ab3ba6c15ca78e9aa2674885f6f09bc8c39c04b9bcc08124",
    "sql": "SELECT DISTINCT COUNT ( t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"ACL\" GROUP BY t1.authorid;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "6b92ded8c3ea954a19cd6cd4bbfd6bd1e2e23b628a36faa8a87136529cee359b",
    "sql": "SELECT DISTINCT COUNT ( t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2007 AND t3.venuename = \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "39e772be1027723887d216de8785899f8691a6e6be57e7cbd13013a726b4d7f8",
    "sql": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Richard Ladner\" AND t4.venuename = \"chi\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a8a66ef7f31884313afaca4f14aa1ecb3b6b6d4c6ffa5e16acea013b5709e6d5",
    "sql": "SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1384d87b0cf1c0b20d073b23f133a5144ee4313d6f89b8a023d96a43269d540f",
    "sql": "SELECT DISTINCT COUNT ( t3.paperid ) , t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t3.year = 2014 AND t4.venuename = \"ACL\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "87857c8a7c32badaf51e225106fb13615fdf90ee82a845d93e19cd085cb16536",
    "sql": "SELECT DISTINCT COUNT ( t3.paperid ) , t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t3.year = 2015 AND t4.venuename = \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f6b97f13a8a32e7251bc1711275874550c79bd1a8b3fc0bc433fc957a90f54a4",
    "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"deep reinforcement learning\" AND t4.venuename = \"nips\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d4816f6fe06aea8483ae524f022c97ec8327b3673a9cb955981f613946ea14b6",
    "sql": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid JOIN cite AS t4 ON t1.paperid = t4.citedpaperid WHERE t3.venuename = \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "78cdf02c571b03942c63f9f87276a2b34f538c8086d955b8607d9f29fda25621",
    "sql": "SELECT DISTINCT t1.authorname , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename = \"syntactic parsing\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "95648c8a3d88cfb9db87fb124ba43f46744511be42c674ed40ea79c98ecc6640",
    "sql": "SELECT DISTINCT COUNT ( t3.paperid ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "12908b4cf17d6c04989249fbcbf918939e6b96cd4272333de79af303b4a208ef",
    "sql": "SELECT DISTINCT COUNT ( t3.paperid ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"ameet soni\" GROUP BY t3.year ORDER BY t3.year;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "001d896b229b46a3d503c10542a335128bd2b0b755ddc828eedfe94dfa835c44",
    "sql": "SELECT DISTINCT COUNT ( t4.citingpaperid ) , t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t4 ON t2.paperid = t4.citedpaperid JOIN writes AS t3 ON t3.paperid = t4.citingpaperid WHERE t1.authorname = \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "b404e6af7b2105fb63e5319380863a51db1e55cb1388fef117534d7dcf754fb8",
    "sql": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t2.venuename = \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid ) < 5;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "97082d0c1841a1ef30e93f5fd408b6c62feacd4fa7502af969cf0b0e4531be2a",
    "sql": "SELECT DISTINCT t3.paperid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Mirella Lapata\" ORDER BY t3.year DESC LIMIT 5;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "3f795bd2fcf782ac1ab414a4e98982f4774a66f5e9ecd26520ae75bc37999c3f",
    "sql": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t2.paperid JOIN author AS t1 ON t3.authorid = t1.authorid WHERE t4.keyphrasename = \"Machine Learning\" GROUP BY t1.authorname ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ac89843eb5bc8f69eb7f62fa5d873e0699a7a695f39aa6763bd320dd324ede43",
    "sql": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t2.paperid JOIN author AS t1 ON t3.authorid = t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "a6ed2602b66472df19ea862d60e533f9b986e9359fad133cee53867eadeb2d96",
    "sql": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN cite AS t5 ON t3.paperid = t5.citedpaperid JOIN writes AS t4 ON t4.paperid = t5.citingpaperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"michael i. jordan\" AND t1.authorname = \"dan klein\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "218ce705603238cc9a73734d590864d97e0dde9ad27e262c300e9176825fa089",
    "sql": "SELECT DISTINCT t5.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN writes AS t5 ON t5.paperid = t4.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Ameet Soni\" AND t1.authorname = \"Ras Bodik\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ae0188d77d3510bc21dc7f9267d6eff34ddbbdbe853af262ece91680a478683c",
    "sql": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Takashi Matsumoto\" GROUP BY t3.journalid;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c3faa51c8d1f7444ef1ac6a6daad314cd7ea415f5b75f022306fea27412798e8",
    "sql": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid JOIN author AS t5 ON t3.authorid = t5.authorid WHERE t2.keyphrasename = \"Bacterial Wilt\" AND t4.year = 2016;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "296db88e62fbe7f8da5521c67ed8943ca58422cc326b0c12e93620504de4845d",
    "sql": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Luke S Zettlemoyer\" ORDER BY t3.year;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8b3b61ac678e3cdfb4fcefa4efd1671f8fa528b05afe9c04ec2eaedb96c93480",
    "sql": "SELECT DISTINCT COUNT ( t3.citingpaperid ) , t1.keyphrasename FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN cite AS t3 ON t2.paperid = t3.citedpaperid GROUP BY t1.keyphrasename ORDER BY COUNT ( t3.citingpaperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f2e00e0eb315543d1bfd718ea681097f844d3c6db1bdf08a15a02c0f097871df",
    "sql": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Temporal Data\" GROUP BY t3.journalid;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cf860d6619986bbcd2d32e56124ee3bba1b911ef7f87acf7e41d0cc053360911",
    "sql": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid = t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid = t3.paperid JOIN paper AS t2 ON t2.paperid = t3.paperid JOIN venue AS t6 ON t6.venueid = t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid = t1.keyphraseid WHERE t5.datasetname = \"Jeopardy! Questions\" AND t1.keyphrasename = \"Parsing\" AND t2.year = 2014 AND t6.venuename = \"ACL\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "63b2f253ec923a1579a887a4a76aea0a920203438fc1449f556cf986c204c9ba",
    "sql": "SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid = t2.journalid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"linda shapiro\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5c7e181320409e0dde18618c4d9d5ec9c9d823208c4b5a6e9ad23b7ac0875363",
    "sql": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"NIPS\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "d6379bb56733c27ebcf32743e80ac6c541161ffd3265e6814e6fecd376b3da49",
    "sql": "SELECT DISTINCT COUNT ( t3.paperid ) , t4.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"deep learning\" GROUP BY t4.venueid ORDER BY COUNT ( t3.paperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "9b8abe7f8acfc2b7b6cb7194bf627f99dd9cf74f8d830f28f5f7b16fff1d35f9",
    "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid = t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid = t1.paperid WHERE t2.journalname = \"Cell\" AND t3.year = 2015;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "baac6bfc7a755fc7120d37dbe9d195189dfbac7af0c29bbdcb14f86f2286468b",
    "sql": "SELECT DISTINCT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Donald E Knuth\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1abc15fa396d91873e9df480ed7ccea2f34c6f9d75faff64cf4b31109340a3db",
    "sql": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"ali farhadi\" AND t3.year = 2016 AND t4.venuename = \"eccv\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "15fbd120ee30abf0ff38f75655f9b15993bc5f4fb52229f7221ec391d01e41b4",
    "sql": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid = t1.datasetid JOIN paperkeyphrase AS t2 ON t2.paperid = t3.paperid JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid WHERE t1.datasetname = \"YAGO\" AND t4.keyphrasename = \"Semantic Data\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0c79efa592d9d2eb5c57167118b785a908da78ea6e99b92ef81746f264357a52",
    "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "cf03eec734e8edcb56abe31cdcbfe572cf906383bd3a0994c42cf01443c1a365",
    "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "ca16e0af2ffd73bdf3f3563917b3176d1b243786271d8e6fed8372e36afaaa5a",
    "sql": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "236c0c7d4bbbcefa93481889d76f62c9447acdc21550079f320df7f2cf762b3c",
    "sql": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citingpaperid WHERE t1.keyphrasename = \"parsing\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "362f0f53abadee8fed6fef3ea8a9338fed4565f3ec79de867dd1ff386798ab46",
    "sql": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Trophic Cascade\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "395271de1d15ad33370426200a43690273a39845ac5b2fe2616e810cde7318d2",
    "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"question answering\" AND t3.year >= 2011;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "06eb709bebfa8771037c6b4803cc402b7e96f1d7e58505d992ce16ed3d69541a",
    "sql": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid ) , t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"NLP\" GROUP BY t3.venueid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c54130631d3cff0c544230fbb41a3af9a3bd43edc45a0dca68b2a819037d9e34",
    "sql": "SELECT DISTINCT t2.paperid , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"ACL\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "71cb419d58ac3bef6818a437c088f7e7ea0468979d024bc1b18fbf0cbf1fc835",
    "sql": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid = t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid ) > 10;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c26df329006bbef85f851d7da5cc83dc18a2b1eaa096c7d5ff1ef949448311ac",
    "sql": "SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid = t2.paperid WHERE t2.year = 2015;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "38954800c8d023e93d69918a5b5c7280539cb6ecd6c318ecbd8dfefcfeec40ad",
    "sql": "SELECT DISTINCT t1.keyphrasename , SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "18727f48369957c95db74edc36f60fc653544eea722219c441fd5420b3a3f6e7",
    "sql": "SELECT DISTINCT COUNT ( t2.paperid ) , t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid = t2.paperid GROUP BY t1.authorid HAVING COUNT ( t2.paperid ) >= 5;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "04489a28995fafb715b2f6babb09262b76142db3548be36d2ecef188db72862e",
    "sql": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"Michael Stonebraker\" AND t5.keyphrasename = \"GIS Database\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "139cc3a66c6f159eee1301d817071274e4bbef7e5976f3c3705e13d899f104ef",
    "sql": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Trophic Cascade\" AND t3.year = 2010 GROUP BY t3.journalid;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "be56d1e5b35e3633f003bc5a8be98b07767ee6dc7844018997be23afd9c31791",
    "sql": "SELECT DISTINCT t3.citedpaperid , COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t1.year = 2016 AND t2.venuename = \"CVPR\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7c93e09784d863b7cbbbacaae2ea2f358acf4c53d3bb6d89db730283b38245ec",
    "sql": "SELECT DISTINCT COUNT ( t4.citedpaperid ) , t3.year FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"luke zettlemoyer\" GROUP BY t3.year;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7ae7c9e2c23da54c179dc68a82ba0532a46597170e09acf5e20a233b5fb19932",
    "sql": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid = t1.datasetid JOIN paper AS t4 ON t4.paperid = t3.paperid JOIN writes AS t2 ON t2.paperid = t4.paperid WHERE t1.datasetname = \"ImageNet\" GROUP BY t2.paperid;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4a249c28f0b9f7ed1867f42d98ea9d1d1565dfdd3030ab05cc1f41a5fdafc346",
    "sql": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid = t3.keyphraseid JOIN writes AS t4 ON t4.paperid = t5.paperid JOIN paper AS t2 ON t4.paperid = t2.paperid JOIN author AS t1 ON t4.authorid = t1.authorid JOIN venue AS t6 ON t6.venueid = t2.venueid WHERE t1.authorname = \"Eric C. Kerrigan\" AND t3.keyphrasename = \"Liquid\" AND t6.venuename = \"Automatica\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5565e26894657fd5338ce960024b90db918904bc27e0c2c93349ebef9f6a29ec",
    "sql": "SELECT DISTINCT t3.venueid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"sergey levine\" GROUP BY t3.venueid , t3.year ORDER BY t3.year DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "5be27ad021521f8e072a48ea36177900ddd898864f51d1794a648a1f912718b9",
    "sql": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid JOIN writes AS t5 ON t5.paperid = t3.paperid JOIN author AS t1 ON t5.authorid = t1.authorid WHERE t1.authorname = \"dan klein\" AND t4.venuename = \"emnlp\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "517ad347ed95a00aa8c23b7ba61c036255235c9da12b55bcf04c93adf9557e4e",
    "sql": "SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"Neutralizing Antibody\" AND t4.year = 2012 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "890110f8ce75619b1204e90bc70afc02eddbe2f79e45e20afc0d150853ad3e29",
    "sql": "SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN cite AS t5 ON t2.paperid = t5.citingpaperid JOIN paper AS t3 ON t3.paperid = t5.citedpaperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"Euclidean Distance\" AND t4.venuename = \"NIPS\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "bfdcda8f3b782d657b857bf02a11355b4ed3e8040d85b05ca64f2d6954932044",
    "sql": "SELECT DISTINCT COUNT ( t4.paperid ) , t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t4 ON t4.paperid = t2.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t1.datasetname = \"ImageNet\" GROUP BY t3.paperid ORDER BY COUNT ( t4.paperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "685e77842e259cf4bc9c41e2345634e9c2d50ca2556362a8cb12ba62180b2044",
    "sql": "SELECT DISTINCT ( t1.paperid ) , COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t1.year = 2012 AND t2.venuename = \"ACL\" GROUP BY t1.paperid HAVING COUNT ( t3.citingpaperid ) > 7;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c8854acff03a191907dfae8483448eae6e2c10b0e128f2539d94a58e35b4babd",
    "sql": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid ) , t1.keyphraseid , t2.paperid FROM paper AS t2 JOIN cite AS t4 ON t2.paperid = t4.citedpaperid JOIN paperkeyphrase AS t1 ON t2.paperid = t1.paperid JOIN venue AS t3 ON t3.venueid = t2.venueid WHERE t2.year = 2012 AND t3.venuename = \"EMNLP-CoNLL\" GROUP BY t2.paperid , t1.keyphraseid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "c71a31790a46993ad65510e52f683e3c40a5ea429c6243acd7ce479680327be3",
    "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname != \"Noah Smith\" AND t3.year > 2009 AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname LIKE \"Noah Smith\" );",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "21cdc43d3d5cf5337778437fad08729a1e6cd99a47166f2f3553159e2b6e62b3",
    "sql": "SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t2.venuename = \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid ) > 2;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "0574c91b731229883ac87aea70ddfaaf7aff35fa866a9b03658b05c1c255b7af",
    "sql": "SELECT DISTINCT t2.title FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid = t3.keyphraseid JOIN writes AS t4 ON t4.paperid = t5.paperid JOIN paper AS t2 ON t4.paperid = t2.paperid JOIN author AS t1 ON t4.authorid = t1.authorid JOIN venue AS t6 ON t6.venueid = t2.venueid WHERE t1.authorname LIKE \"Eric C. Kerrigan\" AND t3.keyphrasename = \"Liquid\" AND t6.venuename = \"Automatica\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "019044215a6088e218155769fc6e0467813331ce1e32ee2ebd8f31002ee12709",
    "sql": "SELECT DISTINCT MAX ( t3.year ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Mary Crainie\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "51edcb85f4cc42a72b9f789d15629e2f631453e140336c628848974cc5ab0184",
    "sql": "SELECT DISTINCT t1.authorid FROM paperkeyphrase AS t6 JOIN keyphrase AS t3 ON t6.keyphraseid = t3.keyphraseid JOIN writes AS t4 ON t4.paperid = t6.paperid JOIN writes AS t5 ON t5.paperid = t4.paperid JOIN author AS t1 ON t5.authorid = t1.authorid JOIN author AS t2 ON t4.authorid = t2.authorid WHERE t2.authorname = \"Philipp Koehn\" AND t3.keyphrasename = \"Machine Translation Output\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "42076ba4df7cdc5a2ff8f0429494fbeefd8ad701972d9fd0b7e43dcad2d02fb2",
    "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Samuel Madden\" AND t4.venuename != \"PVLDB\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e00fae0b896defe0bb82592fd6e52f77d2425a624fb8cabb7f47aebc4d045809",
    "sql": "SELECT DISTINCT t3.journalid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Donald E Knuth\" GROUP BY t3.journalid , t3.year ORDER BY t3.year DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4a42c0321fc034ad8082d7388d3fdcb51755be4fb8d5c9b02e4ff12ac267264c",
    "sql": "SELECT DISTINCT COUNT ( t2.paperid ) FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2010 AND t3.venuename = \"sigcse\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "1a760c0a99a85351e5a33ad433a3be289bb5cb4e6e179e26f5d95ec230997bda",
    "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t4.venuename = \"uist\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "dbcf3859bedb50e69f29c8e836baa30a8f77e5715092abbadf989e7c68590e4d",
    "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Su-In Lee\" AND t3.year < 2012;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "4c916a48333cdee9375eb1618021bb6e02fbff8236000a7ff938bfe964c243a7",
    "sql": "SELECT DISTINCT COUNT ( t3.paperid ) , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"semantic parsing\" GROUP BY t3.year ORDER BY t3.year DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "caa416fbb22a4992697ca59c74c716c638f19d66fa5eea4911ce5a106027146b",
    "sql": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid = t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid ) >= 5;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "e4f3b93f7c520ef8e0e172894aace7d2552ec64bfe0b4cf796d7a51cc05daaa9",
    "sql": "SELECT DISTINCT t3.citedpaperid , COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t2.venuename = \"sigcomm\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "f09011e886f471fb6afb1130b442b2561c9c154c62a54e9032a413d414b987e5",
    "sql": "SELECT DISTINCT t3.title FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN writes AS t4 ON t4.paperid = t2.paperid JOIN paper AS t3 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname LIKE \"Ranjit Jhala\" AND t5.keyphrasename = \"Liquid Haskell\";",
    "linq": "",
    "db_name": "scholar",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "8a0c8a4327e97fcbf0d0b0691e3a84735bd9d9060831c40d0ef0dea039b177af",
    "sql": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T2.maxOccupancy = T1.Adults + T1.Kids;",
    "linq": "",
    "db_name": "inn_1",
    "status": "QueryBuildFailed",
    "error": "Unknown comparison operator",
    "should_retest": false,
    "split": "Train"
  },
  {
    "id": "7ef8a5121a4dd0fd70e7f9536e7fa11d0b4fcf9629ecd3733ad404579d551176",
    "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code = T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1",
    "linq": "",
    "db_name": "assets_maintenance",
    "status": "QueryBuildFailed",
    "error": "called `Option::unwrap()` on a `None` value",
    "should_retest": false,
    "split": "Train"
  }
]