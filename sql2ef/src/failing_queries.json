[{"id": "8868c8eb7531e1e6f139790fad1b6ee9a999acc3978c9013e1dc087fe1890654", "dataset_name": "Spider", "sql": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1", "question": "Find the name of the train whose route runs through greatest number of stations.", "linq": "context.Trains.SelectMany(row => row.Stations, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.Name }).Take(1).ToList();", "db_name": "station_weather", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: Ananthapuri Express}]\", linq_results: \"[{0: Madurai Fast Passenger}]\" }", "should_retest": false}, {"id": "9436200a2295f557817067ffd1e0d75c90e76346f66250269ea49a3354f9e1c0", "dataset_name": "Spider", "sql": "SELECT count(DISTINCT eid) FROM Certificate", "question": "How many employees have certificate.", "linq": "context.Employees.Select(row => row.Id).Distinct().Count();", "db_name": "flight_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,48): error CS1061: 'Employee' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Employee' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.36", "should_retest": false}, {"id": "07205c083677fef3773456b84f2ecaaaab97575390a6af2461a0741e437df9ec", "dataset_name": "Spider", "sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "question": "Show ids for all employees who don't have a certificate.", "linq": "context.Employees.Select(row => row.Eid).Except(context.Employees.Select(row => row.Id)).ToList();", "db_name": "flight_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,96): error CS1061: 'Employee' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Employee' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.17", "should_retest": false}, {"id": "4a396cd1e8daae63224fa57d400c8fab67efc1ee4c461e452fff2fee02fe5f78", "dataset_name": "Spider", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1", "question": "Show the name of aircraft which fewest people have its certificate.", "linq": "context.Employees.SelectMany(row => row.Aids, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name }).Take(1).ToList();", "db_name": "flight_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,114): error CS1061: 'Employee' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Employee' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.95", "should_retest": true}, {"id": "e6a4ba3c7be53048b57f167cbb1d66bc414d78247350253dacb8b92e84247fcc", "dataset_name": "Spider", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.", "linq": "context.Employees.SelectMany(row => row.Aids, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Distance > 5000).GroupBy(row => new { row.T1.Id }).OrderBy(group => row.Count() >= 5).Select(group => new { group.First().T2.Name }).ToList();", "db_name": "flight_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,174): error CS0103: The name 'row' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.80", "should_retest": true}, {"id": "0984a2a5179c5b17f766fdb2ffda6996551fb7d2554271ce26d5780ef4479c0a", "dataset_name": "Spider", "sql": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code", "question": "Select all the data from the products and each product's manufacturer.", "linq": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Select(row => new { T1Code = rowT1..Code, T1Name = rowT1..Name, rowT1..Price, rowT1..Manufacturer, T2Code = rowT2..Code, T2Name = rowT2..Name, rowT2..Headquarter, rowT2..Founder, rowT2..Revenue }).ToList();", "db_name": "manufactory_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,309): error CS0103: The name 'Revenue' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    23 Error(s)\n\nTime Elapsed 00:00:01.52", "should_retest": true}, {"id": "a914edd03321f0999852bf23ae31ce20fa7017a710b668aee487d995b4587a71", "dataset_name": "Spider", "sql": "SELECT code ,  name ,  min(price) FROM products GROUP BY name", "question": "Select the code of the product that is cheapest in each product category.", "linq": "context.Products.GroupBy(row => new { row.Name }).Select(group => new { group.First().Code, group.Key.Name, MinPrice = group.Select(row => row.Price).Min() }).ToList();", "db_name": "manufactory_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 7, 1: CD drive, 2: 90}, {0: 10, 1: DVD burner, 2: 180}, {0: 11, 1: DVD drive, 2: 150}, {0: 4, 1: Floppy disk, 2: 5}, {0: 1, 1: Hard drive, 2: 240}, {0: 2, 1: Memory, 2: 120}, {0: 5, 1: Monitor, 2: 240}, {0: 8, 1: Printer, 2: 270}, {0: 9, 1: Toner cartridge, 2: 66}, {0: 3, 1: ZIP drive, 2: 150}]\", linq_results: \"[{0: 7, 1: CD drive, 2: 90}, {0: 10, 1: DVD burner, 2: 180}, {0: 6, 1: DVD drive, 2: 150}, {0: 4, 1: Floppy disk, 2: 5}, {0: 1, 1: Hard drive, 2: 240}, {0: 2, 1: Memory, 2: 120}, {0: 5, 1: Monitor, 2: 240}, {0: 8, 1: Printer, 2: 270}, {0: 9, 1: Toner cartridge, 2: 66}, {0: 3, 1: ZIP drive, 2: 150}]\" }", "should_retest": true}, {"id": "c614d5f7561bc3652db5e156cfed3f0303f423f2f076cd08ed8942483d6d57e4", "dataset_name": "Spider", "sql": "SELECT date FROM weather WHERE max_temperature_f  >  85", "question": "Give me the dates when the max temperature was higher than 85.", "linq": "context.Weathers.Where(row => row.MaxTemperatureF > \"85\").Select(row => new { row.Date }).ToList();", "db_name": "bike_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,42): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.74", "should_retest": true}, {"id": "e0278597fe7d3e8a65ae35970ad8cab216842b2d78aebbc976efaf7b3f253fce", "dataset_name": "Spider", "sql": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code", "question": "For each zip code, return the average mean temperature of August there.", "linq": "context.Weathers.Where(row => EF.Functions.Like(row.Date, \"8/%\")).GroupBy(row => new { row.ZipCode }).Select(group => new { group.Key.ZipCode, AverageMeanTemperatureF = group.Select(row => row.MeanTemperatureF).Average() }).ToList();", "db_name": "bike_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,181): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.78", "should_retest": true}, {"id": "beb3fc41404592b13b2a9e5045734f0d55f4a4a15cb1d23d91eb5cfe6ab31c49", "dataset_name": "Spider", "sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "question": "How many days had both mean humidity above 50 and mean visibility above 8?", "linq": "context.Weathers.Where(row => row.MeanHumidity > \"50\" && row.MeanVisibilityMiles > \"8\").Count();", "db_name": "bike_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,69): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.43", "should_retest": true}, {"id": "6e8a2947c4de29aa934de99e937fc75b9558701db6fdaffccea543ba9114c5af", "dataset_name": "Spider", "sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "question": "What is the zip code in which the average mean sea level pressure is the lowest?", "linq": "context.Weathers.GroupBy(row => new { row.ZipCode }).OrderBy(group => group.Average(row => row.MeanSeaLevelPressureInches)).Select(group => new { group.Key.ZipCode }).Take(1).ToList();", "db_name": "bike_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,103): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.43", "should_retest": true}, {"id": "4fa100e72f88080612c8130e5156029b0dc9de9a57490f60bddf2f201d5d8f0c", "dataset_name": "Spider", "sql": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "question": "When and in what zip code did max temperature reach 80?", "linq": "context.Weathers.Where(row => row.MaxTemperatureF >= \"80\").Select(row => new { row.Date, row.ZipCode }).ToList();", "db_name": "bike_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,42): error CS0019: Operator '>=' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.84", "should_retest": true}, {"id": "5975d8a5c34a7e59b2c1f26553bc9be4cb57b9d80bd70314c2a2bbb2b4f2345d", "dataset_name": "Spider", "sql": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60", "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.", "linq": "context.Trips.Join(context.Weathers, T1 => T1.ZipCode, T2 => T2.ZipCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ZipCode }).Where(group => group.Average(row => row.T2.MeanTemperatureF) > 60).Select(group => new { group.First().T1.Id }).ToList();", "db_name": "bike_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,26): error CS0411: The type arguments for method 'Enumerable.Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)' cannot be inferred from the usage. Try specifying the type arguments explicitly. [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.05", "should_retest": true}, {"id": "3343a3e4b3e9b92e1c2a5782ba7e76164517d358b9cbad24828089e59661b3fb", "dataset_name": "Spider", "sql": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "question": "For each zip code, return how many times max wind speed reached 25?", "linq": "context.Weathers.Where(row => row.MaxWindSpeedMph >= \"25\").GroupBy(row => new { row.ZipCode }).Select(group => new { group.Key.ZipCode, Count = group.Count() }).ToList();", "db_name": "bike_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,42): error CS0019: Operator '>=' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.97", "should_retest": true}, {"id": "ae771494015107c4879fe9a51727866f606c2c37d3d366ebb9a011bcef4f1ed2", "dataset_name": "Spider", "sql": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?", "linq": "context.Weathers.Where(row => row.MinDewPointF < context.Weathers.Where(row => row.ZipCode == 94107).Select(row => row.MinDewPointF).Min()).Select(row => new { row.Date, row.ZipCode }).ToList();", "db_name": "bike_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,42): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.84", "should_retest": true}, {"id": "0750d9ff9ed059deb7da523b9ad76d18a75a8eaf989264f4afd45d625f5fb278", "dataset_name": "Spider", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "question": "Find the zip code in which the average mean visibility is lower than 10.", "linq": "context.Weathers.GroupBy(row => new { row.ZipCode }).Where(group => group.Average(row => row.MeanVisibilityMiles) < 10).Select(group => new { group.Key.ZipCode }).ToList();", "db_name": "bike_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,101): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.91", "should_retest": true}, {"id": "4e73827e41084ceef802850bf669a0f046b973535dfc05211657f97b96d0ddcc", "dataset_name": "Spider", "sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "question": "Find all the zip codes in which the max dew point have never reached 70.", "linq": "context.Weathers.Where(row => row.ZipCode.HasValue).Select(row => ZipCode = row.ZipCode.Value).Distinct().Except(context.Weathers.Where(row => row.MaxDewPointF >= \"70\").Where(row => row.ZipCode.HasValue).Select(row => ZipCode = row.ZipCode.Value).Distinct()).ToList();", "db_name": "bike_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,230): error CS0103: The name 'ZipCode' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    3 Warning(s)\n    3 Error(s)\n\nTime Elapsed 00:00:01.97", "should_retest": true}, {"id": "1b8a7b56ca44b1f458b731ad52468b028e49d168d3447a5f66333989a7a922e1", "dataset_name": "Spider", "sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?", "linq": "context.Weathers.Where(row => row.MeanSeaLevelPressureInches >= 30.3 && row.MeanSeaLevelPressureInches <= 31).Select(row => new { row.Date }).ToList();", "db_name": "bike_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,84): error CS0019: Operator '<=' cannot be applied to operands of type 'string' and 'int' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.90", "should_retest": true}, {"id": "005ac176b532876636bb123b9e199525271264ce87790ef5009806fdd2075196", "dataset_name": "Spider", "sql": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "question": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.", "linq": "context.Weathers.Select(row => new { row.Date, Diff = row.MaxTemperatureF - row.MinTemperatureF }).OrderBy(row => row.Diff).Take(1).ToList();", "db_name": "bike_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,66): error CS0019: Operator '-' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.72", "should_retest": true}, {"id": "0f3156e27109140e9488a11d4cfa18fca2eb278134cfa75174775a52f2e385df", "dataset_name": "Spider", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100", "question": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.", "linq": "context.Weathers.GroupBy(row => new { row.ZipCode }).Where(group => group.Average(row => row.MeanHumidity) < 70).Where(group => group.Key.ZipCode.HasValue).Select(group => group.Key.ZipCode.Value).Intersect(context.Trips.GroupBy(row => new { row.ZipCode }).Where(group => group.Count() >= 100).Select(group => group.Key.ZipCode)).ToList();", "db_name": "bike_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,101): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.70", "should_retest": true}, {"id": "0406d91928580d376ff6f5fbba1bdfe1b8537713e442203cc44d37840eaa78dd", "dataset_name": "Spider", "sql": "SELECT count(*) ,  account_id FROM Financial_transactions", "question": "How many transaction does each account have? Show the number and account id.", "linq": "context.FinancialTransactions.Select(row => new { Count = row.Count(), row.AccountId }).ToList();", "db_name": "customers_and_invoices", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,74): error CS1061: 'FinancialTransaction' does not contain a definition for 'Count' and no accessible extension method 'Count' accepting a first argument of type 'FinancialTransaction' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46", "should_retest": true}, {"id": "3c1ac2ad2fd37cdca2b21951ececa27007e2d34a2163fb5f60e907eb37540145", "dataset_name": "Spider", "sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)", "question": "Show ids for all transactions whose amounts are greater than the average.", "linq": "context.FinancialTransactions.Where(row => row.TransactionAmount > context.FinancialTransactions.Select(row => (double) row.TransactionAmount).Average()).Select(row => new { row.TransactionId }).ToList();", "db_name": "customers_and_invoices", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,55): error CS0019: Operator '>' cannot be applied to operands of type 'decimal?' and 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    3 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.52", "should_retest": true}, {"id": "69087a5c7c8613f9bc81e1996705e7272f73a888b56e5da9327fe66b853101ab", "dataset_name": "Spider", "sql": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name", "question": "Show all product names and the total quantity ordered for each product name.", "linq": "context.OrderItems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ProductName }).Select(group => new { group.Key.ProductName, SumProductQuantity = group.Select(row => row.T1.ProductQuantity).Sum() }).ToList();", "db_name": "customers_and_invoices", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,231): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.76", "should_retest": true}, {"id": "fafc6fe116538821150355a89d448d22d7157f2f64b5aef14b8de216cdf13620", "dataset_name": "Spider", "sql": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id", "question": "Show order ids and the total quantity in each order.", "linq": "context.OrderItems.GroupBy(row => new { row.OrderId }).Select(group => new { group.Key.OrderId, SumProductQuantity = group.Select(row => row.ProductQuantity).Sum() }).ToList();", "db_name": "customers_and_invoices", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,129): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.58", "should_retest": true}, {"id": "21ee1c083ce60b325e234963b2cd7c6c1e2f5127db4058917b22d743168aa0b7", "dataset_name": "Spider", "sql": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type", "question": "Find the average age and experience working length of journalists working on different role type.", "linq": "context.Journalists.Join(context.NewsReports, t1 => t1.JournalistId, t2 => t2.JournalistId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.WorkType }).Select(group => new { AverageAge = group.Select(row => row.t1.Age).Average(), AverageYearsWorking = group.Select(row => row.t1.YearsWorking).Average(), group.Key.WorkType }).ToList();", "db_name": "news_report", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,207): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.63", "should_retest": true}, {"id": "0d85529962ee2623e836c4f1663f98d4600d40b26a5fee488b2bd63df33597c4", "dataset_name": "Spider", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000", "question": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.", "linq": "context.Files.Where(row => row.Formats == \"mp4\").Select(row => row.FId).Intersect(context.Songs.Where(row => row.Resolution < 1000).Where(row => row.FId.HasValue).Select(row => FId = row.FId.Value)).ToList();", "db_name": "music_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,189): error CS0103: The name 'FId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    3 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.54", "should_retest": true}, {"id": "37a4d65816d7ced88cf5238f21ffdd9f39aa377e6c678d5036dd8eac53b1ff53", "dataset_name": "Spider", "sql": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800", "question": "What is the average duration of songs that have mp3 format and resolution below 800?", "linq": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Formats == \"mp3\" && row.T2.Resolution < 800).Select(row => row.T1.Duration).ToList().Select(value => double.Parse(value)).Average();", "db_name": "music_1", "status": "CodeFailed", "error": "Unhandled exception. System.FormatException: The input string '2:56' was not in a correct format.", "should_retest": true}, {"id": "a70c72fd47b8056756614002b8a9a067d5a1e2e0bdb6f0a04517b1f4c29bf681", "dataset_name": "Spider", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720", "question": "What are the ids of songs that are available in either mp4 format or have resolution above 720?", "linq": "context.Files.Where(row => row.Formats == \"mp4\").Select(row => row.FId).Union(context.Songs.Where(row => row.Resolution > 720).Where(row => row.FId.HasValue).Select(row => FId = row.FId.Value)).ToList();", "db_name": "music_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,184): error CS0103: The name 'FId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    3 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.36", "should_retest": true}, {"id": "cccbf94961410e120c584641d710ac850223ff334a6357092daff339f14f2398", "dataset_name": "Spider", "sql": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank", "question": "How many captains with younger than 50 are in each rank?", "linq": "context.Captains.Where(row => row.Age < \"50\").GroupBy(row => new { row.Rank }).Select(group => new { Count = group.Count(), group.Key.Rank }).ToList();", "db_name": "ship_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,42): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.26", "should_retest": true}, {"id": "434d479406092f8479cfaceb4c2c22352204d228d2a2753159487b05dd830bed", "dataset_name": "Spider", "sql": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS", "question": "What are the average and minimum age of captains in different class?", "linq": "context.Captains.GroupBy(row => new { row.Class }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), MinAge = group.Select(row => row.Age).Min(), group.Key.Class }).ToList();", "db_name": "ship_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,98): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.52", "should_retest": true}, {"id": "aa162dc3c738fc2f2c971d2b37485a03d59aed58715d063be6f24c4efd7fb484", "dataset_name": "Spider", "sql": "SELECT product_name ,  typical_buying_price FROM products", "question": "What are the names and buying prices of all the products?", "linq": "context.Products.Select(row => new { row.ProductName, row.TypicalBuyingPrice }).ToList();", "db_name": "products_gen_characteristics", "status": "CodeFailed", "error": "Unhandled exception. System.FormatException: The input string '' was not in a correct format.", "should_retest": true}, {"id": "00bae437eefae148dd01c312f703c1c781c9f61d8a0613b9fcab37a918e8492b", "dataset_name": "Spider", "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000", "question": "Find the number of products with category \"Spices\" and typically sold above 1000.", "linq": "context.Products.Where(row => row.ProductCategoryCode == \"Spices\" && row.TypicalBuyingPrice > 1000).Count();", "db_name": "products_gen_characteristics", "status": "CodeFailed", "error": "Unhandled exception. Microsoft.Data.Sqlite.SqliteException (0x80004005): SQLite Error 1: 'The input string '' was not in a correct format.'.", "should_retest": true}, {"id": "026f6f2fe71e2a215c39efb6435f8dc5dc9d0499d69d38d608e4de2e1aacbde2", "dataset_name": "Spider", "sql": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"", "question": "What is the category and typical buying price  of the product with name \"cumin\"?", "linq": "context.Products.Where(row => row.ProductName == \"cumin\").Select(row => new { row.ProductCategoryCode, row.TypicalBuyingPrice }).ToList();", "db_name": "products_gen_characteristics", "status": "CodeFailed", "error": "Unhandled exception. System.FormatException: The input string '' was not in a correct format.", "should_retest": true}, {"id": "6060aba52af032a4f3ff14f29e817ce47a15db4f469173225b36f8284cfc15c4", "dataset_name": "Spider", "sql": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"", "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?", "linq": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).Where(row => row.t2.ColorDescription == \"yellow\").Select(row => new { row.t1.ProductName, row.t1.TypicalBuyingPrice, row.t1.TypicalSellingPrice }).ToList();", "db_name": "products_gen_characteristics", "status": "CodeFailed", "error": "Unhandled exception. System.FormatException: The input string '' was not in a correct format.", "should_retest": true}, {"id": "8085e11059b82ddad4ed8ab5e60c596b083228a450a74bc88ca2476bf33d3f87", "dataset_name": "Spider", "sql": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'", "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'", "linq": "context.TimedStatusOfThings.Join(context.Things, T1 => T1.ThingId, T2 => T2.ThingId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StatusOfThingCode == \"Close\" || row.T1.DateAndDate < \"2017-06-19 02:59:21\").Select(row => new { row.T2.ThingId, row.T2.TypeOfThingCode }).Distinct().ToList();", "db_name": "local_govt_and_lot", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,177): error CS0019: Operator '<' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.31", "should_retest": true}, {"id": "c406d701affa49a80e7bcc671aeac65858b46f27054fe98ea1318b44328c76e8", "dataset_name": "Spider", "sql": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations", "question": "Which organizations are not a parent organization of others? List the organization id.", "linq": "context.Organizations.Select(row => row.OrganizationId).Except(context.Organizations.Where(row => row.ParentOrganizationId.HasValue).Select(row => ParentOrganizationId = row.ParentOrganizationId.Value)).ToList();", "db_name": "local_govt_and_lot", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,159): error CS0103: The name 'ParentOrganizationId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    3 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.53", "should_retest": true}, {"id": "0d3e69cc3f0f1f4bd5f0c0264a55531b914de98d84c4096e17f820b6c6eaa423", "dataset_name": "Spider", "sql": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\"", "question": "Find the names of all wines produced in 2008.", "linq": "context.Wines.Where(row => row.Year == \"2008\").Select(row => new { row.Name }).ToList();", "db_name": "wine_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,39): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34", "should_retest": true}, {"id": "094f1fc3bfc684c7d4412ad5d053806bf89146604d16249545ab82ca81954a82", "dataset_name": "Spider", "sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1", "question": "What is the area of the appelation that produces the highest number of wines before the year of 2010?", "linq": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Appelation }).Where(group => group.T2.Year < 2010).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Area }).Take(1).ToList();", "db_name": "wine_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,186): error CS1061: 'IGrouping<<anonymous type: string Appelation>, <anonymous type: Appellation T1, Wine T2>>' does not contain a definition for 'T2' and no accessible extension method 'T2' accepting a first argument of type 'IGrouping<<anonymous type: string Appelation>, <anonymous type: Appellation T1, Wine T2>>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38", "should_retest": true}, {"id": "0512381a36d99ebec66c6f1207d44abffefdf6d0248dd188cb366bff3d0a30e6", "dataset_name": "Spider", "sql": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"", "question": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?", "linq": "context.Wines.Where(row => row.Year == 2009 && row.Grape == \"Zinfandel\").GroupBy(row => 1).Select(group => new { AveragePrice = group.Select(row => row.Price).Average(), AverageCases = group.Select(row => row.Cases).Average() }).ToList();", "db_name": "wine_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,197): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.54", "should_retest": true}, {"id": "5c7dff43c1a0688ef3c9d039b7b1d842cdf902e5097d57a9a8d6a938d78ea359", "dataset_name": "Spider", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "question": "Show the name of colleges that have at least two players in descending alphabetical order.", "linq": "context.MatchSeasons.GroupBy(row => new { row.College }).Where(group => group.Count() >= 2).OrderByDescending(group => group.College).Select(group => new { group.Key.College }).ToList();", "db_name": "match_season", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,137): error CS1061: 'IGrouping<<anonymous type: string College>, MatchSeason>' does not contain a definition for 'College' and no accessible extension method 'College' accepting a first argument of type 'IGrouping<<anonymous type: string College>, MatchSeason>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.69", "should_retest": true}, {"id": "b6b55b3bbbc9dc34073ebc86a3ef330f99f0131af13b47624bf58d40a71b368c", "dataset_name": "Spider", "sql": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'", "question": "What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?", "linq": "context.Grants.Join(context.Documents, T1 => T1.GrantId, T2 => T2.GrantId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SentDate < \"1986-08-26 20:49:27\").Select(row => row.T1.GrantAmount).Intersect(context.Grants.Where(row => row.GrantEndDate > \"1989-03-16 18:27:16\").Select(row => row.GrantAmount)).ToList();", "db_name": "tracking_grants_for_research", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,241): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.55", "should_retest": true}, {"id": "9b94f0e980773fa97ecdad42d99b5aebc2c150fd058ca181f6d341a07ae9e815", "dataset_name": "Spider", "sql": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000", "question": "Find the organisation ids and details of the organisations which are involved in", "linq": "context.Grants.Join(context.Organisations, T1 => T1.OrganisationId, T2 => T2.OrganisationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.OrganisationId }).Where(group => group.Sum(row => row.T1.GrantAmount) > 6000).Select(group => new { group.Key.OrganisationId, group.First().T2.OrganisationDetails }).ToList();", "db_name": "tracking_grants_for_research", "status": "CodeFailed", "error": "Unhandled exception. System.NotSupportedException: SQLite cannot apply aggregate operator 'Sum' on expressions of type 'decimal'. Convert the values to a supported type, or use LINQ to Objects to aggregate the results on the client side.", "should_retest": true}, {"id": "5247d1091b28827856d4f49b3daa1040492c723b6827f2ad4c3b0cc84b18ad60", "dataset_name": "Spider", "sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'", "question": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.", "linq": "context.Grants.Join(context.Documents, T1 => T1.GrantId, T2 => T2.GrantId, (T1, T2) => new { T1, T2 }).Join(context.DocumentTypes, joined => joined.T2.DocumentTypeCode, T3 => T3.DocumentTypeCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DocumentDescription == \"Regular\").Select(row => row.T1.GrantStartDate).Intersect(context.Grants.Join(context.Documents, T1 => T1.GrantId, T2 => T2.GrantId, (T1, T2) => new { T1, T2 }).Join(context.DocumentTypes, joined => joined.T2.DocumentTypeCode, T3 => T3.DocumentTypeCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DocumentDescription == \"Initial Application\").Select(row => row.T1.GrantStartDate)).ToList();", "db_name": "tracking_grants_for_research", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 1979-10-29 07:44:22}, {0: 1982-04-07 00:07:43}, {0: 2004-11-10 02:26:01}]\", linq_results: \"[{0: 1979-10-29 00:00:00, 1: 29, 2: Monday, 3: 302, 4: 7, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 44, 10: 10, 11: 2024-10-25 08:28:09, 12: 22, 13: 624456278620000000, 14: 07:44:22, 15: 2024-10-25 00:00:00, 16: 1979, 17: 2024-10-25 05:28:09}, {0: 1982-04-07 00:00:00, 1: 7, 2: Wednesday, 3: 97, 4: 0, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 7, 10: 4, 11: 2024-10-25 08:28:09, 12: 43, 13: 625225828630000000, 14: 00:07:43, 15: 2024-10-25 00:00:00, 16: 1982, 17: 2024-10-25 05:28:09}, {0: 2004-11-10 00:00:00, 1: 10, 2: Wednesday, 3: 315, 4: 2, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 26, 10: 11, 11: 2024-10-25 08:28:09, 12: 1, 13: 632356503610000000, 14: 02:26:01, 15: 2024-10-25 00:00:00, 16: 2004, 17: 2024-10-25 05:28:09}]\" }", "should_retest": true}, {"id": "662223f233b12a3682fecfc70c7c3e6d2f0fe18f60fa434bd11a4477d962e910", "dataset_name": "Spider", "sql": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'", "question": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?", "linq": "context.ProjectStaffs.Where(row => row.RoleCode == \"leader\" || row.DateFrom < \"1989-04-24 23:51:54\").Count();", "db_name": "tracking_grants_for_research", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,75): error CS0019: Operator '<' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.65", "should_retest": true}, {"id": "4b990cfd7117dc2481e892969fed78a8ecdaec5926aa2f918099f6ec8fac06e1", "dataset_name": "Spider", "sql": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'", "question": "What are the staff roles of the staff who", "linq": "context.ProjectStaffs.Where(row => row.DateFrom > \"2003-04-19 15:06:20\" && row.DateTo < \"2016-03-15 00:33:18\").Select(row => new { row.RoleCode }).ToList();", "db_name": "tracking_grants_for_research", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,87): error CS0019: Operator '<' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.52", "should_retest": true}, {"id": "6d119c1a26b13ec6db3756988014cf6b469f5586a556cac426c05166ef79ad78", "dataset_name": "Spider", "sql": "SELECT * FROM employees WHERE department_id  =  \"null\"", "question": "Return all the information for all employees without any department number.", "linq": "context.Employees.Where(row => row.DepartmentId == \"null\").Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Email, row.PhoneNumber, row.HireDate, row.JobId, row.Salary, row.CommissionPct, row.ManagerId, row.DepartmentId }).ToList();", "db_name": "hr_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,43): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.35", "should_retest": true}, {"id": "9bf5a6fef91eb7889d24cbc811455d5d5ce6433396f6d3dcb46ff061974b56dd", "dataset_name": "Spider", "sql": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'", "question": "when is the hire date for those employees whose first name does not containing the letter M?", "linq": "context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%M%\")).Select(row => new { row.HireDate }).ToList();", "db_name": "hr_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 1987-06-17}, {0: 1987-06-18}, {0: 1987-06-19}, {0: 1987-06-20}, {0: 1987-06-21}, {0: 1987-06-22}, {0: 1987-06-23}, {0: 1987-06-24}, {0: 1987-06-25}, {0: 1987-06-26}, {0: 1987-06-27}, {0: 1987-06-30}, {0: 1987-07-01}, {0: 1987-07-02}, {0: 1987-07-03}, {0: 1987-07-04}, {0: 1987-07-05}, {0: 1987-07-06}, {0: 1987-07-10}, {0: 1987-07-11}, {0: 1987-07-12}, {0: 1987-07-13}, {0: 1987-07-15}, {0: 1987-07-16}, {0: 1987-07-19}, {0: 1987-07-20}, {0: 1987-07-22}, {0: 1987-07-23}, {0: 1987-07-24}, {0: 1987-07-25}, {0: 1987-07-26}, {0: 1987-07-27}, {0: 1987-07-28}, {0: 1987-07-29}, {0: 1987-07-30}, {0: 1987-07-31}, {0: 1987-08-01}, {0: 1987-08-02}, {0: 1987-08-03}, {0: 1987-08-04}, {0: 1987-08-05}, {0: 1987-08-06}, {0: 1987-08-07}, {0: 1987-08-08}, {0: 1987-08-09}, {0: 1987-08-10}, {0: 1987-08-11}, {0: 1987-08-12}, {0: 1987-08-13}, {0: 1987-08-14}, {0: 1987-08-15}, {0: 1987-08-16}, {0: 1987-08-17}, {0: 1987-08-18}, {0: 1987-08-19}, {0: 1987-08-21}, {0: 1987-08-22}, {0: 1987-08-24}, {0: 1987-08-25}, {0: 1987-08-26}, {0: 1987-08-28}, {0: 1987-08-29}, {0: 1987-08-30}, {0: 1987-08-31}, {0: 1987-09-01}, {0: 1987-09-02}, {0: 1987-09-04}, {0: 1987-09-05}, {0: 1987-09-06}, {0: 1987-09-08}, {0: 1987-09-09}, {0: 1987-09-10}, {0: 1987-09-11}, {0: 1987-09-12}, {0: 1987-09-13}, {0: 1987-09-14}, {0: 1987-09-16}, {0: 1987-09-17}, {0: 1987-09-18}, {0: 1987-09-20}, {0: 1987-09-21}, {0: 1987-09-22}, {0: 1987-09-23}, {0: 1987-09-24}, {0: 1987-09-25}, {0: 1987-09-27}, {0: 1987-09-28}, {0: 1987-09-30}]\", linq_results: \"[{0: 28.06.1987}, {0: 29.06.1987}, {0: 07.07.1987}, {0: 08.07.1987}, {0: 09.07.1987}, {0: 14.07.1987}, {0: 17.07.1987}, {0: 18.07.1987}, {0: 21.07.1987}, {0: 20.08.1987}, {0: 23.08.1987}, {0: 27.08.1987}, {0: 03.09.1987}, {0: 07.09.1987}, {0: 15.09.1987}, {0: 19.09.1987}, {0: 26.09.1987}, {0: 29.09.1987}, {0: 01.10.1987}]\" }", "should_retest": true}, {"id": "af2a49905f8326e3d69266c5291705cb086403b7a0be7c3e31406ac69f036a23", "dataset_name": "Spider", "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'", "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.", "linq": "context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%M%\")).Select(row => new { row.FirstName, row.LastName, row.HireDate, row.Salary, row.DepartmentId }).ToList();", "db_name": "hr_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: Steven, 1: King, 2: 1987-06-17, 3: 24000, 4: 90}, {0: Neena, 1: Kochhar, 2: 1987-06-18, 3: 17000, 4: 90}, {0: Lex, 1: De Haan, 2: 1987-06-19, 3: 17000, 4: 90}, {0: Alexander, 1: Hunold, 2: 1987-06-20, 3: 9000, 4: 60}, {0: Bruce, 1: Ernst, 2: 1987-06-21, 3: 6000, 4: 60}, {0: David, 1: Austin, 2: 1987-06-22, 3: 4800, 4: 60}, {0: Valli, 1: Pataballa, 2: 1987-06-23, 3: 4800, 4: 60}, {0: Diana, 1: Lorentz, 2: 1987-06-24, 3: 4200, 4: 60}, {0: Nancy, 1: Greenberg, 2: 1987-06-25, 3: 12000, 4: 100}, {0: Daniel, 1: Faviet, 2: 1987-06-26, 3: 9000, 4: 100}, {0: John, 1: Chen, 2: 1987-06-27, 3: 8200, 4: 100}, {0: Luis, 1: Popp, 2: 1987-06-30, 3: 6900, 4: 100}, {0: Den, 1: Raphaely, 2: 1987-07-01, 3: 11000, 4: 30}, {0: Alexander, 1: Khoo, 2: 1987-07-02, 3: 3100, 4: 30}, {0: Shelli, 1: Baida, 2: 1987-07-03, 3: 2900, 4: 30}, {0: Sigal, 1: Tobias, 2: 1987-07-04, 3: 2800, 4: 30}, {0: Guy, 1: Himuro, 2: 1987-07-05, 3: 2600, 4: 30}, {0: Karen, 1: Colmenares, 2: 1987-07-06, 3: 2500, 4: 30}, {0: Shanta, 1: Vollman, 2: 1987-07-10, 3: 6500, 4: 50}, {0: Kevin, 1: Mourgos, 2: 1987-07-11, 3: 5800, 4: 50}, {0: Julia, 1: Nayer, 2: 1987-07-12, 3: 3200, 4: 50}, {0: Irene, 1: Mikkilineni, 2: 1987-07-13, 3: 2700, 4: 50}, {0: Steven, 1: Markle, 2: 1987-07-15, 3: 2200, 4: 50}, {0: Laura, 1: Bissot, 2: 1987-07-16, 3: 3300, 4: 50}, {0: TJ, 1: Olson, 2: 1987-07-19, 3: 2100, 4: 50}, {0: Jason, 1: Mallin, 2: 1987-07-20, 3: 3300, 4: 50}, {0: Ki, 1: Gee, 2: 1987-07-22, 3: 2400, 4: 50}, {0: Hazel, 1: Philtanker, 2: 1987-07-23, 3: 2200, 4: 50}, {0: Renske, 1: Ladwig, 2: 1987-07-24, 3: 3600, 4: 50}, {0: Stephen, 1: Stiles, 2: 1987-07-25, 3: 3200, 4: 50}, {0: John, 1: Seo, 2: 1987-07-26, 3: 2700, 4: 50}, {0: Joshua, 1: Patel, 2: 1987-07-27, 3: 2500, 4: 50}, {0: Trenna, 1: Rajs, 2: 1987-07-28, 3: 3500, 4: 50}, {0: Curtis, 1: Davies, 2: 1987-07-29, 3: 3100, 4: 50}, {0: Randall, 1: Matos, 2: 1987-07-30, 3: 2600, 4: 50}, {0: Peter, 1: Vargas, 2: 1987-07-31, 3: 2500, 4: 50}, {0: John, 1: Russell, 2: 1987-08-01, 3: 14000, 4: 80}, {0: Karen, 1: Partners, 2: 1987-08-02, 3: 13500, 4: 80}, {0: Alberto, 1: Errazuriz, 2: 1987-08-03, 3: 12000, 4: 80}, {0: Gerald, 1: Cambrault, 2: 1987-08-04, 3: 11000, 4: 80}, {0: Eleni, 1: Zlotkey, 2: 1987-08-05, 3: 10500, 4: 80}, {0: Peter, 1: Tucker, 2: 1987-08-06, 3: 10000, 4: 80}, {0: David, 1: Bernstein, 2: 1987-08-07, 3: 9500, 4: 80}, {0: Peter, 1: Hall, 2: 1987-08-08, 3: 9000, 4: 80}, {0: Christopher, 1: Olsen, 2: 1987-08-09, 3: 8000, 4: 80}, {0: Nanette, 1: Cambrault, 2: 1987-08-10, 3: 7500, 4: 80}, {0: Oliver, 1: Tuvault, 2: 1987-08-11, 3: 7000, 4: 80}, {0: Janette, 1: King, 2: 1987-08-12, 3: 10000, 4: 80}, {0: Patrick, 1: Sully, 2: 1987-08-13, 3: 9500, 4: 80}, {0: Allan, 1: McEwen, 2: 1987-08-14, 3: 9000, 4: 80}, {0: Lindsey, 1: Smith, 2: 1987-08-15, 3: 8000, 4: 80}, {0: Louise, 1: Doran, 2: 1987-08-16, 3: 7500, 4: 80}, {0: Sarath, 1: Sewall, 2: 1987-08-17, 3: 7000, 4: 80}, {0: Clara, 1: Vishney, 2: 1987-08-18, 3: 10500, 4: 80}, {0: Danielle, 1: Greene, 2: 1987-08-19, 3: 9500, 4: 80}, {0: David, 1: Lee, 2: 1987-08-21, 3: 6800, 4: 80}, {0: Sundar, 1: Ande, 2: 1987-08-22, 3: 6400, 4: 80}, {0: Lisa, 1: Ozer, 2: 1987-08-24, 3: 11500, 4: 80}, {0: Harrison, 1: Bloom, 2: 1987-08-25, 3: 10000, 4: 80}, {0: Tayler, 1: Fox, 2: 1987-08-26, 3: 9600, 4: 80}, {0: Elizabeth, 1: Bates, 2: 1987-08-28, 3: 7300, 4: 80}, {0: Sundita, 1: Kumar, 2: 1987-08-29, 3: 6100, 4: 80}, {0: Ellen, 1: Abel, 2: 1987-08-30, 3: 11000, 4: 80}, {0: Alyssa, 1: Hutton, 2: 1987-08-31, 3: 8800, 4: 80}, {0: Jonathon, 1: Taylor, 2: 1987-09-01, 3: 8600, 4: 80}, {0: Jack, 1: Livingston, 2: 1987-09-02, 3: 8400, 4: 80}, {0: Charles, 1: Johnson, 2: 1987-09-04, 3: 6200, 4: 80}, {0: Winston, 1: Taylor, 2: 1987-09-05, 3: 3200, 4: 50}, {0: Jean, 1: Fleaur, 2: 1987-09-06, 3: 3100, 4: 50}, {0: Girard, 1: Geoni, 2: 1987-09-08, 3: 2800, 4: 50}, {0: Nandita, 1: Sarchand, 2: 1987-09-09, 3: 4200, 4: 50}, {0: Alexis, 1: Bull, 2: 1987-09-10, 3: 4100, 4: 50}, {0: Julia, 1: Dellinger, 2: 1987-09-11, 3: 3400, 4: 50}, {0: Anthony, 1: Cabrio, 2: 1987-09-12, 3: 3000, 4: 50}, {0: Kelly, 1: Chung, 2: 1987-09-13, 3: 3800, 4: 50}, {0: Jennifer, 1: Dilly, 2: 1987-09-14, 3: 3600, 4: 50}, {0: Randall, 1: Perkins, 2: 1987-09-16, 3: 2500, 4: 50}, {0: Sarah, 1: Bell, 2: 1987-09-17, 3: 4000, 4: 50}, {0: Britney, 1: Everett, 2: 1987-09-18, 3: 3900, 4: 50}, {0: Vance, 1: Jones, 2: 1987-09-20, 3: 2800, 4: 50}, {0: Alana, 1: Walsh, 2: 1987-09-21, 3: 3100, 4: 50}, {0: Kevin, 1: Feeney, 2: 1987-09-22, 3: 3000, 4: 50}, {0: Donald, 1: OConnell, 2: 1987-09-23, 3: 2600, 4: 50}, {0: Douglas, 1: Grant, 2: 1987-09-24, 3: 2600, 4: 50}, {0: Jennifer, 1: Whalen, 2: 1987-09-25, 3: 4400, 4: 10}, {0: Pat, 1: Fay, 2: 1987-09-27, 3: 6000, 4: 20}, {0: Susan, 1: Mavris, 2: 1987-09-28, 3: 6500, 4: 40}, {0: Shelley, 1: Higgins, 2: 1987-09-30, 3: 12000, 4: 110}]\", linq_results: \"[{0: Ismael, 1: Sciarra, 2: 28.06.1987, 3: 7700, 4: 100}, {0: Jose Manuel, 1: Urman, 2: 29.06.1987, 3: 7800, 4: 100}, {0: Matthew, 1: Weiss, 2: 07.07.1987, 3: 8000, 4: 50}, {0: Adam, 1: Fripp, 2: 08.07.1987, 3: 8200, 4: 50}, {0: Payam, 1: Kaufling, 2: 09.07.1987, 3: 7900, 4: 50}, {0: James, 1: Landry, 2: 14.07.1987, 3: 2400, 4: 50}, {0: Mozhe, 1: Atkinson, 2: 17.07.1987, 3: 2800, 4: 50}, {0: James, 1: Marlow, 2: 18.07.1987, 3: 2500, 4: 50}, {0: Michael, 1: Rogers, 2: 21.07.1987, 3: 2900, 4: 50}, {0: Mattea, 1: Marvins, 2: 20.08.1987, 3: 7200, 4: 80}, {0: Amit, 1: Banda, 2: 23.08.1987, 3: 6200, 4: 80}, {0: William, 1: Smith, 2: 27.08.1987, 3: 7400, 4: 80}, {0: Kimberely, 1: Grant, 2: 03.09.1987, 3: 7000, 4: 0}, {0: Martha, 1: Sullivan, 2: 07.09.1987, 3: 2500, 4: 50}, {0: Timothy, 1: Gates, 2: 15.09.1987, 3: 2900, 4: 50}, {0: Samuel, 1: McCain, 2: 19.09.1987, 3: 3200, 4: 50}, {0: Michael, 1: Hartstein, 2: 26.09.1987, 3: 13000, 4: 20}, {0: Hermann, 1: Baer, 2: 29.09.1987, 3: 10000, 4: 70}, {0: William, 1: Gietz, 2: 01.10.1987, 3: 8300, 4: 110}]\" }", "should_retest": true}, {"id": "718ddc44a9c42e418c8898ea5083978d64bd114a02e113cbb4f7543facbc4e3c", "dataset_name": "Spider", "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id", "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.", "linq": "context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%M%\")).OrderBy(row => row.DepartmentId).Select(row => new { row.FirstName, row.LastName, row.HireDate, row.Salary, row.DepartmentId }).ToList();", "db_name": "hr_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: Jennifer, 1: Whalen, 2: 1987-09-25, 3: 4400, 4: 10}, {0: Pat, 1: Fay, 2: 1987-09-27, 3: 6000, 4: 20}, {0: Den, 1: Raphaely, 2: 1987-07-01, 3: 11000, 4: 30}, {0: Alexander, 1: Khoo, 2: 1987-07-02, 3: 3100, 4: 30}, {0: Shelli, 1: Baida, 2: 1987-07-03, 3: 2900, 4: 30}, {0: Sigal, 1: Tobias, 2: 1987-07-04, 3: 2800, 4: 30}, {0: Guy, 1: Himuro, 2: 1987-07-05, 3: 2600, 4: 30}, {0: Karen, 1: Colmenares, 2: 1987-07-06, 3: 2500, 4: 30}, {0: Susan, 1: Mavris, 2: 1987-09-28, 3: 6500, 4: 40}, {0: Shanta, 1: Vollman, 2: 1987-07-10, 3: 6500, 4: 50}, {0: Kevin, 1: Mourgos, 2: 1987-07-11, 3: 5800, 4: 50}, {0: Julia, 1: Nayer, 2: 1987-07-12, 3: 3200, 4: 50}, {0: Irene, 1: Mikkilineni, 2: 1987-07-13, 3: 2700, 4: 50}, {0: Steven, 1: Markle, 2: 1987-07-15, 3: 2200, 4: 50}, {0: Laura, 1: Bissot, 2: 1987-07-16, 3: 3300, 4: 50}, {0: TJ, 1: Olson, 2: 1987-07-19, 3: 2100, 4: 50}, {0: Jason, 1: Mallin, 2: 1987-07-20, 3: 3300, 4: 50}, {0: Ki, 1: Gee, 2: 1987-07-22, 3: 2400, 4: 50}, {0: Hazel, 1: Philtanker, 2: 1987-07-23, 3: 2200, 4: 50}, {0: Renske, 1: Ladwig, 2: 1987-07-24, 3: 3600, 4: 50}, {0: Stephen, 1: Stiles, 2: 1987-07-25, 3: 3200, 4: 50}, {0: John, 1: Seo, 2: 1987-07-26, 3: 2700, 4: 50}, {0: Joshua, 1: Patel, 2: 1987-07-27, 3: 2500, 4: 50}, {0: Trenna, 1: Rajs, 2: 1987-07-28, 3: 3500, 4: 50}, {0: Curtis, 1: Davies, 2: 1987-07-29, 3: 3100, 4: 50}, {0: Randall, 1: Matos, 2: 1987-07-30, 3: 2600, 4: 50}, {0: Peter, 1: Vargas, 2: 1987-07-31, 3: 2500, 4: 50}, {0: Winston, 1: Taylor, 2: 1987-09-05, 3: 3200, 4: 50}, {0: Jean, 1: Fleaur, 2: 1987-09-06, 3: 3100, 4: 50}, {0: Girard, 1: Geoni, 2: 1987-09-08, 3: 2800, 4: 50}, {0: Nandita, 1: Sarchand, 2: 1987-09-09, 3: 4200, 4: 50}, {0: Alexis, 1: Bull, 2: 1987-09-10, 3: 4100, 4: 50}, {0: Julia, 1: Dellinger, 2: 1987-09-11, 3: 3400, 4: 50}, {0: Anthony, 1: Cabrio, 2: 1987-09-12, 3: 3000, 4: 50}, {0: Kelly, 1: Chung, 2: 1987-09-13, 3: 3800, 4: 50}, {0: Jennifer, 1: Dilly, 2: 1987-09-14, 3: 3600, 4: 50}, {0: Randall, 1: Perkins, 2: 1987-09-16, 3: 2500, 4: 50}, {0: Sarah, 1: Bell, 2: 1987-09-17, 3: 4000, 4: 50}, {0: Britney, 1: Everett, 2: 1987-09-18, 3: 3900, 4: 50}, {0: Vance, 1: Jones, 2: 1987-09-20, 3: 2800, 4: 50}, {0: Alana, 1: Walsh, 2: 1987-09-21, 3: 3100, 4: 50}, {0: Kevin, 1: Feeney, 2: 1987-09-22, 3: 3000, 4: 50}, {0: Donald, 1: OConnell, 2: 1987-09-23, 3: 2600, 4: 50}, {0: Douglas, 1: Grant, 2: 1987-09-24, 3: 2600, 4: 50}, {0: Alexander, 1: Hunold, 2: 1987-06-20, 3: 9000, 4: 60}, {0: Bruce, 1: Ernst, 2: 1987-06-21, 3: 6000, 4: 60}, {0: David, 1: Austin, 2: 1987-06-22, 3: 4800, 4: 60}, {0: Valli, 1: Pataballa, 2: 1987-06-23, 3: 4800, 4: 60}, {0: Diana, 1: Lorentz, 2: 1987-06-24, 3: 4200, 4: 60}, {0: John, 1: Russell, 2: 1987-08-01, 3: 14000, 4: 80}, {0: Karen, 1: Partners, 2: 1987-08-02, 3: 13500, 4: 80}, {0: Alberto, 1: Errazuriz, 2: 1987-08-03, 3: 12000, 4: 80}, {0: Gerald, 1: Cambrault, 2: 1987-08-04, 3: 11000, 4: 80}, {0: Eleni, 1: Zlotkey, 2: 1987-08-05, 3: 10500, 4: 80}, {0: Peter, 1: Tucker, 2: 1987-08-06, 3: 10000, 4: 80}, {0: David, 1: Bernstein, 2: 1987-08-07, 3: 9500, 4: 80}, {0: Peter, 1: Hall, 2: 1987-08-08, 3: 9000, 4: 80}, {0: Christopher, 1: Olsen, 2: 1987-08-09, 3: 8000, 4: 80}, {0: Nanette, 1: Cambrault, 2: 1987-08-10, 3: 7500, 4: 80}, {0: Oliver, 1: Tuvault, 2: 1987-08-11, 3: 7000, 4: 80}, {0: Janette, 1: King, 2: 1987-08-12, 3: 10000, 4: 80}, {0: Patrick, 1: Sully, 2: 1987-08-13, 3: 9500, 4: 80}, {0: Allan, 1: McEwen, 2: 1987-08-14, 3: 9000, 4: 80}, {0: Lindsey, 1: Smith, 2: 1987-08-15, 3: 8000, 4: 80}, {0: Louise, 1: Doran, 2: 1987-08-16, 3: 7500, 4: 80}, {0: Sarath, 1: Sewall, 2: 1987-08-17, 3: 7000, 4: 80}, {0: Clara, 1: Vishney, 2: 1987-08-18, 3: 10500, 4: 80}, {0: Danielle, 1: Greene, 2: 1987-08-19, 3: 9500, 4: 80}, {0: David, 1: Lee, 2: 1987-08-21, 3: 6800, 4: 80}, {0: Sundar, 1: Ande, 2: 1987-08-22, 3: 6400, 4: 80}, {0: Lisa, 1: Ozer, 2: 1987-08-24, 3: 11500, 4: 80}, {0: Harrison, 1: Bloom, 2: 1987-08-25, 3: 10000, 4: 80}, {0: Tayler, 1: Fox, 2: 1987-08-26, 3: 9600, 4: 80}, {0: Elizabeth, 1: Bates, 2: 1987-08-28, 3: 7300, 4: 80}, {0: Sundita, 1: Kumar, 2: 1987-08-29, 3: 6100, 4: 80}, {0: Ellen, 1: Abel, 2: 1987-08-30, 3: 11000, 4: 80}, {0: Alyssa, 1: Hutton, 2: 1987-08-31, 3: 8800, 4: 80}, {0: Jonathon, 1: Taylor, 2: 1987-09-01, 3: 8600, 4: 80}, {0: Jack, 1: Livingston, 2: 1987-09-02, 3: 8400, 4: 80}, {0: Charles, 1: Johnson, 2: 1987-09-04, 3: 6200, 4: 80}, {0: Steven, 1: King, 2: 1987-06-17, 3: 24000, 4: 90}, {0: Neena, 1: Kochhar, 2: 1987-06-18, 3: 17000, 4: 90}, {0: Lex, 1: De Haan, 2: 1987-06-19, 3: 17000, 4: 90}, {0: Nancy, 1: Greenberg, 2: 1987-06-25, 3: 12000, 4: 100}, {0: Daniel, 1: Faviet, 2: 1987-06-26, 3: 9000, 4: 100}, {0: John, 1: Chen, 2: 1987-06-27, 3: 8200, 4: 100}, {0: Luis, 1: Popp, 2: 1987-06-30, 3: 6900, 4: 100}, {0: Shelley, 1: Higgins, 2: 1987-09-30, 3: 12000, 4: 110}]\", linq_results: \"[{0: Kimberely, 1: Grant, 2: 03.09.1987, 3: 7000, 4: 0}, {0: Michael, 1: Hartstein, 2: 26.09.1987, 3: 13000, 4: 20}, {0: Matthew, 1: Weiss, 2: 07.07.1987, 3: 8000, 4: 50}, {0: Adam, 1: Fripp, 2: 08.07.1987, 3: 8200, 4: 50}, {0: Payam, 1: Kaufling, 2: 09.07.1987, 3: 7900, 4: 50}, {0: James, 1: Landry, 2: 14.07.1987, 3: 2400, 4: 50}, {0: Mozhe, 1: Atkinson, 2: 17.07.1987, 3: 2800, 4: 50}, {0: James, 1: Marlow, 2: 18.07.1987, 3: 2500, 4: 50}, {0: Michael, 1: Rogers, 2: 21.07.1987, 3: 2900, 4: 50}, {0: Martha, 1: Sullivan, 2: 07.09.1987, 3: 2500, 4: 50}, {0: Timothy, 1: Gates, 2: 15.09.1987, 3: 2900, 4: 50}, {0: Samuel, 1: McCain, 2: 19.09.1987, 3: 3200, 4: 50}, {0: Hermann, 1: Baer, 2: 29.09.1987, 3: 10000, 4: 70}, {0: Mattea, 1: Marvins, 2: 20.08.1987, 3: 7200, 4: 80}, {0: Amit, 1: Banda, 2: 23.08.1987, 3: 6200, 4: 80}, {0: William, 1: Smith, 2: 27.08.1987, 3: 7400, 4: 80}, {0: Ismael, 1: Sciarra, 2: 28.06.1987, 3: 7700, 4: 100}, {0: Jose Manuel, 1: Urman, 2: 29.06.1987, 3: 7800, 4: 100}, {0: William, 1: Gietz, 2: 01.10.1987, 3: 8300, 4: 110}]\" }", "should_retest": true}, {"id": "007d6cb4b0aaabca45e282b930649d7fa2cf7fa80ede688dc6af9f579766df91", "dataset_name": "Spider", "sql": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40", "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.", "linq": "context.Employees.Where(row => row.Salary >= 8000 && row.Salary <= 12000 && row.CommissionPct != \"null\" || row.DepartmentId != 40).Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Email, row.PhoneNumber, row.HireDate, row.JobId, row.Salary, row.CommissionPct, row.ManagerId, row.DepartmentId }).ToList();", "db_name": "hr_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,88): error CS0019: Operator '!=' cannot be applied to operands of type 'decimal?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.63", "should_retest": true}, {"id": "87f2f1d5ae408fafd3323a2ed3c12e0bccd4f787860d9dc6d7a57a919a9d0fc3", "dataset_name": "Spider", "sql": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"", "question": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?", "linq": "context.Employees.Where(row => row.CommissionPct == \"null\").Select(row => new { row.FirstName, row.LastName, row.Salary }).ToList();", "db_name": "hr_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,43): error CS0019: Operator '==' cannot be applied to operands of type 'decimal?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.72", "should_retest": true}, {"id": "c334e6f98efc337378378f05ed9defcc752f20f7e046b3b91f3cef4237f0979a", "dataset_name": "Spider", "sql": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'", "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.", "linq": "context.Employees.Where(row => row.HireDate >= '2007-11-05' && row.HireDate <= '2009-07-05').Select(row => new { row.JobId, row.HireDate }).ToList();", "db_name": "hr_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,91): error CS1012: Too many characters in character literal [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:00.67", "should_retest": true}, {"id": "014b50ba5d124ab51c551797a2a4bd91901b3f08991fc5398810d2d137d73ee8", "dataset_name": "Spider", "sql": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"", "question": "Find the salary and manager number for those employees who is working under a manager.", "linq": "context.Employees.Where(row => row.ManagerId != \"null\").Select(row => new { row.Salary, row.ManagerId }).ToList();", "db_name": "hr_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,43): error CS0019: Operator '!=' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.26", "should_retest": true}, {"id": "b20c875e2c5bb033ead5f696fb5e54a5fac9a040b7d1097edf22e444802192e4", "dataset_name": "Spider", "sql": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'", "question": "display all the details from Employees table for those employees who was hired before 2002-06-21.", "linq": "context.Employees.Where(row => row.HireDate < \"2002-06-21\").Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Email, row.PhoneNumber, row.HireDate, row.JobId, row.Salary, row.CommissionPct, row.ManagerId, row.DepartmentId }).ToList();", "db_name": "hr_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,43): error CS0019: Operator '<' cannot be applied to operands of type 'DateOnly' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.35", "should_retest": true}, {"id": "50ddd35eb875beb1caa2a286758f578394bbe09dd2e4bc8b6eef68e314f0f388", "dataset_name": "Spider", "sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC", "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.", "linq": "context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%D%\") || EF.Functions.Like(row.FirstName, \"%S%\")).OrderByDescending(row => row.Salary).Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Email, row.PhoneNumber, row.HireDate, row.JobId, row.Salary, row.CommissionPct, row.ManagerId, row.DepartmentId }).ToList();", "db_name": "hr_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 100, 1: Steven, 2: King, 3: SKING, 4: 515.123.4567, 5: 1987-06-17, 6: AD_PRES, 7: 24000, 8: 0, 9: 0, 10: 90}, {0: 205, 1: Shelley, 2: Higgins, 3: SHIGGINS, 4: 515.123.8080, 5: 1987-09-30, 6: AC_MGR, 7: 12000, 8: 0, 9: 101, 10: 110}, {0: 168, 1: Lisa, 2: Ozer, 3: LOZER, 4: 011.44.1343.929268, 5: 1987-08-24, 6: SA_REP, 7: 11500, 8: 0.25, 9: 148, 10: 80}, {0: 114, 1: Den, 2: Raphaely, 3: DRAPHEAL, 4: 515.127.4561, 5: 1987-07-01, 6: PU_MAN, 7: 11000, 8: 0, 9: 100, 10: 30}, {0: 148, 1: Gerald, 2: Cambrault, 3: GCAMBRAU, 4: 011.44.1344.619268, 5: 1987-08-04, 6: SA_MAN, 7: 11000, 8: 0.3, 9: 100, 10: 80}, {0: 169, 1: Harrison, 2: Bloom, 3: HBLOOM, 4: 011.44.1343.829268, 5: 1987-08-25, 6: SA_REP, 7: 10000, 8: 0.2, 9: 148, 10: 80}, {0: 151, 1: David, 2: Bernstein, 3: DBERNSTE, 4: 011.44.1344.345268, 5: 1987-08-07, 6: SA_REP, 7: 9500, 8: 0.25, 9: 145, 10: 80}, {0: 163, 1: Danielle, 2: Greene, 3: DGREENE, 4: 011.44.1346.229268, 5: 1987-08-19, 6: SA_REP, 7: 9500, 8: 0.15, 9: 147, 10: 80}, {0: 103, 1: Alexander, 2: Hunold, 3: AHUNOLD, 4: 590.423.4567, 5: 1987-06-20, 6: IT_PROG, 7: 9000, 8: 0, 9: 102, 10: 60}, {0: 109, 1: Daniel, 2: Faviet, 3: DFAVIET, 4: 515.124.4169, 5: 1987-06-26, 6: FI_ACCOUNT, 7: 9000, 8: 0, 9: 108, 10: 100}, {0: 175, 1: Alyssa, 2: Hutton, 3: AHUTTON, 4: 011.44.1644.429266, 5: 1987-08-31, 6: SA_REP, 7: 8800, 8: 0.25, 9: 149, 10: 80}, {0: 121, 1: Adam, 2: Fripp, 3: AFRIPP, 4: 650.123.2234, 5: 1987-07-08, 6: ST_MAN, 7: 8200, 8: 0, 9: 100, 10: 50}, {0: 153, 1: Christopher, 2: Olsen, 3: COLSEN, 4: 011.44.1344.498718, 5: 1987-08-09, 6: SA_REP, 7: 8000, 8: 0.2, 9: 145, 10: 80}, {0: 159, 1: Lindsey, 2: Smith, 3: LSMITH, 4: 011.44.1345.729268, 5: 1987-08-15, 6: SA_REP, 7: 8000, 8: 0.3, 9: 146, 10: 80}, {0: 112, 1: Jose Manuel, 2: Urman, 3: JMURMAN, 4: 515.124.4469, 5: 1987-06-29, 6: FI_ACCOUNT, 7: 7800, 8: 0, 9: 108, 10: 100}, {0: 111, 1: Ismael, 2: Sciarra, 3: ISCIARRA, 4: 515.124.4369, 5: 1987-06-28, 6: FI_ACCOUNT, 7: 7700, 8: 0, 9: 108, 10: 100}, {0: 160, 1: Louise, 2: Doran, 3: LDORAN, 4: 011.44.1345.629268, 5: 1987-08-16, 6: SA_REP, 7: 7500, 8: 0.3, 9: 146, 10: 80}, {0: 161, 1: Sarath, 2: Sewall, 3: SSEWALL, 4: 011.44.1345.529268, 5: 1987-08-17, 6: SA_REP, 7: 7000, 8: 0.25, 9: 146, 10: 80}, {0: 113, 1: Luis, 2: Popp, 3: LPOPP, 4: 515.124.4567, 5: 1987-06-30, 6: FI_ACCOUNT, 7: 6900, 8: 0, 9: 108, 10: 100}, {0: 165, 1: David, 2: Lee, 3: DLEE, 4: 011.44.1346.529268, 5: 1987-08-21, 6: SA_REP, 7: 6800, 8: 0.1, 9: 147, 10: 80}, {0: 123, 1: Shanta, 2: Vollman, 3: SVOLLMAN, 4: 650.123.4234, 5: 1987-07-10, 6: ST_MAN, 7: 6500, 8: 0, 9: 100, 10: 50}, {0: 203, 1: Susan, 2: Mavris, 3: SMAVRIS, 4: 515.123.7777, 5: 1987-09-28, 6: HR_REP, 7: 6500, 8: 0, 9: 101, 10: 40}, {0: 166, 1: Sundar, 2: Ande, 3: SANDE, 4: 011.44.1346.629268, 5: 1987-08-22, 6: SA_REP, 7: 6400, 8: 0.1, 9: 147, 10: 80}, {0: 179, 1: Charles, 2: Johnson, 3: CJOHNSON, 4: 011.44.1644.429262, 5: 1987-09-04, 6: SA_REP, 7: 6200, 8: 0.1, 9: 149, 10: 80}, {0: 173, 1: Sundita, 2: Kumar, 3: SKUMAR, 4: 011.44.1343.329268, 5: 1987-08-29, 6: SA_REP, 7: 6100, 8: 0.1, 9: 148, 10: 80}, {0: 105, 1: David, 2: Austin, 3: DAUSTIN, 4: 590.423.4569, 5: 1987-06-22, 6: IT_PROG, 7: 4800, 8: 0, 9: 103, 10: 60}, {0: 107, 1: Diana, 2: Lorentz, 3: DLORENTZ, 4: 590.423.5567, 5: 1987-06-24, 6: IT_PROG, 7: 4200, 8: 0, 9: 103, 10: 60}, {0: 184, 1: Nandita, 2: Sarchand, 3: NSARCHAN, 4: 650.509.1876, 5: 1987-09-09, 6: SH_CLERK, 7: 4200, 8: 0, 9: 121, 10: 50}, {0: 185, 1: Alexis, 2: Bull, 3: ABULL, 4: 650.509.2876, 5: 1987-09-10, 6: SH_CLERK, 7: 4100, 8: 0, 9: 121, 10: 50}, {0: 192, 1: Sarah, 2: Bell, 3: SBELL, 4: 650.501.1876, 5: 1987-09-17, 6: SH_CLERK, 7: 4000, 8: 0, 9: 123, 10: 50}, {0: 137, 1: Renske, 2: Ladwig, 3: RLADWIG, 4: 650.121.1234, 5: 1987-07-24, 6: ST_CLERK, 7: 3600, 8: 0, 9: 123, 10: 50}, {0: 133, 1: Jason, 2: Mallin, 3: JMALLIN, 4: 650.127.1934, 5: 1987-07-20, 6: ST_CLERK, 7: 3300, 8: 0, 9: 122, 10: 50}, {0: 138, 1: Stephen, 2: Stiles, 3: SSTILES, 4: 650.121.2034, 5: 1987-07-25, 6: ST_CLERK, 7: 3200, 8: 0, 9: 123, 10: 50}, {0: 180, 1: Winston, 2: Taylor, 3: WTAYLOR, 4: 650.507.9876, 5: 1987-09-05, 6: SH_CLERK, 7: 3200, 8: 0, 9: 120, 10: 50}, {0: 194, 1: Samuel, 2: McCain, 3: SMCCAIN, 4: 650.501.3876, 5: 1987-09-19, 6: SH_CLERK, 7: 3200, 8: 0, 9: 123, 10: 50}, {0: 115, 1: Alexander, 2: Khoo, 3: AKHOO, 4: 515.127.4562, 5: 1987-07-02, 6: PU_CLERK, 7: 3100, 8: 0, 9: 114, 10: 30}, {0: 142, 1: Curtis, 2: Davies, 3: CDAVIES, 4: 650.121.2994, 5: 1987-07-29, 6: ST_CLERK, 7: 3100, 8: 0, 9: 124, 10: 50}, {0: 116, 1: Shelli, 2: Baida, 3: SBAIDA, 4: 515.127.4563, 5: 1987-07-03, 6: PU_CLERK, 7: 2900, 8: 0, 9: 114, 10: 30}, {0: 117, 1: Sigal, 2: Tobias, 3: STOBIAS, 4: 515.127.4564, 5: 1987-07-04, 6: PU_CLERK, 7: 2800, 8: 0, 9: 114, 10: 30}, {0: 183, 1: Girard, 2: Geoni, 3: GGEONI, 4: 650.507.9879, 5: 1987-09-08, 6: SH_CLERK, 7: 2800, 8: 0, 9: 120, 10: 50}, {0: 143, 1: Randall, 2: Matos, 3: RMATOS, 4: 650.121.2874, 5: 1987-07-30, 6: ST_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 198, 1: Donald, 2: OConnell, 3: DOCONNEL, 4: 650.507.9833, 5: 1987-09-23, 6: SH_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 199, 1: Douglas, 2: Grant, 3: DGRANT, 4: 650.507.9844, 5: 1987-09-24, 6: SH_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 131, 1: James, 2: Marlow, 3: JAMRLOW, 4: 650.124.7234, 5: 1987-07-18, 6: ST_CLERK, 7: 2500, 8: 0, 9: 121, 10: 50}, {0: 140, 1: Joshua, 2: Patel, 3: JPATEL, 4: 650.121.1834, 5: 1987-07-27, 6: ST_CLERK, 7: 2500, 8: 0, 9: 123, 10: 50}, {0: 191, 1: Randall, 2: Perkins, 3: RPERKINS, 4: 650.505.4876, 5: 1987-09-16, 6: SH_CLERK, 7: 2500, 8: 0, 9: 122, 10: 50}, {0: 127, 1: James, 2: Landry, 3: JLANDRY, 4: 650.124.1334, 5: 1987-07-14, 6: ST_CLERK, 7: 2400, 8: 0, 9: 120, 10: 50}, {0: 128, 1: Steven, 2: Markle, 3: SMARKLE, 4: 650.124.1434, 5: 1987-07-15, 6: ST_CLERK, 7: 2200, 8: 0, 9: 120, 10: 50}]\", linq_results: \"[{0: 100, 1: Steven, 2: King, 3: SKING, 4: 515.123.4567, 5: 17.06.1987, 6: AD_PRES, 7: 24000, 8: 0, 9: 0, 10: 90}, {0: 205, 1: Shelley, 2: Higgins, 3: SHIGGINS, 4: 515.123.8080, 5: 30.09.1987, 6: AC_MGR, 7: 12000, 8: 0, 9: 101, 10: 110}, {0: 168, 1: Lisa, 2: Ozer, 3: LOZER, 4: 011.44.1343.929268, 5: 24.08.1987, 6: SA_REP, 7: 11500, 8: 0.25, 9: 148, 10: 80}, {0: 114, 1: Den, 2: Raphaely, 3: DRAPHEAL, 4: 515.127.4561, 5: 01.07.1987, 6: PU_MAN, 7: 11000, 8: 0, 9: 100, 10: 30}, {0: 148, 1: Gerald, 2: Cambrault, 3: GCAMBRAU, 4: 011.44.1344.619268, 5: 04.08.1987, 6: SA_MAN, 7: 11000, 8: 0.3, 9: 100, 10: 80}, {0: 169, 1: Harrison, 2: Bloom, 3: HBLOOM, 4: 011.44.1343.829268, 5: 25.08.1987, 6: SA_REP, 7: 10000, 8: 0.2, 9: 148, 10: 80}, {0: 151, 1: David, 2: Bernstein, 3: DBERNSTE, 4: 011.44.1344.345268, 5: 07.08.1987, 6: SA_REP, 7: 9500, 8: 0.25, 9: 145, 10: 80}, {0: 163, 1: Danielle, 2: Greene, 3: DGREENE, 4: 011.44.1346.229268, 5: 19.08.1987, 6: SA_REP, 7: 9500, 8: 0.15, 9: 147, 10: 80}, {0: 103, 1: Alexander, 2: Hunold, 3: AHUNOLD, 4: 590.423.4567, 5: 20.06.1987, 6: IT_PROG, 7: 9000, 8: 0, 9: 102, 10: 60}, {0: 109, 1: Daniel, 2: Faviet, 3: DFAVIET, 4: 515.124.4169, 5: 26.06.1987, 6: FI_ACCOUNT, 7: 9000, 8: 0, 9: 108, 10: 100}, {0: 175, 1: Alyssa, 2: Hutton, 3: AHUTTON, 4: 011.44.1644.429266, 5: 31.08.1987, 6: SA_REP, 7: 8800, 8: 0.25, 9: 149, 10: 80}, {0: 121, 1: Adam, 2: Fripp, 3: AFRIPP, 4: 650.123.2234, 5: 08.07.1987, 6: ST_MAN, 7: 8200, 8: 0, 9: 100, 10: 50}, {0: 153, 1: Christopher, 2: Olsen, 3: COLSEN, 4: 011.44.1344.498718, 5: 09.08.1987, 6: SA_REP, 7: 8000, 8: 0.2, 9: 145, 10: 80}, {0: 159, 1: Lindsey, 2: Smith, 3: LSMITH, 4: 011.44.1345.729268, 5: 15.08.1987, 6: SA_REP, 7: 8000, 8: 0.3, 9: 146, 10: 80}, {0: 112, 1: Jose Manuel, 2: Urman, 3: JMURMAN, 4: 515.124.4469, 5: 29.06.1987, 6: FI_ACCOUNT, 7: 7800, 8: 0, 9: 108, 10: 100}, {0: 111, 1: Ismael, 2: Sciarra, 3: ISCIARRA, 4: 515.124.4369, 5: 28.06.1987, 6: FI_ACCOUNT, 7: 7700, 8: 0, 9: 108, 10: 100}, {0: 160, 1: Louise, 2: Doran, 3: LDORAN, 4: 011.44.1345.629268, 5: 16.08.1987, 6: SA_REP, 7: 7500, 8: 0.3, 9: 146, 10: 80}, {0: 161, 1: Sarath, 2: Sewall, 3: SSEWALL, 4: 011.44.1345.529268, 5: 17.08.1987, 6: SA_REP, 7: 7000, 8: 0.25, 9: 146, 10: 80}, {0: 113, 1: Luis, 2: Popp, 3: LPOPP, 4: 515.124.4567, 5: 30.06.1987, 6: FI_ACCOUNT, 7: 6900, 8: 0, 9: 108, 10: 100}, {0: 165, 1: David, 2: Lee, 3: DLEE, 4: 011.44.1346.529268, 5: 21.08.1987, 6: SA_REP, 7: 6800, 8: 0.1, 9: 147, 10: 80}, {0: 123, 1: Shanta, 2: Vollman, 3: SVOLLMAN, 4: 650.123.4234, 5: 10.07.1987, 6: ST_MAN, 7: 6500, 8: 0, 9: 100, 10: 50}, {0: 203, 1: Susan, 2: Mavris, 3: SMAVRIS, 4: 515.123.7777, 5: 28.09.1987, 6: HR_REP, 7: 6500, 8: 0, 9: 101, 10: 40}, {0: 166, 1: Sundar, 2: Ande, 3: SANDE, 4: 011.44.1346.629268, 5: 22.08.1987, 6: SA_REP, 7: 6400, 8: 0.1, 9: 147, 10: 80}, {0: 179, 1: Charles, 2: Johnson, 3: CJOHNSON, 4: 011.44.1644.429262, 5: 04.09.1987, 6: SA_REP, 7: 6200, 8: 0.1, 9: 149, 10: 80}, {0: 173, 1: Sundita, 2: Kumar, 3: SKUMAR, 4: 011.44.1343.329268, 5: 29.08.1987, 6: SA_REP, 7: 6100, 8: 0.1, 9: 148, 10: 80}, {0: 105, 1: David, 2: Austin, 3: DAUSTIN, 4: 590.423.4569, 5: 22.06.1987, 6: IT_PROG, 7: 4800, 8: 0, 9: 103, 10: 60}, {0: 107, 1: Diana, 2: Lorentz, 3: DLORENTZ, 4: 590.423.5567, 5: 24.06.1987, 6: IT_PROG, 7: 4200, 8: 0, 9: 103, 10: 60}, {0: 184, 1: Nandita, 2: Sarchand, 3: NSARCHAN, 4: 650.509.1876, 5: 09.09.1987, 6: SH_CLERK, 7: 4200, 8: 0, 9: 121, 10: 50}, {0: 185, 1: Alexis, 2: Bull, 3: ABULL, 4: 650.509.2876, 5: 10.09.1987, 6: SH_CLERK, 7: 4100, 8: 0, 9: 121, 10: 50}, {0: 192, 1: Sarah, 2: Bell, 3: SBELL, 4: 650.501.1876, 5: 17.09.1987, 6: SH_CLERK, 7: 4000, 8: 0, 9: 123, 10: 50}, {0: 137, 1: Renske, 2: Ladwig, 3: RLADWIG, 4: 650.121.1234, 5: 24.07.1987, 6: ST_CLERK, 7: 3600, 8: 0, 9: 123, 10: 50}, {0: 133, 1: Jason, 2: Mallin, 3: JMALLIN, 4: 650.127.1934, 5: 20.07.1987, 6: ST_CLERK, 7: 3300, 8: 0, 9: 122, 10: 50}, {0: 138, 1: Stephen, 2: Stiles, 3: SSTILES, 4: 650.121.2034, 5: 25.07.1987, 6: ST_CLERK, 7: 3200, 8: 0, 9: 123, 10: 50}, {0: 180, 1: Winston, 2: Taylor, 3: WTAYLOR, 4: 650.507.9876, 5: 05.09.1987, 6: SH_CLERK, 7: 3200, 8: 0, 9: 120, 10: 50}, {0: 194, 1: Samuel, 2: McCain, 3: SMCCAIN, 4: 650.501.3876, 5: 19.09.1987, 6: SH_CLERK, 7: 3200, 8: 0, 9: 123, 10: 50}, {0: 115, 1: Alexander, 2: Khoo, 3: AKHOO, 4: 515.127.4562, 5: 02.07.1987, 6: PU_CLERK, 7: 3100, 8: 0, 9: 114, 10: 30}, {0: 142, 1: Curtis, 2: Davies, 3: CDAVIES, 4: 650.121.2994, 5: 29.07.1987, 6: ST_CLERK, 7: 3100, 8: 0, 9: 124, 10: 50}, {0: 116, 1: Shelli, 2: Baida, 3: SBAIDA, 4: 515.127.4563, 5: 03.07.1987, 6: PU_CLERK, 7: 2900, 8: 0, 9: 114, 10: 30}, {0: 117, 1: Sigal, 2: Tobias, 3: STOBIAS, 4: 515.127.4564, 5: 04.07.1987, 6: PU_CLERK, 7: 2800, 8: 0, 9: 114, 10: 30}, {0: 183, 1: Girard, 2: Geoni, 3: GGEONI, 4: 650.507.9879, 5: 08.09.1987, 6: SH_CLERK, 7: 2800, 8: 0, 9: 120, 10: 50}, {0: 143, 1: Randall, 2: Matos, 3: RMATOS, 4: 650.121.2874, 5: 30.07.1987, 6: ST_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 198, 1: Donald, 2: OConnell, 3: DOCONNEL, 4: 650.507.9833, 5: 23.09.1987, 6: SH_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 199, 1: Douglas, 2: Grant, 3: DGRANT, 4: 650.507.9844, 5: 24.09.1987, 6: SH_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 131, 1: James, 2: Marlow, 3: JAMRLOW, 4: 650.124.7234, 5: 18.07.1987, 6: ST_CLERK, 7: 2500, 8: 0, 9: 121, 10: 50}, {0: 140, 1: Joshua, 2: Patel, 3: JPATEL, 4: 650.121.1834, 5: 27.07.1987, 6: ST_CLERK, 7: 2500, 8: 0, 9: 123, 10: 50}, {0: 191, 1: Randall, 2: Perkins, 3: RPERKINS, 4: 650.505.4876, 5: 16.09.1987, 6: SH_CLERK, 7: 2500, 8: 0, 9: 122, 10: 50}, {0: 127, 1: James, 2: Landry, 3: JLANDRY, 4: 650.124.1334, 5: 14.07.1987, 6: ST_CLERK, 7: 2400, 8: 0, 9: 120, 10: 50}, {0: 128, 1: Steven, 2: Markle, 3: SMARKLE, 4: 650.124.1434, 5: 15.07.1987, 6: ST_CLERK, 7: 2200, 8: 0, 9: 120, 10: 50}]\" }", "should_retest": true}, {"id": "b9454d982ea3a688dee1518ebdde736a312b9e5856a65eda21ff709b3c440d0c", "dataset_name": "Spider", "sql": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'", "question": "display those employees who joined after 7th September, 1987.", "linq": "context.Employees.Where(row => row.HireDate > \"1987-09-07\").Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Email, row.PhoneNumber, row.HireDate, row.JobId, row.Salary, row.CommissionPct, row.ManagerId, row.DepartmentId }).ToList();", "db_name": "hr_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,43): error CS0019: Operator '>' cannot be applied to operands of type 'DateOnly' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.33", "should_retest": true}, {"id": "14534a863852d58b099be269650d6dd02c5c95c5344cf5de09bd3e78d209a86d", "dataset_name": "Spider", "sql": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50", "question": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.", "linq": "context.Employees.Where(row => row.CommissionPct == \"null\" && row.Salary >= 7000 && row.Salary <= 12000 && row.DepartmentId == 50).Select(row => new { row.Email }).ToList();", "db_name": "hr_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,43): error CS0019: Operator '==' cannot be applied to operands of type 'decimal?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.28", "should_retest": true}, {"id": "66250845a9bb8f3d1ea63fdf0dd2024d806c7fadfe1c50affa0512ed5d73d259", "dataset_name": "Spider", "sql": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id", "question": "display the employee ID for each employee and the date on which he ended his previous job.", "linq": "context.JobHistories.GroupBy(row => new { row.EmployeeId }).Select(group => new { group.Key.EmployeeId, MaxEndDate = group.Select(row => row.EndDate).Max() }).ToList();", "db_name": "hr_1", "status": "CodeFailed", "error": "Unhandled exception. System.FormatException: String '0000-00-00' was not recognized as a valid DateOnly.", "should_retest": true}, {"id": "01c160d0b19af33ce4da84eb5a30ae37a5609abe5d0d37779956f16386f319d8", "dataset_name": "Spider", "sql": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id", "question": "display the average salary of employees for each department who gets a commission percentage.", "linq": "context.Employees.Where(row => row.CommissionPct != \"null\").GroupBy(row => new { row.DepartmentId }).Select(group => new { group.Key.DepartmentId, AverageSalary = group.Select(row => row.Salary).Average() }).ToList();", "db_name": "hr_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,43): error CS0019: Operator '!=' cannot be applied to operands of type 'decimal?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.25", "should_retest": true}, {"id": "cb9cbf694e968b7a0b7bf4d91bf4e6fb410e85a56dc2ac67ca4c4b36a155c0ed", "dataset_name": "Spider", "sql": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2", "question": "display job ID for those jobs that were done by two or more for more than 300 days.", "linq": "context.JobHistories.Where(row => row.EndDate - row.StartDate > 300).GroupBy(row => new { row.JobId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.JobId }).ToList();", "db_name": "hr_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,46): error CS0019: Operator '-' cannot be applied to operands of type 'DateOnly' and 'DateOnly' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.33", "should_retest": true}, {"id": "739e24e668f571b50d5b1443912128d885975126c97a78243d58f46a68474478", "dataset_name": "Spider", "sql": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000", "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?", "linq": "context.JobHistories.Join(context.Employees, T1 => T1.EmployeeId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Salary >= 12000).Select(row => new { T1Employeeid = rowT1..EmployeeId, rowT1..StartDate, rowT1..EndDate, T1Jobid = rowT1..JobId, T1Departmentid = rowT1..DepartmentId, T2Employeeid = rowT2..EmployeeId, rowT2..FirstName, rowT2..LastName, rowT2..Email, rowT2..PhoneNumber, rowT2..HireDate, T2Jobid = rowT2..JobId, rowT2..Salary, rowT2..CommissionPct, rowT2..ManagerId, T2Departmentid = rowT2..DepartmentId }).ToList();", "db_name": "hr_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,537): error CS0103: The name 'DepartmentId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    42 Error(s)\n\nTime Elapsed 00:00:01.26", "should_retest": true}, {"id": "d989ffff7bd00ed61180eaf492541ee600f7ba6d1f9b33f37df2afefb64c0687", "dataset_name": "Spider", "sql": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)", "question": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.", "linq": "context.Employees.Where(row => row.Salary.HasValue && context.Employees.GroupBy(row => new { row.DepartmentId }).Select(group => MinSalary = group.Select(row => row.Salary).Min()).Contains(row.Salary.Value)).Select(row => new { row.FirstName, row.LastName, row.DepartmentId }).ToList();", "db_name": "hr_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,141): error CS0103: The name 'MinSalary' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.29", "should_retest": true}, {"id": "97cf9248f120323e4a9e9ddba4f22626e3260c548da6085d39edd2fed773ec2a", "dataset_name": "Spider", "sql": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id", "question": "get the details of employees who manage a department.", "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.EmployeeId == row.T2.ManagerId).Select(row => new { rowT1..EmployeeId, rowT1..FirstName, rowT1..LastName, rowT1..Email, rowT1..PhoneNumber, rowT1..HireDate, rowT1..JobId, rowT1..Salary, rowT1..CommissionPct, T1Managerid = rowT1..ManagerId, T1Departmentid = rowT1..DepartmentId, T2Departmentid = rowT2..DepartmentId, rowT2..DepartmentName, T2Managerid = rowT2..ManagerId, rowT2..LocationId }).Distinct().ToList();", "db_name": "hr_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,528): error CS0103: The name 'LocationId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    41 Error(s)\n\nTime Elapsed 00:00:01.26", "should_retest": true}, {"id": "9c9535368d682cae487f7e63bcb671a113ad39fe71b67d219a822a70e6b10336", "dataset_name": "Spider", "sql": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500", "question": "display all the information of the employees whose salary if within the range of smallest salary and 2500.", "linq": "context.Employees.Where(row => row.Salary >= context.Employees.Select(row => row.Salary).Min() && row.Salary <= 2500).Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Email, row.PhoneNumber, row.HireDate, row.JobId, row.Salary, row.CommissionPct, row.ManagerId, row.DepartmentId }).ToList();", "db_name": "hr_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 119, 1: Karen, 2: Colmenares, 3: KCOLMENA, 4: 515.127.4566, 5: 1987-07-06, 6: PU_CLERK, 7: 2500, 8: 0, 9: 114, 10: 30}, {0: 127, 1: James, 2: Landry, 3: JLANDRY, 4: 650.124.1334, 5: 1987-07-14, 6: ST_CLERK, 7: 2400, 8: 0, 9: 120, 10: 50}, {0: 128, 1: Steven, 2: Markle, 3: SMARKLE, 4: 650.124.1434, 5: 1987-07-15, 6: ST_CLERK, 7: 2200, 8: 0, 9: 120, 10: 50}, {0: 131, 1: James, 2: Marlow, 3: JAMRLOW, 4: 650.124.7234, 5: 1987-07-18, 6: ST_CLERK, 7: 2500, 8: 0, 9: 121, 10: 50}, {0: 132, 1: TJ, 2: Olson, 3: TJOLSON, 4: 650.124.8234, 5: 1987-07-19, 6: ST_CLERK, 7: 2100, 8: 0, 9: 121, 10: 50}, {0: 135, 1: Ki, 2: Gee, 3: KGEE, 4: 650.127.1734, 5: 1987-07-22, 6: ST_CLERK, 7: 2400, 8: 0, 9: 122, 10: 50}, {0: 136, 1: Hazel, 2: Philtanker, 3: HPHILTAN, 4: 650.127.1634, 5: 1987-07-23, 6: ST_CLERK, 7: 2200, 8: 0, 9: 122, 10: 50}, {0: 140, 1: Joshua, 2: Patel, 3: JPATEL, 4: 650.121.1834, 5: 1987-07-27, 6: ST_CLERK, 7: 2500, 8: 0, 9: 123, 10: 50}, {0: 144, 1: Peter, 2: Vargas, 3: PVARGAS, 4: 650.121.2004, 5: 1987-07-31, 6: ST_CLERK, 7: 2500, 8: 0, 9: 124, 10: 50}, {0: 182, 1: Martha, 2: Sullivan, 3: MSULLIVA, 4: 650.507.9878, 5: 1987-09-07, 6: SH_CLERK, 7: 2500, 8: 0, 9: 120, 10: 50}, {0: 191, 1: Randall, 2: Perkins, 3: RPERKINS, 4: 650.505.4876, 5: 1987-09-16, 6: SH_CLERK, 7: 2500, 8: 0, 9: 122, 10: 50}]\", linq_results: \"[{0: 119, 1: Karen, 2: Colmenares, 3: KCOLMENA, 4: 515.127.4566, 5: 06.07.1987, 6: PU_CLERK, 7: 2500, 8: 0, 9: 114, 10: 30}, {0: 127, 1: James, 2: Landry, 3: JLANDRY, 4: 650.124.1334, 5: 14.07.1987, 6: ST_CLERK, 7: 2400, 8: 0, 9: 120, 10: 50}, {0: 128, 1: Steven, 2: Markle, 3: SMARKLE, 4: 650.124.1434, 5: 15.07.1987, 6: ST_CLERK, 7: 2200, 8: 0, 9: 120, 10: 50}, {0: 131, 1: James, 2: Marlow, 3: JAMRLOW, 4: 650.124.7234, 5: 18.07.1987, 6: ST_CLERK, 7: 2500, 8: 0, 9: 121, 10: 50}, {0: 132, 1: TJ, 2: Olson, 3: TJOLSON, 4: 650.124.8234, 5: 19.07.1987, 6: ST_CLERK, 7: 2100, 8: 0, 9: 121, 10: 50}, {0: 135, 1: Ki, 2: Gee, 3: KGEE, 4: 650.127.1734, 5: 22.07.1987, 6: ST_CLERK, 7: 2400, 8: 0, 9: 122, 10: 50}, {0: 136, 1: Hazel, 2: Philtanker, 3: HPHILTAN, 4: 650.127.1634, 5: 23.07.1987, 6: ST_CLERK, 7: 2200, 8: 0, 9: 122, 10: 50}, {0: 140, 1: Joshua, 2: Patel, 3: JPATEL, 4: 650.121.1834, 5: 27.07.1987, 6: ST_CLERK, 7: 2500, 8: 0, 9: 123, 10: 50}, {0: 144, 1: Peter, 2: Vargas, 3: PVARGAS, 4: 650.121.2004, 5: 31.07.1987, 6: ST_CLERK, 7: 2500, 8: 0, 9: 124, 10: 50}, {0: 182, 1: Martha, 2: Sullivan, 3: MSULLIVA, 4: 650.507.9878, 5: 07.09.1987, 6: SH_CLERK, 7: 2500, 8: 0, 9: 120, 10: 50}, {0: 191, 1: Randall, 2: Perkins, 3: RPERKINS, 4: 650.505.4876, 5: 16.09.1987, 6: SH_CLERK, 7: 2500, 8: 0, 9: 122, 10: 50}]\" }", "should_retest": true}, {"id": "6a759b03967bc5fe02322ef090c92127607789ae64e398966f09aa87b39e8a25", "dataset_name": "Spider", "sql": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "question": "Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.", "linq": "context.Employees.Where(row => row.DepartmentId.HasValue && !context.Departments.Where(row => row.ManagerId >= 100 && row.ManagerId <= 200).Select(row => row.DepartmentId).Contains(row.DepartmentId.Value)).Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Email, row.PhoneNumber, row.HireDate, row.JobId, row.Salary, row.CommissionPct, row.ManagerId, row.DepartmentId }).ToList();", "db_name": "hr_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 178, 1: Kimberely, 2: Grant, 3: KGRANT, 4: 011.44.1644.429263, 5: 1987-09-03, 6: SA_REP, 7: 7000, 8: 0.15, 9: 149, 10: 0}, {0: 201, 1: Michael, 2: Hartstein, 3: MHARTSTE, 4: 515.123.5555, 5: 1987-09-26, 6: MK_MAN, 7: 13000, 8: 0, 9: 100, 10: 20}, {0: 202, 1: Pat, 2: Fay, 3: PFAY, 4: 603.123.6666, 5: 1987-09-27, 6: MK_REP, 7: 6000, 8: 0, 9: 201, 10: 20}, {0: 203, 1: Susan, 2: Mavris, 3: SMAVRIS, 4: 515.123.7777, 5: 1987-09-28, 6: HR_REP, 7: 6500, 8: 0, 9: 101, 10: 40}, {0: 204, 1: Hermann, 2: Baer, 3: HBAER, 4: 515.123.8888, 5: 1987-09-29, 6: PR_REP, 7: 10000, 8: 0, 9: 101, 10: 70}, {0: 205, 1: Shelley, 2: Higgins, 3: SHIGGINS, 4: 515.123.8080, 5: 1987-09-30, 6: AC_MGR, 7: 12000, 8: 0, 9: 101, 10: 110}, {0: 206, 1: William, 2: Gietz, 3: WGIETZ, 4: 515.123.8181, 5: 1987-10-01, 6: AC_ACCOUNT, 7: 8300, 8: 0, 9: 205, 10: 110}]\", linq_results: \"[{0: 178, 1: Kimberely, 2: Grant, 3: KGRANT, 4: 011.44.1644.429263, 5: 03.09.1987, 6: SA_REP, 7: 7000, 8: 0.15, 9: 149, 10: 0}, {0: 201, 1: Michael, 2: Hartstein, 3: MHARTSTE, 4: 515.123.5555, 5: 26.09.1987, 6: MK_MAN, 7: 13000, 8: 0, 9: 100, 10: 20}, {0: 202, 1: Pat, 2: Fay, 3: PFAY, 4: 603.123.6666, 5: 27.09.1987, 6: MK_REP, 7: 6000, 8: 0, 9: 201, 10: 20}, {0: 203, 1: Susan, 2: Mavris, 3: SMAVRIS, 4: 515.123.7777, 5: 28.09.1987, 6: HR_REP, 7: 6500, 8: 0, 9: 101, 10: 40}, {0: 204, 1: Hermann, 2: Baer, 3: HBAER, 4: 515.123.8888, 5: 29.09.1987, 6: PR_REP, 7: 10000, 8: 0, 9: 101, 10: 70}, {0: 205, 1: Shelley, 2: Higgins, 3: SHIGGINS, 4: 515.123.8080, 5: 30.09.1987, 6: AC_MGR, 7: 12000, 8: 0, 9: 101, 10: 110}, {0: 206, 1: William, 2: Gietz, 3: WGIETZ, 4: 515.123.8181, 5: 01.10.1987, 6: AC_ACCOUNT, 7: 8300, 8: 0, 9: 205, 10: 110}]\" }", "should_retest": true}, {"id": "850cbc801d514bed7c4f73c4e46e4b113ef55a3b8c1c4ebed5b7b80a31965fe6", "dataset_name": "Spider", "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")", "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.", "linq": "context.Employees.Where(row => row.DepartmentId == context.Employees.Where(row => row.FirstName == \"Clara\").Select(row => row.DepartmentId).First()).Select(row => new { row.FirstName, row.LastName, row.HireDate }).ToList();", "db_name": "hr_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: John, 1: Russell, 2: 1987-08-01}, {0: Karen, 1: Partners, 2: 1987-08-02}, {0: Alberto, 1: Errazuriz, 2: 1987-08-03}, {0: Gerald, 1: Cambrault, 2: 1987-08-04}, {0: Eleni, 1: Zlotkey, 2: 1987-08-05}, {0: Peter, 1: Tucker, 2: 1987-08-06}, {0: David, 1: Bernstein, 2: 1987-08-07}, {0: Peter, 1: Hall, 2: 1987-08-08}, {0: Christopher, 1: Olsen, 2: 1987-08-09}, {0: Nanette, 1: Cambrault, 2: 1987-08-10}, {0: Oliver, 1: Tuvault, 2: 1987-08-11}, {0: Janette, 1: King, 2: 1987-08-12}, {0: Patrick, 1: Sully, 2: 1987-08-13}, {0: Allan, 1: McEwen, 2: 1987-08-14}, {0: Lindsey, 1: Smith, 2: 1987-08-15}, {0: Louise, 1: Doran, 2: 1987-08-16}, {0: Sarath, 1: Sewall, 2: 1987-08-17}, {0: Clara, 1: Vishney, 2: 1987-08-18}, {0: Danielle, 1: Greene, 2: 1987-08-19}, {0: Mattea, 1: Marvins, 2: 1987-08-20}, {0: David, 1: Lee, 2: 1987-08-21}, {0: Sundar, 1: Ande, 2: 1987-08-22}, {0: Amit, 1: Banda, 2: 1987-08-23}, {0: Lisa, 1: Ozer, 2: 1987-08-24}, {0: Harrison, 1: Bloom, 2: 1987-08-25}, {0: Tayler, 1: Fox, 2: 1987-08-26}, {0: William, 1: Smith, 2: 1987-08-27}, {0: Elizabeth, 1: Bates, 2: 1987-08-28}, {0: Sundita, 1: Kumar, 2: 1987-08-29}, {0: Ellen, 1: Abel, 2: 1987-08-30}, {0: Alyssa, 1: Hutton, 2: 1987-08-31}, {0: Jonathon, 1: Taylor, 2: 1987-09-01}, {0: Jack, 1: Livingston, 2: 1987-09-02}, {0: Charles, 1: Johnson, 2: 1987-09-04}]\", linq_results: \"[{0: John, 1: Russell, 2: 01.08.1987}, {0: Karen, 1: Partners, 2: 02.08.1987}, {0: Alberto, 1: Errazuriz, 2: 03.08.1987}, {0: Gerald, 1: Cambrault, 2: 04.08.1987}, {0: Eleni, 1: Zlotkey, 2: 05.08.1987}, {0: Peter, 1: Tucker, 2: 06.08.1987}, {0: David, 1: Bernstein, 2: 07.08.1987}, {0: Peter, 1: Hall, 2: 08.08.1987}, {0: Christopher, 1: Olsen, 2: 09.08.1987}, {0: Nanette, 1: Cambrault, 2: 10.08.1987}, {0: Oliver, 1: Tuvault, 2: 11.08.1987}, {0: Janette, 1: King, 2: 12.08.1987}, {0: Patrick, 1: Sully, 2: 13.08.1987}, {0: Allan, 1: McEwen, 2: 14.08.1987}, {0: Lindsey, 1: Smith, 2: 15.08.1987}, {0: Louise, 1: Doran, 2: 16.08.1987}, {0: Sarath, 1: Sewall, 2: 17.08.1987}, {0: Clara, 1: Vishney, 2: 18.08.1987}, {0: Danielle, 1: Greene, 2: 19.08.1987}, {0: Mattea, 1: Marvins, 2: 20.08.1987}, {0: David, 1: Lee, 2: 21.08.1987}, {0: Sundar, 1: Ande, 2: 22.08.1987}, {0: Amit, 1: Banda, 2: 23.08.1987}, {0: Lisa, 1: Ozer, 2: 24.08.1987}, {0: Harrison, 1: Bloom, 2: 25.08.1987}, {0: Tayler, 1: Fox, 2: 26.08.1987}, {0: William, 1: Smith, 2: 27.08.1987}, {0: Elizabeth, 1: Bates, 2: 28.08.1987}, {0: Sundita, 1: Kumar, 2: 29.08.1987}, {0: Ellen, 1: Abel, 2: 30.08.1987}, {0: Alyssa, 1: Hutton, 2: 31.08.1987}, {0: Jonathon, 1: Taylor, 2: 01.09.1987}, {0: Jack, 1: Livingston, 2: 02.09.1987}, {0: Charles, 1: Johnson, 2: 04.09.1987}]\" }", "should_retest": true}, {"id": "a6a450e3bd2a22e18ebf24d42d29697da6d5549e9f489be46aacfacd91181c56", "dataset_name": "Spider", "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"", "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.", "linq": "context.Employees.Where(row => row.DepartmentId == context.Employees.Where(row => row.FirstName == \"Clara\").Select(row => row.DepartmentId).First() && row.FirstName != \"Clara\").Select(row => new { row.FirstName, row.LastName, row.HireDate }).ToList();", "db_name": "hr_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: John, 1: Russell, 2: 1987-08-01}, {0: Karen, 1: Partners, 2: 1987-08-02}, {0: Alberto, 1: Errazuriz, 2: 1987-08-03}, {0: Gerald, 1: Cambrault, 2: 1987-08-04}, {0: Eleni, 1: Zlotkey, 2: 1987-08-05}, {0: Peter, 1: Tucker, 2: 1987-08-06}, {0: David, 1: Bernstein, 2: 1987-08-07}, {0: Peter, 1: Hall, 2: 1987-08-08}, {0: Christopher, 1: Olsen, 2: 1987-08-09}, {0: Nanette, 1: Cambrault, 2: 1987-08-10}, {0: Oliver, 1: Tuvault, 2: 1987-08-11}, {0: Janette, 1: King, 2: 1987-08-12}, {0: Patrick, 1: Sully, 2: 1987-08-13}, {0: Allan, 1: McEwen, 2: 1987-08-14}, {0: Lindsey, 1: Smith, 2: 1987-08-15}, {0: Louise, 1: Doran, 2: 1987-08-16}, {0: Sarath, 1: Sewall, 2: 1987-08-17}, {0: Danielle, 1: Greene, 2: 1987-08-19}, {0: Mattea, 1: Marvins, 2: 1987-08-20}, {0: David, 1: Lee, 2: 1987-08-21}, {0: Sundar, 1: Ande, 2: 1987-08-22}, {0: Amit, 1: Banda, 2: 1987-08-23}, {0: Lisa, 1: Ozer, 2: 1987-08-24}, {0: Harrison, 1: Bloom, 2: 1987-08-25}, {0: Tayler, 1: Fox, 2: 1987-08-26}, {0: William, 1: Smith, 2: 1987-08-27}, {0: Elizabeth, 1: Bates, 2: 1987-08-28}, {0: Sundita, 1: Kumar, 2: 1987-08-29}, {0: Ellen, 1: Abel, 2: 1987-08-30}, {0: Alyssa, 1: Hutton, 2: 1987-08-31}, {0: Jonathon, 1: Taylor, 2: 1987-09-01}, {0: Jack, 1: Livingston, 2: 1987-09-02}, {0: Charles, 1: Johnson, 2: 1987-09-04}]\", linq_results: \"[{0: John, 1: Russell, 2: 01.08.1987}, {0: Karen, 1: Partners, 2: 02.08.1987}, {0: Alberto, 1: Errazuriz, 2: 03.08.1987}, {0: Gerald, 1: Cambrault, 2: 04.08.1987}, {0: Eleni, 1: Zlotkey, 2: 05.08.1987}, {0: Peter, 1: Tucker, 2: 06.08.1987}, {0: David, 1: Bernstein, 2: 07.08.1987}, {0: Peter, 1: Hall, 2: 08.08.1987}, {0: Christopher, 1: Olsen, 2: 09.08.1987}, {0: Nanette, 1: Cambrault, 2: 10.08.1987}, {0: Oliver, 1: Tuvault, 2: 11.08.1987}, {0: Janette, 1: King, 2: 12.08.1987}, {0: Patrick, 1: Sully, 2: 13.08.1987}, {0: Allan, 1: McEwen, 2: 14.08.1987}, {0: Lindsey, 1: Smith, 2: 15.08.1987}, {0: Louise, 1: Doran, 2: 16.08.1987}, {0: Sarath, 1: Sewall, 2: 17.08.1987}, {0: Danielle, 1: Greene, 2: 19.08.1987}, {0: Mattea, 1: Marvins, 2: 20.08.1987}, {0: David, 1: Lee, 2: 21.08.1987}, {0: Sundar, 1: Ande, 2: 22.08.1987}, {0: Amit, 1: Banda, 2: 23.08.1987}, {0: Lisa, 1: Ozer, 2: 24.08.1987}, {0: Harrison, 1: Bloom, 2: 25.08.1987}, {0: Tayler, 1: Fox, 2: 26.08.1987}, {0: William, 1: Smith, 2: 27.08.1987}, {0: Elizabeth, 1: Bates, 2: 28.08.1987}, {0: Sundita, 1: Kumar, 2: 29.08.1987}, {0: Ellen, 1: Abel, 2: 30.08.1987}, {0: Alyssa, 1: Hutton, 2: 31.08.1987}, {0: Jonathon, 1: Taylor, 2: 01.09.1987}, {0: Jack, 1: Livingston, 2: 02.09.1987}, {0: Charles, 1: Johnson, 2: 04.09.1987}]\" }", "should_retest": true}, {"id": "935594070069612fb0c3a0089c38e1aeedcce0a04dd6241d8fae67274ad4c56b", "dataset_name": "Spider", "sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "question": "display all the information of those employees who did not have any job in the past.", "linq": "context.Employees.Where(row => !context.JobHistories.Select(row => row.EmployeeId).Contains(row.EmployeeId)).Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Email, row.PhoneNumber, row.HireDate, row.JobId, row.Salary, row.CommissionPct, row.ManagerId, row.DepartmentId }).ToList();", "db_name": "hr_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 100, 1: Steven, 2: King, 3: SKING, 4: 515.123.4567, 5: 1987-06-17, 6: AD_PRES, 7: 24000, 8: 0, 9: 0, 10: 90}, {0: 103, 1: Alexander, 2: Hunold, 3: AHUNOLD, 4: 590.423.4567, 5: 1987-06-20, 6: IT_PROG, 7: 9000, 8: 0, 9: 102, 10: 60}, {0: 104, 1: Bruce, 2: Ernst, 3: BERNST, 4: 590.423.4568, 5: 1987-06-21, 6: IT_PROG, 7: 6000, 8: 0, 9: 103, 10: 60}, {0: 105, 1: David, 2: Austin, 3: DAUSTIN, 4: 590.423.4569, 5: 1987-06-22, 6: IT_PROG, 7: 4800, 8: 0, 9: 103, 10: 60}, {0: 106, 1: Valli, 2: Pataballa, 3: VPATABAL, 4: 590.423.4560, 5: 1987-06-23, 6: IT_PROG, 7: 4800, 8: 0, 9: 103, 10: 60}, {0: 107, 1: Diana, 2: Lorentz, 3: DLORENTZ, 4: 590.423.5567, 5: 1987-06-24, 6: IT_PROG, 7: 4200, 8: 0, 9: 103, 10: 60}, {0: 108, 1: Nancy, 2: Greenberg, 3: NGREENBE, 4: 515.124.4569, 5: 1987-06-25, 6: FI_MGR, 7: 12000, 8: 0, 9: 101, 10: 100}, {0: 109, 1: Daniel, 2: Faviet, 3: DFAVIET, 4: 515.124.4169, 5: 1987-06-26, 6: FI_ACCOUNT, 7: 9000, 8: 0, 9: 108, 10: 100}, {0: 110, 1: John, 2: Chen, 3: JCHEN, 4: 515.124.4269, 5: 1987-06-27, 6: FI_ACCOUNT, 7: 8200, 8: 0, 9: 108, 10: 100}, {0: 111, 1: Ismael, 2: Sciarra, 3: ISCIARRA, 4: 515.124.4369, 5: 1987-06-28, 6: FI_ACCOUNT, 7: 7700, 8: 0, 9: 108, 10: 100}, {0: 112, 1: Jose Manuel, 2: Urman, 3: JMURMAN, 4: 515.124.4469, 5: 1987-06-29, 6: FI_ACCOUNT, 7: 7800, 8: 0, 9: 108, 10: 100}, {0: 113, 1: Luis, 2: Popp, 3: LPOPP, 4: 515.124.4567, 5: 1987-06-30, 6: FI_ACCOUNT, 7: 6900, 8: 0, 9: 108, 10: 100}, {0: 115, 1: Alexander, 2: Khoo, 3: AKHOO, 4: 515.127.4562, 5: 1987-07-02, 6: PU_CLERK, 7: 3100, 8: 0, 9: 114, 10: 30}, {0: 116, 1: Shelli, 2: Baida, 3: SBAIDA, 4: 515.127.4563, 5: 1987-07-03, 6: PU_CLERK, 7: 2900, 8: 0, 9: 114, 10: 30}, {0: 117, 1: Sigal, 2: Tobias, 3: STOBIAS, 4: 515.127.4564, 5: 1987-07-04, 6: PU_CLERK, 7: 2800, 8: 0, 9: 114, 10: 30}, {0: 118, 1: Guy, 2: Himuro, 3: GHIMURO, 4: 515.127.4565, 5: 1987-07-05, 6: PU_CLERK, 7: 2600, 8: 0, 9: 114, 10: 30}, {0: 119, 1: Karen, 2: Colmenares, 3: KCOLMENA, 4: 515.127.4566, 5: 1987-07-06, 6: PU_CLERK, 7: 2500, 8: 0, 9: 114, 10: 30}, {0: 120, 1: Matthew, 2: Weiss, 3: MWEISS, 4: 650.123.1234, 5: 1987-07-07, 6: ST_MAN, 7: 8000, 8: 0, 9: 100, 10: 50}, {0: 121, 1: Adam, 2: Fripp, 3: AFRIPP, 4: 650.123.2234, 5: 1987-07-08, 6: ST_MAN, 7: 8200, 8: 0, 9: 100, 10: 50}, {0: 123, 1: Shanta, 2: Vollman, 3: SVOLLMAN, 4: 650.123.4234, 5: 1987-07-10, 6: ST_MAN, 7: 6500, 8: 0, 9: 100, 10: 50}, {0: 124, 1: Kevin, 2: Mourgos, 3: KMOURGOS, 4: 650.123.5234, 5: 1987-07-11, 6: ST_MAN, 7: 5800, 8: 0, 9: 100, 10: 50}, {0: 125, 1: Julia, 2: Nayer, 3: JNAYER, 4: 650.124.1214, 5: 1987-07-12, 6: ST_CLERK, 7: 3200, 8: 0, 9: 120, 10: 50}, {0: 126, 1: Irene, 2: Mikkilineni, 3: IMIKKILI, 4: 650.124.1224, 5: 1987-07-13, 6: ST_CLERK, 7: 2700, 8: 0, 9: 120, 10: 50}, {0: 127, 1: James, 2: Landry, 3: JLANDRY, 4: 650.124.1334, 5: 1987-07-14, 6: ST_CLERK, 7: 2400, 8: 0, 9: 120, 10: 50}, {0: 128, 1: Steven, 2: Markle, 3: SMARKLE, 4: 650.124.1434, 5: 1987-07-15, 6: ST_CLERK, 7: 2200, 8: 0, 9: 120, 10: 50}, {0: 129, 1: Laura, 2: Bissot, 3: LBISSOT, 4: 650.124.5234, 5: 1987-07-16, 6: ST_CLERK, 7: 3300, 8: 0, 9: 121, 10: 50}, {0: 130, 1: Mozhe, 2: Atkinson, 3: MATKINSO, 4: 650.124.6234, 5: 1987-07-17, 6: ST_CLERK, 7: 2800, 8: 0, 9: 121, 10: 50}, {0: 131, 1: James, 2: Marlow, 3: JAMRLOW, 4: 650.124.7234, 5: 1987-07-18, 6: ST_CLERK, 7: 2500, 8: 0, 9: 121, 10: 50}, {0: 132, 1: TJ, 2: Olson, 3: TJOLSON, 4: 650.124.8234, 5: 1987-07-19, 6: ST_CLERK, 7: 2100, 8: 0, 9: 121, 10: 50}, {0: 133, 1: Jason, 2: Mallin, 3: JMALLIN, 4: 650.127.1934, 5: 1987-07-20, 6: ST_CLERK, 7: 3300, 8: 0, 9: 122, 10: 50}, {0: 134, 1: Michael, 2: Rogers, 3: MROGERS, 4: 650.127.1834, 5: 1987-07-21, 6: ST_CLERK, 7: 2900, 8: 0, 9: 122, 10: 50}, {0: 135, 1: Ki, 2: Gee, 3: KGEE, 4: 650.127.1734, 5: 1987-07-22, 6: ST_CLERK, 7: 2400, 8: 0, 9: 122, 10: 50}, {0: 136, 1: Hazel, 2: Philtanker, 3: HPHILTAN, 4: 650.127.1634, 5: 1987-07-23, 6: ST_CLERK, 7: 2200, 8: 0, 9: 122, 10: 50}, {0: 137, 1: Renske, 2: Ladwig, 3: RLADWIG, 4: 650.121.1234, 5: 1987-07-24, 6: ST_CLERK, 7: 3600, 8: 0, 9: 123, 10: 50}, {0: 138, 1: Stephen, 2: Stiles, 3: SSTILES, 4: 650.121.2034, 5: 1987-07-25, 6: ST_CLERK, 7: 3200, 8: 0, 9: 123, 10: 50}, {0: 139, 1: John, 2: Seo, 3: JSEO, 4: 650.121.2019, 5: 1987-07-26, 6: ST_CLERK, 7: 2700, 8: 0, 9: 123, 10: 50}, {0: 140, 1: Joshua, 2: Patel, 3: JPATEL, 4: 650.121.1834, 5: 1987-07-27, 6: ST_CLERK, 7: 2500, 8: 0, 9: 123, 10: 50}, {0: 141, 1: Trenna, 2: Rajs, 3: TRAJS, 4: 650.121.8009, 5: 1987-07-28, 6: ST_CLERK, 7: 3500, 8: 0, 9: 124, 10: 50}, {0: 142, 1: Curtis, 2: Davies, 3: CDAVIES, 4: 650.121.2994, 5: 1987-07-29, 6: ST_CLERK, 7: 3100, 8: 0, 9: 124, 10: 50}, {0: 143, 1: Randall, 2: Matos, 3: RMATOS, 4: 650.121.2874, 5: 1987-07-30, 6: ST_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 144, 1: Peter, 2: Vargas, 3: PVARGAS, 4: 650.121.2004, 5: 1987-07-31, 6: ST_CLERK, 7: 2500, 8: 0, 9: 124, 10: 50}, {0: 145, 1: John, 2: Russell, 3: JRUSSEL, 4: 011.44.1344.429268, 5: 1987-08-01, 6: SA_MAN, 7: 14000, 8: 0.4, 9: 100, 10: 80}, {0: 146, 1: Karen, 2: Partners, 3: KPARTNER, 4: 011.44.1344.467268, 5: 1987-08-02, 6: SA_MAN, 7: 13500, 8: 0.3, 9: 100, 10: 80}, {0: 147, 1: Alberto, 2: Errazuriz, 3: AERRAZUR, 4: 011.44.1344.429278, 5: 1987-08-03, 6: SA_MAN, 7: 12000, 8: 0.3, 9: 100, 10: 80}, {0: 148, 1: Gerald, 2: Cambrault, 3: GCAMBRAU, 4: 011.44.1344.619268, 5: 1987-08-04, 6: SA_MAN, 7: 11000, 8: 0.3, 9: 100, 10: 80}, {0: 149, 1: Eleni, 2: Zlotkey, 3: EZLOTKEY, 4: 011.44.1344.429018, 5: 1987-08-05, 6: SA_MAN, 7: 10500, 8: 0.2, 9: 100, 10: 80}, {0: 150, 1: Peter, 2: Tucker, 3: PTUCKER, 4: 011.44.1344.129268, 5: 1987-08-06, 6: SA_REP, 7: 10000, 8: 0.3, 9: 145, 10: 80}, {0: 151, 1: David, 2: Bernstein, 3: DBERNSTE, 4: 011.44.1344.345268, 5: 1987-08-07, 6: SA_REP, 7: 9500, 8: 0.25, 9: 145, 10: 80}, {0: 152, 1: Peter, 2: Hall, 3: PHALL, 4: 011.44.1344.478968, 5: 1987-08-08, 6: SA_REP, 7: 9000, 8: 0.25, 9: 145, 10: 80}, {0: 153, 1: Christopher, 2: Olsen, 3: COLSEN, 4: 011.44.1344.498718, 5: 1987-08-09, 6: SA_REP, 7: 8000, 8: 0.2, 9: 145, 10: 80}, {0: 154, 1: Nanette, 2: Cambrault, 3: NCAMBRAU, 4: 011.44.1344.987668, 5: 1987-08-10, 6: SA_REP, 7: 7500, 8: 0.2, 9: 145, 10: 80}, {0: 155, 1: Oliver, 2: Tuvault, 3: OTUVAULT, 4: 011.44.1344.486508, 5: 1987-08-11, 6: SA_REP, 7: 7000, 8: 0.15, 9: 145, 10: 80}, {0: 156, 1: Janette, 2: King, 3: JKING, 4: 011.44.1345.429268, 5: 1987-08-12, 6: SA_REP, 7: 10000, 8: 0.35, 9: 146, 10: 80}, {0: 157, 1: Patrick, 2: Sully, 3: PSULLY, 4: 011.44.1345.929268, 5: 1987-08-13, 6: SA_REP, 7: 9500, 8: 0.35, 9: 146, 10: 80}, {0: 158, 1: Allan, 2: McEwen, 3: AMCEWEN, 4: 011.44.1345.829268, 5: 1987-08-14, 6: SA_REP, 7: 9000, 8: 0.35, 9: 146, 10: 80}, {0: 159, 1: Lindsey, 2: Smith, 3: LSMITH, 4: 011.44.1345.729268, 5: 1987-08-15, 6: SA_REP, 7: 8000, 8: 0.3, 9: 146, 10: 80}, {0: 160, 1: Louise, 2: Doran, 3: LDORAN, 4: 011.44.1345.629268, 5: 1987-08-16, 6: SA_REP, 7: 7500, 8: 0.3, 9: 146, 10: 80}, {0: 161, 1: Sarath, 2: Sewall, 3: SSEWALL, 4: 011.44.1345.529268, 5: 1987-08-17, 6: SA_REP, 7: 7000, 8: 0.25, 9: 146, 10: 80}, {0: 162, 1: Clara, 2: Vishney, 3: CVISHNEY, 4: 011.44.1346.129268, 5: 1987-08-18, 6: SA_REP, 7: 10500, 8: 0.25, 9: 147, 10: 80}, {0: 163, 1: Danielle, 2: Greene, 3: DGREENE, 4: 011.44.1346.229268, 5: 1987-08-19, 6: SA_REP, 7: 9500, 8: 0.15, 9: 147, 10: 80}, {0: 164, 1: Mattea, 2: Marvins, 3: MMARVINS, 4: 011.44.1346.329268, 5: 1987-08-20, 6: SA_REP, 7: 7200, 8: 0.1, 9: 147, 10: 80}, {0: 165, 1: David, 2: Lee, 3: DLEE, 4: 011.44.1346.529268, 5: 1987-08-21, 6: SA_REP, 7: 6800, 8: 0.1, 9: 147, 10: 80}, {0: 166, 1: Sundar, 2: Ande, 3: SANDE, 4: 011.44.1346.629268, 5: 1987-08-22, 6: SA_REP, 7: 6400, 8: 0.1, 9: 147, 10: 80}, {0: 167, 1: Amit, 2: Banda, 3: ABANDA, 4: 011.44.1346.729268, 5: 1987-08-23, 6: SA_REP, 7: 6200, 8: 0.1, 9: 147, 10: 80}, {0: 168, 1: Lisa, 2: Ozer, 3: LOZER, 4: 011.44.1343.929268, 5: 1987-08-24, 6: SA_REP, 7: 11500, 8: 0.25, 9: 148, 10: 80}, {0: 169, 1: Harrison, 2: Bloom, 3: HBLOOM, 4: 011.44.1343.829268, 5: 1987-08-25, 6: SA_REP, 7: 10000, 8: 0.2, 9: 148, 10: 80}, {0: 170, 1: Tayler, 2: Fox, 3: TFOX, 4: 011.44.1343.729268, 5: 1987-08-26, 6: SA_REP, 7: 9600, 8: 0.2, 9: 148, 10: 80}, {0: 171, 1: William, 2: Smith, 3: WSMITH, 4: 011.44.1343.629268, 5: 1987-08-27, 6: SA_REP, 7: 7400, 8: 0.15, 9: 148, 10: 80}, {0: 172, 1: Elizabeth, 2: Bates, 3: EBATES, 4: 011.44.1343.529268, 5: 1987-08-28, 6: SA_REP, 7: 7300, 8: 0.15, 9: 148, 10: 80}, {0: 173, 1: Sundita, 2: Kumar, 3: SKUMAR, 4: 011.44.1343.329268, 5: 1987-08-29, 6: SA_REP, 7: 6100, 8: 0.1, 9: 148, 10: 80}, {0: 174, 1: Ellen, 2: Abel, 3: EABEL, 4: 011.44.1644.429267, 5: 1987-08-30, 6: SA_REP, 7: 11000, 8: 0.3, 9: 149, 10: 80}, {0: 175, 1: Alyssa, 2: Hutton, 3: AHUTTON, 4: 011.44.1644.429266, 5: 1987-08-31, 6: SA_REP, 7: 8800, 8: 0.25, 9: 149, 10: 80}, {0: 177, 1: Jack, 2: Livingston, 3: JLIVINGS, 4: 011.44.1644.429264, 5: 1987-09-02, 6: SA_REP, 7: 8400, 8: 0.2, 9: 149, 10: 80}, {0: 178, 1: Kimberely, 2: Grant, 3: KGRANT, 4: 011.44.1644.429263, 5: 1987-09-03, 6: SA_REP, 7: 7000, 8: 0.15, 9: 149, 10: 0}, {0: 179, 1: Charles, 2: Johnson, 3: CJOHNSON, 4: 011.44.1644.429262, 5: 1987-09-04, 6: SA_REP, 7: 6200, 8: 0.1, 9: 149, 10: 80}, {0: 180, 1: Winston, 2: Taylor, 3: WTAYLOR, 4: 650.507.9876, 5: 1987-09-05, 6: SH_CLERK, 7: 3200, 8: 0, 9: 120, 10: 50}, {0: 181, 1: Jean, 2: Fleaur, 3: JFLEAUR, 4: 650.507.9877, 5: 1987-09-06, 6: SH_CLERK, 7: 3100, 8: 0, 9: 120, 10: 50}, {0: 182, 1: Martha, 2: Sullivan, 3: MSULLIVA, 4: 650.507.9878, 5: 1987-09-07, 6: SH_CLERK, 7: 2500, 8: 0, 9: 120, 10: 50}, {0: 183, 1: Girard, 2: Geoni, 3: GGEONI, 4: 650.507.9879, 5: 1987-09-08, 6: SH_CLERK, 7: 2800, 8: 0, 9: 120, 10: 50}, {0: 184, 1: Nandita, 2: Sarchand, 3: NSARCHAN, 4: 650.509.1876, 5: 1987-09-09, 6: SH_CLERK, 7: 4200, 8: 0, 9: 121, 10: 50}, {0: 185, 1: Alexis, 2: Bull, 3: ABULL, 4: 650.509.2876, 5: 1987-09-10, 6: SH_CLERK, 7: 4100, 8: 0, 9: 121, 10: 50}, {0: 186, 1: Julia, 2: Dellinger, 3: JDELLING, 4: 650.509.3876, 5: 1987-09-11, 6: SH_CLERK, 7: 3400, 8: 0, 9: 121, 10: 50}, {0: 187, 1: Anthony, 2: Cabrio, 3: ACABRIO, 4: 650.509.4876, 5: 1987-09-12, 6: SH_CLERK, 7: 3000, 8: 0, 9: 121, 10: 50}, {0: 188, 1: Kelly, 2: Chung, 3: KCHUNG, 4: 650.505.1876, 5: 1987-09-13, 6: SH_CLERK, 7: 3800, 8: 0, 9: 122, 10: 50}, {0: 189, 1: Jennifer, 2: Dilly, 3: JDILLY, 4: 650.505.2876, 5: 1987-09-14, 6: SH_CLERK, 7: 3600, 8: 0, 9: 122, 10: 50}, {0: 190, 1: Timothy, 2: Gates, 3: TGATES, 4: 650.505.3876, 5: 1987-09-15, 6: SH_CLERK, 7: 2900, 8: 0, 9: 122, 10: 50}, {0: 191, 1: Randall, 2: Perkins, 3: RPERKINS, 4: 650.505.4876, 5: 1987-09-16, 6: SH_CLERK, 7: 2500, 8: 0, 9: 122, 10: 50}, {0: 192, 1: Sarah, 2: Bell, 3: SBELL, 4: 650.501.1876, 5: 1987-09-17, 6: SH_CLERK, 7: 4000, 8: 0, 9: 123, 10: 50}, {0: 193, 1: Britney, 2: Everett, 3: BEVERETT, 4: 650.501.2876, 5: 1987-09-18, 6: SH_CLERK, 7: 3900, 8: 0, 9: 123, 10: 50}, {0: 194, 1: Samuel, 2: McCain, 3: SMCCAIN, 4: 650.501.3876, 5: 1987-09-19, 6: SH_CLERK, 7: 3200, 8: 0, 9: 123, 10: 50}, {0: 195, 1: Vance, 2: Jones, 3: VJONES, 4: 650.501.4876, 5: 1987-09-20, 6: SH_CLERK, 7: 2800, 8: 0, 9: 123, 10: 50}, {0: 196, 1: Alana, 2: Walsh, 3: AWALSH, 4: 650.507.9811, 5: 1987-09-21, 6: SH_CLERK, 7: 3100, 8: 0, 9: 124, 10: 50}, {0: 197, 1: Kevin, 2: Feeney, 3: KFEENEY, 4: 650.507.9822, 5: 1987-09-22, 6: SH_CLERK, 7: 3000, 8: 0, 9: 124, 10: 50}, {0: 198, 1: Donald, 2: OConnell, 3: DOCONNEL, 4: 650.507.9833, 5: 1987-09-23, 6: SH_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 199, 1: Douglas, 2: Grant, 3: DGRANT, 4: 650.507.9844, 5: 1987-09-24, 6: SH_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 202, 1: Pat, 2: Fay, 3: PFAY, 4: 603.123.6666, 5: 1987-09-27, 6: MK_REP, 7: 6000, 8: 0, 9: 201, 10: 20}, {0: 203, 1: Susan, 2: Mavris, 3: SMAVRIS, 4: 515.123.7777, 5: 1987-09-28, 6: HR_REP, 7: 6500, 8: 0, 9: 101, 10: 40}, {0: 204, 1: Hermann, 2: Baer, 3: HBAER, 4: 515.123.8888, 5: 1987-09-29, 6: PR_REP, 7: 10000, 8: 0, 9: 101, 10: 70}, {0: 205, 1: Shelley, 2: Higgins, 3: SHIGGINS, 4: 515.123.8080, 5: 1987-09-30, 6: AC_MGR, 7: 12000, 8: 0, 9: 101, 10: 110}, {0: 206, 1: William, 2: Gietz, 3: WGIETZ, 4: 515.123.8181, 5: 1987-10-01, 6: AC_ACCOUNT, 7: 8300, 8: 0, 9: 205, 10: 110}]\", linq_results: \"[{0: 100, 1: Steven, 2: King, 3: SKING, 4: 515.123.4567, 5: 17.06.1987, 6: AD_PRES, 7: 24000, 8: 0, 9: 0, 10: 90}, {0: 103, 1: Alexander, 2: Hunold, 3: AHUNOLD, 4: 590.423.4567, 5: 20.06.1987, 6: IT_PROG, 7: 9000, 8: 0, 9: 102, 10: 60}, {0: 104, 1: Bruce, 2: Ernst, 3: BERNST, 4: 590.423.4568, 5: 21.06.1987, 6: IT_PROG, 7: 6000, 8: 0, 9: 103, 10: 60}, {0: 105, 1: David, 2: Austin, 3: DAUSTIN, 4: 590.423.4569, 5: 22.06.1987, 6: IT_PROG, 7: 4800, 8: 0, 9: 103, 10: 60}, {0: 106, 1: Valli, 2: Pataballa, 3: VPATABAL, 4: 590.423.4560, 5: 23.06.1987, 6: IT_PROG, 7: 4800, 8: 0, 9: 103, 10: 60}, {0: 107, 1: Diana, 2: Lorentz, 3: DLORENTZ, 4: 590.423.5567, 5: 24.06.1987, 6: IT_PROG, 7: 4200, 8: 0, 9: 103, 10: 60}, {0: 108, 1: Nancy, 2: Greenberg, 3: NGREENBE, 4: 515.124.4569, 5: 25.06.1987, 6: FI_MGR, 7: 12000, 8: 0, 9: 101, 10: 100}, {0: 109, 1: Daniel, 2: Faviet, 3: DFAVIET, 4: 515.124.4169, 5: 26.06.1987, 6: FI_ACCOUNT, 7: 9000, 8: 0, 9: 108, 10: 100}, {0: 110, 1: John, 2: Chen, 3: JCHEN, 4: 515.124.4269, 5: 27.06.1987, 6: FI_ACCOUNT, 7: 8200, 8: 0, 9: 108, 10: 100}, {0: 111, 1: Ismael, 2: Sciarra, 3: ISCIARRA, 4: 515.124.4369, 5: 28.06.1987, 6: FI_ACCOUNT, 7: 7700, 8: 0, 9: 108, 10: 100}, {0: 112, 1: Jose Manuel, 2: Urman, 3: JMURMAN, 4: 515.124.4469, 5: 29.06.1987, 6: FI_ACCOUNT, 7: 7800, 8: 0, 9: 108, 10: 100}, {0: 113, 1: Luis, 2: Popp, 3: LPOPP, 4: 515.124.4567, 5: 30.06.1987, 6: FI_ACCOUNT, 7: 6900, 8: 0, 9: 108, 10: 100}, {0: 115, 1: Alexander, 2: Khoo, 3: AKHOO, 4: 515.127.4562, 5: 02.07.1987, 6: PU_CLERK, 7: 3100, 8: 0, 9: 114, 10: 30}, {0: 116, 1: Shelli, 2: Baida, 3: SBAIDA, 4: 515.127.4563, 5: 03.07.1987, 6: PU_CLERK, 7: 2900, 8: 0, 9: 114, 10: 30}, {0: 117, 1: Sigal, 2: Tobias, 3: STOBIAS, 4: 515.127.4564, 5: 04.07.1987, 6: PU_CLERK, 7: 2800, 8: 0, 9: 114, 10: 30}, {0: 118, 1: Guy, 2: Himuro, 3: GHIMURO, 4: 515.127.4565, 5: 05.07.1987, 6: PU_CLERK, 7: 2600, 8: 0, 9: 114, 10: 30}, {0: 119, 1: Karen, 2: Colmenares, 3: KCOLMENA, 4: 515.127.4566, 5: 06.07.1987, 6: PU_CLERK, 7: 2500, 8: 0, 9: 114, 10: 30}, {0: 120, 1: Matthew, 2: Weiss, 3: MWEISS, 4: 650.123.1234, 5: 07.07.1987, 6: ST_MAN, 7: 8000, 8: 0, 9: 100, 10: 50}, {0: 121, 1: Adam, 2: Fripp, 3: AFRIPP, 4: 650.123.2234, 5: 08.07.1987, 6: ST_MAN, 7: 8200, 8: 0, 9: 100, 10: 50}, {0: 123, 1: Shanta, 2: Vollman, 3: SVOLLMAN, 4: 650.123.4234, 5: 10.07.1987, 6: ST_MAN, 7: 6500, 8: 0, 9: 100, 10: 50}, {0: 124, 1: Kevin, 2: Mourgos, 3: KMOURGOS, 4: 650.123.5234, 5: 11.07.1987, 6: ST_MAN, 7: 5800, 8: 0, 9: 100, 10: 50}, {0: 125, 1: Julia, 2: Nayer, 3: JNAYER, 4: 650.124.1214, 5: 12.07.1987, 6: ST_CLERK, 7: 3200, 8: 0, 9: 120, 10: 50}, {0: 126, 1: Irene, 2: Mikkilineni, 3: IMIKKILI, 4: 650.124.1224, 5: 13.07.1987, 6: ST_CLERK, 7: 2700, 8: 0, 9: 120, 10: 50}, {0: 127, 1: James, 2: Landry, 3: JLANDRY, 4: 650.124.1334, 5: 14.07.1987, 6: ST_CLERK, 7: 2400, 8: 0, 9: 120, 10: 50}, {0: 128, 1: Steven, 2: Markle, 3: SMARKLE, 4: 650.124.1434, 5: 15.07.1987, 6: ST_CLERK, 7: 2200, 8: 0, 9: 120, 10: 50}, {0: 129, 1: Laura, 2: Bissot, 3: LBISSOT, 4: 650.124.5234, 5: 16.07.1987, 6: ST_CLERK, 7: 3300, 8: 0, 9: 121, 10: 50}, {0: 130, 1: Mozhe, 2: Atkinson, 3: MATKINSO, 4: 650.124.6234, 5: 17.07.1987, 6: ST_CLERK, 7: 2800, 8: 0, 9: 121, 10: 50}, {0: 131, 1: James, 2: Marlow, 3: JAMRLOW, 4: 650.124.7234, 5: 18.07.1987, 6: ST_CLERK, 7: 2500, 8: 0, 9: 121, 10: 50}, {0: 132, 1: TJ, 2: Olson, 3: TJOLSON, 4: 650.124.8234, 5: 19.07.1987, 6: ST_CLERK, 7: 2100, 8: 0, 9: 121, 10: 50}, {0: 133, 1: Jason, 2: Mallin, 3: JMALLIN, 4: 650.127.1934, 5: 20.07.1987, 6: ST_CLERK, 7: 3300, 8: 0, 9: 122, 10: 50}, {0: 134, 1: Michael, 2: Rogers, 3: MROGERS, 4: 650.127.1834, 5: 21.07.1987, 6: ST_CLERK, 7: 2900, 8: 0, 9: 122, 10: 50}, {0: 135, 1: Ki, 2: Gee, 3: KGEE, 4: 650.127.1734, 5: 22.07.1987, 6: ST_CLERK, 7: 2400, 8: 0, 9: 122, 10: 50}, {0: 136, 1: Hazel, 2: Philtanker, 3: HPHILTAN, 4: 650.127.1634, 5: 23.07.1987, 6: ST_CLERK, 7: 2200, 8: 0, 9: 122, 10: 50}, {0: 137, 1: Renske, 2: Ladwig, 3: RLADWIG, 4: 650.121.1234, 5: 24.07.1987, 6: ST_CLERK, 7: 3600, 8: 0, 9: 123, 10: 50}, {0: 138, 1: Stephen, 2: Stiles, 3: SSTILES, 4: 650.121.2034, 5: 25.07.1987, 6: ST_CLERK, 7: 3200, 8: 0, 9: 123, 10: 50}, {0: 139, 1: John, 2: Seo, 3: JSEO, 4: 650.121.2019, 5: 26.07.1987, 6: ST_CLERK, 7: 2700, 8: 0, 9: 123, 10: 50}, {0: 140, 1: Joshua, 2: Patel, 3: JPATEL, 4: 650.121.1834, 5: 27.07.1987, 6: ST_CLERK, 7: 2500, 8: 0, 9: 123, 10: 50}, {0: 141, 1: Trenna, 2: Rajs, 3: TRAJS, 4: 650.121.8009, 5: 28.07.1987, 6: ST_CLERK, 7: 3500, 8: 0, 9: 124, 10: 50}, {0: 142, 1: Curtis, 2: Davies, 3: CDAVIES, 4: 650.121.2994, 5: 29.07.1987, 6: ST_CLERK, 7: 3100, 8: 0, 9: 124, 10: 50}, {0: 143, 1: Randall, 2: Matos, 3: RMATOS, 4: 650.121.2874, 5: 30.07.1987, 6: ST_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 144, 1: Peter, 2: Vargas, 3: PVARGAS, 4: 650.121.2004, 5: 31.07.1987, 6: ST_CLERK, 7: 2500, 8: 0, 9: 124, 10: 50}, {0: 145, 1: John, 2: Russell, 3: JRUSSEL, 4: 011.44.1344.429268, 5: 01.08.1987, 6: SA_MAN, 7: 14000, 8: 0.4, 9: 100, 10: 80}, {0: 146, 1: Karen, 2: Partners, 3: KPARTNER, 4: 011.44.1344.467268, 5: 02.08.1987, 6: SA_MAN, 7: 13500, 8: 0.3, 9: 100, 10: 80}, {0: 147, 1: Alberto, 2: Errazuriz, 3: AERRAZUR, 4: 011.44.1344.429278, 5: 03.08.1987, 6: SA_MAN, 7: 12000, 8: 0.3, 9: 100, 10: 80}, {0: 148, 1: Gerald, 2: Cambrault, 3: GCAMBRAU, 4: 011.44.1344.619268, 5: 04.08.1987, 6: SA_MAN, 7: 11000, 8: 0.3, 9: 100, 10: 80}, {0: 149, 1: Eleni, 2: Zlotkey, 3: EZLOTKEY, 4: 011.44.1344.429018, 5: 05.08.1987, 6: SA_MAN, 7: 10500, 8: 0.2, 9: 100, 10: 80}, {0: 150, 1: Peter, 2: Tucker, 3: PTUCKER, 4: 011.44.1344.129268, 5: 06.08.1987, 6: SA_REP, 7: 10000, 8: 0.3, 9: 145, 10: 80}, {0: 151, 1: David, 2: Bernstein, 3: DBERNSTE, 4: 011.44.1344.345268, 5: 07.08.1987, 6: SA_REP, 7: 9500, 8: 0.25, 9: 145, 10: 80}, {0: 152, 1: Peter, 2: Hall, 3: PHALL, 4: 011.44.1344.478968, 5: 08.08.1987, 6: SA_REP, 7: 9000, 8: 0.25, 9: 145, 10: 80}, {0: 153, 1: Christopher, 2: Olsen, 3: COLSEN, 4: 011.44.1344.498718, 5: 09.08.1987, 6: SA_REP, 7: 8000, 8: 0.2, 9: 145, 10: 80}, {0: 154, 1: Nanette, 2: Cambrault, 3: NCAMBRAU, 4: 011.44.1344.987668, 5: 10.08.1987, 6: SA_REP, 7: 7500, 8: 0.2, 9: 145, 10: 80}, {0: 155, 1: Oliver, 2: Tuvault, 3: OTUVAULT, 4: 011.44.1344.486508, 5: 11.08.1987, 6: SA_REP, 7: 7000, 8: 0.15, 9: 145, 10: 80}, {0: 156, 1: Janette, 2: King, 3: JKING, 4: 011.44.1345.429268, 5: 12.08.1987, 6: SA_REP, 7: 10000, 8: 0.35, 9: 146, 10: 80}, {0: 157, 1: Patrick, 2: Sully, 3: PSULLY, 4: 011.44.1345.929268, 5: 13.08.1987, 6: SA_REP, 7: 9500, 8: 0.35, 9: 146, 10: 80}, {0: 158, 1: Allan, 2: McEwen, 3: AMCEWEN, 4: 011.44.1345.829268, 5: 14.08.1987, 6: SA_REP, 7: 9000, 8: 0.35, 9: 146, 10: 80}, {0: 159, 1: Lindsey, 2: Smith, 3: LSMITH, 4: 011.44.1345.729268, 5: 15.08.1987, 6: SA_REP, 7: 8000, 8: 0.3, 9: 146, 10: 80}, {0: 160, 1: Louise, 2: Doran, 3: LDORAN, 4: 011.44.1345.629268, 5: 16.08.1987, 6: SA_REP, 7: 7500, 8: 0.3, 9: 146, 10: 80}, {0: 161, 1: Sarath, 2: Sewall, 3: SSEWALL, 4: 011.44.1345.529268, 5: 17.08.1987, 6: SA_REP, 7: 7000, 8: 0.25, 9: 146, 10: 80}, {0: 162, 1: Clara, 2: Vishney, 3: CVISHNEY, 4: 011.44.1346.129268, 5: 18.08.1987, 6: SA_REP, 7: 10500, 8: 0.25, 9: 147, 10: 80}, {0: 163, 1: Danielle, 2: Greene, 3: DGREENE, 4: 011.44.1346.229268, 5: 19.08.1987, 6: SA_REP, 7: 9500, 8: 0.15, 9: 147, 10: 80}, {0: 164, 1: Mattea, 2: Marvins, 3: MMARVINS, 4: 011.44.1346.329268, 5: 20.08.1987, 6: SA_REP, 7: 7200, 8: 0.1, 9: 147, 10: 80}, {0: 165, 1: David, 2: Lee, 3: DLEE, 4: 011.44.1346.529268, 5: 21.08.1987, 6: SA_REP, 7: 6800, 8: 0.1, 9: 147, 10: 80}, {0: 166, 1: Sundar, 2: Ande, 3: SANDE, 4: 011.44.1346.629268, 5: 22.08.1987, 6: SA_REP, 7: 6400, 8: 0.1, 9: 147, 10: 80}, {0: 167, 1: Amit, 2: Banda, 3: ABANDA, 4: 011.44.1346.729268, 5: 23.08.1987, 6: SA_REP, 7: 6200, 8: 0.1, 9: 147, 10: 80}, {0: 168, 1: Lisa, 2: Ozer, 3: LOZER, 4: 011.44.1343.929268, 5: 24.08.1987, 6: SA_REP, 7: 11500, 8: 0.25, 9: 148, 10: 80}, {0: 169, 1: Harrison, 2: Bloom, 3: HBLOOM, 4: 011.44.1343.829268, 5: 25.08.1987, 6: SA_REP, 7: 10000, 8: 0.2, 9: 148, 10: 80}, {0: 170, 1: Tayler, 2: Fox, 3: TFOX, 4: 011.44.1343.729268, 5: 26.08.1987, 6: SA_REP, 7: 9600, 8: 0.2, 9: 148, 10: 80}, {0: 171, 1: William, 2: Smith, 3: WSMITH, 4: 011.44.1343.629268, 5: 27.08.1987, 6: SA_REP, 7: 7400, 8: 0.15, 9: 148, 10: 80}, {0: 172, 1: Elizabeth, 2: Bates, 3: EBATES, 4: 011.44.1343.529268, 5: 28.08.1987, 6: SA_REP, 7: 7300, 8: 0.15, 9: 148, 10: 80}, {0: 173, 1: Sundita, 2: Kumar, 3: SKUMAR, 4: 011.44.1343.329268, 5: 29.08.1987, 6: SA_REP, 7: 6100, 8: 0.1, 9: 148, 10: 80}, {0: 174, 1: Ellen, 2: Abel, 3: EABEL, 4: 011.44.1644.429267, 5: 30.08.1987, 6: SA_REP, 7: 11000, 8: 0.3, 9: 149, 10: 80}, {0: 175, 1: Alyssa, 2: Hutton, 3: AHUTTON, 4: 011.44.1644.429266, 5: 31.08.1987, 6: SA_REP, 7: 8800, 8: 0.25, 9: 149, 10: 80}, {0: 177, 1: Jack, 2: Livingston, 3: JLIVINGS, 4: 011.44.1644.429264, 5: 02.09.1987, 6: SA_REP, 7: 8400, 8: 0.2, 9: 149, 10: 80}, {0: 178, 1: Kimberely, 2: Grant, 3: KGRANT, 4: 011.44.1644.429263, 5: 03.09.1987, 6: SA_REP, 7: 7000, 8: 0.15, 9: 149, 10: 0}, {0: 179, 1: Charles, 2: Johnson, 3: CJOHNSON, 4: 011.44.1644.429262, 5: 04.09.1987, 6: SA_REP, 7: 6200, 8: 0.1, 9: 149, 10: 80}, {0: 180, 1: Winston, 2: Taylor, 3: WTAYLOR, 4: 650.507.9876, 5: 05.09.1987, 6: SH_CLERK, 7: 3200, 8: 0, 9: 120, 10: 50}, {0: 181, 1: Jean, 2: Fleaur, 3: JFLEAUR, 4: 650.507.9877, 5: 06.09.1987, 6: SH_CLERK, 7: 3100, 8: 0, 9: 120, 10: 50}, {0: 182, 1: Martha, 2: Sullivan, 3: MSULLIVA, 4: 650.507.9878, 5: 07.09.1987, 6: SH_CLERK, 7: 2500, 8: 0, 9: 120, 10: 50}, {0: 183, 1: Girard, 2: Geoni, 3: GGEONI, 4: 650.507.9879, 5: 08.09.1987, 6: SH_CLERK, 7: 2800, 8: 0, 9: 120, 10: 50}, {0: 184, 1: Nandita, 2: Sarchand, 3: NSARCHAN, 4: 650.509.1876, 5: 09.09.1987, 6: SH_CLERK, 7: 4200, 8: 0, 9: 121, 10: 50}, {0: 185, 1: Alexis, 2: Bull, 3: ABULL, 4: 650.509.2876, 5: 10.09.1987, 6: SH_CLERK, 7: 4100, 8: 0, 9: 121, 10: 50}, {0: 186, 1: Julia, 2: Dellinger, 3: JDELLING, 4: 650.509.3876, 5: 11.09.1987, 6: SH_CLERK, 7: 3400, 8: 0, 9: 121, 10: 50}, {0: 187, 1: Anthony, 2: Cabrio, 3: ACABRIO, 4: 650.509.4876, 5: 12.09.1987, 6: SH_CLERK, 7: 3000, 8: 0, 9: 121, 10: 50}, {0: 188, 1: Kelly, 2: Chung, 3: KCHUNG, 4: 650.505.1876, 5: 13.09.1987, 6: SH_CLERK, 7: 3800, 8: 0, 9: 122, 10: 50}, {0: 189, 1: Jennifer, 2: Dilly, 3: JDILLY, 4: 650.505.2876, 5: 14.09.1987, 6: SH_CLERK, 7: 3600, 8: 0, 9: 122, 10: 50}, {0: 190, 1: Timothy, 2: Gates, 3: TGATES, 4: 650.505.3876, 5: 15.09.1987, 6: SH_CLERK, 7: 2900, 8: 0, 9: 122, 10: 50}, {0: 191, 1: Randall, 2: Perkins, 3: RPERKINS, 4: 650.505.4876, 5: 16.09.1987, 6: SH_CLERK, 7: 2500, 8: 0, 9: 122, 10: 50}, {0: 192, 1: Sarah, 2: Bell, 3: SBELL, 4: 650.501.1876, 5: 17.09.1987, 6: SH_CLERK, 7: 4000, 8: 0, 9: 123, 10: 50}, {0: 193, 1: Britney, 2: Everett, 3: BEVERETT, 4: 650.501.2876, 5: 18.09.1987, 6: SH_CLERK, 7: 3900, 8: 0, 9: 123, 10: 50}, {0: 194, 1: Samuel, 2: McCain, 3: SMCCAIN, 4: 650.501.3876, 5: 19.09.1987, 6: SH_CLERK, 7: 3200, 8: 0, 9: 123, 10: 50}, {0: 195, 1: Vance, 2: Jones, 3: VJONES, 4: 650.501.4876, 5: 20.09.1987, 6: SH_CLERK, 7: 2800, 8: 0, 9: 123, 10: 50}, {0: 196, 1: Alana, 2: Walsh, 3: AWALSH, 4: 650.507.9811, 5: 21.09.1987, 6: SH_CLERK, 7: 3100, 8: 0, 9: 124, 10: 50}, {0: 197, 1: Kevin, 2: Feeney, 3: KFEENEY, 4: 650.507.9822, 5: 22.09.1987, 6: SH_CLERK, 7: 3000, 8: 0, 9: 124, 10: 50}, {0: 198, 1: Donald, 2: OConnell, 3: DOCONNEL, 4: 650.507.9833, 5: 23.09.1987, 6: SH_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 199, 1: Douglas, 2: Grant, 3: DGRANT, 4: 650.507.9844, 5: 24.09.1987, 6: SH_CLERK, 7: 2600, 8: 0, 9: 124, 10: 50}, {0: 202, 1: Pat, 2: Fay, 3: PFAY, 4: 603.123.6666, 5: 27.09.1987, 6: MK_REP, 7: 6000, 8: 0, 9: 201, 10: 20}, {0: 203, 1: Susan, 2: Mavris, 3: SMAVRIS, 4: 515.123.7777, 5: 28.09.1987, 6: HR_REP, 7: 6500, 8: 0, 9: 101, 10: 40}, {0: 204, 1: Hermann, 2: Baer, 3: HBAER, 4: 515.123.8888, 5: 29.09.1987, 6: PR_REP, 7: 10000, 8: 0, 9: 101, 10: 70}, {0: 205, 1: Shelley, 2: Higgins, 3: SHIGGINS, 4: 515.123.8080, 5: 30.09.1987, 6: AC_MGR, 7: 12000, 8: 0, 9: 101, 10: 110}, {0: 206, 1: William, 2: Gietz, 3: WGIETZ, 4: 515.123.8181, 5: 01.10.1987, 6: AC_ACCOUNT, 7: 8300, 8: 0, 9: 205, 10: 110}]\" }", "should_retest": true}, {"id": "37cc7eb966f1f108136425e501497f5d90035451d6317d178a7b893b8046b676", "dataset_name": "Spider", "sql": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id", "question": "display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.", "linq": "context.Employees.GroupBy(row => new { row.DepartmentId }).Select(group => new { group.First().FirstName, group.First().LastName, group.First().Salary, group.Key.DepartmentId, MaxSalary = group.Select(row => row.Salary).Max() }).ToList();", "db_name": "hr_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: Kimberely, 1: Grant, 2: 7000, 3: 0, 4: 7000}, {0: Jennifer, 1: Whalen, 2: 4400, 3: 10, 4: 4400}, {0: Michael, 1: Hartstein, 2: 13000, 3: 20, 4: 13000}, {0: Den, 1: Raphaely, 2: 11000, 3: 30, 4: 11000}, {0: Susan, 1: Mavris, 2: 6500, 3: 40, 4: 6500}, {0: Adam, 1: Fripp, 2: 8200, 3: 50, 4: 8200}, {0: Alexander, 1: Hunold, 2: 9000, 3: 60, 4: 9000}, {0: Hermann, 1: Baer, 2: 10000, 3: 70, 4: 10000}, {0: John, 1: Russell, 2: 14000, 3: 80, 4: 14000}, {0: Steven, 1: King, 2: 24000, 3: 90, 4: 24000}, {0: Nancy, 1: Greenberg, 2: 12000, 3: 100, 4: 12000}, {0: Shelley, 1: Higgins, 2: 12000, 3: 110, 4: 12000}]\", linq_results: \"[{0: Kimberely, 1: Grant, 2: 7000, 3: 0, 4: 7000}, {0: Jennifer, 1: Whalen, 2: 4400, 3: 10, 4: 4400}, {0: Michael, 1: Hartstein, 2: 13000, 3: 20, 4: 13000}, {0: Den, 1: Raphaely, 2: 11000, 3: 30, 4: 11000}, {0: Susan, 1: Mavris, 2: 6500, 3: 40, 4: 6500}, {0: Matthew, 1: Weiss, 2: 8000, 3: 50, 4: 8200}, {0: Alexander, 1: Hunold, 2: 9000, 3: 60, 4: 9000}, {0: Hermann, 1: Baer, 2: 10000, 3: 70, 4: 10000}, {0: John, 1: Russell, 2: 14000, 3: 80, 4: 14000}, {0: Steven, 1: King, 2: 24000, 3: 90, 4: 24000}, {0: Nancy, 1: Greenberg, 2: 12000, 3: 100, 4: 12000}, {0: Shelley, 1: Higgins, 2: 12000, 3: 110, 4: 12000}]\" }", "should_retest": true}, {"id": "2ebe6bfb155ba35fe97f1a7432d8b09192af4592b4d8b6e338c9e482c8698a89", "dataset_name": "Spider", "sql": "SELECT count(DISTINCT scientist) FROM assignedto", "question": "How many different scientists are assigned to any project?", "linq": "context.Scientists.Select(row => row.Id).Distinct().Count();", "db_name": "scientist_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,49): error CS1061: 'Scientist' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Scientist' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.30", "should_retest": true}, {"id": "50b8e08a14302788d8844bb59613986f4c0fbd80e741b4e57650b21966ad106e", "dataset_name": "Spider", "sql": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1", "question": "Find the name and hours of project that has the most number of scientists.", "linq": "context.Projects.SelectMany(row => row.Scientists, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name, group.First().T1.Hours }).Take(1).ToList();", "db_name": "scientist_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,119): error CS1061: 'Project' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Project' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.20", "should_retest": true}, {"id": "8d7415c18c19afc27ef9bc4d2d3dfbcae687428c8c2e0d0afe37ea47a8f4e4a7", "dataset_name": "Spider", "sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)", "question": "Select the project names which are not assigned yet.", "linq": "context.Projects.Where(row => !context.Scientists.Select(row => row.Id).Contains(row.Code)).Select(row => new { row.Name }).ToList();", "db_name": "scientist_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,80): error CS1061: 'Scientist' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Scientist' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.25", "should_retest": true}, {"id": "5ab9958f2bc1c85e3aff3f11fb15f36501be086a1c0a340914348ac9b05f82b7", "dataset_name": "Spider", "sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "question": "Find the name of scientists who are not assigned to any project.", "linq": "context.Scientists.Where(row => !context.Scientists.Select(row => row.Id).Contains(row.Ssn)).Select(row => new { row.Name }).ToList();", "db_name": "scientist_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,82): error CS1061: 'Scientist' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Scientist' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.26", "should_retest": true}, {"id": "7c6ebc3ba708ddaa252c9a2caca23619a77fffa90f0e6697c12e1e9914804503", "dataset_name": "Spider", "sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "question": "Find the number of scientists who are not assigned to any project.", "linq": "context.Scientists.Where(row => !context.Scientists.Select(row => row.Id).Contains(row.Ssn)).Count();", "db_name": "scientist_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,82): error CS1061: 'Scientist' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Scientist' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.30", "should_retest": true}, {"id": "4df0a425737999a9b2bda34b116258cb5ffc6393a199561230d68231e3d3a190", "dataset_name": "Spider", "sql": "SELECT * FROM COURSE ORDER BY Credits", "question": "List all information about courses sorted by credits in the ascending order.", "linq": "context.Courses.OrderBy(row => row.Credits).Select(row => new { row.Cid, row.Cname, row.Credits, row.Instructor, row.Days, row.Hours, row.Dno }).ToList();", "db_name": "college_3", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 600.103, 1: INTRODUCTION TO COMPUTER SCIENCE, 2: 1, 3: 4230, 4: Th, 5: 4, 6: 600}, {0: 600.303, 1: SUPERCOMPUTING, 2: 1, 3: 9826, 4: W, 5: 4-6:20, 6: 600}, {0: 600.601, 1: COMPUTER SCIENCE SEMINAR, 2: 1, 3: 6191, 4: ThF, 5: 10:30-12, 6: 600}, {0: 050.802, 1: RESEARCH SEMINAR IN COGNITIVE PROCESSES, 2: 1, 3: 9011, 4: W, 5: 1-3, 6: 50}, {0: 550.790, 1: TOPICS IN APPLIED MATH, 2: 2, 3: 2881, 4: MT, 5: 4:30-6, 6: 550}, {0: 600.101, 1: COMPUTER LITERACY, 2: 3, 3: 6112, 4: MTW, 5: 3, 6: 600}, {0: 600.107, 1: INTRO TO PROGRAMMING IN JAVA, 2: 3, 3: 1193, 4: MTW, 5: 3, 6: 600}, {0: 600.109, 1: INTRO TO PROGRAMMING IN C/C++, 2: 3, 3: 4230, 4: MTW, 5: 12, 6: 600}, {0: 600.113, 1: EXPLORING THE INTERNET, 2: 3, 3: 6112, 4: MTW, 5: 4, 6: 600}, {0: 600.121, 1: JAVA PROGRAMMING, 2: 3, 3: 6112, 4: ThF, 5: 10:30-12, 6: 600}, {0: 600.211, 1: UNIX SYSTEMS PROGRAMMING, 2: 3, 3: 6112, 4: ThF, 5: 1-2:15, 6: 600}, {0: 600.227, 1: DATA STRUCTURES in JAVA, 2: 3, 3: 1121, 4: MTW, 5: 9, 6: 600}, {0: 600.232, 1: MULTIMEDIA COMPUTING, 2: 3, 3: 9826, 4: MW, 5: 1-2:30, 6: 600}, {0: 600.271, 1: COMPUTATIONAL MODELS, 2: 3, 3: 9172, 4: MTW, 5: 1, 6: 600}, {0: 600.315, 1: DATABASE SYSTEMS, 2: 3, 3: 2192, 4: ThF, 5: 2:30-4, 6: 600}, {0: 600.333, 1: COMPUTER SYSTEM FUNDAMENTALS, 2: 3, 3: 1148, 4: MTW, 5: 8, 6: 600}, {0: 600.337, 1: DISTRIBUTED SYSTEMS, 2: 3, 3: 8918, 4: M, 5: 3, 6: 600}, {0: 600.363, 1: INTRODUCTION TO ALGORITHMS, 2: 3, 3: 7712, 4: MTW, 5: 9, 6: 600}, {0: 600.415, 1: DATABASE SYSTEMS, 2: 3, 3: 2192, 4: ThF, 5: 2:30-4, 6: 600}, {0: 600.433, 1: COMPUTER SYSTEMS, 2: 3, 3: 1148, 4: MTW, 5: 8, 6: 600}, {0: 600.437, 1: DISTRIBUTED SYSTEMS, 2: 3, 3: 8918, 4: M, 5: 3, 6: 600}, {0: 600.445, 1: QUANTITATIVE MEDICAL COMPUTING, 2: 3, 3: 7723, 4: ThF, 5: 1-2:15, 6: 600}, {0: 600.461, 1: COMPUTER VISION, 2: 3, 3: 8114, 4: MTW, 5: 1, 6: 600}, {0: 600.463, 1: ALGORITHMS I, 2: 3, 3: 7712, 4: MTW, 5: 9, 6: 600}, {0: 600.465, 1: INTRO TO NATURAL LANGUAGE PROCESSING, 2: 3, 3: 7792, 4: MTW, 5: 2, 6: 600}, {0: 600.509, 1: COMPUTER SCIENCE INTERNSHIP, 2: 3, 3: 1121, 4: M, 5: 1, 6: 600}, {0: 600.657, 1: HIGH PERFORMANCE GRAPHICS AND MODELING, 2: 3, 3: 8423, 4: M, 5: 4-5:30, 6: 600}, {0: 600.787, 1: SEMINAR ON COMPUTATIONAL GEOMETRY, 2: 3, 3: 1121, 4: Th, 5: 2, 6: 600}, {0: 500.203, 1: ACCOUNTING I, 2: 3, 3: 9823, 4: T, 5: 6:15-8:45, 6: 550}, {0: 500.204, 1: ACCOUNTING II, 2: 3, 3: 9823, 4: Th, 5: 6:15-8:45, 6: 550}, {0: 500.205, 1: BUSINESS LAW I, 2: 3, 3: 8791, 4: W, 5: 6:15-8:45, 6: 550}, {0: 500.206, 1: BUSINESS LAW II, 2: 3, 3: 8791, 4: M, 5: 6:15-8:45, 6: 550}, {0: 550.620, 1: PROBABILITY THEORY I, 2: 3, 3: 2738, 4: MTW, 5: 2, 6: 550}, {0: 550.626, 1: STOCHASTIC PROCESSES II, 2: 3, 3: 8102, 4: MTW, 5: 1, 6: 550}, {0: 550.631, 1: STATISTICAL INFERENCE, 2: 3, 3: 6182, 4: MTW, 5: 3, 6: 550}, {0: 550.661, 1: FOUNDATIONS OF OPTIMIZATION, 2: 3, 3: 9823, 4: MTW, 5: 10, 6: 550}, {0: 550.671, 1: COMBINATORIAL ANALYSIS, 2: 3, 3: 8772, 4: MTW, 5: 12, 6: 550}, {0: 550.681, 1: NUMERICAL ANALYSIS, 2: 3, 3: 6541, 4: MTW, 5: 11, 6: 550}, {0: 550.721, 1: PERCOLATION THEORY, 2: 3, 3: 8122, 4: MTW, 5: 9, 6: 550}, {0: 550.750, 1: TOPICS IN OPERATIONS RESEARCH, 2: 3, 3: 9922, 4: MW, 5: 3-4:30, 6: 550}, {0: 520.137, 1: INTRODUCTION TO ECE, 2: 3, 3: 8723, 4: MTW, 5: 11, 6: 520}, {0: 520.219, 1: FIELDS, MATTER AND WAVES, 2: 3, 3: 9210, 4: MTW, 5: 3, 6: 520}, {0: 520.325, 1: INTEGRATED ELECTRONICS, 2: 3, 3: 6191, 4: MTW, 5: 3, 6: 520}, {0: 520.345, 1: ECE LABORATORY, 2: 3, 3: 1823, 4: W, 5: 2, 6: 520}, {0: 520.349, 1: MICROPROCESSOR LAB I, 2: 3, 3: 9824, 4: Th, 5: 8, 6: 520}, {0: 520.353, 1: CONTROL SYSTEMS, 2: 3, 3: 6925, 4: MTW, 5: 10, 6: 520}, {0: 520.401, 1: BASIC COMMUNICATIONS, 2: 3, 3: 6191, 4: MTW, 5: 1, 6: 520}, {0: 520.410, 1: FIBER OPTICS AND PHOTONICS, 2: 3, 3: 6191, 4: MTW, 5: 1, 6: 520}, {0: 520.419, 1: ITERATIVE ALGORITHMS, 2: 3, 3: 2119, 4: MT, 5: 4-5:15, 6: 520}, {0: 520.421, 1: INTRODUCTION TO NON-LINEAR SYSTEMS, 2: 3, 3: 7231, 4: MTW, 5: 9, 6: 520}, {0: 520.432, 1: TOPICS IN MEDICAL IMAGING SYSTEMS, 2: 3, 3: 9514, 4: TTh, 5: 8:30-10, 6: 520}, {0: 520.475, 1: PROCESSING AND RECOGNITION OF SPEECH, 2: 3, 3: 6330, 4: TW, 5: 2-3:30, 6: 520}, {0: 520.490, 1: ANALOG AND DIGITAL VLSI SYSTEMS, 2: 3, 3: 8722, 4: ThF, 5: 10:30-12, 6: 520}, {0: 520.605, 1: SOLID STATE PHYSICS, 2: 3, 3: 9379, 4: Tu, 5: 1-4, 6: 520}, {0: 520.609, 1: NONLINEAR TECHNICAL IMAGE PROCESSING, 2: 3, 3: 7134, 4: Th, 5: 1-4, 6: 520}, {0: 520.651, 1: RANDOM SIGNAL ANALYSIS, 2: 3, 3: 9514, 4: ThF, 5: 10:30-12, 6: 520}, {0: 050.102, 1: LANGUAGE AND MIND, 2: 3, 3: 4432, 4: MTW, 5: 10, 6: 50}, {0: 050.109, 1: MIND, BRAIN, COMPUTERS, 2: 3, 3: 6910, 4: MW, 5: 2-3:15, 6: 50}, {0: 050.325, 1: SOUND STRUCTURES IN NATURAL LANGUAGE, 2: 3, 3: 4432, 4: T, 5: 10-12, 6: 50}, {0: 050.370, 1: FORMAL METHODS IN COGNITIVE SCIENCE, 2: 3, 3: 6910, 4: MW, 5: 11:30, 6: 50}, {0: 050.381, 1: LANGUAGE DEVELOPMENT, 2: 3, 3: 8989, 4: T, 5: 1-3, 6: 50}, {0: 050.427, 1: THE HISTORY OF ROMANCE LANGUAGES, 2: 3, 3: 4432, 4: W, 5: 1-3, 6: 50}, {0: 050.670, 1: FORMAL METHODS IN COGNITIVE SCIENCE, 2: 3, 3: 4432, 4: MW, 5: 11:30-12:45, 6: 50}, {0: 050.821, 1: COMP. MODELS OF SENTENCE PROCESSING, 2: 3, 3: 5718, 4: M, 5: 1-4, 6: 50}, {0: 550.111, 1: STATISTICAL ANALYSIS, 2: 4, 3: 2311, 4: MTW, 5: 12, 6: 550}, {0: 550.171, 1: DISCRETE MATHEMATICS, 2: 4, 3: 8772, 4: MTW, 5: 11, 6: 550}, {0: 550.291, 1: LINEAR ALGEBRA AND DIFFERENTIAL EQNS, 2: 4, 3: 6541, 4: MTW, 5: 9, 6: 550}, {0: 550.310, 1: PROBABILITY AND STATISTICS, 2: 4, 3: 8102, 4: MTW, 5: 10, 6: 550}, {0: 550.361, 1: INTRODUCTION TO OPTIMIZATION, 2: 4, 3: 2881, 4: MTW, 5: 2, 6: 550}, {0: 550.413, 1: APPLIED STATISTICS AND DATA ANALYSIS, 2: 4, 3: 1177, 4: MTW, 5: 11, 6: 550}, {0: 550.420, 1: INTRODUCTION TO PROBABILITY, 2: 4, 3: 2738, 4: MTW, 5: 1, 6: 550}, {0: 550.471, 1: COMBINATORIAL ANALYSIS, 2: 4, 3: 8772, 4: MTW, 5: 12, 6: 550}, {0: 520.213, 1: CIRCUITS, 2: 4, 3: 9210, 4: MTW, 5: 2, 6: 520}, {0: 520.435, 1: DIGITAL SIGNAL PROCESSING, 2: 4, 3: 8118, 4: MTW, 5: 11, 6: 520}, {0: 520.603, 1: ELECTROMAGNETIC WAVES, 2: 4, 3: 9210, 4: Th, 5: 1-4:30, 6: 520}, {0: 050.203, 1: COGNITIVE NEUROSCIENCE, 2: 4, 3: 9011, 4: MT, 5: 3:30-4:45, 6: 50}]\", linq_results: \"[{0: 600.103, 1: INTRODUCTION TO COMPUTER SCIENCE, 2: 1, 3: 4230, 4: Th, 5: 4, 6: 600}, {0: 600.303, 1: SUPERCOMPUTING, 2: 1, 3: 9826, 4: W, 5: 4-6:20, 6: 600}, {0: 600.601, 1: COMPUTER SCIENCE SEMINAR, 2: 1, 3: 6191, 4: ThF, 5: 10:30-12, 6: 600}, {0: 50.802, 1: RESEARCH SEMINAR IN COGNITIVE PROCESSES, 2: 1, 3: 9011, 4: W, 5: 1-3, 6: 50}, {0: 550.790, 1: TOPICS IN APPLIED MATH, 2: 2, 3: 2881, 4: MT, 5: 4:30-6, 6: 550}, {0: 600.101, 1: COMPUTER LITERACY, 2: 3, 3: 6112, 4: MTW, 5: 3, 6: 600}, {0: 600.107, 1: INTRO TO PROGRAMMING IN JAVA, 2: 3, 3: 1193, 4: MTW, 5: 3, 6: 600}, {0: 600.109, 1: INTRO TO PROGRAMMING IN C/C++, 2: 3, 3: 4230, 4: MTW, 5: 12, 6: 600}, {0: 600.113, 1: EXPLORING THE INTERNET, 2: 3, 3: 6112, 4: MTW, 5: 4, 6: 600}, {0: 600.121, 1: JAVA PROGRAMMING, 2: 3, 3: 6112, 4: ThF, 5: 10:30-12, 6: 600}, {0: 600.211, 1: UNIX SYSTEMS PROGRAMMING, 2: 3, 3: 6112, 4: ThF, 5: 1-2:15, 6: 600}, {0: 600.227, 1: DATA STRUCTURES in JAVA, 2: 3, 3: 1121, 4: MTW, 5: 9, 6: 600}, {0: 600.232, 1: MULTIMEDIA COMPUTING, 2: 3, 3: 9826, 4: MW, 5: 1-2:30, 6: 600}, {0: 600.271, 1: COMPUTATIONAL MODELS, 2: 3, 3: 9172, 4: MTW, 5: 1, 6: 600}, {0: 600.315, 1: DATABASE SYSTEMS, 2: 3, 3: 2192, 4: ThF, 5: 2:30-4, 6: 600}, {0: 600.333, 1: COMPUTER SYSTEM FUNDAMENTALS, 2: 3, 3: 1148, 4: MTW, 5: 8, 6: 600}, {0: 600.337, 1: DISTRIBUTED SYSTEMS, 2: 3, 3: 8918, 4: M, 5: 3, 6: 600}, {0: 600.363, 1: INTRODUCTION TO ALGORITHMS, 2: 3, 3: 7712, 4: MTW, 5: 9, 6: 600}, {0: 600.415, 1: DATABASE SYSTEMS, 2: 3, 3: 2192, 4: ThF, 5: 2:30-4, 6: 600}, {0: 600.433, 1: COMPUTER SYSTEMS, 2: 3, 3: 1148, 4: MTW, 5: 8, 6: 600}, {0: 600.437, 1: DISTRIBUTED SYSTEMS, 2: 3, 3: 8918, 4: M, 5: 3, 6: 600}, {0: 600.445, 1: QUANTITATIVE MEDICAL COMPUTING, 2: 3, 3: 7723, 4: ThF, 5: 1-2:15, 6: 600}, {0: 600.461, 1: COMPUTER VISION, 2: 3, 3: 8114, 4: MTW, 5: 1, 6: 600}, {0: 600.463, 1: ALGORITHMS I, 2: 3, 3: 7712, 4: MTW, 5: 9, 6: 600}, {0: 600.465, 1: INTRO TO NATURAL LANGUAGE PROCESSING, 2: 3, 3: 7792, 4: MTW, 5: 2, 6: 600}, {0: 600.509, 1: COMPUTER SCIENCE INTERNSHIP, 2: 3, 3: 1121, 4: M, 5: 1, 6: 600}, {0: 600.657, 1: HIGH PERFORMANCE GRAPHICS AND MODELING, 2: 3, 3: 8423, 4: M, 5: 4-5:30, 6: 600}, {0: 600.787, 1: SEMINAR ON COMPUTATIONAL GEOMETRY, 2: 3, 3: 1121, 4: Th, 5: 2, 6: 600}, {0: 500.203, 1: ACCOUNTING I, 2: 3, 3: 9823, 4: T, 5: 6:15-8:45, 6: 550}, {0: 500.204, 1: ACCOUNTING II, 2: 3, 3: 9823, 4: Th, 5: 6:15-8:45, 6: 550}, {0: 500.205, 1: BUSINESS LAW I, 2: 3, 3: 8791, 4: W, 5: 6:15-8:45, 6: 550}, {0: 500.206, 1: BUSINESS LAW II, 2: 3, 3: 8791, 4: M, 5: 6:15-8:45, 6: 550}, {0: 550.620, 1: PROBABILITY THEORY I, 2: 3, 3: 2738, 4: MTW, 5: 2, 6: 550}, {0: 550.626, 1: STOCHASTIC PROCESSES II, 2: 3, 3: 8102, 4: MTW, 5: 1, 6: 550}, {0: 550.631, 1: STATISTICAL INFERENCE, 2: 3, 3: 6182, 4: MTW, 5: 3, 6: 550}, {0: 550.661, 1: FOUNDATIONS OF OPTIMIZATION, 2: 3, 3: 9823, 4: MTW, 5: 10, 6: 550}, {0: 550.671, 1: COMBINATORIAL ANALYSIS, 2: 3, 3: 8772, 4: MTW, 5: 12, 6: 550}, {0: 550.681, 1: NUMERICAL ANALYSIS, 2: 3, 3: 6541, 4: MTW, 5: 11, 6: 550}, {0: 550.721, 1: PERCOLATION THEORY, 2: 3, 3: 8122, 4: MTW, 5: 9, 6: 550}, {0: 550.750, 1: TOPICS IN OPERATIONS RESEARCH, 2: 3, 3: 9922, 4: MW, 5: 3-4:30, 6: 550}, {0: 520.137, 1: INTRODUCTION TO ECE, 2: 3, 3: 8723, 4: MTW, 5: 11, 6: 520}, {0: 520.219, 1: FIELDS, MATTER AND WAVES, 2: 3, 3: 9210, 4: MTW, 5: 3, 6: 520}, {0: 520.325, 1: INTEGRATED ELECTRONICS, 2: 3, 3: 6191, 4: MTW, 5: 3, 6: 520}, {0: 520.345, 1: ECE LABORATORY, 2: 3, 3: 1823, 4: W, 5: 2, 6: 520}, {0: 520.349, 1: MICROPROCESSOR LAB I, 2: 3, 3: 9824, 4: Th, 5: 8, 6: 520}, {0: 520.353, 1: CONTROL SYSTEMS, 2: 3, 3: 6925, 4: MTW, 5: 10, 6: 520}, {0: 520.401, 1: BASIC COMMUNICATIONS, 2: 3, 3: 6191, 4: MTW, 5: 1, 6: 520}, {0: 520.410, 1: FIBER OPTICS AND PHOTONICS, 2: 3, 3: 6191, 4: MTW, 5: 1, 6: 520}, {0: 520.419, 1: ITERATIVE ALGORITHMS, 2: 3, 3: 2119, 4: MT, 5: 4-5:15, 6: 520}, {0: 520.421, 1: INTRODUCTION TO NON-LINEAR SYSTEMS, 2: 3, 3: 7231, 4: MTW, 5: 9, 6: 520}, {0: 520.432, 1: TOPICS IN MEDICAL IMAGING SYSTEMS, 2: 3, 3: 9514, 4: TTh, 5: 8:30-10, 6: 520}, {0: 520.475, 1: PROCESSING AND RECOGNITION OF SPEECH, 2: 3, 3: 6330, 4: TW, 5: 2-3:30, 6: 520}, {0: 520.490, 1: ANALOG AND DIGITAL VLSI SYSTEMS, 2: 3, 3: 8722, 4: ThF, 5: 10:30-12, 6: 520}, {0: 520.605, 1: SOLID STATE PHYSICS, 2: 3, 3: 9379, 4: Tu, 5: 1-4, 6: 520}, {0: 520.609, 1: NONLINEAR TECHNICAL IMAGE PROCESSING, 2: 3, 3: 7134, 4: Th, 5: 1-4, 6: 520}, {0: 520.651, 1: RANDOM SIGNAL ANALYSIS, 2: 3, 3: 9514, 4: ThF, 5: 10:30-12, 6: 520}, {0: 50.102, 1: LANGUAGE AND MIND, 2: 3, 3: 4432, 4: MTW, 5: 10, 6: 50}, {0: 50.109, 1: MIND, BRAIN, COMPUTERS, 2: 3, 3: 6910, 4: MW, 5: 2-3:15, 6: 50}, {0: 50.325, 1: SOUND STRUCTURES IN NATURAL LANGUAGE, 2: 3, 3: 4432, 4: T, 5: 10-12, 6: 50}, {0: 50.370, 1: FORMAL METHODS IN COGNITIVE SCIENCE, 2: 3, 3: 6910, 4: MW, 5: 11:30, 6: 50}, {0: 50.381, 1: LANGUAGE DEVELOPMENT, 2: 3, 3: 8989, 4: T, 5: 1-3, 6: 50}, {0: 50.427, 1: THE HISTORY OF ROMANCE LANGUAGES, 2: 3, 3: 4432, 4: W, 5: 1-3, 6: 50}, {0: 50.670, 1: FORMAL METHODS IN COGNITIVE SCIENCE, 2: 3, 3: 4432, 4: MW, 5: 11:30-12:45, 6: 50}, {0: 50.821, 1: COMP. MODELS OF SENTENCE PROCESSING, 2: 3, 3: 5718, 4: M, 5: 1-4, 6: 50}, {0: 550.111, 1: STATISTICAL ANALYSIS, 2: 4, 3: 2311, 4: MTW, 5: 12, 6: 550}, {0: 550.171, 1: DISCRETE MATHEMATICS, 2: 4, 3: 8772, 4: MTW, 5: 11, 6: 550}, {0: 550.291, 1: LINEAR ALGEBRA AND DIFFERENTIAL EQNS, 2: 4, 3: 6541, 4: MTW, 5: 9, 6: 550}, {0: 550.310, 1: PROBABILITY AND STATISTICS, 2: 4, 3: 8102, 4: MTW, 5: 10, 6: 550}, {0: 550.361, 1: INTRODUCTION TO OPTIMIZATION, 2: 4, 3: 2881, 4: MTW, 5: 2, 6: 550}, {0: 550.413, 1: APPLIED STATISTICS AND DATA ANALYSIS, 2: 4, 3: 1177, 4: MTW, 5: 11, 6: 550}, {0: 550.420, 1: INTRODUCTION TO PROBABILITY, 2: 4, 3: 2738, 4: MTW, 5: 1, 6: 550}, {0: 550.471, 1: COMBINATORIAL ANALYSIS, 2: 4, 3: 8772, 4: MTW, 5: 12, 6: 550}, {0: 520.213, 1: CIRCUITS, 2: 4, 3: 9210, 4: MTW, 5: 2, 6: 520}, {0: 520.435, 1: DIGITAL SIGNAL PROCESSING, 2: 4, 3: 8118, 4: MTW, 5: 11, 6: 520}, {0: 520.603, 1: ELECTROMAGNETIC WAVES, 2: 4, 3: 9210, 4: Th, 5: 1-4:30, 6: 520}, {0: 50.203, 1: COGNITIVE NEUROSCIENCE, 2: 4, 3: 9011, 4: MT, 5: 3:30-4:45, 6: 50}]\" }", "should_retest": true}, {"id": "d67bc1dbb96a4be918f02f732fa058a894c02b8b3408d8546da3e06cfdfed9b3", "dataset_name": "Spider", "sql": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50", "question": "Find the buildings which have rooms with capacity more than 50.", "linq": "context.Classrooms.Where(row => row.Capacity > 50).Select(row => new { row.Building }).Distinct().ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "35149fb112f46d0a546832120584b3a0d2118bf01c3be3a1f397bc5ba91326c5", "dataset_name": "Spider", "sql": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'", "question": "Count the number of rooms that are not in the Lamberton building.", "linq": "context.Classrooms.Where(row => row.Building != \"Lamberton\").Count();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "fe7921ce8cc3fde77bc6402293c681160d67162911024316eca900aed2174c14", "dataset_name": "Spider", "sql": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "question": "What is the name and building of the departments whose budget is more than the average budget?", "linq": "context.Departments.Where(row => row.Budget > context.Departments.Select(row => (double) row.Budget).Average()).Select(row => new { row.DeptName, row.Building }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "86cf418f4ce05cadaa0d1bbf2da5806eb821d33c5badd52b55790c7ec388d852", "dataset_name": "Spider", "sql": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.", "linq": "context.Classrooms.Where(row => row.Capacity >= 50 && row.Capacity <= 100).Select(row => new { row.Building, row.RoomNumber }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "a3045710e7447719b325d35d73c4f438a614f491e9dd38773be45f78849340c5", "dataset_name": "Spider", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "question": "Find the name and building of the department with the highest budget.", "linq": "context.Departments.OrderByDescending(row => row.Budget).Select(row => new { row.DeptName, row.Building }).Take(1).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "43acb28c3e023592c410f39302d8f64b411510fc3faeec7dfa238bb281249586", "dataset_name": "Spider", "sql": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "question": "What is the name of the student who has the highest total credits in the History department.", "linq": "context.Students.Where(row => row.DeptName == \"History\").OrderByDescending(row => row.TotCred).Select(row => new { row.Name }).Take(1).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "0c8cbb31009408ca1a0a5287d079a95a3cbd06c5ce44107616847d4474b03f0f", "dataset_name": "Spider", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "question": "How many rooms does the Lamberton building have?", "linq": "context.Classrooms.Where(row => row.Building == \"Lamberton\").Count();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "8470536dfcd5bb69cc2fc2bc9b03c87e48d42a22514131b0f8c071a9dc6c5e77", "dataset_name": "Spider", "sql": "SELECT count(DISTINCT s_id) FROM advisor", "question": "How many students have advisors?", "linq": "context.Advisors.Select(row => row.SId).Distinct().Count();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "9a64e52715b6356ef0163a745a1eb8f7b852c1473d84847a68151743cbf074bc", "dataset_name": "Spider", "sql": "SELECT count(DISTINCT dept_name) FROM course", "question": "How many departments offer courses?", "linq": "context.Courses.Select(row => row.DeptName).Distinct().Count();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "57c793e1e36f00c993d39b50cc9d7619f0d7aac97d305348dd55d883d47602cc", "dataset_name": "Spider", "sql": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'", "question": "How many different courses offered by Physics department?", "linq": "context.Courses.Where(row => row.DeptName == \"Physics\").Select(row => row.CourseId).Distinct().Count();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "72413edd7d249355321f1c97a4e394a7f778f775437be274f3e024988c3aa8fd", "dataset_name": "Spider", "sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "question": "Find the title of courses that have two prerequisites?", "linq": "context.Courses.SelectMany(row => row.Courses, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() == 2).Select(group => new { group.First().T1.Title }).ToList();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,115): error CS1061: 'Course' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Course' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.22", "should_retest": true}, {"id": "edd0e0d0b60f31bc89f1aadae58f33f38aa614217ba43b67173f93027ca311d5", "dataset_name": "Spider", "sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "question": "Find the title, credit, and department name of courses that have more than one prerequisites?", "linq": "context.Courses.SelectMany(row => row.Courses, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Title, group.First().T1.Credits, group.First().T1.DeptName }).ToList();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,115): error CS1061: 'Course' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Course' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.19", "should_retest": true}, {"id": "32322fbf82956284e743d29bb094c1c19b22a332a66980466b9a04e6b3852e31", "dataset_name": "Spider", "sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "question": "How many courses that do not have prerequisite?", "linq": "context.Courses.Where(row => !context.Courses.Select(row => row.Id).Contains(row.CourseId)).Count();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,76): error CS1061: 'Course' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Course' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.24", "should_retest": true}, {"id": "43042a046144b28ab684b6b7cdbfd3b64812c1b33ce95b2bc8ca28b2ff8f68dc", "dataset_name": "Spider", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "question": "Find the name of the courses that do not have any prerequisite?", "linq": "context.Courses.Where(row => !context.Courses.Select(row => row.Id).Contains(row.CourseId)).Select(row => new { row.Title }).ToList();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,76): error CS1061: 'Course' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Course' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.20", "should_retest": true}, {"id": "00e593b392e95069fdb576cc69c720d90161c61b30abd20e0c13204a37fc9bcb", "dataset_name": "Spider", "sql": "SELECT COUNT (DISTINCT id) FROM teaches", "question": "How many different instructors have taught some course?", "linq": "context.Instructors.Select(row => row.Id).Distinct().Count();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "4fae60bb7c4821e0c58f3286f6dc187a85936e5e24c6ed8c163d001c7e46fc47", "dataset_name": "Spider", "sql": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'", "question": "Find the total budgets of the Marketing or Finance department.", "linq": "context.Departments.Where(row => row.DeptName == \"Marketing\" || row.DeptName == \"Finance\").Select(row => row.Budget).Sum();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "8d452c3ee9703bf7e8cad19bb983655300cd67dbf291d5f671d4d2fec65a437d", "dataset_name": "Spider", "sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "question": "Find the department name of the instructor whose name contains 'Soisalon'.", "linq": "context.Instructors.Where(row => EF.Functions.Like(row.Name, \"%Soisalon%\")).Select(row => new { row.DeptName }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "3548c6ed2df3aafa02bfb2b8d1927601014bfded507d5d7a6be36eeebded3cb4", "dataset_name": "Spider", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50", "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?", "linq": "context.Classrooms.Where(row => row.Building == \"Lamberton\" && row.Capacity < 50).Count();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "d68a4c0d63efbd8cf0d709543441d2337628cb411476b6589aed669ac810063d", "dataset_name": "Spider", "sql": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "question": "Find the name and budget of departments whose budgets are more than the average budget.", "linq": "context.Departments.Where(row => row.Budget > context.Departments.Select(row => (double) row.Budget).Average()).Select(row => new { row.DeptName, row.Budget }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "e332da7abaf5b533d6435d8116f7dd89c5813984e5bbd03c1df200c9aa3c69bc", "dataset_name": "Spider", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?", "linq": "context.Instructors.Where(row => row.DeptName == \"Statistics\").OrderBy(row => row.Salary).Select(row => new { row.Name }).Take(1).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "80355828a01c1a41bbc246217e77d13946e53a4419686efc690cc9f55c80eccd", "dataset_name": "Spider", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'", "question": "Find the title of course that is provided by both Statistics and Psychology departments.", "linq": "context.Courses.Where(row => row.DeptName == \"Statistics\").Select(row => row.Title).Intersect(context.Courses.Where(row => row.DeptName == \"Psychology\").Select(row => row.Title)).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "f26aa875ae5a608569517784403a96fc2b692328b7d6c067a7b94a316473c8d1", "dataset_name": "Spider", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'", "question": "Find the title of course that is provided by Statistics but not Psychology departments.", "linq": "context.Courses.Where(row => row.DeptName == \"Statistics\").Select(row => row.Title).Except(context.Courses.Where(row => row.DeptName == \"Psychology\").Select(row => row.Title)).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "9fefdf8831293ae829fd29f012f31da6ba02619e871a2472416d3db42572e2c1", "dataset_name": "Spider", "sql": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "question": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.", "linq": "context.Instructors.Where(row => row.Id == \"Fall\" && row.Id == 2009).Select(row => row.Id).Except(context.Instructors.Where(row => row.Id == \"Spring\" && row.Id == 2010).Select(row => row.Id)).ToList();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,165): error CS0019: Operator '==' cannot be applied to operands of type 'string' and 'int' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.18", "should_retest": true}, {"id": "dfbdb15448fc21cabb06ffb1c0f8542d08ff5188791b81219270c47c7c71880f", "dataset_name": "Spider", "sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "question": "Find the name of students who took any class in the years of 2009 and 2010.", "linq": "context.Students.Join(context.Takes, T1 => T1.Id, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2009 || row.T2.Year == 2010).Select(row => new { row.T1.Name }).Distinct().ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "fe289e217a9daddfd9daa221db0fd897123d3409de68b19208f6f58842624afb", "dataset_name": "Spider", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "question": "Find the names of the top 3 departments that provide the largest amount of courses?", "linq": "context.Courses.GroupBy(row => new { row.DeptName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DeptName }).Take(3).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "55ae228ef1d1131d21b477e648219367546e7ebb3d62b18196fe2806f85e12c3", "dataset_name": "Spider", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "question": "Find the name of the department that offers the highest total credits?", "linq": "context.Courses.GroupBy(row => new { row.DeptName }).OrderByDescending(group => group.Sum(row => row.Credits)).Select(group => new { group.Key.DeptName }).Take(1).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "e8b83d192970c768cda47425f3ceebbd2fbfa6d76d625a8a93f12fdd56e68f72", "dataset_name": "Spider", "sql": "SELECT title FROM course ORDER BY title ,  credits", "question": "List the names of all courses ordered by their titles and credits.", "linq": "context.Courses.OrderBy(row => row.Title).ThenBy(row => row.Credits).Select(row => new { row.Title }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "2ade9810c0947820a730e730832c8c9d4d0183d98939318a73e4697ddb0aff86", "dataset_name": "Spider", "sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "question": "Which department has the lowest budget?", "linq": "context.Departments.OrderBy(row => row.Budget).Select(row => new { row.DeptName }).Take(1).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "5f2374ee26144b98844f9d57c6ee8c1a25736ca7c2c63154427fa6bce7e6ac3c", "dataset_name": "Spider", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC", "question": "List the names and buildings of all departments sorted by the budget from large to small.", "linq": "context.Departments.OrderByDescending(row => row.Budget).Select(row => new { row.DeptName, row.Building }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "fbda69fcac1fcc660fe8a3f69fbd4f084a1b2915bea1da38e9b1ed6f51adbf49", "dataset_name": "Spider", "sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "question": "Who is the instructor with the highest salary?", "linq": "context.Instructors.OrderByDescending(row => row.Salary).Select(row => new { row.Name }).Take(1).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "8c0c179ade847fc786ec03d185e460544f74b9f541d8cf60ec108738cfd928f4", "dataset_name": "Spider", "sql": "SELECT * FROM instructor ORDER BY salary", "question": "List the information of all instructors ordered by their salary in ascending order.", "linq": "context.Instructors.OrderBy(row => row.Salary).Select(row => new { row.Id, row.Name, row.DeptName, row.Salary }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "9d2f09bf48ca88bf93a2b0a57ab5e421d423b34f355eb314657ea79de7e0332b", "dataset_name": "Spider", "sql": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "question": "Find the name of the students and their department names sorted by their total credits in ascending order.", "linq": "context.Students.OrderBy(row => row.TotCred).Select(row => new { row.Name, row.DeptName }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "114fa4c3a03d2fd0d50068e6c9616c58c18ecd7549e80946be0a3951ec3bd943", "dataset_name": "Spider", "sql": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "question": "list in alphabetic order all course names and their instructors' names in year 2008.", "linq": "context.Courses.SelectMany(row => row.Sections, (T1, T3) => new { T1, T3 }).Where(row => row.T2.Id == 2008).OrderBy(row => row.T1.Title).Select(row => new { row.T1.Title, row.T3.Name }).ToList();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,105): error CS1061: '<anonymous type: Course T1, Section T3>' does not contain a definition for 'T2' and no accessible extension method 'T2' accepting a first argument of type '<anonymous type: Course T1, Section T3>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.21", "should_retest": true}, {"id": "0e1b9b234a327a8d3e866e52aad89b5cb624deb8537b938f8d48c2758cca94b5", "dataset_name": "Spider", "sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "question": "Find the name of instructors who are advising more than one student.", "linq": "context.Instructors.Join(context.Advisors, T1 => T1.Id, T2 => T2.IId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.IId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Name }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "716be252a201444cdc858a363a24197275f8c336b0bea1650d07bf322a16e879", "dataset_name": "Spider", "sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "question": "Find the name of the students who have more than one advisor?", "linq": "context.Students.Join(context.Advisors, T1 => T1.Id, T2 => T2.SId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.SId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Name }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "616ca46c16131d45e38946aeebed2aa8cf4963a3b58184639a48558461002ac3", "dataset_name": "Spider", "sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "question": "Find the number of rooms with more than 50 capacity for each building.", "linq": "context.Classrooms.Where(row => row.Capacity > 50).GroupBy(row => new { row.Building }).Select(group => new { Count = group.Count(), group.Key.Building }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "be0804d4ebf136d8337359fc54cde4074b33687cdd51236d33f0e8d07c049171", "dataset_name": "Spider", "sql": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building", "question": "Find the maximum and average capacity among rooms in each building.", "linq": "context.Classrooms.GroupBy(row => new { row.Building }).Select(group => new { MaxCapacity = group.Select(row => row.Capacity).Max(), AverageCapacity = group.Select(row => row.Capacity).Average(), group.Key.Building }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "926a08b8186814bf052ed7d4b6e5d274317b4a58d5630f3066f7301e925c8fd7", "dataset_name": "Spider", "sql": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1", "question": "Find the title of the course that is offered by more than one department.", "linq": "context.Courses.GroupBy(row => new { row.Title }).Where(group => group.Count() > 1).Select(group => new { group.Key.Title }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "a35bcc710f07bc53c810c3db61be6089c9a0bed4a8b5d2a3f8ea023340f1c8be", "dataset_name": "Spider", "sql": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name", "question": "Find the total credits of courses provided by different department.", "linq": "context.Courses.GroupBy(row => new { row.DeptName }).Select(group => new { SumCredits = group.Select(row => row.Credits).Sum(), group.Key.DeptName }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "6bbc923fad31516e613a3db4de5bc28017421de9176ea4346250e755402f9df5", "dataset_name": "Spider", "sql": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors.", "linq": "context.Instructors.GroupBy(row => new { row.DeptName }).Where(group => group.Average(row => row.Salary) > context.Instructors.Select(row => (double) row.Salary).Average()).Select(group => new { MinSalary = group.Select(row => row.Salary).Min(), group.Key.DeptName }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "f7120cf105af0a6a0b75b3b09532129deaa0852091a659c175c5ca7de8497e71", "dataset_name": "Spider", "sql": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR", "question": "Find the number of courses provided in each semester and year.", "linq": "context.Sections.GroupBy(row => new { row.Semester, row.Year }).Select(group => new { Count = group.Count(), group.Key.Semester, group.Key.Year }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "318919c7c6827f8c92a3ffa59f9db01f873645a3a2ea673d3e3384ce20b3dbc1", "dataset_name": "Spider", "sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "question": "Find the year which offers the largest number of courses.", "linq": "context.Sections.GroupBy(row => new { row.Year }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Year }).Take(1).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "4787fa10968238155ae9d7e4c2e648817ebda24f319988f3d885dc0da56a6e63", "dataset_name": "Spider", "sql": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "question": "Find the year and semester when offers the largest number of courses.", "linq": "context.Sections.GroupBy(row => new { row.Semester, row.Year }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Semester, group.Key.Year }).Take(1).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "e833e361cc059283dd85d608fef53b0bfea30a20f90e162c180f185c9d7eb89c", "dataset_name": "Spider", "sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "question": "Find the name of department has the highest amount of students?", "linq": "context.Students.GroupBy(row => new { row.DeptName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DeptName }).Take(1).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "07b817720a8533256a7906e633069fea4bfc404abf8613ec62155651f5195e2a", "dataset_name": "Spider", "sql": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name", "question": "Find the total number of students in each department.", "linq": "context.Students.GroupBy(row => new { row.DeptName }).Select(group => new { Count = group.Count(), group.Key.DeptName }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "f6dd9c4d859c1639d6047f1ab65351a6a86ec1799af9e81bc046fdeeef82bef0", "dataset_name": "Spider", "sql": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "question": "Find the semester and year which has the least number of student taking any class.", "linq": "context.Takes.GroupBy(row => new { row.Semester, row.Year }).OrderBy(group => group.Count()).Select(group => new { group.Key.Semester, group.Key.Year }).Take(1).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "02c9079bed5b19d52de9c19a629125809e4d1a44a2fb28370360b517b628b300", "dataset_name": "Spider", "sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "question": "What is the id of the instructor who advises of all students from History department?", "linq": "context.Advisors.Join(context.Students, T1 => T1.SId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DeptName == \"History\").Select(row => new { row.T1.IId }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "d01e1cfa352622fb3b149a42751cb3375cfa2d37976149b6042d5fd8a1674403", "dataset_name": "Spider", "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'", "question": "Find the name and salary of the instructors who are advisors of any student from History department?", "linq": "context.Advisors.Join(context.Instructors, T1 => T1.IId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.SId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\").Select(row => new { row.T2.Name, row.T2.Salary }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "f5f9550c90e15ef315d69876a151f3f64a2d1e7393de2922119ba0ca371c9500", "dataset_name": "Spider", "sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq", "question": "Find the id of the courses that do not have any prerequisite?", "linq": "context.Courses.Select(row => row.CourseId).Except(context.Courses.Select(row => row.Id)).ToList();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,97): error CS1061: 'Course' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Course' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.15", "should_retest": true}, {"id": "91d480e4e0ee455e9b857f7f23a95d7f1f8ed229103d43524d38685cdc188b55", "dataset_name": "Spider", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "question": "What is the title of the prerequisite class of International Finance course?", "linq": "context.Courses.Where(row => context.Courses.SelectMany(row => row.Courses, (T2, T1) => new { T2, T1 }).Where(row => row.T2.Title == \"International Finance\").Select(row => row.T1.Id).Contains(row.CourseId)).Select(row => new { row.Title }).ToList();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,191): error CS1061: 'Course' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Course' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.26", "should_retest": true}, {"id": "5ffc37136f18862b7c321144f408cbf75d262e73a1cf6f2b630e6e56e45d1ecb", "dataset_name": "Spider", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "question": "Find the title of course whose prerequisite is course Differential Geometry.", "linq": "context.Courses.Where(row => context.Courses.SelectMany(row => row.Courses, (T2, T1) => new { T2, T1 }).Where(row => row.T2.Title == \"Differential Geometry\").Select(row => row.T1.Id).Contains(row.CourseId)).Select(row => new { row.Title }).ToList();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,191): error CS1061: 'Course' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Course' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.28", "should_retest": true}, {"id": "541ac7fd07a57f48b809216542e3b2216286cf3c16f618e2287e4afaed12c408", "dataset_name": "Spider", "sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "question": "Find the names of students who have taken any course in the fall semester of year 2003.", "linq": "context.Students.Where(row => context.Takes.Where(row => row.Semester == \"Fall\" && row.Year == 2003).Select(row => row.Id).Contains(row.Id)).Select(row => new { row.Name }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "ad60f1e2782397d96c750c04fcf778f9c5a278b08af73b98f85140d8b5d82149", "dataset_name": "Spider", "sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "question": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?", "linq": "context.Courses.Join(context.Sections, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Building == \"Chandler\" && row.T2.Semester == \"Fall\" && row.T2.Year == 2010).Select(row => new { row.T1.Title }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "1272e24dae326992ccc511d8d2a40b50424981ecfa04d6727dff0219acd845b9", "dataset_name": "Spider", "sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'", "question": "Find the name of the instructors who taught C Programming course before.", "linq": "context.Instructors.SelectMany(row => row.Sections, (T1, T3) => new { T1, T3 }).Where(row => row.T3.Title == \"C Programming\").Select(row => new { row.T1.Name }).ToList();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,112): error CS1061: 'Section' does not contain a definition for 'Title' and no accessible extension method 'Title' accepting a first argument of type 'Section' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.19", "should_retest": true}, {"id": "8a8462e9659d31abcd0a11a72b6830a85957d7d3fb808cfcea4deb0c63d69ef9", "dataset_name": "Spider", "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "question": "Find the name and salary of instructors who are advisors of the students from the Math department.", "linq": "context.Advisors.Join(context.Instructors, T1 => T1.IId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.SId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"Math\").Select(row => new { row.T2.Name, row.T2.Salary }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "dc9fefc316ca886ebfd321cc123af48b1ab743e98b269e49e6a2681863c06472", "dataset_name": "Spider", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "question": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.", "linq": "context.Advisors.Join(context.Instructors, T1 => T1.IId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.SId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"Math\").OrderBy(row => row.T3.TotCred).Select(row => new { row.T2.Name }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "eeec668d30a44745b0f850295c08034e51522397c3c40a40607c954804a1d010", "dataset_name": "Spider", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "question": "What is the course title of the prerequisite of course Mobile Computing?", "linq": "context.Courses.Where(row => context.Courses.SelectMany(row => row.Courses, (T2, T1) => new { T2, T1 }).Where(row => row.T2.Title == \"Mobile Computing\").Select(row => row.T1.Id).Contains(row.CourseId)).Select(row => new { row.Title }).ToList();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,186): error CS1061: 'Course' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Course' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.22", "should_retest": true}, {"id": "2ba5224f3646e90429b5a21c4d603e5645a9853611d2d49bc14368bc584f7361", "dataset_name": "Spider", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.", "linq": "context.Advisors.Join(context.Instructors, T1 => T1.IId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.SId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T3.TotCred).Select(row => new { row.T2.Name }).Take(1).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "f06c4445413980dab9b5a07f2be3810d42b2277b7e11733bcfedba5568aaa79b", "dataset_name": "Spider", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "question": "Find the name of instructors who didn't teach any courses?", "linq": "context.Instructors.Where(row => !context.Instructors.Select(row => row.Id).Contains(row.Id)).Select(row => new { row.Name }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "fd9c110243e7377c729a210f30723d748af55c4a0f65270a609b5fa3cba2bc0a", "dataset_name": "Spider", "sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches", "question": "Find the id of instructors who didn't teach any courses?", "linq": "context.Instructors.Select(row => row.Id).Except(context.Instructors.Select(row => row.Id)).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "b679a058f8024ab6c4b5652668d18c754f5fa79356bbe941e7b5f6efb756828a", "dataset_name": "Spider", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "question": "Find the names of instructors who didn't each any courses in any Spring semester.", "linq": "context.Instructors.Where(row => !context.Instructors.Where(row => row.Id == \"Spring\").Select(row => row.Id).Contains(row.Id)).Select(row => new { row.Name }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "7b080c6816f169f956ce10a67f014a18b6bf4cc54de90d5f63323811af757ac3", "dataset_name": "Spider", "sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "question": "Find the name of the department which has the highest average salary of professors.", "linq": "context.Instructors.GroupBy(row => new { row.DeptName }).OrderByDescending(group => group.Average(row => row.Salary)).Select(group => new { group.Key.DeptName }).Take(1).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "793cd688be5e94991ccfe78145954c609140b521ea14df6511fa3d4fb7344dd8", "dataset_name": "Spider", "sql": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "question": "Find the number and averaged salary of all instructors who are in the department with the highest budget.", "linq": "context.Instructors.Join(context.Departments, T1 => T1.DeptName, T2 => T2.DeptName, (T1, T2) => new { T1, T2 }).GroupBy(row => 1).OrderByDescending(row => row.T2.Budget).Select(group => new { AverageSalary = group.Select(row => row.T1.Salary).Average(), Count = group.Count() }).Take(1).ToList();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,171): error CS1061: 'IGrouping<int, <anonymous type: Instructor T1, Department T2>>' does not contain a definition for 'T2' and no accessible extension method 'T2' accepting a first argument of type 'IGrouping<int, <anonymous type: Instructor T1, Department T2>>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.21", "should_retest": true}, {"id": "22afc420196ffa198e18d64d9d3d3044e6d7313305fb4351a8a4483b79eda30b", "dataset_name": "Spider", "sql": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)", "question": "What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?", "linq": "context.Classrooms.Join(context.Sections, T1 => new { Pair1 = T1.Building, Pair2 = T1.RoomNumber }, T2 => new { Pair1 = T2.Building, Pair2 = T2.RoomNumber }, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T2.CourseId, T3 => T3.CourseId, (joined, T3) => new { joined.T2, T3 }).Where(row => row.T1.Capacity == context.Classrooms.Select(row => row.Capacity).Max()).Select(row => new { row.T3.Title, row.T3.Credits }).ToList();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,325): error CS1061: '<anonymous type: Section T2, Course T3>' does not contain a definition for 'T1' and no accessible extension method 'T1' accepting a first argument of type '<anonymous type: Section T2, Course T3>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    3 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.26", "should_retest": true}, {"id": "9059130c407318e148f23c2c99a0a0f23f9937d7c2b1b6883d3502f544f56698", "dataset_name": "Spider", "sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "question": "Find the name of students who didn't take any course from Biology department.", "linq": "context.Students.Where(row => !context.Takes.Join(context.Courses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DeptName == \"Biology\").Select(row => row.T1.Id).Contains(row.Id)).Select(row => new { row.Name }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "705a78a61feb6af5c13f5b0a8dd02c4195948779bb40d93f18dc2a6e37943903", "dataset_name": "Spider", "sql": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name", "question": "Find the total number of students and total number of instructors for each department.", "linq": "context.Departments.Join(context.Students, T1 => T1.DeptName, T2 => T2.DeptName, (T1, T2) => new { T1, T2 }).Join(context.Instructors, joined => joined.T1.DeptName, T3 => T3.DeptName, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.DeptName }).Select(group => new { CountDistinctIdT2 = group.Select(row => row.T2.Id).Distinct().Count(), CountDistinctIdT3 = group.Select(row => row.T3.Id).Distinct().Count(), group.Key.DeptName }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "f1da23efaf25a031c2747648d75fed990c36d79dfa6e6b7ab6b64736198f9132", "dataset_name": "Spider", "sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance.", "linq": "context.Students.Join(context.Takes, T1 => T1.Id, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => context.Courses.SelectMany(row => row.Courses, (T3, T4) => new { T3, T4 }).Where(row => row.T3.Title == \"International Finance\").Select(row => row.T4.Id).Contains(row.T2.CourseId)).Select(row => new { row.T1.Name }).ToList();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,266): error CS1061: 'Course' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Course' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.25", "should_retest": true}, {"id": "9148de719a20cf472daa588e132acffe14a142f92507e1264adff0c085c7d1ca", "dataset_name": "Spider", "sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.", "linq": "context.Instructors.Where(row => row.Salary < context.Instructors.Where(row => row.DeptName == \"Physics\").Select(row => (double) row.Salary).Average()).Select(row => new { row.Name, row.Salary }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "ad5f4946b6e54c2907063f75bbc253c4e5fd2705abf6b927d87f0f02086d3571", "dataset_name": "Spider", "sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "question": "Find the name of students who took some course offered by Statistics department.", "linq": "context.Courses.Join(context.Takes, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.Id, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.DeptName == \"Statistics\").Select(row => new { row.T3.Name }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "717e0b6e2bd9e7b4237c370576c3120df95161eafca776093f8e7bc2569ee771", "dataset_name": "Spider", "sql": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.", "linq": "context.Courses.Join(context.Sections, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DeptName == \"Psychology\").OrderBy(row => row.T1.Title).Select(row => new { row.T2.Building, row.T2.RoomNumber, row.T2.Semester, row.T2.Year }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "6eecafca81f361e8ba977d300e0ab10d6913fc3b5182169cf0d8a5910b23b577", "dataset_name": "Spider", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "question": "Find the names of all instructors in computer science department", "linq": "context.Instructors.Where(row => row.DeptName == \"Comp. Sci.\").Select(row => new { row.Name }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "0d9197fb6b405e510a4d1e7954b814e0886561381096b16bfcd27fb659848e06", "dataset_name": "Spider", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.", "linq": "context.Instructors.Where(row => row.DeptName == \"Comp. Sci.\" && row.Salary > 80000).Select(row => new { row.Name }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "e968c8033ca0de023c33e1f33703c3b93220230acaba212e0ea630feaf2996e4", "dataset_name": "Spider", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "question": "Find the names of all instructors who have taught some course and the course_id.", "linq": "context.Instructors.SelectMany(row => row.Sections, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name, row.T2.Id }).ToList();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,132): error CS1061: 'Section' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Section' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.27", "should_retest": true}, {"id": "3784e50f6d514864fdf772be75c2d761388731c2035e4fe8abd6b0bb93324cc5", "dataset_name": "Spider", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "question": "Find the names of all instructors in the Art department who have taught some course and the course_id.", "linq": "context.Instructors.SelectMany(row => row.Sections, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DeptName == \"Art\").Select(row => new { row.T1.Name, row.T2.Id }).ToList();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,171): error CS1061: 'Section' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Section' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.26", "should_retest": true}, {"id": "acce1e79bccb1935a2999734132e5b8ac672276683703f95ec7cee6a1d13f475", "dataset_name": "Spider", "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "question": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.", "linq": "context.Instructors.Where(row => EF.Functions.Like(row.Name, \"%dar%\")).Select(row => new { row.Name }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "e6c7867b2cb0e5158bbbbbcb2515373b32bc9446439de70cdbf43c7d555d2783", "dataset_name": "Spider", "sql": "SELECT DISTINCT name FROM  instructor ORDER BY name", "question": "List in alphabetic order the names of all distinct instructors.", "linq": "context.Instructors.OrderBy(row => row.Name).Select(row => new { row.Name }).Distinct().ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "79cbd8f4b973adad894003eed79bd0821fd6aa97ad37316c711223644a085917", "dataset_name": "Spider", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "question": "Find courses that ran in Fall 2009 or in Spring 2010.", "linq": "context.Sections.Where(row => row.Semester == \"Fall\" && row.Year == 2009).Select(row => row.CourseId).Union(context.Sections.Where(row => row.Semester == \"Spring\" && row.Year == 2010).Select(row => row.CourseId)).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "49de373578d931a76d744622f2bd95ca165b5f3df0e55c6f750b39954318ea7d", "dataset_name": "Spider", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "question": "Find courses that ran in Fall 2009 and in Spring 2010.", "linq": "context.Sections.Where(row => row.Semester == \"Fall\" && row.Year == 2009).Select(row => row.CourseId).Intersect(context.Sections.Where(row => row.Semester == \"Spring\" && row.Year == 2010).Select(row => row.CourseId)).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "50becaf4152c6ee4f9c62ff2779365db6e0bd77962804f6c46bcd945680cacf5", "dataset_name": "Spider", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "question": "Find courses that ran in Fall 2009 but not in Spring 2010.", "linq": "context.Sections.Where(row => row.Semester == \"Fall\" && row.Year == 2009).Select(row => row.CourseId).Except(context.Sections.Where(row => row.Semester == \"Spring\" && row.Year == 2010).Select(row => row.CourseId)).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "aad2e29038fa8a496d51fe1c5e3f6509f8746072471128673cd3e92f158c268d", "dataset_name": "Spider", "sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "question": "Find the salaries of all distinct instructors that are less than the largest salary.", "linq": "context.Instructors.Where(row => row.Salary < context.Instructors.Select(row => row.Salary).Max()).Select(row => new { row.Salary }).Distinct().ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "528e58139dd663b5dab4ec5599d0e153e58326f8c972a001fb3644188b823b24", "dataset_name": "Spider", "sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "question": "Find the total number of instructors who teach a course in the Spring 2010 semester.", "linq": "context.Instructors.Where(row => row.Id == \"Spring\" && row.Id == 2010).Select(row => row.Id).Distinct().Count();", "db_name": "college_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,67): error CS0019: Operator '==' cannot be applied to operands of type 'string' and 'int' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.20", "should_retest": true}, {"id": "faab72a6c1ee632b7c2ed9071ca4577ec736f54313edb3425dfc6044e0a86eed", "dataset_name": "Spider", "sql": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "question": "Find the names and average salaries of all departments whose average salary is greater than 42000.", "linq": "context.Instructors.GroupBy(row => new { row.DeptName }).Select(group => new { group.Key.DeptName, AverageSalary = group.Select(row => row.Salary).Average() }).Where(group => group.AverageSalary > 42000).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "bc4e5908c3163f8e108c4671f71a9254735498f12e0cc2656b862957dfaf0c94", "dataset_name": "Spider", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.", "linq": "context.Instructors.Where(row => row.Salary > context.Instructors.Where(row => row.DeptName == \"Biology\").Select(row => row.Salary).Min()).Select(row => new { row.Name }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "623184639f76e972e72125f186d232c8426b561c402ad1b6a5cce49f3a11259c", "dataset_name": "Spider", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.", "linq": "context.Instructors.Where(row => row.Salary > context.Instructors.Where(row => row.DeptName == \"Biology\").Select(row => row.Salary).Max()).Select(row => new { row.Name }).ToList();", "db_name": "college_2", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Nullable object must have a value.", "should_retest": true}, {"id": "96c03a2543601ba8bc768200352f9c212e8a77eb9a5bc734d396405a5f45bfc5", "dataset_name": "Spider", "sql": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;", "question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.", "linq": "context.Employees.SelectMany(row => row.DraftCopies, (Employees, Circulation_History) => new { Employees, Circulation_History }).GroupBy(row => new { row.Employees.DocumentId, row.Employees.DraftNumber, row.Employees.Id }).Select(group => new { group.First().Employees.EmployeeName, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();", "db_name": "cre_Doc_Control_Systems", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,229): error CS1061: 'Employee' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Employee' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    3 Error(s)\n\nTime Elapsed 00:00:01.20", "should_retest": true}, {"id": "7dfe88ced8af5baba89078530395f0d962b9320d953adc6e6c3e09edb6b1d4e1", "dataset_name": "Spider", "sql": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;", "question": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.", "linq": "context.DraftCopies.GroupBy(row => new { row.DocumentId }).Select(group => new { group.Key.DocumentId, CountDistinctId = group.Select(row => row.Id).Distinct().Count() }).ToList();", "db_name": "cre_Doc_Control_Systems", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,157): error CS1061: 'DraftCopy' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'DraftCopy' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.28", "should_retest": true}, {"id": "f9846185f7d940d96b5649acbcbe570f35833cb249e70884d831888799520ff4", "dataset_name": "Spider", "sql": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3", "question": "What are the names of documents that have both one of the three most common types and one of three most common structures?", "linq": "", "db_name": "document_management", "status": "QueryBuildFailed", "error": "called `Result::unwrap()` on an `Err` value: ParserError(\"Expected end of statement, found: INTERSECT at Line: 1, Column 96\")", "should_retest": true}, {"id": "939a0c8d0e1b8f8c30d66999fba8147ff6708838b2e5c671af88b302d2a136d3", "dataset_name": "Spider", "sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id", "question": "Find names of the document without any images.", "linq": "context.Documents.Select(row => row.DocumentName).Except(context.Documents.Join(context.DocumentSections, t1 => t1.DocumentCode, t2 => t2.DocumentCode, (t1, t2) => new { t1, t2 }).Select(row => row.t1.DocumentName)).ToList();", "db_name": "document_management", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: How to cook pasta}, {0: Humanity: a fact}, {0: Learning Database}, {0: Learning Japanese}, {0: Life about Claude Monet}]\", linq_results: \"[{0: How to cook pasta}, {0: Humanity: a fact}, {0: Learning Database}, {0: Life about Claude Monet}]\" }", "should_retest": true}, {"id": "4f3b1ecaca2ad4023957d820980b5ae8c1f365e2562d633e43890425bad4a64d", "dataset_name": "Spider", "sql": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"", "question": "Find the names of all reviewers who have ratings with a NULL value for the date.", "linq": "context.Reviewers.Join(context.Ratings, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.RatingDate == \"null\").Select(row => new { row.T1.Name }).Distinct().ToList();", "db_name": "movie_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,121): error CS0019: Operator '==' cannot be applied to operands of type 'DateOnly?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.41", "should_retest": true}, {"id": "b1f6f505b85bb1b20bd4ef6cf27a7f16383206b0458667bf499c135e12d66020", "dataset_name": "Spider", "sql": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)", "question": "What is the average rating stars and title for the oldest movie?", "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == context.Movies.Select(row => row.Year).Min()).Select(row => new { AverageStars = row.Select(row => row.T1.Stars).Average(), row.T2.Title }).ToList();", "db_name": "movie_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,218): error CS1061: '<anonymous type: Rating T1, Movie T2>' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type '<anonymous type: Rating T1, Movie T2>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.63", "should_retest": true}, {"id": "bc8cab98a48fc1d7ef604faffa65bcbd64c19f982e4fa6a8b37698dfb9a09e9d", "dataset_name": "Spider", "sql": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "question": "What is the maximum stars and year for the most recent movie?", "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == context.Movies.Select(row => row.Year).Max()).Select(row => new { MaxStars = row.Select(row => row.T1.Stars).Max(), row.T2.Year }).ToList();", "db_name": "movie_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,214): error CS1061: '<anonymous type: Rating T1, Movie T2>' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type '<anonymous type: Rating T1, Movie T2>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.41", "should_retest": true}, {"id": "5808ae84584ae01daa9e755b1c2d32fda7abf5867c9f450999fc9b196762cbee", "dataset_name": "Spider", "sql": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars", "question": "Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.", "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Join(context.Reviewers, joined => joined.T1.RId, T3 => T3.RId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T3.Name).ThenBy(row => row.T2.Title).ThenBy(row => row.T1.Stars).Select(row => new { row.T3.Name, row.T2.Title, row.T1.Stars, row.T1.RatingDate }).ToList();", "db_name": "movie_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: Ashley White, 1: E.T., 2: 3, 3: 2011-01-02}, {0: Brittany Harris, 1: Raiders of the Lost Ark, 2: 2, 3: 2011-01-30}, {0: Brittany Harris, 1: Raiders of the Lost Ark, 2: 4, 3: 2011-01-12}, {0: Brittany Harris, 1: The Sound of Music, 2: 2, 3: 2011-01-20}, {0: Chris Jackson, 1: E.T., 2: 2, 3: 2011-01-22}, {0: Chris Jackson, 1: Raiders of the Lost Ark, 2: 4}, {0: Chris Jackson, 1: The Sound of Music, 2: 3, 3: 2011-01-27}, {0: Daniel Lewis, 1: Snow White, 2: 4}, {0: Elizabeth Thomas, 1: Avatar, 2: 3, 3: 2011-01-15}, {0: Elizabeth Thomas, 1: Snow White, 2: 5, 3: 2011-01-19}, {0: James Cameron, 1: Avatar, 2: 5, 3: 2011-01-20}, {0: Mike Anderson, 1: Gone with the Wind, 2: 3, 3: 2011-01-09}, {0: Sarah Martinez, 1: Gone with the Wind, 2: 2, 3: 2011-01-22}, {0: Sarah Martinez, 1: Gone with the Wind, 2: 4, 3: 2011-01-27}]\", linq_results: \"[{0: Ashley White, 1: E.T., 2: 3, 3: 02.01.2011}, {0: Brittany Harris, 1: Raiders of the Lost Ark, 2: 2, 3: 30.01.2011}, {0: Brittany Harris, 1: Raiders of the Lost Ark, 2: 4, 3: 12.01.2011}, {0: Brittany Harris, 1: The Sound of Music, 2: 2, 3: 20.01.2011}, {0: Chris Jackson, 1: E.T., 2: 2, 3: 22.01.2011}, {0: Chris Jackson, 1: Raiders of the Lost Ark, 2: 4}, {0: Chris Jackson, 1: The Sound of Music, 2: 3, 3: 27.01.2011}, {0: Daniel Lewis, 1: Snow White, 2: 4}, {0: Elizabeth Thomas, 1: Avatar, 2: 3, 3: 15.01.2011}, {0: Elizabeth Thomas, 1: Snow White, 2: 5, 3: 19.01.2011}, {0: James Cameron, 1: Avatar, 2: 5, 3: 20.01.2011}, {0: Mike Anderson, 1: Gone with the Wind, 2: 3, 3: 09.01.2011}, {0: Sarah Martinez, 1: Gone with the Wind, 2: 2, 3: 22.01.2011}, {0: Sarah Martinez, 1: Gone with the Wind, 2: 4, 3: 27.01.2011}]\" }", "should_retest": true}, {"id": "b80b2b14c7d5db5c58833667d78bebf04dc127e81846be4004f8bb3d106c8e95", "dataset_name": "Spider", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director", "question": "For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.", "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Director != \"null\").GroupBy(row => new { row.T2.Director }).Select(group => new { group.OrderByDescending(row => row.T1.Stars).First().T2.Title, T1Stars = group.OrderByDescending(row => row.T1.Stars).First().T1.Stars, group.Key.Director, MaxStarsT1 = group.Select(row => row.T1.Stars).Max() }).ToList();", "db_name": "movie_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: Avatar, 1: 5, 2: James Cameron, 3: 5}, {0: The Sound of Music, 1: 3, 2: Robert Wise, 3: 3}, {0: Raiders of the Lost Ark, 1: 4, 2: Steven Spielberg, 3: 4}, {0: Gone with the Wind, 1: 4, 2: Victor Fleming, 3: 4}]\", linq_results: \"[{0: Snow White, 1: 5, 3: 5}, {0: Avatar, 1: 5, 2: James Cameron, 3: 5}, {0: The Sound of Music, 1: 3, 2: Robert Wise, 3: 3}, {0: Raiders of the Lost Ark, 1: 4, 2: Steven Spielberg, 3: 4}, {0: Gone with the Wind, 1: 4, 2: Victor Fleming, 3: 4}]\" }", "should_retest": true}, {"id": "bc6155fbb0b5ff07893b3945f08fd864213644f739171ea665609647876aeffe", "dataset_name": "Spider", "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"", "question": "What are the ids of the movies that are not reviewed by Brittany Harris.", "linq": "context.Ratings.Where(row => row.MId.HasValue).Select(row => MId = row.MId.Value).Except(context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Brittany Harris\").Where(row => row.T1.MId.HasValue).Select(row => MId = row.T1.MId.Value)).ToList();", "db_name": "movie_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,292): error CS0103: The name 'MId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    4 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.56", "should_retest": true}, {"id": "7c820362d9d9edf33ad7b1aef4b6c52bac305b478e8157628fc8d0cefa59fcd1", "dataset_name": "Spider", "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4", "question": "find the ids of reviewers who did not give 4 star.", "linq": "context.Ratings.Where(row => row.RId.HasValue).Select(row => RId = row.RId.Value).Except(context.Ratings.Where(row => row.Stars == 4).Where(row => row.RId.HasValue).Select(row => RId = row.RId.Value)).ToList();", "db_name": "movie_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,191): error CS0103: The name 'RId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    4 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.66", "should_retest": true}, {"id": "0a9e28e3c4bb68d5bc1db2062e1d4eb71b38d170cc35f88be5571e0c8d74d6a6", "dataset_name": "Spider", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?", "linq": "context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Join(context.Degrees, joined => new { Pair1 = joined.T1.Id, Pair2 = joined.T2.Year }, T3 => new { Pair1 = joined.T3.Campus, Pair2 = joined.T3.Year }, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Year == 2002).OrderByDescending(row => row.T3.Degrees).Select(row => new { row.T2.Faculty1 }).Take(1).ToList();", "db_name": "csu_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,243): error CS0103: The name 'joined' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:02.48", "should_retest": true}, {"id": "5d4e7226b25259e145c05da8cd5bc0c0c35a215c381789acf761cfb258e1626f", "dataset_name": "Spider", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?", "linq": "context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Join(context.Degrees, joined => new { Pair1 = joined.T1.Id, Pair2 = joined.T2.Year }, T3 => new { Pair1 = joined.T3.Campus, Pair2 = joined.T3.Year }, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Year == 2001).OrderBy(row => row.T3.Degrees).Select(row => new { row.T2.Faculty1 }).Take(1).ToList();", "db_name": "csu_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,243): error CS0103: The name 'joined' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.51", "should_retest": true}, {"id": "30ce3097f50b8ad720b690e8b9426b5d301ffc648ef3046676ee41e8b99659b3", "dataset_name": "Spider", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "question": "Show the ids of the employees who don't authorize destruction for any document.", "linq": "context.Employees.Select(row => row.EmployeeId).Except(context.DocumentsToBeDestroyeds.Where(row => row.DestructionAuthorisedByEmployeeId.HasValue).Select(row => DestructionAuthorisedByEmployeeId = row.DestructionAuthorisedByEmployeeId.Value)).ToList();", "db_name": "cre_Doc_Tracking_DB", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,174): error CS0103: The name 'DestructionAuthorisedByEmployeeId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    3 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.44", "should_retest": true}, {"id": "5baaf7485f8fb4551a5261fa9d21c7cf43c5454c79221007ea15c6edc1fa3702", "dataset_name": "Spider", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "question": "Show the ids of all employees who don't destroy any document.", "linq": "context.Employees.Select(row => row.EmployeeId).Except(context.DocumentsToBeDestroyeds.Where(row => row.DestroyedByEmployeeId.HasValue).Select(row => DestroyedByEmployeeId = row.DestroyedByEmployeeId.Value)).ToList();", "db_name": "cre_Doc_Tracking_DB", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,162): error CS0103: The name 'DestroyedByEmployeeId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    3 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.70", "should_retest": true}, {"id": "568fa1f84a2fbf3af2a349118a9cb7ce883a87b86918058064f596030d13fae4", "dataset_name": "Spider", "sql": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "question": "Show the ids of all employees who have either destroyed a document or made an authorization to do this.", "linq": "context.DocumentsToBeDestroyeds.Where(row => row.DestroyedByEmployeeId.HasValue).Select(row => DestroyedByEmployeeId = row.DestroyedByEmployeeId.Value).Union(context.DocumentsToBeDestroyeds.Where(row => row.DestructionAuthorisedByEmployeeId.HasValue).Select(row => DestructionAuthorisedByEmployeeId = row.DestructionAuthorisedByEmployeeId.Value)).ToList();", "db_name": "cre_Doc_Tracking_DB", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,277): error CS0103: The name 'DestructionAuthorisedByEmployeeId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    4 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.87", "should_retest": true}, {"id": "3b87b45ba7f0d5eecf319eda0d48e1f0a1c19c148a553b8688ad38bdf254f38a", "dataset_name": "Spider", "sql": "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'", "question": "In which year are there festivals both inside the 'United States' and outside the 'United States'?", "linq": "context.FestivalDetails.Where(row => row.Location == \"United States\").Where(row => row.Year.HasValue).Select(row => Year = row.Year.Value).Intersect(context.FestivalDetails.Where(row => row.Location != \"United States\").Where(row => row.Year.HasValue).Select(row => Year = row.Year.Value)).ToList();", "db_name": "entertainment_awards", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,277): error CS0103: The name 'Year' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    4 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:02.02", "should_retest": true}, {"id": "74784d45c28022724b50b2e6deb27a31eaa87ec88211e4bea3dc1e284a6e51f6", "dataset_name": "Spider", "sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)", "question": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.", "linq": "context.ProductSuppliers.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.SupplierId == 2 && row.T2.ProductPrice > context.Products.Select(row => (double) row.ProductPrice).Average()).Select(row => new { row.T1.ProductId }).ToList();", "db_name": "department_store", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,167): error CS0019: Operator '>' cannot be applied to operands of type 'decimal?' and 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    3 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.87", "should_retest": true}, {"id": "416d514d8d61f05ffbf482e7ef4d147adcd3950a73d161c65f9e134491798147", "dataset_name": "Spider", "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)", "question": "Find the product type whose average price is higher than the average price of all products.", "linq": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Where(group => group.Average(row => row.ProductPrice) > context.Products.Select(row => (double) row.ProductPrice).Average()).Select(group => new { group.Key.ProductTypeCode }).ToList();", "db_name": "department_store", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,88): error CS0019: Operator '>' cannot be applied to operands of type 'decimal?' and 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    3 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.47", "should_retest": true}, {"id": "7215e2c801197627c2f2c0c7656ef0ee620b76042427b43528c98287ef909d1b", "dataset_name": "Spider", "sql": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1", "question": "Find the id and name of the staff who has been assigned for the shortest period.", "linq": "context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.DateAssignedTo - row.T2.DateAssignedFrom).Select(row => new { row.T1.StaffId, row.T1.StaffName }).Take(1).ToList();", "db_name": "department_store", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: The LINQ expression 'DbSet<Staff>()", "should_retest": true}, {"id": "6230a9bcd90345bea198d772fe505fedb9ba4852e18144fa83b5cefd9daf186e", "dataset_name": "Spider", "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"", "question": "Return the name and gender of the staff who was assigned in 2016.", "linq": "context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.DateAssignedFrom, \"2016%\")).Select(row => new { row.T1.StaffName, row.T1.StaffGender }).ToList();", "db_name": "department_store", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,162): error CS1503: Argument 2: cannot convert from 'System.DateTime' to 'string?' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.48", "should_retest": true}, {"id": "a73ae0863b33d1325b5cafc14c1fd4d053c34f8c0a2d8e2c73422b8ad208c131", "dataset_name": "Spider", "sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000", "question": "Return the ids of all products that were ordered more than three times or supplied more than 80000.", "linq": "context.OrderItems.GroupBy(row => new { row.ProductId }).Where(group => group.Count() > 3).Select(group => group.Key.ProductId).Union(context.ProductSuppliers.GroupBy(row => new { row.ProductId }).Where(group => group.Sum(row => row.TotalAmountPurchased) > 80000).Select(group => group.Key.ProductId)).ToList();", "db_name": "department_store", "status": "CodeFailed", "error": "Unhandled exception. System.NotSupportedException: SQLite cannot apply aggregate operator 'Sum' on expressions of type 'decimal'. Convert the values to a supported type, or use LINQ to Objects to aggregate the results on the client side.", "should_retest": true}, {"id": "69fd87921ff1b5fdad96b312f7bd8477e7cae606adfc6a74a81f089bae199cea", "dataset_name": "Spider", "sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000", "question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.", "linq": "context.ProductSuppliers.GroupBy(row => new { row.SupplierId }).Where(group => group.Average(row => row.TotalAmountPurchased) > 50000 || group.Average(row => row.TotalAmountPurchased) < 30000).Select(group => new { group.Key.SupplierId }).ToList();", "db_name": "department_store", "status": "CodeFailed", "error": "Unhandled exception. System.NotSupportedException: SQLite cannot apply aggregate operator 'Average' on expressions of type 'decimal'. Convert the values to a supported type, or use LINQ to Objects to aggregate the results on the client side.", "should_retest": true}, {"id": "ea8c536479119fbd97b1b8042fc61be0db0467c93f916ebbf5fcf689cbd0b23c", "dataset_name": "Spider", "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code", "question": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?", "linq": "context.Products.GroupBy(row => new { row.ProductTypeCode }).OrderBy(group => group.ProductTypeCode).Select(group => new { MaxProductPrice = group.Select(row => (double) row.ProductPrice).Max(), MinProductPrice = group.Select(row => (double) row.ProductPrice).Min(), group.Key.ProductTypeCode }).ToList();", "db_name": "department_store", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,96): error CS1061: 'IGrouping<<anonymous type: string ProductTypeCode>, Product>' does not contain a definition for 'ProductTypeCode' and no accessible extension method 'ProductTypeCode' accepting a first argument of type 'IGrouping<<anonymous type: string ProductTypeCode>, Product>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.42", "should_retest": true}, {"id": "3c6b6b7e2456efa6f26abb40f34eddd243d2ec644d8350a4cfc0a254131a2825", "dataset_name": "Spider", "sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2", "question": "Find the names of products that were bought by at least two distinct customers.", "linq": "context.CustomerOrders.Join(context.OrderItems, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Join(context.Products, joined => joined.T2.ProductId, T3 => T3.ProductId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.ProductId }).Where(group => group.Count(row => row.T1.CustomerId) >= 2).Select(group => new { group.First().T3.ProductName }).Distinct().ToList();", "db_name": "department_store", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,323): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.38", "should_retest": true}, {"id": "64cde7ddc454d856262198e83aa54eadd1906825fb020dc9b9528b6bd47119ad", "dataset_name": "Spider", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3", "question": "Find the names of customers who have bought by at least three distinct products.", "linq": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.OrderItems, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count(row => row.T3.ProductId) >= 3).Select(group => new { group.First().T1.CustomerName }).Distinct().ToList();", "db_name": "department_store", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,327): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.36", "should_retest": true}, {"id": "6c9c5265d86acec00be925de692383dea8997422e680e4bc1914c98e45da2234", "dataset_name": "Spider", "sql": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id", "question": "Show the product name and total order quantity for each product.", "linq": "context.Products.Join(context.OrderItems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductId }).Select(group => new { group.First().T1.ProductName, SumOrderQuantity = group.Select(row => row.T2.OrderQuantity).Sum() }).ToList();", "db_name": "customers_and_products_contacts", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,234): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38", "should_retest": true}, {"id": "5d7f5731f2d0deb61d8d93f3648ee0740d1c7b0463c1d2feaa4d092917895d5e", "dataset_name": "Spider", "sql": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1", "question": "What are the name and phone of the customer with the most ordered product quantity?", "linq": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.OrderItems, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Sum(row => row.T3.OrderQuantity)).Select(group => new { group.First().T1.CustomerName, group.First().T1.CustomerPhone }).Take(1).ToList();", "db_name": "customers_and_products_contacts", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,337): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.46", "should_retest": true}, {"id": "3f59a15d647418eda2395ef0400e281fe57f3c714fd1491274dcaad0cad3c8fb", "dataset_name": "Spider", "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"", "question": "How many male (sex is M) students have class senator votes in the fall election cycle?", "linq": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Sex == \"M\" && row.T2.ElectionCycle == \"Fall\").Count();", "db_name": "voter_2", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 5}]\", linq_results: \"[{0: 120}]\" }", "should_retest": true}, {"id": "2f3a5fbcd0a708c5726fc2221a1af1527df281fb509b79342bdc6cc104b162db", "dataset_name": "Spider", "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"", "question": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.", "linq": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CityCode == \"NYC\" && row.T2.ElectionCycle == \"Spring\").Count();", "db_name": "voter_2", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 0}]\", linq_results: \"[{0: 15}]\" }", "should_retest": true}, {"id": "7e23c5e5bf36e0247e3a1c4eabfb509256f507301f39b4ef2d9023f8a9b609e5", "dataset_name": "Spider", "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"", "question": "Find the average age of students who live in the city with code \"NYC\" and have secretary votes in the spring election cycle.", "linq": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CityCode == \"NYC\" && row.T2.ElectionCycle == \"Spring\").Select(row => row.T1.Age).Average();", "db_name": "voter_2", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 22}]\", linq_results: \"[{0: 20,333333333333332}]\" }", "should_retest": true}, {"id": "a17ed8ea4cc94e216d3f48213c809b21d27ab48a6db2bfe55e4e3266520a2957", "dataset_name": "Spider", "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"", "question": "Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.", "linq": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Sex == \"F\" && row.T2.ElectionCycle == \"Spring\").Select(row => row.T1.Age).Average();", "db_name": "voter_2", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 21}]\", linq_results: \"[{0: 19,7}]\" }", "should_retest": true}, {"id": "8ceac277a677f9e05544601f9b89b5d7810a9788be41d2e4c29706df3ecf931e", "dataset_name": "Spider", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"", "question": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192.", "linq": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Lname).Distinct().Except(context.Students.Where(row => row.Advisor == \"2192\").Select(row => row.Lname).Distinct()).ToList();", "db_name": "voter_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,172): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.56", "should_retest": true}, {"id": "78a948e29c51412147493e7cbce58623fde54da6188231bb8408bed07e2d7baf", "dataset_name": "Spider", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"", "question": "Find the distinct last names of all the students who have president votes and whose advisor is 8741.", "linq": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Lname).Distinct().Intersect(context.Students.Where(row => row.Advisor == \"8741\").Select(row => row.Lname).Distinct()).ToList();", "db_name": "voter_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,175): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.59", "should_retest": true}, {"id": "243d4970c13cd97ddd7501197c32c2bc1b3916a4da13b14e40d99f20939ecfda", "dataset_name": "Spider", "sql": "SELECT avg(Speed) FROM roller_coaster", "question": "What is the average speed of roller coasters?", "linq": "context.RollerCoasters.Select(row => row.Speed).ToList().Select(value => double.Parse(value)).Average();", "db_name": "roller_coaster", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 56,31666666666666}]\", linq_results: \"[{0: 113,16666666666667}]\" }", "should_retest": true}, {"id": "b70147a690171834741cd22b4bfb21c8fbac0dfbb254b4060e6ff620dc477054", "dataset_name": "Spider", "sql": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name", "question": "Show the names of countries and the average speed of roller coasters from each country.", "linq": "context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Select(group => new { group.Key.Name, AverageSpeed = group.Select(row => row.T2.Speed).Average() }).ToList();", "db_name": "roller_coaster", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,216): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.76", "should_retest": true}, {"id": "8b685d625b2379f29c3b288dcdbc9fd442d35a6cdfb85536049037a8d500f9ee", "dataset_name": "Spider", "sql": "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55", "question": "What are the country names, area and population which has both roller coasters with speed higher", "linq": "context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Speed > \"60\").Where(row => row.T1.Area.HasValue && row.T1.Population.HasValue).Select(row => new { row.T1.Name, Area = row.T1.Area.Value, Population = row.T1.Population.Value }).Intersect(context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Speed < \"55\").Where(row => row.T1.Area.HasValue && row.T1.Population.HasValue).Select(row => new { row.T1.Name, Area = row.T1.Area.Value, Population = row.T1.Population.Value })).ToList();", "db_name": "roller_coaster", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,463): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.86", "should_retest": true}, {"id": "82ea4d9e1f602b61f2c2490058aada63919adeab0dbcbbbd9a8ea81e1145dece", "dataset_name": "Spider", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"", "question": "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.", "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\" && row.t3.Major == \"600\").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList();", "db_name": "club_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,286): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.69", "should_retest": true}, {"id": "a0f5d4fbd652ccddb0e20c8059665400e38e4b9cf0ce8fc2cb612f603de8db9a", "dataset_name": "Spider", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "question": "Which club has the most members majoring in \"600\"?", "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Major == \"600\").GroupBy(row => new { row.t1.ClubName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ClubName }).Take(1).ToList();", "db_name": "club_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,245): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.57", "should_retest": true}, {"id": "f4cfd3acff2f65c715f71eb26f0f5944bc62b28316dd95dd544f858697964738", "dataset_name": "Spider", "sql": "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id", "question": "Show the station name and number of trains in each station.", "linq": "context.Trains.SelectMany(row => row.Stations, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Select(group => new { group.First().T2.Name, Count = group.Count() }).ToList();", "db_name": "train_station", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,115): error CS1061: 'Train' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Train' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.45", "should_retest": true}, {"id": "3f720f1a0be94b1a6c25911e904451d65a6adf2205ea6213ec272f19c3dc4f2c", "dataset_name": "Spider", "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1", "question": "Show the station name with greatest number of trains.", "linq": "context.Trains.SelectMany(row => row.Stations, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name }).Take(1).ToList();", "db_name": "train_station", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,115): error CS1061: 'Train' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Train' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.80", "should_retest": true}, {"id": "0cde2e684f4a0a60ab3b9cc9e7152b1404c9409135b94f88a43ae84bf36a3a7d", "dataset_name": "Spider", "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2", "question": "Show the station name with at least two trains.", "linq": "context.Trains.SelectMany(row => row.Stations, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.First().T2.Name }).ToList();", "db_name": "train_station", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,115): error CS1061: 'Train' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Train' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.65", "should_retest": true}, {"id": "8c578eab9c727d0f3cc3f7ea21a10f69ee2dc38b7563b41ab664e78923390750", "dataset_name": "Spider", "sql": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)", "question": "Show station names without any trains.", "linq": "context.Stations.Where(row => !context.Trains.Select(row => row.Id).Contains(row.StationId)).Select(row => new { row.Name }).ToList();", "db_name": "train_station", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,76): error CS1061: 'Train' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Train' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.74", "should_retest": true}, {"id": "c75873b0d87f1a4dbf10c91dcf8c366eca37168dd6af650ff87664c88b6ed185", "dataset_name": "Spider", "sql": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")", "question": "Find the names of the trains that do not pass any station located in London.", "linq": "context.Trains.SelectMany(row => row.Stations, (T2, T1) => new { T2, T1 }).Where(row => !context.Trains.SelectMany(row => row.Stations, (T3, T4) => new { T3, T4 }).Where(row => row.T4.Location == \"London\").Select(row => row.T4.StationId).Contains(row.T1.Id)).Select(row => new { row.T2.Name }).ToList();", "db_name": "train_station", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,266): error CS1061: 'Station' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Station' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.53", "should_retest": true}, {"id": "4cb5b63ee7d9d783fc26b45eb6d67dc60e62e4b8245b8ca350721c3db0abd705", "dataset_name": "Spider", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy", "question": "What are the student ids of students who don't have any allergies?", "linq": "context.Students.Select(row => row.StuId).Except(context.HasAllergies.Where(row => row.StuId.HasValue).Select(row => StuId = row.StuId.Value)).ToList();", "db_name": "allergy_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,129): error CS0103: The name 'StuId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    3 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.64", "should_retest": true}, {"id": "7eaa16bf62bc1ffcd2e80635b2a453c107a6066210c2dd9ece2366cba71cdd48", "dataset_name": "Spider", "sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")", "question": "Find the last name and age of the student who has allergy to both milk and cat.", "linq": "context.Students.Where(row => context.HasAllergies.Where(row => row.Allergy == \"Milk\").Where(row => row.StuId.HasValue).Select(row => StuId = row.StuId.Value).Intersect(context.HasAllergies.Where(row => row.Allergy == \"Cat\").Where(row => row.StuId.HasValue).Select(row => StuId = row.StuId.Value)).Contains(row.StuId)).Select(row => new { row.Lname, row.Age }).ToList();", "db_name": "allergy_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,284): error CS0103: The name 'StuId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    4 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.57", "should_retest": true}, {"id": "d142bc1c11497750f22a6503250a3eb0facca9c8990c8d82760bab44fc9e1ec4", "dataset_name": "Spider", "sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")", "question": "Find the first name and gender of the student who has allergy to milk but not cat.", "linq": "context.Students.Where(row => context.HasAllergies.Where(row => row.Allergy == \"Milk\").Where(row => row.StuId.HasValue).Select(row => StuId = row.StuId.Value).Except(context.HasAllergies.Where(row => row.Allergy == \"Cat\").Where(row => row.StuId.HasValue).Select(row => StuId = row.StuId.Value)).Contains(row.StuId)).Select(row => new { row.Fname, row.Sex }).ToList();", "db_name": "allergy_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,281): error CS0103: The name 'StuId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    4 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.61", "should_retest": true}, {"id": "654059dddd55ff5e74a38ed4b075d894fd53e7b89f0e27909bd61d0b9d3b541e", "dataset_name": "Spider", "sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")", "question": "Find the average age of the students who have allergies with food and animal types.", "linq": "context.Students.Where(row => context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"food\").Where(row => row.T1.StuId.HasValue).Select(row => StuId = row.T1.StuId.Value).Intersect(context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"animal\").Where(row => row.T1.StuId.HasValue).Select(row => StuId = row.T1.StuId.Value)).Contains(row.StuId)).Select(row => row.Age).Average();", "db_name": "allergy_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,494): error CS0103: The name 'StuId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    4 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.63", "should_retest": true}, {"id": "7f6a45c5fe13403b7717224ca40415b3c918fd5004964f09a97981775bb9fa77", "dataset_name": "Spider", "sql": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id", "question": "List all country and league names.", "linq": "", "db_name": "soccer_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "58c76387fdf997f1f52ecd39c87c51797f30185734b2e02ae4aad0d99fdaf78a", "dataset_name": "Spider", "sql": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"", "question": "How many leagues are there in England?", "linq": "", "db_name": "soccer_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "0909725b3af48a8cc3db3b60d3ee392635b53c2df3d0e506c80b6770cfdd8a75", "dataset_name": "Spider", "sql": "SELECT avg(weight) FROM Player", "question": "What is the average weight of all players?", "linq": "", "db_name": "soccer_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "dd7d0457f88f7e6b909dd2c6fbf83189440a39953ace7ac7b8a75d27de201fb8", "dataset_name": "Spider", "sql": "SELECT max(weight) ,  min(weight) FROM Player", "question": "What is the maximum and minimum height of all players?", "linq": "", "db_name": "soccer_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "998c245506ade21ca38c4d0db2aa25b7a1a8a20ce43d58d77ce4783c7e5d3397", "dataset_name": "Spider", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )", "question": "List all player names who have an overall rating higher than the average.", "linq": "", "db_name": "soccer_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "c98a6132db200283deb7ca2e96e96f07a4c4b56b69b7129e3d0c76d4654c285e", "dataset_name": "Spider", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)", "question": "What are the names of players who have the best dribbling?", "linq": "", "db_name": "soccer_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "893617d0af769dc4f909d60622497995e0bcab46f21ef1a0d75c986b836c5f77", "dataset_name": "Spider", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\"", "question": "List the names of all players who have a crossing score higher than 90 and prefer their right foot.", "linq": "", "db_name": "soccer_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "075d764b3ca79fea36ecc34b2fc407c892f8ab220bbfff1af486754090b86584", "dataset_name": "Spider", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90", "question": "List the names of all left-footed players who have overall rating between 85 and 90.", "linq": "", "db_name": "soccer_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "44501b60ec35e032f2c3324c90e390d1b522c6296fba18ae028e22d7fa344c02", "dataset_name": "Spider", "sql": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot", "question": "What is the average rating for right-footed players and left-footed players?", "linq": "", "db_name": "soccer_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "3790f430969a977f1f190cf44d8c03e5ea6de9c288e337ec5c5eaadad433d4e1", "dataset_name": "Spider", "sql": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot", "question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?", "linq": "", "db_name": "soccer_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "9b2a0fa3fafe35e31050cf3f794caa5980ea78d4d89c198948584a6e0bebb95f", "dataset_name": "Spider", "sql": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85", "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.", "linq": "", "db_name": "soccer_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "bb0af211a4d4551eb6e927d831d53c0b6ca9c944ffbdd1b0a16363b767777f6f", "dataset_name": "Spider", "sql": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\"", "question": "List all of the ids for left-footed players with a height between 180cm and 190cm.", "linq": "", "db_name": "soccer_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "1c3ac2c140894389858cf50b3f4d4b4ef35d5f37c29b9bfd2ccc25ec13ddc876", "dataset_name": "Spider", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3", "question": "Who are the top 3 players in terms of overall rating?", "linq": "", "db_name": "soccer_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "256c4173a0600608e3dd1156e537606a4ccc9252d19c14064abb97bf04660e94", "dataset_name": "Spider", "sql": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5", "question": "List the names and birthdays of the top five players in terms of potential.", "linq": "", "db_name": "soccer_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "17724a4d53711f86d72afe63af40b862fdc2065531caf6c9268832f796ccf3e5", "dataset_name": "Spider", "sql": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"", "question": "What are the account details with the largest value or with value having char '5' in it?", "linq": "new List<string> { context.Accounts.Select(row => row.AccountDetails.ToString()).Max() }.Union(context.Accounts.Where(row => EF.Functions.Like(row.AccountDetails.ToString(), \"%5%\")).Where(row => row.AccountDetails.HasValue).Select(row => AccountDetails = row.AccountDetails.Value)).ToList();", "db_name": "cre_Docs_and_Epenses", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,250): error CS0103: The name 'AccountDetails' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    4 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49", "should_retest": true}, {"id": "13d0e81f75381a53a03cbd18d207ded0778bf7ae51c055ea263ce5c404f0166c", "dataset_name": "Spider", "sql": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers", "question": "Find the total and average amount paid in claim headers.", "linq": "context.ClaimHeaders.GroupBy(row => 1).Select(group => new { SumAmountPiad = group.Select(row => row.AmountPiad).Sum(), AverageAmountPiad = group.Select(row => row.AmountPiad).Average() }).ToList();", "db_name": "insurance_and_eClaims", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 7314,68, 1: 487,6453333333333}]\", linq_results: \"[{0: 7314, 1: 487,6453333333333}]\" }", "should_retest": true}, {"id": "0cfe2473a67751e6521c753ed219f845258bd56b4bc24f1d441d4a59897f4fd4", "dataset_name": "Spider", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)", "question": "What is the name of the customer who has made the largest amount of claim in a single claim?", "linq": "context.ClaimHeaders.Join(context.Policies, t1 => t1.PolicyId, t2 => t2.PolicyId, (t1, t2) => new { t1, t2 }).Join(context.Customers, joined => joined.t2.CustomerId, t3 => t3.CustomerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.AmountClaimed == context.ClaimHeaders.Select(row => (double) row.AmountClaimed).Max()).Select(row => new { row.t3.CustomerDetails }).ToList();", "db_name": "insurance_and_eClaims", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,262): error CS0019: Operator '==' cannot be applied to operands of type 'decimal?' and 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    3 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.88", "should_retest": true}, {"id": "a0896f98f9e39907b3f758bdf6867c2233d1b27c3daa5fbbfb1d6c0b2390b5ab", "dataset_name": "Spider", "sql": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )", "question": "Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.", "linq": "context.Claims.Join(context.Settlements, T1 => T1.ClaimId, T2 => T2.ClaimId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClaimId }).Where(group => group.Count() > 2).Select(group => new { group.First().T1.DateClaimMade, group.Key.ClaimId }).Union(context.Claims.Join(context.Settlements, T1 => T1.ClaimId, T2 => T2.ClaimId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.AmountClaimed == context.Claims.Select(row => row.AmountClaimed).Max()).Select(row => new { row.T1.DateClaimMade, row.T1.ClaimId })).ToList();", "db_name": "insurance_policies", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 2017-08-03, 1: 571}, {0: 2017-10-21, 1: 801}]\", linq_results: \"[{0: 03.08.2017, 1: 571}, {0: 21.10.2017, 1: 801}]\" }", "should_retest": true}, {"id": "b822c1279c0e153c5d4f11377e71c9adff625abd3500e11d7d9be372a859ac74", "dataset_name": "Spider", "sql": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC", "question": "List the method, date and amount of all the payments, in ascending order of date.", "linq": "context.Payments.OrderBy(row => row.DatePaymentMade).Select(row => new { row.PaymentMethodCode, row.DatePaymentMade, row.AmountPayment }).ToList();", "db_name": "insurance_policies", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: Visa, 1: 2017-05-03, 2: 172309}, {0: Discover Card, 1: 2017-05-04, 2: 123255}, {0: MasterCard, 1: 2017-05-28, 2: 448613}, {0: Visa, 1: 2017-05-28, 2: 155654}, {0: MasterCard, 1: 2017-06-24, 2: 456098}, {0: MasterCard, 1: 2017-07-31, 2: 423154}, {0: Discover Card, 1: 2017-08-06, 2: 38324}, {0: Discover Card, 1: 2017-10-07, 2: 71246}, {0: Visa, 1: 2017-12-16, 2: 459407}, {0: MasterCard, 1: 2018-01-10, 2: 407235}, {0: American Express, 1: 2018-01-19, 2: 177130}, {0: MasterCard, 1: 2018-01-28, 2: 319142}, {0: MasterCard, 1: 2018-02-16, 2: 241730}, {0: MasterCard, 1: 2018-02-18, 2: 235893}, {0: Visa, 1: 2018-02-24, 2: 7343}]\", linq_results: \"[{0: Visa, 1: 03.05.2017, 2: 172309}, {0: Discover Card, 1: 04.05.2017, 2: 123255}, {0: MasterCard, 1: 28.05.2017, 2: 448613}, {0: Visa, 1: 28.05.2017, 2: 155654}, {0: MasterCard, 1: 24.06.2017, 2: 456098}, {0: MasterCard, 1: 31.07.2017, 2: 423154}, {0: Discover Card, 1: 06.08.2017, 2: 38324}, {0: Discover Card, 1: 07.10.2017, 2: 71246}, {0: Visa, 1: 16.12.2017, 2: 459407}, {0: MasterCard, 1: 10.01.2018, 2: 407235}, {0: American Express, 1: 19.01.2018, 2: 177130}, {0: MasterCard, 1: 28.01.2018, 2: 319142}, {0: MasterCard, 1: 16.02.2018, 2: 241730}, {0: MasterCard, 1: 18.02.2018, 2: 235893}, {0: Visa, 1: 24.02.2018, 2: 7343}]\" }", "should_retest": true}, {"id": "b5e857af8deb17332b9e140f0f8cf4bca547d923b0b71c395db7e1e3bf665d7a", "dataset_name": "Spider", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )", "question": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.", "linq": "context.Claims.Where(row => row.AmountClaimed > context.Claims.Select(row => row.AmountClaimed).Average()).Select(row => new { row.DateClaimMade, row.DateClaimSettled }).ToList();", "db_name": "insurance_policies", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 2016-08-12, 1: 2018-01-27}, {0: 2017-02-24, 1: 2018-01-21}, {0: 2018-06-14, 1: 2017-12-20}, {0: 2017-08-03, 1: 2018-02-18}, {0: 2016-08-26, 1: 2017-09-04}, {0: 2018-07-13, 1: 2017-11-22}]\", linq_results: \"[{0: 12.08.2016, 1: 27.01.2018}, {0: 24.02.2017, 1: 21.01.2018}, {0: 14.06.2018, 1: 20.12.2017}, {0: 03.08.2017, 1: 18.02.2018}, {0: 26.08.2016, 1: 04.09.2017}, {0: 13.07.2018, 1: 22.11.2017}]\" }", "should_retest": true}, {"id": "83875f1f103e8f01321449301e73d53514b65bed0f4870394b7cc7cffa82763d", "dataset_name": "Spider", "sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )", "question": "Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.", "linq": "context.Claims.Where(row => row.AmountSettled <= context.Claims.Select(row => row.AmountSettled).Average()).Select(row => new { row.DateClaimMade }).ToList();", "db_name": "insurance_policies", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 2017-03-11}, {0: 2017-02-24}, {0: 2017-05-03}, {0: 2018-07-15}, {0: 2016-08-26}, {0: 2017-10-21}, {0: 2018-11-08}]\", linq_results: \"[{0: 11.03.2017}, {0: 24.02.2017}, {0: 03.05.2017}, {0: 15.07.2018}, {0: 26.08.2016}, {0: 21.10.2017}, {0: 08.11.2018}]\" }", "should_retest": true}, {"id": "08125fb96082afd08750c3c09dc43027087272033d7e05eccbc26d035b86c8e9", "dataset_name": "Spider", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1", "question": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.", "linq": "context.Claims.Join(context.Settlements, T1 => T1.ClaimId, T2 => T2.ClaimId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClaimId }).Select(group => new { group.Key.ClaimId, group.First().T1.DateClaimMade, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();", "db_name": "insurance_policies", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 801, 1: 2017-10-21, 2: 4}]\", linq_results: \"[{0: 801, 1: 21.10.2017, 2: 4}]\" }", "should_retest": true}, {"id": "c8d86cc26a8a8ccf57c6bdf8f7f46ac494d3d6580f8398a3be2cf7e12b7b8405", "dataset_name": "Spider", "sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1", "question": "Of all the claims, what was the earliest date when any claim was made?", "linq": "context.Claims.OrderBy(row => row.DateClaimMade).Select(row => new { row.DateClaimMade }).Take(1).ToList();", "db_name": "insurance_policies", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 2016-08-02}]\", linq_results: \"[{0: 02.08.2016}]\" }", "should_retest": true}, {"id": "795784f2a26f3a419129b15622850c50b3229909f42b6c53a088390fb9d1e206", "dataset_name": "Spider", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements", "question": "What are the claim dates and settlement dates of all the settlements?", "linq": "context.Settlements.Select(row => new { row.DateClaimMade, row.DateClaimSettled }).ToList();", "db_name": "insurance_policies", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 2018-08-07, 1: 2018-01-16}, {0: 2017-08-27, 1: 2018-02-04}, {0: 2016-09-05, 1: 2018-03-02}, {0: 2016-05-18, 1: 2018-02-11}, {0: 2017-05-19, 1: 2017-10-06}, {0: 2018-11-10, 1: 2018-02-15}, {0: 2018-05-12, 1: 2017-11-30}, {0: 2016-07-04, 1: 2018-02-20}, {0: 2017-04-18, 1: 2017-12-24}, {0: 2017-07-31, 1: 2018-01-27}, {0: 2017-09-22, 1: 2018-02-14}, {0: 2017-03-04, 1: 2018-02-20}, {0: 2017-04-14, 1: 2017-11-15}, {0: 2017-03-29, 1: 2018-02-20}, {0: 2016-07-19, 1: 2017-11-04}]\", linq_results: \"[{0: 07.08.2018, 1: 16.01.2018}, {0: 27.08.2017, 1: 04.02.2018}, {0: 05.09.2016, 1: 02.03.2018}, {0: 18.05.2016, 1: 11.02.2018}, {0: 19.05.2017, 1: 06.10.2017}, {0: 10.11.2018, 1: 15.02.2018}, {0: 12.05.2018, 1: 30.11.2017}, {0: 04.07.2016, 1: 20.02.2018}, {0: 18.04.2017, 1: 24.12.2017}, {0: 31.07.2017, 1: 27.01.2018}, {0: 22.09.2017, 1: 14.02.2018}, {0: 04.03.2017, 1: 20.02.2018}, {0: 14.04.2017, 1: 15.11.2017}, {0: 29.03.2017, 1: 20.02.2018}, {0: 19.07.2016, 1: 04.11.2017}]\" }", "should_retest": true}, {"id": "29eccea15fcd5aa5463aa369d3ec1435c778fef35fc96221a0b19a767e9e692d", "dataset_name": "Spider", "sql": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'", "question": "Which Payments were processed with Visa? List the payment Id, the date and the amount.", "linq": "context.Payments.Where(row => row.PaymentMethodCode == \"Visa\").Select(row => new { row.PaymentId, row.DatePaymentMade, row.AmountPayment }).ToList();", "db_name": "insurance_policies", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 678, 1: 2017-12-16, 2: 459407}, {0: 754, 1: 2018-02-24, 2: 7343}, {0: 779, 1: 2017-05-28, 2: 155654}, {0: 791, 1: 2017-05-03, 2: 172309}]\", linq_results: \"[{0: 678, 1: 16.12.2017, 2: 459407}, {0: 754, 1: 24.02.2018, 2: 7343}, {0: 779, 1: 28.05.2017, 2: 155654}, {0: 791, 1: 03.05.2017, 2: 172309}]\" }", "should_retest": true}, {"id": "6747e4ddada5e4e37102a28f2f9d67d53fe831715ad7382d5d0fda64503ee183", "dataset_name": "Spider", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1", "question": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.", "linq": "context.Claims.Join(context.Settlements, T1 => T1.ClaimId, T2 => T2.ClaimId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClaimId }).Where(group => group.Count() == 1).Select(group => new { group.Key.ClaimId, group.First().T1.DateClaimMade, group.First().T1.DateClaimSettled }).ToList();", "db_name": "insurance_policies", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 563, 1: 2016-08-02, 2: 2017-09-04}, {0: 569, 1: 2018-07-15, 2: 2017-11-19}, {0: 571, 1: 2017-08-03, 2: 2018-02-18}, {0: 843, 1: 2017-10-14, 2: 2018-02-20}, {0: 957, 1: 2018-11-08, 2: 2017-09-15}]\", linq_results: \"[{0: 563, 1: 02.08.2016, 2: 04.09.2017}, {0: 569, 1: 15.07.2018, 2: 19.11.2017}, {0: 571, 1: 03.08.2017, 2: 18.02.2018}, {0: 843, 1: 14.10.2017, 2: 20.02.2018}, {0: 957, 1: 08.11.2018, 2: 15.09.2017}]\" }", "should_retest": true}, {"id": "7943f690026d3cf4a7fcf66e3b6493b2458872d875803572b61521b7c52d90e4", "dataset_name": "Spider", "sql": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';", "question": "What is the average height of the players from the college named 'Yale University'?", "linq": "context.Players.Join(context.PlayerColleges, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Join(context.Colleges, joined => joined.T2.CollegeId, T3 => T3.CollegeId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.NameFull == \"Yale University\").Select(row => row.T1.Height).ToList().Select(value => double.Parse(value)).Average();", "db_name": "baseball_1", "status": "CodeFailed", "error": "Unhandled exception. System.FormatException: The input string '' was not in a correct format.", "should_retest": true}, {"id": "2a27bc8789586944ad03e200b7ec0c7e6cc6ba0f7c7140a45fec8c085dc871d9", "dataset_name": "Spider", "sql": "SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75", "question": "List players' first name and last name who have weight greater than 220 or height shorter than 75.", "linq": "context.Players.Where(row => row.Weight > \"220\" || row.Height < \"75\").Select(row => new { row.NameFirst, row.NameLast }).ToList();", "db_name": "baseball_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,63): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.48", "should_retest": true}, {"id": "d0200b2c981d278db6aa9d30b571a47f5350ad4269c4c8e3f95fd56a61380ea7", "dataset_name": "Spider", "sql": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );", "question": "What is the total number of postseason games that team Boston Red Stockings participated in?", "linq": "context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\").Select(row => new { T1Year = rowT1..Year, rowT1..Round, rowT1..TeamIdWinner, rowT1..LeagueIdWinner, rowT1..TeamIdLoser, rowT1..LeagueIdLoser, rowT1..Wins, rowT1..Losses, rowT1..Ties, T2Year = rowT2..Year, rowT2..LeagueId, rowT2..TeamId, rowT2..FranchiseId, rowT2..DivId, rowT2..Rank, rowT2..G, rowT2..Ghome, rowT2..W, rowT2..L, rowT2..DivWin, rowT2..WcWin, rowT2..LgWin, rowT2..WsWin, rowT2..R, rowT2..Ab, rowT2..H, rowT2..Double, rowT2..Triple, rowT2..Hr, rowT2..Bb, rowT2..So, rowT2..Sb, rowT2..Cs, rowT2..Hbp, rowT2..Sf, rowT2..Ra, rowT2..Er, rowT2..Era, rowT2..Cg, rowT2..Sho, rowT2..Sv, rowT2..Ipouts, rowT2..Ha, rowT2..Hra, rowT2..Bba, rowT2..Soa, rowT2..E, rowT2..Dp, rowT2..Fp, rowT2..Name, rowT2..Park, rowT2..Attendance, rowT2..Bpf, rowT2..Ppf, rowT2..TeamIdBr, rowT2..TeamIdLahman45, rowT2..TeamIdRetro }).Union(context.Postseasons.Join(context.Teams, T1 => T1.TeamIdLoser, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\").Select(row => new { T1Year = rowT1..Year, rowT1..Round, rowT1..TeamIdWinner, rowT1..LeagueIdWinner, rowT1..TeamIdLoser, rowT1..LeagueIdLoser, rowT1..Wins, rowT1..Losses, rowT1..Ties, T2Year = rowT2..Year, rowT2..LeagueId, rowT2..TeamId, rowT2..FranchiseId, rowT2..DivId, rowT2..Rank, rowT2..G, rowT2..Ghome, rowT2..W, rowT2..L, rowT2..DivWin, rowT2..WcWin, rowT2..LgWin, rowT2..WsWin, rowT2..R, rowT2..Ab, rowT2..H, rowT2..Double, rowT2..Triple, rowT2..Hr, rowT2..Bb, rowT2..So, rowT2..Sb, rowT2..Cs, rowT2..Hbp, rowT2..Sf, rowT2..Ra, rowT2..Er, rowT2..Era, rowT2..Cg, rowT2..Sho, rowT2..Sv, rowT2..Ipouts, rowT2..Ha, rowT2..Hra, rowT2..Bba, rowT2..Soa, rowT2..E, rowT2..Dp, rowT2..Fp, rowT2..Name, rowT2..Park, rowT2..Attendance, rowT2..Bpf, rowT2..Ppf, rowT2..TeamIdBr, rowT2..TeamIdLahman45, rowT2..TeamIdRetro })).Count();", "db_name": "baseball_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,1960): error CS0103: The name 'TeamIdRetro' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    338 Error(s)\n\nTime Elapsed 00:00:02.13", "should_retest": true}, {"id": "89b9d018ec8d739cb8d82e404eebff99d7ed881ac6b042a0fadee2c9246aa6b1", "dataset_name": "Spider", "sql": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001", "question": "What were all the salary values of players in 2010 and 2001?", "linq": "context.Salaries.Where(row => row.Year == 2010).Where(row => row.Salary1.HasValue).Select(row => Salary1 = row.Salary1.Value).Union(context.Salaries.Where(row => row.Year == 2001).Where(row => row.Salary1.HasValue).Select(row => Salary1 = row.Salary1.Value)).ToList();", "db_name": "baseball_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,241): error CS0103: The name 'Salary1' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    4 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:02.07", "should_retest": true}, {"id": "5a1725da23b6fb23fdebe39d04e760f1fb4260c50d5e0f070a7582802ed1a741", "dataset_name": "Spider", "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"", "question": "What instrument did the musician with last name \"Heilo\" use in the song \"Le Pop\"?", "linq": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Instruments, joined => new { Pair1 = joined.T3.SongId, Pair2 = joined.T2.Id }, T4 => new { Pair1 = joined.T4.SongId, Pair2 = joined.T4.BandmateId }, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T2.Lastname == \"Heilo\" && row.T3.Title == \"Le Pop\").Select(row => new { row.T4.Instrument1 }).ToList();", "db_name": "music_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,366): error CS0103: The name 'joined' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.37", "should_retest": true}, {"id": "7013127ce9c6d276f482d8fd92f7a67fcf1c0988c4685845c2d28101f19aff49", "dataset_name": "Spider", "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"", "question": "What instrument did the musician with last name \"Heilo\" use in the song \"Badlands\"?", "linq": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Instruments, joined => new { Pair1 = joined.T3.SongId, Pair2 = joined.T2.Id }, T4 => new { Pair1 = joined.T4.SongId, Pair2 = joined.T4.BandmateId }, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T2.Lastname == \"Heilo\" && row.T3.Title == \"Badlands\").Select(row => new { row.T4.Instrument1 }).ToList();", "db_name": "music_2", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,366): error CS0103: The name 'joined' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.70", "should_retest": true}, {"id": "77743f944c0340ba89191a8624e6948647958ad9acf55b5b98d5c615570341a7", "dataset_name": "Spider", "sql": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels", "question": "Compute the average active time span of contact channels.", "linq": "", "db_name": "customers_and_addresses", "status": "QueryBuildFailed", "error": "Invalid function argument", "should_retest": true}, {"id": "757253a95d175978f23e442f0086ed8d25f190670a53c747ea804baa09f02514", "dataset_name": "Spider", "sql": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)", "question": "Return the channel code and contact number of the customer contact channel whose active duration was the longest.", "linq": "", "db_name": "customers_and_addresses", "status": "QueryBuildFailed", "error": "Unknown expression type", "should_retest": true}, {"id": "201e74ac7a5ef4cb473e796438b37543169288d79bfdd7b09530541add3e5ac0", "dataset_name": "Spider", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1", "question": "What is the name of the customer that has purchased the most items?", "linq": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.CustomerName }).OrderByDescending(group => group.Sum(row => row.t3.OrderQuantity)).Select(group => new { group.Key.CustomerName }).Take(1).ToList();", "db_name": "customers_and_addresses", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Models/WikiSQL/*/ModelContext.cs(27,2): error CS1513: } expected [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    4 Error(s)\n\nTime Elapsed 00:00:00.88", "should_retest": true}, {"id": "32b47d77460593380a1a05e0112f735d46ee14fe98dc7d64579f58aea554d956", "dataset_name": "Spider", "sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1", "question": "What is the payment method of the customer that has purchased the least quantity of items?", "linq": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.CustomerName }).OrderBy(group => group.Sum(row => row.t3.OrderQuantity)).Select(group => new { group.First().t1.PaymentMethod }).Take(1).ToList();", "db_name": "customers_and_addresses", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Models/WikiSQL/*/ModelContext.cs(27,2): error CS1513: } expected [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    4 Error(s)\n\nTime Elapsed 00:00:01.02", "should_retest": true}, {"id": "9e55dad727c7bf405321fdefa150dd3d4051542bf55cbd95b18da22891990a08", "dataset_name": "Spider", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"", "question": "Find the total amount of products ordered before 2018-03-17 07:13:53.", "linq": "context.CustomerOrders.Join(context.OrderItems, t1 => t1.OrderId, t2 => t2.OrderId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.OrderDate < \"2018-03-17 07:13:53\").Select(row => row.t2.OrderQuantity).ToList().Select(value => double.Parse(value)).Sum();", "db_name": "customers_and_addresses", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Models/WikiSQL/*/ModelContext.cs(27,2): error CS1513: } expected [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    4 Error(s)\n\nTime Elapsed 00:00:00.88", "should_retest": true}, {"id": "e5a5f8a4450d9f9ee94d3771f18595b69f20e294430622451a385d3792124122", "dataset_name": "Spider", "sql": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1", "question": "Find the name and ID of the product whose total order quantity is the largest.", "linq": "context.OrderItems.Join(context.Products, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ProductId }).OrderBy(group => group.Sum(row => row.t1.OrderQuantity)).Select(group => new { group.First().t2.ProductDetails, group.First().t2.ProductId }).Take(1).ToList();", "db_name": "customers_and_addresses", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Models/WikiSQL/*/ModelContext.cs(27,2): error CS1513: } expected [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    4 Error(s)\n\nTime Elapsed 00:00:00.90", "should_retest": true}, {"id": "097fcc3628aa7bdc724e86be9e15a018811235e7efaef50c5dbd5cb73c45f7ca", "dataset_name": "Spider", "sql": "SELECT sum(share_count) FROM TRANSACTIONS", "question": "What is the total share of transactions?", "linq": "context.Transactions.Select(row => row.ShareCount).ToList().Select(value => double.Parse(value)).Sum();", "db_name": "tracking_share_transactions", "status": "BuildFailed", "error": "CSC : error CS2001: Source file 'Models/WikiSQL/*/ModelContext.cs' could not be found. [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:00.96", "should_retest": true}, {"id": "a9ad0fa927c0234f0573e2d37ae1429681f0abc25d45a3422554626f631ffbeb", "dataset_name": "Spider", "sql": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50", "question": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.", "linq": "context.Transactions.Where(row => row.TransactionTypeCode == \"PUR\" && row.ShareCount > \"50\").Select(row => (double) row.AmountOfTransaction).Min();", "db_name": "tracking_share_transactions", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,82): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.44", "should_retest": true}, {"id": "d771ba247c4c8cc41d6351d93f1e8a7b6fec29261d61c488b246e44172b4e20b", "dataset_name": "Spider", "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  100 OR amount_of_transaction  >  1000", "question": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.", "linq": "context.Transactions.Where(row => row.ShareCount > \"100\" || row.AmountOfTransaction > 1000).Select(row => new { row.DateOfTransaction }).ToList();", "db_name": "tracking_share_transactions", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,46): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.68", "should_retest": true}, {"id": "a319ab8f729162ba52e93994b77a0f53788d1541d62f39f9955da7850c31cf90", "dataset_name": "Spider", "sql": "SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10", "question": "Show the transaction type descriptions and dates if the share count is smaller than 10.", "linq": "context.RefTransactionTypes.Join(context.Transactions, T1 => T1.TransactionTypeCode, T2 => T2.TransactionTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ShareCount < \"10\").Select(row => new { row.T1.TransactionTypeDescription, row.T2.DateOfTransaction }).ToList();", "db_name": "tracking_share_transactions", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,168): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.47", "should_retest": true}, {"id": "2ef6e82be0ff6b8ef0bbbbf7179bd14e2f1345e6e8b903ea05fb5d6e59636cbb", "dataset_name": "Spider", "sql": "SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100", "question": "Show details of all investors if they make any transaction with share count greater than 100.", "linq": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ShareCount > \"100\").Select(row => new { row.T1.InvestorDetails }).ToList();", "db_name": "tracking_share_transactions", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,140): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.41", "should_retest": true}, {"id": "b7e9db243ed80b7060c9fda7b1ec683ed4b2085a832ac3534ee4dc4ba3b14c49", "dataset_name": "Spider", "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50", "question": "What are the lot details of lots associated with transactions with share count smaller than 50?", "linq": "context.Lots.Join(context.TransactionsLots, T1 => T1.LotId, T2 => T2.TransactionId, (T1, T2) => new { T1, T2 }).Join(context.Transactions, joined => joined.T2.TransactionId, T3 => T3.TransactionId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.ShareCount < \"50\").Select(row => new { row.T1.LotDetails }).ToList();", "db_name": "tracking_share_transactions", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,273): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46", "should_retest": true}, {"id": "1f30eaad96e78f6498a0f90a7e2732e3e910a2eb4cd889aa5e7363901eb06658", "dataset_name": "Spider", "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"", "question": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?", "linq": "context.Lots.Join(context.TransactionsLots, T1 => T1.LotId, T2 => T2.TransactionId, (T1, T2) => new { T1, T2 }).Join(context.Transactions, joined => joined.T2.TransactionId, T3 => T3.TransactionId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.ShareCount > \"100\" && row.T3.TransactionTypeCode == \"PUR\").Select(row => new { row.T1.LotDetails }).ToList();", "db_name": "tracking_share_transactions", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,273): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.74", "should_retest": true}, {"id": "06cd4400054936951f5feea17718fc4c017a2c26ebb7ac1da6c9b8e552e86257", "dataset_name": "Spider", "sql": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id", "question": "Show the average share count of transactions for different investors.", "linq": "context.Transactions.GroupBy(row => new { row.InvestorId }).Select(group => new { group.Key.InvestorId, AverageShareCount = group.Select(row => row.ShareCount).Average() }).ToList();", "db_name": "tracking_share_transactions", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,136): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.74", "should_retest": true}, {"id": "42ba782587ab6da64064e5e3d32bb8b5a78be677108fe3396e4b8d22cf30bc00", "dataset_name": "Spider", "sql": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)", "question": "Show the average share count of transactions each each investor, ordered by average share count.", "linq": "context.Transactions.GroupBy(row => new { row.InvestorId }).Select(group => new { group.Key.InvestorId, AverageShareCount = group.Select(row => row.ShareCount).Average() }).OrderBy(group => group.AverageShareCount).ToList();", "db_name": "tracking_share_transactions", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,136): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.95", "should_retest": true}, {"id": "91d68d9067852c150f169d9916cd9b8a0397ce9fb55b913b4ed39b101cee978e", "dataset_name": "Spider", "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100", "question": "What are the dates of transactions with at least 100 share count or amount bigger than 100?", "linq": "context.Transactions.Where(row => row.ShareCount >= \"100\" || row.AmountOfTransaction >= 100).Select(row => new { row.DateOfTransaction }).ToList();", "db_name": "tracking_share_transactions", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,46): error CS0019: Operator '>=' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.89", "should_retest": true}, {"id": "355b2ec25c01d5b1c41085d93b77b702086241fa7aeb1410a4f934a7e6837c60", "dataset_name": "Spider", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo", "question": "Show student ids who don't have any sports.", "linq": "context.Students.Select(row => row.StuId).Except(context.SportsInfos.Where(row => row.StuId.HasValue).Select(row => StuId = row.StuId.Value)).ToList();", "db_name": "game_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,128): error CS0103: The name 'StuId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.33", "should_retest": true}, {"id": "a12ac44246cc71d36168d7ef48996b4dca5038491cb7728257f96ade6dd2ca64", "dataset_name": "Spider", "sql": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'", "question": "Show student ids who are on scholarship and have major 600.", "linq": "context.Students.Where(row => row.Major == 600).Select(row => row.StuId).Intersect(context.SportsInfos.Where(row => row.OnScholarship == \"Y\").Where(row => row.StuId.HasValue).Select(row => StuId = row.StuId.Value)).ToList();", "db_name": "game_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,201): error CS0103: The name 'StuId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.32", "should_retest": true}, {"id": "d4103ccf630e98c1bbbb14e87b394d74bb326703d78f96aafc3b0bef29adbe71", "dataset_name": "Spider", "sql": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"", "question": "Show student ids who are female and play football.", "linq": "context.Students.Where(row => row.Sex == \"F\").Select(row => row.StuId).Intersect(context.SportsInfos.Where(row => row.SportName == \"Football\").Where(row => row.StuId.HasValue).Select(row => StuId = row.StuId.Value)).ToList();", "db_name": "game_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,202): error CS0103: The name 'StuId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.47", "should_retest": true}, {"id": "4e3fc9db4fb4f612e43e52318ede2039a2cb5b15bff43711245d2e63e7f883ed", "dataset_name": "Spider", "sql": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"", "question": "Show all male student ids who don't play football.", "linq": "context.Students.Where(row => row.Sex == \"M\").Select(row => row.StuId).Except(context.SportsInfos.Where(row => row.SportName == \"Football\").Where(row => row.StuId.HasValue).Select(row => StuId = row.StuId.Value)).ToList();", "db_name": "game_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,199): error CS0103: The name 'StuId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.45", "should_retest": true}, {"id": "ca24b4c611544a45195f0a6d1440537346210beacad32126af9984d67af8bb35", "dataset_name": "Spider", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games", "question": "Show ids of students who don't play video game.", "linq": "context.Students.Select(row => row.StuId).Except(context.PlaysGames.Where(row => row.StuId.HasValue).Select(row => StuId = row.StuId.Value)).ToList();", "db_name": "game_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,127): error CS0103: The name 'StuId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.45", "should_retest": true}, {"id": "364bde2026bf42550673cb57ea6c4f22d867353fb3c157f9ebd491b256e40e67", "dataset_name": "Spider", "sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games", "question": "Show ids of students who play video game and play sports.", "linq": "context.SportsInfos.Where(row => row.StuId.HasValue).Select(row => StuId = row.StuId.Value).Intersect(context.PlaysGames.Where(row => row.StuId.HasValue).Select(row => StuId = row.StuId.Value)).ToList();", "db_name": "game_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,180): error CS0103: The name 'StuId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    148 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.49", "should_retest": true}, {"id": "18a9c695fbd10622ec04311ab2270b70aa26d669ae79dcab6063aef708056d93", "dataset_name": "Spider", "sql": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")", "question": "Find the first name and age of the students who are playing both Football and Lacrosse.", "linq": "context.Students.Where(row => context.SportsInfos.Where(row => row.SportName == \"Football\").Where(row => row.StuId.HasValue).Select(row => StuId = row.StuId.Value).Intersect(context.SportsInfos.Where(row => row.SportName == \"Lacrosse\").Where(row => row.StuId.HasValue).Select(row => StuId = row.StuId.Value)).Contains(row.StuId)).Select(row => new { row.Fname, row.Age }).ToList();", "db_name": "game_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,295): error CS0103: The name 'StuId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    148 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.52", "should_retest": true}, {"id": "84401ab616ba52be964007213cc21479e9792ac74e9c12a4aa27b9ac97e11453", "dataset_name": "Spider", "sql": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")", "question": "Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.", "linq": "context.Students.Where(row => context.PlaysGames.Join(context.VideoGames, T1 => T1.GameId, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Gname == \"Call of Destiny\").Where(row => row.T1.StuId.HasValue).Select(row => T1StuId = row.T1.StuId.Value).Intersect(context.PlaysGames.Join(context.VideoGames, T1 => T1.GameId, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Gname == \"Works of Widenius\").Where(row => row.T1.StuId.HasValue).Select(row => T1StuId = row.T1.StuId.Value)).Contains(row.StuId)).Select(row => new { row.Lname, row.Sex }).ToList();", "db_name": "game_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,492): error CS0103: The name 'T1StuId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    148 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.52", "should_retest": true}, {"id": "219c9720c07de7352dd72d92c587e9823d5a3767ee54d9fb4eca5ab95247a2f3", "dataset_name": "Spider", "sql": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'", "question": "what are the event details of the services that have the type code 'Marriage'?", "linq": "", "db_name": "local_govt_in_alabama", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "f851ced8189614b3c8ecd1db8ede89d86b73384d76fa83b55d3aa64203e630f9", "dataset_name": "Spider", "sql": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1", "question": "What are the ids and details of events that have more than one participants?", "linq": "", "db_name": "local_govt_in_alabama", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "5a546359aad8dcf41ab0dd5e4bd0f4d16f9f9caf30ecb8ed55fdcf6391e02d74", "dataset_name": "Spider", "sql": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID", "question": "How many events have each participants attended? List the participant id, type and the number.", "linq": "", "db_name": "local_govt_in_alabama", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "9e36c9084186e6e79b7677ee05c3a67e62964254dda5502234693a0e3c6d138e", "dataset_name": "Spider", "sql": "SELECT service_id ,  event_details FROM EVENTS", "question": "List the service id and details for the events.", "linq": "", "db_name": "local_govt_in_alabama", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "88742720e00fe6350553214b2207416d6e6d5f4818e3019fcf7ae24aa87b1d5c", "dataset_name": "Spider", "sql": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'", "question": "How many events had participants whose details had the substring 'Dr.'", "linq": "", "db_name": "local_govt_in_alabama", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "72263a8be7438b47e3dbc1f784e5fa71370c7201a9cf254809a699542a40d456", "dataset_name": "Spider", "sql": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1", "question": "Which service id and type has the least number of participants?", "linq": "", "db_name": "local_govt_in_alabama", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "e594776d16994f98097b14e1bb0704bec97e7f1ee55e66a57b69784cf41376c3", "dataset_name": "Spider", "sql": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1", "question": "What is the id of the event with the most participants?", "linq": "context.Events.GroupBy(row => new { row.EventId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.EventId }).Take(1).ToList();", "db_name": "local_govt_in_alabama", "status": "CodeFailed", "error": "ExceptionDetails { sql_results: \"[{0: 80}]\", linq_results: \"[{0: 3}]\" }", "should_retest": true}, {"id": "7c2d1713a2ace6dac9dc927862c97ab019d29b7e0dc233f263aade4580d7bbac", "dataset_name": "Spider", "sql": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'", "question": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?", "linq": "", "db_name": "local_govt_in_alabama", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "1dfdb08c389e6984ff73d617fcc13565eba2eda538acc26c03404d563e01314b", "dataset_name": "Spider", "sql": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'", "question": "Which services type had both successful and failure event details?", "linq": "", "db_name": "local_govt_in_alabama", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "d8c324be978ac7bdd6ea163979f380f80811b5b095ea3edb09ba675ff692e794", "dataset_name": "Spider", "sql": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)", "question": "How many events did not have any participants?", "linq": "", "db_name": "local_govt_in_alabama", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "81509d49a43733800ae82f3dd47ec3da48d27a70f39abaa90240a7b7f18b7915", "dataset_name": "Spider", "sql": "SELECT count(DISTINCT participant_id) FROM participants_in_Events", "question": "What are all the distinct participant ids who attended any events?", "linq": "", "db_name": "local_govt_in_alabama", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "32ea5dc0d9271d94492a44ea0c9c025e68772d054b2509cceed94c59cd5536f0", "dataset_name": "Spider", "sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1", "question": "Show the authors who have submissions to more than one workshop.", "linq": "context.Acceptances.Join(context.Submissions, T1 => T1.SubmissionId, T2 => T2.SubmissionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Author }).Where(group => group.Count(row => row.T1.WorkshopId) > 1).Select(group => new { group.Key.Author }).ToList();", "db_name": "workshop_paper", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,204): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.28", "should_retest": true}, {"id": "9eab8b40230c8b873769d0a391efc604549eac2736b1f436ffea341721b698b0", "dataset_name": "Spider", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"", "question": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.", "linq": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DateOrderPlaced >= \"2009-01-01\" && row.T2.DateOrderPlaced <= \"2010-01-01\").Select(row => new { row.T1.CustomerName }).ToList();", "db_name": "tracking_orders", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,176): error CS0019: Operator '<=' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.37", "should_retest": true}, {"id": "d1f5253827e3bf80aa6df2f00cc6df164e146003dff49a9be2e1cbc6cfb9daa7", "dataset_name": "Spider", "sql": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"", "question": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?", "linq": "context.Orders.Join(context.OrderItems, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DateOrderPlaced >= \"1975-01-01\" && row.T1.DateOrderPlaced <= \"1976-01-01\").Select(row => new { row.T2.ProductId }).Distinct().ToList();", "db_name": "tracking_orders", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,171): error CS0019: Operator '<=' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.39", "should_retest": true}, {"id": "bc09e3eae7dc19392fcf405a68aae8e427c23518cc138d73e97556fd0759fee3", "dataset_name": "Spider", "sql": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"", "question": "Find the ids of orders which are shipped after 2000-01-01.", "linq": "context.Shipments.Where(row => row.ShipmentDate > \"2000-01-01\").Select(row => new { row.OrderId }).ToList();", "db_name": "tracking_orders", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,43): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.35", "should_retest": true}, {"id": "64fe3ea65843ac9c3409dad51f53b76d6a51f1eb2ef02b2d357c3942e8d31fef", "dataset_name": "Spider", "sql": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"", "question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.", "linq": "context.Invoices.Where(row => row.InvoiceDate < \"1989-09-03\" || row.InvoiceDate > \"2007-12-25\").Select(row => new { row.InvoiceNumber }).ToList();", "db_name": "tracking_orders", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,76): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.40", "should_retest": true}, {"id": "c623f7d997b247b3feba66b009607c820674038e60da22be4945dd7b9d288df3", "dataset_name": "Spider", "sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"", "question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.", "linq": "context.Invoices.Where(row => row.InvoiceDate < \"1989-09-03\" || row.InvoiceDate > \"2007-12-25\").Select(row => new { row.InvoiceDetails }).Distinct().ToList();", "db_name": "tracking_orders", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,76): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.35", "should_retest": true}, {"id": "af9d66027f1750b9d97a29be62aa7d8643bf91eeaeb3849b2568a02ad1e89fba", "dataset_name": "Spider", "sql": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student", "question": "Show ids for the faculty members who don't advise any student.", "linq": "context.Faculties.Select(row => row.FacId).Except(context.Students.Where(row => row.Advisor.HasValue).Select(row => Advisor = row.Advisor.Value)).ToList();", "db_name": "activity_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,128): error CS0103: The name 'Advisor' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.31", "should_retest": true}, {"id": "160d858ad02d430a338148f5a96ed5ca55d013723155bc7065794db47fdac328", "dataset_name": "Spider", "sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in", "question": "Show the ids of the faculty who don't participate in any activity.", "linq": "context.Faculties.Select(row => row.FacId).Except(context.FacultyParticipatesIns.Where(row => row.FacId.HasValue).Select(row => FacId = row.FacId.Value)).ToList();", "db_name": "activity_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,140): error CS0103: The name 'FacId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.63", "should_retest": true}, {"id": "c7066a4d8af867eb29a508ec490de1be05a3eb1fc7bcd2db4c2581d56f2e0dfa", "dataset_name": "Spider", "sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student", "question": "Show the ids of all the faculty members who participate in an activity and advise a student.", "linq": "context.FacultyParticipatesIns.Where(row => row.FacId.HasValue).Select(row => FacId = row.FacId.Value).Intersect(context.Students.Where(row => row.Advisor.HasValue).Select(row => Advisor = row.Advisor.Value)).ToList();", "db_name": "activity_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,191): error CS0103: The name 'Advisor' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    148 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.45", "should_retest": true}, {"id": "18d04f33cf703af199a180df117bc1423bcbf56059af311eeb5874d9ec70f14a", "dataset_name": "Spider", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in", "question": "Show the ids of the students who don't participate in any activity.", "linq": "context.Students.Select(row => row.StuId).Except(context.ParticipatesIns.Where(row => row.Stuid.HasValue).Select(row => Stuid = row.Stuid.Value)).ToList();", "db_name": "activity_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,132): error CS0103: The name 'Stuid' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.40", "should_retest": true}, {"id": "d7cbdc8b3acd57951039cb670c76e2a3a763af7173ebc668e7cd471984afd37a", "dataset_name": "Spider", "sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20", "question": "Show the ids for all the students who participate in an activity and are under 20.", "linq": "context.ParticipatesIns.Where(row => row.Stuid.HasValue).Select(row => Stuid = row.Stuid.Value).Intersect(context.Students.Where(row => row.Age < 20).Select(row => row.StuId)).ToList();", "db_name": "activity_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,83): error CS0103: The name 'Stuid' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.31", "should_retest": true}, {"id": "f17c32bb5f47de2ecabcbde0cae0ba432412beb8fc5cf46bd2d467b4b57be669", "dataset_name": "Spider", "sql": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "question": "Find the first names of the faculty members who are playing Canoeing or Kayaking.", "linq": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => new { Pair1 = T1.FacId, Pair2 = T2.Actid }, T2 => new { Pair1 = T2.FacId, Pair2 = T2.Actid }, (T1, T2) => new { T1, T2 }).SelectMany(s => context.Activities, (joined, T3) => new { joined.T2, T3 }).Where(row => row.T3.ActivityName == \"Canoeing\" || row.T3.ActivityName == \"Kayaking\").Select(row => new { row.T1.Lname }).Distinct().ToList();", "db_name": "activity_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,105): error CS0103: The name 'T2' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.45", "should_retest": true}, {"id": "c6ba6a1eada5e33a4c075f9d67d37e12162288e0f71dc9a9d17a73f14c92f7de", "dataset_name": "Spider", "sql": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "question": "Find the first names of professors who are not playing Canoeing or Kayaking.", "linq": "context.Faculties.Where(row => row.Rank == \"Professor\").Select(row => row.Lname).Except(context.Faculties.Join(context.FacultyParticipatesIns, T1 => new { Pair1 = T1.FacId, Pair2 = T2.Actid }, T2 => new { Pair1 = T2.FacId, Pair2 = T2.Actid }, (T1, T2) => new { T1, T2 }).SelectMany(s => context.Activities, (joined, T3) => new { joined.T2, T3 }).Where(row => row.T3.ActivityName == \"Canoeing\" || row.T3.ActivityName == \"Kayaking\").Select(row => row.T1.Lname).Distinct()).ToList();", "db_name": "activity_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,193): error CS0103: The name 'T2' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34", "should_retest": true}, {"id": "0244824afa2bacdd54f147622eea0ba517b9b4822f12d40130051aaded5d3c58", "dataset_name": "Spider", "sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'", "question": "Find the first names of the faculty members who participate in Canoeing and Kayaking.", "linq": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => new { Pair1 = T1.FacId, Pair2 = T2.Actid }, T2 => new { Pair1 = T2.FacId, Pair2 = T2.Actid }, (T1, T2) => new { T1, T2 }).SelectMany(s => context.Activities, (joined, T3) => new { joined.T2, T3 }).Where(row => row.T3.ActivityName == \"Canoeing\").Select(row => row.T1.Lname).Intersect(context.Faculties.Join(context.FacultyParticipatesIns, T1 => new { Pair1 = T1.FacId, Pair2 = T2.Actid }, T2 => new { Pair1 = T2.FacId, Pair2 = T2.Actid }, (T1, T2) => new { T1, T2 }).SelectMany(s => context.Activities, (joined, T3) => new { joined.T2, T3 }).Where(row => row.T3.ActivityName == \"Kayaking\").Select(row => row.T1.Lname)).ToList();", "db_name": "activity_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,449): error CS0103: The name 'T2' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.37", "should_retest": true}, {"id": "5d10271c73de2a21a8f3f5576ff26fb234064e17b037f97a3260009ced2390b6", "dataset_name": "Spider", "sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'", "question": "Find the ids of the students who participate in Canoeing and Kayaking.", "linq": "context.ParticipatesIns.Join(context.Activities, T2 => T2.Actid, T2 => T2.Actid, (T2, T2) => new { T2, T2 }).Where(row => row.T2.ActivityName == \"Canoeing\").Where(row => row.T1.Stuid.HasValue).Select(row => T1Stuid = row.T1.Stuid.Value).Intersect(context.ParticipatesIns.Join(context.Activities, T2 => T2.Actid, T2 => T2.Actid, (T2, T2) => new { T2, T2 }).Where(row => row.T2.ActivityName == \"Kayaking\").Where(row => row.T1.Stuid.HasValue).Select(row => T1Stuid = row.T1.Stuid.Value)).ToList();", "db_name": "activity_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,466): error CS0103: The name 'T1Stuid' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    10 Error(s)\n\nTime Elapsed 00:00:01.46", "should_retest": true}, {"id": "bd0a3f351d1d8ef7fe872658099098e1c2f724260a8be25993ad91d3e7edbbc0", "dataset_name": "Spider", "sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"", "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?", "linq": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Investor == \"Simon Woodroffe\" || row.T1.Investor == \"Peter Jones\").Select(row => new { row.T2.DateOfBirth }).ToList();", "db_name": "entrepreneur", "status": "CodeFailed", "error": "ExceptionDetails { sql_results: \"[{0: 1972-02-06}, {0: 1981-11-21}]\", linq_results: \"[{0: 06.02.1972}, {0: 21.11.1981}]\" }", "should_retest": true}, {"id": "68e921cadfab39b07ec60af7e22607ab33644a84d79a95bcc196246a62fe423b", "dataset_name": "Spider", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3", "question": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.", "linq": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Average(row => row.RoomCount)).Select(group => new { group.Key.AptTypeCode }).Take(3).ToList();", "db_name": "apartment_rentals", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,119): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.44", "should_retest": true}, {"id": "9673e72aa84fc0d7110852c37ecb6100981c316fe89066d4033b4ddffc4aedcb", "dataset_name": "Spider", "sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "question": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.", "linq": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Sum(row => row.RoomCount)).Select(group => new { group.Key.AptTypeCode, group.First().BathroomCount, group.First().BedroomCount }).Take(1).ToList();", "db_name": "apartment_rentals", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,115): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.36", "should_retest": true}, {"id": "0b9802674c91282200acc77d8dab19380fd61a69483c1e6711b4ea520933db5c", "dataset_name": "Spider", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom", "question": "For each grade 0 classroom, report the total number of students.", "linq": "context.Lists.Where(row => row.Grade == \"0\").GroupBy(row => new { row.Classroom }).Select(group => new { group.Key.Classroom, Count = group.Count() }).ToList();", "db_name": "student_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,39): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.57", "should_retest": true}, {"id": "3557f3a4038afacf6d0a3a7542c938d10299513d2eefcbe50c32d0f3689903fc", "dataset_name": "Spider", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom", "question": "Report the total number of students for each fourth-grade classroom.", "linq": "context.Lists.Where(row => row.Grade == \"4\").GroupBy(row => new { row.Classroom }).Select(group => new { group.Key.Classroom, Count = group.Count() }).ToList();", "db_name": "student_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,39): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.47", "should_retest": true}, {"id": "d7eaae2cc0758f811fc5c2902c08e39b506c230cb42c75f9e8b9749220671698", "dataset_name": "Spider", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)", "question": "What are the first names of all students who live in the dorm with the most amenities?", "linq": "", "db_name": "dorm_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "7f5e86ae1515c7ba956137e9acaab9defaf798590e7001936d65eebf0a599843", "dataset_name": "Spider", "sql": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'", "question": "What are the coupon amount of the coupons owned by both good and bad customers?", "linq": "context.DiscountCoupons.Join(context.Customers, T1 => T1.CouponId, T2 => T2.CouponId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.GoodOrBadCustomer == \"good\").Where(row => row.T1.CouponAmount.HasValue).Select(row => T1CouponAmount = row.T1.CouponAmount.Value).Intersect(context.DiscountCoupons.Join(context.Customers, T1 => T1.CouponId, T2 => T2.CouponId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.GoodOrBadCustomer == \"bad\").Where(row => row.T1.CouponAmount.HasValue).Select(row => T1CouponAmount = row.T1.CouponAmount.Value)).ToList();", "db_name": "products_for_hire", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,505): error CS0103: The name 'T1CouponAmount' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    148 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.36", "should_retest": true}, {"id": "522863a95e6eeb0177b8392bb5b82f78b88596b53579e24e80fa11bb04440871", "dataset_name": "Spider", "sql": "SELECT avg(num_of_staff) ,  avg(score) FROM shop", "question": "What are the average score and average staff number of all shops?", "linq": "context.Shops.GroupBy(row => 1).Select(group => new { AverageNumOfStaff = group.Select(row => row.NumOfStaff).Average(), AverageScore = group.Select(row => row.Score).Average() }).ToList();", "db_name": "coffee_shop", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,86): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46", "should_retest": true}, {"id": "5e7b0078f15783bca9da080fe277a50609ce48f855501f7605757b0300ab1ded", "dataset_name": "Spider", "sql": "SELECT name ,  prominence FROM mountain EXCEPT SELECT T1.name ,  T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T3.brand  =  'Sigma'", "question": "Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'.", "linq": "context.Mountains.Where(row => row.Prominence.HasValue).Select(row => new { row.Name, Prominence = row.Prominence.Value }).Except(context.Mountains.Join(context.Photos, T1 => T1.Id, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Join(context.CameraLens, joined => joined.T2.CameraLensId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Brand == \"Sigma\").Where(row => row.T1.Prominence.HasValue).Select(row => new { row.T1.Name, T1Prominence = row.T1.Prominence.Value })).ToList();", "db_name": "mountain_photos", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,12): error CS1929: 'IQueryable<<anonymous type: string Name, double Prominence>>' does not contain a definition for 'Except' and the best extension method overload 'ParallelEnumerable.Except<<anonymous type: string Name, double T1Prominence>>(ParallelQuery<<anonymous type: string Name, double T1Prominence>>, IEnumerable<<anonymous type: string Name, double T1Prominence>>)' requires a receiver of type 'System.Linq.ParallelQuery<<anonymous type: string Name, double T1Prominence>>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    148 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.37", "should_retest": true}, {"id": "d8764b02ff936ee8574867a71023f20f484e9d0ed469d5a5adf5f1ef48b7b35b", "dataset_name": "Spider", "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"", "question": "Find the names of catalog entries with level number 8.", "linq": "context.CatalogContents.Join(context.CatalogContentsAdditionalAttributes, t1 => t1.CatalogEntryId, t2 => t2.CatalogEntryId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CatalogLevelNumber == \"8\").Select(row => new { row.t1.CatalogEntryName }).ToList();", "db_name": "product_catalog", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,177): error CS0019: Operator '==' cannot be applied to operands of type 'int' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.41", "should_retest": true}, {"id": "873af00b631059fab16b773ef11b69d96ad92f720eb2d61da6f4698d992e258e", "dataset_name": "Spider", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5", "question": "Find the names of the products with length smaller than 3 or height greater than 5.", "linq": "context.CatalogContents.Where(row => row.Length < \"3\" || row.Width > \"5\").Select(row => new { row.CatalogEntryName }).ToList();", "db_name": "product_catalog", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,69): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.41", "should_retest": true}, {"id": "59d5643f98b59cc63a8ec2023d904fb09491eb8b053fc879f14f34481c18493d", "dataset_name": "Spider", "sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "question": "What is the effective date of the claim that has the largest amount of total settlement?", "linq": "context.Claims.Join(context.Settlements, t1 => t1.ClaimId, t2 => t2.ClaimId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ClaimId }).OrderByDescending(group => group.Sum(row => row.t2.SettlementAmount)).Select(group => new { group.First().t1.EffectiveDate }).Take(1).ToList();", "db_name": "insurance_fnol", "status": "CodeFailed", "error": "ExceptionDetails { sql_results: \"[{0: 2009-02-11}]\", linq_results: \"[{0: 11.02.2009}]\" }", "should_retest": true}, {"id": "30729fb6314ae20bb6dd7f3295ba3ba3b60a9fba3249a419dea166f12f504eb6", "dataset_name": "Spider", "sql": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"", "question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"", "linq": "context.Customers.Join(context.CustomersPolicies, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => EF.Functions.Like(row.t1.CustomerName, \"%Diana%\")).Select(row => new { row.t2.DateOpened, row.t2.DateClosed }).ToList();", "db_name": "insurance_fnol", "status": "CodeFailed", "error": "ExceptionDetails { sql_results: \"[{0: 2017-01-09, 1: 2018-03-08}, {0: 2016-06-24, 1: 2018-02-22}]\", linq_results: \"[{0: 09.01.2017, 1: 08.03.2018}, {0: 24.06.2016, 1: 22.02.2018}]\" }", "should_retest": true}, {"id": "6b2c8d50705884644adc8fcd0e2cc26ae812e004e798905fd0be725ac333821b", "dataset_name": "Spider", "sql": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;", "question": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?", "linq": "", "db_name": "inn_1", "status": "QueryBuildFailed", "error": "Unknown comparison operator", "should_retest": true}, {"id": "0277c5c09c36fc6d8b4304229a9fcf17ce4f37e80e5dab55c583a6d0e852a27c", "dataset_name": "Spider", "sql": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"", "question": "What are the ids of the problems which are reported after 1978-06-26?", "linq": "context.Problems.Where(row => row.DateProblemReported > \"1978-06-26\").Select(row => new { row.ProblemId }).ToList();", "db_name": "tracking_software_problems", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,42): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.47", "should_retest": true}, {"id": "3ec5c02955f8d9ec019f56d378f4a06289900e78358cbf90de81aa1314d8b095", "dataset_name": "Spider", "sql": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"", "question": "What are the ids of the problems which are reported before 1978-06-26?", "linq": "context.Problems.Where(row => row.DateProblemReported < \"1978-06-26\").Select(row => new { row.ProblemId }).ToList();", "db_name": "tracking_software_problems", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,42): error CS0019: Operator '<' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49", "should_retest": true}, {"id": "796c1ea727fe4aa64f938e64e030787c70cc55f89c0ff59ed7ebf3867e55c7ac", "dataset_name": "Spider", "sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id", "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?", "linq": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DateProblemReported > \"1986-11-13\").GroupBy(row => new { row.T2.ProductId }).Select(group => new { Count = group.Count(), group.Key.ProductId }).ToList();", "db_name": "tracking_software_problems", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,133): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46", "should_retest": true}, {"id": "e43c20a0cad75717d9a3642ee752f62174b21a18611aa958e97b95a9e69f91e8", "dataset_name": "Spider", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"", "question": "List the ids of the problems from the product \"voluptatem\" that are reported after 1995?", "linq": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ProductName == \"voluptatem\" && row.T1.DateProblemReported > \"1995\").Select(row => new { row.T1.ProblemId }).ToList();", "db_name": "tracking_software_problems", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,171): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.50", "should_retest": true}, {"id": "3a5f84cc28859facaf47d20bf2f7cb151b71f660238670c64afe4fe6604a7aae", "dataset_name": "Spider", "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1", "question": "What is the description of the type of the company who concluded its contracts most recently?", "linq": "", "db_name": "assets_maintenance", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "065ae53c7b1e07212b676755ee6f5635cd706324014a4ee955a7ac353d2a3f8e", "dataset_name": "Spider", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "question": "Find the first names that are used for professionals or owners but are not used as dog names.", "linq": "", "db_name": "dog_kennels", "status": "QueryBuildFailed", "error": "Unknown set expression type", "should_retest": true}, {"id": "03e55ab86031300c56871970e03772013ccaae28f32c70c52369383c9a149546", "dataset_name": "Spider", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "question": "How many dogs have an age below the average?", "linq": "context.Dogs.Where(row => row.Age < context.Dogs.Select(row => row.Age).ToList().Select(value => double.Parse(value)).Average()).Count();", "db_name": "dog_kennels", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,38): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    3 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.40", "should_retest": true}, {"id": "1418e357c281c9bc61385e1e415e14d1c9b4898ef719c1541a4ab6059c08fdb3", "dataset_name": "Spider", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "question": "Find the name and rank of the 3 youngest winners across all matches.", "linq": "context.Matches.OrderBy(row => row.WinnerAge).Select(row => new { row.WinnerName, row.WinnerRank }).Distinct().Take(3).ToList();", "db_name": "wta_1", "status": "CodeFailed", "error": "Unhandled exception. Microsoft.Data.Sqlite.SqliteException (0x80004005): SQLite Error 1: 'no such table: matches'.", "should_retest": true}, {"id": "3a8acff1912dc2443c1bb4ee03c6f12442542496dc0bfdcc6235fa8b25d7157d", "dataset_name": "Spider", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "question": "Show ids for all templates not used by any document.", "linq": "context.Templates.Select(row => row.TemplateId).Except(context.Documents.Where(row => row.TemplateId.HasValue).Select(row => TemplateId = row.TemplateId.Value)).ToList();", "db_name": "cre_Doc_Template_Mgt", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,137): error CS0103: The name 'TemplateId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    3 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.23", "should_retest": true}, {"id": "3062f28ac178d9a7ea788977aa84d7ef76169178575f3894bc60b127e2931f01", "dataset_name": "Spider", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "question": "What the smallest version number and its template type code?", "linq": "context.Templates.Select(row => new { MinVersionNumber = row.Select(row => row.VersionNumber).Min(), row.TemplateTypeCode }).ToList();", "db_name": "cre_Doc_Template_Mgt", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,73): error CS1061: 'Template' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type 'Template' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.30", "should_retest": true}, {"id": "8ffe3ccad8d304276278601ae5847c14718b20d5da465d3343d7094604a56e07", "dataset_name": "Spider", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "linq": "context.Paragraphs.GroupBy(row => new { row.DocumentId }).OrderBy(group => group.DocumentId).Select(group => new { group.Key.DocumentId, Count = group.Count() }).ToList();", "db_name": "cre_Doc_Template_Mgt", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,93): error CS1061: 'IGrouping<<anonymous type: int DocumentId>, Paragraph>' does not contain a definition for 'DocumentId' and no accessible extension method 'DocumentId' accepting a first argument of type 'IGrouping<<anonymous type: int DocumentId>, Paragraph>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.21", "should_retest": true}, {"id": "d6daac5f3ed85c5b0e09430520a4f7cc4ce3d639b1770ec4259ca6b81129074e", "dataset_name": "Spider", "sql": "SELECT AVG ( t1.rating ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";", "question": "what is the average rating given in Michelle reviews", "linq": "context.Users.Join(context.Reviews, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Name == \"Michelle\").Select(row => (double) row.t1.Rating).Average();", "db_name": "yelp", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Sequence contains no elements.", "should_retest": true}, {"id": "3134c1b71b861ac1d014a6d0112184285ec5f28e1cdeaebcf5dc5ddc5b7a1ab3", "dataset_name": "Spider", "sql": "SELECT AVG ( rating ) FROM review WHERE YEAR  =  2014;", "question": "What is the average rating of reviews written in year 2014 ?", "linq": "context.Reviews.Where(row => row.Year == 2014).Select(row => (double) row.Rating).Average();", "db_name": "yelp", "status": "CodeFailed", "error": "Unhandled exception. System.InvalidOperationException: Sequence contains no elements.", "should_retest": true}, {"id": "f60aba090cc9cf1b01687691d2fd2438a6819556d95aaab45266f605ff54338c", "dataset_name": "Spider", "sql": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";", "question": "what states neighbor kentucky", "linq": "context.States.Where(row => row.Id == \"kentucky\").Select(row => new { row.Id }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,44): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.84", "should_retest": true}, {"id": "1d7b3be0d1a76d4d225e7a43dd61b5fe1b6274b51cb6fc049ed5747ddc2ea786", "dataset_name": "Spider", "sql": "SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );", "question": "which states have points higher than the highest point in colorado", "linq": "context.Highlows.Where(row => row.HighestElevation > context.Highlows.Where(row => row.StateName == \"colorado\").Select(row => row.HighestElevation).First()).Select(row => new { row.StateName }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,42): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.43", "should_retest": true}, {"id": "6140c14f85081c2c973edfc94870348cb0f11492b6a34481023f0fe3ea411da2", "dataset_name": "Spider", "sql": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );", "question": "what are the highest points of states surrounding mississippi", "linq": "context.Highlows.Where(row => context.States.Where(row => row.Id == \"mississippi\").Select(row => row.Id).Contains(row.StateName)).Select(row => new { row.HighestPoint }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,74): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.70", "should_retest": true}, {"id": "9d0e1afea588525f907dfcb90ea39337330cd232dd2dd4d7e4c6078f582ab287", "dataset_name": "Spider", "sql": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;", "question": "what is the highest point in states bordering colorado", "linq": "context.Highlows.Where(row => context.States.Where(row => row.Id == \"colorado\").Select(row => row.Id).Contains(row.StateName)).OrderByDescending(row => row.HighestElevation).Select(row => new { row.HighestPoint }).Take(1).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,74): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.61", "should_retest": true}, {"id": "40c6c161c4a7edf70a98f851bdc1c0e364715c963953dbc99043939f97b1d331", "dataset_name": "Spider", "sql": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );", "question": "what states have no bordering state", "linq": "context.States.Where(row => !context.States.Select(row => row.Id).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,74): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.59", "should_retest": true}, {"id": "17405dfaa423e2fe74d445c341444adf20a4fea19b4dce82ea1f769694e812ff", "dataset_name": "Spider", "sql": "SELECT COUNT ( state_name ) FROM highlow WHERE lowest_elevation  <  ( SELECT lowest_elevation FROM highlow WHERE state_name  =  \"alabama\" );", "question": "count the states which have elevations lower than what alabama has", "linq": "context.Highlows.Where(row => row.LowestElevation < context.Highlows.Where(row => row.StateName == \"alabama\").Select(row => row.LowestElevation).First()).Select(row => row.StateName).Count();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,42): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.50", "should_retest": true}, {"id": "7394df74f1ebbea82821e452ef9a1c8ce0921ccd12d6899550ca0743edc9c49f", "dataset_name": "Spider", "sql": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";", "question": "how many states border kentucky", "linq": "context.States.Where(row => row.Id == \"kentucky\").Select(row => row.Id).Count();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,44): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.66", "should_retest": true}, {"id": "d0a1bd7b00dadad9576ff44a8250409fb8edf3f95be74db7463d69e29e08b1aa", "dataset_name": "Spider", "sql": "SELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );", "question": "how many states border the state with the largest population", "linq": "context.States.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.Id)).Select(row => row.Id).Count();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,180): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.50", "should_retest": true}, {"id": "14a1b54994e55b67ac977bcd25c99ecec271a785d5ea828a7ae6ee33a0192ebe", "dataset_name": "Spider", "sql": "SELECT COUNT ( state_name ) FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  ( SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city ) ) ) );", "question": "how many states have a higher point than the highest point of the state with the largest capital city in the us", "linq": "context.Highlows.Where(row => row.HighestElevation > context.Highlows.Where(row => row.StateName == context.States.Where(row => row.Capital == context.Cities.Where(row => row.Population == context.Cities.Select(row => row.Population).Max()).Select(row => row.CityName).First()).Select(row => row.StateName).First()).Select(row => row.HighestElevation).First()).Select(row => row.StateName).Count();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,42): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.67", "should_retest": true}, {"id": "a047811c0faf57467d3baba03aeabe59b0c58d293f737dd6c7eb4dccbda7e61c", "dataset_name": "Spider", "sql": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";", "question": "what are the capitals of states that border texas", "linq": "context.States.SelectMany(row => row.Borders, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Id == \"texas\").Select(row => new { row.t2.Capital }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,106): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34", "should_retest": true}, {"id": "d075350e90ef4fc297a3cc8577a3e3e481f39932671df82648e21f755c90c67c", "dataset_name": "Spider", "sql": "SELECT t2.population FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";", "question": "what are the populations of states which border texas", "linq": "context.States.SelectMany(row => row.Borders, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Id == \"texas\").Select(row => new { row.t2.Population }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,106): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.24", "should_retest": true}, {"id": "e63f1cb03ac391a2d7ff08f78b2deaafeadacc69f5efc572853a1b360d6138c2", "dataset_name": "Spider", "sql": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );", "question": "what is the largest state bordering california", "linq": "context.States.Where(row => row.Area == context.States.Where(row => context.States.Where(row => row.Id == \"california\").Select(row => row.Id).Contains(row.StateName)).Select(row => row.Area).Max() && context.States.Where(row => row.Id == \"california\").Select(row => row.Id).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,244): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.24", "should_retest": true}, {"id": "087da52fae5eaefdbb8bbbfd2928a22456cfdb0e410764b88ef0a67bd8ba7648", "dataset_name": "Spider", "sql": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );", "question": "what is the longest river in the states that border tennessee", "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Where(row => context.States.Where(row => row.Id == \"tennessee\").Select(row => row.Id).Contains(row.Traverse)).Select(row => row.Length).Max() && context.States.Where(row => row.Id == \"tennessee\").Select(row => row.Id).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,246): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.33", "should_retest": true}, {"id": "00955c768ea302ee40de09ac377a2f53a142db47173608c5ee1a05463dc07f68", "dataset_name": "Spider", "sql": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );", "question": "what is the smallest state bordering texas", "linq": "context.States.Where(row => row.Area == context.States.Where(row => context.States.Where(row => row.Id == \"texas\").Select(row => row.Id).Contains(row.StateName)).Select(row => row.Area).Min() && context.States.Where(row => row.Id == \"texas\").Select(row => row.Id).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,239): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.23", "should_retest": true}, {"id": "b1065a66616721a3cdd0f96906d95c772582b58972ec0170e48c716ad7d792c8", "dataset_name": "Spider", "sql": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;", "question": "what river runs through the most states", "linq": "", "db_name": "geo", "status": "QueryBuildFailed", "error": "Unknown expression type", "should_retest": true}, {"id": "2dc51dbff2683454704e70932d905648beda3ef21ebce840675284a13906c262", "dataset_name": "Spider", "sql": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );", "question": "what rivers are in states that border alabama", "linq": "context.Rivers.Where(row => context.States.Where(row => row.Id == \"alabama\").Select(row => row.Id).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,72): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.51", "should_retest": true}, {"id": "d6d647417d45023dd569800c5d909762d8056eb3f104108954ac3d878c56f1f7", "dataset_name": "Spider", "sql": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;", "question": "what state bordering oklahoma has the largest population", "linq": "context.States.Where(row => context.States.Where(row => row.Id == \"oklahoma\").Select(row => row.Id).Contains(row.StateName)).OrderByDescending(row => row.Population).Select(row => new { row.StateName }).Take(1).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,72): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.73", "should_retest": true}, {"id": "3f63cf6761d3942c158c68b9199b6c3b6bb10985fbf76708c6c25e6b213d43fa", "dataset_name": "Spider", "sql": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );", "question": "what states border states that border colorado", "linq": "context.States.Where(row => context.States.Where(row => row.Id == \"colorado\").Select(row => row.Id).Contains(row.Id)).Select(row => new { row.Id }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,125): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.49", "should_retest": true}, {"id": "a17efa9f6fabb131da1772245374a2d1808f8f383d6a4e3647a144b8e0935a3b", "dataset_name": "Spider", "sql": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );", "question": "what states border states that the mississippi runs through", "linq": "context.States.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.Id)).Select(row => new { row.Id }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,141): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.57", "should_retest": true}, {"id": "0b250daca20983706b9326717128aabf5344fcf1a6c5e09cc8346e36704e676d", "dataset_name": "Spider", "sql": "SELECT state_name FROM border_info WHERE border  =  \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 );", "question": "what states border texas and have a major river", "linq": "context.States.Where(row => row.Id == \"texas\" && context.Rivers.Where(row => row.Length > 750).Select(row => row.Traverse).Contains(row.Id)).Select(row => new { row.Id }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,148): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.35", "should_retest": true}, {"id": "9fd914494b1cd0da0ef72ad9a055134a5fc1479e0679b03bbb1fdd90ea95952b", "dataset_name": "Spider", "sql": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );", "question": "what states border the most populous state", "linq": "context.States.Where(row => row.Id == context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).First()).Select(row => new { row.Id }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,44): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.20", "should_retest": true}, {"id": "9718a6a25f13be2ff657c084737e4e9229e66197b92a2e6d9a63e48729bae6c4", "dataset_name": "Spider", "sql": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );", "question": "what states border the state with the smallest area", "linq": "context.States.Where(row => row.Id == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).First()).Select(row => new { row.Id }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,44): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.32", "should_retest": true}, {"id": "ea08ea36e826e46bab9455463187996b75a674f93674aa1adedd4109ecb0e2ba", "dataset_name": "Spider", "sql": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );", "question": "which rivers run through states that border the state with the capital atlanta", "linq": "context.Rivers.Where(row => context.States.Where(row => context.States.Where(row => row.Capital == \"atlanta\").Select(row => row.StateName).Contains(row.Id)).Select(row => row.Id).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,164): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.19", "should_retest": true}, {"id": "bc8cd1cc95f90cd00e0f104b62f5991d4ce5bac2f846cfc78a754eb747e032b0", "dataset_name": "Spider", "sql": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" );", "question": "which state has the lowest point that borders idaho", "linq": "context.Highlows.Where(row => row.LowestElevation == context.Highlows.Where(row => context.States.Where(row => row.Id == \"idaho\").Select(row => row.Id).Contains(row.StateName)).Select(row => row.LowestElevation).Min() && context.States.Where(row => row.Id == \"idaho\").Select(row => row.Id).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,265): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.66", "should_retest": true}, {"id": "24f40aae9d27ac24738df6842f74da35530bab8bc4af8dd7afff5a82e5cc1c45", "dataset_name": "Spider", "sql": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );", "question": "what is the largest city in a state that borders california", "linq": "context.Cities.Where(row => row.Population == context.Cities.Where(row => context.States.Where(row => row.Id == \"california\").Select(row => row.Id).Contains(row.StateName)).Select(row => row.Population).Max() && context.States.Where(row => row.Id == \"california\").Select(row => row.Id).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,256): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.68", "should_retest": true}, {"id": "5b513062dd837c0f97774dd9a6635523e643f1abc381ea93b398fbdb6956a1d0", "dataset_name": "Spider", "sql": "SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) );", "question": "what is the capital of the state that borders the state that borders texas", "linq": "context.States.Where(row => context.States.Where(row => context.States.Where(row => row.Id == \"texas\").Select(row => row.Id).Contains(row.Id)).Select(row => row.Id).Contains(row.StateName)).Select(row => new { row.Capital }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,150): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.71", "should_retest": true}, {"id": "7b6c1e649fa2efa9d1f9320f4fac692f67834cd9dce9cc3f364007649ba4057f", "dataset_name": "Spider", "sql": "SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );", "question": "what is the population of the largest state that borders texas", "linq": "context.States.Where(row => row.Area == context.States.Where(row => context.States.Where(row => row.Id == \"texas\").Select(row => row.Id).Contains(row.StateName)).Select(row => row.Area).Max() && context.States.Where(row => row.Id == \"texas\").Select(row => row.Id).Contains(row.StateName)).Select(row => new { row.Population }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,239): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.58", "should_retest": true}, {"id": "a7f30f94c73969bd24fd6ca250454ddd8c8a1caa88a52794127034cc5495911f", "dataset_name": "Spider", "sql": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );", "question": "what is the largest state that borders the state with the highest population", "linq": "context.States.Where(row => row.Area == context.States.Where(row => context.States.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.Id)).Select(row => row.Id).Contains(row.StateName)).Select(row => row.Area).Max() && context.States.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.Id)).Select(row => row.Id).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,501): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.73", "should_retest": true}, {"id": "25fff6d821bd7a13d039d6737fda24a2e36103f915953e360188f2befb2a0cda", "dataset_name": "Spider", "sql": "SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );", "question": "what state borders the state with the smallest population", "linq": "context.States.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Min()).Select(row => row.StateName).Contains(row.Id)).Select(row => new { row.Id }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,180): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.60", "should_retest": true}, {"id": "0a602f8783f87ecd3256545a22840bc961b9229abd532d78947e6cccbab70f81", "dataset_name": "Spider", "sql": "SELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );", "question": "what are the lakes in states bordering texas", "linq": "context.Lakes.Where(row => context.States.Where(row => row.Id == \"texas\").Select(row => row.Id).Contains(row.StateName)).Select(row => new { row.LakeName }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,71): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.57", "should_retest": true}, {"id": "7835e9448d1304f326b7f9584d48cde66b29608efccb15f30118b6978c586861", "dataset_name": "Spider", "sql": "SELECT population / area FROM state WHERE state_name  =  \"pennsylvania\";", "question": "what is the average population per square km in pennsylvania", "linq": "", "db_name": "geo", "status": "QueryBuildFailed", "error": "Unknown comparison operator", "should_retest": true}, {"id": "7ec545e19c96b0061ec4463fc02d22930c7f5ae0aa0759c9905b8881cb527830", "dataset_name": "Spider", "sql": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"florida\" ) );", "question": "what states border states that border states that border florida", "linq": "context.States.Where(row => context.States.Where(row => context.States.Where(row => row.Id == \"florida\").Select(row => row.Id).Contains(row.Id)).Select(row => row.Id).Contains(row.Id)).Select(row => new { row.Id }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,192): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    3 Error(s)\n\nTime Elapsed 00:00:01.50", "should_retest": true}, {"id": "a08b62acecc16b52a6549fa7b2ffac49f1caa976f960bad61d56e14ddc302174", "dataset_name": "Spider", "sql": "SELECT COUNT ( DISTINCT state_name ) FROM border_info;", "question": "how many states border at least one other state", "linq": "context.States.Select(row => row.Id).Distinct().Count();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,45): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.57", "should_retest": true}, {"id": "5f92a95017471f12910ecc1d02832e376b1b1ff3b24fd668361ad8f141ce6af9", "dataset_name": "Spider", "sql": "SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";", "question": "how many states border colorado and border new mexico", "linq": "context.States.Where(row => context.States.Where(row => row.Id == \"new mexico\").Select(row => row.Id).Contains(row.Id) && row.Id == \"colorado\").Select(row => row.Id).Count();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,138): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    3 Error(s)\n\nTime Elapsed 00:00:01.79", "should_retest": true}, {"id": "72dbcc47503436b048e10bcacd250082bacf3fdb86d34c4834ed599395f0ccc0", "dataset_name": "Spider", "sql": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"nebraska\" );", "question": "how many major cities are in states bordering nebraska", "linq": "context.Cities.Where(row => row.Population > 150000 && context.States.Where(row => row.Id == \"nebraska\").Select(row => row.Id).Contains(row.StateName)).Select(row => row.CityName).Count();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,99): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.45", "should_retest": true}, {"id": "8b48f36e4989f7236c1b9ab5f60b1dd874c95a8805ab21bdad7bc5e7648ef2da", "dataset_name": "Spider", "sql": "SELECT SUM ( t2.population ) FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";", "question": "what is the total population of the states that border texas", "linq": "context.States.SelectMany(row => row.Borders, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Id == \"texas\").Select(row => row.t2.Population).Sum();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,106): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.55", "should_retest": true}, {"id": "4d3b324f0952173342bdbf1704eddb2a119e00aa34a3b1f01f9fe57c99f4781f", "dataset_name": "Spider", "sql": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );", "question": "how many rivers run through the states bordering colorado", "linq": "context.Rivers.Where(row => context.States.Where(row => row.Id == \"colorado\").Select(row => row.Id).Contains(row.Traverse)).Select(row => row.RiverName).Count();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,72): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.78", "should_retest": true}, {"id": "265ef616fa6ceda60635d688d82cb5541102d13cecc85b80ab981b3ad791cfb0", "dataset_name": "Spider", "sql": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );", "question": "what rivers flow through states that border the state with the largest population", "linq": "context.Rivers.Where(row => context.States.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.Id)).Select(row => row.Id).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,208): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.42", "should_retest": true}, {"id": "5718e108edad4cf7655db7ec584a95fffd070ef7dc735ae1456731c6c52837c0", "dataset_name": "Spider", "sql": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );", "question": "which states border the longest river in the usa", "linq": "context.States.Where(row => context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => row.Traverse).Contains(row.Id)).Select(row => new { row.Id }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,171): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.40", "should_retest": true}, {"id": "830f6d2ed92b82546292e8107151e599f34bae77a3aa3f6009964a184344a666", "dataset_name": "Spider", "sql": "SELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );", "question": "how many states border the mississippi river", "linq": "context.States.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.Id)).Select(row => row.Id).Distinct().Count();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,141): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49", "should_retest": true}, {"id": "4c615316e1089af8b2581f1c4a4ee0b02ddf7460152338ec14754e4ae8ddee32", "dataset_name": "Spider", "sql": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name WHERE t2.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );", "question": "what states border states that border the state with the largest population", "linq": "context.States.SelectMany(row => row.Borders, (t2, t1) => new { t2, t1 }).Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.t2.Id)).Select(row => new { row.t1.Id }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,242): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.24", "should_retest": true}, {"id": "954e9d98faa557887cdae3e12a67e3e682c88d7c478b6fbb4e7e0750e604aa71", "dataset_name": "Spider", "sql": "SELECT population FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" );", "question": "how many people live in the smallest state bordering wyoming", "linq": "context.States.Where(row => row.Population == context.States.Where(row => context.States.Where(row => row.Id == \"wyoming\").Select(row => row.Id).Contains(row.StateName)).Select(row => row.Population).Max() && context.States.Where(row => row.Id == \"wyoming\").Select(row => row.Id).Contains(row.StateName)).Select(row => new { row.Population }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,253): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.52", "should_retest": true}, {"id": "ffd7cf62f5a50bef52cd460a09a05d01c2f4dfe3563a25133df3042c3fdff996", "dataset_name": "Spider", "sql": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name JOIN border_info AS t3 ON t3.border  =  t2.state_name JOIN border_info AS t4 ON t4.border  =  t3.state_name WHERE t4.state_name  =  \"texas\";", "question": "what states border states that border states that border states that border texas", "linq": "context.States.Where(row => row.t4.Id == \"texas\").Select(row => new { row.t1.Id }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,44): error CS1061: 'State' does not contain a definition for 't4' and no accessible extension method 't4' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.29", "should_retest": true}, {"id": "6fcdcf4b449d0cf7502d451b40b31233279a6b9af714c53aacd5f77bf79cf70b", "dataset_name": "Spider", "sql": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );", "question": "how many states border on the state whose capital is boston", "linq": "context.States.Where(row => row.Id == context.States.Where(row => row.Capital == \"boston\").Select(row => row.StateName).First()).Select(row => row.Id).Count();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,44): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.30", "should_retest": true}, {"id": "48d80de1badb033e69f35b23c681994b162500ada66753519d85647b440f1ea5", "dataset_name": "Spider", "sql": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );", "question": "which states does not border texas", "linq": "context.States.Where(row => !context.States.Where(row => row.Id == \"texas\").Select(row => row.Id).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,73): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.28", "should_retest": true}, {"id": "bbb4b50a83702110f65097cf88530975c880ae2110e012be6f5d67b22297ecb8", "dataset_name": "Spider", "sql": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );", "question": "how many states border the largest state", "linq": "context.States.Where(row => row.Id == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).First()).Select(row => row.Id).Count();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,44): error CS1061: 'State' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.33", "should_retest": true}, {"id": "96bb408409aa24ddc9a3a1187fd12194bcf5d39160f352f56584879b645c91c3", "dataset_name": "Spider", "sql": "SELECT t1.state_name FROM highlow AS t3 JOIN border_info AS t1 ON t3.state_name  =  t1.border JOIN state AS t2 ON t2.state_name  =  t1.border WHERE t3.lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) ORDER BY t2.area DESC LIMIT 1;", "question": "what is the largest state that borders the state with the lowest point in the usa", "linq": "context.Highlows.SelectMany(row => row.Borders, (t3, t2) => new { t3, t2 }).Where(row => row.t3.LowestElevation == context.Highlows.Select(row => row.LowestElevation).Min()).OrderByDescending(row => row.t2.Area).Select(row => new { row.t1.Id }).Take(1).ToList();", "db_name": "geo", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,51): error CS1061: 'Highlow' does not contain a definition for 'Borders' and no accessible extension method 'Borders' accepting a first argument of type 'Highlow' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.54", "should_retest": true}, {"id": "7bd66837616468f79bcca872255dcde3916044a52e35ccbc4272da086d692779", "dataset_name": "Spider", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "question": "Find the actor who played \" Alan Turing \" in the movie \" The Imitation Game \"", "linq": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Role == \"Alan Turing\" && row.t3.Title == \"The Imitation Game\").Select(row => new { row.t1.Name }).ToList();", "db_name": "imdb", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,227): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.77", "should_retest": true}, {"id": "82e37976b33316937e6c8b3c97515cfce04c8416cc1f3da5a1c14a01cbade9b9", "dataset_name": "Spider", "sql": "SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t2.name  =  \"Matt Damon\";", "question": "Find all movies written by \" Matt Damon \"", "linq": "context.WrittenBies.Join(context.Movies, t3 => t3.Msid, t1 => t1.Mid, (t3, t1) => new { t3, t1 }).Join(context.Writers, joined => joined.t3.Wid, t2 => t2.Wid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t2.Name == \"Matt Damon\").Select(row => new { row.t1.Title }).ToList();", "db_name": "imdb", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,234): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.82", "should_retest": true}, {"id": "dffd43e74919e6b11d855d5422c7442d62135a7f086229836bc22994d6f07171", "dataset_name": "Spider", "sql": "SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid  =  t3.msid JOIN producer AS t1 ON t1.pid  =  t3.pid JOIN written_by AS t5 ON t5.msid  =  t2.mid JOIN writer AS t4 ON t5.wid  =  t4.wid WHERE t1.name  =  \"Woody Allen\" AND t4.name  =  \"Woody Allen\";", "question": "Find all movies written and produced by \" Woody Allen \"", "linq": "context.Movies.Join(context.MadeBies, t2 => t2.Mid, t3 => t3.Msid, (t2, t3) => new { t2, t3 }).Join(context.Producers, joined => joined.t3.Pid, t1 => t1.Pid, (joined, t1) => new { joined.t2, joined.t3, t1 }).Join(context.WrittenBies, joined => joined.t2.Mid, t5 => t5.Msid, (joined, t5) => new { joined.t2, joined.t3, joined.t1, t5 }).Join(context.Writers, joined => joined.t5.Wid, t4 => t4.Wid, (joined, t4) => new { joined.t2, joined.t3, joined.t1, joined.t5, t4 }).Where(row => row.t1.Name == \"Woody Allen\" && row.t4.Name == \"Woody Allen\").Select(row => new { row.t2.Title }).ToList();", "db_name": "imdb", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,525): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.08", "should_retest": true}, {"id": "b42f69fc296d1f4e1523b8d6aa8b9dc3129c10137973aa8bef4c2466867fd1d6", "dataset_name": "Spider", "sql": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t3.role  =  \"Olivia Pope\" AND t2.title  =  \"Scandal\";", "question": "Who acts \" Olivia Pope \" in the series Scandal ?", "linq": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.TvSeries, joined => joined.t3.Msid, t2 => t2.Sid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t3.Role == \"Olivia Pope\" && row.t2.Title == \"Scandal\").Select(row => new { row.t1.Name }).ToList();", "db_name": "imdb", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,229): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.99", "should_retest": true}, {"id": "9b521133cecd4dfd394496e80e0b0e202573e79be9910e00eeded505204deec9", "dataset_name": "Spider", "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Rowan Atkinson\" AND t3.role  =  \"Mr. Bean\";", "question": "find all films in which \" Rowan Atkinson \" acted as \" Mr. Bean \"", "linq": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.Movies, joined => joined.t3.Msid, t2 => t2.Mid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Name == \"Rowan Atkinson\" && row.t3.Role == \"Mr. Bean\").Select(row => new { row.t2.Title }).ToList();", "db_name": "imdb", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,262): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.73", "should_retest": true}, {"id": "d560cd99ab406a58c3541ed2c85293c05876b3bc1d71398eb55aa10c5c9c3604", "dataset_name": "Spider", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid WHERE t2.role  =  \"Mr. Bean\";", "question": "who acted the role of \" Mr. Bean \"", "linq": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Role == \"Mr. Bean\").Select(row => new { row.t1.Name }).ToList();", "db_name": "imdb", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,116): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.64", "should_retest": true}, {"id": "9539fc32d4cba4afe39a0ae8625d261f8a4dcddeec88ae784b24da7699259e85", "dataset_name": "Spider", "sql": "SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid  =  t2.msid WHERE t2.role  =  \"Daffy Duck\";", "question": "Which movie had the character \" Daffy Duck \"", "linq": "context.Movies.Join(context.Casts, t1 => t1.Mid, t2 => t2.Msid, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Role == \"Daffy Duck\").Select(row => new { row.t1.Title }).ToList();", "db_name": "imdb", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,117): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46", "should_retest": true}, {"id": "064246a6b5248e7ffdf6a3742ec71d02116245dc534a42ff400e443ba27d1460", "dataset_name": "Spider", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "question": "Show the student IDs and numbers of friends corresponding to each.", "linq": "context.Highschoolers.GroupBy(row => new { row.Id }).Select(group => new { group.Key.Id, Count = group.Count() }).ToList();", "db_name": "network_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 1101, 1: 1}, {0: 1247, 1: 2}, {0: 1304, 1: 1}, {0: 1316, 1: 1}, {0: 1381, 1: 1}, {0: 1468, 1: 2}, {0: 1501, 1: 1}, {0: 1510, 1: 2}, {0: 1661, 1: 1}, {0: 1689, 1: 2}, {0: 1709, 1: 1}, {0: 1782, 1: 3}, {0: 1911, 1: 1}, {0: 1934, 1: 1}]\", linq_results: \"[{0: 1025, 1: 1}, {0: 1101, 1: 1}, {0: 1247, 1: 1}, {0: 1304, 1: 1}, {0: 1316, 1: 1}, {0: 1381, 1: 1}, {0: 1468, 1: 1}, {0: 1501, 1: 1}, {0: 1510, 1: 1}, {0: 1641, 1: 1}, {0: 1661, 1: 1}, {0: 1689, 1: 1}, {0: 1709, 1: 1}, {0: 1782, 1: 1}, {0: 1911, 1: 1}, {0: 1934, 1: 1}]\" }", "should_retest": true}, {"id": "b0f0eb4e91ff1c581dbad838992860e3bad9d1cd8caf36c65aa63eaffc26b0e9", "dataset_name": "Spider", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "question": "Show the names of high schoolers who have at least 3 friends.", "linq": "context.Highschoolers.SelectMany(row => row.Friends, (T2, T1) => new { T2, T1 }).GroupBy(row => new { row.T2.Id }).Where(group => group.Count() >= 3).Select(group => new { group.First().T2.Name }).ToList();", "db_name": "network_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Models/WikiSQL/*/ModelContext.cs(27,2): error CS1513: } expected [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    4 Error(s)\n\nTime Elapsed 00:00:00.77", "should_retest": true}, {"id": "79d670fd5ef9dddab3bc901f1f03f60e56fa5265d38f529b19e8fbacac637c43", "dataset_name": "Spider", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "question": "Show the names of all of the high schooler Kyle's friends.", "linq": "context.Highschoolers.SelectMany(row => row.Highschoolers, (T2, T3) => new { T2, T3 }).Where(row => row.T2.Name == \"Kyle\").Select(row => new { row.T3.Name }).ToList();", "db_name": "network_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Models/WikiSQL/*/ModelContext.cs(27,2): error CS1513: } expected [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    4 Error(s)\n\nTime Elapsed 00:00:00.87", "should_retest": true}, {"id": "722372f1aa535fd76b3a61dee821b76350d284c428c4c6a935e4ceba1d0cbf5c", "dataset_name": "Spider", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "question": "How many friends does the high school student Kyle have?", "linq": "context.Highschoolers.SelectMany(row => row.Friends, (T2, T1) => new { T2, T1 }).Where(row => row.T2.Name == \"Kyle\").Count();", "db_name": "network_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Models/WikiSQL/*/ModelContext.cs(27,2): error CS1513: } expected [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    4 Error(s)\n\nTime Elapsed 00:00:00.91", "should_retest": true}, {"id": "40dd26fde82b006f23f4a2e97daf0e7b4e4d185f3d6bd093d27d3ca0c5a31b77", "dataset_name": "Spider", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "question": "Show ids of all students who do not have any friends.", "linq": "context.Highschoolers.Select(row => row.Id).Except(context.Highschoolers.Select(row => row.Id)).ToList();", "db_name": "network_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Models/WikiSQL/*/ModelContext.cs(27,2): error CS1513: } expected [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    4 Error(s)\n\nTime Elapsed 00:00:00.75", "should_retest": true}, {"id": "0734cb8c5ee1e274afa3f9182c1e081be398ff77e0f435f3f378410706b3716e", "dataset_name": "Spider", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "question": "Show names of all high school students who do not have any friends.", "linq": "context.Highschoolers.Select(row => row.Name).Except(context.Highschoolers.SelectMany(row => row.Friends, (T2, T1) => new { T2, T1 }).Select(row => row.T2.Name)).ToList();", "db_name": "network_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Models/WikiSQL/*/ModelContext.cs(27,2): error CS1513: } expected [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    4 Error(s)\n\nTime Elapsed 00:00:00.82", "should_retest": true}, {"id": "c8bc4f6488348a62e40d8aabb5af68db4e586f5472492226a42f84368f5f7713", "dataset_name": "Spider", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "question": "What are the ids of students who both have friends and are liked?", "linq": "", "db_name": "network_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "49385236ce6a6491da822257490b592403a213f6fcf2927b8c39572d9ba980b0", "dataset_name": "Spider", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "question": "What are the names of high schoolers who both have friends and are liked?", "linq": "", "db_name": "network_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "ff9340561ae107067976126211cf14db8f0dd753552340aefad3766a1beb2bea", "dataset_name": "Spider", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "question": "How many likes correspond to each student id?", "linq": "", "db_name": "network_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "60b97355d792ea38b6aac2660e475986c6a021329723091fd0f01b08407f3b34", "dataset_name": "Spider", "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "question": "What are the names of high schoolers who have likes, and how many likes does each have?", "linq": "", "db_name": "network_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "c49b06690f838ee01dbdeda466038b3a22749305df3cd66eb7662adb9cf68b26", "dataset_name": "Spider", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "question": "Give the name of the student with the most likes.", "linq": "", "db_name": "network_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "6b9641ec7e2005835ac78d51440fa4beeeded717bd6805366a9bb2236cbcb616", "dataset_name": "Spider", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "question": "What are the names of students who have 2 or more likes?", "linq": "", "db_name": "network_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "baa61e64baacd4e0ae81b1970c4229f058f8fbfcc877a11c82d06600057a6111", "dataset_name": "Spider", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "linq": "context.Highschoolers.SelectMany(row => row.Friends, (T2, T1) => new { T2, T1 }).Where(row => row.T2.Grade > 5).GroupBy(row => new { row.T2.Id }).Where(group => group.Count() >= 2).Select(group => new { group.First().T2.Name }).ToList();", "db_name": "network_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Models/WikiSQL/*/ModelContext.cs(27,2): error CS1513: } expected [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    4 Error(s)\n\nTime Elapsed 00:00:00.74", "should_retest": true}, {"id": "f4e0fff426035ec41db6844af1ee8ab8675d5c17d286eabb11d606ad5f4385ff", "dataset_name": "Spider", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "question": "Return the number of likes that the high schooler named Kyle has.", "linq": "", "db_name": "network_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "6d7e62fd87d33b680329ca59192610b2e1c3ca032471b15bbf1c8ae52eb0afb0", "dataset_name": "Spider", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "question": "Find the average grade of all students who have some friends.", "linq": "context.Highschoolers.Where(row => context.Highschoolers.SelectMany(row => row.Friends, (T2, T1) => new { T2, T1 }).Select(row => row.T1.Id).Contains(row.Id)).Select(row => row.Grade).Average();", "db_name": "network_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Models/WikiSQL/*/ModelContext.cs(27,2): error CS1513: } expected [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    4 Error(s)\n\nTime Elapsed 00:00:00.81", "should_retest": true}, {"id": "f7a5c4a1015a8e1a1eca47d990bbdb2a1208e87f34c96a0347956e4dec036cc6", "dataset_name": "Spider", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "question": "Find the minimum grade of students who have no friends.", "linq": "context.Highschoolers.Where(row => !context.Highschoolers.SelectMany(row => row.Friends, (T2, T1) => new { T2, T1 }).Select(row => row.T1.Id).Contains(row.Id)).Select(row => row.Grade).Min();", "db_name": "network_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Models/WikiSQL/*/ModelContext.cs(27,2): error CS1513: } expected [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    4 Error(s)\n\nTime Elapsed 00:00:00.88", "should_retest": true}, {"id": "ff780f5eb299eddddd90cc5a06487aebfa8883f4a973ddf2904acc7b8d6569f0", "dataset_name": "Spider", "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "question": "What is the total population and maximum GNP in Asia?", "linq": "context.Countries.Where(row => row.Continent == \"Asia\").GroupBy(row => 1).Select(group => new { SumPopulation = group.Select(row => row.Population).Sum(), MaxGnp = group.Select(row => row.Gnp).Max() }).ToList();", "db_name": "world_1", "status": "CodeFailed", "error": "Unhandled exception. System.OverflowException: Arithmetic operation resulted in an overflow.", "should_retest": true}, {"id": "89cadc6a024b51a8ccc6b5f4b7f27cbfdaf16499514c8ca5203f332a32aff256", "dataset_name": "Spider", "sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "question": "Which countries have either English or Dutch as an official language?", "linq": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\" && row.T2.IsOfficial == \"T\").Select(row => new { rowT1..Code, rowT1..Name, rowT1..Continent, rowT1..Region, rowT1..SurfaceArea, rowT1..IndepYear, rowT1..Population, rowT1..LifeExpectancy, rowT1..Gnp, rowT1..Gnpold, rowT1..LocalName, rowT1..GovernmentForm, rowT1..HeadOfState, rowT1..Capital, rowT1..Code2, rowT2..CountryCode, rowT2..Language, rowT2..IsOfficial, rowT2..Percentage }).Union(context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"Dutch\" && row.T2.IsOfficial == \"T\").Select(row => new { rowT1..Code, rowT1..Name, rowT1..Continent, rowT1..Region, rowT1..SurfaceArea, rowT1..IndepYear, rowT1..Population, rowT1..LifeExpectancy, rowT1..Gnp, rowT1..Gnpold, rowT1..LocalName, rowT1..GovernmentForm, rowT1..HeadOfState, rowT1..Capital, rowT1..Code2, rowT2..CountryCode, rowT2..Language, rowT2..IsOfficial, rowT2..Percentage })).ToList();", "db_name": "world_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,1080): error CS0103: The name 'Percentage' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    114 Error(s)\n\nTime Elapsed 00:00:01.34", "should_retest": true}, {"id": "611fe81f3ce5767c06b01f0840fd8b6235214e3016739d18dc385c87a846cb82", "dataset_name": "Spider", "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "question": "What is the total number of people living in the nations that do not use English?", "linq": "context.Countries.Where(row => !context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\").Select(row => row.T1.Name).Contains(row.Name)).Select(row => row.Population).Sum();", "db_name": "world_1", "status": "CodeFailed", "error": "Unhandled exception. System.OverflowException: Arithmetic operation resulted in an overflow.", "should_retest": true}, {"id": "ff3bd6605ab7fb6da7a57c0bdd94bab8f0baf94b96fec39b423e4d067eca90a4", "dataset_name": "Spider", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "linq": "context.Countries.GroupBy(row => new { row.Continent }).Select(group => new { SumPopulation = group.Select(row => row.Population).Sum(), AverageLifeExpectancy = group.Select(row => row.LifeExpectancy).Average(), group.Key.Continent }).Where(group => group.AverageLifeExpectancy < 72).ToList();", "db_name": "world_1", "status": "CodeFailed", "error": "Unhandled exception. System.OverflowException: Arithmetic operation resulted in an overflow.", "should_retest": true}, {"id": "e686d1ad2000ccb7a183c553ab75601e674c2f0813e3dbf4ebc0aa837b6fea65", "dataset_name": "Spider", "sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "linq": "context.Countries.Where(row => row.Continent == \"Europe\" && row.Population == \"80000\").Select(row => new { row.Name }).ToList();", "db_name": "world_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,72): error CS0019: Operator '==' cannot be applied to operands of type 'int' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.20", "should_retest": true}, {"id": "3e2024f650a1eca199db4ab4828b16da95f435a70b716e1412eed797eea5c0ac", "dataset_name": "Spider", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "question": "What is the language spoken by the largest percentage of people in each country?", "linq": "context.Countrylanguages.GroupBy(row => new { row.CountryCode }).Select(group => new { group.First().Language, group.Key.CountryCode, MaxPercentage = group.Select(row => row.Percentage).Max() }).ToList();", "db_name": "world_1", "status": "CodeFailed", "error": "ExceptionDetails { sql_results: \"[{0: Papiamento, 1: ABW, 2: 76,7}, {0: Pashto, 1: AFG, 2: 52,4}, {0: Ovimbundu, 1: AGO, 2: 37,2}, {0: English, 1: AIA, 2: 0}, {0: Albaniana, 1: ALB, 2: 97,9}, {0: Spanish, 1: AND, 2: 44,6}, {0: Papiamento, 1: ANT, 2: 86,2}, {0: Arabic, 1: ARE, 2: 42}, {0: Spanish, 1: ARG, 2: 96,8}, {0: Armenian, 1: ARM, 2: 93,4}, {0: Samoan, 1: ASM, 2: 90,6}, {0: Creole English, 1: ATG, 2: 95,7}, {0: English, 1: AUS, 2: 81,2}, {0: German, 1: AUT, 2: 92}, {0: Azerbaijani, 1: AZE, 2: 89}, {0: Kirundi, 1: BDI, 2: 98,1}, {0: Dutch, 1: BEL, 2: 59,2}, {0: Fon, 1: BEN, 2: 39,8}, {0: Mossi, 1: BFA, 2: 50,2}, {0: Bengali, 1: BGD, 2: 97,7}, {0: Bulgariana, 1: BGR, 2: 83,2}, {0: Arabic, 1: BHR, 2: 67,7}, {0: Creole English, 1: BHS, 2: 89,7}, {0: Serbo-Croatian, 1: BIH, 2: 99,2}, {0: Belorussian, 1: BLR, 2: 65,6}, {0: English, 1: BLZ, 2: 50,8}, {0: English, 1: BMU, 2: 100}, {0: Spanish, 1: BOL, 2: 87,7}, {0: Portuguese, 1: BRA, 2: 97,5}, {0: Bajan, 1: BRB, 2: 95,1}, {0: Malay, 1: BRN, 2: 45,5}, {0: Dzongkha, 1: BTN, 2: 50}, {0: Tswana, 1: BWA, 2: 75,5}, {0: Gbaya, 1: CAF, 2: 23,8}, {0: English, 1: CAN, 2: 60,4}, {0: English, 1: CCK, 2: 0}, {0: German, 1: CHE, 2: 63,6}, {0: Spanish, 1: CHL, 2: 89,7}, {0: Chinese, 1: CHN, 2: 92}, {0: Akan, 1: CIV, 2: 30}, {0: Fang, 1: CMR, 2: 19,7}, {0: Luba, 1: COD, 2: 18}, {0: Kongo, 1: COG, 2: 51,5}, {0: English, 1: COK, 2: 0}, {0: Spanish, 1: COL, 2: 99}, {0: Comorian, 1: COM, 2: 75}, {0: Crioulo, 1: CPV, 2: 100}, {0: Spanish, 1: CRI, 2: 97,5}, {0: Spanish, 1: CUB, 2: 100}, {0: Chinese, 1: CXR, 2: 0}, {0: English, 1: CYM, 2: 0}, {0: Greek, 1: CYP, 2: 74,1}, {0: Czech, 1: CZE, 2: 81,2}, {0: German, 1: DEU, 2: 91,3}, {0: Somali, 1: DJI, 2: 43,9}, {0: Creole English, 1: DMA, 2: 100}, {0: Danish, 1: DNK, 2: 93,5}, {0: Spanish, 1: DOM, 2: 98}, {0: Arabic, 1: DZA, 2: 86}, {0: Spanish, 1: ECU, 2: 93}, {0: Arabic, 1: EGY, 2: 98,8}, {0: Tigrinja, 1: ERI, 2: 49,1}, {0: Arabic, 1: ESH, 2: 100}, {0: Spanish, 1: ESP, 2: 74,4}, {0: Estonian, 1: EST, 2: 65,3}, {0: Oromo, 1: ETH, 2: 31}, {0: Finnish, 1: FIN, 2: 92,7}, {0: Fijian, 1: FJI, 2: 50,8}, {0: English, 1: FLK, 2: 0}, {0: French, 1: FRA, 2: 93,6}, {0: Faroese, 1: FRO, 2: 100}, {0: Trukese, 1: FSM, 2: 41,6}, {0: Fang, 1: GAB, 2: 35,8}, {0: English, 1: GBR, 2: 97,3}, {0: Georgiana, 1: GEO, 2: 71,7}, {0: Akan, 1: GHA, 2: 52,4}, {0: English, 1: GIB, 2: 88,9}, {0: Ful, 1: GIN, 2: 38,6}, {0: Creole French, 1: GLP, 2: 95}, {0: Malinke, 1: GMB, 2: 34,1}, {0: Crioulo, 1: GNB, 2: 36,4}, {0: Fang, 1: GNQ, 2: 84,8}, {0: Greek, 1: GRC, 2: 98,5}, {0: Creole English, 1: GRD, 2: 100}, {0: Greenlandic, 1: GRL, 2: 87,5}, {0: Spanish, 1: GTM, 2: 64,7}, {0: Creole French, 1: GUF, 2: 94,3}, {0: English, 1: GUM, 2: 37,5}, {0: Creole English, 1: GUY, 2: 96,4}, {0: Canton Chinese, 1: HKG, 2: 88,7}, {0: Spanish, 1: HND, 2: 97,2}, {0: Serbo-Croatian, 1: HRV, 2: 95,9}, {0: Haiti Creole, 1: HTI, 2: 100}, {0: Hungarian, 1: HUN, 2: 98,5}, {0: Javanese, 1: IDN, 2: 39,4}, {0: Hindi, 1: IND, 2: 39,9}, {0: English, 1: IRL, 2: 98,4}, {0: Persian, 1: IRN, 2: 45,7}, {0: Arabic, 1: IRQ, 2: 77,2}, {0: Icelandic, 1: ISL, 2: 95,7}, {0: Hebrew, 1: ISR, 2: 63,1}, {0: Italian, 1: ITA, 2: 94,1}, {0: Creole English, 1: JAM, 2: 94,2}, {0: Arabic, 1: JOR, 2: 97,9}, {0: Japanese, 1: JPN, 2: 99,1}, {0: Kazakh, 1: KAZ, 2: 46}, {0: Kikuyu, 1: KEN, 2: 20,9}, {0: Kirgiz, 1: KGZ, 2: 59,7}, {0: Khmer, 1: KHM, 2: 88,6}, {0: Kiribati, 1: KIR, 2: 98,9}, {0: Creole English, 1: KNA, 2: 100}, {0: Korean, 1: KOR, 2: 99,9}, {0: Arabic, 1: KWT, 2: 78,1}, {0: Lao, 1: LAO, 2: 67,2}, {0: Arabic, 1: LBN, 2: 93}, {0: Kpelle, 1: LBR, 2: 19,5}, {0: Arabic, 1: LBY, 2: 96}, {0: Creole French, 1: LCA, 2: 80}, {0: German, 1: LIE, 2: 89}, {0: Singali, 1: LKA, 2: 60,3}, {0: Sotho, 1: LSO, 2: 85}, {0: Lithuanian, 1: LTU, 2: 81,6}, {0: Luxembourgish, 1: LUX, 2: 64,4}, {0: Latvian, 1: LVA, 2: 55,1}, {0: Canton Chinese, 1: MAC, 2: 85,6}, {0: Arabic, 1: MAR, 2: 65}, {0: French, 1: MCO, 2: 41,9}, {0: Romanian, 1: MDA, 2: 61,9}, {0: Malagasy, 1: MDG, 2: 98,9}, {0: Dhivehi, 1: MDV, 2: 100}, {0: Spanish, 1: MEX, 2: 92,1}, {0: Marshallese, 1: MHL, 2: 96,8}, {0: Macedonian, 1: MKD, 2: 66,5}, {0: Bambara, 1: MLI, 2: 31,8}, {0: Maltese, 1: MLT, 2: 95,8}, {0: Burmese, 1: MMR, 2: 69}, {0: Mongolian, 1: MNG, 2: 78,8}, {0: Philippene Languages, 1: MNP, 2: 34,1}, {0: Makua, 1: MOZ, 2: 27,8}, {0: Hassaniya, 1: MRT, 2: 81,7}, {0: English, 1: MSR, 2: 0}, {0: Creole French, 1: MTQ, 2: 96,6}, {0: Creole French, 1: MUS, 2: 70,6}, {0: Chichewa, 1: MWI, 2: 58,3}, {0: Malay, 1: MYS, 2: 58,4}, {0: Mahor\u00e9, 1: MYT, 2: 41,9}, {0: Ovambo, 1: NAM, 2: 50,7}, {0: Malenasian Languages, 1: NCL, 2: 45,4}, {0: Hausa, 1: NER, 2: 53,1}, {0: English, 1: NFK, 2: 0}, {0: Joruba, 1: NGA, 2: 21,4}, {0: Spanish, 1: NIC, 2: 97,6}, {0: English, 1: NIU, 2: 0}, {0: Dutch, 1: NLD, 2: 95,6}, {0: Norwegian, 1: NOR, 2: 96,6}, {0: Nepali, 1: NPL, 2: 50,4}, {0: Nauru, 1: NRU, 2: 57,5}, {0: English, 1: NZL, 2: 87}, {0: Arabic, 1: OMN, 2: 76,7}, {0: Punjabi, 1: PAK, 2: 48,2}, {0: Spanish, 1: PAN, 2: 76,8}, {0: Pitcairnese, 1: PCN, 2: 0}, {0: Spanish, 1: PER, 2: 79,8}, {0: Pilipino, 1: PHL, 2: 29,3}, {0: Palau, 1: PLW, 2: 82,2}, {0: Papuan Languages, 1: PNG, 2: 78,1}, {0: Polish, 1: POL, 2: 97,6}, {0: Spanish, 1: PRI, 2: 51,3}, {0: Korean, 1: PRK, 2: 99,9}, {0: Portuguese, 1: PRT, 2: 99}, {0: Spanish, 1: PRY, 2: 55,1}, {0: Arabic, 1: PSE, 2: 95,9}, {0: Tahitian, 1: PYF, 2: 46,4}, {0: Arabic, 1: QAT, 2: 40,7}, {0: Creole French, 1: REU, 2: 91,5}, {0: Romanian, 1: ROM, 2: 90,7}, {0: Russian, 1: RUS, 2: 86,6}, {0: Rwanda, 1: RWA, 2: 100}, {0: Arabic, 1: SAU, 2: 95}, {0: Arabic, 1: SDN, 2: 49,4}, {0: Wolof, 1: SEN, 2: 48,1}, {0: Chinese, 1: SGP, 2: 77,1}, {0: English, 1: SHN, 2: 0}, {0: Norwegian, 1: SJM, 2: 0}, {0: Malenasian Languages, 1: SLB, 2: 85,6}, {0: Mende, 1: SLE, 2: 34,8}, {0: Spanish, 1: SLV, 2: 100}, {0: Italian, 1: SMR, 2: 100}, {0: Somali, 1: SOM, 2: 98,3}, {0: French, 1: SPM, 2: 0}, {0: Crioulo, 1: STP, 2: 86,3}, {0: Sranantonga, 1: SUR, 2: 81}, {0: Slovak, 1: SVK, 2: 85,6}, {0: Slovene, 1: SVN, 2: 87,9}, {0: Swedish, 1: SWE, 2: 89,5}, {0: Swazi, 1: SWZ, 2: 89,9}, {0: Seselwa, 1: SYC, 2: 91,3}, {0: Arabic, 1: SYR, 2: 90}, {0: English, 1: TCA, 2: 0}, {0: Sara, 1: TCD, 2: 27,7}, {0: Ewe, 1: TGO, 2: 23,2}, {0: Thai, 1: THA, 2: 52,6}, {0: Tadzhik, 1: TJK, 2: 62,2}, {0: English, 1: TKL, 2: 0}, {0: Turkmenian, 1: TKM, 2: 76,7}, {0: Portuguese, 1: TMP, 2: 0}, {0: Tongan, 1: TON, 2: 98,3}, {0: English, 1: TTO, 2: 93,5}, {0: Arabic, 1: TUN, 2: 69,9}, {0: Turkish, 1: TUR, 2: 87,6}, {0: Tuvalu, 1: TUV, 2: 92,5}, {0: Min, 1: TWN, 2: 66,7}, {0: Nyamwesi, 1: TZA, 2: 21,1}, {0: Ganda, 1: UGA, 2: 18,1}, {0: Ukrainian, 1: UKR, 2: 64,7}, {0: English, 1: UMI, 2: 0}, {0: Spanish, 1: URY, 2: 95,7}, {0: English, 1: USA, 2: 86,2}, {0: Uzbek, 1: UZB, 2: 72,6}, {0: Italian, 1: VAT, 2: 0}, {0: Creole English, 1: VCT, 2: 99,1}, {0: Spanish, 1: VEN, 2: 96,9}, {0: English, 1: VGB, 2: 0}, {0: English, 1: VIR, 2: 81,7}, {0: Vietnamese, 1: VNM, 2: 86,8}, {0: Bislama, 1: VUT, 2: 56,6}, {0: Futuna, 1: WLF, 2: 0}, {0: Samoan-English, 1: WSM, 2: 52}, {0: Arabic, 1: YEM, 2: 99,6}, {0: Serbo-Croatian, 1: YUG, 2: 75,2}, {0: Zulu, 1: ZAF, 2: 22,7}, {0: Bemba, 1: ZMB, 2: 29,7}, {0: Shona, 1: ZWE, 2: 72,1}]\", linq_results: \"[{0: Dutch, 1: ABW, 2: 76,7}, {0: Balochi, 1: AFG, 2: 52,4}, {0: Ambo, 1: AGO, 2: 37,2}, {0: English, 1: AIA, 2: 0}, {0: Albaniana, 1: ALB, 2: 97,9}, {0: Catalan, 1: AND, 2: 44,6}, {0: Dutch, 1: ANT, 2: 86,2}, {0: Arabic, 1: ARE, 2: 42}, {0: Indian Languages, 1: ARG, 2: 96,8}, {0: Armenian, 1: ARM, 2: 93,4}, {0: English, 1: ASM, 2: 90,6}, {0: Creole English, 1: ATG, 2: 95,7}, {0: Arabic, 1: AUS, 2: 81,2}, {0: Czech, 1: AUT, 2: 92}, {0: Armenian, 1: AZE, 2: 89}, {0: French, 1: BDI, 2: 98,1}, {0: Arabic, 1: BEL, 2: 59,2}, {0: Adja, 1: BEN, 2: 39,8}, {0: Busansi, 1: BFA, 2: 50,2}, {0: Bengali, 1: BGD, 2: 97,7}, {0: Bulgariana, 1: BGR, 2: 83,2}, {0: Arabic, 1: BHR, 2: 67,7}, {0: Creole English, 1: BHS, 2: 89,7}, {0: Serbo-Croatian, 1: BIH, 2: 99,2}, {0: Belorussian, 1: BLR, 2: 65,6}, {0: English, 1: BLZ, 2: 50,8}, {0: English, 1: BMU, 2: 100}, {0: Aimar\u00e1, 1: BOL, 2: 87,7}, {0: German, 1: BRA, 2: 97,5}, {0: Bajan, 1: BRB, 2: 95,1}, {0: Chinese, 1: BRN, 2: 45,5}, {0: Asami, 1: BTN, 2: 50}, {0: Khoekhoe, 1: BWA, 2: 75,5}, {0: Banda, 1: CAF, 2: 23,8}, {0: Chinese, 1: CAN, 2: 60,4}, {0: English, 1: CCK, 2: 0}, {0: French, 1: CHE, 2: 63,6}, {0: Aimar\u00e1, 1: CHL, 2: 89,7}, {0: Chinese, 1: CHN, 2: 92}, {0: Akan, 1: CIV, 2: 30}, {0: Bamileke-bamum, 1: CMR, 2: 19,7}, {0: Boa, 1: COD, 2: 18}, {0: Kongo, 1: COG, 2: 51,5}, {0: English, 1: COK, 2: 0}, {0: Arawakan, 1: COL, 2: 99}, {0: Comorian, 1: COM, 2: 75}, {0: Crioulo, 1: CPV, 2: 100}, {0: Chibcha, 1: CRI, 2: 97,5}, {0: Spanish, 1: CUB, 2: 100}, {0: Chinese, 1: CXR, 2: 0}, {0: English, 1: CYM, 2: 0}, {0: Greek, 1: CYP, 2: 74,1}, {0: Czech, 1: CZE, 2: 81,2}, {0: German, 1: DEU, 2: 91,3}, {0: Afar, 1: DJI, 2: 43,9}, {0: Creole English, 1: DMA, 2: 100}, {0: Arabic, 1: DNK, 2: 93,5}, {0: Creole French, 1: DOM, 2: 98}, {0: Arabic, 1: DZA, 2: 86}, {0: Ket\u0161ua, 1: ECU, 2: 93}, {0: Arabic, 1: EGY, 2: 98,8}, {0: Afar, 1: ERI, 2: 49,1}, {0: Arabic, 1: ESH, 2: 100}, {0: Basque, 1: ESP, 2: 74,4}, {0: Belorussian, 1: EST, 2: 65,3}, {0: Amhara, 1: ETH, 2: 31}, {0: Estonian, 1: FIN, 2: 92,7}, {0: Fijian, 1: FJI, 2: 50,8}, {0: English, 1: FLK, 2: 0}, {0: Arabic, 1: FRA, 2: 93,6}, {0: Danish, 1: FRO, 2: 100}, {0: Kosrean, 1: FSM, 2: 41,6}, {0: Fang, 1: GAB, 2: 35,8}, {0: English, 1: GBR, 2: 97,3}, {0: Abhyasi, 1: GEO, 2: 71,7}, {0: Akan, 1: GHA, 2: 52,4}, {0: Arabic, 1: GIB, 2: 88,9}, {0: Ful, 1: GIN, 2: 38,6}, {0: Creole French, 1: GLP, 2: 95}, {0: Diola, 1: GMB, 2: 34,1}, {0: Balante, 1: GNB, 2: 36,4}, {0: Bubi, 1: GNQ, 2: 84,8}, {0: Greek, 1: GRC, 2: 98,5}, {0: Creole English, 1: GRD, 2: 100}, {0: Danish, 1: GRL, 2: 87,5}, {0: Cakchiquel, 1: GTM, 2: 64,7}, {0: Creole French, 1: GUF, 2: 94,3}, {0: Chamorro, 1: GUM, 2: 37,5}, {0: Arawakan, 1: GUY, 2: 96,4}, {0: Canton Chinese, 1: HKG, 2: 88,7}, {0: Creole English, 1: HND, 2: 97,2}, {0: Serbo-Croatian, 1: HRV, 2: 95,9}, {0: French, 1: HTI, 2: 100}, {0: German, 1: HUN, 2: 98,5}, {0: Bali, 1: IDN, 2: 39,4}, {0: Asami, 1: IND, 2: 39,9}, {0: English, 1: IRL, 2: 98,4}, {0: Arabic, 1: IRN, 2: 45,7}, {0: Arabic, 1: IRQ, 2: 77,2}, {0: English, 1: ISL, 2: 95,7}, {0: Arabic, 1: ISR, 2: 63,1}, {0: Albaniana, 1: ITA, 2: 94,1}, {0: Creole English, 1: JAM, 2: 94,2}, {0: Arabic, 1: JOR, 2: 97,9}, {0: Ainu, 1: JPN, 2: 99,1}, {0: German, 1: KAZ, 2: 46}, {0: Gusii, 1: KEN, 2: 20,9}, {0: Kazakh, 1: KGZ, 2: 59,7}, {0: Chinese, 1: KHM, 2: 88,6}, {0: Kiribati, 1: KIR, 2: 98,9}, {0: Creole English, 1: KNA, 2: 100}, {0: Chinese, 1: KOR, 2: 99,9}, {0: Arabic, 1: KWT, 2: 78,1}, {0: Lao, 1: LAO, 2: 67,2}, {0: Arabic, 1: LBN, 2: 93}, {0: Bassa, 1: LBR, 2: 19,5}, {0: Arabic, 1: LBY, 2: 96}, {0: Creole French, 1: LCA, 2: 80}, {0: German, 1: LIE, 2: 89}, {0: Mixed Languages, 1: LKA, 2: 60,3}, {0: English, 1: LSO, 2: 85}, {0: Belorussian, 1: LTU, 2: 81,6}, {0: French, 1: LUX, 2: 64,4}, {0: Belorussian, 1: LVA, 2: 55,1}, {0: Canton Chinese, 1: MAC, 2: 85,6}, {0: Arabic, 1: MAR, 2: 65}, {0: English, 1: MCO, 2: 41,9}, {0: Bulgariana, 1: MDA, 2: 61,9}, {0: French, 1: MDG, 2: 98,9}, {0: Dhivehi, 1: MDV, 2: 100}, {0: Mixtec, 1: MEX, 2: 92,1}, {0: English, 1: MHL, 2: 96,8}, {0: Albaniana, 1: MKD, 2: 66,5}, {0: Bambara, 1: MLI, 2: 31,8}, {0: English, 1: MLT, 2: 95,8}, {0: Burmese, 1: MMR, 2: 69}, {0: Bajad, 1: MNG, 2: 78,8}, {0: Carolinian, 1: MNP, 2: 34,1}, {0: Chuabo, 1: MOZ, 2: 27,8}, {0: Ful, 1: MRT, 2: 81,7}, {0: English, 1: MSR, 2: 0}, {0: Creole French, 1: MTQ, 2: 96,6}, {0: Bhojpuri, 1: MUS, 2: 70,6}, {0: Chichewa, 1: MWI, 2: 58,3}, {0: Chinese, 1: MYS, 2: 58,4}, {0: French, 1: MYT, 2: 41,9}, {0: Afrikaans, 1: NAM, 2: 50,7}, {0: French, 1: NCL, 2: 45,4}, {0: Ful, 1: NER, 2: 53,1}, {0: English, 1: NFK, 2: 0}, {0: Bura, 1: NGA, 2: 21,4}, {0: Creole English, 1: NIC, 2: 97,6}, {0: English, 1: NIU, 2: 0}, {0: Arabic, 1: NLD, 2: 95,6}, {0: Danish, 1: NOR, 2: 96,6}, {0: Bhojpuri, 1: NPL, 2: 50,4}, {0: Chinese, 1: NRU, 2: 57,5}, {0: English, 1: NZL, 2: 87}, {0: Arabic, 1: OMN, 2: 76,7}, {0: Balochi, 1: PAK, 2: 48,2}, {0: Arabic, 1: PAN, 2: 76,8}, {0: Pitcairnese, 1: PCN, 2: 0}, {0: Aimar\u00e1, 1: PER, 2: 79,8}, {0: Bicol, 1: PHL, 2: 29,3}, {0: Chinese, 1: PLW, 2: 82,2}, {0: Malenasian Languages, 1: PNG, 2: 78,1}, {0: Belorussian, 1: POL, 2: 97,6}, {0: English, 1: PRI, 2: 51,3}, {0: Chinese, 1: PRK, 2: 99,9}, {0: Portuguese, 1: PRT, 2: 99}, {0: German, 1: PRY, 2: 55,1}, {0: Arabic, 1: PSE, 2: 95,9}, {0: Chinese, 1: PYF, 2: 46,4}, {0: Arabic, 1: QAT, 2: 40,7}, {0: Chinese, 1: REU, 2: 91,5}, {0: German, 1: ROM, 2: 90,7}, {0: Avarian, 1: RUS, 2: 86,6}, {0: French, 1: RWA, 2: 100}, {0: Arabic, 1: SAU, 2: 95}, {0: Arabic, 1: SDN, 2: 49,4}, {0: Diola, 1: SEN, 2: 48,1}, {0: Chinese, 1: SGP, 2: 77,1}, {0: English, 1: SHN, 2: 0}, {0: Norwegian, 1: SJM, 2: 0}, {0: Malenasian Languages, 1: SLB, 2: 85,6}, {0: Bullom-sherbro, 1: SLE, 2: 34,8}, {0: Nahua, 1: SLV, 2: 100}, {0: Italian, 1: SMR, 2: 100}, {0: Arabic, 1: SOM, 2: 98,3}, {0: French, 1: SPM, 2: 0}, {0: Crioulo, 1: STP, 2: 86,3}, {0: Hindi, 1: SUR, 2: 81}, {0: Czech and Moravian, 1: SVK, 2: 85,6}, {0: Hungarian, 1: SVN, 2: 87,9}, {0: Arabic, 1: SWE, 2: 89,5}, {0: Swazi, 1: SWZ, 2: 89,9}, {0: English, 1: SYC, 2: 91,3}, {0: Arabic, 1: SYR, 2: 90}, {0: English, 1: TCA, 2: 0}, {0: Arabic, 1: TCD, 2: 27,7}, {0: Ane, 1: TGO, 2: 23,2}, {0: Chinese, 1: THA, 2: 52,6}, {0: Russian, 1: TJK, 2: 62,2}, {0: English, 1: TKL, 2: 0}, {0: Kazakh, 1: TKM, 2: 76,7}, {0: Portuguese, 1: TMP, 2: 0}, {0: English, 1: TON, 2: 98,3}, {0: Creole English, 1: TTO, 2: 93,5}, {0: Arabic, 1: TUN, 2: 69,9}, {0: Arabic, 1: TUR, 2: 87,6}, {0: English, 1: TUV, 2: 92,5}, {0: Ami, 1: TWN, 2: 66,7}, {0: Chaga and Pare, 1: TZA, 2: 21,1}, {0: Acholi, 1: UGA, 2: 18,1}, {0: Belorussian, 1: UKR, 2: 64,7}, {0: English, 1: UMI, 2: 0}, {0: Spanish, 1: URY, 2: 95,7}, {0: Chinese, 1: USA, 2: 86,2}, {0: Karakalpak, 1: UZB, 2: 72,6}, {0: Italian, 1: VAT, 2: 0}, {0: Creole English, 1: VCT, 2: 99,1}, {0: Goajiro, 1: VEN, 2: 96,9}, {0: English, 1: VGB, 2: 0}, {0: English, 1: VIR, 2: 81,7}, {0: Chinese, 1: VNM, 2: 86,8}, {0: Bislama, 1: VUT, 2: 56,6}, {0: Futuna, 1: WLF, 2: 0}, {0: English, 1: WSM, 2: 52}, {0: Arabic, 1: YEM, 2: 99,6}, {0: Albaniana, 1: YUG, 2: 75,2}, {0: Afrikaans, 1: ZAF, 2: 22,7}, {0: Bemba, 1: ZMB, 2: 29,7}, {0: English, 1: ZWE, 2: 72,1}]\" }", "should_retest": true}, {"id": "56fded4f655c67230ff775ef151183526a9358fb65d1cacb0d53ba21c644a51d", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";", "question": "What papers have been written by Peter Mertens and Dina Barbian .", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "030561eb6ba80e7e68ecabe81407ef4ead73699cc61c404956a840f1787adc4e", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "question": "who published the most papers in syntactic parsing ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "b774fcd0fa5c5a9a29e210e0e1bbff988482b28a859bb0a3b33061f589b8372f", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";", "question": "How many citations does noah a smith has ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "99a5ec2c7d3e699f949d742091414b240f3125dc6e45d3126eb58b610ceaafd8", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t2.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mirella lapata\" AND t3.year  =  2016 GROUP BY t2.authorid;", "question": "Has mirella lapata written any papers in 2016 ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "3ec7a5870df5d210f1ac1974a4d4cdf24dc1f41f9a849968956b9eb7e75649da", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";", "question": "papers by sharon goldwater ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "65e49887ef1539fc341d970f84d37dbec2f92a6461130b7683cd909e70069e81", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;", "question": "most recent papers by oren etzioni", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "328da7e33c616785ff7143298830377a0c8787239d32aa68f30d9d6d1bce9ddb", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;", "question": "monte carlo simulation papers since 2011", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "7f466ab70e91368f7b211d21708abbd66055d0412d0ec2e4f2704f4a476a52e2", "dataset_name": "Spider", "sql": "SELECT COUNT ( t3.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ras bodik\";", "question": "does ras bodik publish a lot ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "18b9d39264159a00789d3894eee59e1734efec8de2eb726efac3b8117efc4b9a", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";", "question": "How many papers does David M. Blei have in AISTATS", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "8f0a1a1d5b559960578d437c39352b4f2aca905ca39af92ee3ae73f6b3a937b0", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;", "question": "which EMNLP 2010 papers have been cited the most ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "73754677c64f629bc42c61dbbb1f3d0ccb3002eb95b28aac9edaccf9acb1740b", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";", "question": "How many papers are related to deep learning ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "ec21765cb0c79197a37aa4c468e70f48b90b7fffeea3590a5a059e290b52fb90", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";", "question": "number of papers written by Christopher D. Manning", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "98ce2f257163ab56565d5f29a3bb0a26b6ae5425b0fa9cf027fe33e5505c26a7", "dataset_name": "Spider", "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";", "question": "topics used by Luke Zettlemoyer", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "a578ad1272ba109ba44bea03428bfee3c9090102d1be0a9551a35da076f8b042", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";", "question": "What conferences does Daniella Coelho submit to ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "a45f4df073a8dd1d36e1ea0c5310cbd415159cdb5a74c61b94a9ecc3f0ff6e7a", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;", "question": "How many papers are there ?", "linq": "context.Papers.Select(row => row.PaperId).Distinct().Count().Distinct();", "db_name": "scholar", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,73): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.24", "should_retest": true}, {"id": "b0ca8950fe7e5f947b3bf595e1b9a1b5ff4847b2c4677ec4008ea626fe45e3fd", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";", "question": "How many paper has Ed Desmond written about Semantic Parsing ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "95b6148c7ab75384dc708d051eb7af85119e0ba73f0f3d0b73e19252253d05be", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;", "question": "Where did li dong publish in 2016 ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "30d01dd9c3b97ebbf760d04baa538eb426eb466d8ae08372bcdcd5f00e9a0316", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";", "question": "what were some Parsing based papers in acl 2012 ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "85d864b69ebc012593e9aeed3f538b64a984ac0af92851e1e7de08ac7cdacb74", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";", "question": "top dependent types papers", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "f55f98ded1cc0ba6dd2bfa83267341aade3554541838803f754a342e75216acb", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";", "question": "papers with Question Answering in keyphrases", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "38239d6af01e53726be45eea6c439295b224fa6d9cb9abbc9975498eb49ea052", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year  ,  t2.keyphraseid;", "question": "keyphrases used by Luke S Zettlemoyer for each year", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "ee97ac3c0e68c1128fb689d443808e2a594ad7d22b39350a4d9753beef50e072", "dataset_name": "Spider", "sql": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;", "question": "recent papers written by sanjeev arora", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "e895d2037381e03cad57f2f261ed1b4ccb1e62493687b20c5c889ed3bf2e000b", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"balakrishnan prabhakaran\";", "question": "list papers published by balakrishnan prabhakaran", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "215878a3ad4da2ae1cd97483d9d7e6ade7ed9e9ccda9ff0b523590e5f5d3c084", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"zachary tatlock\";", "question": "citation count of zachary tatlock 's papers", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "647b064b361922cf7d36df9726db50874bf090f2f5ddcfa4a070bf504d54328f", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";", "question": "conference papers of subhasis chaudhuri", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "72edec34696deb522056e34456d968d083601129f6039f468d7c0e4a26ac9000", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";", "question": "how many parsing papers were published at ACL 2014 ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "370af81824dec08585028fd3bee8e1877622999ba83e18fcf04b7726815bb00a", "dataset_name": "Spider", "sql": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";", "question": "Does brian curless do convolution ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "ce4b1edc0141e178a55cd94444d1f36fe47f78e5f1dc11e59b88edf36384b7cb", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;", "question": "what papers are published by Liwen Xiong in 2015", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "42aa26feb93656bd6e5ad30a84f83ca1d7a11ffab446b78eeff9e6ffc9583cdb", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";", "question": "TAIL papers used in NIPS", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "cf0632a2dbd9facab7b1512a7f2a33bf21d2702fdc9c01d1f48bd043a522c59a", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != \"Mark Steedman\" AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Mark Steedman\" );", "question": "How many co-authors has Mark Steedman had ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "784958dc114716e67f1fe636f2294682b037ca7961a7843d840c5b1b975fdfdd", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;", "question": "What are keyphrases by Christof Dallermassl in 2000 ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "0bb26224ede1f4ee6f7b36300169c09ab65755dae562dae64f31519169573564", "dataset_name": "Spider", "sql": "SELECT DISTINCT t1.authorname  ,  COUNT ( t3.citingpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.authorname ORDER BY COUNT ( t3.citingpaperid ) DESC;", "question": "what author is most cited ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "5b75f71da75fc364025a74cae8a2c598dd4ed03bf3f1a24ec08cb179344fb8a4", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;", "question": "Journal Papers by mohammad rastegari", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "5818ddd45bce5b06f359b60bb9efe8542b92e5e07d54e939fd42852b418b8d4b", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;", "question": "What was the best paper at TACL 2014 ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "4196244b6e83be957512ecb100e7d44eda830474ce0b15701f94fd4e1263e54d", "dataset_name": "Spider", "sql": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";", "question": "List of authors in acl 2016", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "610c166611b005a1ac2011c8d1f00933faf2d14b3e2c2c6186b30c6d4507c416", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Multiuser Receiver in the Decision Feedback\" AND t3.year  =  2016 GROUP BY t3.paperid HAVING COUNT ( DISTINCT t1.keyphrasename )  >  1;", "question": "How many papers were written on Multiuser Receiver in the Decision Feedback this year ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "591c46659368fc8284c758de55607ff4c512cf47c9ef465fe29a6da322ae873f", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";", "question": "How many papers run experiments on ImageNet ?", "linq": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => EF.Functions.Like(row.t1.DatasetName, \"ImageNet\")).Select(row => row.t3.PaperId).Distinct().Count().Distinct();", "db_name": "scholar", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,356): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.23", "should_retest": true}, {"id": "dcfbb5b3511a256f0b9923dd92dd48b446e816ad96c3a236fd71ec1f71dac782", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";", "question": "how many papers has Mirella Lapata cited ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "80f20768e8597e585ebd032f4a4ba26752f0c06b19ca2174e8d530c4be52a7f0", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.year FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t4.venuename  =  \"VLDB\" ORDER BY t3.year;", "question": "When does Michael Stonebraker publish the first VLDB paper ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "4f6675ab64acaa4e3b71ea7c9123cb8ba4d3ff53cbaf952854b1853a34303424", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";", "question": "datasets used for evaluating semantic parsing", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "8f1441d96ead50299a003cddbe54ad6197e2642f8150bd33876d8243fbb604c2", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";", "question": "Where does Peter Mertens publish ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "b26f692cef259082e1ccdcdb6eff79f8393c5801113540fb478b4373ecee48bc", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";", "question": "how many papers appeared at nature communications last year", "linq": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Year == 2015 && row.t2.VenueName == \"nature communications\").Select(row => row.t1.PaperId).Count().Distinct();", "db_name": "scholar", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,231): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.25", "should_retest": true}, {"id": "c10bad754eee77b6c2ba27696e81a49f010c2685efc7f20537226e17b1fd7327", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;", "question": "what year was the first deep learning paper published ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "96c40d0e99d5eee0c388757da1ea22e85e33eebb3ea874d23085cc5ecdfa52e4", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN paper AS t2 ON t2.paperid  =  t5.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"li dong\" AND t3.keyphrasename  =  \"semantic parsing\" AND t2.year  =  2016 AND t6.venuename  =  \"acl\";", "question": "the papers on semantic parsing by li dong at acl in 2016", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "ff2194fb1d932b4ae59b1c28e93b01043432e4640b56446948af70c0a8b62779", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;", "question": "how many papers on convolutional neural networks have been published in the past year ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "13c431411e92f017b1c7dd35836155dc96ae2fa747322349a5f6bc63b1870a4d", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;", "question": "What papers were written on question answering in 2016 ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "f7769a9c1d581532f0b7929aaa2d2d5c2f7635cb4af84f0f241251a0ef07ca97", "dataset_name": "Spider", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";", "question": "coauthors of Noah A Smith", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "ed702146adc7bb656a62b898acc6b696dd501e26154ac285a62bc430b4de6c08", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";", "question": "What datasets have jitendra malik used", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "be2ffae8104cb97954d75bc1b49de20117cdfa23938e65eaef1c62426e25a3ff", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;", "question": "newest deep learning papers", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "a550d20f75f3d0385d84fb1e788e29a32fad53d0a6d6b907840926048772aac0", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Pedro Domingos\" GROUP BY t3.year;", "question": "In what years did Pedro Domingos publish a paper ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "cb339a65ccd94742225c733443942c1de9ebc54245d713e73fbc1885adf459af", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" ORDER BY t3.year;", "question": "jamie callan 's publications by year", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "83cc717698e3cc0ab7661597fc21d936353644232ecc617da2f4155074d5cbd4", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;", "question": "how many papers jamie callan published each year ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "3b3aa68ce8748b14c829ad52707a1b8d4541226607dc06891dea6cdd9db55dce", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";", "question": "what papers does oren etzioni cite", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "d7bc8f0aade005645021689f6f93e63a07782f8be01c93afa8b7d0ef702e0f0d", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";", "question": "citations for Daniel Jurafsky", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "8901565bee00d735ad19f349dad322f721746264d053a3d9e45a7669ee05aecd", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"instance segmentation\" AND t3.journalid  >=  0;", "question": "journal papers for instance segmentation", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "ce7a08ee1bf67a66ead9b36a887798a7a0b193f45cc4ae5e5a2ca63c110f1f7e", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "question": "who published the most in semantic parsing after 2005 ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "461d3a303b3881dd6d054203287f4bd4cc5705f077724e45022c0d74299035d0", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t3 ON t2.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN cite AS t5 ON t4.paperid  =  t5.citedpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Dan Makumbi\" AND t3.keyphrasename  =  \"Genetic Identity\";", "question": "How many citations does Dan Makumbi 's Genetic Identity paper have ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "06f9302c464162a5e79d75bfe6ab0181e9a8cad2a852caad0efaa8fcbb81dd70", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;", "question": "character recognition papers before 2010", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "d7db1b46e45d020cf08ad02f1f928572d591689a5045690beb1d859ae5768a46", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t2.keyphraseid )  ,  t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\" GROUP BY t2.keyphraseid ORDER BY COUNT ( t2.keyphraseid ) DESC;", "question": "what topics does oren etzioni write about most ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "96ef9b1d483939ba0f20151651877c174d799f6bb7792a71dc921fc300279ab7", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid  =  t1.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t2.datasetname  =  \"ImageNet\" AND t5.keyphrasename  =  \"deep learning\";", "question": "How many papers related to deep learning cited the dataset ImageNet ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "4b87a7249f0718ea60c43299eb0de271b864aeab8e3b98ef1c8bfdb3ac407678", "dataset_name": "Spider", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "question": "Most cited papers on parsing", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "677c6e40e143e5651107ab392deb8524916c5974f3ca3ce5972569726937a3e7", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.year  ,  t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Michael Armstrong\" AND t3.year LIKE \"199\";", "question": "What paper did Michael Armstrong wrote in the 90s ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "f9545f6969175d8dd4ff6474daf6007eb971814ea111b9914f1af9e5185b6329", "dataset_name": "Spider", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;", "question": "what is ohad shamir 's most cited paper ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "c37871899881c1ba12a7b45ce7fe5600fa384d5d2c7a9f01b730a116f08bc230", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;", "question": "How many papers did michael i. jordan publish in 2016", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "05c4862a816af268ed5106a121e1fd7e3af5907d4373eeb1f6278f81f9706d22", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;", "question": "number of ACL papers by author", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "2fe6d18a0ef2fb9685487a33b3a93bd0f4efde17a32b30acc1e6c92bcbd3eee7", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;", "question": "Who published the most papers in 2007 at CVPR ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "26a2cfe1167d1bf043c28be9a1638c09b68ed070be6a87660d6e451b41b0081b", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";", "question": "How many papers in ACL 2015 ?", "linq": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Year == 2015 && row.t2.VenueName == \"ACL\").Select(row => row.t1.PaperId).Distinct().Count().Distinct();", "db_name": "scholar", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,224): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.20", "should_retest": true}, {"id": "f3c92f3701fd285f2b6b7df7476635d5006ebd79fddbb866e23fd622a7dbde3b", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";", "question": "Which paper did Richard Ladner present at chi ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "fd9258e8106ee2ad3331ab796dc3e1b21ee7232e600b5a55bdc104625cffe3e3", "dataset_name": "Spider", "sql": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;", "question": "Fetch me the most cited publications for Artificial Intelligence", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "b40ac6afbfa180ea44724ef96bc9487530c3d3e1da584e18e9a3366a4df4e571", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2014 AND t4.venuename  =  \"ACL\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;", "question": "topics at ACL 2014", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "222a6916efe6a2ad5710735473097b686356a93a5410844b0159a8d22f4a3724", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;", "question": "topics popular at NIPS 2015", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "f54caf16c9650a987b9b282ad6659acb6843dd55d6b7aad0f533e76ebc7fbc84", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep reinforcement learning\" AND t4.venuename  =  \"nips\";", "question": "How many papers related to deep reinforcement learning in nips ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "7314b1fd7306e0469fdccc10889598e486b400cead20283ff14b59ef2c35270a", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;", "question": "who is the most cited author at CVPR ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "30066c43459cb0a7b905d0275582bf70fb2da7c868e3580746858675e4d4a28b", "dataset_name": "Spider", "sql": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";", "question": "syntactic parsing papers not written by chris dyer", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "99afc7c85f9ebb8a54e3d929ecc83b5391aa3bfda5ea2e06dd35217073399179", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;", "question": "When was benjamin mako hill 's first paper written ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "6411f72f2ec7ee1d353f62544fa29ffbc43fad0e972b4432fa18d9d663de4336", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ameet soni\" GROUP BY t3.year ORDER BY t3.year;", "question": "When did ameet soni publish ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "82bae6412dbd7e4ad8dd7cad1243dfd1bc2e6e94159dcf46381d905904abab98", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;", "question": "Who cites Daniel A Reed most ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "ed819e66e551dced98bce1a57f537a7d776fdbf047fdf6d784a70e887ca105d4", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";", "question": "how many papers are in sigir ?", "linq": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.VenueName == \"sigir\").Select(row => row.t1.PaperId).Count().Distinct();", "db_name": "scholar", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,192): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.23", "should_retest": true}, {"id": "6b5163951be1ce3fab24e70a7f45740ddaa99a6a5165b46ebdc7890d46d01bb5", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;", "question": "what papers have fewer than 5 citations by ACL papers", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "20b0bfe41ef41cd45685fc1048cfe9ed9f1df8b76ae57c96496a3f9f4b6a62be", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mirella Lapata\" ORDER BY t3.year DESC LIMIT 5;", "question": "What are the 5 most recent papers of Mirella Lapata ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "a5ccf329a6c905bd935f739c7418de5161b7817449878e7e60cab507d77a2c18", "dataset_name": "Spider", "sql": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename  =  \"Machine Learning\" GROUP BY t1.authorname ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;", "question": "Who writes a lot of papers in Machine Learning ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "8f688dd24803e158bfd1f93e9f29e76482f56b7115637967559955ba17342c2d", "dataset_name": "Spider", "sql": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";", "question": "who publishes papers about sensor fusion", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "c89b6a255ea8b7019001ab6a5ade053d7d837b0fcf354698540f76c714a5f0a7", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";", "question": "how many of dan klein 's papers cite michael i. jordan", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "b4ddbf65ae21dcc57194e0b36274834bcb5896a1a962063c12ca4152a3927bd2", "dataset_name": "Spider", "sql": "SELECT DISTINCT t5.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Ameet Soni\" AND t1.authorname  =  \"Ras Bodik\";", "question": "who else was on the paper with Ameet Soni and Ras Bodik ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "ca9ab1becf7188f6a42028e968e84450d86181abb19241bd1f1f35719eca1db6", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;", "question": "In what scholarly journals does Takashi Matsumoto publish ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "2520c2b8fcbec37c9c106b763079a6cb399d600cccf41d8ebc26a901e9bbdc9a", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;", "question": "Who wrote on the topic of Bacterial Wilt in 2016 ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "7d2776ff9b518b74d571af13b3b7b1b305c54b345c9099cc59d046ecd5aa9c5f", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year;", "question": "When did Luke S Zettlemoyer publish ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "e48a3aae7b0d24145128b0eb127ceac4fa314e115593697cfedcb015cfc7594c", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.citingpaperid )  ,  t1.keyphrasename FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.keyphrasename ORDER BY COUNT ( t3.citingpaperid ) DESC;", "question": "what keyphrases get most citations ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "039576030b0ab55c6a996a32d211febf56366d1b448a3d0b7541e35974c93196", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Temporal Data\" GROUP BY t3.journalid;", "question": "List the journals related to Temporal Data", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "b33b91a84d67a778da08cc2b6f3f95f0b966009f9ffa387087f7738791aa4279", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";", "question": "papers about Parsing that used Jeopardy! Questions and were published at ACL 2014", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "baffebb090853d03c91e89f2d017690a1f64992dd30493e331e56296f24872c5", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";", "question": "Which journals did linda shapiro submit papers to ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "c7cd066b9036c198c0dca249782c62a8108c8427a81b5527dfa0a94570e3d76a", "dataset_name": "Spider", "sql": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";", "question": "who has papers at NIPS ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "b2d0bc22538cc552b42d782218cfef52330821631de8afe6b81a4ff01c7dd50e", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t4.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t4.venueid ORDER BY COUNT ( t3.paperid ) DESC;", "question": "which venue publishes the most papers about deep learning", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "e29ed85d2ec3baa6edaf5c9a59e38d7790f92911f404f752a5a01c73a21eb065", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;", "question": "How many articles were published in the Cell journal in 2015 ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "99d0576fd2d2f88333bd4ebdd877285c91b0d5f287f7c08714b87a010c763fbc", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\";", "question": "What are all the publication titles by Donald E Knuth ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "2d1ea10414dcefd3bc2256940174cb59734963006a01363c70edd24dc7246947", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";", "question": "papers of ali farhadi in eccv 2016", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "76c6217a8e2d6932a4f4f48fa5cbdce30625418511066b92133f64ea5373a5d1", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paperkeyphrase AS t2 ON t2.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid WHERE t1.datasetname  =  \"YAGO\" AND t4.keyphrasename  =  \"Semantic Data\";", "question": "What are some papers dealing with Semantic Data in YAGO ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "0a806ca2dd62d70f043fb68d0f024b5d3e46c1106073ecefdeb82e3dcf5adbe8", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;", "question": "who published the most at chi", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "21478923feeb39cc913188cb5baa8fcb5518211ea68796e227bbbe8500f36a94", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;", "question": "What year did Ye Cao publish the most papers", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "05e3df4d58b775c763ec040b4bf7a9a699e9e0a47e3208e1d4d1635d6858bc1f", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;", "question": "when was the first deep learning paper published ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "84736e90bcf139aec1966928b0d94a54177d4f98a81c3303d2a59a8722596bdf", "dataset_name": "Spider", "sql": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";", "question": "papers typically cited by parsing papers", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "cc851db169e4a5784609cdf6bdaf50586cb42119e72d7cecea6a6997f78886d5", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";", "question": "What was the conference name that approved Trophic Cascade ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "cc2b7d37e090ce8372fc29da13079f2c0b5218e38b47a627e406e4f34edbd43c", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  >=  2011;", "question": "How many papers were written on question answering in 2011 through 2016 ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "047bf6ea39182c48c31743e5aaf84460b5b0d253fab02e6bbe5dc8105c41135e", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"NLP\" GROUP BY t3.venueid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;", "question": "What are the best NLP conferences ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "ae5e2959ca4461b88bc3d72a30f9fef1a822caa8e61c9ca1ddd024d845b9596b", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.paperid  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\";", "question": "ACL papers by author", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "dc639f9b5b1540cf9e1eb5984a499125f840085797597137861251fa1efd7b16", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >  10;", "question": "papers with more than 10 citations", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "3da6e262b54bad774b335eaf340fbdaae5ee766c2d598a579cc71e348f765a7f", "dataset_name": "Spider", "sql": "SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;", "question": "who wrote papers in 2015", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "08794d4c689a52827fd0ebb7e0a75637d9d349aaa7963e05b81307ee394240bf", "dataset_name": "Spider", "sql": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;", "question": "main topics of work by Brian DeRenzi", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "e7817e29283206814d1eea843bc9e4f1621d1641c0c27b927e945a6c4dff5250", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid GROUP BY t1.authorid HAVING COUNT ( t2.paperid )  >=  5;", "question": "authors with at least 5 papers", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "1b87c87e4f92cf624972bb5eaa0295ef7cb3d1e2c98af539c92251d373d067f6", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";", "question": "When does Michael Stonebraker publish the GIS Database paper ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "ccc297c6ef452346279f54516f2ceb6e54afd6294444b827cbc4b09dc6b1b7d7", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\" AND t3.year  =  2010 GROUP BY t3.journalid;", "question": "In 2010 what journal published an article about Trophic Cascade ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "c1dd299c5b81dedcdebde5b43d7c9c1329c78510a8d4ee8f0fde3284d6077a65", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2016 AND t2.venuename  =  \"CVPR\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;", "question": "What is the most popular paper this year in CVPR ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "d078006ef4efa6a26a65cd4c0dfc5ca9facae9e0ed1c25d4b4336325d1aa8a11", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t4.citedpaperid )  ,  t3.year FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"luke zettlemoyer\" GROUP BY t3.year;", "question": "How many citations does luke zettlemoyer have per year", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "7135acc234997299684231d94fcfcf7787c9ca7038136106e43fcc1ec7e5ec75", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t2 ON t2.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t2.paperid;", "question": "authors working on ImageNet", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "8f2ddfb93f513dcc2797e366a95f222e99c66a16347c389777781772ca109dd9", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname  =  \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";", "question": "Eric C. Kerrigan 's Liquid Automatica paper", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "8f6448c95d44375c05667ed239d67932c92abc85fafd5b722189ae96b56f1ca5", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.venueid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"sergey levine\" GROUP BY t3.venueid  ,  t3.year ORDER BY t3.year DESC;", "question": "Where did sergey levine publish his last paper ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "0a1b9c9a2626f11d1a493600e4d0250ae344b1ec1d3e9e3a8052f17a90eaaad6", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";", "question": "keyphrases used by dan klein in his emnlp papers", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "afaf793f8da4afb423cafeb0086c2d104c7d31f66e2bba63d83dfec7055f406e", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"Neutralizing Antibody\" AND t4.year  =  2012 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;", "question": "Who are the prominent researchers in Neutralizing Antibody in 2012 ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "ea0bb136fd1cf3b8f0b5b46921b56c7909e438c9fc92c8e9267cbec8aa930bb1", "dataset_name": "Spider", "sql": "SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t5 ON t2.paperid  =  t5.citingpaperid JOIN paper AS t3 ON t3.paperid  =  t5.citedpaperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Euclidean Distance\" AND t4.venuename  =  \"NIPS\";", "question": "Euclidean Distance papers citing NIPS papers", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "8c4d1a149bafcf2cc9ec9a3107153867c474c60af13a175422e3a73f440e08b0", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t2.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t3.paperid ORDER BY COUNT ( t4.paperid ) DESC;", "question": "top authors working on ImageNet ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "2e642e9cc7d3ad00a5fcd1cf028bce2a7ad3d48a3766e4769e0b0ae1a24b92b4", "dataset_name": "Spider", "sql": "SELECT DISTINCT ( t1.paperid )  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2012 AND t2.venuename  =  \"ACL\" GROUP BY t1.paperid HAVING COUNT ( t3.citingpaperid )  >  7;", "question": "how many ACL 2012 papers have more than 7 citations ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "d2c7453a9f165ca1bfe3defae91d47fa5b2ad848ba8d3b9a66f2511aa8506612", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.keyphraseid  ,  t2.paperid FROM paper AS t2 JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN paperkeyphrase AS t1 ON t2.paperid  =  t1.paperid JOIN venue AS t3 ON t3.venueid  =  t2.venueid WHERE t2.year  =  2012 AND t3.venuename  =  \"EMNLP-CoNLL\" GROUP BY t2.paperid  ,  t1.keyphraseid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;", "question": "What was the topic of best paper in 2012 EMNLP-CoNLL ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "451abd1cb3e0c99d16e78b99e9c5c8c6a76bc91f5eae93bf7b82480b225572a2", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname != \"Noah Smith\" AND t3.year  >  2009 AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Noah Smith\" );", "question": "How many papers has Noah Smith co-authored since 2009 ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "6ec37c9e63ac02e4177ac9b2d6166639e17ada1022b56e8c4afe1b98245b7e6f", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  >  2;", "question": "Number of ACL papers with more than 2 citations", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "01e8f493a5431bf69a2ff49c77fc2cf4775ab905091f3834c820c9515983a3a1", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.title FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname LIKE \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";", "question": "What is the name of Eric C. Kerrigan 's Liquid Automatica paper ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "c423617477a4106e15e82e72a38c1784523bd5b27137e835e5b3effebd928b76", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t4.venuename  =  \"cvpr\";", "question": "How many papers used ImageNet datasets in cvpr ?", "linq": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Venues, joined => joined.t3.VenueId, t4 => t4.VenueId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.DatasetName == \"ImageNet\" && row.t4.VenueName == \"cvpr\").Select(row => row.t3.PaperId).Count().Distinct();", "db_name": "scholar", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,487): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.23", "should_retest": true}, {"id": "7489a2c2973f5461863a2317dca919005e05565a0f105d8aff285aaa743d2257", "dataset_name": "Spider", "sql": "SELECT DISTINCT MAX ( t3.year ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mary Crainie\";", "question": "When was the last time Mary Crainie published a paper ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "1520e1980d6c216ec288d37b04a294b44cb443bafa7f58d67eb9790b0d9134f3", "dataset_name": "Spider", "sql": "SELECT DISTINCT t1.authorid FROM paperkeyphrase AS t6 JOIN keyphrase AS t3 ON t6.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t6.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid JOIN author AS t2 ON t4.authorid  =  t2.authorid WHERE t2.authorname  =  \"Philipp Koehn\" AND t3.keyphrasename  =  \"Machine Translation Output\";", "question": "I want the co-authors of papers on Machine Translation Output with Philipp Koehn", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "dc3149b6678b38c8bd50709cb95f056055dca43bee044d31ecb992298402c604", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Samuel Madden\" AND t4.venuename != \"PVLDB\";", "question": "How many papers does Samuel Madden publish outside of PVLDB area ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "415f1f3a5d8049b40334d22b367b1757c303f827f1e2ad51c67bdf7e7714c964", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.journalid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\" GROUP BY t3.journalid  ,  t3.year ORDER BY t3.year DESC;", "question": "which journal did Donald E Knuth publish his last paper ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "2f6d07e8a31063db45c433c6443e546f368b9cb4938ef849fec33108acdb92b0", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t2.paperid ) FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2010 AND t3.venuename  =  \"sigcse\";", "question": "How many authors published at sigcse in 2010 ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "476320a232687b071f68c15325ffd8c08b8125ba724b8778db25969a0c072e54", "dataset_name": "Spider", "sql": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"uist\";", "question": "what keywords are used by papers at uist", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "da2874aa07309834f7ac90092b89e59740e6753548f85c1c1a945f355aa48ba1", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Su-In Lee\" AND t3.year  <  2012;", "question": "Give me the papers written by Su-In Lee before 2012 .", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "043e1d047726404151c6d4edea525d66c43f27479d866e360e44e5fbcbaeebc2", "dataset_name": "Spider", "sql": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"semantic parsing\" GROUP BY t3.year ORDER BY t3.year DESC;", "question": "papers in semantic parsing for each year", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "1839e78ef14ad01397b05736534ebfd395326d71a2031db3a8b015a5f15bcc32", "dataset_name": "Spider", "sql": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;", "question": "papers cited by at least 5 papers", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "fb3b596f6643f46b95166c4374c50403511031415ee5741d5dfad2e92a3f691b", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigcomm\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;", "question": "What is the most cited paper at sigcomm ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "adbc3992f0bb00a21bd833c5ca0385c6ea24c4202b1bb39f8766c2d17b963bc9", "dataset_name": "Spider", "sql": "SELECT DISTINCT t3.title FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN paper AS t3 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Ranjit Jhala\" AND t5.keyphrasename  =  \"Liquid Haskell\";", "question": "What is the name of Ranjit Jhala 's Liquid Haskell paper ?", "linq": "", "db_name": "scholar", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "b53106ac896a50bb7995480212e45e93a5a41865bd3dc50376a1eb67089cd8fa", "dataset_name": "Spider", "sql": "SELECT avg(transcript_date) FROM Transcripts", "question": "On average, when were the transcripts printed?", "linq": "context.Transcripts.Select(row => (double) row.TranscriptDate).Average();", "db_name": "student_transcripts_tracking", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,46): error CS0030: Cannot convert type 'System.DateTime?' to 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.23", "should_retest": true}, {"id": "17fbc21d4f885973d29b5c50d9b944b0b94a9367638e75ab4aee9a24c97463f6", "dataset_name": "Spider", "sql": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35", "question": "Show the nations that have both hosts older than 45 and hosts younger than 35.", "linq": "context.Hosts.Where(row => row.Age > \"45\").Select(row => row.Nationality).Intersect(context.Hosts.Where(row => row.Age < \"35\").Select(row => row.Nationality)).ToList();", "db_name": "party_host", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,123): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.57", "should_retest": true}, {"id": "1eb0404b892731f06d087ccdc2988b599b528c2ac40c5e583a236309b0e91515", "dataset_name": "Spider", "sql": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50", "question": "Show the locations of parties with hosts older than 50.", "linq": "context.PartyHosts.Join(context.Hosts, T1 => T1.HostId, T2 => T2.HostId, (T1, T2) => new { T1, T2 }).Join(context.Parties, joined => joined.T1.PartyId, T3 => T3.PartyId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Age > \"50\").Select(row => new { row.T3.Location }).ToList();", "db_name": "party_host", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,245): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.33", "should_retest": true}, {"id": "88beea959bcd5a6a2a7d4d72e19544b480632c9906e23336bbb8020ab0f84256", "dataset_name": "Spider", "sql": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "question": "What is the name and date of the most recent race?", "linq": "context.Races.OrderByDescending(row => row.Date).Select(row => new { row.Name, row.Date }).Take(1).ToList();", "db_name": "formula_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: Abu Dhabi Grand Prix, 1: 2018-11-25}]\", linq_results: \"[{0: Abu Dhabi Grand Prix, 1: 25.11.2018}]\" }", "should_retest": true}, {"id": "b6db0e044add7aeaa46c5af446cf46f8bd5209ad28a03731592f9eea482a59e2", "dataset_name": "Spider", "sql": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "question": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?", "linq": "context.Drivers.Join(context.LapTimes, T1 => T1.DriverId, T2 => T2.DriverId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Position == \"1\").GroupBy(row => new { row.T1.DriverId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.DriverId, group.First().T1.Forename, group.First().T1.Surname }).ToList();", "db_name": "formula_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,130): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.31", "should_retest": true}, {"id": "44fbeaf4adf79cfbbde43de76fadf5028dc4543fa0e70e80a3b6b72cc4242561", "dataset_name": "Spider", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)", "question": "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.", "linq": "context.PitStops.Where(row => row.Duration < context.PitStops.Where(row => row.RaceId == 841).Select(row => row.Duration).Max()).Select(row => new { row.DriverId, row.Stop }).Distinct().ToList();", "db_name": "formula_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,42): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.50", "should_retest": true}, {"id": "093f541b9da9ae5fcfe0c5a8d1d22eece96c2d12aefed0f5d80ce9d30a651c54", "dataset_name": "Spider", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "question": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?", "linq": "context.PitStops.Where(row => row.Duration > context.PitStops.Where(row => row.RaceId == 841).Select(row => row.Duration).Min()).Select(row => new { row.DriverId, row.Stop }).Distinct().ToList();", "db_name": "formula_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,42): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.45", "should_retest": true}, {"id": "9dccd3f49c7af70e0199a1240f740a24f8cfc804f397aaf8ed765a0311b447cd", "dataset_name": "Spider", "sql": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"", "question": "What are the names of races held after 12:00:00 or before 09:00:00?", "linq": "context.Races.Where(row => row.Time > \"12:00:00\" || row.Time < \"09:00:00\").Select(row => new { row.Name }).ToList();", "db_name": "formula_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,64): error CS0019: Operator '<' cannot be applied to operands of type 'TimeSpan?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.36", "should_retest": true}, {"id": "e06bbf7b1316cb7d63b887e9928f9497b65dd4031836e055decc3f11f7260d4f", "dataset_name": "Spider", "sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "linq": "context.Races.Join(context.Results, T1 => T1.RaceId, T2 => T2.RaceId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2008 && row.T1.Name == \"Monaco Grand Prix\").Select(row => (double) row.T2.FastestLapSpeed).Max();", "db_name": "formula_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 156.789}]\", linq_results: \"[{0: 156,789}]\" }", "should_retest": true}, {"id": "0482e7cda041ddee9039dabdabdaf3096b23847e5ca1ddd5d1963fdf138e8bcf", "dataset_name": "Spider", "sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "question": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "linq": "context.Races.Join(context.Results, T1 => T1.RaceId, T2 => T2.RaceId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year > 2014).GroupBy(row => new { row.T1.Name }).OrderBy(group => group.First().T1.Year).Select(group => new { MaxFastestLapSpeed = group.Select(row => (double) row.T2.FastestLapSpeed).Max(), group.Key.Name, group.OrderByDescending(row => row.T2.FastestLapSpeed).First().T1.Year }).ToList();", "db_name": "formula_1", "status": "CodeFailed", "error": "Unhandled exception. System.NotSupportedException: SQLite does not support expressions of type 'decimal' in ORDER BY clauses. Convert the values to a supported type, or use LINQ to Objects to order the results on the client side.", "should_retest": true}, {"id": "4b896017146542bfcda392d01a911532c126b244be151c259ead4b74a0a179f5", "dataset_name": "Spider", "sql": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3", "question": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.", "linq": "context.Films.Where(row => row.RentalRate == 0.99).Select(row => new { row.Title, row.FilmId }).Intersect(context.Films.Join(context.Inventories, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FilmId }).Where(group => group.Count() < 3).Select(group => new { group.First().T1.Title, group.Key.FilmId })).ToList();", "db_name": "sakila_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,39): error CS0019: Operator '==' cannot be applied to operands of type 'decimal' and 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.42", "should_retest": true}, {"id": "c8e6fadd9bb6c24b81a63ccd6742adaffc2273fc456d36f0c7f15a092cd994c9", "dataset_name": "Spider", "sql": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'", "question": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.", "linq": "context.Payments.Where(row => row.Amount > 10).Select(row => row.PaymentDate).Union(context.Payments.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Elsa\").Select(row => row.T1.PaymentDate)).ToList();", "db_name": "sakila_1", "status": "CodeFailed", "error": "ResultsDetails { sql_results: \"[{0: 2005-05-25 18:18:19}, {0: 2005-05-25 21:58:58}, {0: 2005-05-26 02:26:23}, {0: 2005-05-29 01:01:26}, {0: 2005-05-30 02:45:16}, {0: 2005-06-15 09:46:33}, {0: 2005-06-15 18:30:46}, {0: 2005-06-16 14:52:02}, {0: 2005-06-17 04:05:12}, {0: 2005-06-17 18:09:04}, {0: 2005-06-17 23:51:21}, {0: 2005-06-18 08:33:23}, {0: 2005-06-19 10:50:02}, {0: 2005-06-19 18:40:29}, {0: 2005-06-20 06:53:47}, {0: 2005-06-20 07:39:33}, {0: 2005-06-20 08:15:27}, {0: 2005-06-21 01:04:35}, {0: 2005-06-21 05:18:27}, {0: 2005-06-21 21:10:39}, {0: 2005-07-06 01:03:29}, {0: 2005-07-06 10:26:56}, {0: 2005-07-06 16:01:16}, {0: 2005-07-06 22:05:47}, {0: 2005-07-06 22:58:31}, {0: 2005-07-07 18:01:22}, {0: 2005-07-07 20:45:51}, {0: 2005-07-08 10:11:45}, {0: 2005-07-08 11:59:19}, {0: 2005-07-08 23:27:16}, {0: 2005-07-09 05:59:47}, {0: 2005-07-09 15:36:17}, {0: 2005-07-09 21:55:19}, {0: 2005-07-10 03:54:38}, {0: 2005-07-10 10:09:17}, {0: 2005-07-10 15:02:17}, {0: 2005-07-10 18:54:05}, {0: 2005-07-12 16:37:55}, {0: 2005-07-26 22:56:00}, {0: 2005-07-27 01:03:06}, {0: 2005-07-27 19:01:03}, {0: 2005-07-27 20:23:12}, {0: 2005-07-27 21:14:28}, {0: 2005-07-28 10:21:52}, {0: 2005-07-28 11:25:39}, {0: 2005-07-28 15:36:48}, {0: 2005-07-29 09:20:16}, {0: 2005-07-29 11:15:36}, {0: 2005-07-29 11:19:59}, {0: 2005-07-29 12:32:20}, {0: 2005-07-29 21:46:21}, {0: 2005-07-29 22:37:41}, {0: 2005-07-30 00:36:31}, {0: 2005-07-30 05:21:32}, {0: 2005-07-30 11:58:50}, {0: 2005-07-30 13:47:43}, {0: 2005-07-30 17:44:24}, {0: 2005-07-30 18:03:13}, {0: 2005-07-30 22:20:29}, {0: 2005-07-31 05:40:35}, {0: 2005-07-31 07:09:55}, {0: 2005-07-31 08:05:31}, {0: 2005-07-31 10:26:19}, {0: 2005-07-31 11:51:46}, {0: 2005-07-31 12:14:19}, {0: 2005-07-31 21:29:28}, {0: 2005-07-31 23:29:51}, {0: 2005-08-01 05:53:49}, {0: 2005-08-01 06:50:26}, {0: 2005-08-01 14:25:40}, {0: 2005-08-01 20:12:33}, {0: 2005-08-01 20:59:58}, {0: 2005-08-01 21:35:01}, {0: 2005-08-02 03:16:31}, {0: 2005-08-02 07:38:44}, {0: 2005-08-02 09:19:22}, {0: 2005-08-02 11:16:19}, {0: 2005-08-02 13:45:05}, {0: 2005-08-02 14:05:42}, {0: 2005-08-02 17:42:49}, {0: 2005-08-02 22:18:13}, {0: 2005-08-16 23:10:34}, {0: 2005-08-17 04:25:47}, {0: 2005-08-17 18:27:22}, {0: 2005-08-18 09:13:42}, {0: 2005-08-18 11:58:48}, {0: 2005-08-18 19:11:45}, {0: 2005-08-18 22:15:18}, {0: 2005-08-18 22:37:39}, {0: 2005-08-19 09:31:48}, {0: 2005-08-19 11:27:32}, {0: 2005-08-19 17:26:55}, {0: 2005-08-19 20:28:48}, {0: 2005-08-20 07:54:54}, {0: 2005-08-20 18:16:26}, {0: 2005-08-20 21:13:58}, {0: 2005-08-20 21:31:52}, {0: 2005-08-21 06:26:48}, {0: 2005-08-21 08:18:18}, {0: 2005-08-21 13:41:14}, {0: 2005-08-21 21:00:03}, {0: 2005-08-21 23:28:58}, {0: 2005-08-21 23:34:00}, {0: 2005-08-22 08:24:32}, {0: 2005-08-22 11:01:15}, {0: 2005-08-22 16:24:42}, {0: 2005-08-22 17:20:17}, {0: 2005-08-22 19:28:02}, {0: 2005-08-22 23:48:56}, {0: 2005-08-23 00:05:57}, {0: 2005-08-23 05:17:23}, {0: 2005-08-23 06:18:43}, {0: 2005-08-23 14:47:26}, {0: 2005-08-23 22:19:33}]\", linq_results: \"[{0: 2005-05-25 00:00:00, 1: 25, 2: Wednesday, 3: 145, 4: 18, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 18, 10: 5, 11: 2024-10-25 08:47:28, 12: 19, 13: 632526418990000000, 14: 18:18:19, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-05-25 00:00:00, 1: 25, 2: Wednesday, 3: 145, 4: 21, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 58, 10: 5, 11: 2024-10-25 08:47:28, 12: 58, 13: 632526551380000000, 14: 21:58:58, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-05-26 00:00:00, 1: 26, 2: Thursday, 3: 146, 4: 2, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 26, 10: 5, 11: 2024-10-25 08:47:28, 12: 23, 13: 632526711830000000, 14: 02:26:23, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-05-29 00:00:00, 1: 29, 2: Sunday, 3: 149, 4: 1, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 1, 10: 5, 11: 2024-10-25 08:47:28, 12: 26, 13: 632529252860000000, 14: 01:01:26, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-05-30 00:00:00, 1: 30, 2: Monday, 3: 150, 4: 2, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 45, 10: 5, 11: 2024-10-25 08:47:28, 12: 16, 13: 632530179160000000, 14: 02:45:16, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-06-15 00:00:00, 1: 15, 2: Wednesday, 3: 166, 4: 9, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 46, 10: 6, 11: 2024-10-25 08:47:28, 12: 33, 13: 632544255930000000, 14: 09:46:33, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-06-15 00:00:00, 1: 15, 2: Wednesday, 3: 166, 4: 18, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 30, 10: 6, 11: 2024-10-25 08:47:28, 12: 46, 13: 632544570460000000, 14: 18:30:46, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-06-16 00:00:00, 1: 16, 2: Thursday, 3: 167, 4: 14, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 52, 10: 6, 11: 2024-10-25 08:47:28, 12: 2, 13: 632545303220000000, 14: 14:52:02, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-06-17 00:00:00, 1: 17, 2: Friday, 3: 168, 4: 4, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 5, 10: 6, 11: 2024-10-25 08:47:28, 12: 12, 13: 632545779120000000, 14: 04:05:12, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-06-17 00:00:00, 1: 17, 2: Friday, 3: 168, 4: 18, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 9, 10: 6, 11: 2024-10-25 08:47:28, 12: 4, 13: 632546285440000000, 14: 18:09:04, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-06-17 00:00:00, 1: 17, 2: Friday, 3: 168, 4: 23, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 51, 10: 6, 11: 2024-10-25 08:47:28, 12: 21, 13: 632546490810000000, 14: 23:51:21, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-06-18 00:00:00, 1: 18, 2: Saturday, 3: 169, 4: 8, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 33, 10: 6, 11: 2024-10-25 08:47:28, 12: 23, 13: 632546804030000000, 14: 08:33:23, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-06-19 00:00:00, 1: 19, 2: Sunday, 3: 170, 4: 10, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 50, 10: 6, 11: 2024-10-25 08:47:28, 12: 2, 13: 632547750020000000, 14: 10:50:02, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-06-19 00:00:00, 1: 19, 2: Sunday, 3: 170, 4: 18, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 40, 10: 6, 11: 2024-10-25 08:47:28, 12: 29, 13: 632548032290000000, 14: 18:40:29, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-06-20 00:00:00, 1: 20, 2: Monday, 3: 171, 4: 6, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 53, 10: 6, 11: 2024-10-25 08:47:28, 12: 47, 13: 632548472270000000, 14: 06:53:47, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-06-20 00:00:00, 1: 20, 2: Monday, 3: 171, 4: 7, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 39, 10: 6, 11: 2024-10-25 08:47:28, 12: 33, 13: 632548499730000000, 14: 07:39:33, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-06-20 00:00:00, 1: 20, 2: Monday, 3: 171, 4: 8, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 15, 10: 6, 11: 2024-10-25 08:47:28, 12: 27, 13: 632548521270000000, 14: 08:15:27, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-06-21 00:00:00, 1: 21, 2: Tuesday, 3: 172, 4: 1, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 4, 10: 6, 11: 2024-10-25 08:47:28, 12: 35, 13: 632549126750000000, 14: 01:04:35, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-06-21 00:00:00, 1: 21, 2: Tuesday, 3: 172, 4: 5, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 18, 10: 6, 11: 2024-10-25 08:47:28, 12: 27, 13: 632549279070000000, 14: 05:18:27, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-06-21 00:00:00, 1: 21, 2: Tuesday, 3: 172, 4: 21, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 10, 10: 6, 11: 2024-10-25 08:47:28, 12: 39, 13: 632549850390000000, 14: 21:10:39, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-06 00:00:00, 1: 6, 2: Wednesday, 3: 187, 4: 1, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 3, 10: 7, 11: 2024-10-25 08:47:28, 12: 29, 13: 632562086090000000, 14: 01:03:29, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-06 00:00:00, 1: 6, 2: Wednesday, 3: 187, 4: 10, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 26, 10: 7, 11: 2024-10-25 08:47:28, 12: 56, 13: 632562424160000000, 14: 10:26:56, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-06 00:00:00, 1: 6, 2: Wednesday, 3: 187, 4: 16, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 1, 10: 7, 11: 2024-10-25 08:47:28, 12: 16, 13: 632562624760000000, 14: 16:01:16, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-06 00:00:00, 1: 6, 2: Wednesday, 3: 187, 4: 22, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 5, 10: 7, 11: 2024-10-25 08:47:28, 12: 47, 13: 632562843470000000, 14: 22:05:47, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-06 00:00:00, 1: 6, 2: Wednesday, 3: 187, 4: 22, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 58, 10: 7, 11: 2024-10-25 08:47:28, 12: 31, 13: 632562875110000000, 14: 22:58:31, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-07 00:00:00, 1: 7, 2: Thursday, 3: 188, 4: 18, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 1, 10: 7, 11: 2024-10-25 08:47:28, 12: 22, 13: 632563560820000000, 14: 18:01:22, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-07 00:00:00, 1: 7, 2: Thursday, 3: 188, 4: 20, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 45, 10: 7, 11: 2024-10-25 08:47:28, 12: 51, 13: 632563659510000000, 14: 20:45:51, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-08 00:00:00, 1: 8, 2: Friday, 3: 189, 4: 10, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 11, 10: 7, 11: 2024-10-25 08:47:28, 12: 45, 13: 632564143050000000, 14: 10:11:45, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-08 00:00:00, 1: 8, 2: Friday, 3: 189, 4: 11, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 59, 10: 7, 11: 2024-10-25 08:47:28, 12: 19, 13: 632564207590000000, 14: 11:59:19, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-08 00:00:00, 1: 8, 2: Friday, 3: 189, 4: 23, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 27, 10: 7, 11: 2024-10-25 08:47:28, 12: 16, 13: 632564620360000000, 14: 23:27:16, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-09 00:00:00, 1: 9, 2: Saturday, 3: 190, 4: 5, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 59, 10: 7, 11: 2024-10-25 08:47:28, 12: 47, 13: 632564855870000000, 14: 05:59:47, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-09 00:00:00, 1: 9, 2: Saturday, 3: 190, 4: 15, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 36, 10: 7, 11: 2024-10-25 08:47:28, 12: 17, 13: 632565201770000000, 14: 15:36:17, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-09 00:00:00, 1: 9, 2: Saturday, 3: 190, 4: 21, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 55, 10: 7, 11: 2024-10-25 08:47:28, 12: 19, 13: 632565429190000000, 14: 21:55:19, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-10 00:00:00, 1: 10, 2: Sunday, 3: 191, 4: 3, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 54, 10: 7, 11: 2024-10-25 08:47:28, 12: 38, 13: 632565644780000000, 14: 03:54:38, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-10 00:00:00, 1: 10, 2: Sunday, 3: 191, 4: 10, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 9, 10: 7, 11: 2024-10-25 08:47:28, 12: 17, 13: 632565869570000000, 14: 10:09:17, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-10 00:00:00, 1: 10, 2: Sunday, 3: 191, 4: 15, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 2, 10: 7, 11: 2024-10-25 08:47:28, 12: 17, 13: 632566045370000000, 14: 15:02:17, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-10 00:00:00, 1: 10, 2: Sunday, 3: 191, 4: 18, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 54, 10: 7, 11: 2024-10-25 08:47:28, 12: 5, 13: 632566184450000000, 14: 18:54:05, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-12 00:00:00, 1: 12, 2: Tuesday, 3: 193, 4: 16, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 37, 10: 7, 11: 2024-10-25 08:47:28, 12: 55, 13: 632567830750000000, 14: 16:37:55, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-26 00:00:00, 1: 26, 2: Tuesday, 3: 207, 4: 22, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 56, 10: 7, 11: 2024-10-25 08:47:28, 12: 0, 13: 632580153600000000, 14: 22:56:00, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-27 00:00:00, 1: 27, 2: Wednesday, 3: 208, 4: 1, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 3, 10: 7, 11: 2024-10-25 08:47:28, 12: 6, 13: 632580229860000000, 14: 01:03:06, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-27 00:00:00, 1: 27, 2: Wednesday, 3: 208, 4: 19, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 1, 10: 7, 11: 2024-10-25 08:47:28, 12: 3, 13: 632580876630000000, 14: 19:01:03, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-27 00:00:00, 1: 27, 2: Wednesday, 3: 208, 4: 20, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 23, 10: 7, 11: 2024-10-25 08:47:28, 12: 12, 13: 632580925920000000, 14: 20:23:12, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-27 00:00:00, 1: 27, 2: Wednesday, 3: 208, 4: 21, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 14, 10: 7, 11: 2024-10-25 08:47:28, 12: 28, 13: 632580956680000000, 14: 21:14:28, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-28 00:00:00, 1: 28, 2: Thursday, 3: 209, 4: 10, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 21, 10: 7, 11: 2024-10-25 08:47:28, 12: 52, 13: 632581429120000000, 14: 10:21:52, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-28 00:00:00, 1: 28, 2: Thursday, 3: 209, 4: 11, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 25, 10: 7, 11: 2024-10-25 08:47:28, 12: 39, 13: 632581467390000000, 14: 11:25:39, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-28 00:00:00, 1: 28, 2: Thursday, 3: 209, 4: 15, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 36, 10: 7, 11: 2024-10-25 08:47:28, 12: 48, 13: 632581618080000000, 14: 15:36:48, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-29 00:00:00, 1: 29, 2: Friday, 3: 210, 4: 9, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 20, 10: 7, 11: 2024-10-25 08:47:28, 12: 16, 13: 632582256160000000, 14: 09:20:16, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-29 00:00:00, 1: 29, 2: Friday, 3: 210, 4: 11, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 15, 10: 7, 11: 2024-10-25 08:47:28, 12: 36, 13: 632582325360000000, 14: 11:15:36, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-29 00:00:00, 1: 29, 2: Friday, 3: 210, 4: 11, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 19, 10: 7, 11: 2024-10-25 08:47:28, 12: 59, 13: 632582327990000000, 14: 11:19:59, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-29 00:00:00, 1: 29, 2: Friday, 3: 210, 4: 12, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 32, 10: 7, 11: 2024-10-25 08:47:28, 12: 20, 13: 632582371400000000, 14: 12:32:20, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-29 00:00:00, 1: 29, 2: Friday, 3: 210, 4: 21, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 46, 10: 7, 11: 2024-10-25 08:47:28, 12: 21, 13: 632582703810000000, 14: 21:46:21, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-29 00:00:00, 1: 29, 2: Friday, 3: 210, 4: 22, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 37, 10: 7, 11: 2024-10-25 08:47:28, 12: 41, 13: 632582734610000000, 14: 22:37:41, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-30 00:00:00, 1: 30, 2: Saturday, 3: 211, 4: 0, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 36, 10: 7, 11: 2024-10-25 08:47:28, 12: 31, 13: 632582805910000000, 14: 00:36:31, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-30 00:00:00, 1: 30, 2: Saturday, 3: 211, 4: 5, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 21, 10: 7, 11: 2024-10-25 08:47:28, 12: 32, 13: 632582976920000000, 14: 05:21:32, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-30 00:00:00, 1: 30, 2: Saturday, 3: 211, 4: 11, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 58, 10: 7, 11: 2024-10-25 08:47:28, 12: 50, 13: 632583215300000000, 14: 11:58:50, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-30 00:00:00, 1: 30, 2: Saturday, 3: 211, 4: 13, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 47, 10: 7, 11: 2024-10-25 08:47:28, 12: 43, 13: 632583280630000000, 14: 13:47:43, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-30 00:00:00, 1: 30, 2: Saturday, 3: 211, 4: 17, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 44, 10: 7, 11: 2024-10-25 08:47:28, 12: 24, 13: 632583422640000000, 14: 17:44:24, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-30 00:00:00, 1: 30, 2: Saturday, 3: 211, 4: 18, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 3, 10: 7, 11: 2024-10-25 08:47:28, 12: 13, 13: 632583433930000000, 14: 18:03:13, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-30 00:00:00, 1: 30, 2: Saturday, 3: 211, 4: 22, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 20, 10: 7, 11: 2024-10-25 08:47:28, 12: 29, 13: 632583588290000000, 14: 22:20:29, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-31 00:00:00, 1: 31, 2: Sunday, 3: 212, 4: 5, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 40, 10: 7, 11: 2024-10-25 08:47:28, 12: 35, 13: 632583852350000000, 14: 05:40:35, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-31 00:00:00, 1: 31, 2: Sunday, 3: 212, 4: 7, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 9, 10: 7, 11: 2024-10-25 08:47:28, 12: 55, 13: 632583905950000000, 14: 07:09:55, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-31 00:00:00, 1: 31, 2: Sunday, 3: 212, 4: 8, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 5, 10: 7, 11: 2024-10-25 08:47:28, 12: 31, 13: 632583939310000000, 14: 08:05:31, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-31 00:00:00, 1: 31, 2: Sunday, 3: 212, 4: 10, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 26, 10: 7, 11: 2024-10-25 08:47:28, 12: 19, 13: 632584023790000000, 14: 10:26:19, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-31 00:00:00, 1: 31, 2: Sunday, 3: 212, 4: 11, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 51, 10: 7, 11: 2024-10-25 08:47:28, 12: 46, 13: 632584075060000000, 14: 11:51:46, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-31 00:00:00, 1: 31, 2: Sunday, 3: 212, 4: 12, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 14, 10: 7, 11: 2024-10-25 08:47:28, 12: 19, 13: 632584088590000000, 14: 12:14:19, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-31 00:00:00, 1: 31, 2: Sunday, 3: 212, 4: 21, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 29, 10: 7, 11: 2024-10-25 08:47:28, 12: 28, 13: 632584421680000000, 14: 21:29:28, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-07-31 00:00:00, 1: 31, 2: Sunday, 3: 212, 4: 23, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 29, 10: 7, 11: 2024-10-25 08:47:28, 12: 51, 13: 632584493910000000, 14: 23:29:51, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-01 00:00:00, 1: 1, 2: Monday, 3: 213, 4: 5, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 53, 10: 8, 11: 2024-10-25 08:47:28, 12: 49, 13: 632584724290000000, 14: 05:53:49, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-01 00:00:00, 1: 1, 2: Monday, 3: 213, 4: 6, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 50, 10: 8, 11: 2024-10-25 08:47:28, 12: 26, 13: 632584758260000000, 14: 06:50:26, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-01 00:00:00, 1: 1, 2: Monday, 3: 213, 4: 14, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 25, 10: 8, 11: 2024-10-25 08:47:28, 12: 40, 13: 632585031400000000, 14: 14:25:40, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-01 00:00:00, 1: 1, 2: Monday, 3: 213, 4: 20, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 12, 10: 8, 11: 2024-10-25 08:47:28, 12: 33, 13: 632585239530000000, 14: 20:12:33, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-01 00:00:00, 1: 1, 2: Monday, 3: 213, 4: 20, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 59, 10: 8, 11: 2024-10-25 08:47:28, 12: 58, 13: 632585267980000000, 14: 20:59:58, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-01 00:00:00, 1: 1, 2: Monday, 3: 213, 4: 21, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 35, 10: 8, 11: 2024-10-25 08:47:28, 12: 1, 13: 632585289010000000, 14: 21:35:01, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-02 00:00:00, 1: 2, 2: Tuesday, 3: 214, 4: 3, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 16, 10: 8, 11: 2024-10-25 08:47:28, 12: 31, 13: 632585493910000000, 14: 03:16:31, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-02 00:00:00, 1: 2, 2: Tuesday, 3: 214, 4: 7, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 38, 10: 8, 11: 2024-10-25 08:47:28, 12: 44, 13: 632585651240000000, 14: 07:38:44, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-02 00:00:00, 1: 2, 2: Tuesday, 3: 214, 4: 9, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 19, 10: 8, 11: 2024-10-25 08:47:28, 12: 22, 13: 632585711620000000, 14: 09:19:22, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-02 00:00:00, 1: 2, 2: Tuesday, 3: 214, 4: 11, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 16, 10: 8, 11: 2024-10-25 08:47:28, 12: 19, 13: 632585781790000000, 14: 11:16:19, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-02 00:00:00, 1: 2, 2: Tuesday, 3: 214, 4: 13, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 45, 10: 8, 11: 2024-10-25 08:47:28, 12: 5, 13: 632585871050000000, 14: 13:45:05, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-02 00:00:00, 1: 2, 2: Tuesday, 3: 214, 4: 14, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 5, 10: 8, 11: 2024-10-25 08:47:28, 12: 42, 13: 632585883420000000, 14: 14:05:42, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-02 00:00:00, 1: 2, 2: Tuesday, 3: 214, 4: 17, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 42, 10: 8, 11: 2024-10-25 08:47:28, 12: 49, 13: 632586013690000000, 14: 17:42:49, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-02 00:00:00, 1: 2, 2: Tuesday, 3: 214, 4: 22, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 18, 10: 8, 11: 2024-10-25 08:47:28, 12: 13, 13: 632586178930000000, 14: 22:18:13, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-16 00:00:00, 1: 16, 2: Tuesday, 3: 228, 4: 23, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 10, 10: 8, 11: 2024-10-25 08:47:28, 12: 34, 13: 632598306340000000, 14: 23:10:34, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-17 00:00:00, 1: 17, 2: Wednesday, 3: 229, 4: 4, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 25, 10: 8, 11: 2024-10-25 08:47:28, 12: 47, 13: 632598495470000000, 14: 04:25:47, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-17 00:00:00, 1: 17, 2: Wednesday, 3: 229, 4: 18, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 27, 10: 8, 11: 2024-10-25 08:47:28, 12: 22, 13: 632599000420000000, 14: 18:27:22, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-18 00:00:00, 1: 18, 2: Thursday, 3: 230, 4: 9, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 13, 10: 8, 11: 2024-10-25 08:47:28, 12: 42, 13: 632599532220000000, 14: 09:13:42, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-18 00:00:00, 1: 18, 2: Thursday, 3: 230, 4: 11, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 58, 10: 8, 11: 2024-10-25 08:47:28, 12: 48, 13: 632599631280000000, 14: 11:58:48, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-18 00:00:00, 1: 18, 2: Thursday, 3: 230, 4: 19, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 11, 10: 8, 11: 2024-10-25 08:47:28, 12: 45, 13: 632599891050000000, 14: 19:11:45, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-18 00:00:00, 1: 18, 2: Thursday, 3: 230, 4: 22, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 15, 10: 8, 11: 2024-10-25 08:47:28, 12: 18, 13: 632600001180000000, 14: 22:15:18, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-18 00:00:00, 1: 18, 2: Thursday, 3: 230, 4: 22, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 37, 10: 8, 11: 2024-10-25 08:47:28, 12: 39, 13: 632600014590000000, 14: 22:37:39, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-19 00:00:00, 1: 19, 2: Friday, 3: 231, 4: 9, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 31, 10: 8, 11: 2024-10-25 08:47:28, 12: 48, 13: 632600407080000000, 14: 09:31:48, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-19 00:00:00, 1: 19, 2: Friday, 3: 231, 4: 11, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 27, 10: 8, 11: 2024-10-25 08:47:28, 12: 32, 13: 632600476520000000, 14: 11:27:32, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-19 00:00:00, 1: 19, 2: Friday, 3: 231, 4: 17, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 26, 10: 8, 11: 2024-10-25 08:47:28, 12: 55, 13: 632600692150000000, 14: 17:26:55, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-19 00:00:00, 1: 19, 2: Friday, 3: 231, 4: 20, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 28, 10: 8, 11: 2024-10-25 08:47:28, 12: 48, 13: 632600801280000000, 14: 20:28:48, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-20 00:00:00, 1: 20, 2: Saturday, 3: 232, 4: 7, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 54, 10: 8, 11: 2024-10-25 08:47:28, 12: 54, 13: 632601212940000000, 14: 07:54:54, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-20 00:00:00, 1: 20, 2: Saturday, 3: 232, 4: 18, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 16, 10: 8, 11: 2024-10-25 08:47:28, 12: 26, 13: 632601585860000000, 14: 18:16:26, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-20 00:00:00, 1: 20, 2: Saturday, 3: 232, 4: 21, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 13, 10: 8, 11: 2024-10-25 08:47:28, 12: 58, 13: 632601692380000000, 14: 21:13:58, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-20 00:00:00, 1: 20, 2: Saturday, 3: 232, 4: 21, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 31, 10: 8, 11: 2024-10-25 08:47:28, 12: 52, 13: 632601703120000000, 14: 21:31:52, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-21 00:00:00, 1: 21, 2: Sunday, 3: 233, 4: 6, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 26, 10: 8, 11: 2024-10-25 08:47:28, 12: 48, 13: 632602024080000000, 14: 06:26:48, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-21 00:00:00, 1: 21, 2: Sunday, 3: 233, 4: 8, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 18, 10: 8, 11: 2024-10-25 08:47:28, 12: 18, 13: 632602090980000000, 14: 08:18:18, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-21 00:00:00, 1: 21, 2: Sunday, 3: 233, 4: 13, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 41, 10: 8, 11: 2024-10-25 08:47:28, 12: 14, 13: 632602284740000000, 14: 13:41:14, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-21 00:00:00, 1: 21, 2: Sunday, 3: 233, 4: 21, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 0, 10: 8, 11: 2024-10-25 08:47:28, 12: 3, 13: 632602548030000000, 14: 21:00:03, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-21 00:00:00, 1: 21, 2: Sunday, 3: 233, 4: 23, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 28, 10: 8, 11: 2024-10-25 08:47:28, 12: 58, 13: 632602637380000000, 14: 23:28:58, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-21 00:00:00, 1: 21, 2: Sunday, 3: 233, 4: 23, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 34, 10: 8, 11: 2024-10-25 08:47:28, 12: 0, 13: 632602640400000000, 14: 23:34:00, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-22 00:00:00, 1: 22, 2: Monday, 3: 234, 4: 8, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 24, 10: 8, 11: 2024-10-25 08:47:28, 12: 32, 13: 632602958720000000, 14: 08:24:32, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-22 00:00:00, 1: 22, 2: Monday, 3: 234, 4: 11, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 1, 10: 8, 11: 2024-10-25 08:47:28, 12: 15, 13: 632603052750000000, 14: 11:01:15, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-22 00:00:00, 1: 22, 2: Monday, 3: 234, 4: 16, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 24, 10: 8, 11: 2024-10-25 08:47:28, 12: 42, 13: 632603246820000000, 14: 16:24:42, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-22 00:00:00, 1: 22, 2: Monday, 3: 234, 4: 17, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 20, 10: 8, 11: 2024-10-25 08:47:28, 12: 17, 13: 632603280170000000, 14: 17:20:17, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-22 00:00:00, 1: 22, 2: Monday, 3: 234, 4: 19, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 28, 10: 8, 11: 2024-10-25 08:47:28, 12: 2, 13: 632603356820000000, 14: 19:28:02, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-22 00:00:00, 1: 22, 2: Monday, 3: 234, 4: 23, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 48, 10: 8, 11: 2024-10-25 08:47:28, 12: 56, 13: 632603513360000000, 14: 23:48:56, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-23 00:00:00, 1: 23, 2: Tuesday, 3: 235, 4: 0, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 5, 10: 8, 11: 2024-10-25 08:47:28, 12: 57, 13: 632603523570000000, 14: 00:05:57, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-23 00:00:00, 1: 23, 2: Tuesday, 3: 235, 4: 5, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 17, 10: 8, 11: 2024-10-25 08:47:28, 12: 23, 13: 632603710430000000, 14: 05:17:23, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-23 00:00:00, 1: 23, 2: Tuesday, 3: 235, 4: 6, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 18, 10: 8, 11: 2024-10-25 08:47:28, 12: 43, 13: 632603747230000000, 14: 06:18:43, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-23 00:00:00, 1: 23, 2: Tuesday, 3: 235, 4: 14, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 47, 10: 8, 11: 2024-10-25 08:47:28, 12: 26, 13: 632604052460000000, 14: 14:47:26, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}, {0: 2005-08-23 00:00:00, 1: 23, 2: Tuesday, 3: 235, 4: 22, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 19, 10: 8, 11: 2024-10-25 08:47:28, 12: 33, 13: 632604323730000000, 14: 22:19:33, 15: 2024-10-25 00:00:00, 16: 2005, 17: 2024-10-25 05:47:28}]\" }", "should_retest": true}, {"id": "629dff82623138b352e4dc152589a38ceba64f782a9c1373ba9e3d1b2aaa223b", "dataset_name": "Spider", "sql": "SELECT count(*) FROM customer WHERE active = '1'", "question": "Count the number of customers who are active.", "linq": "", "db_name": "sakila_1", "status": "QueryBuildFailed", "error": "Invalid value type", "should_retest": true}, {"id": "7e42c221b517765d92772a29d315b749ad1fbbf2f1541e9542a5e8ab728a9091", "dataset_name": "Spider", "sql": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )", "question": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?", "linq": "context.Customers.Where(row => !context.Rentals.Where(row => row.RentalDate > \"2005-08-23 02:06:01\").Select(row => row.CustomerId).Contains(row.CustomerId)).Select(row => new { row.FirstName }).ToList();", "db_name": "sakila_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,73): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.55", "should_retest": true}, {"id": "1e452344d06f88e5a2d52ec2d112582bf81be2c2f31f261907ea12b84c1dc83f", "dataset_name": "Spider", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1", "question": "What is the name corresponding to the accoung with the lowest sum of checking and savings balances?", "linq": "", "db_name": "small_bank_1", "status": "QueryBuildFailed", "error": "Unknown comparison operator", "should_retest": true}, {"id": "94ab54930268c86ecef73cac4b86b69b3d8e2763b2a6085b694b07c8e7152fbe", "dataset_name": "Spider", "sql": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)", "question": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?", "linq": "", "db_name": "small_bank_1", "status": "QueryBuildFailed", "error": "Unknown comparison operator", "should_retest": true}, {"id": "369b39e05c0db3a7202946572458c2449a936aac7c9d8e42f6a74be198b99a78", "dataset_name": "Spider", "sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance", "question": "What is the sum of checking and savings balances for all customers, ordered by the total balance?", "linq": "", "db_name": "small_bank_1", "status": "QueryBuildFailed", "error": "Unknown comparison operator", "should_retest": true}, {"id": "39c684e9e7598b0a6b1ead249ae0005263c3e3a6a25bd315c936088af972492f", "dataset_name": "Spider", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC", "question": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?", "linq": "", "db_name": "small_bank_1", "status": "QueryBuildFailed", "error": "Unknown comparison operator", "should_retest": true}, {"id": "226324db7bcd103e6a17b4ef015707ee5c539e4ef9f706be731f574214fc4a5d", "dataset_name": "Spider", "sql": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance", "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?", "linq": "", "db_name": "small_bank_1", "status": "QueryBuildFailed", "error": "Unknown comparison operator", "should_retest": true}, {"id": "60e14ee301c87ee570e18d960ebbefcbefbd3c757aa2f89db23906fe1045ac2c", "dataset_name": "Spider", "sql": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";", "question": "List the number of invoices and the invoice total from California.", "linq": "context.Invoices.Where(row => row.BillingState == \"CA\").GroupBy(row => 1).Select(group => new { group.BillingState, Count = group.Count(), SumTotal = group.Select(row => row.Total).Sum() }).ToList();", "db_name": "store_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,114): error CS1061: 'IGrouping<int, Invoice>' does not contain a definition for 'BillingState' and no accessible extension method 'BillingState' accepting a first argument of type 'IGrouping<int, Invoice>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38", "should_retest": true}, {"id": "1d956ec2ce32b90fb5a5f06e98c9f7e85e52bafc7720fbef96fca6bbb2dad3a9", "dataset_name": "Spider", "sql": "SELECT name FROM playlists;", "question": "What are the names of all the playlists?", "linq": "", "db_name": "store_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "00a2f511156798a55d1a7f75e3419a45b0ec2bda6e0d35696a2aa833d49c46cf", "dataset_name": "Spider", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "question": "List title of albums have the number of tracks greater than 10.", "linq": "context.Albums.Join(context.Tracks, T1 => T1.Id, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count(row => row.T1.Id) > 10).Select(group => new { group.First().T1.Title }).ToList();", "db_name": "store_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,175): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.21", "should_retest": true}, {"id": "c48fb4c7f7b15572c44a031181d220b35b0799331d1553af5c9f69142384c504", "dataset_name": "Spider", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";", "question": "What are the names of all tracks that are on playlists titled Movies?", "linq": "", "db_name": "store_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "9c47ca657f624c6721939632b613697695fc557e6c18e6962e432552daa0de2f", "dataset_name": "Spider", "sql": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;", "question": "What are the names of all playlists that have more than 100 tracks?", "linq": "", "db_name": "store_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "37973b4a0f523b53fae86db915c9895ee01efe491b92c39bafd74a1ef44b0ae9", "dataset_name": "Spider", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?", "linq": "", "db_name": "store_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "481b9473df21fbd713b0a6017983488eae1281fb5439fc0869a48fc348f2cfae", "dataset_name": "Spider", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "question": "What are the names of all the tracks that are in both the Movies and music playlists?", "linq": "", "db_name": "store_1", "status": "QueryBuildFailed", "error": "called `Option::unwrap()` on a `None` value", "should_retest": true}, {"id": "b61e21e0a1926f8cdf60fa7af5a0270241b6326ade50e49d6eb4670912ff8e17", "dataset_name": "Spider", "sql": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'", "question": "How many restaurant is the Sandwich type restaurant?", "linq": "context.Restaurants.Join(context.TypeOfRestaurants, Restaurants => Restaurants.ResId, TypeOfRestaurants => TypeOfRestaurants.ResId, (Restaurants, TypeOfRestaurants) => new { Restaurants, TypeOfRestaurants }).Join(context.RestaurantTypes, joined => joined.TypeOfRestaurants.ResTypeId, RestaurantTypes => RestaurantTypes.ResTypeId, (joined, RestaurantTypes) => new { joined.Restaurants, joined.TypeOfRestaurants, RestaurantTypes }).GroupBy(row => new { row.TypeOfRestaurants.ResTypeId }).Where(group => group.RestaurantTypes.ResTypeName == \"Sandwich\").Select(group => new { Count = group.Count() });", "db_name": "restaurant_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,519): error CS1061: 'IGrouping<<anonymous type: int? ResTypeId>, <anonymous type: Restaurant Restaurants, TypeOfRestaurant TypeOfRestaurants, RestaurantType RestaurantTypes>>' does not contain a definition for 'RestaurantTypes' and no accessible extension method 'RestaurantTypes' accepting a first argument of type 'IGrouping<<anonymous type: int? ResTypeId>, <anonymous type: Restaurant Restaurants, TypeOfRestaurant TypeOfRestaurants, RestaurantType RestaurantTypes>>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.54", "should_retest": true}, {"id": "9d097cb96ab41bd8b8affb3c7727cfcc761b6fe24f2b02b12d4c32379202b969", "dataset_name": "Spider", "sql": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";", "question": "How long does student Linda Smith spend on the restaurant in total?", "linq": "context.Students.Join(context.VisitsRestaurants, Students => Students.StuId, VisitsRestaurants => VisitsRestaurants.StuId, (Students, VisitsRestaurants) => new { Students, VisitsRestaurants }).Where(row => row.Students.Fname == \"Linda\" && row.Students.Lname == \"Smith\").Select(row => row.Visits_Restaurant.Spent).Sum();", "db_name": "restaurant_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,300): error CS1061: '<anonymous type: Student Students, VisitsRestaurant VisitsRestaurants>' does not contain a definition for 'Visits_Restaurant' and no accessible extension method 'Visits_Restaurant' accepting a first argument of type '<anonymous type: Student Students, VisitsRestaurant VisitsRestaurants>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.44", "should_retest": true}, {"id": "d4f33e76b08fe039de8717fd6515b3c97a9f62a104454363aa011cd40d4a2180", "dataset_name": "Spider", "sql": "SELECT count(*) FROM follows", "question": "How many followers does each user have?", "linq": "context.Follow.Count();", "db_name": "twitter_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,20): error CS1061: 'Twitter1Context' does not contain a definition for 'Follow' and no accessible extension method 'Follow' accepting a first argument of type 'Twitter1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.42", "should_retest": true}, {"id": "daed29f566318cb9435e04e0b57263bf81211c451d11795bc13b2fe74f2f58ce", "dataset_name": "Spider", "sql": "SELECT count(*) FROM follows GROUP BY f1", "question": "Find the number of followers for each user.", "linq": "context.Follow.GroupBy(row => new { row.F1 }).Select(group => new { Count = group.Count() });", "db_name": "twitter_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,20): error CS1061: 'Twitter1Context' does not contain a definition for 'Follow' and no accessible extension method 'Follow' accepting a first argument of type 'Twitter1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.71", "should_retest": true}, {"id": "6e71d2449993eea1866763bf950bfa7142275298eabbdcd6c38cd5649c00257d", "dataset_name": "Spider", "sql": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')", "question": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".", "linq": "context.UserProfiles.Join(context.Follow, T1 => T1.Uid, T2 => T2.F1, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.F1 }).Where(group => group.Count() > context.UserProfiles.Join(context.Follow, T1 => T1.Uid, T2 => T2.F1, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Tyler Swift\").Count()).Select(group => new { group.First().T1.Name }).ToList();", "db_name": "twitter_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,208): error CS1061: 'Twitter1Context' does not contain a definition for 'Follow' and no accessible extension method 'Follow' accepting a first argument of type 'Twitter1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.44", "should_retest": true}, {"id": "fe7a7c1240ef8f11e4c9d8f5601ef9a484573e4784ceb457c49db02ee2cf4d03", "dataset_name": "Spider", "sql": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1", "question": "Find the name and email for the users who have more than one follower.", "linq": "context.UserProfiles.Join(context.Follow, T1 => T1.Uid, T2 => T2.F1, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.F1 }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Name, group.First().T1.Email }).ToList();", "db_name": "twitter_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,46): error CS1061: 'Twitter1Context' does not contain a definition for 'Follow' and no accessible extension method 'Follow' accepting a first argument of type 'Twitter1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.62", "should_retest": true}, {"id": "cb75802862ad279ccf7974b28b4dc185f93b4c75de7dfdc70fb502c8425d0f5e", "dataset_name": "Spider", "sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"", "question": "Find the id of users who are followed by Mary and Susan.", "linq": "context.UserProfiles.Join(context.Follow, T1 => T1.Uid, T2 => T2.F2, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Mary\").Select(row => row.T2.F1).Intersect(context.UserProfiles.Join(context.Follow, T1 => T1.Uid, T2 => T2.F2, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Susan\").Select(row => row.T2.F1)).ToList();", "db_name": "twitter_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,214): error CS1061: 'Twitter1Context' does not contain a definition for 'Follow' and no accessible extension method 'Follow' accepting a first argument of type 'Twitter1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.65", "should_retest": true}, {"id": "b0bd7626697627a22bff6f5399c2a9240fbfbd3a628abf6095252e491b4aa41e", "dataset_name": "Spider", "sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\"", "question": "Find the id of users who are followed by Mary or Susan.", "linq": "context.UserProfiles.Join(context.Follow, T1 => T1.Uid, T2 => T2.F2, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Mary\" || row.T1.Name == \"Susan\").Select(row => new { row.T2.F1 }).ToList();", "db_name": "twitter_1", "status": "BuildFailed", "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(9,46): error CS1061: 'Twitter1Context' does not contain a definition for 'Follow' and no accessible extension method 'Follow' accepting a first argument of type 'Twitter1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.35", "should_retest": true}]