{
  "mountain_photos": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.mountain_photos;\n\npublic partial class MountainPhotosContext : DbContext\n{\n    public MountainPhotosContext()\n    {\n    }\n\n    public MountainPhotosContext(DbContextOptions<MountainPhotosContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<CameraLen> CameraLens { get; set; }\n\n    public virtual DbSet<Mountain> Mountains { get; set; }\n\n    public virtual DbSet<Photo> Photos { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/mountain_photos.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<CameraLen>(entity =>\n        {\n            entity.ToTable(\"camera_lens\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.Brand).HasColumnName(\"brand\");\n            entity.Property(e => e.FocalLengthMm).HasColumnName(\"focal_length_mm\");\n            entity.Property(e => e.MaxAperture).HasColumnName(\"max_aperture\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n        });\n\n        modelBuilder.Entity<Mountain>(entity =>\n        {\n            entity.ToTable(\"mountain\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n        });\n\n        modelBuilder.Entity<Photo>(entity =>\n        {\n            entity.ToTable(\"photos\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.CameraLensId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"camera_lens_id\");\n            entity.Property(e => e.Color).HasColumnName(\"color\");\n            entity.Property(e => e.MountainId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"mountain_id\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n\n            entity.HasOne(d => d.CameraLens).WithMany(p => p.Photos).HasForeignKey(d => d.CameraLensId);\n\n            entity.HasOne(d => d.Mountain).WithMany(p => p.Photos).HasForeignKey(d => d.MountainId);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class CameraLen\n{\n    public int Id { get; set; }\n\n    public string? Brand { get; set; }\n\n    public string? Name { get; set; }\n\n    public double? FocalLengthMm { get; set; }\n\n    public double? MaxAperture { get; set; }\n\n    public virtual ICollection<Photo> Photos { get; set; } = new List<Photo>();\n}",
      "public partial class Mountain\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public double? Height { get; set; }\n\n    public double? Prominence { get; set; }\n\n    public string? Range { get; set; }\n\n    public string? Country { get; set; }\n\n    public virtual ICollection<Photo> Photos { get; set; } = new List<Photo>();\n}",
      "public partial class Photo\n{\n    public int Id { get; set; }\n\n    public int? CameraLensId { get; set; }\n\n    public int? MountainId { get; set; }\n\n    public string? Color { get; set; }\n\n    public string? Name { get; set; }\n\n    public virtual CameraLen? CameraLens { get; set; }\n\n    public virtual Mountain? Mountain { get; set; }\n}"
    ]
  },
  "perpetrator": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.perpetrator;\n\npublic partial class PerpetratorContext : DbContext\n{\n    public PerpetratorContext()\n    {\n    }\n\n    public PerpetratorContext(DbContextOptions<PerpetratorContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Perpetrator> Perpetrators { get; set; }\n\n    public virtual DbSet<Person> People { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/perpetrator.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Perpetrator>(entity =>\n        {\n            entity.ToTable(\"perpetrator\");\n\n            entity.Property(e => e.PerpetratorId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Perpetrator_ID\");\n            entity.Property(e => e.Injured).HasColumnType(\"INT\");\n            entity.Property(e => e.Killed).HasColumnType(\"INT\");\n            entity.Property(e => e.PeopleId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"People_ID\");\n\n            entity.HasOne(d => d.People).WithMany(p => p.Perpetrators).HasForeignKey(d => d.PeopleId);\n        });\n\n        modelBuilder.Entity<Person>(entity =>\n        {\n            entity.HasKey(e => e.PeopleId);\n\n            entity.ToTable(\"people\");\n\n            entity.Property(e => e.PeopleId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"People_ID\");\n            entity.Property(e => e.HomeTown).HasColumnName(\"Home Town\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Perpetrator\n{\n    public int PerpetratorId { get; set; }\n\n    public int? PeopleId { get; set; }\n\n    public string? Date { get; set; }\n\n    public double? Year { get; set; }\n\n    public string? Location { get; set; }\n\n    public string? Country { get; set; }\n\n    public int? Killed { get; set; }\n\n    public int? Injured { get; set; }\n\n    public virtual Person? People { get; set; }\n}",
      "public partial class Person\n{\n    public int PeopleId { get; set; }\n\n    public string? Name { get; set; }\n\n    public double? Height { get; set; }\n\n    public double? Weight { get; set; }\n\n    public string? HomeTown { get; set; }\n\n    public virtual ICollection<Perpetrator> Perpetrators { get; set; } = new List<Perpetrator>();\n}"
    ]
  },
  "scientist_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.scientist_1;\n\npublic partial class Scientist1Context : DbContext\n{\n    public Scientist1Context()\n    {\n    }\n\n    public Scientist1Context(DbContextOptions<Scientist1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Project> Projects { get; set; }\n\n    public virtual DbSet<Scientist> Scientists { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/scientist_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Project>(entity =>\n        {\n            entity.HasKey(e => e.Code);\n\n            entity.Property(e => e.Code).HasColumnType(\"Char(4)\");\n            entity.Property(e => e.Hours).HasColumnType(\"INT\");\n            entity.Property(e => e.Name).HasColumnType(\"Char(50)\");\n        });\n\n        modelBuilder.Entity<Scientist>(entity =>\n        {\n            entity.HasKey(e => e.Ssn);\n\n            entity.Property(e => e.Ssn)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"SSN\");\n            entity.Property(e => e.Name).HasColumnType(\"Char(30)\");\n\n            entity.HasMany(d => d.Projects).WithMany(p => p.Scientists)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"AssignedTo\",\n                    r => r.HasOne<Project>().WithMany()\n                        .HasForeignKey(\"Project\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Scientist>().WithMany()\n                        .HasForeignKey(\"Scientist\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"Scientist\", \"Project\");\n                        j.ToTable(\"AssignedTo\");\n                        j.IndexerProperty<int>(\"Scientist\").HasColumnType(\"INT\");\n                        j.IndexerProperty<string>(\"Project\").HasColumnType(\"char(4)\");\n                    });\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Project\n{\n    public string Code { get; set; } = null!;\n\n    public string Name { get; set; } = null!;\n\n    public int? Hours { get; set; }\n\n    public virtual ICollection<Scientist> Scientists { get; set; } = new List<Scientist>();\n}",
      "public partial class Scientist\n{\n    public int Ssn { get; set; }\n\n    public string Name { get; set; } = null!;\n\n    public virtual ICollection<Project> Projects { get; set; } = new List<Project>();\n}"
    ]
  },
  "election": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.election;\n\npublic partial class ElectionContext : DbContext\n{\n    public ElectionContext()\n    {\n    }\n\n    public ElectionContext(DbContextOptions<ElectionContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<County> Counties { get; set; }\n\n    public virtual DbSet<Election> Elections { get; set; }\n\n    public virtual DbSet<Party> Parties { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/election.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<County>(entity =>\n        {\n            entity.ToTable(\"county\");\n\n            entity.Property(e => e.CountyId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"County_Id\");\n            entity.Property(e => e.CountyName).HasColumnName(\"County_name\");\n            entity.Property(e => e.ZipCode).HasColumnName(\"Zip_code\");\n        });\n\n        modelBuilder.Entity<Election>(entity =>\n        {\n            entity.ToTable(\"election\");\n\n            entity.Property(e => e.ElectionId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Election_ID\");\n            entity.Property(e => e.CountiesRepresented).HasColumnName(\"Counties_Represented\");\n            entity.Property(e => e.District).HasColumnType(\"INT\");\n            entity.Property(e => e.FirstElected).HasColumnName(\"First_Elected\");\n            entity.Property(e => e.Party).HasColumnType(\"INT\");\n\n            entity.HasOne(d => d.DistrictNavigation).WithMany(p => p.Elections).HasForeignKey(d => d.District);\n\n            entity.HasOne(d => d.PartyNavigation).WithMany(p => p.Elections).HasForeignKey(d => d.Party);\n        });\n\n        modelBuilder.Entity<Party>(entity =>\n        {\n            entity.ToTable(\"party\");\n\n            entity.Property(e => e.PartyId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Party_ID\");\n            entity.Property(e => e.AttorneyGeneral).HasColumnName(\"Attorney_General\");\n            entity.Property(e => e.LieutenantGovernor).HasColumnName(\"Lieutenant_Governor\");\n            entity.Property(e => e.Party1).HasColumnName(\"Party\");\n            entity.Property(e => e.UsSenate).HasColumnName(\"US_Senate\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class County\n{\n    public int CountyId { get; set; }\n\n    public string? CountyName { get; set; }\n\n    public double? Population { get; set; }\n\n    public string? ZipCode { get; set; }\n\n    public virtual ICollection<Election> Elections { get; set; } = new List<Election>();\n}",
      "public partial class Election\n{\n    public int ElectionId { get; set; }\n\n    public string? CountiesRepresented { get; set; }\n\n    public int? District { get; set; }\n\n    public string? Delegate { get; set; }\n\n    public int? Party { get; set; }\n\n    public double? FirstElected { get; set; }\n\n    public string? Committee { get; set; }\n\n    public virtual County? DistrictNavigation { get; set; }\n\n    public virtual Party? PartyNavigation { get; set; }\n}",
      "public partial class Party\n{\n    public int PartyId { get; set; }\n\n    public double? Year { get; set; }\n\n    public string? Party1 { get; set; }\n\n    public string? Governor { get; set; }\n\n    public string? LieutenantGovernor { get; set; }\n\n    public string? Comptroller { get; set; }\n\n    public string? AttorneyGeneral { get; set; }\n\n    public string? UsSenate { get; set; }\n\n    public virtual ICollection<Election> Elections { get; set; } = new List<Election>();\n}"
    ]
  },
  "book_2": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.book_2;\n\npublic partial class Book2Context : DbContext\n{\n    public Book2Context()\n    {\n    }\n\n    public Book2Context(DbContextOptions<Book2Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Book> Books { get; set; }\n\n    public virtual DbSet<Publication> Publications { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/book_2.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Book>(entity =>\n        {\n            entity.ToTable(\"book\");\n\n            entity.Property(e => e.BookId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Book_ID\");\n        });\n\n        modelBuilder.Entity<Publication>(entity =>\n        {\n            entity.ToTable(\"publication\");\n\n            entity.Property(e => e.PublicationId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Publication_ID\");\n            entity.Property(e => e.BookId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Book_ID\");\n            entity.Property(e => e.PublicationDate).HasColumnName(\"Publication_Date\");\n\n            entity.HasOne(d => d.Book).WithMany(p => p.Publications).HasForeignKey(d => d.BookId);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Book\n{\n    public int BookId { get; set; }\n\n    public string? Title { get; set; }\n\n    public double? Issues { get; set; }\n\n    public string? Writer { get; set; }\n\n    public virtual ICollection<Publication> Publications { get; set; } = new List<Publication>();\n}",
      "public partial class Publication\n{\n    public int PublicationId { get; set; }\n\n    public int? BookId { get; set; }\n\n    public string? Publisher { get; set; }\n\n    public string? PublicationDate { get; set; }\n\n    public double? Price { get; set; }\n\n    public virtual Book? Book { get; set; }\n}"
    ]
  },
  "music_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.music_1;\n\npublic partial class Music1Context : DbContext\n{\n    public Music1Context()\n    {\n    }\n\n    public Music1Context(DbContextOptions<Music1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Artist> Artists { get; set; }\n\n    public virtual DbSet<File> Files { get; set; }\n\n    public virtual DbSet<Genre> Genres { get; set; }\n\n    public virtual DbSet<Song> Songs { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/music_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Artist>(entity =>\n        {\n            entity.HasKey(e => e.ArtistName);\n\n            entity.ToTable(\"artist\");\n\n            entity.Property(e => e.ArtistName)\n                .HasColumnType(\"varchar2(50)\")\n                .HasColumnName(\"artist_name\");\n            entity.Property(e => e.Country)\n                .HasColumnType(\"varchar2(20)\")\n                .HasColumnName(\"country\");\n            entity.Property(e => e.Gender)\n                .HasColumnType(\"varchar2(20)\")\n                .HasColumnName(\"gender\");\n            entity.Property(e => e.PreferredGenre)\n                .HasColumnType(\"varchar2(50)\")\n                .HasColumnName(\"preferred_genre\");\n\n            entity.HasOne(d => d.PreferredGenreNavigation).WithMany(p => p.Artists)\n                .HasForeignKey(d => d.PreferredGenre)\n                .OnDelete(DeleteBehavior.Cascade);\n        });\n\n        modelBuilder.Entity<File>(entity =>\n        {\n            entity.HasKey(e => e.FId);\n\n            entity.ToTable(\"files\");\n\n            entity.Property(e => e.FId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"number(10)\")\n                .HasColumnName(\"f_id\");\n            entity.Property(e => e.ArtistName)\n                .HasColumnType(\"varchar2(50)\")\n                .HasColumnName(\"artist_name\");\n            entity.Property(e => e.Duration)\n                .HasColumnType(\"varchar2(20)\")\n                .HasColumnName(\"duration\");\n            entity.Property(e => e.FileSize)\n                .HasColumnType(\"varchar2(20)\")\n                .HasColumnName(\"file_size\");\n            entity.Property(e => e.Formats)\n                .HasColumnType(\"varchar2(20)\")\n                .HasColumnName(\"formats\");\n\n            entity.HasOne(d => d.ArtistNameNavigation).WithMany(p => p.Files)\n                .HasForeignKey(d => d.ArtistName)\n                .OnDelete(DeleteBehavior.Cascade);\n        });\n\n        modelBuilder.Entity<Genre>(entity =>\n        {\n            entity.HasKey(e => e.GName);\n\n            entity.ToTable(\"genre\");\n\n            entity.Property(e => e.GName)\n                .HasColumnType(\"varchar2(20)\")\n                .HasColumnName(\"g_name\");\n            entity.Property(e => e.MostPopularIn)\n                .HasColumnType(\"varchar2(50)\")\n                .HasColumnName(\"most_popular_in\");\n            entity.Property(e => e.Rating)\n                .HasColumnType(\"varchar2(10)\")\n                .HasColumnName(\"rating\");\n        });\n\n        modelBuilder.Entity<Song>(entity =>\n        {\n            entity.HasKey(e => e.SongName);\n\n            entity.ToTable(\"song\");\n\n            entity.Property(e => e.SongName)\n                .HasColumnType(\"varchar2(50)\")\n                .HasColumnName(\"song_name\");\n            entity.Property(e => e.ArtistName)\n                .HasColumnType(\"varchar2(50)\")\n                .HasColumnName(\"artist_name\");\n            entity.Property(e => e.Country)\n                .HasColumnType(\"varchar2(20)\")\n                .HasColumnName(\"country\");\n            entity.Property(e => e.FId)\n                .HasColumnType(\"number(10)\")\n                .HasColumnName(\"f_id\");\n            entity.Property(e => e.GenreIs)\n                .HasColumnType(\"varchar2(20)\")\n                .HasColumnName(\"genre_is\");\n            entity.Property(e => e.Languages)\n                .HasColumnType(\"varchar2(20)\")\n                .HasColumnName(\"languages\");\n            entity.Property(e => e.Rating)\n                .HasColumnType(\"number(10)\")\n                .HasColumnName(\"rating\");\n            entity.Property(e => e.Releasedate)\n                .HasColumnType(\"Date\")\n                .HasColumnName(\"releasedate\");\n            entity.Property(e => e.Resolution)\n                .HasColumnType(\"number(10)\")\n                .HasColumnName(\"resolution\");\n\n            entity.HasOne(d => d.ArtistNameNavigation).WithMany(p => p.Songs)\n                .HasForeignKey(d => d.ArtistName)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            entity.HasOne(d => d.FIdNavigation).WithMany(p => p.Songs)\n                .HasForeignKey(d => d.FId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            entity.HasOne(d => d.GenreIsNavigation).WithMany(p => p.Songs)\n                .HasForeignKey(d => d.GenreIs)\n                .OnDelete(DeleteBehavior.Cascade);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Artist\n{\n    public string ArtistName { get; set; } = null!;\n\n    public string? Country { get; set; }\n\n    public string? Gender { get; set; }\n\n    public string? PreferredGenre { get; set; }\n\n    public virtual ICollection<File> Files { get; set; } = new List<File>();\n\n    public virtual Genre? PreferredGenreNavigation { get; set; }\n\n    public virtual ICollection<Song> Songs { get; set; } = new List<Song>();\n}",
      "public partial class File\n{\n    public int FId { get; set; }\n\n    public string? ArtistName { get; set; }\n\n    public string? FileSize { get; set; }\n\n    public string? Duration { get; set; }\n\n    public string? Formats { get; set; }\n\n    public virtual Artist? ArtistNameNavigation { get; set; }\n\n    public virtual ICollection<Song> Songs { get; set; } = new List<Song>();\n}",
      "public partial class Genre\n{\n    public string GName { get; set; } = null!;\n\n    public string? Rating { get; set; }\n\n    public string? MostPopularIn { get; set; }\n\n    public virtual ICollection<Artist> Artists { get; set; } = new List<Artist>();\n\n    public virtual ICollection<Song> Songs { get; set; } = new List<Song>();\n}",
      "public partial class Song\n{\n    public string SongName { get; set; } = null!;\n\n    public string? ArtistName { get; set; }\n\n    public string? Country { get; set; }\n\n    public int? FId { get; set; }\n\n    public string? GenreIs { get; set; }\n\n    public int? Rating { get; set; }\n\n    public string? Languages { get; set; }\n\n    public string? Releasedate { get; set; }\n\n    public int Resolution { get; set; }\n\n    public virtual Artist? ArtistNameNavigation { get; set; }\n\n    public virtual File? FIdNavigation { get; set; }\n\n    public virtual Genre? GenreIsNavigation { get; set; }\n}"
    ]
  },
  "cre_Doc_Control_Systems": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.cre_Doc_Control_Systems;\n\npublic partial class CreDocControlSystemsContext : DbContext\n{\n    public CreDocControlSystemsContext()\n    {\n    }\n\n    public CreDocControlSystemsContext(DbContextOptions<CreDocControlSystemsContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Address> Addresses { get; set; }\n\n    public virtual DbSet<Document> Documents { get; set; }\n\n    public virtual DbSet<DocumentDraft> DocumentDrafts { get; set; }\n\n    public virtual DbSet<DocumentsMailed> DocumentsMaileds { get; set; }\n\n    public virtual DbSet<DraftCopy> DraftCopies { get; set; }\n\n    public virtual DbSet<Employee> Employees { get; set; }\n\n    public virtual DbSet<RefDocumentStatus> RefDocumentStatuses { get; set; }\n\n    public virtual DbSet<RefDocumentType> RefDocumentTypes { get; set; }\n\n    public virtual DbSet<RefShippingAgent> RefShippingAgents { get; set; }\n\n    public virtual DbSet<Role> Roles { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/cre_Doc_Control_Systems.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Address>(entity =>\n        {\n            entity.Property(e => e.AddressId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"address_id\");\n            entity.Property(e => e.AddressDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"address_details\");\n        });\n\n        modelBuilder.Entity<Document>(entity =>\n        {\n            entity.Property(e => e.DocumentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"document_id\");\n            entity.Property(e => e.DocumentStatusCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"document_status_code\");\n            entity.Property(e => e.DocumentTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"document_type_code\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n            entity.Property(e => e.ReceiptDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"receipt_date\");\n            entity.Property(e => e.ReceiptNumber)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"receipt_number\");\n            entity.Property(e => e.ShippingAgentCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"shipping_agent_code\");\n\n            entity.HasOne(d => d.DocumentStatusCodeNavigation).WithMany(p => p.Documents)\n                .HasForeignKey(d => d.DocumentStatusCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.DocumentTypeCodeNavigation).WithMany(p => p.Documents)\n                .HasForeignKey(d => d.DocumentTypeCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.ShippingAgentCodeNavigation).WithMany(p => p.Documents).HasForeignKey(d => d.ShippingAgentCode);\n        });\n\n        modelBuilder.Entity<DocumentDraft>(entity =>\n        {\n            entity.HasKey(e => new { e.DocumentId, e.DraftNumber });\n\n            entity.ToTable(\"Document_Drafts\");\n\n            entity.Property(e => e.DocumentId).HasColumnName(\"document_id\");\n            entity.Property(e => e.DraftNumber).HasColumnName(\"draft_number\");\n            entity.Property(e => e.DraftDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"draft_details\");\n\n            entity.HasOne(d => d.Document).WithMany(p => p.DocumentDrafts)\n                .HasForeignKey(d => d.DocumentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<DocumentsMailed>(entity =>\n        {\n            entity.HasKey(e => new { e.DocumentId, e.MailedToAddressId });\n\n            entity.ToTable(\"Documents_Mailed\");\n\n            entity.Property(e => e.DocumentId).HasColumnName(\"document_id\");\n            entity.Property(e => e.MailedToAddressId).HasColumnName(\"mailed_to_address_id\");\n            entity.Property(e => e.MailingDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"mailing_date\");\n\n            entity.HasOne(d => d.Document).WithMany(p => p.DocumentsMaileds)\n                .HasForeignKey(d => d.DocumentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.MailedToAddress).WithMany(p => p.DocumentsMaileds)\n                .HasForeignKey(d => d.MailedToAddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<DraftCopy>(entity =>\n        {\n            entity.HasKey(e => new { e.DocumentId, e.DraftNumber, e.CopyNumber });\n\n            entity.ToTable(\"Draft_Copies\");\n\n            entity.Property(e => e.DocumentId).HasColumnName(\"document_id\");\n            entity.Property(e => e.DraftNumber).HasColumnName(\"draft_number\");\n            entity.Property(e => e.CopyNumber).HasColumnName(\"copy_number\");\n\n            entity.HasOne(d => d.DocumentDraft).WithMany(p => p.DraftCopies)\n                .HasForeignKey(d => new { d.DocumentId, d.DraftNumber })\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasMany(d => d.Employees).WithMany(p => p.DraftCopies)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"CirculationHistory\",\n                    r => r.HasOne<Employee>().WithMany()\n                        .HasForeignKey(\"EmployeeId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<DraftCopy>().WithMany()\n                        .HasForeignKey(\"DocumentId\", \"DraftNumber\", \"CopyNumber\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"DocumentId\", \"DraftNumber\", \"CopyNumber\", \"EmployeeId\");\n                        j.ToTable(\"Circulation_History\");\n                        j.IndexerProperty<int>(\"DocumentId\").HasColumnName(\"document_id\");\n                        j.IndexerProperty<int>(\"DraftNumber\").HasColumnName(\"draft_number\");\n                        j.IndexerProperty<int>(\"CopyNumber\").HasColumnName(\"copy_number\");\n                        j.IndexerProperty<int>(\"EmployeeId\").HasColumnName(\"employee_id\");\n                    });\n        });\n\n        modelBuilder.Entity<Employee>(entity =>\n        {\n            entity.Property(e => e.EmployeeId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"employee_id\");\n            entity.Property(e => e.EmployeeName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"employee_name\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n            entity.Property(e => e.RoleCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"role_code\");\n\n            entity.HasOne(d => d.RoleCodeNavigation).WithMany(p => p.Employees)\n                .HasForeignKey(d => d.RoleCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<RefDocumentStatus>(entity =>\n        {\n            entity.HasKey(e => e.DocumentStatusCode);\n\n            entity.ToTable(\"Ref_Document_Status\");\n\n            entity.Property(e => e.DocumentStatusCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"document_status_code\");\n            entity.Property(e => e.DocumentStatusDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"document_status_description\");\n        });\n\n        modelBuilder.Entity<RefDocumentType>(entity =>\n        {\n            entity.HasKey(e => e.DocumentTypeCode);\n\n            entity.ToTable(\"Ref_Document_Types\");\n\n            entity.Property(e => e.DocumentTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"document_type_code\");\n            entity.Property(e => e.DocumentTypeDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"document_type_description\");\n        });\n\n        modelBuilder.Entity<RefShippingAgent>(entity =>\n        {\n            entity.HasKey(e => e.ShippingAgentCode);\n\n            entity.ToTable(\"Ref_Shipping_Agents\");\n\n            entity.Property(e => e.ShippingAgentCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"shipping_agent_code\");\n            entity.Property(e => e.ShippingAgentDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"shipping_agent_description\");\n            entity.Property(e => e.ShippingAgentName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"shipping_agent_name\");\n        });\n\n        modelBuilder.Entity<Role>(entity =>\n        {\n            entity.HasKey(e => e.RoleCode);\n\n            entity.Property(e => e.RoleCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"role_code\");\n            entity.Property(e => e.RoleDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"role_description\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Address\n{\n    public int AddressId { get; set; }\n\n    public string? AddressDetails { get; set; }\n\n    public virtual ICollection<DocumentsMailed> DocumentsMaileds { get; set; } = new List<DocumentsMailed>();\n}",
      "public partial class Document\n{\n    public int DocumentId { get; set; }\n\n    public string DocumentStatusCode { get; set; } = null!;\n\n    public string DocumentTypeCode { get; set; } = null!;\n\n    public string? ShippingAgentCode { get; set; }\n\n    public DateTime? ReceiptDate { get; set; }\n\n    public string? ReceiptNumber { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual ICollection<DocumentDraft> DocumentDrafts { get; set; } = new List<DocumentDraft>();\n\n    public virtual RefDocumentStatus DocumentStatusCodeNavigation { get; set; } = null!;\n\n    public virtual RefDocumentType DocumentTypeCodeNavigation { get; set; } = null!;\n\n    public virtual ICollection<DocumentsMailed> DocumentsMaileds { get; set; } = new List<DocumentsMailed>();\n\n    public virtual RefShippingAgent? ShippingAgentCodeNavigation { get; set; }\n}",
      "public partial class DocumentDraft\n{\n    public int DocumentId { get; set; }\n\n    public int DraftNumber { get; set; }\n\n    public string? DraftDetails { get; set; }\n\n    public virtual Document Document { get; set; } = null!;\n\n    public virtual ICollection<DraftCopy> DraftCopies { get; set; } = new List<DraftCopy>();\n}",
      "public partial class DocumentsMailed\n{\n    public int DocumentId { get; set; }\n\n    public int MailedToAddressId { get; set; }\n\n    public DateTime? MailingDate { get; set; }\n\n    public virtual Document Document { get; set; } = null!;\n\n    public virtual Address MailedToAddress { get; set; } = null!;\n}",
      "public partial class DraftCopy\n{\n    public int DocumentId { get; set; }\n\n    public int DraftNumber { get; set; }\n\n    public int CopyNumber { get; set; }\n\n    public virtual DocumentDraft DocumentDraft { get; set; } = null!;\n\n    public virtual ICollection<Employee> Employees { get; set; } = new List<Employee>();\n}",
      "public partial class Employee\n{\n    public int EmployeeId { get; set; }\n\n    public string RoleCode { get; set; } = null!;\n\n    public string? EmployeeName { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual Role RoleCodeNavigation { get; set; } = null!;\n\n    public virtual ICollection<DraftCopy> DraftCopies { get; set; } = new List<DraftCopy>();\n}",
      "public partial class RefDocumentStatus\n{\n    public string DocumentStatusCode { get; set; } = null!;\n\n    public string DocumentStatusDescription { get; set; } = null!;\n\n    public virtual ICollection<Document> Documents { get; set; } = new List<Document>();\n}",
      "public partial class RefDocumentType\n{\n    public string DocumentTypeCode { get; set; } = null!;\n\n    public string DocumentTypeDescription { get; set; } = null!;\n\n    public virtual ICollection<Document> Documents { get; set; } = new List<Document>();\n}",
      "public partial class RefShippingAgent\n{\n    public string ShippingAgentCode { get; set; } = null!;\n\n    public string ShippingAgentName { get; set; } = null!;\n\n    public string ShippingAgentDescription { get; set; } = null!;\n\n    public virtual ICollection<Document> Documents { get; set; } = new List<Document>();\n}",
      "public partial class Role\n{\n    public string RoleCode { get; set; } = null!;\n\n    public string? RoleDescription { get; set; }\n\n    public virtual ICollection<Employee> Employees { get; set; } = new List<Employee>();\n}"
    ]
  },
  "inn_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.inn_1;\n\npublic partial class Inn1Context : DbContext\n{\n    public Inn1Context()\n    {\n    }\n\n    public Inn1Context(DbContextOptions<Inn1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Reservation> Reservations { get; set; }\n\n    public virtual DbSet<Room> Rooms { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/inn_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Reservation>(entity =>\n        {\n            entity.HasKey(e => e.Code);\n\n            entity.Property(e => e.Code).ValueGeneratedNever();\n\n            entity.HasOne(d => d.RoomNavigation).WithMany(p => p.Reservations).HasForeignKey(d => d.Room);\n        });\n\n        modelBuilder.Entity<Room>(entity =>\n        {\n            entity.Property(e => e.BasePrice).HasColumnName(\"basePrice\");\n            entity.Property(e => e.BedType).HasColumnName(\"bedType\");\n            entity.Property(e => e.Beds).HasColumnName(\"beds\");\n            entity.Property(e => e.Decor).HasColumnName(\"decor\");\n            entity.Property(e => e.MaxOccupancy).HasColumnName(\"maxOccupancy\");\n            entity.Property(e => e.RoomName).HasColumnName(\"roomName\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Reservation\n{\n    public int Code { get; set; }\n\n    public string? Room { get; set; }\n\n    public string? CheckIn { get; set; }\n\n    public string? CheckOut { get; set; }\n\n    public double? Rate { get; set; }\n\n    public string? LastName { get; set; }\n\n    public string? FirstName { get; set; }\n\n    public int? Adults { get; set; }\n\n    public int? Kids { get; set; }\n\n    public virtual Room? RoomNavigation { get; set; }\n}",
      "public partial class Room\n{\n    public string RoomId { get; set; } = null!;\n\n    public string? RoomName { get; set; }\n\n    public int? Beds { get; set; }\n\n    public string? BedType { get; set; }\n\n    public int? MaxOccupancy { get; set; }\n\n    public int? BasePrice { get; set; }\n\n    public string? Decor { get; set; }\n\n    public virtual ICollection<Reservation> Reservations { get; set; } = new List<Reservation>();\n}"
    ]
  },
  "baseball_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.baseball_1;\n\npublic partial class Baseball1Context : DbContext\n{\n    public Baseball1Context()\n    {\n    }\n\n    public Baseball1Context(DbContextOptions<Baseball1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<AllStar> AllStars { get; set; }\n\n    public virtual DbSet<Appearance> Appearances { get; set; }\n\n    public virtual DbSet<Batting> Battings { get; set; }\n\n    public virtual DbSet<BattingPostseason> BattingPostseasons { get; set; }\n\n    public virtual DbSet<College> Colleges { get; set; }\n\n    public virtual DbSet<Fielding> Fieldings { get; set; }\n\n    public virtual DbSet<FieldingOutfield> FieldingOutfields { get; set; }\n\n    public virtual DbSet<FieldingPostseason> FieldingPostseasons { get; set; }\n\n    public virtual DbSet<HallOfFame> HallOfFames { get; set; }\n\n    public virtual DbSet<HomeGame> HomeGames { get; set; }\n\n    public virtual DbSet<Manager> Managers { get; set; }\n\n    public virtual DbSet<ManagerAward> ManagerAwards { get; set; }\n\n    public virtual DbSet<ManagerAwardVote> ManagerAwardVotes { get; set; }\n\n    public virtual DbSet<ManagerHalf> ManagerHalves { get; set; }\n\n    public virtual DbSet<Park> Parks { get; set; }\n\n    public virtual DbSet<Pitching> Pitchings { get; set; }\n\n    public virtual DbSet<PitchingPostseason> PitchingPostseasons { get; set; }\n\n    public virtual DbSet<Player> Players { get; set; }\n\n    public virtual DbSet<PlayerAward> PlayerAwards { get; set; }\n\n    public virtual DbSet<PlayerAwardVote> PlayerAwardVotes { get; set; }\n\n    public virtual DbSet<PlayerCollege> PlayerColleges { get; set; }\n\n    public virtual DbSet<Postseason> Postseasons { get; set; }\n\n    public virtual DbSet<Salary> Salaries { get; set; }\n\n    public virtual DbSet<Team> Teams { get; set; }\n\n    public virtual DbSet<TeamFranchise> TeamFranchises { get; set; }\n\n    public virtual DbSet<TeamHalf> TeamHalves { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/baseball_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<AllStar>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"all_star\");\n\n            entity.Property(e => e.GameId).HasColumnName(\"game_id\");\n            entity.Property(e => e.GameNum).HasColumnName(\"game_num\");\n            entity.Property(e => e.Gp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"gp\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.StartingPos)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"starting_pos\");\n            entity.Property(e => e.TeamId).HasColumnName(\"team_id\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<Appearance>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"appearances\");\n\n            entity.Property(e => e.G1b).HasColumnName(\"g_1b\");\n            entity.Property(e => e.G2b).HasColumnName(\"g_2b\");\n            entity.Property(e => e.G3b).HasColumnName(\"g_3b\");\n            entity.Property(e => e.GAll)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"g_all\");\n            entity.Property(e => e.GBatting).HasColumnName(\"g_batting\");\n            entity.Property(e => e.GC).HasColumnName(\"g_c\");\n            entity.Property(e => e.GCf).HasColumnName(\"g_cf\");\n            entity.Property(e => e.GDefense)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"g_defense\");\n            entity.Property(e => e.GDh)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"g_dh\");\n            entity.Property(e => e.GLf).HasColumnName(\"g_lf\");\n            entity.Property(e => e.GOf).HasColumnName(\"g_of\");\n            entity.Property(e => e.GP).HasColumnName(\"g_p\");\n            entity.Property(e => e.GPh)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"g_ph\");\n            entity.Property(e => e.GPr)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"g_pr\");\n            entity.Property(e => e.GRf).HasColumnName(\"g_rf\");\n            entity.Property(e => e.GSs).HasColumnName(\"g_ss\");\n            entity.Property(e => e.Gs)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"gs\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.TeamId).HasColumnName(\"team_id\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<Batting>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"batting\");\n\n            entity.Property(e => e.Ab)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"ab\");\n            entity.Property(e => e.Bb)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"bb\");\n            entity.Property(e => e.Cs)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"cs\");\n            entity.Property(e => e.Double)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"double\");\n            entity.Property(e => e.G).HasColumnName(\"g\");\n            entity.Property(e => e.GIdp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"g_idp\");\n            entity.Property(e => e.H)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"h\");\n            entity.Property(e => e.Hbp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"hbp\");\n            entity.Property(e => e.Hr)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"hr\");\n            entity.Property(e => e.Ibb)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"ibb\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.R)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"r\");\n            entity.Property(e => e.Rbi)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"rbi\");\n            entity.Property(e => e.Sb)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"sb\");\n            entity.Property(e => e.Sf)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"sf\");\n            entity.Property(e => e.Sh)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"sh\");\n            entity.Property(e => e.So)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"so\");\n            entity.Property(e => e.Stint).HasColumnName(\"stint\");\n            entity.Property(e => e.TeamId).HasColumnName(\"team_id\");\n            entity.Property(e => e.Triple)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"triple\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<BattingPostseason>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"batting_postseason\");\n\n            entity.Property(e => e.Ab).HasColumnName(\"ab\");\n            entity.Property(e => e.Bb).HasColumnName(\"bb\");\n            entity.Property(e => e.Cs)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"cs\");\n            entity.Property(e => e.Double).HasColumnName(\"double\");\n            entity.Property(e => e.G).HasColumnName(\"g\");\n            entity.Property(e => e.GIdp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"g_idp\");\n            entity.Property(e => e.H).HasColumnName(\"h\");\n            entity.Property(e => e.Hbp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"hbp\");\n            entity.Property(e => e.Hr).HasColumnName(\"hr\");\n            entity.Property(e => e.Ibb)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"ibb\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.R).HasColumnName(\"r\");\n            entity.Property(e => e.Rbi).HasColumnName(\"rbi\");\n            entity.Property(e => e.Round).HasColumnName(\"round\");\n            entity.Property(e => e.Sb).HasColumnName(\"sb\");\n            entity.Property(e => e.Sf)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"sf\");\n            entity.Property(e => e.Sh)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"sh\");\n            entity.Property(e => e.So).HasColumnName(\"so\");\n            entity.Property(e => e.TeamId).HasColumnName(\"team_id\");\n            entity.Property(e => e.Triple).HasColumnName(\"triple\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<College>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"college\");\n\n            entity.Property(e => e.City).HasColumnName(\"city\");\n            entity.Property(e => e.CollegeId).HasColumnName(\"college_id\");\n            entity.Property(e => e.Country).HasColumnName(\"country\");\n            entity.Property(e => e.NameFull).HasColumnName(\"name_full\");\n            entity.Property(e => e.State).HasColumnName(\"state\");\n        });\n\n        modelBuilder.Entity<Fielding>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"fielding\");\n\n            entity.Property(e => e.A)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"a\");\n            entity.Property(e => e.Cs)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"cs\");\n            entity.Property(e => e.Dp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"dp\");\n            entity.Property(e => e.E)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"e\");\n            entity.Property(e => e.G).HasColumnName(\"g\");\n            entity.Property(e => e.Gs)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"gs\");\n            entity.Property(e => e.InnOuts)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"inn_outs\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.Pb)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"pb\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.Po)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"po\");\n            entity.Property(e => e.Pos).HasColumnName(\"pos\");\n            entity.Property(e => e.Sb)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"sb\");\n            entity.Property(e => e.Stint).HasColumnName(\"stint\");\n            entity.Property(e => e.TeamId).HasColumnName(\"team_id\");\n            entity.Property(e => e.Wp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"wp\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n            entity.Property(e => e.Zr)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"zr\");\n        });\n\n        modelBuilder.Entity<FieldingOutfield>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"fielding_outfield\");\n\n            entity.Property(e => e.Gcf)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"gcf\");\n            entity.Property(e => e.Glf)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"glf\");\n            entity.Property(e => e.Grf)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"grf\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.Stint).HasColumnName(\"stint\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<FieldingPostseason>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"fielding_postseason\");\n\n            entity.Property(e => e.A).HasColumnName(\"a\");\n            entity.Property(e => e.Cs)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"cs\");\n            entity.Property(e => e.Dp).HasColumnName(\"dp\");\n            entity.Property(e => e.E).HasColumnName(\"e\");\n            entity.Property(e => e.G).HasColumnName(\"g\");\n            entity.Property(e => e.Gs)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"gs\");\n            entity.Property(e => e.InnOuts)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"inn_outs\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.Pb)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"pb\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.Po).HasColumnName(\"po\");\n            entity.Property(e => e.Pos).HasColumnName(\"pos\");\n            entity.Property(e => e.Round).HasColumnName(\"round\");\n            entity.Property(e => e.Sb)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"sb\");\n            entity.Property(e => e.TeamId).HasColumnName(\"team_id\");\n            entity.Property(e => e.Tp).HasColumnName(\"tp\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<HallOfFame>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"hall_of_fame\");\n\n            entity.Property(e => e.Ballots)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"ballots\");\n            entity.Property(e => e.Category).HasColumnName(\"category\");\n            entity.Property(e => e.Inducted).HasColumnName(\"inducted\");\n            entity.Property(e => e.Needed)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"needed\");\n            entity.Property(e => e.NeededNote).HasColumnName(\"needed_note\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.Votedby).HasColumnName(\"votedby\");\n            entity.Property(e => e.Votes)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"votes\");\n            entity.Property(e => e.Yearid).HasColumnName(\"yearid\");\n        });\n\n        modelBuilder.Entity<HomeGame>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"home_game\");\n\n            entity.Property(e => e.Attendance).HasColumnName(\"attendance\");\n            entity.Property(e => e.Games).HasColumnName(\"games\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.Openings).HasColumnName(\"openings\");\n            entity.Property(e => e.ParkId).HasColumnName(\"park_id\");\n            entity.Property(e => e.SpanFirst).HasColumnName(\"span_first\");\n            entity.Property(e => e.SpanLast).HasColumnName(\"span_last\");\n            entity.Property(e => e.TeamId).HasColumnName(\"team_id\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<Manager>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"manager\");\n\n            entity.Property(e => e.G).HasColumnName(\"g\");\n            entity.Property(e => e.Inseason).HasColumnName(\"inseason\");\n            entity.Property(e => e.L).HasColumnName(\"l\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.PlyrMgr).HasColumnName(\"plyr_mgr\");\n            entity.Property(e => e.Rank)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"rank\");\n            entity.Property(e => e.TeamId).HasColumnName(\"team_id\");\n            entity.Property(e => e.W).HasColumnName(\"w\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<ManagerAward>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"manager_award\");\n\n            entity.Property(e => e.AwardId).HasColumnName(\"award_id\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.Notes)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"notes\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.Tie).HasColumnName(\"tie\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<ManagerAwardVote>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"manager_award_vote\");\n\n            entity.Property(e => e.AwardId).HasColumnName(\"award_id\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.PointsMax).HasColumnName(\"points_max\");\n            entity.Property(e => e.PointsWon).HasColumnName(\"points_won\");\n            entity.Property(e => e.VotesFirst).HasColumnName(\"votes_first\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<ManagerHalf>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"manager_half\");\n\n            entity.Property(e => e.G).HasColumnName(\"g\");\n            entity.Property(e => e.Half).HasColumnName(\"half\");\n            entity.Property(e => e.Inseason).HasColumnName(\"inseason\");\n            entity.Property(e => e.L).HasColumnName(\"l\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.Rank).HasColumnName(\"rank\");\n            entity.Property(e => e.TeamId).HasColumnName(\"team_id\");\n            entity.Property(e => e.W).HasColumnName(\"w\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<Park>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"park\");\n\n            entity.Property(e => e.City).HasColumnName(\"city\");\n            entity.Property(e => e.Country).HasColumnName(\"country\");\n            entity.Property(e => e.ParkAlias).HasColumnName(\"park_alias\");\n            entity.Property(e => e.ParkId).HasColumnName(\"park_id\");\n            entity.Property(e => e.ParkName).HasColumnName(\"park_name\");\n            entity.Property(e => e.State).HasColumnName(\"state\");\n        });\n\n        modelBuilder.Entity<Pitching>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"pitching\");\n\n            entity.Property(e => e.Baopp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"baopp\");\n            entity.Property(e => e.Bb).HasColumnName(\"bb\");\n            entity.Property(e => e.Bfp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"bfp\");\n            entity.Property(e => e.Bk).HasColumnName(\"bk\");\n            entity.Property(e => e.Cg).HasColumnName(\"cg\");\n            entity.Property(e => e.Er).HasColumnName(\"er\");\n            entity.Property(e => e.Era)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"era\");\n            entity.Property(e => e.G).HasColumnName(\"g\");\n            entity.Property(e => e.GIdp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"g_idp\");\n            entity.Property(e => e.Gf)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"gf\");\n            entity.Property(e => e.Gs).HasColumnName(\"gs\");\n            entity.Property(e => e.H).HasColumnName(\"h\");\n            entity.Property(e => e.Hbp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"hbp\");\n            entity.Property(e => e.Hr).HasColumnName(\"hr\");\n            entity.Property(e => e.Ibb)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"ibb\");\n            entity.Property(e => e.Ipouts)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"ipouts\");\n            entity.Property(e => e.L).HasColumnName(\"l\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.R).HasColumnName(\"r\");\n            entity.Property(e => e.Sf)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"sf\");\n            entity.Property(e => e.Sh)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"sh\");\n            entity.Property(e => e.Sho).HasColumnName(\"sho\");\n            entity.Property(e => e.So).HasColumnName(\"so\");\n            entity.Property(e => e.Stint).HasColumnName(\"stint\");\n            entity.Property(e => e.Sv).HasColumnName(\"sv\");\n            entity.Property(e => e.TeamId).HasColumnName(\"team_id\");\n            entity.Property(e => e.W).HasColumnName(\"w\");\n            entity.Property(e => e.Wp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"wp\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<PitchingPostseason>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"pitching_postseason\");\n\n            entity.Property(e => e.Baopp).HasColumnName(\"baopp\");\n            entity.Property(e => e.Bb).HasColumnName(\"bb\");\n            entity.Property(e => e.Bfp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"bfp\");\n            entity.Property(e => e.Bk)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"bk\");\n            entity.Property(e => e.Cg).HasColumnName(\"cg\");\n            entity.Property(e => e.Er).HasColumnName(\"er\");\n            entity.Property(e => e.Era)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"era\");\n            entity.Property(e => e.G).HasColumnName(\"g\");\n            entity.Property(e => e.GIdp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"g_idp\");\n            entity.Property(e => e.Gf).HasColumnName(\"gf\");\n            entity.Property(e => e.Gs).HasColumnName(\"gs\");\n            entity.Property(e => e.H).HasColumnName(\"h\");\n            entity.Property(e => e.Hbp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"hbp\");\n            entity.Property(e => e.Hr).HasColumnName(\"hr\");\n            entity.Property(e => e.Ibb)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"ibb\");\n            entity.Property(e => e.Ipouts).HasColumnName(\"ipouts\");\n            entity.Property(e => e.L).HasColumnName(\"l\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.R).HasColumnName(\"r\");\n            entity.Property(e => e.Round).HasColumnName(\"round\");\n            entity.Property(e => e.Sf)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"sf\");\n            entity.Property(e => e.Sh)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"sh\");\n            entity.Property(e => e.Sho).HasColumnName(\"sho\");\n            entity.Property(e => e.So).HasColumnName(\"so\");\n            entity.Property(e => e.Sv).HasColumnName(\"sv\");\n            entity.Property(e => e.TeamId).HasColumnName(\"team_id\");\n            entity.Property(e => e.W).HasColumnName(\"w\");\n            entity.Property(e => e.Wp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"wp\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<Player>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"player\");\n\n            entity.Property(e => e.Bats).HasColumnName(\"bats\");\n            entity.Property(e => e.BbrefId).HasColumnName(\"bbref_id\");\n            entity.Property(e => e.BirthCity).HasColumnName(\"birth_city\");\n            entity.Property(e => e.BirthCountry).HasColumnName(\"birth_country\");\n            entity.Property(e => e.BirthDay)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"birth_day\");\n            entity.Property(e => e.BirthMonth)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"birth_month\");\n            entity.Property(e => e.BirthState).HasColumnName(\"birth_state\");\n            entity.Property(e => e.BirthYear)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"birth_year\");\n            entity.Property(e => e.DeathCity).HasColumnName(\"death_city\");\n            entity.Property(e => e.DeathCountry).HasColumnName(\"death_country\");\n            entity.Property(e => e.DeathDay)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"death_day\");\n            entity.Property(e => e.DeathMonth)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"death_month\");\n            entity.Property(e => e.DeathState).HasColumnName(\"death_state\");\n            entity.Property(e => e.DeathYear)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"death_year\");\n            entity.Property(e => e.Debut).HasColumnName(\"debut\");\n            entity.Property(e => e.FinalGame).HasColumnName(\"final_game\");\n            entity.Property(e => e.Height)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"height\");\n            entity.Property(e => e.NameFirst).HasColumnName(\"name_first\");\n            entity.Property(e => e.NameGiven).HasColumnName(\"name_given\");\n            entity.Property(e => e.NameLast).HasColumnName(\"name_last\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.RetroId).HasColumnName(\"retro_id\");\n            entity.Property(e => e.Throws).HasColumnName(\"throws\");\n            entity.Property(e => e.Weight)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"weight\");\n        });\n\n        modelBuilder.Entity<PlayerAward>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"player_award\");\n\n            entity.Property(e => e.AwardId).HasColumnName(\"award_id\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.Notes).HasColumnName(\"notes\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.Tie).HasColumnName(\"tie\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<PlayerAwardVote>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"player_award_vote\");\n\n            entity.Property(e => e.AwardId).HasColumnName(\"award_id\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.PointsMax).HasColumnName(\"points_max\");\n            entity.Property(e => e.PointsWon)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"points_won\");\n            entity.Property(e => e.VotesFirst)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"votes_first\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<PlayerCollege>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"player_college\");\n\n            entity.Property(e => e.CollegeId).HasColumnName(\"college_id\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<Postseason>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"postseason\");\n\n            entity.Property(e => e.LeagueIdLoser).HasColumnName(\"league_id_loser\");\n            entity.Property(e => e.LeagueIdWinner).HasColumnName(\"league_id_winner\");\n            entity.Property(e => e.Losses).HasColumnName(\"losses\");\n            entity.Property(e => e.Round).HasColumnName(\"round\");\n            entity.Property(e => e.TeamIdLoser).HasColumnName(\"team_id_loser\");\n            entity.Property(e => e.TeamIdWinner).HasColumnName(\"team_id_winner\");\n            entity.Property(e => e.Ties).HasColumnName(\"ties\");\n            entity.Property(e => e.Wins).HasColumnName(\"wins\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<Salary>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"salary\");\n\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.PlayerId).HasColumnName(\"player_id\");\n            entity.Property(e => e.Salary1).HasColumnName(\"salary\");\n            entity.Property(e => e.TeamId).HasColumnName(\"team_id\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<Team>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"team\");\n\n            entity.Property(e => e.Ab).HasColumnName(\"ab\");\n            entity.Property(e => e.Attendance)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"attendance\");\n            entity.Property(e => e.Bb).HasColumnName(\"bb\");\n            entity.Property(e => e.Bba).HasColumnName(\"bba\");\n            entity.Property(e => e.Bpf).HasColumnName(\"bpf\");\n            entity.Property(e => e.Cg).HasColumnName(\"cg\");\n            entity.Property(e => e.Cs)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"cs\");\n            entity.Property(e => e.DivId).HasColumnName(\"div_id\");\n            entity.Property(e => e.DivWin).HasColumnName(\"div_win\");\n            entity.Property(e => e.Double).HasColumnName(\"double\");\n            entity.Property(e => e.Dp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"dp\");\n            entity.Property(e => e.E).HasColumnName(\"e\");\n            entity.Property(e => e.Er).HasColumnName(\"er\");\n            entity.Property(e => e.Era)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"era\");\n            entity.Property(e => e.Fp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"fp\");\n            entity.Property(e => e.FranchiseId).HasColumnName(\"franchise_id\");\n            entity.Property(e => e.G).HasColumnName(\"g\");\n            entity.Property(e => e.Ghome)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"ghome\");\n            entity.Property(e => e.H).HasColumnName(\"h\");\n            entity.Property(e => e.Ha).HasColumnName(\"ha\");\n            entity.Property(e => e.Hbp)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"hbp\");\n            entity.Property(e => e.Hr).HasColumnName(\"hr\");\n            entity.Property(e => e.Hra).HasColumnName(\"hra\");\n            entity.Property(e => e.Ipouts).HasColumnName(\"ipouts\");\n            entity.Property(e => e.L).HasColumnName(\"l\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.LgWin).HasColumnName(\"lg_win\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.Park).HasColumnName(\"park\");\n            entity.Property(e => e.Ppf).HasColumnName(\"ppf\");\n            entity.Property(e => e.R).HasColumnName(\"r\");\n            entity.Property(e => e.Ra).HasColumnName(\"ra\");\n            entity.Property(e => e.Rank).HasColumnName(\"rank\");\n            entity.Property(e => e.Sb)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"sb\");\n            entity.Property(e => e.Sf)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"sf\");\n            entity.Property(e => e.Sho).HasColumnName(\"sho\");\n            entity.Property(e => e.So)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"so\");\n            entity.Property(e => e.Soa).HasColumnName(\"soa\");\n            entity.Property(e => e.Sv).HasColumnName(\"sv\");\n            entity.Property(e => e.TeamId).HasColumnName(\"team_id\");\n            entity.Property(e => e.TeamIdBr).HasColumnName(\"team_id_br\");\n            entity.Property(e => e.TeamIdLahman45).HasColumnName(\"team_id_lahman45\");\n            entity.Property(e => e.TeamIdRetro).HasColumnName(\"team_id_retro\");\n            entity.Property(e => e.Triple).HasColumnName(\"triple\");\n            entity.Property(e => e.W).HasColumnName(\"w\");\n            entity.Property(e => e.WcWin).HasColumnName(\"wc_win\");\n            entity.Property(e => e.WsWin).HasColumnName(\"ws_win\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<TeamFranchise>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"team_franchise\");\n\n            entity.Property(e => e.Active).HasColumnName(\"active\");\n            entity.Property(e => e.FranchiseId).HasColumnName(\"franchise_id\");\n            entity.Property(e => e.FranchiseName).HasColumnName(\"franchise_name\");\n            entity.Property(e => e.NaAssoc).HasColumnName(\"na_assoc\");\n        });\n\n        modelBuilder.Entity<TeamHalf>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"team_half\");\n\n            entity.Property(e => e.DivId).HasColumnName(\"div_id\");\n            entity.Property(e => e.DivWin).HasColumnName(\"div_win\");\n            entity.Property(e => e.G).HasColumnName(\"g\");\n            entity.Property(e => e.Half).HasColumnName(\"half\");\n            entity.Property(e => e.L).HasColumnName(\"l\");\n            entity.Property(e => e.LeagueId).HasColumnName(\"league_id\");\n            entity.Property(e => e.Rank).HasColumnName(\"rank\");\n            entity.Property(e => e.TeamId).HasColumnName(\"team_id\");\n            entity.Property(e => e.W).HasColumnName(\"w\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class AllStar\n{\n    public string? PlayerId { get; set; }\n\n    public int? Year { get; set; }\n\n    public int? GameNum { get; set; }\n\n    public string? GameId { get; set; }\n\n    public string? TeamId { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public string? Gp { get; set; }\n\n    public string? StartingPos { get; set; }\n}",
      "public partial class Appearance\n{\n    public int? Year { get; set; }\n\n    public string? TeamId { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public string? PlayerId { get; set; }\n\n    public int? GAll { get; set; }\n\n    public string? Gs { get; set; }\n\n    public int? GBatting { get; set; }\n\n    public int? GDefense { get; set; }\n\n    public int? GP { get; set; }\n\n    public int? GC { get; set; }\n\n    public int? G1b { get; set; }\n\n    public int? G2b { get; set; }\n\n    public int? G3b { get; set; }\n\n    public int? GSs { get; set; }\n\n    public int? GLf { get; set; }\n\n    public int? GCf { get; set; }\n\n    public int? GRf { get; set; }\n\n    public int? GOf { get; set; }\n\n    public string? GDh { get; set; }\n\n    public string? GPh { get; set; }\n\n    public string? GPr { get; set; }\n}",
      "public partial class Batting\n{\n    public string? PlayerId { get; set; }\n\n    public int? Year { get; set; }\n\n    public int? Stint { get; set; }\n\n    public string? TeamId { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public int? G { get; set; }\n\n    public string? Ab { get; set; }\n\n    public string? R { get; set; }\n\n    public string? H { get; set; }\n\n    public string? Double { get; set; }\n\n    public string? Triple { get; set; }\n\n    public string? Hr { get; set; }\n\n    public string? Rbi { get; set; }\n\n    public string? Sb { get; set; }\n\n    public string? Cs { get; set; }\n\n    public string? Bb { get; set; }\n\n    public string? So { get; set; }\n\n    public string? Ibb { get; set; }\n\n    public string? Hbp { get; set; }\n\n    public string? Sh { get; set; }\n\n    public string? Sf { get; set; }\n\n    public string? GIdp { get; set; }\n}",
      "public partial class BattingPostseason\n{\n    public int? Year { get; set; }\n\n    public string? Round { get; set; }\n\n    public string? PlayerId { get; set; }\n\n    public string? TeamId { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public int? G { get; set; }\n\n    public int? Ab { get; set; }\n\n    public int? R { get; set; }\n\n    public int? H { get; set; }\n\n    public int? Double { get; set; }\n\n    public int? Triple { get; set; }\n\n    public int? Hr { get; set; }\n\n    public int? Rbi { get; set; }\n\n    public int? Sb { get; set; }\n\n    public string? Cs { get; set; }\n\n    public int? Bb { get; set; }\n\n    public int? So { get; set; }\n\n    public string? Ibb { get; set; }\n\n    public string? Hbp { get; set; }\n\n    public string? Sh { get; set; }\n\n    public string? Sf { get; set; }\n\n    public string? GIdp { get; set; }\n}",
      "public partial class College\n{\n    public string CollegeId { get; set; } = null!;\n\n    public string? NameFull { get; set; }\n\n    public string? City { get; set; }\n\n    public string? State { get; set; }\n\n    public string? Country { get; set; }\n}",
      "public partial class Fielding\n{\n    public string? PlayerId { get; set; }\n\n    public int? Year { get; set; }\n\n    public int? Stint { get; set; }\n\n    public string? TeamId { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public string? Pos { get; set; }\n\n    public int? G { get; set; }\n\n    public string? Gs { get; set; }\n\n    public string? InnOuts { get; set; }\n\n    public int? Po { get; set; }\n\n    public string? A { get; set; }\n\n    public string? E { get; set; }\n\n    public string? Dp { get; set; }\n\n    public string? Pb { get; set; }\n\n    public string? Wp { get; set; }\n\n    public string? Sb { get; set; }\n\n    public string? Cs { get; set; }\n\n    public string? Zr { get; set; }\n}",
      "public partial class FieldingOutfield\n{\n    public string? PlayerId { get; set; }\n\n    public int? Year { get; set; }\n\n    public int? Stint { get; set; }\n\n    public string? Glf { get; set; }\n\n    public string? Gcf { get; set; }\n\n    public string? Grf { get; set; }\n}",
      "public partial class FieldingPostseason\n{\n    public string? PlayerId { get; set; }\n\n    public int? Year { get; set; }\n\n    public string? TeamId { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public string? Round { get; set; }\n\n    public string? Pos { get; set; }\n\n    public int? G { get; set; }\n\n    public string? Gs { get; set; }\n\n    public string? InnOuts { get; set; }\n\n    public int? Po { get; set; }\n\n    public int? A { get; set; }\n\n    public int? E { get; set; }\n\n    public int? Dp { get; set; }\n\n    public int? Tp { get; set; }\n\n    public string? Pb { get; set; }\n\n    public string? Sb { get; set; }\n\n    public string? Cs { get; set; }\n}",
      "public partial class HallOfFame\n{\n    public string? PlayerId { get; set; }\n\n    public int? Yearid { get; set; }\n\n    public string? Votedby { get; set; }\n\n    public string? Ballots { get; set; }\n\n    public string? Needed { get; set; }\n\n    public string? Votes { get; set; }\n\n    public string? Inducted { get; set; }\n\n    public string? Category { get; set; }\n\n    public string? NeededNote { get; set; }\n}",
      "public partial class HomeGame\n{\n    public int? Year { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public string? TeamId { get; set; }\n\n    public string? ParkId { get; set; }\n\n    public DateOnly? SpanFirst { get; set; }\n\n    public DateOnly? SpanLast { get; set; }\n\n    public int? Games { get; set; }\n\n    public int? Openings { get; set; }\n\n    public int? Attendance { get; set; }\n}",
      "public partial class Manager\n{\n    public string? PlayerId { get; set; }\n\n    public int? Year { get; set; }\n\n    public string? TeamId { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public int? Inseason { get; set; }\n\n    public int? G { get; set; }\n\n    public int? W { get; set; }\n\n    public int? L { get; set; }\n\n    public string? Rank { get; set; }\n\n    public string? PlyrMgr { get; set; }\n}",
      "public partial class ManagerAward\n{\n    public string? PlayerId { get; set; }\n\n    public string? AwardId { get; set; }\n\n    public int? Year { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public string? Tie { get; set; }\n\n    public string? Notes { get; set; }\n}",
      "public partial class ManagerAwardVote\n{\n    public string? AwardId { get; set; }\n\n    public int? Year { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public string? PlayerId { get; set; }\n\n    public int? PointsWon { get; set; }\n\n    public int? PointsMax { get; set; }\n\n    public int? VotesFirst { get; set; }\n}",
      "public partial class ManagerHalf\n{\n    public string? PlayerId { get; set; }\n\n    public int? Year { get; set; }\n\n    public string? TeamId { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public int? Inseason { get; set; }\n\n    public int? Half { get; set; }\n\n    public int? G { get; set; }\n\n    public int? W { get; set; }\n\n    public int? L { get; set; }\n\n    public int? Rank { get; set; }\n}",
      "public partial class Park\n{\n    public string ParkId { get; set; } = null!;\n\n    public string? ParkName { get; set; }\n\n    public string? ParkAlias { get; set; }\n\n    public string? City { get; set; }\n\n    public string? State { get; set; }\n\n    public string? Country { get; set; }\n}",
      "public partial class Pitching\n{\n    public string? PlayerId { get; set; }\n\n    public int? Year { get; set; }\n\n    public int? Stint { get; set; }\n\n    public string? TeamId { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public int? W { get; set; }\n\n    public int? L { get; set; }\n\n    public int? G { get; set; }\n\n    public int? Gs { get; set; }\n\n    public int? Cg { get; set; }\n\n    public int? Sho { get; set; }\n\n    public int? Sv { get; set; }\n\n    public string? Ipouts { get; set; }\n\n    public int? H { get; set; }\n\n    public int? Er { get; set; }\n\n    public int? Hr { get; set; }\n\n    public int? Bb { get; set; }\n\n    public int? So { get; set; }\n\n    public string? Baopp { get; set; }\n\n    public string? Era { get; set; }\n\n    public string? Ibb { get; set; }\n\n    public string? Wp { get; set; }\n\n    public string? Hbp { get; set; }\n\n    public int? Bk { get; set; }\n\n    public string? Bfp { get; set; }\n\n    public string? Gf { get; set; }\n\n    public int? R { get; set; }\n\n    public string? Sh { get; set; }\n\n    public string? Sf { get; set; }\n\n    public string? GIdp { get; set; }\n}",
      "public partial class PitchingPostseason\n{\n    public string? PlayerId { get; set; }\n\n    public int? Year { get; set; }\n\n    public string? Round { get; set; }\n\n    public string? TeamId { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public int? W { get; set; }\n\n    public int? L { get; set; }\n\n    public int? G { get; set; }\n\n    public int? Gs { get; set; }\n\n    public int? Cg { get; set; }\n\n    public int? Sho { get; set; }\n\n    public int? Sv { get; set; }\n\n    public int? Ipouts { get; set; }\n\n    public int? H { get; set; }\n\n    public int? Er { get; set; }\n\n    public int? Hr { get; set; }\n\n    public int? Bb { get; set; }\n\n    public int? So { get; set; }\n\n    public string? Baopp { get; set; }\n\n    public string? Era { get; set; }\n\n    public string? Ibb { get; set; }\n\n    public string? Wp { get; set; }\n\n    public string? Hbp { get; set; }\n\n    public string? Bk { get; set; }\n\n    public string? Bfp { get; set; }\n\n    public int? Gf { get; set; }\n\n    public int? R { get; set; }\n\n    public string? Sh { get; set; }\n\n    public string? Sf { get; set; }\n\n    public string? GIdp { get; set; }\n}",
      "public partial class Player\n{\n    public string PlayerId { get; set; } = null!;\n\n    public string? BirthYear { get; set; }\n\n    public string? BirthMonth { get; set; }\n\n    public string? BirthDay { get; set; }\n\n    public string? BirthCountry { get; set; }\n\n    public string? BirthState { get; set; }\n\n    public string? BirthCity { get; set; }\n\n    public string? DeathYear { get; set; }\n\n    public string? DeathMonth { get; set; }\n\n    public string? DeathDay { get; set; }\n\n    public string? DeathCountry { get; set; }\n\n    public string? DeathState { get; set; }\n\n    public string? DeathCity { get; set; }\n\n    public string? NameFirst { get; set; }\n\n    public string? NameLast { get; set; }\n\n    public string? NameGiven { get; set; }\n\n    public string? Weight { get; set; }\n\n    public string? Height { get; set; }\n\n    public string? Bats { get; set; }\n\n    public string? Throws { get; set; }\n\n    public DateOnly? Debut { get; set; }\n\n    public DateOnly? FinalGame { get; set; }\n\n    public string? RetroId { get; set; }\n\n    public string? BbrefId { get; set; }\n}",
      "public partial class PlayerAward\n{\n    public string? PlayerId { get; set; }\n\n    public string? AwardId { get; set; }\n\n    public int? Year { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public string? Tie { get; set; }\n\n    public string? Notes { get; set; }\n}",
      "public partial class PlayerAwardVote\n{\n    public string? AwardId { get; set; }\n\n    public int? Year { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public string? PlayerId { get; set; }\n\n    public int? PointsWon { get; set; }\n\n    public int? PointsMax { get; set; }\n\n    public string? VotesFirst { get; set; }\n}",
      "public partial class PlayerCollege\n{\n    public string? PlayerId { get; set; }\n\n    public string? CollegeId { get; set; }\n\n    public int? Year { get; set; }\n}",
      "public partial class Postseason\n{\n    public int? Year { get; set; }\n\n    public string? Round { get; set; }\n\n    public string? TeamIdWinner { get; set; }\n\n    public string? LeagueIdWinner { get; set; }\n\n    public string? TeamIdLoser { get; set; }\n\n    public string? LeagueIdLoser { get; set; }\n\n    public int? Wins { get; set; }\n\n    public int? Losses { get; set; }\n\n    public int? Ties { get; set; }\n}",
      "public partial class Salary\n{\n    public int? Year { get; set; }\n\n    public string? TeamId { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public string? PlayerId { get; set; }\n\n    public int? Salary1 { get; set; }\n}",
      "public partial class Team\n{\n    public int? Year { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public string TeamId { get; set; } = null!;\n\n    public string? FranchiseId { get; set; }\n\n    public string? DivId { get; set; }\n\n    public int? Rank { get; set; }\n\n    public int? G { get; set; }\n\n    public string? Ghome { get; set; }\n\n    public int? W { get; set; }\n\n    public int? L { get; set; }\n\n    public string? DivWin { get; set; }\n\n    public string? WcWin { get; set; }\n\n    public string? LgWin { get; set; }\n\n    public string? WsWin { get; set; }\n\n    public int? R { get; set; }\n\n    public int? Ab { get; set; }\n\n    public int? H { get; set; }\n\n    public int? Double { get; set; }\n\n    public int? Triple { get; set; }\n\n    public int? Hr { get; set; }\n\n    public int? Bb { get; set; }\n\n    public string? So { get; set; }\n\n    public string? Sb { get; set; }\n\n    public string? Cs { get; set; }\n\n    public string? Hbp { get; set; }\n\n    public string? Sf { get; set; }\n\n    public int? Ra { get; set; }\n\n    public int? Er { get; set; }\n\n    public int? Era { get; set; }\n\n    public int? Cg { get; set; }\n\n    public int? Sho { get; set; }\n\n    public int? Sv { get; set; }\n\n    public int? Ipouts { get; set; }\n\n    public int? Ha { get; set; }\n\n    public int? Hra { get; set; }\n\n    public int? Bba { get; set; }\n\n    public int? Soa { get; set; }\n\n    public int? E { get; set; }\n\n    public string? Dp { get; set; }\n\n    public double? Fp { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Park { get; set; }\n\n    public string? Attendance { get; set; }\n\n    public int? Bpf { get; set; }\n\n    public int? Ppf { get; set; }\n\n    public string? TeamIdBr { get; set; }\n\n    public string? TeamIdLahman45 { get; set; }\n\n    public string? TeamIdRetro { get; set; }\n}",
      "public partial class TeamFranchise\n{\n    public string? FranchiseId { get; set; }\n\n    public string? FranchiseName { get; set; }\n\n    public string? Active { get; set; }\n\n    public string? NaAssoc { get; set; }\n}",
      "public partial class TeamHalf\n{\n    public int? Year { get; set; }\n\n    public string? LeagueId { get; set; }\n\n    public string? TeamId { get; set; }\n\n    public int? Half { get; set; }\n\n    public string? DivId { get; set; }\n\n    public string? DivWin { get; set; }\n\n    public int? Rank { get; set; }\n\n    public int? G { get; set; }\n\n    public int? W { get; set; }\n\n    public int? L { get; set; }\n}"
    ]
  },
  "musical": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.musical;\n\npublic partial class MusicalContext : DbContext\n{\n    public MusicalContext()\n    {\n    }\n\n    public MusicalContext(DbContextOptions<MusicalContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Actor> Actors { get; set; }\n\n    public virtual DbSet<Musical> Musicals { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/musical.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Actor>(entity =>\n        {\n            entity.ToTable(\"actor\");\n\n            entity.Property(e => e.ActorId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Actor_ID\");\n            entity.Property(e => e.Age)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"age\");\n            entity.Property(e => e.MusicalId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Musical_ID\");\n\n            entity.HasOne(d => d.Musical).WithMany(p => p.InverseMusical).HasForeignKey(d => d.MusicalId);\n        });\n\n        modelBuilder.Entity<Musical>(entity =>\n        {\n            entity.ToTable(\"musical\");\n\n            entity.Property(e => e.MusicalId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Musical_ID\");\n            entity.Property(e => e.Year).HasColumnType(\"INT\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Actor\n{\n    public int ActorId { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? MusicalId { get; set; }\n\n    public string? Character { get; set; }\n\n    public string? Duration { get; set; }\n\n    public int? Age { get; set; }\n\n    public virtual ICollection<Actor> InverseMusical { get; set; } = new List<Actor>();\n\n    public virtual Actor? Musical { get; set; }\n}",
      "public partial class Musical\n{\n    public int MusicalId { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? Year { get; set; }\n\n    public string? Award { get; set; }\n\n    public string? Category { get; set; }\n\n    public string? Nominee { get; set; }\n\n    public string? Result { get; set; }\n}"
    ]
  },
  "journal_committee": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.journal_committee;\n\npublic partial class JournalCommitteeContext : DbContext\n{\n    public JournalCommitteeContext()\n    {\n    }\n\n    public JournalCommitteeContext(DbContextOptions<JournalCommitteeContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Editor> Editors { get; set; }\n\n    public virtual DbSet<Journal> Journals { get; set; }\n\n    public virtual DbSet<JournalCommittee> JournalCommittees { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/journal_committee.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Editor>(entity =>\n        {\n            entity.ToTable(\"editor\");\n\n            entity.Property(e => e.EditorId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Editor_ID\");\n        });\n\n        modelBuilder.Entity<Journal>(entity =>\n        {\n            entity.ToTable(\"journal\");\n\n            entity.Property(e => e.JournalId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Journal_ID\");\n            entity.Property(e => e.Sales).HasColumnType(\"INT\");\n        });\n\n        modelBuilder.Entity<JournalCommittee>(entity =>\n        {\n            entity.HasKey(e => new { e.EditorId, e.JournalId });\n\n            entity.ToTable(\"journal_committee\");\n\n            entity.Property(e => e.EditorId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Editor_ID\");\n            entity.Property(e => e.JournalId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Journal_ID\");\n            entity.Property(e => e.WorkType).HasColumnName(\"Work_Type\");\n\n            entity.HasOne(d => d.Editor).WithMany(p => p.JournalCommittees)\n                .HasForeignKey(d => d.EditorId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Journal).WithMany(p => p.JournalCommittees)\n                .HasForeignKey(d => d.JournalId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Editor\n{\n    public int EditorId { get; set; }\n\n    public string? Name { get; set; }\n\n    public double? Age { get; set; }\n\n    public virtual ICollection<JournalCommittee> JournalCommittees { get; set; } = new List<JournalCommittee>();\n}",
      "public partial class Journal\n{\n    public int JournalId { get; set; }\n\n    public string? Date { get; set; }\n\n    public string? Theme { get; set; }\n\n    public int? Sales { get; set; }\n\n    public virtual ICollection<JournalCommittee> JournalCommittees { get; set; } = new List<JournalCommittee>();\n}",
      "public partial class JournalCommittee\n{\n    public int EditorId { get; set; }\n\n    public int JournalId { get; set; }\n\n    public string? WorkType { get; set; }\n\n    public virtual Editor Editor { get; set; } = null!;\n\n    public virtual Journal Journal { get; set; } = null!;\n}"
    ]
  },
  "singer": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.singer;\n\npublic partial class SingerContext : DbContext\n{\n    public SingerContext()\n    {\n    }\n\n    public SingerContext(DbContextOptions<SingerContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Singer> Singers { get; set; }\n\n    public virtual DbSet<Song> Songs { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/singer.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Singer>(entity =>\n        {\n            entity.ToTable(\"singer\");\n\n            entity.Property(e => e.SingerId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Singer_ID\");\n            entity.Property(e => e.BirthYear).HasColumnName(\"Birth_Year\");\n            entity.Property(e => e.NetWorthMillions).HasColumnName(\"Net_Worth_Millions\");\n        });\n\n        modelBuilder.Entity<Song>(entity =>\n        {\n            entity.ToTable(\"song\");\n\n            entity.Property(e => e.SongId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Song_ID\");\n            entity.Property(e => e.HighestPosition).HasColumnName(\"Highest_Position\");\n            entity.Property(e => e.SingerId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Singer_ID\");\n\n            entity.HasOne(d => d.Singer).WithMany(p => p.Songs).HasForeignKey(d => d.SingerId);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Singer\n{\n    public int SingerId { get; set; }\n\n    public string? Name { get; set; }\n\n    public double? BirthYear { get; set; }\n\n    public double? NetWorthMillions { get; set; }\n\n    public string? Citizenship { get; set; }\n\n    public virtual ICollection<Song> Songs { get; set; } = new List<Song>();\n}",
      "public partial class Song\n{\n    public int SongId { get; set; }\n\n    public string? Title { get; set; }\n\n    public int? SingerId { get; set; }\n\n    public double? Sales { get; set; }\n\n    public double? HighestPosition { get; set; }\n\n    public virtual Singer? Singer { get; set; }\n}"
    ]
  },
  "cre_Theme_park": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.cre_Theme_park;\n\npublic partial class CreThemeParkContext : DbContext\n{\n    public CreThemeParkContext()\n    {\n    }\n\n    public CreThemeParkContext(DbContextOptions<CreThemeParkContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Feature> Features { get; set; }\n\n    public virtual DbSet<Hotel> Hotels { get; set; }\n\n    public virtual DbSet<Location> Locations { get; set; }\n\n    public virtual DbSet<Museum> Museums { get; set; }\n\n    public virtual DbSet<Photo> Photos { get; set; }\n\n    public virtual DbSet<RefAttractionType> RefAttractionTypes { get; set; }\n\n    public virtual DbSet<RefHotelStarRating> RefHotelStarRatings { get; set; }\n\n    public virtual DbSet<RoyalFamily> RoyalFamilies { get; set; }\n\n    public virtual DbSet<Shop> Shops { get; set; }\n\n    public virtual DbSet<Staff> Staff { get; set; }\n\n    public virtual DbSet<StreetMarket> StreetMarkets { get; set; }\n\n    public virtual DbSet<ThemePark> ThemeParks { get; set; }\n\n    public virtual DbSet<TouristAttraction> TouristAttractions { get; set; }\n\n    public virtual DbSet<Visit> Visits { get; set; }\n\n    public virtual DbSet<Visitor> Visitors { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/cre_Theme_park.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Feature>(entity =>\n        {\n            entity.Property(e => e.FeatureId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Feature_ID\");\n            entity.Property(e => e.FeatureDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Feature_Details\");\n        });\n\n        modelBuilder.Entity<Hotel>(entity =>\n        {\n            entity.Property(e => e.HotelId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"hotel_id\");\n            entity.Property(e => e.OtherHotelDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_hotel_details\");\n            entity.Property(e => e.PetsAllowedYn)\n                .HasColumnType(\"CHAR(1)\")\n                .HasColumnName(\"pets_allowed_yn\");\n            entity.Property(e => e.PriceRange).HasColumnName(\"price_range\");\n            entity.Property(e => e.StarRatingCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"star_rating_code\");\n\n            entity.HasOne(d => d.StarRatingCodeNavigation).WithMany(p => p.Hotels)\n                .HasForeignKey(d => d.StarRatingCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Location>(entity =>\n        {\n            entity.Property(e => e.LocationId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Location_ID\");\n            entity.Property(e => e.Address).HasColumnType(\"VARCHAR(255)\");\n            entity.Property(e => e.LocationName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Location_Name\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Other_Details\");\n        });\n\n        modelBuilder.Entity<Museum>(entity =>\n        {\n            entity.Property(e => e.MuseumId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Museum_ID\");\n            entity.Property(e => e.MuseumDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Museum_Details\");\n\n            entity.HasOne(d => d.MuseumNavigation).WithOne(p => p.Museum)\n                .HasForeignKey<Museum>(d => d.MuseumId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Photo>(entity =>\n        {\n            entity.Property(e => e.PhotoId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Photo_ID\");\n            entity.Property(e => e.Description).HasColumnType(\"VARCHAR(255)\");\n            entity.Property(e => e.Filename).HasColumnType(\"VARCHAR(255)\");\n            entity.Property(e => e.Name).HasColumnType(\"VARCHAR(255)\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Other_Details\");\n            entity.Property(e => e.TouristAttractionId).HasColumnName(\"Tourist_Attraction_ID\");\n\n            entity.HasOne(d => d.TouristAttraction).WithMany(p => p.Photos)\n                .HasForeignKey(d => d.TouristAttractionId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<RefAttractionType>(entity =>\n        {\n            entity.HasKey(e => e.AttractionTypeCode);\n\n            entity.ToTable(\"Ref_Attraction_Types\");\n\n            entity.Property(e => e.AttractionTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Attraction_Type_Code\");\n            entity.Property(e => e.AttractionTypeDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Attraction_Type_Description\");\n        });\n\n        modelBuilder.Entity<RefHotelStarRating>(entity =>\n        {\n            entity.HasKey(e => e.StarRatingCode);\n\n            entity.ToTable(\"Ref_Hotel_Star_Ratings\");\n\n            entity.Property(e => e.StarRatingCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"star_rating_code\");\n            entity.Property(e => e.StarRatingDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"star_rating_description\");\n        });\n\n        modelBuilder.Entity<RoyalFamily>(entity =>\n        {\n            entity.ToTable(\"Royal_Family\");\n\n            entity.Property(e => e.RoyalFamilyId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Royal_Family_ID\");\n            entity.Property(e => e.RoyalFamilyDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Royal_Family_Details\");\n\n            entity.HasOne(d => d.RoyalFamilyNavigation).WithOne(p => p.RoyalFamily)\n                .HasForeignKey<RoyalFamily>(d => d.RoyalFamilyId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Shop>(entity =>\n        {\n            entity.Property(e => e.ShopId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Shop_ID\");\n            entity.Property(e => e.ShopDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Shop_Details\");\n\n            entity.HasOne(d => d.ShopNavigation).WithOne(p => p.Shop)\n                .HasForeignKey<Shop>(d => d.ShopId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Staff>(entity =>\n        {\n            entity.Property(e => e.StaffId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Staff_ID\");\n            entity.Property(e => e.Name).HasColumnType(\"VARCHAR(40)\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Other_Details\");\n            entity.Property(e => e.TouristAttractionId).HasColumnName(\"Tourist_Attraction_ID\");\n\n            entity.HasOne(d => d.TouristAttraction).WithMany(p => p.Staff)\n                .HasForeignKey(d => d.TouristAttractionId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<StreetMarket>(entity =>\n        {\n            entity.HasKey(e => e.MarketId);\n\n            entity.ToTable(\"Street_Markets\");\n\n            entity.Property(e => e.MarketId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Market_ID\");\n            entity.Property(e => e.MarketDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Market_Details\");\n\n            entity.HasOne(d => d.Market).WithOne(p => p.StreetMarket)\n                .HasForeignKey<StreetMarket>(d => d.MarketId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ThemePark>(entity =>\n        {\n            entity.ToTable(\"Theme_Parks\");\n\n            entity.Property(e => e.ThemeParkId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Theme_Park_ID\");\n            entity.Property(e => e.ThemeParkDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Theme_Park_Details\");\n\n            entity.HasOne(d => d.ThemeParkNavigation).WithOne(p => p.ThemePark)\n                .HasForeignKey<ThemePark>(d => d.ThemeParkId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<TouristAttraction>(entity =>\n        {\n            entity.ToTable(\"Tourist_Attractions\");\n\n            entity.Property(e => e.TouristAttractionId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Tourist_Attraction_ID\");\n            entity.Property(e => e.AttractionTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Attraction_Type_Code\");\n            entity.Property(e => e.Description).HasColumnType(\"VARCHAR(255)\");\n            entity.Property(e => e.HowToGetThere)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"How_to_Get_There\");\n            entity.Property(e => e.LocationId).HasColumnName(\"Location_ID\");\n            entity.Property(e => e.Name).HasColumnType(\"VARCHAR(255)\");\n            entity.Property(e => e.OpeningHours)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Opening_Hours\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Other_Details\");\n\n            entity.HasOne(d => d.AttractionTypeCodeNavigation).WithMany(p => p.TouristAttractions)\n                .HasForeignKey(d => d.AttractionTypeCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Location).WithMany(p => p.TouristAttractions)\n                .HasForeignKey(d => d.LocationId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasMany(d => d.Features).WithMany(p => p.TouristAttractions)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"TouristAttractionFeature\",\n                    r => r.HasOne<Feature>().WithMany()\n                        .HasForeignKey(\"FeatureId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<TouristAttraction>().WithMany()\n                        .HasForeignKey(\"TouristAttractionId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"TouristAttractionId\", \"FeatureId\");\n                        j.ToTable(\"Tourist_Attraction_Features\");\n                        j.IndexerProperty<int>(\"TouristAttractionId\").HasColumnName(\"Tourist_Attraction_ID\");\n                        j.IndexerProperty<int>(\"FeatureId\").HasColumnName(\"Feature_ID\");\n                    });\n        });\n\n        modelBuilder.Entity<Visit>(entity =>\n        {\n            entity.Property(e => e.VisitId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Visit_ID\");\n            entity.Property(e => e.TouristAttractionId).HasColumnName(\"Tourist_Attraction_ID\");\n            entity.Property(e => e.TouristId).HasColumnName(\"Tourist_ID\");\n            entity.Property(e => e.VisitDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"Visit_Date\");\n            entity.Property(e => e.VisitDetails)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"Visit_Details\");\n\n            entity.HasOne(d => d.TouristAttraction).WithMany(p => p.Visits)\n                .HasForeignKey(d => d.TouristAttractionId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Tourist).WithMany(p => p.Visits)\n                .HasForeignKey(d => d.TouristId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Visitor>(entity =>\n        {\n            entity.HasKey(e => e.TouristId);\n\n            entity.HasIndex(e => e.TouristId, \"IX_Visitors_Tourist_ID\").IsUnique();\n\n            entity.Property(e => e.TouristId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Tourist_ID\");\n            entity.Property(e => e.TouristDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Tourist_Details\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Feature\n{\n    public int FeatureId { get; set; }\n\n    public string? FeatureDetails { get; set; }\n\n    public virtual ICollection<TouristAttraction> TouristAttractions { get; set; } = new List<TouristAttraction>();\n}",
      "public partial class Hotel\n{\n    public int HotelId { get; set; }\n\n    public string StarRatingCode { get; set; } = null!;\n\n    public string? PetsAllowedYn { get; set; }\n\n    public double? PriceRange { get; set; }\n\n    public string? OtherHotelDetails { get; set; }\n\n    public virtual RefHotelStarRating StarRatingCodeNavigation { get; set; } = null!;\n}",
      "public partial class Location\n{\n    public int LocationId { get; set; }\n\n    public string? LocationName { get; set; }\n\n    public string? Address { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual ICollection<TouristAttraction> TouristAttractions { get; set; } = new List<TouristAttraction>();\n}",
      "public partial class Museum\n{\n    public int MuseumId { get; set; }\n\n    public string? MuseumDetails { get; set; }\n\n    public virtual TouristAttraction MuseumNavigation { get; set; } = null!;\n}",
      "public partial class Photo\n{\n    public int PhotoId { get; set; }\n\n    public int TouristAttractionId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Description { get; set; }\n\n    public string? Filename { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual TouristAttraction TouristAttraction { get; set; } = null!;\n}",
      "public partial class RefAttractionType\n{\n    public string AttractionTypeCode { get; set; } = null!;\n\n    public string? AttractionTypeDescription { get; set; }\n\n    public virtual ICollection<TouristAttraction> TouristAttractions { get; set; } = new List<TouristAttraction>();\n}",
      "public partial class RefHotelStarRating\n{\n    public string StarRatingCode { get; set; } = null!;\n\n    public string? StarRatingDescription { get; set; }\n\n    public virtual ICollection<Hotel> Hotels { get; set; } = new List<Hotel>();\n}",
      "public partial class RoyalFamily\n{\n    public int RoyalFamilyId { get; set; }\n\n    public string? RoyalFamilyDetails { get; set; }\n\n    public virtual TouristAttraction RoyalFamilyNavigation { get; set; } = null!;\n}",
      "public partial class Shop\n{\n    public int ShopId { get; set; }\n\n    public string? ShopDetails { get; set; }\n\n    public virtual TouristAttraction ShopNavigation { get; set; } = null!;\n}",
      "public partial class Staff\n{\n    public int StaffId { get; set; }\n\n    public int TouristAttractionId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual TouristAttraction TouristAttraction { get; set; } = null!;\n}",
      "public partial class StreetMarket\n{\n    public int MarketId { get; set; }\n\n    public string? MarketDetails { get; set; }\n\n    public virtual TouristAttraction Market { get; set; } = null!;\n}",
      "public partial class ThemePark\n{\n    public int ThemeParkId { get; set; }\n\n    public string? ThemeParkDetails { get; set; }\n\n    public virtual TouristAttraction ThemeParkNavigation { get; set; } = null!;\n}",
      "public partial class TouristAttraction\n{\n    public int TouristAttractionId { get; set; }\n\n    public string AttractionTypeCode { get; set; } = null!;\n\n    public int LocationId { get; set; }\n\n    public string? HowToGetThere { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Description { get; set; }\n\n    public string? OpeningHours { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual RefAttractionType AttractionTypeCodeNavigation { get; set; } = null!;\n\n    public virtual Location Location { get; set; } = null!;\n\n    public virtual Museum? Museum { get; set; }\n\n    public virtual ICollection<Photo> Photos { get; set; } = new List<Photo>();\n\n    public virtual RoyalFamily? RoyalFamily { get; set; }\n\n    public virtual Shop? Shop { get; set; }\n\n    public virtual ICollection<Staff> Staff { get; set; } = new List<Staff>();\n\n    public virtual StreetMarket? StreetMarket { get; set; }\n\n    public virtual ThemePark? ThemePark { get; set; }\n\n    public virtual ICollection<Visit> Visits { get; set; } = new List<Visit>();\n\n    public virtual ICollection<Feature> Features { get; set; } = new List<Feature>();\n}",
      "public partial class Visit\n{\n    public int VisitId { get; set; }\n\n    public int TouristAttractionId { get; set; }\n\n    public int TouristId { get; set; }\n\n    public DateTime VisitDate { get; set; }\n\n    public string VisitDetails { get; set; } = null!;\n\n    public virtual Visitor Tourist { get; set; } = null!;\n\n    public virtual TouristAttraction TouristAttraction { get; set; } = null!;\n}",
      "public partial class Visitor\n{\n    public int TouristId { get; set; }\n\n    public string? TouristDetails { get; set; }\n\n    public virtual ICollection<Visit> Visits { get; set; } = new List<Visit>();\n}"
    ]
  },
  "insurance_policies": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.insurance_policies;\n\npublic partial class InsurancePoliciesContext : DbContext\n{\n    public InsurancePoliciesContext()\n    {\n    }\n\n    public InsurancePoliciesContext(DbContextOptions<InsurancePoliciesContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Claim> Claims { get; set; }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<CustomerPolicy> CustomerPolicies { get; set; }\n\n    public virtual DbSet<Payment> Payments { get; set; }\n\n    public virtual DbSet<Settlement> Settlements { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/insurance_policies.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Claim>(entity =>\n        {\n            entity.Property(e => e.ClaimId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Claim_ID\");\n            entity.Property(e => e.AmountClaimed).HasColumnName(\"Amount_Claimed\");\n            entity.Property(e => e.AmountSettled).HasColumnName(\"Amount_Settled\");\n            entity.Property(e => e.DateClaimMade)\n                .HasColumnType(\"DATE\")\n                .HasColumnName(\"Date_Claim_Made\");\n            entity.Property(e => e.DateClaimSettled)\n                .HasColumnType(\"DATE\")\n                .HasColumnName(\"Date_Claim_Settled\");\n            entity.Property(e => e.PolicyId).HasColumnName(\"Policy_ID\");\n\n            entity.HasOne(d => d.Policy).WithMany(p => p.Claims)\n                .HasForeignKey(d => d.PolicyId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.Property(e => e.CustomerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Customer_ID\");\n            entity.Property(e => e.CustomerDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Customer_Details\");\n        });\n\n        modelBuilder.Entity<CustomerPolicy>(entity =>\n        {\n            entity.HasKey(e => e.PolicyId);\n\n            entity.ToTable(\"Customer_Policies\");\n\n            entity.Property(e => e.PolicyId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Policy_ID\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"Customer_ID\");\n            entity.Property(e => e.EndDate)\n                .HasColumnType(\"DATE\")\n                .HasColumnName(\"End_Date\");\n            entity.Property(e => e.PolicyTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Policy_Type_Code\");\n            entity.Property(e => e.StartDate)\n                .HasColumnType(\"DATE\")\n                .HasColumnName(\"Start_Date\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerPolicies)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Payment>(entity =>\n        {\n            entity.Property(e => e.PaymentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Payment_ID\");\n            entity.Property(e => e.AmountPayment).HasColumnName(\"Amount_Payment\");\n            entity.Property(e => e.DatePaymentMade)\n                .HasColumnType(\"DATE\")\n                .HasColumnName(\"Date_Payment_Made\");\n            entity.Property(e => e.PaymentMethodCode)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Payment_Method_Code\");\n            entity.Property(e => e.SettlementId).HasColumnName(\"Settlement_ID\");\n\n            entity.HasOne(d => d.Settlement).WithMany(p => p.Payments)\n                .HasForeignKey(d => d.SettlementId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Settlement>(entity =>\n        {\n            entity.Property(e => e.SettlementId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Settlement_ID\");\n            entity.Property(e => e.AmountClaimed).HasColumnName(\"Amount_Claimed\");\n            entity.Property(e => e.AmountSettled).HasColumnName(\"Amount_Settled\");\n            entity.Property(e => e.ClaimId).HasColumnName(\"Claim_ID\");\n            entity.Property(e => e.CustomerPolicyId).HasColumnName(\"Customer_Policy_ID\");\n            entity.Property(e => e.DateClaimMade)\n                .HasColumnType(\"DATE\")\n                .HasColumnName(\"Date_Claim_Made\");\n            entity.Property(e => e.DateClaimSettled)\n                .HasColumnType(\"DATE\")\n                .HasColumnName(\"Date_Claim_Settled\");\n\n            entity.HasOne(d => d.Claim).WithMany(p => p.Settlements)\n                .HasForeignKey(d => d.ClaimId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Claim\n{\n    public int ClaimId { get; set; }\n\n    public int PolicyId { get; set; }\n\n    public DateOnly? DateClaimMade { get; set; }\n\n    public DateOnly? DateClaimSettled { get; set; }\n\n    public int? AmountClaimed { get; set; }\n\n    public int? AmountSettled { get; set; }\n\n    public virtual CustomerPolicy Policy { get; set; } = null!;\n\n    public virtual ICollection<Settlement> Settlements { get; set; } = new List<Settlement>();\n}",
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public string CustomerDetails { get; set; } = null!;\n\n    public virtual ICollection<CustomerPolicy> CustomerPolicies { get; set; } = new List<CustomerPolicy>();\n}",
      "public partial class CustomerPolicy\n{\n    public int PolicyId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public string PolicyTypeCode { get; set; } = null!;\n\n    public DateOnly? StartDate { get; set; }\n\n    public DateOnly? EndDate { get; set; }\n\n    public virtual ICollection<Claim> Claims { get; set; } = new List<Claim>();\n\n    public virtual Customer Customer { get; set; } = null!;\n}",
      "public partial class Payment\n{\n    public int PaymentId { get; set; }\n\n    public int SettlementId { get; set; }\n\n    public string? PaymentMethodCode { get; set; }\n\n    public DateOnly? DatePaymentMade { get; set; }\n\n    public int? AmountPayment { get; set; }\n\n    public virtual Settlement Settlement { get; set; } = null!;\n}",
      "public partial class Settlement\n{\n    public int SettlementId { get; set; }\n\n    public int ClaimId { get; set; }\n\n    public DateOnly? DateClaimMade { get; set; }\n\n    public DateOnly? DateClaimSettled { get; set; }\n\n    public int? AmountClaimed { get; set; }\n\n    public int? AmountSettled { get; set; }\n\n    public int CustomerPolicyId { get; set; }\n\n    public virtual Claim Claim { get; set; } = null!;\n\n    public virtual ICollection<Payment> Payments { get; set; } = new List<Payment>();\n}"
    ]
  },
  "railway": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.railway;\n\npublic partial class RailwayContext : DbContext\n{\n    public RailwayContext()\n    {\n    }\n\n    public RailwayContext(DbContextOptions<RailwayContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Manager> Managers { get; set; }\n\n    public virtual DbSet<Railway> Railways { get; set; }\n\n    public virtual DbSet<RailwayManage> RailwayManages { get; set; }\n\n    public virtual DbSet<Train> Trains { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/railway.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Manager>(entity =>\n        {\n            entity.ToTable(\"manager\");\n\n            entity.Property(e => e.ManagerId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Manager_ID\");\n            entity.Property(e => e.Age).HasColumnType(\"INT\");\n            entity.Property(e => e.Level).HasColumnType(\"INT\");\n            entity.Property(e => e.WorkingYearStarts).HasColumnName(\"Working_year_starts\");\n        });\n\n        modelBuilder.Entity<Railway>(entity =>\n        {\n            entity.ToTable(\"railway\");\n\n            entity.Property(e => e.RailwayId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Railway_ID\");\n            entity.Property(e => e.Railway1).HasColumnName(\"Railway\");\n        });\n\n        modelBuilder.Entity<RailwayManage>(entity =>\n        {\n            entity.HasKey(e => new { e.RailwayId, e.ManagerId });\n\n            entity.ToTable(\"railway_manage\");\n\n            entity.Property(e => e.RailwayId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Railway_ID\");\n            entity.Property(e => e.ManagerId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Manager_ID\");\n            entity.Property(e => e.FromYear).HasColumnName(\"From_Year\");\n\n            entity.HasOne(d => d.Manager).WithMany(p => p.RailwayManages)\n                .HasForeignKey(d => d.ManagerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Railway).WithMany(p => p.RailwayManages)\n                .HasForeignKey(d => d.RailwayId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Train>(entity =>\n        {\n            entity.ToTable(\"train\");\n\n            entity.Property(e => e.TrainId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Train_ID\");\n            entity.Property(e => e.RailwayId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Railway_ID\");\n            entity.Property(e => e.TrainNum).HasColumnName(\"Train_Num\");\n\n            entity.HasOne(d => d.Railway).WithMany(p => p.Trains).HasForeignKey(d => d.RailwayId);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Manager\n{\n    public int ManagerId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Country { get; set; }\n\n    public string? WorkingYearStarts { get; set; }\n\n    public int? Age { get; set; }\n\n    public int? Level { get; set; }\n\n    public virtual ICollection<RailwayManage> RailwayManages { get; set; } = new List<RailwayManage>();\n}",
      "public partial class Railway\n{\n    public int RailwayId { get; set; }\n\n    public string? Railway1 { get; set; }\n\n    public string? Builder { get; set; }\n\n    public string? Built { get; set; }\n\n    public string? Wheels { get; set; }\n\n    public string? Location { get; set; }\n\n    public string? ObjectNumber { get; set; }\n\n    public virtual ICollection<RailwayManage> RailwayManages { get; set; } = new List<RailwayManage>();\n\n    public virtual ICollection<Train> Trains { get; set; } = new List<Train>();\n}",
      "public partial class RailwayManage\n{\n    public int RailwayId { get; set; }\n\n    public int ManagerId { get; set; }\n\n    public string? FromYear { get; set; }\n\n    public virtual Manager Manager { get; set; } = null!;\n\n    public virtual Railway Railway { get; set; } = null!;\n}",
      "public partial class Train\n{\n    public int TrainId { get; set; }\n\n    public string? TrainNum { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? From { get; set; }\n\n    public string? Arrival { get; set; }\n\n    public int? RailwayId { get; set; }\n\n    public virtual Railway? Railway { get; set; }\n}"
    ]
  },
  "customer_complaints": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.customer_complaints;\n\npublic partial class CustomerComplaintsContext : DbContext\n{\n    public CustomerComplaintsContext()\n    {\n    }\n\n    public CustomerComplaintsContext(DbContextOptions<CustomerComplaintsContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Complaint> Complaints { get; set; }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<Product> Products { get; set; }\n\n    public virtual DbSet<Staff> Staff { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/customer_complaints.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Complaint>(entity =>\n        {\n            entity.HasNoKey();\n\n            entity.Property(e => e.ComplaintId).HasColumnName(\"complaint_id\");\n            entity.Property(e => e.ComplaintOutcomeCode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"complaint_outcome_code\");\n            entity.Property(e => e.ComplaintStatusCode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"complaint_status_code\");\n            entity.Property(e => e.ComplaintTypeCode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"complaint_type_code\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.DateComplaintClosed)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_complaint_closed\");\n            entity.Property(e => e.DateComplaintRaised)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_complaint_raised\");\n            entity.Property(e => e.ProductId).HasColumnName(\"product_id\");\n            entity.Property(e => e.StaffId).HasColumnName(\"staff_id\");\n\n            entity.HasOne(d => d.Customer).WithMany()\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Product).WithMany()\n                .HasForeignKey(d => d.ProductId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Staff).WithMany()\n                .HasForeignKey(d => d.StaffId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.Property(e => e.CustomerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"customer_id\");\n            entity.Property(e => e.AddressLine1)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"address_line_1\");\n            entity.Property(e => e.AddressLine2)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"address_line_2\");\n            entity.Property(e => e.CustomerTypeCode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"customer_type_code\");\n            entity.Property(e => e.EmailAddress)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"email_address\");\n            entity.Property(e => e.PhoneNumber)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"phone_number\");\n            entity.Property(e => e.State)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"state\");\n            entity.Property(e => e.TownCity)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"town_city\");\n        });\n\n        modelBuilder.Entity<Product>(entity =>\n        {\n            entity.Property(e => e.ProductId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"product_id\");\n            entity.Property(e => e.DateProductDiscontinued)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_product_discontinued\");\n            entity.Property(e => e.DateProductFirstAvailable)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_product_first_available\");\n            entity.Property(e => e.ParentProductId).HasColumnName(\"parent_product_id\");\n            entity.Property(e => e.ProductCategoryCode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"product_category_code\");\n            entity.Property(e => e.ProductDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"product_description\");\n            entity.Property(e => e.ProductName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"product_name\");\n            entity.Property(e => e.ProductPrice)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"product_price\");\n        });\n\n        modelBuilder.Entity<Staff>(entity =>\n        {\n            entity.Property(e => e.StaffId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"staff_id\");\n            entity.Property(e => e.EmailAddress)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"email_address\");\n            entity.Property(e => e.FirstName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"first_name\");\n            entity.Property(e => e.Gender)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"gender\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"last_name\");\n            entity.Property(e => e.PhoneNumber)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"phone_number\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Complaint\n{\n    public int ComplaintId { get; set; }\n\n    public int ProductId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public string ComplaintOutcomeCode { get; set; } = null!;\n\n    public string ComplaintStatusCode { get; set; } = null!;\n\n    public string ComplaintTypeCode { get; set; } = null!;\n\n    public DateTime? DateComplaintRaised { get; set; }\n\n    public DateTime? DateComplaintClosed { get; set; }\n\n    public int StaffId { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n\n    public virtual Product Product { get; set; } = null!;\n\n    public virtual Staff Staff { get; set; } = null!;\n}",
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public string CustomerTypeCode { get; set; } = null!;\n\n    public string? AddressLine1 { get; set; }\n\n    public string? AddressLine2 { get; set; }\n\n    public string? TownCity { get; set; }\n\n    public string? State { get; set; }\n\n    public string? EmailAddress { get; set; }\n\n    public string? PhoneNumber { get; set; }\n}",
      "public partial class Product\n{\n    public int ProductId { get; set; }\n\n    public int? ParentProductId { get; set; }\n\n    public string ProductCategoryCode { get; set; } = null!;\n\n    public DateTime? DateProductFirstAvailable { get; set; }\n\n    public DateTime? DateProductDiscontinued { get; set; }\n\n    public string? ProductName { get; set; }\n\n    public string? ProductDescription { get; set; }\n\n    public decimal? ProductPrice { get; set; }\n}",
      "public partial class Staff\n{\n    public int StaffId { get; set; }\n\n    public string? Gender { get; set; }\n\n    public string? FirstName { get; set; }\n\n    public string? LastName { get; set; }\n\n    public string? EmailAddress { get; set; }\n\n    public string? PhoneNumber { get; set; }\n}"
    ]
  },
  "customer_deliveries": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.customer_deliveries;\n\npublic partial class CustomerDeliveriesContext : DbContext\n{\n    public CustomerDeliveriesContext()\n    {\n    }\n\n    public CustomerDeliveriesContext(DbContextOptions<CustomerDeliveriesContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<ActualOrder> ActualOrders { get; set; }\n\n    public virtual DbSet<ActualOrderProduct> ActualOrderProducts { get; set; }\n\n    public virtual DbSet<Address> Addresses { get; set; }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<CustomerAddress> CustomerAddresses { get; set; }\n\n    public virtual DbSet<DeliveryRoute> DeliveryRoutes { get; set; }\n\n    public virtual DbSet<DeliveryRouteLocation> DeliveryRouteLocations { get; set; }\n\n    public virtual DbSet<Employee> Employees { get; set; }\n\n    public virtual DbSet<OrderDelivery> OrderDeliveries { get; set; }\n\n    public virtual DbSet<Product> Products { get; set; }\n\n    public virtual DbSet<RegularOrder> RegularOrders { get; set; }\n\n    public virtual DbSet<RegularOrderProduct> RegularOrderProducts { get; set; }\n\n    public virtual DbSet<Truck> Trucks { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/customer_deliveries.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<ActualOrder>(entity =>\n        {\n            entity.ToTable(\"Actual_Orders\");\n\n            entity.Property(e => e.ActualOrderId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"actual_order_id\");\n            entity.Property(e => e.ActualOrderDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"actual_order_date\");\n            entity.Property(e => e.OrderStatusCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"order_status_code\");\n            entity.Property(e => e.RegularOrderId).HasColumnName(\"regular_order_id\");\n\n            entity.HasOne(d => d.RegularOrder).WithMany(p => p.ActualOrders)\n                .HasForeignKey(d => d.RegularOrderId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ActualOrderProduct>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Actual_Order_Products\");\n\n            entity.Property(e => e.ActualOrderId).HasColumnName(\"actual_order_id\");\n            entity.Property(e => e.ProductId).HasColumnName(\"product_id\");\n\n            entity.HasOne(d => d.ActualOrder).WithMany()\n                .HasForeignKey(d => d.ActualOrderId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Product).WithMany()\n                .HasForeignKey(d => d.ProductId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Address>(entity =>\n        {\n            entity.Property(e => e.AddressId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"address_id\");\n            entity.Property(e => e.AddressDetails)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"address_details\");\n            entity.Property(e => e.City)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"city\");\n            entity.Property(e => e.Country)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"country\");\n            entity.Property(e => e.StateProvinceCounty)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"state_province_county\");\n            entity.Property(e => e.ZipPostcode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"zip_postcode\");\n        });\n\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.Property(e => e.CustomerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"customer_id\");\n            entity.Property(e => e.CustomerEmail)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"customer_email\");\n            entity.Property(e => e.CustomerName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"customer_name\");\n            entity.Property(e => e.CustomerPhone)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"customer_phone\");\n            entity.Property(e => e.DateBecameCustomer)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_became_customer\");\n            entity.Property(e => e.PaymentMethod)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"payment_method\");\n        });\n\n        modelBuilder.Entity<CustomerAddress>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Customer_Addresses\");\n\n            entity.Property(e => e.AddressId).HasColumnName(\"address_id\");\n            entity.Property(e => e.AddressType)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"address_type\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.DateFrom)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_from\");\n            entity.Property(e => e.DateTo)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_to\");\n\n            entity.HasOne(d => d.Address).WithMany()\n                .HasForeignKey(d => d.AddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Customer).WithMany()\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<DeliveryRoute>(entity =>\n        {\n            entity.HasKey(e => e.RouteId);\n\n            entity.ToTable(\"Delivery_Routes\");\n\n            entity.Property(e => e.RouteId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"route_id\");\n            entity.Property(e => e.OtherRouteDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_route_details\");\n            entity.Property(e => e.RouteName)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"route_name\");\n        });\n\n        modelBuilder.Entity<DeliveryRouteLocation>(entity =>\n        {\n            entity.HasKey(e => e.LocationCode);\n\n            entity.ToTable(\"Delivery_Route_Locations\");\n\n            entity.Property(e => e.LocationCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"location_code\");\n            entity.Property(e => e.LocationAddressId).HasColumnName(\"location_address_id\");\n            entity.Property(e => e.LocationName)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"location_name\");\n            entity.Property(e => e.RouteId).HasColumnName(\"route_id\");\n\n            entity.HasOne(d => d.LocationAddress).WithMany(p => p.DeliveryRouteLocations)\n                .HasForeignKey(d => d.LocationAddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Route).WithMany(p => p.DeliveryRouteLocations)\n                .HasForeignKey(d => d.RouteId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Employee>(entity =>\n        {\n            entity.Property(e => e.EmployeeId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"employee_id\");\n            entity.Property(e => e.EmployeeAddressId).HasColumnName(\"employee_address_id\");\n            entity.Property(e => e.EmployeeName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"employee_name\");\n            entity.Property(e => e.EmployeePhone)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"employee_phone\");\n\n            entity.HasOne(d => d.EmployeeAddress).WithMany(p => p.Employees)\n                .HasForeignKey(d => d.EmployeeAddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<OrderDelivery>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Order_Deliveries\");\n\n            entity.Property(e => e.ActualOrderId).HasColumnName(\"actual_order_id\");\n            entity.Property(e => e.DeliveryDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"delivery_date\");\n            entity.Property(e => e.DeliveryStatusCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"delivery_status_code\");\n            entity.Property(e => e.DriverEmployeeId).HasColumnName(\"driver_employee_id\");\n            entity.Property(e => e.LocationCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"location_code\");\n            entity.Property(e => e.TruckId).HasColumnName(\"truck_id\");\n\n            entity.HasOne(d => d.ActualOrder).WithMany()\n                .HasForeignKey(d => d.ActualOrderId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.DriverEmployee).WithMany()\n                .HasForeignKey(d => d.DriverEmployeeId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.LocationCodeNavigation).WithMany()\n                .HasForeignKey(d => d.LocationCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Truck).WithMany()\n                .HasForeignKey(d => d.TruckId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Product>(entity =>\n        {\n            entity.Property(e => e.ProductId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"product_id\");\n            entity.Property(e => e.ProductDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"product_description\");\n            entity.Property(e => e.ProductName)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"product_name\");\n            entity.Property(e => e.ProductPrice)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"product_price\");\n        });\n\n        modelBuilder.Entity<RegularOrder>(entity =>\n        {\n            entity.ToTable(\"Regular_Orders\");\n\n            entity.Property(e => e.RegularOrderId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"regular_order_id\");\n            entity.Property(e => e.DistributerId).HasColumnName(\"distributer_id\");\n\n            entity.HasOne(d => d.Distributer).WithMany(p => p.RegularOrders)\n                .HasForeignKey(d => d.DistributerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<RegularOrderProduct>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Regular_Order_Products\");\n\n            entity.Property(e => e.ProductId).HasColumnName(\"product_id\");\n            entity.Property(e => e.RegularOrderId).HasColumnName(\"regular_order_id\");\n\n            entity.HasOne(d => d.Product).WithMany()\n                .HasForeignKey(d => d.ProductId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.RegularOrder).WithMany()\n                .HasForeignKey(d => d.RegularOrderId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Truck>(entity =>\n        {\n            entity.Property(e => e.TruckId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"truck_id\");\n            entity.Property(e => e.TruckDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"truck_details\");\n            entity.Property(e => e.TruckLicenceNumber)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"truck_licence_number\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class ActualOrder\n{\n    public int ActualOrderId { get; set; }\n\n    public string OrderStatusCode { get; set; } = null!;\n\n    public int RegularOrderId { get; set; }\n\n    public DateTime? ActualOrderDate { get; set; }\n\n    public virtual RegularOrder RegularOrder { get; set; } = null!;\n}",
      "public partial class ActualOrderProduct\n{\n    public int ActualOrderId { get; set; }\n\n    public int ProductId { get; set; }\n\n    public virtual ActualOrder ActualOrder { get; set; } = null!;\n\n    public virtual Product Product { get; set; } = null!;\n}",
      "public partial class Address\n{\n    public int AddressId { get; set; }\n\n    public string? AddressDetails { get; set; }\n\n    public string? City { get; set; }\n\n    public string? ZipPostcode { get; set; }\n\n    public string? StateProvinceCounty { get; set; }\n\n    public string? Country { get; set; }\n\n    public virtual ICollection<DeliveryRouteLocation> DeliveryRouteLocations { get; set; } = new List<DeliveryRouteLocation>();\n\n    public virtual ICollection<Employee> Employees { get; set; } = new List<Employee>();\n}",
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public string PaymentMethod { get; set; } = null!;\n\n    public string? CustomerName { get; set; }\n\n    public string? CustomerPhone { get; set; }\n\n    public string? CustomerEmail { get; set; }\n\n    public DateTime? DateBecameCustomer { get; set; }\n\n    public virtual ICollection<RegularOrder> RegularOrders { get; set; } = new List<RegularOrder>();\n}",
      "public partial class CustomerAddress\n{\n    public int CustomerId { get; set; }\n\n    public int AddressId { get; set; }\n\n    public DateTime DateFrom { get; set; }\n\n    public string AddressType { get; set; } = null!;\n\n    public DateTime? DateTo { get; set; }\n\n    public virtual Address Address { get; set; } = null!;\n\n    public virtual Customer Customer { get; set; } = null!;\n}",
      "public partial class DeliveryRoute\n{\n    public int RouteId { get; set; }\n\n    public string? RouteName { get; set; }\n\n    public string? OtherRouteDetails { get; set; }\n\n    public virtual ICollection<DeliveryRouteLocation> DeliveryRouteLocations { get; set; } = new List<DeliveryRouteLocation>();\n}",
      "public partial class DeliveryRouteLocation\n{\n    public string LocationCode { get; set; } = null!;\n\n    public int RouteId { get; set; }\n\n    public int LocationAddressId { get; set; }\n\n    public string? LocationName { get; set; }\n\n    public virtual Address LocationAddress { get; set; } = null!;\n\n    public virtual DeliveryRoute Route { get; set; } = null!;\n}",
      "public partial class Employee\n{\n    public int EmployeeId { get; set; }\n\n    public int EmployeeAddressId { get; set; }\n\n    public string? EmployeeName { get; set; }\n\n    public string? EmployeePhone { get; set; }\n\n    public virtual Address EmployeeAddress { get; set; } = null!;\n}",
      "public partial class OrderDelivery\n{\n    public string LocationCode { get; set; } = null!;\n\n    public int ActualOrderId { get; set; }\n\n    public string DeliveryStatusCode { get; set; } = null!;\n\n    public int DriverEmployeeId { get; set; }\n\n    public int TruckId { get; set; }\n\n    public DateTime? DeliveryDate { get; set; }\n\n    public virtual ActualOrder ActualOrder { get; set; } = null!;\n\n    public virtual Employee DriverEmployee { get; set; } = null!;\n\n    public virtual DeliveryRouteLocation LocationCodeNavigation { get; set; } = null!;\n\n    public virtual Truck Truck { get; set; } = null!;\n}",
      "public partial class Product\n{\n    public int ProductId { get; set; }\n\n    public string? ProductName { get; set; }\n\n    public decimal? ProductPrice { get; set; }\n\n    public string? ProductDescription { get; set; }\n}",
      "public partial class RegularOrder\n{\n    public int RegularOrderId { get; set; }\n\n    public int DistributerId { get; set; }\n\n    public virtual ICollection<ActualOrder> ActualOrders { get; set; } = new List<ActualOrder>();\n\n    public virtual Customer Distributer { get; set; } = null!;\n}",
      "public partial class RegularOrderProduct\n{\n    public int RegularOrderId { get; set; }\n\n    public int ProductId { get; set; }\n\n    public virtual Product Product { get; set; } = null!;\n\n    public virtual RegularOrder RegularOrder { get; set; } = null!;\n}",
      "public partial class Truck\n{\n    public int TruckId { get; set; }\n\n    public string? TruckLicenceNumber { get; set; }\n\n    public string? TruckDetails { get; set; }\n}"
    ]
  },
  "wine_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.wine_1;\n\npublic partial class Wine1Context : DbContext\n{\n    public Wine1Context()\n    {\n    }\n\n    public Wine1Context(DbContextOptions<Wine1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Appellation> Appellations { get; set; }\n\n    public virtual DbSet<Grape> Grapes { get; set; }\n\n    public virtual DbSet<Wine> Wines { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/wine_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Appellation>(entity =>\n        {\n            entity.HasKey(e => e.No);\n\n            entity.ToTable(\"appellations\");\n\n            entity.HasIndex(e => e.Appelation, \"IX_appellations_Appelation\").IsUnique();\n\n            entity.Property(e => e.No).ValueGeneratedNever();\n            entity.Property(e => e.IsAva).HasColumnName(\"isAVA\");\n        });\n\n        modelBuilder.Entity<Grape>(entity =>\n        {\n            entity.ToTable(\"grapes\");\n\n            entity.HasIndex(e => e.Grape1, \"IX_grapes_Grape\").IsUnique();\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnName(\"ID\");\n            entity.Property(e => e.Grape1).HasColumnName(\"Grape\");\n        });\n\n        modelBuilder.Entity<Wine>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"wine\");\n\n            entity.Property(e => e.Cases).HasColumnType(\"INTEGER\");\n\n            entity.HasOne(d => d.AppelationNavigation).WithMany()\n                .HasPrincipalKey(p => p.Appelation)\n                .HasForeignKey(d => d.Appelation);\n\n            entity.HasOne(d => d.GrapeNavigation).WithMany()\n                .HasPrincipalKey(p => p.Grape1)\n                .HasForeignKey(d => d.Grape);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Appellation\n{\n    public int No { get; set; }\n\n    public string Appelation { get; set; } = null!;\n\n    public string? County { get; set; }\n\n    public string? State { get; set; }\n\n    public string? Area { get; set; }\n\n    public string? IsAva { get; set; }\n}",
      "public partial class Grape\n{\n    public int Id { get; set; }\n\n    public string Grape1 { get; set; } = null!;\n\n    public string? Color { get; set; }\n}",
      "public partial class Wine\n{\n    public int? No { get; set; }\n\n    public string? Grape { get; set; }\n\n    public string? Winery { get; set; }\n\n    public string? Appelation { get; set; }\n\n    public string? State { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? Year { get; set; }\n\n    public int? Price { get; set; }\n\n    public int? Score { get; set; }\n\n    public string? Cases { get; set; }\n\n    public string? Drink { get; set; }\n\n    public virtual Appellation? AppelationNavigation { get; set; }\n\n    public virtual Grape? GrapeNavigation { get; set; }\n}"
    ]
  },
  "manufactory_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.manufactory_1;\n\npublic partial class Manufactory1Context : DbContext\n{\n    public Manufactory1Context()\n    {\n    }\n\n    public Manufactory1Context(DbContextOptions<Manufactory1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Manufacturer> Manufacturers { get; set; }\n\n    public virtual DbSet<Product> Products { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/manufactory_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Manufacturer>(entity =>\n        {\n            entity.HasKey(e => e.Code);\n\n            entity.Property(e => e.Code).ValueGeneratedNever();\n            entity.Property(e => e.Founder).HasColumnType(\"VARCHAR(255)\");\n            entity.Property(e => e.Headquarter).HasColumnType(\"VARCHAR(255)\");\n            entity.Property(e => e.Name).HasColumnType(\"VARCHAR(255)\");\n        });\n\n        modelBuilder.Entity<Product>(entity =>\n        {\n            entity.HasKey(e => e.Code);\n\n            entity.Property(e => e.Code).ValueGeneratedNever();\n            entity.Property(e => e.Name).HasColumnType(\"VARCHAR(255)\");\n            entity.Property(e => e.Price).HasColumnType(\"DECIMAL\");\n\n            entity.HasOne(d => d.ManufacturerNavigation).WithMany(p => p.Products)\n                .HasForeignKey(d => d.Manufacturer)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Manufacturer\n{\n    public int Code { get; set; }\n\n    public string Name { get; set; } = null!;\n\n    public string Headquarter { get; set; } = null!;\n\n    public string Founder { get; set; } = null!;\n\n    public double? Revenue { get; set; }\n\n    public virtual ICollection<Product> Products { get; set; } = new List<Product>();\n}",
      "public partial class Product\n{\n    public int Code { get; set; }\n\n    public string Name { get; set; } = null!;\n\n    public int Price { get; set; }\n\n    public int Manufacturer { get; set; }\n\n    public virtual Manufacturer ManufacturerNavigation { get; set; } = null!;\n}"
    ]
  },
  "dog_kennels": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.dog_kennels;\n\npublic partial class DogKennelsContext : DbContext\n{\n    public DogKennelsContext()\n    {\n    }\n\n    public DogKennelsContext(DbContextOptions<DogKennelsContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Breed> Breeds { get; set; }\n\n    public virtual DbSet<Charge> Charges { get; set; }\n\n    public virtual DbSet<Dog> Dogs { get; set; }\n\n    public virtual DbSet<Owner> Owners { get; set; }\n\n    public virtual DbSet<Professional> Professionals { get; set; }\n\n    public virtual DbSet<Size> Sizes { get; set; }\n\n    public virtual DbSet<Treatment> Treatments { get; set; }\n\n    public virtual DbSet<TreatmentType> TreatmentTypes { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/dog_kennels.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Breed>(entity =>\n        {\n            entity.HasKey(e => e.BreedCode);\n\n            entity.Property(e => e.BreedCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"breed_code\");\n            entity.Property(e => e.BreedName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"breed_name\");\n        });\n\n        modelBuilder.Entity<Charge>(entity =>\n        {\n            entity.Property(e => e.ChargeId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"charge_id\");\n            entity.Property(e => e.ChargeAmount)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"charge_amount\");\n            entity.Property(e => e.ChargeType)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"charge_type\");\n        });\n\n        modelBuilder.Entity<Dog>(entity =>\n        {\n            entity.Property(e => e.DogId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"dog_id\");\n            entity.Property(e => e.AbandonedYn)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"abandoned_yn\");\n            entity.Property(e => e.Age)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"age\");\n            entity.Property(e => e.BreedCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"breed_code\");\n            entity.Property(e => e.DateAdopted)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_adopted\");\n            entity.Property(e => e.DateArrived)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_arrived\");\n            entity.Property(e => e.DateDeparted)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_departed\");\n            entity.Property(e => e.DateOfBirth)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_of_birth\");\n            entity.Property(e => e.Gender)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"gender\");\n            entity.Property(e => e.Name)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"name\");\n            entity.Property(e => e.OwnerId).HasColumnName(\"owner_id\");\n            entity.Property(e => e.SizeCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"size_code\");\n            entity.Property(e => e.Weight)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"weight\");\n\n            entity.HasOne(d => d.BreedCodeNavigation).WithMany(p => p.Dogs)\n                .HasForeignKey(d => d.BreedCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Owner).WithMany(p => p.Dogs)\n                .HasForeignKey(d => d.OwnerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.SizeCodeNavigation).WithMany(p => p.Dogs)\n                .HasForeignKey(d => d.SizeCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Owner>(entity =>\n        {\n            entity.Property(e => e.OwnerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"owner_id\");\n            entity.Property(e => e.CellNumber)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"cell_number\");\n            entity.Property(e => e.City)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"city\");\n            entity.Property(e => e.EmailAddress)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"email_address\");\n            entity.Property(e => e.FirstName)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"first_name\");\n            entity.Property(e => e.HomePhone)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"home_phone\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"last_name\");\n            entity.Property(e => e.State)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"state\");\n            entity.Property(e => e.Street)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"street\");\n            entity.Property(e => e.ZipCode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"zip_code\");\n        });\n\n        modelBuilder.Entity<Professional>(entity =>\n        {\n            entity.Property(e => e.ProfessionalId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"professional_id\");\n            entity.Property(e => e.CellNumber)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"cell_number\");\n            entity.Property(e => e.City)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"city\");\n            entity.Property(e => e.EmailAddress)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"email_address\");\n            entity.Property(e => e.FirstName)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"first_name\");\n            entity.Property(e => e.HomePhone)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"home_phone\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"last_name\");\n            entity.Property(e => e.RoleCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"role_code\");\n            entity.Property(e => e.State)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"state\");\n            entity.Property(e => e.Street)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"street\");\n            entity.Property(e => e.ZipCode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"zip_code\");\n        });\n\n        modelBuilder.Entity<Size>(entity =>\n        {\n            entity.HasKey(e => e.SizeCode);\n\n            entity.Property(e => e.SizeCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"size_code\");\n            entity.Property(e => e.SizeDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"size_description\");\n        });\n\n        modelBuilder.Entity<Treatment>(entity =>\n        {\n            entity.Property(e => e.TreatmentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"treatment_id\");\n            entity.Property(e => e.CostOfTreatment)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"cost_of_treatment\");\n            entity.Property(e => e.DateOfTreatment)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_of_treatment\");\n            entity.Property(e => e.DogId).HasColumnName(\"dog_id\");\n            entity.Property(e => e.ProfessionalId).HasColumnName(\"professional_id\");\n            entity.Property(e => e.TreatmentTypeCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"treatment_type_code\");\n\n            entity.HasOne(d => d.Dog).WithMany(p => p.Treatments)\n                .HasForeignKey(d => d.DogId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Professional).WithMany(p => p.Treatments)\n                .HasForeignKey(d => d.ProfessionalId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.TreatmentTypeCodeNavigation).WithMany(p => p.Treatments)\n                .HasForeignKey(d => d.TreatmentTypeCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<TreatmentType>(entity =>\n        {\n            entity.HasKey(e => e.TreatmentTypeCode);\n\n            entity.ToTable(\"Treatment_Types\");\n\n            entity.Property(e => e.TreatmentTypeCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"treatment_type_code\");\n            entity.Property(e => e.TreatmentTypeDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"treatment_type_description\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Breed\n{\n    public string BreedCode { get; set; } = null!;\n\n    public string? BreedName { get; set; }\n\n    public virtual ICollection<Dog> Dogs { get; set; } = new List<Dog>();\n}",
      "public partial class Charge\n{\n    public int ChargeId { get; set; }\n\n    public string? ChargeType { get; set; }\n\n    public int? ChargeAmount { get; set; }\n}",
      "public partial class Dog\n{\n    public int DogId { get; set; }\n\n    public int OwnerId { get; set; }\n\n    public string? AbandonedYn { get; set; }\n\n    public string BreedCode { get; set; } = null!;\n\n    public string SizeCode { get; set; } = null!;\n\n    public string? Name { get; set; }\n\n    public string? Age { get; set; }\n\n    public DateTime? DateOfBirth { get; set; }\n\n    public string? Gender { get; set; }\n\n    public decimal? Weight { get; set; }\n\n    public DateTime? DateArrived { get; set; }\n\n    public DateTime? DateAdopted { get; set; }\n\n    public DateTime? DateDeparted { get; set; }\n\n    public virtual Breed BreedCodeNavigation { get; set; } = null!;\n\n    public virtual Owner Owner { get; set; } = null!;\n\n    public virtual Size SizeCodeNavigation { get; set; } = null!;\n\n    public virtual ICollection<Treatment> Treatments { get; set; } = new List<Treatment>();\n}",
      "public partial class Owner\n{\n    public int OwnerId { get; set; }\n\n    public string? FirstName { get; set; }\n\n    public string? LastName { get; set; }\n\n    public string? Street { get; set; }\n\n    public string? City { get; set; }\n\n    public string? State { get; set; }\n\n    public string? ZipCode { get; set; }\n\n    public string? EmailAddress { get; set; }\n\n    public string? HomePhone { get; set; }\n\n    public string? CellNumber { get; set; }\n\n    public virtual ICollection<Dog> Dogs { get; set; } = new List<Dog>();\n}",
      "public partial class Professional\n{\n    public int ProfessionalId { get; set; }\n\n    public string RoleCode { get; set; } = null!;\n\n    public string? FirstName { get; set; }\n\n    public string? Street { get; set; }\n\n    public string? City { get; set; }\n\n    public string? State { get; set; }\n\n    public string? ZipCode { get; set; }\n\n    public string? LastName { get; set; }\n\n    public string? EmailAddress { get; set; }\n\n    public string? HomePhone { get; set; }\n\n    public string? CellNumber { get; set; }\n\n    public virtual ICollection<Treatment> Treatments { get; set; } = new List<Treatment>();\n}",
      "public partial class Size\n{\n    public string SizeCode { get; set; } = null!;\n\n    public string? SizeDescription { get; set; }\n\n    public virtual ICollection<Dog> Dogs { get; set; } = new List<Dog>();\n}",
      "public partial class Treatment\n{\n    public int TreatmentId { get; set; }\n\n    public int DogId { get; set; }\n\n    public int ProfessionalId { get; set; }\n\n    public string TreatmentTypeCode { get; set; } = null!;\n\n    public DateTime? DateOfTreatment { get; set; }\n\n    public int? CostOfTreatment { get; set; }\n\n    public virtual Dog Dog { get; set; } = null!;\n\n    public virtual Professional Professional { get; set; } = null!;\n\n    public virtual TreatmentType TreatmentTypeCodeNavigation { get; set; } = null!;\n}",
      "public partial class TreatmentType\n{\n    public string TreatmentTypeCode { get; set; } = null!;\n\n    public string? TreatmentTypeDescription { get; set; }\n\n    public virtual ICollection<Treatment> Treatments { get; set; } = new List<Treatment>();\n}"
    ]
  },
  "local_govt_mdm": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.local_govt_mdm;\n\npublic partial class LocalGovtMdmContext : DbContext\n{\n    public LocalGovtMdmContext()\n    {\n    }\n\n    public LocalGovtMdmContext(DbContextOptions<LocalGovtMdmContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<BenefitsOverpayment> BenefitsOverpayments { get; set; }\n\n    public virtual DbSet<BusinessRate> BusinessRates { get; set; }\n\n    public virtual DbSet<CmiCrossReference> CmiCrossReferences { get; set; }\n\n    public virtual DbSet<CouncilTax> CouncilTaxes { get; set; }\n\n    public virtual DbSet<CustomerMasterIndex> CustomerMasterIndices { get; set; }\n\n    public virtual DbSet<ElectoralRegister> ElectoralRegisters { get; set; }\n\n    public virtual DbSet<ParkingFine> ParkingFines { get; set; }\n\n    public virtual DbSet<RentArrear> RentArrears { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/local_govt_mdm.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<BenefitsOverpayment>(entity =>\n        {\n            entity.HasKey(e => e.CouncilTaxId);\n\n            entity.ToTable(\"Benefits_Overpayments\");\n\n            entity.Property(e => e.CouncilTaxId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"council_tax_id\");\n            entity.Property(e => e.CmiCrossRefId).HasColumnName(\"cmi_cross_ref_id\");\n\n            entity.HasOne(d => d.CmiCrossRef).WithMany(p => p.BenefitsOverpayments)\n                .HasForeignKey(d => d.CmiCrossRefId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<BusinessRate>(entity =>\n        {\n            entity.HasKey(e => e.BusinessRatesId);\n\n            entity.ToTable(\"Business_Rates\");\n\n            entity.Property(e => e.BusinessRatesId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"business_rates_id\");\n            entity.Property(e => e.CmiCrossRefId).HasColumnName(\"cmi_cross_ref_id\");\n\n            entity.HasOne(d => d.CmiCrossRef).WithMany(p => p.BusinessRates)\n                .HasForeignKey(d => d.CmiCrossRefId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<CmiCrossReference>(entity =>\n        {\n            entity.HasKey(e => e.CmiCrossRefId);\n\n            entity.ToTable(\"CMI_Cross_References\");\n\n            entity.Property(e => e.CmiCrossRefId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"cmi_cross_ref_id\");\n            entity.Property(e => e.MasterCustomerId).HasColumnName(\"master_customer_id\");\n            entity.Property(e => e.SourceSystemCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"source_system_code\");\n\n            entity.HasOne(d => d.MasterCustomer).WithMany(p => p.CmiCrossReferences)\n                .HasForeignKey(d => d.MasterCustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<CouncilTax>(entity =>\n        {\n            entity.ToTable(\"Council_Tax\");\n\n            entity.Property(e => e.CouncilTaxId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"council_tax_id\");\n            entity.Property(e => e.CmiCrossRefId).HasColumnName(\"cmi_cross_ref_id\");\n\n            entity.HasOne(d => d.CmiCrossRef).WithMany(p => p.CouncilTaxes)\n                .HasForeignKey(d => d.CmiCrossRefId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<CustomerMasterIndex>(entity =>\n        {\n            entity.HasKey(e => e.MasterCustomerId);\n\n            entity.ToTable(\"Customer_Master_Index\");\n\n            entity.Property(e => e.MasterCustomerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"master_customer_id\");\n            entity.Property(e => e.CmiDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"cmi_details\");\n        });\n\n        modelBuilder.Entity<ElectoralRegister>(entity =>\n        {\n            entity.ToTable(\"Electoral_Register\");\n\n            entity.Property(e => e.ElectoralRegisterId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"electoral_register_id\");\n            entity.Property(e => e.CmiCrossRefId).HasColumnName(\"cmi_cross_ref_id\");\n\n            entity.HasOne(d => d.CmiCrossRef).WithMany(p => p.ElectoralRegisters)\n                .HasForeignKey(d => d.CmiCrossRefId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ParkingFine>(entity =>\n        {\n            entity.HasKey(e => e.CouncilTaxId);\n\n            entity.ToTable(\"Parking_Fines\");\n\n            entity.Property(e => e.CouncilTaxId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"council_tax_id\");\n            entity.Property(e => e.CmiCrossRefId).HasColumnName(\"cmi_cross_ref_id\");\n\n            entity.HasOne(d => d.CmiCrossRef).WithMany(p => p.ParkingFines)\n                .HasForeignKey(d => d.CmiCrossRefId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<RentArrear>(entity =>\n        {\n            entity.HasKey(e => e.CouncilTaxId);\n\n            entity.ToTable(\"Rent_Arrears\");\n\n            entity.Property(e => e.CouncilTaxId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"council_tax_id\");\n            entity.Property(e => e.CmiCrossRefId).HasColumnName(\"cmi_cross_ref_id\");\n\n            entity.HasOne(d => d.CmiCrossRef).WithMany(p => p.RentArrears)\n                .HasForeignKey(d => d.CmiCrossRefId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class BenefitsOverpayment\n{\n    public int CouncilTaxId { get; set; }\n\n    public int CmiCrossRefId { get; set; }\n\n    public virtual CmiCrossReference CmiCrossRef { get; set; } = null!;\n}",
      "public partial class BusinessRate\n{\n    public int BusinessRatesId { get; set; }\n\n    public int CmiCrossRefId { get; set; }\n\n    public virtual CmiCrossReference CmiCrossRef { get; set; } = null!;\n}",
      "public partial class CmiCrossReference\n{\n    public int CmiCrossRefId { get; set; }\n\n    public int MasterCustomerId { get; set; }\n\n    public string SourceSystemCode { get; set; } = null!;\n\n    public virtual ICollection<BenefitsOverpayment> BenefitsOverpayments { get; set; } = new List<BenefitsOverpayment>();\n\n    public virtual ICollection<BusinessRate> BusinessRates { get; set; } = new List<BusinessRate>();\n\n    public virtual ICollection<CouncilTax> CouncilTaxes { get; set; } = new List<CouncilTax>();\n\n    public virtual ICollection<ElectoralRegister> ElectoralRegisters { get; set; } = new List<ElectoralRegister>();\n\n    public virtual CustomerMasterIndex MasterCustomer { get; set; } = null!;\n\n    public virtual ICollection<ParkingFine> ParkingFines { get; set; } = new List<ParkingFine>();\n\n    public virtual ICollection<RentArrear> RentArrears { get; set; } = new List<RentArrear>();\n}",
      "public partial class CouncilTax\n{\n    public int CouncilTaxId { get; set; }\n\n    public int CmiCrossRefId { get; set; }\n\n    public virtual CmiCrossReference CmiCrossRef { get; set; } = null!;\n}",
      "public partial class CustomerMasterIndex\n{\n    public int MasterCustomerId { get; set; }\n\n    public string? CmiDetails { get; set; }\n\n    public virtual ICollection<CmiCrossReference> CmiCrossReferences { get; set; } = new List<CmiCrossReference>();\n}",
      "public partial class ElectoralRegister\n{\n    public int ElectoralRegisterId { get; set; }\n\n    public int CmiCrossRefId { get; set; }\n\n    public virtual CmiCrossReference CmiCrossRef { get; set; } = null!;\n}",
      "public partial class ParkingFine\n{\n    public int CouncilTaxId { get; set; }\n\n    public int CmiCrossRefId { get; set; }\n\n    public virtual CmiCrossReference CmiCrossRef { get; set; } = null!;\n}",
      "public partial class RentArrear\n{\n    public int CouncilTaxId { get; set; }\n\n    public int CmiCrossRefId { get; set; }\n\n    public virtual CmiCrossReference CmiCrossRef { get; set; } = null!;\n}"
    ]
  },
  "company_office": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.company_office;\n\npublic partial class CompanyOfficeContext : DbContext\n{\n    public CompanyOfficeContext()\n    {\n    }\n\n    public CompanyOfficeContext(DbContextOptions<CompanyOfficeContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Building> Buildings { get; set; }\n\n    public virtual DbSet<Company> Companies { get; set; }\n\n    public virtual DbSet<OfficeLocation> OfficeLocations { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/company_office.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Building>(entity =>\n        {\n            entity.ToTable(\"buildings\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.Height).HasColumnType(\"INT\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.Stories).HasColumnType(\"INT\");\n        });\n\n        modelBuilder.Entity<Company>(entity =>\n        {\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.AssetsBillion).HasColumnName(\"Assets_billion\");\n            entity.Property(e => e.MarketValueBillion).HasColumnName(\"Market_Value_billion\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.ProfitsBillion).HasColumnName(\"Profits_billion\");\n            entity.Property(e => e.SalesBillion).HasColumnName(\"Sales_billion\");\n        });\n\n        modelBuilder.Entity<OfficeLocation>(entity =>\n        {\n            entity.HasKey(e => new { e.BuildingId, e.CompanyId });\n\n            entity.ToTable(\"Office_locations\");\n\n            entity.Property(e => e.BuildingId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"building_id\");\n            entity.Property(e => e.CompanyId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"company_id\");\n            entity.Property(e => e.MoveInYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"move_in_year\");\n\n            entity.HasOne(d => d.Building).WithMany(p => p.OfficeLocations)\n                .HasForeignKey(d => d.BuildingId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Company).WithMany(p => p.OfficeLocations)\n                .HasForeignKey(d => d.CompanyId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Building\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? City { get; set; }\n\n    public int? Height { get; set; }\n\n    public int? Stories { get; set; }\n\n    public string? Status { get; set; }\n\n    public virtual ICollection<OfficeLocation> OfficeLocations { get; set; } = new List<OfficeLocation>();\n}",
      "public partial class Company\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Headquarters { get; set; }\n\n    public string? Industry { get; set; }\n\n    public double? SalesBillion { get; set; }\n\n    public double? ProfitsBillion { get; set; }\n\n    public double? AssetsBillion { get; set; }\n\n    public decimal? MarketValueBillion { get; set; }\n\n    public virtual ICollection<OfficeLocation> OfficeLocations { get; set; } = new List<OfficeLocation>();\n}",
      "public partial class OfficeLocation\n{\n    public int BuildingId { get; set; }\n\n    public int CompanyId { get; set; }\n\n    public int? MoveInYear { get; set; }\n\n    public virtual Building Building { get; set; } = null!;\n\n    public virtual Company Company { get; set; } = null!;\n}"
    ]
  },
  "product_catalog": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.product_catalog;\n\npublic partial class ProductCatalogContext : DbContext\n{\n    public ProductCatalogContext()\n    {\n    }\n\n    public ProductCatalogContext(DbContextOptions<ProductCatalogContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<AttributeDefinition> AttributeDefinitions { get; set; }\n\n    public virtual DbSet<Catalog> Catalogs { get; set; }\n\n    public virtual DbSet<CatalogContent> CatalogContents { get; set; }\n\n    public virtual DbSet<CatalogContentsAdditionalAttribute> CatalogContentsAdditionalAttributes { get; set; }\n\n    public virtual DbSet<CatalogStructure> CatalogStructures { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/product_catalog.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<AttributeDefinition>(entity =>\n        {\n            entity.HasKey(e => e.AttributeId);\n\n            entity.ToTable(\"Attribute_Definitions\");\n\n            entity.Property(e => e.AttributeId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"attribute_id\");\n            entity.Property(e => e.AttributeDataType)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"attribute_data_type\");\n            entity.Property(e => e.AttributeName)\n                .HasColumnType(\"VARCHAR(30)\")\n                .HasColumnName(\"attribute_name\");\n        });\n\n        modelBuilder.Entity<Catalog>(entity =>\n        {\n            entity.Property(e => e.CatalogId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"catalog_id\");\n            entity.Property(e => e.CatalogName)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"catalog_name\");\n            entity.Property(e => e.CatalogPublisher)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"catalog_publisher\");\n            entity.Property(e => e.DateOfLatestRevision)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_of_latest_revision\");\n            entity.Property(e => e.DateOfPublication)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_of_publication\");\n        });\n\n        modelBuilder.Entity<CatalogContent>(entity =>\n        {\n            entity.HasKey(e => e.CatalogEntryId);\n\n            entity.ToTable(\"Catalog_Contents\");\n\n            entity.Property(e => e.CatalogEntryId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"catalog_entry_id\");\n            entity.Property(e => e.Capacity)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"capacity\");\n            entity.Property(e => e.CatalogEntryName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"catalog_entry_name\");\n            entity.Property(e => e.CatalogLevelNumber).HasColumnName(\"catalog_level_number\");\n            entity.Property(e => e.Height)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"height\");\n            entity.Property(e => e.Length)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"length\");\n            entity.Property(e => e.NextEntryId).HasColumnName(\"next_entry_id\");\n            entity.Property(e => e.ParentEntryId).HasColumnName(\"parent_entry_id\");\n            entity.Property(e => e.PreviousEntryId).HasColumnName(\"previous_entry_id\");\n            entity.Property(e => e.PriceInDollars)\n                .HasColumnType(\"DOUBLE\")\n                .HasColumnName(\"price_in_dollars\");\n            entity.Property(e => e.PriceInEuros)\n                .HasColumnType(\"DOUBLE\")\n                .HasColumnName(\"price_in_euros\");\n            entity.Property(e => e.PriceInPounds)\n                .HasColumnType(\"DOUBLE\")\n                .HasColumnName(\"price_in_pounds\");\n            entity.Property(e => e.ProductStockNumber)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"product_stock_number\");\n            entity.Property(e => e.Width)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"width\");\n\n            entity.HasOne(d => d.CatalogLevelNumberNavigation).WithMany(p => p.CatalogContents)\n                .HasForeignKey(d => d.CatalogLevelNumber)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<CatalogContentsAdditionalAttribute>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Catalog_Contents_Additional_Attributes\");\n\n            entity.Property(e => e.AttributeId).HasColumnName(\"attribute_id\");\n            entity.Property(e => e.AttributeValue)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"attribute_value\");\n            entity.Property(e => e.CatalogEntryId).HasColumnName(\"catalog_entry_id\");\n            entity.Property(e => e.CatalogLevelNumber).HasColumnName(\"catalog_level_number\");\n\n            entity.HasOne(d => d.CatalogEntry).WithMany()\n                .HasForeignKey(d => d.CatalogEntryId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.CatalogLevelNumberNavigation).WithMany()\n                .HasForeignKey(d => d.CatalogLevelNumber)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<CatalogStructure>(entity =>\n        {\n            entity.HasKey(e => e.CatalogLevelNumber);\n\n            entity.ToTable(\"Catalog_Structure\");\n\n            entity.Property(e => e.CatalogLevelNumber)\n                .ValueGeneratedNever()\n                .HasColumnName(\"catalog_level_number\");\n            entity.Property(e => e.CatalogId).HasColumnName(\"catalog_id\");\n            entity.Property(e => e.CatalogLevelName)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"catalog_level_name\");\n\n            entity.HasOne(d => d.Catalog).WithMany(p => p.CatalogStructures)\n                .HasForeignKey(d => d.CatalogId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class AttributeDefinition\n{\n    public int AttributeId { get; set; }\n\n    public string? AttributeName { get; set; }\n\n    public string? AttributeDataType { get; set; }\n}",
      "public partial class Catalog\n{\n    public int CatalogId { get; set; }\n\n    public string? CatalogName { get; set; }\n\n    public string? CatalogPublisher { get; set; }\n\n    public DateTime? DateOfPublication { get; set; }\n\n    public DateTime? DateOfLatestRevision { get; set; }\n\n    public virtual ICollection<CatalogStructure> CatalogStructures { get; set; } = new List<CatalogStructure>();\n}",
      "public partial class CatalogContent\n{\n    public int CatalogEntryId { get; set; }\n\n    public int CatalogLevelNumber { get; set; }\n\n    public int? ParentEntryId { get; set; }\n\n    public int? PreviousEntryId { get; set; }\n\n    public int? NextEntryId { get; set; }\n\n    public string? CatalogEntryName { get; set; }\n\n    public string? ProductStockNumber { get; set; }\n\n    public double? PriceInDollars { get; set; }\n\n    public double? PriceInEuros { get; set; }\n\n    public double? PriceInPounds { get; set; }\n\n    public string? Capacity { get; set; }\n\n    public string? Length { get; set; }\n\n    public string? Height { get; set; }\n\n    public string? Width { get; set; }\n\n    public virtual CatalogStructure CatalogLevelNumberNavigation { get; set; } = null!;\n}",
      "public partial class CatalogContentsAdditionalAttribute\n{\n    public int CatalogEntryId { get; set; }\n\n    public int CatalogLevelNumber { get; set; }\n\n    public int AttributeId { get; set; }\n\n    public string AttributeValue { get; set; } = null!;\n\n    public virtual CatalogContent CatalogEntry { get; set; } = null!;\n\n    public virtual CatalogStructure CatalogLevelNumberNavigation { get; set; } = null!;\n}",
      "public partial class CatalogStructure\n{\n    public int CatalogLevelNumber { get; set; }\n\n    public int CatalogId { get; set; }\n\n    public string? CatalogLevelName { get; set; }\n\n    public virtual Catalog Catalog { get; set; } = null!;\n\n    public virtual ICollection<CatalogContent> CatalogContents { get; set; } = new List<CatalogContent>();\n}"
    ]
  },
  "restaurants": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.restaurants;\n\npublic partial class RestaurantsContext : DbContext\n{\n    public RestaurantsContext()\n    {\n    }\n\n    public RestaurantsContext(DbContextOptions<RestaurantsContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Geographic> Geographics { get; set; }\n\n    public virtual DbSet<Location> Locations { get; set; }\n\n    public virtual DbSet<Restaurant> Restaurants { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/restaurants.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Geographic>(entity =>\n        {\n            entity.HasKey(e => e.CityName);\n\n            entity.ToTable(\"GEOGRAPHIC\");\n\n            entity.Property(e => e.CityName).HasColumnName(\"CITY_NAME\");\n            entity.Property(e => e.County).HasColumnName(\"COUNTY\");\n            entity.Property(e => e.Region).HasColumnName(\"REGION\");\n        });\n\n        modelBuilder.Entity<Location>(entity =>\n        {\n            entity.HasKey(e => e.RestaurantId);\n\n            entity.ToTable(\"LOCATION\");\n\n            entity.Property(e => e.RestaurantId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"RESTAURANT_ID\");\n            entity.Property(e => e.CityName).HasColumnName(\"CITY_NAME\");\n            entity.Property(e => e.HouseNumber)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"HOUSE_NUMBER\");\n            entity.Property(e => e.StreetName).HasColumnName(\"STREET_NAME\");\n\n            entity.HasOne(d => d.CityNameNavigation).WithMany(p => p.Locations).HasForeignKey(d => d.CityName);\n        });\n\n        modelBuilder.Entity<Restaurant>(entity =>\n        {\n            entity.ToTable(\"RESTAURANT\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"ID\");\n            entity.Property(e => e.CityName).HasColumnName(\"CITY_NAME\");\n            entity.Property(e => e.FoodType).HasColumnName(\"FOOD_TYPE\");\n            entity.Property(e => e.Name).HasColumnName(\"NAME\");\n            entity.Property(e => e.Rating).HasColumnName(\"RATING\");\n\n            entity.HasOne(d => d.CityNameNavigation).WithMany(p => p.Restaurants).HasForeignKey(d => d.CityName);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Geographic\n{\n    public string CityName { get; set; } = null!;\n\n    public string? County { get; set; }\n\n    public string? Region { get; set; }\n\n    public virtual ICollection<Location> Locations { get; set; } = new List<Location>();\n\n    public virtual ICollection<Restaurant> Restaurants { get; set; } = new List<Restaurant>();\n}",
      "public partial class Location\n{\n    public int RestaurantId { get; set; }\n\n    public int? HouseNumber { get; set; }\n\n    public string? StreetName { get; set; }\n\n    public string? CityName { get; set; }\n\n    public virtual Geographic? CityNameNavigation { get; set; }\n}",
      "public partial class Restaurant\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? FoodType { get; set; }\n\n    public string? CityName { get; set; }\n\n    public double? Rating { get; set; }\n\n    public virtual Geographic? CityNameNavigation { get; set; }\n}"
    ]
  },
  "orchestra": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.orchestra;\n\npublic partial class OrchestraContext : DbContext\n{\n    public OrchestraContext()\n    {\n    }\n\n    public OrchestraContext(DbContextOptions<OrchestraContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Conductor> Conductors { get; set; }\n\n    public virtual DbSet<Orchestra> Orchestras { get; set; }\n\n    public virtual DbSet<Performance> Performances { get; set; }\n\n    public virtual DbSet<Show> Shows { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/orchestra.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Conductor>(entity =>\n        {\n            entity.ToTable(\"conductor\");\n\n            entity.Property(e => e.ConductorId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Conductor_ID\");\n            entity.Property(e => e.Age).HasColumnType(\"INT\");\n            entity.Property(e => e.YearOfWork)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Year_of_Work\");\n        });\n\n        modelBuilder.Entity<Orchestra>(entity =>\n        {\n            entity.ToTable(\"orchestra\");\n\n            entity.Property(e => e.OrchestraId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Orchestra_ID\");\n            entity.Property(e => e.ConductorId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Conductor_ID\");\n            entity.Property(e => e.MajorRecordFormat).HasColumnName(\"Major_Record_Format\");\n            entity.Property(e => e.Orchestra1).HasColumnName(\"Orchestra\");\n            entity.Property(e => e.RecordCompany).HasColumnName(\"Record_Company\");\n            entity.Property(e => e.YearOfFounded).HasColumnName(\"Year_of_Founded\");\n\n            entity.HasOne(d => d.Conductor).WithMany(p => p.Orchestras).HasForeignKey(d => d.ConductorId);\n        });\n\n        modelBuilder.Entity<Performance>(entity =>\n        {\n            entity.ToTable(\"performance\");\n\n            entity.Property(e => e.PerformanceId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Performance_ID\");\n            entity.Property(e => e.OfficialRatingsMillions).HasColumnName(\"Official_ratings_(millions)\");\n            entity.Property(e => e.OrchestraId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Orchestra_ID\");\n            entity.Property(e => e.WeeklyRank).HasColumnName(\"Weekly_rank\");\n\n            entity.HasOne(d => d.Orchestra).WithMany(p => p.Performances).HasForeignKey(d => d.OrchestraId);\n        });\n\n        modelBuilder.Entity<Show>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"show\");\n\n            entity.Property(e => e.IfFirstShow)\n                .HasColumnType(\"bool\")\n                .HasColumnName(\"If_first_show\");\n            entity.Property(e => e.PerformanceId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Performance_ID\");\n            entity.Property(e => e.ShowId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Show_ID\");\n\n            entity.HasOne(d => d.Performance).WithMany().HasForeignKey(d => d.PerformanceId);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Conductor\n{\n    public int ConductorId { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? Age { get; set; }\n\n    public string? Nationality { get; set; }\n\n    public int? YearOfWork { get; set; }\n\n    public virtual ICollection<Orchestra> Orchestras { get; set; } = new List<Orchestra>();\n}",
      "public partial class Orchestra\n{\n    public int OrchestraId { get; set; }\n\n    public string? Orchestra1 { get; set; }\n\n    public int? ConductorId { get; set; }\n\n    public string? RecordCompany { get; set; }\n\n    public double? YearOfFounded { get; set; }\n\n    public string? MajorRecordFormat { get; set; }\n\n    public virtual Conductor? Conductor { get; set; }\n\n    public virtual ICollection<Performance> Performances { get; set; } = new List<Performance>();\n}",
      "public partial class Performance\n{\n    public int PerformanceId { get; set; }\n\n    public int? OrchestraId { get; set; }\n\n    public string? Type { get; set; }\n\n    public string? Date { get; set; }\n\n    public double? OfficialRatingsMillions { get; set; }\n\n    public string? WeeklyRank { get; set; }\n\n    public string? Share { get; set; }\n\n    public virtual Orchestra? Orchestra { get; set; }\n}",
      "public partial class Show\n{\n    public int? ShowId { get; set; }\n\n    public int? PerformanceId { get; set; }\n\n    public string? IfFirstShow { get; set; }\n\n    public string? Result { get; set; }\n\n    public double? Attendance { get; set; }\n\n    public virtual Performance? Performance { get; set; }\n}"
    ]
  },
  "tvshow": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.tvshow;\n\npublic partial class TvshowContext : DbContext\n{\n    public TvshowContext()\n    {\n    }\n\n    public TvshowContext(DbContextOptions<TvshowContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Cartoon> Cartoons { get; set; }\n\n    public virtual DbSet<TvChannel> TvChannels { get; set; }\n\n    public virtual DbSet<TvSeries> TvSeries { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/tvshow.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Cartoon>(entity =>\n        {\n            entity.ToTable(\"Cartoon\");\n\n            entity.Property(e => e.Id).HasColumnName(\"id\");\n            entity.Property(e => e.DirectedBy).HasColumnName(\"Directed_by\");\n            entity.Property(e => e.OriginalAirDate).HasColumnName(\"Original_air_date\");\n            entity.Property(e => e.ProductionCode).HasColumnName(\"Production_code\");\n            entity.Property(e => e.WrittenBy).HasColumnName(\"Written_by\");\n\n            entity.HasOne(d => d.ChannelNavigation).WithMany(p => p.Cartoons).HasForeignKey(d => d.Channel);\n        });\n\n        modelBuilder.Entity<TvChannel>(entity =>\n        {\n            entity.ToTable(\"TV_Channel\");\n\n            entity.Property(e => e.Id).HasColumnName(\"id\");\n            entity.Property(e => e.HightDefinitionTv).HasColumnName(\"Hight_definition_TV\");\n            entity.Property(e => e.PackageOption).HasColumnName(\"Package_Option\");\n            entity.Property(e => e.PayPerViewPpv).HasColumnName(\"Pay_per_view_PPV\");\n            entity.Property(e => e.PixelAspectRatioPar).HasColumnName(\"Pixel_aspect_ratio_PAR\");\n            entity.Property(e => e.SeriesName).HasColumnName(\"series_name\");\n        });\n\n        modelBuilder.Entity<TvSeries>(entity =>\n        {\n            entity.ToTable(\"TV_series\");\n\n            entity.Property(e => e.Id).HasColumnName(\"id\");\n            entity.Property(e => e.AirDate).HasColumnName(\"Air_Date\");\n            entity.Property(e => e.ViewersM).HasColumnName(\"Viewers_m\");\n            entity.Property(e => e.WeeklyRank).HasColumnName(\"Weekly_Rank\");\n            entity.Property(e => e._1849RatingShare).HasColumnName(\"18_49_Rating_Share\");\n\n            entity.HasOne(d => d.ChannelNavigation).WithMany(p => p.TvSeries).HasForeignKey(d => d.Channel);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Cartoon\n{\n    public double Id { get; set; }\n\n    public string? Title { get; set; }\n\n    public string? DirectedBy { get; set; }\n\n    public string? WrittenBy { get; set; }\n\n    public string? OriginalAirDate { get; set; }\n\n    public double? ProductionCode { get; set; }\n\n    public string? Channel { get; set; }\n\n    public virtual TvChannel? ChannelNavigation { get; set; }\n}",
      "public partial class TvChannel\n{\n    public string Id { get; set; } = null!;\n\n    public string? SeriesName { get; set; }\n\n    public string? Country { get; set; }\n\n    public string? Language { get; set; }\n\n    public string? Content { get; set; }\n\n    public string? PixelAspectRatioPar { get; set; }\n\n    public string? HightDefinitionTv { get; set; }\n\n    public string? PayPerViewPpv { get; set; }\n\n    public string? PackageOption { get; set; }\n\n    public virtual ICollection<Cartoon> Cartoons { get; set; } = new List<Cartoon>();\n\n    public virtual ICollection<TvSeries> TvSeries { get; set; } = new List<TvSeries>();\n}",
      "public partial class TvSeries\n{\n    public double Id { get; set; }\n\n    public string? Episode { get; set; }\n\n    public string? AirDate { get; set; }\n\n    public decimal? Rating { get; set; }\n\n    public double? Share { get; set; }\n\n    public string? _1849RatingShare { get; set; }\n\n    public decimal? ViewersM { get; set; }\n\n    public double? WeeklyRank { get; set; }\n\n    public string? Channel { get; set; }\n\n    public virtual TvChannel? ChannelNavigation { get; set; }\n}"
    ]
  },
  "document_management": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.document_management;\n\npublic partial class DocumentManagementContext : DbContext\n{\n    public DocumentManagementContext()\n    {\n    }\n\n    public DocumentManagementContext(DbContextOptions<DocumentManagementContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Document> Documents { get; set; }\n\n    public virtual DbSet<DocumentFunctionalArea> DocumentFunctionalAreas { get; set; }\n\n    public virtual DbSet<DocumentSection> DocumentSections { get; set; }\n\n    public virtual DbSet<DocumentStructure> DocumentStructures { get; set; }\n\n    public virtual DbSet<FunctionalArea> FunctionalAreas { get; set; }\n\n    public virtual DbSet<Image> Images { get; set; }\n\n    public virtual DbSet<Role> Roles { get; set; }\n\n    public virtual DbSet<User> Users { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/document_management.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Document>(entity =>\n        {\n            entity.HasKey(e => e.DocumentCode);\n\n            entity.Property(e => e.DocumentCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"document_code\");\n            entity.Property(e => e.AccessCount).HasColumnName(\"access_count\");\n            entity.Property(e => e.DocumentName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"document_name\");\n            entity.Property(e => e.DocumentStructureCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"document_structure_code\");\n            entity.Property(e => e.DocumentTypeCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"document_type_code\");\n\n            entity.HasOne(d => d.DocumentStructureCodeNavigation).WithMany(p => p.Documents)\n                .HasForeignKey(d => d.DocumentStructureCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<DocumentFunctionalArea>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Document_Functional_Areas\");\n\n            entity.Property(e => e.DocumentCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"document_code\");\n            entity.Property(e => e.FunctionalAreaCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"functional_area_code\");\n\n            entity.HasOne(d => d.DocumentCodeNavigation).WithMany()\n                .HasForeignKey(d => d.DocumentCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.FunctionalAreaCodeNavigation).WithMany()\n                .HasForeignKey(d => d.FunctionalAreaCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<DocumentSection>(entity =>\n        {\n            entity.HasKey(e => e.SectionId);\n\n            entity.ToTable(\"Document_Sections\");\n\n            entity.Property(e => e.SectionId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"section_id\");\n            entity.Property(e => e.DocumentCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"document_code\");\n            entity.Property(e => e.SectionCode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"section_code\");\n            entity.Property(e => e.SectionSequence).HasColumnName(\"section_sequence\");\n            entity.Property(e => e.SectionTitle)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"section_title\");\n\n            entity.HasOne(d => d.DocumentCodeNavigation).WithMany(p => p.DocumentSections)\n                .HasForeignKey(d => d.DocumentCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasMany(d => d.Images).WithMany(p => p.Sections)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"DocumentSectionsImage\",\n                    r => r.HasOne<Image>().WithMany()\n                        .HasForeignKey(\"ImageId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<DocumentSection>().WithMany()\n                        .HasForeignKey(\"SectionId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"SectionId\", \"ImageId\");\n                        j.ToTable(\"Document_Sections_Images\");\n                        j.IndexerProperty<int>(\"SectionId\").HasColumnName(\"section_id\");\n                        j.IndexerProperty<int>(\"ImageId\").HasColumnName(\"image_id\");\n                    });\n        });\n\n        modelBuilder.Entity<DocumentStructure>(entity =>\n        {\n            entity.HasKey(e => e.DocumentStructureCode);\n\n            entity.ToTable(\"Document_Structures\");\n\n            entity.Property(e => e.DocumentStructureCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"document_structure_code\");\n            entity.Property(e => e.DocumentStructureDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"document_structure_description\");\n            entity.Property(e => e.ParentDocumentStructureCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"parent_document_structure_code\");\n        });\n\n        modelBuilder.Entity<FunctionalArea>(entity =>\n        {\n            entity.HasKey(e => e.FunctionalAreaCode);\n\n            entity.ToTable(\"Functional_Areas\");\n\n            entity.Property(e => e.FunctionalAreaCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"functional_area_code\");\n            entity.Property(e => e.FunctionalAreaDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"functional_area_description\");\n            entity.Property(e => e.ParentFunctionalAreaCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"parent_functional_area_code\");\n        });\n\n        modelBuilder.Entity<Image>(entity =>\n        {\n            entity.Property(e => e.ImageId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"image_id\");\n            entity.Property(e => e.ImageAltText)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"image_alt_text\");\n            entity.Property(e => e.ImageName)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"image_name\");\n            entity.Property(e => e.ImageUrl)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"image_url\");\n        });\n\n        modelBuilder.Entity<Role>(entity =>\n        {\n            entity.HasKey(e => e.RoleCode);\n\n            entity.Property(e => e.RoleCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"role_code\");\n            entity.Property(e => e.RoleDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"role_description\");\n        });\n\n        modelBuilder.Entity<User>(entity =>\n        {\n            entity.Property(e => e.UserId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"user_id\");\n            entity.Property(e => e.Password)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"password\");\n            entity.Property(e => e.RoleCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"role_code\");\n            entity.Property(e => e.UserLogin)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"user_login\");\n            entity.Property(e => e.UserName)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"user_name\");\n\n            entity.HasOne(d => d.RoleCodeNavigation).WithMany(p => p.Users)\n                .HasForeignKey(d => d.RoleCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Document\n{\n    public string DocumentCode { get; set; } = null!;\n\n    public string DocumentStructureCode { get; set; } = null!;\n\n    public string DocumentTypeCode { get; set; } = null!;\n\n    public int? AccessCount { get; set; }\n\n    public string? DocumentName { get; set; }\n\n    public virtual ICollection<DocumentSection> DocumentSections { get; set; } = new List<DocumentSection>();\n\n    public virtual DocumentStructure DocumentStructureCodeNavigation { get; set; } = null!;\n}",
      "public partial class DocumentFunctionalArea\n{\n    public string DocumentCode { get; set; } = null!;\n\n    public string FunctionalAreaCode { get; set; } = null!;\n\n    public virtual Document DocumentCodeNavigation { get; set; } = null!;\n\n    public virtual FunctionalArea FunctionalAreaCodeNavigation { get; set; } = null!;\n}",
      "public partial class DocumentSection\n{\n    public int SectionId { get; set; }\n\n    public string DocumentCode { get; set; } = null!;\n\n    public int? SectionSequence { get; set; }\n\n    public string? SectionCode { get; set; }\n\n    public string? SectionTitle { get; set; }\n\n    public virtual Document DocumentCodeNavigation { get; set; } = null!;\n\n    public virtual ICollection<Image> Images { get; set; } = new List<Image>();\n}",
      "public partial class DocumentStructure\n{\n    public string DocumentStructureCode { get; set; } = null!;\n\n    public string? ParentDocumentStructureCode { get; set; }\n\n    public string? DocumentStructureDescription { get; set; }\n\n    public virtual ICollection<Document> Documents { get; set; } = new List<Document>();\n}",
      "public partial class FunctionalArea\n{\n    public string FunctionalAreaCode { get; set; } = null!;\n\n    public string? ParentFunctionalAreaCode { get; set; }\n\n    public string FunctionalAreaDescription { get; set; } = null!;\n}",
      "public partial class Image\n{\n    public int ImageId { get; set; }\n\n    public string? ImageAltText { get; set; }\n\n    public string? ImageName { get; set; }\n\n    public string? ImageUrl { get; set; }\n\n    public virtual ICollection<DocumentSection> Sections { get; set; } = new List<DocumentSection>();\n}",
      "public partial class Role\n{\n    public string RoleCode { get; set; } = null!;\n\n    public string? RoleDescription { get; set; }\n\n    public virtual ICollection<User> Users { get; set; } = new List<User>();\n}",
      "public partial class User\n{\n    public int UserId { get; set; }\n\n    public string RoleCode { get; set; } = null!;\n\n    public string? UserName { get; set; }\n\n    public string? UserLogin { get; set; }\n\n    public string? Password { get; set; }\n\n    public virtual Role RoleCodeNavigation { get; set; } = null!;\n}"
    ]
  },
  "cre_Doc_Template_Mgt": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.cre_Doc_Template_Mgt;\n\npublic partial class CreDocTemplateMgtContext : DbContext\n{\n    public CreDocTemplateMgtContext()\n    {\n    }\n\n    public CreDocTemplateMgtContext(DbContextOptions<CreDocTemplateMgtContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Document> Documents { get; set; }\n\n    public virtual DbSet<Paragraph> Paragraphs { get; set; }\n\n    public virtual DbSet<RefTemplateType> RefTemplateTypes { get; set; }\n\n    public virtual DbSet<Template> Templates { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/cre_Doc_Template_Mgt.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Document>(entity =>\n        {\n            entity.Property(e => e.DocumentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Document_ID\");\n            entity.Property(e => e.DocumentDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Document_Description\");\n            entity.Property(e => e.DocumentName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Document_Name\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Other_Details\");\n            entity.Property(e => e.TemplateId).HasColumnName(\"Template_ID\");\n\n            entity.HasOne(d => d.Template).WithMany(p => p.Documents).HasForeignKey(d => d.TemplateId);\n        });\n\n        modelBuilder.Entity<Paragraph>(entity =>\n        {\n            entity.Property(e => e.ParagraphId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Paragraph_ID\");\n            entity.Property(e => e.DocumentId).HasColumnName(\"Document_ID\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Other_Details\");\n            entity.Property(e => e.ParagraphText)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Paragraph_Text\");\n\n            entity.HasOne(d => d.Document).WithMany(p => p.Paragraphs)\n                .HasForeignKey(d => d.DocumentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<RefTemplateType>(entity =>\n        {\n            entity.HasKey(e => e.TemplateTypeCode);\n\n            entity.ToTable(\"Ref_Template_Types\");\n\n            entity.Property(e => e.TemplateTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Template_Type_Code\");\n            entity.Property(e => e.TemplateTypeDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Template_Type_Description\");\n        });\n\n        modelBuilder.Entity<Template>(entity =>\n        {\n            entity.Property(e => e.TemplateId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Template_ID\");\n            entity.Property(e => e.DateEffectiveFrom)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"Date_Effective_From\");\n            entity.Property(e => e.DateEffectiveTo)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"Date_Effective_To\");\n            entity.Property(e => e.TemplateDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Template_Details\");\n            entity.Property(e => e.TemplateTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Template_Type_Code\");\n            entity.Property(e => e.VersionNumber).HasColumnName(\"Version_Number\");\n\n            entity.HasOne(d => d.TemplateTypeCodeNavigation).WithMany(p => p.Templates)\n                .HasForeignKey(d => d.TemplateTypeCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Document\n{\n    public int DocumentId { get; set; }\n\n    public int? TemplateId { get; set; }\n\n    public string? DocumentName { get; set; }\n\n    public string? DocumentDescription { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual ICollection<Paragraph> Paragraphs { get; set; } = new List<Paragraph>();\n\n    public virtual Template? Template { get; set; }\n}",
      "public partial class Paragraph\n{\n    public int ParagraphId { get; set; }\n\n    public int DocumentId { get; set; }\n\n    public string? ParagraphText { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual Document Document { get; set; } = null!;\n}",
      "public partial class RefTemplateType\n{\n    public string TemplateTypeCode { get; set; } = null!;\n\n    public string TemplateTypeDescription { get; set; } = null!;\n\n    public virtual ICollection<Template> Templates { get; set; } = new List<Template>();\n}",
      "public partial class Template\n{\n    public int TemplateId { get; set; }\n\n    public int VersionNumber { get; set; }\n\n    public string TemplateTypeCode { get; set; } = null!;\n\n    public DateTime? DateEffectiveFrom { get; set; }\n\n    public DateTime? DateEffectiveTo { get; set; }\n\n    public string TemplateDetails { get; set; } = null!;\n\n    public virtual ICollection<Document> Documents { get; set; } = new List<Document>();\n\n    public virtual RefTemplateType TemplateTypeCodeNavigation { get; set; } = null!;\n}"
    ]
  },
  "game_injury": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.game_injury;\n\npublic partial class GameInjuryContext : DbContext\n{\n    public GameInjuryContext()\n    {\n    }\n\n    public GameInjuryContext(DbContextOptions<GameInjuryContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Game> Games { get; set; }\n\n    public virtual DbSet<InjuryAccident> InjuryAccidents { get; set; }\n\n    public virtual DbSet<Stadium> Stadia { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/game_injury.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Game>(entity =>\n        {\n            entity.ToTable(\"game\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.AwayTeam).HasColumnName(\"Away_team\");\n            entity.Property(e => e.HomeTeam).HasColumnName(\"Home_team\");\n            entity.Property(e => e.Season).HasColumnType(\"INT\");\n            entity.Property(e => e.StadiumId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"stadium_id\");\n\n            entity.HasOne(d => d.Stadium).WithMany(p => p.Games).HasForeignKey(d => d.StadiumId);\n        });\n\n        modelBuilder.Entity<InjuryAccident>(entity =>\n        {\n            entity.ToTable(\"injury_accident\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.GameId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"game_id\");\n            entity.Property(e => e.NumberOfMatches).HasColumnName(\"Number_of_matches\");\n\n            entity.HasOne(d => d.Game).WithMany(p => p.InjuryAccidents).HasForeignKey(d => d.GameId);\n        });\n\n        modelBuilder.Entity<Stadium>(entity =>\n        {\n            entity.ToTable(\"stadium\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.AverageAttendance).HasColumnName(\"Average_Attendance\");\n            entity.Property(e => e.CapacityPercentage).HasColumnName(\"Capacity_Percentage\");\n            entity.Property(e => e.HomeGames)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Home_Games\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.TotalAttendance).HasColumnName(\"Total_Attendance\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Game\n{\n    public int? StadiumId { get; set; }\n\n    public int Id { get; set; }\n\n    public int? Season { get; set; }\n\n    public string? Date { get; set; }\n\n    public string? HomeTeam { get; set; }\n\n    public string? AwayTeam { get; set; }\n\n    public string? Score { get; set; }\n\n    public string? Competition { get; set; }\n\n    public virtual ICollection<InjuryAccident> InjuryAccidents { get; set; } = new List<InjuryAccident>();\n\n    public virtual Stadium? Stadium { get; set; }\n}",
      "public partial class InjuryAccident\n{\n    public int? GameId { get; set; }\n\n    public int Id { get; set; }\n\n    public string? Player { get; set; }\n\n    public string? Injury { get; set; }\n\n    public string? NumberOfMatches { get; set; }\n\n    public string? Source { get; set; }\n\n    public virtual Game? Game { get; set; }\n}",
      "public partial class Stadium\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? HomeGames { get; set; }\n\n    public double? AverageAttendance { get; set; }\n\n    public double? TotalAttendance { get; set; }\n\n    public double? CapacityPercentage { get; set; }\n\n    public virtual ICollection<Game> Games { get; set; } = new List<Game>();\n}"
    ]
  },
  "activity_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.activity_1;\n\npublic partial class Activity1Context : DbContext\n{\n    public Activity1Context()\n    {\n    }\n\n    public Activity1Context(DbContextOptions<Activity1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Activity> Activities { get; set; }\n\n    public virtual DbSet<Faculty> Faculties { get; set; }\n\n    public virtual DbSet<FacultyParticipatesIn> FacultyParticipatesIns { get; set; }\n\n    public virtual DbSet<ParticipatesIn> ParticipatesIns { get; set; }\n\n    public virtual DbSet<Student> Students { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/activity_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Activity>(entity =>\n        {\n            entity.HasKey(e => e.Actid);\n\n            entity.ToTable(\"Activity\");\n\n            entity.Property(e => e.Actid)\n                .ValueGeneratedNever()\n                .HasColumnName(\"actid\");\n            entity.Property(e => e.ActivityName)\n                .HasColumnType(\"varchar(25)\")\n                .HasColumnName(\"activity_name\");\n        });\n\n        modelBuilder.Entity<Faculty>(entity =>\n        {\n            entity.HasKey(e => e.FacId);\n\n            entity.ToTable(\"Faculty\");\n\n            entity.Property(e => e.FacId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"FacID\");\n            entity.Property(e => e.Building).HasColumnType(\"VARCHAR(13)\");\n            entity.Property(e => e.Fname).HasColumnType(\"VARCHAR(15)\");\n            entity.Property(e => e.Lname).HasColumnType(\"VARCHAR(15)\");\n            entity.Property(e => e.Rank).HasColumnType(\"VARCHAR(15)\");\n            entity.Property(e => e.Room).HasColumnType(\"VARCHAR(5)\");\n            entity.Property(e => e.Sex).HasColumnType(\"VARCHAR(1)\");\n        });\n\n        modelBuilder.Entity<FacultyParticipatesIn>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Faculty_Participates_in\");\n\n            entity.Property(e => e.Actid).HasColumnName(\"actid\");\n            entity.Property(e => e.FacId).HasColumnName(\"FacID\");\n\n            entity.HasOne(d => d.Act).WithMany().HasForeignKey(d => d.Actid);\n\n            entity.HasOne(d => d.Fac).WithMany().HasForeignKey(d => d.FacId);\n        });\n\n        modelBuilder.Entity<ParticipatesIn>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Participates_in\");\n\n            entity.Property(e => e.Actid).HasColumnName(\"actid\");\n            entity.Property(e => e.Stuid).HasColumnName(\"stuid\");\n\n            entity.HasOne(d => d.Act).WithMany().HasForeignKey(d => d.Actid);\n\n            entity.HasOne(d => d.Stu).WithMany().HasForeignKey(d => d.Stuid);\n        });\n\n        modelBuilder.Entity<Student>(entity =>\n        {\n            entity.HasKey(e => e.StuId);\n\n            entity.ToTable(\"Student\");\n\n            entity.Property(e => e.StuId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"StuID\");\n            entity.Property(e => e.CityCode)\n                .HasColumnType(\"VARCHAR(3)\")\n                .HasColumnName(\"city_code\");\n            entity.Property(e => e.Fname).HasColumnType(\"VARCHAR(12)\");\n            entity.Property(e => e.Lname)\n                .HasColumnType(\"VARCHAR(12)\")\n                .HasColumnName(\"LName\");\n            entity.Property(e => e.Sex).HasColumnType(\"VARCHAR(1)\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Activity\n{\n    public int Actid { get; set; }\n\n    public string? ActivityName { get; set; }\n}",
      "public partial class Faculty\n{\n    public int FacId { get; set; }\n\n    public string? Lname { get; set; }\n\n    public string? Fname { get; set; }\n\n    public string? Rank { get; set; }\n\n    public string? Sex { get; set; }\n\n    public int? Phone { get; set; }\n\n    public string? Room { get; set; }\n\n    public string? Building { get; set; }\n}",
      "public partial class FacultyParticipatesIn\n{\n    public int? FacId { get; set; }\n\n    public int? Actid { get; set; }\n\n    public virtual Activity? Act { get; set; }\n\n    public virtual Faculty? Fac { get; set; }\n}",
      "public partial class ParticipatesIn\n{\n    public int? Stuid { get; set; }\n\n    public int? Actid { get; set; }\n\n    public virtual Activity? Act { get; set; }\n\n    public virtual Student? Stu { get; set; }\n}",
      "public partial class Student\n{\n    public int StuId { get; set; }\n\n    public string? Lname { get; set; }\n\n    public string? Fname { get; set; }\n\n    public int? Age { get; set; }\n\n    public string? Sex { get; set; }\n\n    public int? Major { get; set; }\n\n    public int? Advisor { get; set; }\n\n    public string? CityCode { get; set; }\n}"
    ]
  },
  "body_builder": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.body_builder;\n\npublic partial class BodyBuilderContext : DbContext\n{\n    public BodyBuilderContext()\n    {\n    }\n\n    public BodyBuilderContext(DbContextOptions<BodyBuilderContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<BodyBuilder> BodyBuilders { get; set; }\n\n    public virtual DbSet<Person> People { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/body_builder.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<BodyBuilder>(entity =>\n        {\n            entity.ToTable(\"body_builder\");\n\n            entity.Property(e => e.BodyBuilderId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Body_Builder_ID\");\n            entity.Property(e => e.CleanJerk).HasColumnName(\"Clean_Jerk\");\n            entity.Property(e => e.PeopleId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"People_ID\");\n\n            entity.HasOne(d => d.People).WithMany(p => p.BodyBuilders).HasForeignKey(d => d.PeopleId);\n        });\n\n        modelBuilder.Entity<Person>(entity =>\n        {\n            entity.HasKey(e => e.PeopleId);\n\n            entity.ToTable(\"people\");\n\n            entity.Property(e => e.PeopleId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"People_ID\");\n            entity.Property(e => e.BirthDate).HasColumnName(\"Birth_Date\");\n            entity.Property(e => e.BirthPlace).HasColumnName(\"Birth_Place\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class BodyBuilder\n{\n    public int BodyBuilderId { get; set; }\n\n    public int? PeopleId { get; set; }\n\n    public double? Snatch { get; set; }\n\n    public double? CleanJerk { get; set; }\n\n    public double? Total { get; set; }\n\n    public virtual Person? People { get; set; }\n}",
      "public partial class Person\n{\n    public int PeopleId { get; set; }\n\n    public string? Name { get; set; }\n\n    public double? Height { get; set; }\n\n    public double? Weight { get; set; }\n\n    public string? BirthDate { get; set; }\n\n    public string? BirthPlace { get; set; }\n\n    public virtual ICollection<BodyBuilder> BodyBuilders { get; set; } = new List<BodyBuilder>();\n}"
    ]
  },
  "e_government": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.e_government;\n\npublic partial class EGovernmentContext : DbContext\n{\n    public EGovernmentContext()\n    {\n    }\n\n    public EGovernmentContext(DbContextOptions<EGovernmentContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Address> Addresses { get; set; }\n\n    public virtual DbSet<Form> Forms { get; set; }\n\n    public virtual DbSet<Individual> Individuals { get; set; }\n\n    public virtual DbSet<Organization> Organizations { get; set; }\n\n    public virtual DbSet<OrganizationContactIndividual> OrganizationContactIndividuals { get; set; }\n\n    public virtual DbSet<Party> Parties { get; set; }\n\n    public virtual DbSet<PartyAddress> PartyAddresses { get; set; }\n\n    public virtual DbSet<PartyForm> PartyForms { get; set; }\n\n    public virtual DbSet<PartyService> PartyServices { get; set; }\n\n    public virtual DbSet<Service> Services { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/e_government.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Address>(entity =>\n        {\n            entity.Property(e => e.AddressId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"address_id\");\n            entity.Property(e => e.Country)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"country\");\n            entity.Property(e => e.Line1NumberBuilding)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"line_1_number_building\");\n            entity.Property(e => e.StateProvinceCounty)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"state_province_county\");\n            entity.Property(e => e.TownCity)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"town_city\");\n            entity.Property(e => e.ZipPostcode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"zip_postcode\");\n        });\n\n        modelBuilder.Entity<Form>(entity =>\n        {\n            entity.Property(e => e.FormId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"form_id\");\n            entity.Property(e => e.FormDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"form_description\");\n            entity.Property(e => e.FormName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"form_name\");\n            entity.Property(e => e.FormNumber)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"form_number\");\n            entity.Property(e => e.FormTypeCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"form_type_code\");\n            entity.Property(e => e.ServiceId).HasColumnName(\"service_id\");\n\n            entity.HasOne(d => d.Service).WithMany(p => p.Forms).HasForeignKey(d => d.ServiceId);\n        });\n\n        modelBuilder.Entity<Individual>(entity =>\n        {\n            entity.Property(e => e.IndividualId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"individual_id\");\n            entity.Property(e => e.IndividualAddress)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"individual_address\");\n            entity.Property(e => e.IndividualEmail)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"individual_email\");\n            entity.Property(e => e.IndividualFirstName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"individual_first_name\");\n            entity.Property(e => e.IndividualLastName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"individual_last_name\");\n            entity.Property(e => e.IndividualMiddleName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"individual_middle_name\");\n            entity.Property(e => e.InidividualPhone)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"inidividual_phone\");\n        });\n\n        modelBuilder.Entity<Organization>(entity =>\n        {\n            entity.Property(e => e.OrganizationId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"organization_id\");\n            entity.Property(e => e.DateFormed)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_formed\");\n            entity.Property(e => e.OrganizationName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"organization_name\");\n            entity.Property(e => e.UkVatNumber)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"uk_vat_number\");\n        });\n\n        modelBuilder.Entity<OrganizationContactIndividual>(entity =>\n        {\n            entity.HasKey(e => new { e.IndividualId, e.OrganizationId });\n\n            entity.ToTable(\"Organization_Contact_Individuals\");\n\n            entity.Property(e => e.IndividualId).HasColumnName(\"individual_id\");\n            entity.Property(e => e.OrganizationId).HasColumnName(\"organization_id\");\n            entity.Property(e => e.DateContactFrom)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_contact_from\");\n            entity.Property(e => e.DateContactTo)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_contact_to\");\n\n            entity.HasOne(d => d.Individual).WithMany(p => p.OrganizationContactIndividuals)\n                .HasForeignKey(d => d.IndividualId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Organization).WithMany(p => p.OrganizationContactIndividuals)\n                .HasForeignKey(d => d.OrganizationId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Party>(entity =>\n        {\n            entity.Property(e => e.PartyId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"party_id\");\n            entity.Property(e => e.PartyEmail)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"party_email\");\n            entity.Property(e => e.PartyPhone)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"party_phone\");\n            entity.Property(e => e.PaymentMethodCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"payment_method_code\");\n        });\n\n        modelBuilder.Entity<PartyAddress>(entity =>\n        {\n            entity.HasKey(e => new { e.PartyId, e.AddressId });\n\n            entity.ToTable(\"Party_Addresses\");\n\n            entity.Property(e => e.PartyId).HasColumnName(\"party_id\");\n            entity.Property(e => e.AddressId).HasColumnName(\"address_id\");\n            entity.Property(e => e.AddressTypeCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"address_type_code\");\n            entity.Property(e => e.DateAddressFrom)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_address_from\");\n            entity.Property(e => e.DateAddressTo)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_address_to\");\n\n            entity.HasOne(d => d.Address).WithMany(p => p.PartyAddresses)\n                .HasForeignKey(d => d.AddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Party).WithMany(p => p.PartyAddresses)\n                .HasForeignKey(d => d.PartyId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<PartyForm>(entity =>\n        {\n            entity.HasKey(e => new { e.PartyId, e.FormId });\n\n            entity.ToTable(\"Party_Forms\");\n\n            entity.Property(e => e.PartyId).HasColumnName(\"party_id\");\n            entity.Property(e => e.FormId).HasColumnName(\"form_id\");\n            entity.Property(e => e.DateCompletionStarted)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_completion_started\");\n            entity.Property(e => e.DateFullyCompleted)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_fully_completed\");\n            entity.Property(e => e.FormStatusCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"form_status_code\");\n\n            entity.HasOne(d => d.Form).WithMany(p => p.PartyForms)\n                .HasForeignKey(d => d.FormId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Party).WithMany(p => p.PartyForms)\n                .HasForeignKey(d => d.PartyId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<PartyService>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Party_Services\");\n\n            entity.Property(e => e.BookingId).HasColumnName(\"booking_id\");\n            entity.Property(e => e.BookingMadeDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"booking_made_date\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.ServiceDatetime)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"service_datetime\");\n            entity.Property(e => e.ServiceId).HasColumnName(\"service_id\");\n\n            entity.HasOne(d => d.Customer).WithMany()\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Service).WithMany()\n                .HasForeignKey(d => d.ServiceId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Service>(entity =>\n        {\n            entity.Property(e => e.ServiceId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"service_id\");\n            entity.Property(e => e.ServiceDescriptio)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"service_descriptio\");\n            entity.Property(e => e.ServiceName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"service_name\");\n            entity.Property(e => e.ServiceTypeCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"service_type_code\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Address\n{\n    public int AddressId { get; set; }\n\n    public string? Line1NumberBuilding { get; set; }\n\n    public string? TownCity { get; set; }\n\n    public string? ZipPostcode { get; set; }\n\n    public string? StateProvinceCounty { get; set; }\n\n    public string? Country { get; set; }\n\n    public virtual ICollection<PartyAddress> PartyAddresses { get; set; } = new List<PartyAddress>();\n}",
      "public partial class Form\n{\n    public int FormId { get; set; }\n\n    public string FormTypeCode { get; set; } = null!;\n\n    public int? ServiceId { get; set; }\n\n    public string? FormNumber { get; set; }\n\n    public string? FormName { get; set; }\n\n    public string? FormDescription { get; set; }\n\n    public virtual ICollection<PartyForm> PartyForms { get; set; } = new List<PartyForm>();\n\n    public virtual Service? Service { get; set; }\n}",
      "public partial class Individual\n{\n    public int IndividualId { get; set; }\n\n    public string? IndividualFirstName { get; set; }\n\n    public string? IndividualMiddleName { get; set; }\n\n    public string? InidividualPhone { get; set; }\n\n    public string? IndividualEmail { get; set; }\n\n    public string? IndividualAddress { get; set; }\n\n    public string? IndividualLastName { get; set; }\n\n    public virtual ICollection<OrganizationContactIndividual> OrganizationContactIndividuals { get; set; } = new List<OrganizationContactIndividual>();\n}",
      "public partial class Organization\n{\n    public int OrganizationId { get; set; }\n\n    public DateTime? DateFormed { get; set; }\n\n    public string? OrganizationName { get; set; }\n\n    public string? UkVatNumber { get; set; }\n\n    public virtual ICollection<OrganizationContactIndividual> OrganizationContactIndividuals { get; set; } = new List<OrganizationContactIndividual>();\n}",
      "public partial class OrganizationContactIndividual\n{\n    public int IndividualId { get; set; }\n\n    public int OrganizationId { get; set; }\n\n    public DateTime DateContactFrom { get; set; }\n\n    public DateTime? DateContactTo { get; set; }\n\n    public virtual Individual Individual { get; set; } = null!;\n\n    public virtual Organization Organization { get; set; } = null!;\n}",
      "public partial class Party\n{\n    public int PartyId { get; set; }\n\n    public string PaymentMethodCode { get; set; } = null!;\n\n    public string? PartyPhone { get; set; }\n\n    public string? PartyEmail { get; set; }\n\n    public virtual ICollection<PartyAddress> PartyAddresses { get; set; } = new List<PartyAddress>();\n\n    public virtual ICollection<PartyForm> PartyForms { get; set; } = new List<PartyForm>();\n}",
      "public partial class PartyAddress\n{\n    public int PartyId { get; set; }\n\n    public int AddressId { get; set; }\n\n    public DateTime DateAddressFrom { get; set; }\n\n    public string AddressTypeCode { get; set; } = null!;\n\n    public DateTime? DateAddressTo { get; set; }\n\n    public virtual Address Address { get; set; } = null!;\n\n    public virtual Party Party { get; set; } = null!;\n}",
      "public partial class PartyForm\n{\n    public int PartyId { get; set; }\n\n    public int FormId { get; set; }\n\n    public DateTime DateCompletionStarted { get; set; }\n\n    public string FormStatusCode { get; set; } = null!;\n\n    public DateTime? DateFullyCompleted { get; set; }\n\n    public virtual Form Form { get; set; } = null!;\n\n    public virtual Party Party { get; set; } = null!;\n}",
      "public partial class PartyService\n{\n    public int BookingId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public int ServiceId { get; set; }\n\n    public DateTime ServiceDatetime { get; set; }\n\n    public DateTime? BookingMadeDate { get; set; }\n\n    public virtual Party Customer { get; set; } = null!;\n\n    public virtual Service Service { get; set; } = null!;\n}",
      "public partial class Service\n{\n    public int ServiceId { get; set; }\n\n    public string ServiceTypeCode { get; set; } = null!;\n\n    public string? ServiceName { get; set; }\n\n    public string? ServiceDescriptio { get; set; }\n\n    public virtual ICollection<Form> Forms { get; set; } = new List<Form>();\n}"
    ]
  },
  "real_estate_properties": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.real_estate_properties;\n\npublic partial class RealEstatePropertiesContext : DbContext\n{\n    public RealEstatePropertiesContext()\n    {\n    }\n\n    public RealEstatePropertiesContext(DbContextOptions<RealEstatePropertiesContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<OtherAvailableFeature> OtherAvailableFeatures { get; set; }\n\n    public virtual DbSet<OtherPropertyFeature> OtherPropertyFeatures { get; set; }\n\n    public virtual DbSet<Property> Properties { get; set; }\n\n    public virtual DbSet<RefFeatureType> RefFeatureTypes { get; set; }\n\n    public virtual DbSet<RefPropertyType> RefPropertyTypes { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/real_estate_properties.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<OtherAvailableFeature>(entity =>\n        {\n            entity.HasKey(e => e.FeatureId);\n\n            entity.ToTable(\"Other_Available_Features\");\n\n            entity.Property(e => e.FeatureId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"feature_id\");\n            entity.Property(e => e.FeatureDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"feature_description\");\n            entity.Property(e => e.FeatureName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"feature_name\");\n            entity.Property(e => e.FeatureTypeCode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"feature_type_code\");\n\n            entity.HasOne(d => d.FeatureTypeCodeNavigation).WithMany(p => p.OtherAvailableFeatures)\n                .HasForeignKey(d => d.FeatureTypeCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<OtherPropertyFeature>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Other_Property_Features\");\n\n            entity.Property(e => e.FeatureId).HasColumnName(\"feature_id\");\n            entity.Property(e => e.PropertyFeatureDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"property_feature_description\");\n            entity.Property(e => e.PropertyId).HasColumnName(\"property_id\");\n\n            entity.HasOne(d => d.Feature).WithMany()\n                .HasForeignKey(d => d.FeatureId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Property).WithMany()\n                .HasForeignKey(d => d.PropertyId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Property>(entity =>\n        {\n            entity.Property(e => e.PropertyId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"property_id\");\n            entity.Property(e => e.AgreedSellingPrice)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"agreed_selling_price\");\n            entity.Property(e => e.AptFeature1)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"apt_feature_1\");\n            entity.Property(e => e.AptFeature2)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"apt_feature_2\");\n            entity.Property(e => e.AptFeature3)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"apt_feature_3\");\n            entity.Property(e => e.BuyerOfferedPrice)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"buyer_offered_price\");\n            entity.Property(e => e.DateOnMarket)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_on_market\");\n            entity.Property(e => e.DateSold)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_sold\");\n            entity.Property(e => e.FldFeature1)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"fld_feature_1\");\n            entity.Property(e => e.FldFeature2)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"fld_feature_2\");\n            entity.Property(e => e.FldFeature3)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"fld_feature_3\");\n            entity.Property(e => e.HseFeature1)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"hse_feature_1\");\n            entity.Property(e => e.HseFeature2)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"hse_feature_2\");\n            entity.Property(e => e.HseFeature3)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"hse_feature_3\");\n            entity.Property(e => e.OthFeature1)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"oth_feature_1\");\n            entity.Property(e => e.OthFeature2)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"oth_feature_2\");\n            entity.Property(e => e.OthFeature3)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"oth_feature_3\");\n            entity.Property(e => e.OtherPropertyDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_property_details\");\n            entity.Property(e => e.PropertyAddress)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"property_address\");\n            entity.Property(e => e.PropertyName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"property_name\");\n            entity.Property(e => e.PropertyTypeCode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"property_type_code\");\n            entity.Property(e => e.RoomCount).HasColumnName(\"room_count\");\n            entity.Property(e => e.ShpFeature1)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"shp_feature_1\");\n            entity.Property(e => e.ShpFeature2)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"shp_feature_2\");\n            entity.Property(e => e.ShpFeature3)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"shp_feature_3\");\n            entity.Property(e => e.VendorRequestedPrice)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"vendor_requested_price\");\n\n            entity.HasOne(d => d.PropertyTypeCodeNavigation).WithMany(p => p.Properties)\n                .HasForeignKey(d => d.PropertyTypeCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<RefFeatureType>(entity =>\n        {\n            entity.HasKey(e => e.FeatureTypeCode);\n\n            entity.ToTable(\"Ref_Feature_Types\");\n\n            entity.Property(e => e.FeatureTypeCode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"feature_type_code\");\n            entity.Property(e => e.FeatureTypeName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"feature_type_name\");\n        });\n\n        modelBuilder.Entity<RefPropertyType>(entity =>\n        {\n            entity.HasKey(e => e.PropertyTypeCode);\n\n            entity.ToTable(\"Ref_Property_Types\");\n\n            entity.Property(e => e.PropertyTypeCode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"property_type_code\");\n            entity.Property(e => e.PropertyTypeDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"property_type_description\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class OtherAvailableFeature\n{\n    public int FeatureId { get; set; }\n\n    public string FeatureTypeCode { get; set; } = null!;\n\n    public string? FeatureName { get; set; }\n\n    public string? FeatureDescription { get; set; }\n\n    public virtual RefFeatureType FeatureTypeCodeNavigation { get; set; } = null!;\n}",
      "public partial class OtherPropertyFeature\n{\n    public int PropertyId { get; set; }\n\n    public int FeatureId { get; set; }\n\n    public string? PropertyFeatureDescription { get; set; }\n\n    public virtual OtherAvailableFeature Feature { get; set; } = null!;\n\n    public virtual Property Property { get; set; } = null!;\n}",
      "public partial class Property\n{\n    public int PropertyId { get; set; }\n\n    public string PropertyTypeCode { get; set; } = null!;\n\n    public DateTime? DateOnMarket { get; set; }\n\n    public DateTime? DateSold { get; set; }\n\n    public string? PropertyName { get; set; }\n\n    public string? PropertyAddress { get; set; }\n\n    public int? RoomCount { get; set; }\n\n    public decimal? VendorRequestedPrice { get; set; }\n\n    public int? BuyerOfferedPrice { get; set; }\n\n    public decimal? AgreedSellingPrice { get; set; }\n\n    public string? AptFeature1 { get; set; }\n\n    public string? AptFeature2 { get; set; }\n\n    public string? AptFeature3 { get; set; }\n\n    public string? FldFeature1 { get; set; }\n\n    public string? FldFeature2 { get; set; }\n\n    public string? FldFeature3 { get; set; }\n\n    public string? HseFeature1 { get; set; }\n\n    public string? HseFeature2 { get; set; }\n\n    public string? HseFeature3 { get; set; }\n\n    public string? OthFeature1 { get; set; }\n\n    public string? OthFeature2 { get; set; }\n\n    public string? OthFeature3 { get; set; }\n\n    public string? ShpFeature1 { get; set; }\n\n    public string? ShpFeature2 { get; set; }\n\n    public string? ShpFeature3 { get; set; }\n\n    public string? OtherPropertyDetails { get; set; }\n\n    public virtual RefPropertyType PropertyTypeCodeNavigation { get; set; } = null!;\n}",
      "public partial class RefFeatureType\n{\n    public string FeatureTypeCode { get; set; } = null!;\n\n    public string? FeatureTypeName { get; set; }\n\n    public virtual ICollection<OtherAvailableFeature> OtherAvailableFeatures { get; set; } = new List<OtherAvailableFeature>();\n}",
      "public partial class RefPropertyType\n{\n    public string PropertyTypeCode { get; set; } = null!;\n\n    public string? PropertyTypeDescription { get; set; }\n\n    public virtual ICollection<Property> Properties { get; set; } = new List<Property>();\n}"
    ]
  },
  "tracking_grants_for_research": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.tracking_grants_for_research;\n\npublic partial class TrackingGrantsForResearchContext : DbContext\n{\n    public TrackingGrantsForResearchContext()\n    {\n    }\n\n    public TrackingGrantsForResearchContext(DbContextOptions<TrackingGrantsForResearchContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Document> Documents { get; set; }\n\n    public virtual DbSet<DocumentType> DocumentTypes { get; set; }\n\n    public virtual DbSet<Grant> Grants { get; set; }\n\n    public virtual DbSet<Organisation> Organisations { get; set; }\n\n    public virtual DbSet<OrganisationType> OrganisationTypes { get; set; }\n\n    public virtual DbSet<Project> Projects { get; set; }\n\n    public virtual DbSet<ProjectOutcome> ProjectOutcomes { get; set; }\n\n    public virtual DbSet<ProjectStaff> ProjectStaffs { get; set; }\n\n    public virtual DbSet<ResearchOutcome> ResearchOutcomes { get; set; }\n\n    public virtual DbSet<ResearchStaff> ResearchStaffs { get; set; }\n\n    public virtual DbSet<StaffRole> StaffRoles { get; set; }\n\n    public virtual DbSet<Task> Tasks { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/tracking_grants_for_research.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Document>(entity =>\n        {\n            entity.Property(e => e.DocumentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"document_id\");\n            entity.Property(e => e.DocumentTypeCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"document_type_code\");\n            entity.Property(e => e.GrantId).HasColumnName(\"grant_id\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n            entity.Property(e => e.ResponseReceivedDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"response_received_date\");\n            entity.Property(e => e.SentDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"sent_date\");\n\n            entity.HasOne(d => d.DocumentTypeCodeNavigation).WithMany(p => p.Documents).HasForeignKey(d => d.DocumentTypeCode);\n\n            entity.HasOne(d => d.Grant).WithMany(p => p.Documents)\n                .HasForeignKey(d => d.GrantId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<DocumentType>(entity =>\n        {\n            entity.HasKey(e => e.DocumentTypeCode);\n\n            entity.ToTable(\"Document_Types\");\n\n            entity.Property(e => e.DocumentTypeCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"document_type_code\");\n            entity.Property(e => e.DocumentDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"document_description\");\n        });\n\n        modelBuilder.Entity<Grant>(entity =>\n        {\n            entity.Property(e => e.GrantId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"grant_id\");\n            entity.Property(e => e.GrantAmount)\n                .HasDefaultValueSql(\"0\")\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"grant_amount\");\n            entity.Property(e => e.GrantEndDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"grant_end_date\");\n            entity.Property(e => e.GrantStartDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"grant_start_date\");\n            entity.Property(e => e.OrganisationId).HasColumnName(\"organisation_id\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n\n            entity.HasOne(d => d.Organisation).WithMany(p => p.Grants)\n                .HasForeignKey(d => d.OrganisationId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Organisation>(entity =>\n        {\n            entity.Property(e => e.OrganisationId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"organisation_id\");\n            entity.Property(e => e.OrganisationDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"organisation_details\");\n            entity.Property(e => e.OrganisationType)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"organisation_type\");\n\n            entity.HasOne(d => d.OrganisationTypeNavigation).WithMany(p => p.Organisations)\n                .HasForeignKey(d => d.OrganisationType)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<OrganisationType>(entity =>\n        {\n            entity.HasKey(e => e.OrganisationType1);\n\n            entity.ToTable(\"Organisation_Types\");\n\n            entity.Property(e => e.OrganisationType1)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"organisation_type\");\n            entity.Property(e => e.OrganisationTypeDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"organisation_type_description\");\n        });\n\n        modelBuilder.Entity<Project>(entity =>\n        {\n            entity.Property(e => e.ProjectId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"project_id\");\n            entity.Property(e => e.OrganisationId).HasColumnName(\"organisation_id\");\n            entity.Property(e => e.ProjectDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"project_details\");\n\n            entity.HasOne(d => d.Organisation).WithMany(p => p.Projects)\n                .HasForeignKey(d => d.OrganisationId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ProjectOutcome>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Project_Outcomes\");\n\n            entity.Property(e => e.OutcomeCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"outcome_code\");\n            entity.Property(e => e.OutcomeDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"outcome_details\");\n            entity.Property(e => e.ProjectId).HasColumnName(\"project_id\");\n\n            entity.HasOne(d => d.OutcomeCodeNavigation).WithMany()\n                .HasForeignKey(d => d.OutcomeCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Project).WithMany()\n                .HasForeignKey(d => d.ProjectId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ProjectStaff>(entity =>\n        {\n            entity.HasKey(e => e.StaffId);\n\n            entity.ToTable(\"Project_Staff\");\n\n            entity.Property(e => e.StaffId)\n                .HasColumnType(\"DOUBLE\")\n                .HasColumnName(\"staff_id\");\n            entity.Property(e => e.DateFrom)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_from\");\n            entity.Property(e => e.DateTo)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_to\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n            entity.Property(e => e.ProjectId).HasColumnName(\"project_id\");\n            entity.Property(e => e.RoleCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"role_code\");\n\n            entity.HasOne(d => d.Project).WithMany(p => p.ProjectStaffs)\n                .HasForeignKey(d => d.ProjectId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.RoleCodeNavigation).WithMany(p => p.ProjectStaffs)\n                .HasForeignKey(d => d.RoleCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ResearchOutcome>(entity =>\n        {\n            entity.HasKey(e => e.OutcomeCode);\n\n            entity.ToTable(\"Research_Outcomes\");\n\n            entity.Property(e => e.OutcomeCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"outcome_code\");\n            entity.Property(e => e.OutcomeDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"outcome_description\");\n        });\n\n        modelBuilder.Entity<ResearchStaff>(entity =>\n        {\n            entity.HasKey(e => e.StaffId);\n\n            entity.ToTable(\"Research_Staff\");\n\n            entity.Property(e => e.StaffId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"staff_id\");\n            entity.Property(e => e.EmployerOrganisationId).HasColumnName(\"employer_organisation_id\");\n            entity.Property(e => e.StaffDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"staff_details\");\n\n            entity.HasOne(d => d.EmployerOrganisation).WithMany(p => p.ResearchStaffs)\n                .HasForeignKey(d => d.EmployerOrganisationId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<StaffRole>(entity =>\n        {\n            entity.HasKey(e => e.RoleCode);\n\n            entity.ToTable(\"Staff_Roles\");\n\n            entity.Property(e => e.RoleCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"role_code\");\n            entity.Property(e => e.RoleDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"role_description\");\n        });\n\n        modelBuilder.Entity<Task>(entity =>\n        {\n            entity.Property(e => e.TaskId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"task_id\");\n            entity.Property(e => e.EgAgreeObjectives)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"eg Agree Objectives\");\n            entity.Property(e => e.ProjectId).HasColumnName(\"project_id\");\n            entity.Property(e => e.TaskDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"task_details\");\n\n            entity.HasOne(d => d.Project).WithMany(p => p.Tasks)\n                .HasForeignKey(d => d.ProjectId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Document\n{\n    public int DocumentId { get; set; }\n\n    public string? DocumentTypeCode { get; set; }\n\n    public int GrantId { get; set; }\n\n    public DateTime SentDate { get; set; }\n\n    public DateTime ResponseReceivedDate { get; set; }\n\n    public string OtherDetails { get; set; } = null!;\n\n    public virtual DocumentType? DocumentTypeCodeNavigation { get; set; }\n\n    public virtual Grant Grant { get; set; } = null!;\n}",
      "public partial class DocumentType\n{\n    public string DocumentTypeCode { get; set; } = null!;\n\n    public string DocumentDescription { get; set; } = null!;\n\n    public virtual ICollection<Document> Documents { get; set; } = new List<Document>();\n}",
      "public partial class Grant\n{\n    public int GrantId { get; set; }\n\n    public int OrganisationId { get; set; }\n\n    public decimal GrantAmount { get; set; }\n\n    public DateTime GrantStartDate { get; set; }\n\n    public DateTime GrantEndDate { get; set; }\n\n    public string OtherDetails { get; set; } = null!;\n\n    public virtual ICollection<Document> Documents { get; set; } = new List<Document>();\n\n    public virtual Organisation Organisation { get; set; } = null!;\n}",
      "public partial class Organisation\n{\n    public int OrganisationId { get; set; }\n\n    public string OrganisationType { get; set; } = null!;\n\n    public string OrganisationDetails { get; set; } = null!;\n\n    public virtual ICollection<Grant> Grants { get; set; } = new List<Grant>();\n\n    public virtual OrganisationType OrganisationTypeNavigation { get; set; } = null!;\n\n    public virtual ICollection<Project> Projects { get; set; } = new List<Project>();\n\n    public virtual ICollection<ResearchStaff> ResearchStaffs { get; set; } = new List<ResearchStaff>();\n}",
      "public partial class OrganisationType\n{\n    public string OrganisationType1 { get; set; } = null!;\n\n    public string OrganisationTypeDescription { get; set; } = null!;\n\n    public virtual ICollection<Organisation> Organisations { get; set; } = new List<Organisation>();\n}",
      "public partial class Project\n{\n    public int ProjectId { get; set; }\n\n    public int OrganisationId { get; set; }\n\n    public string ProjectDetails { get; set; } = null!;\n\n    public virtual Organisation Organisation { get; set; } = null!;\n\n    public virtual ICollection<ProjectStaff> ProjectStaffs { get; set; } = new List<ProjectStaff>();\n\n    public virtual ICollection<Task> Tasks { get; set; } = new List<Task>();\n}",
      "public partial class ProjectOutcome\n{\n    public int ProjectId { get; set; }\n\n    public string OutcomeCode { get; set; } = null!;\n\n    public string? OutcomeDetails { get; set; }\n\n    public virtual ResearchOutcome OutcomeCodeNavigation { get; set; } = null!;\n\n    public virtual Project Project { get; set; } = null!;\n}",
      "public partial class ProjectStaff\n{\n    public double StaffId { get; set; }\n\n    public int ProjectId { get; set; }\n\n    public string RoleCode { get; set; } = null!;\n\n    public DateTime? DateFrom { get; set; }\n\n    public DateTime? DateTo { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual Project Project { get; set; } = null!;\n\n    public virtual StaffRole RoleCodeNavigation { get; set; } = null!;\n}",
      "public partial class ResearchOutcome\n{\n    public string OutcomeCode { get; set; } = null!;\n\n    public string OutcomeDescription { get; set; } = null!;\n}",
      "public partial class ResearchStaff\n{\n    public int StaffId { get; set; }\n\n    public int EmployerOrganisationId { get; set; }\n\n    public string StaffDetails { get; set; } = null!;\n\n    public virtual Organisation EmployerOrganisation { get; set; } = null!;\n}",
      "public partial class StaffRole\n{\n    public string RoleCode { get; set; } = null!;\n\n    public string RoleDescription { get; set; } = null!;\n\n    public virtual ICollection<ProjectStaff> ProjectStaffs { get; set; } = new List<ProjectStaff>();\n}",
      "public partial class Task\n{\n    public int TaskId { get; set; }\n\n    public int ProjectId { get; set; }\n\n    public string TaskDetails { get; set; } = null!;\n\n    public string? EgAgreeObjectives { get; set; }\n\n    public virtual Project Project { get; set; } = null!;\n}"
    ]
  },
  "behavior_monitoring": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.behavior_monitoring;\n\npublic partial class BehaviorMonitoringContext : DbContext\n{\n    public BehaviorMonitoringContext()\n    {\n    }\n\n    public BehaviorMonitoringContext(DbContextOptions<BehaviorMonitoringContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Address> Addresses { get; set; }\n\n    public virtual DbSet<AssessmentNote> AssessmentNotes { get; set; }\n\n    public virtual DbSet<BehaviorIncident> BehaviorIncidents { get; set; }\n\n    public virtual DbSet<Detention> Detentions { get; set; }\n\n    public virtual DbSet<RefAddressType> RefAddressTypes { get; set; }\n\n    public virtual DbSet<RefDetentionType> RefDetentionTypes { get; set; }\n\n    public virtual DbSet<RefIncidentType> RefIncidentTypes { get; set; }\n\n    public virtual DbSet<Student> Students { get; set; }\n\n    public virtual DbSet<StudentAddress> StudentAddresses { get; set; }\n\n    public virtual DbSet<StudentsInDetention> StudentsInDetentions { get; set; }\n\n    public virtual DbSet<Teacher> Teachers { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/behavior_monitoring.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Address>(entity =>\n        {\n            entity.Property(e => e.AddressId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"address_id\");\n            entity.Property(e => e.City)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"city\");\n            entity.Property(e => e.Country)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"country\");\n            entity.Property(e => e.Line1)\n                .HasColumnType(\"VARCHAR(120)\")\n                .HasColumnName(\"line_1\");\n            entity.Property(e => e.Line2)\n                .HasColumnType(\"VARCHAR(120)\")\n                .HasColumnName(\"line_2\");\n            entity.Property(e => e.Line3)\n                .HasColumnType(\"VARCHAR(120)\")\n                .HasColumnName(\"line_3\");\n            entity.Property(e => e.OtherAddressDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_address_details\");\n            entity.Property(e => e.StateProvinceCounty)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"state_province_county\");\n            entity.Property(e => e.ZipPostcode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"zip_postcode\");\n        });\n\n        modelBuilder.Entity<AssessmentNote>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Assessment_Notes\");\n\n            entity.Property(e => e.DateOfNotes)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_of_notes\");\n            entity.Property(e => e.NotesId).HasColumnName(\"notes_id\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n            entity.Property(e => e.StudentId).HasColumnName(\"student_id\");\n            entity.Property(e => e.TeacherId).HasColumnName(\"teacher_id\");\n            entity.Property(e => e.TextOfNotes)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"text_of_notes\");\n\n            entity.HasOne(d => d.Student).WithMany().HasForeignKey(d => d.StudentId);\n\n            entity.HasOne(d => d.Teacher).WithMany()\n                .HasForeignKey(d => d.TeacherId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<BehaviorIncident>(entity =>\n        {\n            entity.HasKey(e => e.IncidentId);\n\n            entity.ToTable(\"Behavior_Incident\");\n\n            entity.Property(e => e.IncidentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"incident_id\");\n            entity.Property(e => e.DateIncidentEnd)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_incident_end\");\n            entity.Property(e => e.DateIncidentStart)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_incident_start\");\n            entity.Property(e => e.IncidentSummary)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"incident_summary\");\n            entity.Property(e => e.IncidentTypeCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"incident_type_code\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n            entity.Property(e => e.Recommendations)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"recommendations\");\n            entity.Property(e => e.StudentId).HasColumnName(\"student_id\");\n\n            entity.HasOne(d => d.IncidentTypeCodeNavigation).WithMany(p => p.BehaviorIncidents)\n                .HasForeignKey(d => d.IncidentTypeCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Student).WithMany(p => p.BehaviorIncidents)\n                .HasForeignKey(d => d.StudentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Detention>(entity =>\n        {\n            entity.ToTable(\"Detention\");\n\n            entity.Property(e => e.DetentionId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"detention_id\");\n            entity.Property(e => e.DatetimeDetentionEnd)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"datetime_detention_end\");\n            entity.Property(e => e.DatetimeDetentionStart)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"datetime_detention_start\");\n            entity.Property(e => e.DetentionSummary)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"detention_summary\");\n            entity.Property(e => e.DetentionTypeCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"detention_type_code\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n            entity.Property(e => e.TeacherId).HasColumnName(\"teacher_id\");\n\n            entity.HasOne(d => d.DetentionTypeCodeNavigation).WithMany(p => p.Detentions)\n                .HasForeignKey(d => d.DetentionTypeCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Teacher).WithMany(p => p.Detentions).HasForeignKey(d => d.TeacherId);\n        });\n\n        modelBuilder.Entity<RefAddressType>(entity =>\n        {\n            entity.HasKey(e => e.AddressTypeCode);\n\n            entity.ToTable(\"Ref_Address_Types\");\n\n            entity.Property(e => e.AddressTypeCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"address_type_code\");\n            entity.Property(e => e.AddressTypeDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"address_type_description\");\n        });\n\n        modelBuilder.Entity<RefDetentionType>(entity =>\n        {\n            entity.HasKey(e => e.DetentionTypeCode);\n\n            entity.ToTable(\"Ref_Detention_Type\");\n\n            entity.Property(e => e.DetentionTypeCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"detention_type_code\");\n            entity.Property(e => e.DetentionTypeDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"detention_type_description\");\n        });\n\n        modelBuilder.Entity<RefIncidentType>(entity =>\n        {\n            entity.HasKey(e => e.IncidentTypeCode);\n\n            entity.ToTable(\"Ref_Incident_Type\");\n\n            entity.Property(e => e.IncidentTypeCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"incident_type_code\");\n            entity.Property(e => e.IncidentTypeDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"incident_type_description\");\n        });\n\n        modelBuilder.Entity<Student>(entity =>\n        {\n            entity.Property(e => e.StudentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"student_id\");\n            entity.Property(e => e.AddressId).HasColumnName(\"address_id\");\n            entity.Property(e => e.CellMobileNumber)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"cell_mobile_number\");\n            entity.Property(e => e.DateFirstRental)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_first_rental\");\n            entity.Property(e => e.DateLeftUniversity)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_left_university\");\n            entity.Property(e => e.EmailAddress)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"email_address\");\n            entity.Property(e => e.FirstName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"first_name\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"last_name\");\n            entity.Property(e => e.MiddleName)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"middle_name\");\n            entity.Property(e => e.OtherStudentDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_student_details\");\n\n            entity.HasOne(d => d.Address).WithMany(p => p.Students)\n                .HasForeignKey(d => d.AddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<StudentAddress>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Student_Addresses\");\n\n            entity.Property(e => e.AddressId).HasColumnName(\"address_id\");\n            entity.Property(e => e.DateAddressFrom)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_address_from\");\n            entity.Property(e => e.DateAddressTo)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_address_to\");\n            entity.Property(e => e.MonthlyRental)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"monthly_rental\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n            entity.Property(e => e.StudentId).HasColumnName(\"student_id\");\n\n            entity.HasOne(d => d.Address).WithMany()\n                .HasForeignKey(d => d.AddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Student).WithMany()\n                .HasForeignKey(d => d.StudentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<StudentsInDetention>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Students_in_Detention\");\n\n            entity.Property(e => e.DetentionId).HasColumnName(\"detention_id\");\n            entity.Property(e => e.IncidentId).HasColumnName(\"incident_id\");\n            entity.Property(e => e.StudentId).HasColumnName(\"student_id\");\n\n            entity.HasOne(d => d.Detention).WithMany()\n                .HasForeignKey(d => d.DetentionId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Incident).WithMany()\n                .HasForeignKey(d => d.IncidentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Student).WithMany()\n                .HasForeignKey(d => d.StudentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Teacher>(entity =>\n        {\n            entity.Property(e => e.TeacherId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"teacher_id\");\n            entity.Property(e => e.AddressId).HasColumnName(\"address_id\");\n            entity.Property(e => e.CellMobileNumber)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"cell_mobile_number\");\n            entity.Property(e => e.EmailAddress)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"email_address\");\n            entity.Property(e => e.FirstName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"first_name\");\n            entity.Property(e => e.Gender)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"gender\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"last_name\");\n            entity.Property(e => e.MiddleName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"middle_name\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n\n            entity.HasOne(d => d.Address).WithMany(p => p.Teachers)\n                .HasForeignKey(d => d.AddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Address\n{\n    public int AddressId { get; set; }\n\n    public string? Line1 { get; set; }\n\n    public string? Line2 { get; set; }\n\n    public string? Line3 { get; set; }\n\n    public string? City { get; set; }\n\n    public string? ZipPostcode { get; set; }\n\n    public string? StateProvinceCounty { get; set; }\n\n    public string? Country { get; set; }\n\n    public string? OtherAddressDetails { get; set; }\n\n    public virtual ICollection<Student> Students { get; set; } = new List<Student>();\n\n    public virtual ICollection<Teacher> Teachers { get; set; } = new List<Teacher>();\n}",
      "public partial class AssessmentNote\n{\n    public int NotesId { get; set; }\n\n    public int? StudentId { get; set; }\n\n    public int TeacherId { get; set; }\n\n    public DateTime? DateOfNotes { get; set; }\n\n    public string? TextOfNotes { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual Student? Student { get; set; }\n\n    public virtual Teacher Teacher { get; set; } = null!;\n}",
      "public partial class BehaviorIncident\n{\n    public int IncidentId { get; set; }\n\n    public string IncidentTypeCode { get; set; } = null!;\n\n    public int StudentId { get; set; }\n\n    public DateTime? DateIncidentStart { get; set; }\n\n    public DateTime? DateIncidentEnd { get; set; }\n\n    public string? IncidentSummary { get; set; }\n\n    public string? Recommendations { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual RefIncidentType IncidentTypeCodeNavigation { get; set; } = null!;\n\n    public virtual Student Student { get; set; } = null!;\n}",
      "public partial class Detention\n{\n    public int DetentionId { get; set; }\n\n    public string DetentionTypeCode { get; set; } = null!;\n\n    public int? TeacherId { get; set; }\n\n    public DateTime? DatetimeDetentionStart { get; set; }\n\n    public DateTime? DatetimeDetentionEnd { get; set; }\n\n    public string? DetentionSummary { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual RefDetentionType DetentionTypeCodeNavigation { get; set; } = null!;\n\n    public virtual Teacher? Teacher { get; set; }\n}",
      "public partial class RefAddressType\n{\n    public string AddressTypeCode { get; set; } = null!;\n\n    public string? AddressTypeDescription { get; set; }\n}",
      "public partial class RefDetentionType\n{\n    public string DetentionTypeCode { get; set; } = null!;\n\n    public string? DetentionTypeDescription { get; set; }\n\n    public virtual ICollection<Detention> Detentions { get; set; } = new List<Detention>();\n}",
      "public partial class RefIncidentType\n{\n    public string IncidentTypeCode { get; set; } = null!;\n\n    public string? IncidentTypeDescription { get; set; }\n\n    public virtual ICollection<BehaviorIncident> BehaviorIncidents { get; set; } = new List<BehaviorIncident>();\n}",
      "public partial class Student\n{\n    public int StudentId { get; set; }\n\n    public int AddressId { get; set; }\n\n    public string? FirstName { get; set; }\n\n    public string? MiddleName { get; set; }\n\n    public string? LastName { get; set; }\n\n    public string? CellMobileNumber { get; set; }\n\n    public string? EmailAddress { get; set; }\n\n    public DateTime? DateFirstRental { get; set; }\n\n    public DateTime? DateLeftUniversity { get; set; }\n\n    public string? OtherStudentDetails { get; set; }\n\n    public virtual Address Address { get; set; } = null!;\n\n    public virtual ICollection<BehaviorIncident> BehaviorIncidents { get; set; } = new List<BehaviorIncident>();\n}",
      "public partial class StudentAddress\n{\n    public int StudentId { get; set; }\n\n    public int AddressId { get; set; }\n\n    public DateTime DateAddressFrom { get; set; }\n\n    public DateTime? DateAddressTo { get; set; }\n\n    public decimal? MonthlyRental { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual Address Address { get; set; } = null!;\n\n    public virtual Student Student { get; set; } = null!;\n}",
      "public partial class StudentsInDetention\n{\n    public int StudentId { get; set; }\n\n    public int DetentionId { get; set; }\n\n    public int IncidentId { get; set; }\n\n    public virtual Detention Detention { get; set; } = null!;\n\n    public virtual BehaviorIncident Incident { get; set; } = null!;\n\n    public virtual Student Student { get; set; } = null!;\n}",
      "public partial class Teacher\n{\n    public int TeacherId { get; set; }\n\n    public int AddressId { get; set; }\n\n    public string? FirstName { get; set; }\n\n    public string? MiddleName { get; set; }\n\n    public string? LastName { get; set; }\n\n    public string? Gender { get; set; }\n\n    public string? CellMobileNumber { get; set; }\n\n    public string? EmailAddress { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual Address Address { get; set; } = null!;\n\n    public virtual ICollection<Detention> Detentions { get; set; } = new List<Detention>();\n}"
    ]
  },
  "student_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.student_1;\n\npublic partial class Student1Context : DbContext\n{\n    public Student1Context()\n    {\n    }\n\n    public Student1Context(DbContextOptions<Student1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<List> Lists { get; set; }\n\n    public virtual DbSet<Teacher> Teachers { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/student_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<List>(entity =>\n        {\n            entity.HasKey(e => new { e.LastName, e.FirstName });\n\n            entity.ToTable(\"list\");\n        });\n\n        modelBuilder.Entity<Teacher>(entity =>\n        {\n            entity.HasKey(e => new { e.LastName, e.FirstName });\n\n            entity.ToTable(\"teachers\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class List\n{\n    public string LastName { get; set; } = null!;\n\n    public string FirstName { get; set; } = null!;\n\n    public int? Grade { get; set; }\n\n    public int? Classroom { get; set; }\n}",
      "public partial class Teacher\n{\n    public string LastName { get; set; } = null!;\n\n    public string FirstName { get; set; } = null!;\n\n    public int? Classroom { get; set; }\n}"
    ]
  },
  "chinook_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.chinook_1;\n\npublic partial class Chinook1Context : DbContext\n{\n    public Chinook1Context()\n    {\n    }\n\n    public Chinook1Context(DbContextOptions<Chinook1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Album> Albums { get; set; }\n\n    public virtual DbSet<Artist> Artists { get; set; }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<Employee> Employees { get; set; }\n\n    public virtual DbSet<Genre> Genres { get; set; }\n\n    public virtual DbSet<Invoice> Invoices { get; set; }\n\n    public virtual DbSet<InvoiceLine> InvoiceLines { get; set; }\n\n    public virtual DbSet<MediaType> MediaTypes { get; set; }\n\n    public virtual DbSet<Playlist> Playlists { get; set; }\n\n    public virtual DbSet<Track> Tracks { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/chinook_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Album>(entity =>\n        {\n            entity.ToTable(\"Album\");\n\n            entity.HasIndex(e => e.ArtistId, \"idx_Album_IFK_AlbumArtistId\");\n\n            entity.Property(e => e.AlbumId).ValueGeneratedNever();\n            entity.Property(e => e.Title).HasColumnType(\"varchar(160)\");\n\n            entity.HasOne(d => d.Artist).WithMany(p => p.Albums)\n                .HasForeignKey(d => d.ArtistId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Artist>(entity =>\n        {\n            entity.ToTable(\"Artist\");\n\n            entity.Property(e => e.ArtistId).ValueGeneratedNever();\n            entity.Property(e => e.Name)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(120)\");\n        });\n\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.ToTable(\"Customer\");\n\n            entity.HasIndex(e => e.SupportRepId, \"idx_Customer_IFK_CustomerSupportRepId\");\n\n            entity.Property(e => e.CustomerId).ValueGeneratedNever();\n            entity.Property(e => e.Address)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(70)\");\n            entity.Property(e => e.City)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(40)\");\n            entity.Property(e => e.Company)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(80)\");\n            entity.Property(e => e.Country)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(40)\");\n            entity.Property(e => e.Email).HasColumnType(\"varchar(60)\");\n            entity.Property(e => e.Fax)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(24)\");\n            entity.Property(e => e.FirstName).HasColumnType(\"varchar(40)\");\n            entity.Property(e => e.LastName).HasColumnType(\"varchar(20)\");\n            entity.Property(e => e.Phone)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(24)\");\n            entity.Property(e => e.PostalCode)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(10)\");\n            entity.Property(e => e.State)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(40)\");\n            entity.Property(e => e.SupportRepId).HasDefaultValueSql(\"NULL\");\n\n            entity.HasOne(d => d.SupportRep).WithMany(p => p.Customers).HasForeignKey(d => d.SupportRepId);\n        });\n\n        modelBuilder.Entity<Employee>(entity =>\n        {\n            entity.ToTable(\"Employee\");\n\n            entity.HasIndex(e => e.ReportsTo, \"idx_Employee_IFK_EmployeeReportsTo\");\n\n            entity.Property(e => e.EmployeeId).ValueGeneratedNever();\n            entity.Property(e => e.Address)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(70)\");\n            entity.Property(e => e.BirthDate)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"datetime\");\n            entity.Property(e => e.City)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(40)\");\n            entity.Property(e => e.Country)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(40)\");\n            entity.Property(e => e.Email)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(60)\");\n            entity.Property(e => e.Fax)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(24)\");\n            entity.Property(e => e.FirstName).HasColumnType(\"varchar(20)\");\n            entity.Property(e => e.HireDate)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"datetime\");\n            entity.Property(e => e.LastName).HasColumnType(\"varchar(20)\");\n            entity.Property(e => e.Phone)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(24)\");\n            entity.Property(e => e.PostalCode)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(10)\");\n            entity.Property(e => e.ReportsTo).HasDefaultValueSql(\"NULL\");\n            entity.Property(e => e.State)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(40)\");\n            entity.Property(e => e.Title)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(30)\");\n\n            entity.HasOne(d => d.ReportsToNavigation).WithMany(p => p.InverseReportsToNavigation).HasForeignKey(d => d.ReportsTo);\n        });\n\n        modelBuilder.Entity<Genre>(entity =>\n        {\n            entity.ToTable(\"Genre\");\n\n            entity.Property(e => e.GenreId).ValueGeneratedNever();\n            entity.Property(e => e.Name)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(120)\");\n        });\n\n        modelBuilder.Entity<Invoice>(entity =>\n        {\n            entity.ToTable(\"Invoice\");\n\n            entity.HasIndex(e => e.CustomerId, \"idx_Invoice_IFK_InvoiceCustomerId\");\n\n            entity.Property(e => e.InvoiceId).ValueGeneratedNever();\n            entity.Property(e => e.BillingAddress)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(70)\");\n            entity.Property(e => e.BillingCity)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(40)\");\n            entity.Property(e => e.BillingCountry)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(40)\");\n            entity.Property(e => e.BillingPostalCode)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(10)\");\n            entity.Property(e => e.BillingState)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(40)\");\n            entity.Property(e => e.InvoiceDate).HasColumnType(\"datetime\");\n            entity.Property(e => e.Total).HasColumnType(\"decimal(10,2)\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.Invoices)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<InvoiceLine>(entity =>\n        {\n            entity.ToTable(\"InvoiceLine\");\n\n            entity.HasIndex(e => e.InvoiceId, \"idx_InvoiceLine_IFK_InvoiceLineInvoiceId\");\n\n            entity.HasIndex(e => e.TrackId, \"idx_InvoiceLine_IFK_InvoiceLineTrackId\");\n\n            entity.Property(e => e.InvoiceLineId).ValueGeneratedNever();\n            entity.Property(e => e.UnitPrice).HasColumnType(\"decimal(10,2)\");\n\n            entity.HasOne(d => d.Invoice).WithMany(p => p.InvoiceLines)\n                .HasForeignKey(d => d.InvoiceId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Track).WithMany(p => p.InvoiceLines)\n                .HasForeignKey(d => d.TrackId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<MediaType>(entity =>\n        {\n            entity.ToTable(\"MediaType\");\n\n            entity.Property(e => e.MediaTypeId).ValueGeneratedNever();\n            entity.Property(e => e.Name)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(120)\");\n        });\n\n        modelBuilder.Entity<Playlist>(entity =>\n        {\n            entity.ToTable(\"Playlist\");\n\n            entity.Property(e => e.PlaylistId).ValueGeneratedNever();\n            entity.Property(e => e.Name)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(120)\");\n\n            entity.HasMany(d => d.Tracks).WithMany(p => p.Playlists)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"PlaylistTrack\",\n                    r => r.HasOne<Track>().WithMany()\n                        .HasForeignKey(\"TrackId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Playlist>().WithMany()\n                        .HasForeignKey(\"PlaylistId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"PlaylistId\", \"TrackId\");\n                        j.ToTable(\"PlaylistTrack\");\n                        j.HasIndex(new[] { \"TrackId\" }, \"idx_PlaylistTrack_IFK_PlaylistTrackTrackId\");\n                    });\n        });\n\n        modelBuilder.Entity<Track>(entity =>\n        {\n            entity.ToTable(\"Track\");\n\n            entity.HasIndex(e => e.AlbumId, \"idx_Track_IFK_TrackAlbumId\");\n\n            entity.HasIndex(e => e.GenreId, \"idx_Track_IFK_TrackGenreId\");\n\n            entity.HasIndex(e => e.MediaTypeId, \"idx_Track_IFK_TrackMediaTypeId\");\n\n            entity.Property(e => e.TrackId).ValueGeneratedNever();\n            entity.Property(e => e.AlbumId).HasDefaultValueSql(\"NULL\");\n            entity.Property(e => e.Bytes).HasDefaultValueSql(\"NULL\");\n            entity.Property(e => e.Composer)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(220)\");\n            entity.Property(e => e.GenreId).HasDefaultValueSql(\"NULL\");\n            entity.Property(e => e.Name).HasColumnType(\"varchar(200)\");\n            entity.Property(e => e.UnitPrice).HasColumnType(\"decimal(10,2)\");\n\n            entity.HasOne(d => d.Album).WithMany(p => p.Tracks).HasForeignKey(d => d.AlbumId);\n\n            entity.HasOne(d => d.Genre).WithMany(p => p.Tracks).HasForeignKey(d => d.GenreId);\n\n            entity.HasOne(d => d.MediaType).WithMany(p => p.Tracks)\n                .HasForeignKey(d => d.MediaTypeId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Album\n{\n    public int AlbumId { get; set; }\n\n    public string Title { get; set; } = null!;\n\n    public int ArtistId { get; set; }\n\n    public virtual Artist Artist { get; set; } = null!;\n\n    public virtual ICollection<Track> Tracks { get; set; } = new List<Track>();\n}",
      "public partial class Artist\n{\n    public int ArtistId { get; set; }\n\n    public string? Name { get; set; }\n\n    public virtual ICollection<Album> Albums { get; set; } = new List<Album>();\n}",
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public string FirstName { get; set; } = null!;\n\n    public string LastName { get; set; } = null!;\n\n    public string? Company { get; set; }\n\n    public string? Address { get; set; }\n\n    public string? City { get; set; }\n\n    public string? State { get; set; }\n\n    public string? Country { get; set; }\n\n    public string? PostalCode { get; set; }\n\n    public string? Phone { get; set; }\n\n    public string? Fax { get; set; }\n\n    public string Email { get; set; } = null!;\n\n    public int? SupportRepId { get; set; }\n\n    public virtual ICollection<Invoice> Invoices { get; set; } = new List<Invoice>();\n\n    public virtual Employee? SupportRep { get; set; }\n}",
      "public partial class Employee\n{\n    public int EmployeeId { get; set; }\n\n    public string LastName { get; set; } = null!;\n\n    public string FirstName { get; set; } = null!;\n\n    public string? Title { get; set; }\n\n    public int? ReportsTo { get; set; }\n\n    public DateTime? BirthDate { get; set; }\n\n    public DateTime? HireDate { get; set; }\n\n    public string? Address { get; set; }\n\n    public string? City { get; set; }\n\n    public string? State { get; set; }\n\n    public string? Country { get; set; }\n\n    public string? PostalCode { get; set; }\n\n    public string? Phone { get; set; }\n\n    public string? Fax { get; set; }\n\n    public string? Email { get; set; }\n\n    public virtual ICollection<Customer> Customers { get; set; } = new List<Customer>();\n\n    public virtual ICollection<Employee> InverseReportsToNavigation { get; set; } = new List<Employee>();\n\n    public virtual Employee? ReportsToNavigation { get; set; }\n}",
      "public partial class Genre\n{\n    public int GenreId { get; set; }\n\n    public string? Name { get; set; }\n\n    public virtual ICollection<Track> Tracks { get; set; } = new List<Track>();\n}",
      "public partial class Invoice\n{\n    public int InvoiceId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public DateTime InvoiceDate { get; set; }\n\n    public string? BillingAddress { get; set; }\n\n    public string? BillingCity { get; set; }\n\n    public string? BillingState { get; set; }\n\n    public string? BillingCountry { get; set; }\n\n    public string? BillingPostalCode { get; set; }\n\n    public decimal Total { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n\n    public virtual ICollection<InvoiceLine> InvoiceLines { get; set; } = new List<InvoiceLine>();\n}",
      "public partial class InvoiceLine\n{\n    public int InvoiceLineId { get; set; }\n\n    public int InvoiceId { get; set; }\n\n    public int TrackId { get; set; }\n\n    public decimal UnitPrice { get; set; }\n\n    public int Quantity { get; set; }\n\n    public virtual Invoice Invoice { get; set; } = null!;\n\n    public virtual Track Track { get; set; } = null!;\n}",
      "public partial class MediaType\n{\n    public int MediaTypeId { get; set; }\n\n    public string? Name { get; set; }\n\n    public virtual ICollection<Track> Tracks { get; set; } = new List<Track>();\n}",
      "public partial class Track\n{\n    public int TrackId { get; set; }\n\n    public string Name { get; set; } = null!;\n\n    public int? AlbumId { get; set; }\n\n    public int MediaTypeId { get; set; }\n\n    public int? GenreId { get; set; }\n\n    public string? Composer { get; set; }\n\n    public int Milliseconds { get; set; }\n\n    public int? Bytes { get; set; }\n\n    public decimal UnitPrice { get; set; }\n\n    public virtual Album? Album { get; set; }\n\n    public virtual Genre? Genre { get; set; }\n\n    public virtual ICollection<InvoiceLine> InvoiceLines { get; set; } = new List<InvoiceLine>();\n\n    public virtual MediaType MediaType { get; set; } = null!;\n\n    public virtual ICollection<Playlist> Playlists { get; set; } = new List<Playlist>();\n}"
    ]
  },
  "driving_school": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.driving_school;\n\npublic partial class DrivingSchoolContext : DbContext\n{\n    public DrivingSchoolContext()\n    {\n    }\n\n    public DrivingSchoolContext(DbContextOptions<DrivingSchoolContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Address> Addresses { get; set; }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<CustomerPayment> CustomerPayments { get; set; }\n\n    public virtual DbSet<Lesson> Lessons { get; set; }\n\n    public virtual DbSet<Staff> Staff { get; set; }\n\n    public virtual DbSet<Vehicle> Vehicles { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/driving_school.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Address>(entity =>\n        {\n            entity.Property(e => e.AddressId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"address_id\");\n            entity.Property(e => e.City)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"city\");\n            entity.Property(e => e.Country)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"country\");\n            entity.Property(e => e.Line1NumberBuilding)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"line_1_number_building\");\n            entity.Property(e => e.StateProvinceCounty)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"state_province_county\");\n            entity.Property(e => e.ZipPostcode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"zip_postcode\");\n        });\n\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.Property(e => e.CustomerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"customer_id\");\n            entity.Property(e => e.AmountOutstanding)\n                .HasColumnType(\"DOUBLE\")\n                .HasColumnName(\"amount_outstanding\");\n            entity.Property(e => e.CellMobilePhoneNumber)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"cell_mobile_phone_number\");\n            entity.Property(e => e.CustomerAddressId).HasColumnName(\"customer_address_id\");\n            entity.Property(e => e.CustomerStatusCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"customer_status_code\");\n            entity.Property(e => e.DateBecameCustomer)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_became_customer\");\n            entity.Property(e => e.DateOfBirth)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_of_birth\");\n            entity.Property(e => e.EmailAddress)\n                .HasColumnType(\"VARCHAR(250)\")\n                .HasColumnName(\"email_address\");\n            entity.Property(e => e.FirstName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"first_name\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"last_name\");\n            entity.Property(e => e.PhoneNumber)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"phone_number\");\n\n            entity.HasOne(d => d.CustomerAddress).WithMany(p => p.Customers)\n                .HasForeignKey(d => d.CustomerAddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<CustomerPayment>(entity =>\n        {\n            entity.HasKey(e => new { e.CustomerId, e.DatetimePayment });\n\n            entity.ToTable(\"Customer_Payments\");\n\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.DatetimePayment)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"datetime_payment\");\n            entity.Property(e => e.AmountPayment)\n                .HasColumnType(\"DOUBLE\")\n                .HasColumnName(\"amount_payment\");\n            entity.Property(e => e.PaymentMethodCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"payment_method_code\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerPayments)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Lesson>(entity =>\n        {\n            entity.Property(e => e.LessonId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"lesson_id\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.LessonDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"lesson_date\");\n            entity.Property(e => e.LessonStatusCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"lesson_status_code\");\n            entity.Property(e => e.LessonTime)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"lesson_time\");\n            entity.Property(e => e.Price)\n                .HasColumnType(\"DOUBLE\")\n                .HasColumnName(\"price\");\n            entity.Property(e => e.StaffId).HasColumnName(\"staff_id\");\n            entity.Property(e => e.VehicleId).HasColumnName(\"vehicle_id\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.Lessons)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Staff).WithMany(p => p.Lessons).HasForeignKey(d => d.StaffId);\n\n            entity.HasOne(d => d.Vehicle).WithMany(p => p.Lessons)\n                .HasForeignKey(d => d.VehicleId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Staff>(entity =>\n        {\n            entity.Property(e => e.StaffId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"staff_id\");\n            entity.Property(e => e.DateJoinedStaff)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_joined_staff\");\n            entity.Property(e => e.DateLeftStaff)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_left_staff\");\n            entity.Property(e => e.DateOfBirth)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_of_birth\");\n            entity.Property(e => e.FirstName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"first_name\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"last_name\");\n            entity.Property(e => e.MiddleName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"middle_name\");\n            entity.Property(e => e.Nickname)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"nickname\");\n            entity.Property(e => e.StaffAddressId).HasColumnName(\"staff_address_id\");\n\n            entity.HasOne(d => d.StaffAddress).WithMany(p => p.Staff)\n                .HasForeignKey(d => d.StaffAddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Vehicle>(entity =>\n        {\n            entity.Property(e => e.VehicleId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"vehicle_id\");\n            entity.Property(e => e.VehicleDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"vehicle_details\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Address\n{\n    public int AddressId { get; set; }\n\n    public string? Line1NumberBuilding { get; set; }\n\n    public string? City { get; set; }\n\n    public string? ZipPostcode { get; set; }\n\n    public string? StateProvinceCounty { get; set; }\n\n    public string? Country { get; set; }\n\n    public virtual ICollection<Customer> Customers { get; set; } = new List<Customer>();\n\n    public virtual ICollection<Staff> Staff { get; set; } = new List<Staff>();\n}",
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public int CustomerAddressId { get; set; }\n\n    public string CustomerStatusCode { get; set; } = null!;\n\n    public DateTime? DateBecameCustomer { get; set; }\n\n    public DateTime? DateOfBirth { get; set; }\n\n    public string? FirstName { get; set; }\n\n    public string? LastName { get; set; }\n\n    public double? AmountOutstanding { get; set; }\n\n    public string? EmailAddress { get; set; }\n\n    public string? PhoneNumber { get; set; }\n\n    public string? CellMobilePhoneNumber { get; set; }\n\n    public virtual Address CustomerAddress { get; set; } = null!;\n\n    public virtual ICollection<CustomerPayment> CustomerPayments { get; set; } = new List<CustomerPayment>();\n\n    public virtual ICollection<Lesson> Lessons { get; set; } = new List<Lesson>();\n}",
      "public partial class CustomerPayment\n{\n    public int CustomerId { get; set; }\n\n    public DateTime DatetimePayment { get; set; }\n\n    public string PaymentMethodCode { get; set; } = null!;\n\n    public double? AmountPayment { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n}",
      "public partial class Lesson\n{\n    public int LessonId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public string LessonStatusCode { get; set; } = null!;\n\n    public int? StaffId { get; set; }\n\n    public int VehicleId { get; set; }\n\n    public DateTime? LessonDate { get; set; }\n\n    public string? LessonTime { get; set; }\n\n    public double? Price { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n\n    public virtual Staff? Staff { get; set; }\n\n    public virtual Vehicle Vehicle { get; set; } = null!;\n}",
      "public partial class Staff\n{\n    public int StaffId { get; set; }\n\n    public int StaffAddressId { get; set; }\n\n    public string? Nickname { get; set; }\n\n    public string? FirstName { get; set; }\n\n    public string? MiddleName { get; set; }\n\n    public string? LastName { get; set; }\n\n    public DateTime? DateOfBirth { get; set; }\n\n    public DateTime? DateJoinedStaff { get; set; }\n\n    public DateTime? DateLeftStaff { get; set; }\n\n    public virtual ICollection<Lesson> Lessons { get; set; } = new List<Lesson>();\n\n    public virtual Address StaffAddress { get; set; } = null!;\n}",
      "public partial class Vehicle\n{\n    public int VehicleId { get; set; }\n\n    public string? VehicleDetails { get; set; }\n\n    public virtual ICollection<Lesson> Lessons { get; set; } = new List<Lesson>();\n}"
    ]
  },
  "protein_institute": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.protein_institute;\n\npublic partial class ProteinInstituteContext : DbContext\n{\n    public ProteinInstituteContext()\n    {\n    }\n\n    public ProteinInstituteContext(DbContextOptions<ProteinInstituteContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Building> Buildings { get; set; }\n\n    public virtual DbSet<Institution> Institutions { get; set; }\n\n    public virtual DbSet<Protein> Proteins { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/protein_institute.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Building>(entity =>\n        {\n            entity.ToTable(\"building\");\n\n            entity.Property(e => e.BuildingId).HasColumnName(\"building_id\");\n            entity.Property(e => e.Floors).HasColumnType(\"INT\");\n            entity.Property(e => e.HeightFeet)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Height_feet\");\n            entity.Property(e => e.StreetAddress).HasColumnName(\"Street_address\");\n            entity.Property(e => e.YearsAsTallest).HasColumnName(\"Years_as_tallest\");\n        });\n\n        modelBuilder.Entity<Institution>(entity =>\n        {\n            entity.ToTable(\"Institution\");\n\n            entity.Property(e => e.InstitutionId).HasColumnName(\"Institution_id\");\n            entity.Property(e => e.BuildingId).HasColumnName(\"building_id\");\n            entity.Property(e => e.Enrollment).HasColumnType(\"INT\");\n            entity.Property(e => e.Institution1).HasColumnName(\"Institution\");\n            entity.Property(e => e.PrimaryConference).HasColumnName(\"Primary_Conference\");\n\n            entity.HasOne(d => d.Building).WithMany(p => p.Institutions).HasForeignKey(d => d.BuildingId);\n        });\n\n        modelBuilder.Entity<Protein>(entity =>\n        {\n            entity.HasKey(e => e.CommonName);\n\n            entity.ToTable(\"protein\");\n\n            entity.Property(e => e.CommonName).HasColumnName(\"common_name\");\n            entity.Property(e => e.AccessionNumber).HasColumnName(\"accession_number\");\n            entity.Property(e => e.DivergenceFromHumanLineage).HasColumnName(\"divergence_from_human_lineage\");\n            entity.Property(e => e.InstitutionId).HasColumnName(\"Institution_id\");\n            entity.Property(e => e.ProteinName).HasColumnName(\"protein_name\");\n            entity.Property(e => e.SequenceIdentityToHumanProtein).HasColumnName(\"sequence_identity_to_human_protein\");\n            entity.Property(e => e.SequenceLength).HasColumnName(\"sequence_length\");\n\n            entity.HasOne(d => d.Institution).WithMany(p => p.Proteins).HasForeignKey(d => d.InstitutionId);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Building\n{\n    public string BuildingId { get; set; } = null!;\n\n    public string? Name { get; set; }\n\n    public string? StreetAddress { get; set; }\n\n    public string? YearsAsTallest { get; set; }\n\n    public int? HeightFeet { get; set; }\n\n    public int? Floors { get; set; }\n\n    public virtual ICollection<Institution> Institutions { get; set; } = new List<Institution>();\n}",
      "public partial class Institution\n{\n    public string InstitutionId { get; set; } = null!;\n\n    public string? Institution1 { get; set; }\n\n    public string? Location { get; set; }\n\n    public double? Founded { get; set; }\n\n    public string? Type { get; set; }\n\n    public int? Enrollment { get; set; }\n\n    public string? Team { get; set; }\n\n    public string? PrimaryConference { get; set; }\n\n    public string? BuildingId { get; set; }\n\n    public virtual Building? Building { get; set; }\n\n    public virtual ICollection<Protein> Proteins { get; set; } = new List<Protein>();\n}",
      "public partial class Protein\n{\n    public string CommonName { get; set; } = null!;\n\n    public string? ProteinName { get; set; }\n\n    public double? DivergenceFromHumanLineage { get; set; }\n\n    public string? AccessionNumber { get; set; }\n\n    public double? SequenceLength { get; set; }\n\n    public string? SequenceIdentityToHumanProtein { get; set; }\n\n    public string? InstitutionId { get; set; }\n\n    public virtual Institution? Institution { get; set; }\n}"
    ]
  },
  "flight_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.flight_1;\n\npublic partial class Flight1Context : DbContext\n{\n    public Flight1Context()\n    {\n    }\n\n    public Flight1Context(DbContextOptions<Flight1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Aircraft> Aircraft { get; set; }\n\n    public virtual DbSet<Employee> Employees { get; set; }\n\n    public virtual DbSet<Flight> Flights { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/flight_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Aircraft>(entity =>\n        {\n            entity.HasKey(e => e.Aid);\n\n            entity.ToTable(\"aircraft\");\n\n            entity.Property(e => e.Aid)\n                .ValueGeneratedNever()\n                .HasColumnType(\"number(9,0)\")\n                .HasColumnName(\"aid\");\n            entity.Property(e => e.Distance)\n                .HasColumnType(\"number(6,0)\")\n                .HasColumnName(\"distance\");\n            entity.Property(e => e.Name)\n                .HasColumnType(\"varchar2(30)\")\n                .HasColumnName(\"name\");\n        });\n\n        modelBuilder.Entity<Employee>(entity =>\n        {\n            entity.HasKey(e => e.Eid);\n\n            entity.ToTable(\"employee\");\n\n            entity.Property(e => e.Eid)\n                .ValueGeneratedNever()\n                .HasColumnType(\"number(9,0)\")\n                .HasColumnName(\"eid\");\n            entity.Property(e => e.Name)\n                .HasColumnType(\"varchar2(30)\")\n                .HasColumnName(\"name\");\n            entity.Property(e => e.Salary)\n                .HasColumnType(\"number(10,2)\")\n                .HasColumnName(\"salary\");\n\n            entity.HasMany(d => d.Aids).WithMany(p => p.Eids)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"Certificate\",\n                    r => r.HasOne<Aircraft>().WithMany()\n                        .HasForeignKey(\"Aid\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Employee>().WithMany()\n                        .HasForeignKey(\"Eid\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"Eid\", \"Aid\");\n                        j.ToTable(\"certificate\");\n                        j.IndexerProperty<int>(\"Eid\")\n                            .HasColumnType(\"number(9,0)\")\n                            .HasColumnName(\"eid\");\n                        j.IndexerProperty<int>(\"Aid\")\n                            .HasColumnType(\"number(9,0)\")\n                            .HasColumnName(\"aid\");\n                    });\n        });\n\n        modelBuilder.Entity<Flight>(entity =>\n        {\n            entity.HasKey(e => e.Flno);\n\n            entity.ToTable(\"flight\");\n\n            entity.Property(e => e.Flno)\n                .ValueGeneratedNever()\n                .HasColumnType(\"number(4,0)\")\n                .HasColumnName(\"flno\");\n            entity.Property(e => e.Aid)\n                .HasColumnType(\"number(9,0)\")\n                .HasColumnName(\"aid\");\n            entity.Property(e => e.ArrivalDate)\n                .HasColumnType(\"date\")\n                .HasColumnName(\"arrival_date\");\n            entity.Property(e => e.DepartureDate)\n                .HasColumnType(\"date\")\n                .HasColumnName(\"departure_date\");\n            entity.Property(e => e.Destination)\n                .HasColumnType(\"varchar2(20)\")\n                .HasColumnName(\"destination\");\n            entity.Property(e => e.Distance)\n                .HasColumnType(\"number(6,0)\")\n                .HasColumnName(\"distance\");\n            entity.Property(e => e.Origin)\n                .HasColumnType(\"varchar2(20)\")\n                .HasColumnName(\"origin\");\n            entity.Property(e => e.Price)\n                .HasColumnType(\"number(7,2)\")\n                .HasColumnName(\"price\");\n\n            entity.HasOne(d => d.AidNavigation).WithMany(p => p.Flights).HasForeignKey(d => d.Aid);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Aircraft\n{\n    public int Aid { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? Distance { get; set; }\n\n    public virtual ICollection<Flight> Flights { get; set; } = new List<Flight>();\n\n    public virtual ICollection<Employee> Eids { get; set; } = new List<Employee>();\n}",
      "public partial class Employee\n{\n    public int Eid { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? Salary { get; set; }\n\n    public virtual ICollection<Aircraft> Aids { get; set; } = new List<Aircraft>();\n}",
      "public partial class Flight\n{\n    public int Flno { get; set; }\n\n    public string? Origin { get; set; }\n\n    public string? Destination { get; set; }\n\n    public int? Distance { get; set; }\n\n    public string? DepartureDate { get; set; }\n\n    public string? ArrivalDate { get; set; }\n\n    public double? Price { get; set; }\n\n    public int? Aid { get; set; }\n\n    public virtual Aircraft? AidNavigation { get; set; }\n}"
    ]
  },
  "formula_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.formula_1;\n\npublic partial class Formula1Context : DbContext\n{\n    public Formula1Context()\n    {\n    }\n\n    public Formula1Context(DbContextOptions<Formula1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Circuit> Circuits { get; set; }\n\n    public virtual DbSet<Constructor> Constructors { get; set; }\n\n    public virtual DbSet<ConstructorResult> ConstructorResults { get; set; }\n\n    public virtual DbSet<ConstructorStanding> ConstructorStandings { get; set; }\n\n    public virtual DbSet<Driver> Drivers { get; set; }\n\n    public virtual DbSet<DriverStanding> DriverStandings { get; set; }\n\n    public virtual DbSet<LapTime> LapTimes { get; set; }\n\n    public virtual DbSet<PitStop> PitStops { get; set; }\n\n    public virtual DbSet<Qualifying> Qualifyings { get; set; }\n\n    public virtual DbSet<Race> Races { get; set; }\n\n    public virtual DbSet<Result> Results { get; set; }\n\n    public virtual DbSet<Season> Seasons { get; set; }\n\n    public virtual DbSet<Status> Statuses { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/formula_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Circuit>(entity =>\n        {\n            entity.ToTable(\"circuits\");\n\n            entity.Property(e => e.CircuitId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"circuitId\");\n            entity.Property(e => e.Alt).HasColumnName(\"alt\");\n            entity.Property(e => e.CircuitRef).HasColumnName(\"circuitRef\");\n            entity.Property(e => e.Country).HasColumnName(\"country\");\n            entity.Property(e => e.Lat).HasColumnName(\"lat\");\n            entity.Property(e => e.Lng).HasColumnName(\"lng\");\n            entity.Property(e => e.Location).HasColumnName(\"location\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.Url).HasColumnName(\"url\");\n        });\n\n        modelBuilder.Entity<Constructor>(entity =>\n        {\n            entity.ToTable(\"constructors\");\n\n            entity.Property(e => e.ConstructorId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"constructorId\");\n            entity.Property(e => e.ConstructorRef).HasColumnName(\"constructorRef\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.Nationality).HasColumnName(\"nationality\");\n            entity.Property(e => e.Url).HasColumnName(\"url\");\n        });\n\n        modelBuilder.Entity<ConstructorResult>(entity =>\n        {\n            entity.HasKey(e => e.ConstructorResultsId);\n\n            entity.ToTable(\"constructorResults\");\n\n            entity.Property(e => e.ConstructorResultsId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"constructorResultsId\");\n            entity.Property(e => e.ConstructorId).HasColumnName(\"constructorId\");\n            entity.Property(e => e.Points).HasColumnName(\"points\");\n            entity.Property(e => e.RaceId).HasColumnName(\"raceId\");\n            entity.Property(e => e.Status).HasColumnName(\"status\");\n\n            entity.HasOne(d => d.Constructor).WithMany(p => p.ConstructorResults).HasForeignKey(d => d.ConstructorId);\n\n            entity.HasOne(d => d.Race).WithMany(p => p.ConstructorResults).HasForeignKey(d => d.RaceId);\n        });\n\n        modelBuilder.Entity<ConstructorStanding>(entity =>\n        {\n            entity.HasKey(e => e.ConstructorStandingsId);\n\n            entity.ToTable(\"constructorStandings\");\n\n            entity.Property(e => e.ConstructorStandingsId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"constructorStandingsId\");\n            entity.Property(e => e.ConstructorId).HasColumnName(\"constructorId\");\n            entity.Property(e => e.Points).HasColumnName(\"points\");\n            entity.Property(e => e.Position).HasColumnName(\"position\");\n            entity.Property(e => e.PositionText).HasColumnName(\"positionText\");\n            entity.Property(e => e.RaceId).HasColumnName(\"raceId\");\n            entity.Property(e => e.Wins).HasColumnName(\"wins\");\n\n            entity.HasOne(d => d.Constructor).WithMany(p => p.ConstructorStandings).HasForeignKey(d => d.ConstructorId);\n\n            entity.HasOne(d => d.Race).WithMany(p => p.ConstructorStandings).HasForeignKey(d => d.RaceId);\n        });\n\n        modelBuilder.Entity<Driver>(entity =>\n        {\n            entity.ToTable(\"drivers\");\n\n            entity.Property(e => e.DriverId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"driverId\");\n            entity.Property(e => e.Code).HasColumnName(\"code\");\n            entity.Property(e => e.Dob).HasColumnName(\"dob\");\n            entity.Property(e => e.DriverRef).HasColumnName(\"driverRef\");\n            entity.Property(e => e.Forename).HasColumnName(\"forename\");\n            entity.Property(e => e.Nationality).HasColumnName(\"nationality\");\n            entity.Property(e => e.Number).HasColumnName(\"number\");\n            entity.Property(e => e.Surname).HasColumnName(\"surname\");\n            entity.Property(e => e.Url).HasColumnName(\"url\");\n        });\n\n        modelBuilder.Entity<DriverStanding>(entity =>\n        {\n            entity.HasKey(e => e.DriverStandingsId);\n\n            entity.ToTable(\"driverStandings\");\n\n            entity.Property(e => e.DriverStandingsId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"driverStandingsId\");\n            entity.Property(e => e.DriverId).HasColumnName(\"driverId\");\n            entity.Property(e => e.Points).HasColumnName(\"points\");\n            entity.Property(e => e.Position).HasColumnName(\"position\");\n            entity.Property(e => e.PositionText).HasColumnName(\"positionText\");\n            entity.Property(e => e.RaceId).HasColumnName(\"raceId\");\n            entity.Property(e => e.Wins).HasColumnName(\"wins\");\n\n            entity.HasOne(d => d.Driver).WithMany(p => p.DriverStandings).HasForeignKey(d => d.DriverId);\n\n            entity.HasOne(d => d.Race).WithMany(p => p.DriverStandings).HasForeignKey(d => d.RaceId);\n        });\n\n        modelBuilder.Entity<LapTime>(entity =>\n        {\n            entity.HasKey(e => new { e.RaceId, e.DriverId, e.Lap });\n\n            entity.ToTable(\"lapTimes\");\n\n            entity.Property(e => e.RaceId).HasColumnName(\"raceId\");\n            entity.Property(e => e.DriverId).HasColumnName(\"driverId\");\n            entity.Property(e => e.Lap).HasColumnName(\"lap\");\n            entity.Property(e => e.Milliseconds).HasColumnName(\"milliseconds\");\n            entity.Property(e => e.Position).HasColumnName(\"position\");\n            entity.Property(e => e.Time).HasColumnName(\"time\");\n\n            entity.HasOne(d => d.Driver).WithMany(p => p.LapTimes)\n                .HasForeignKey(d => d.DriverId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Race).WithMany(p => p.LapTimes)\n                .HasForeignKey(d => d.RaceId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<PitStop>(entity =>\n        {\n            entity.HasKey(e => new { e.RaceId, e.DriverId, e.Stop });\n\n            entity.ToTable(\"pitStops\");\n\n            entity.Property(e => e.RaceId).HasColumnName(\"raceId\");\n            entity.Property(e => e.DriverId).HasColumnName(\"driverId\");\n            entity.Property(e => e.Stop).HasColumnName(\"stop\");\n            entity.Property(e => e.Duration).HasColumnName(\"duration\");\n            entity.Property(e => e.Lap).HasColumnName(\"lap\");\n            entity.Property(e => e.Milliseconds).HasColumnName(\"milliseconds\");\n            entity.Property(e => e.Time).HasColumnName(\"time\");\n\n            entity.HasOne(d => d.Driver).WithMany(p => p.PitStops)\n                .HasForeignKey(d => d.DriverId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Race).WithMany(p => p.PitStops)\n                .HasForeignKey(d => d.RaceId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Qualifying>(entity =>\n        {\n            entity.HasKey(e => e.QualifyId);\n\n            entity.ToTable(\"qualifying\");\n\n            entity.Property(e => e.QualifyId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"qualifyId\");\n            entity.Property(e => e.ConstructorId).HasColumnName(\"constructorId\");\n            entity.Property(e => e.DriverId).HasColumnName(\"driverId\");\n            entity.Property(e => e.Number).HasColumnName(\"number\");\n            entity.Property(e => e.Position).HasColumnName(\"position\");\n            entity.Property(e => e.Q1).HasColumnName(\"q1\");\n            entity.Property(e => e.Q2).HasColumnName(\"q2\");\n            entity.Property(e => e.Q3).HasColumnName(\"q3\");\n            entity.Property(e => e.RaceId).HasColumnName(\"raceId\");\n\n            entity.HasOne(d => d.Constructor).WithMany(p => p.Qualifyings).HasForeignKey(d => d.ConstructorId);\n\n            entity.HasOne(d => d.Driver).WithMany(p => p.Qualifyings).HasForeignKey(d => d.DriverId);\n\n            entity.HasOne(d => d.Race).WithMany(p => p.Qualifyings).HasForeignKey(d => d.RaceId);\n        });\n\n        modelBuilder.Entity<Race>(entity =>\n        {\n            entity.ToTable(\"races\");\n\n            entity.Property(e => e.RaceId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"raceId\");\n            entity.Property(e => e.CircuitId).HasColumnName(\"circuitId\");\n            entity.Property(e => e.Date).HasColumnName(\"date\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.Round).HasColumnName(\"round\");\n            entity.Property(e => e.Time).HasColumnName(\"time\");\n            entity.Property(e => e.Url).HasColumnName(\"url\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n\n            entity.HasOne(d => d.Circuit).WithMany(p => p.Races).HasForeignKey(d => d.CircuitId);\n        });\n\n        modelBuilder.Entity<Result>(entity =>\n        {\n            entity.ToTable(\"results\");\n\n            entity.Property(e => e.ResultId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"resultId\");\n            entity.Property(e => e.ConstructorId).HasColumnName(\"constructorId\");\n            entity.Property(e => e.DriverId).HasColumnName(\"driverId\");\n            entity.Property(e => e.FastestLap).HasColumnName(\"fastestLap\");\n            entity.Property(e => e.FastestLapSpeed).HasColumnName(\"fastestLapSpeed\");\n            entity.Property(e => e.FastestLapTime).HasColumnName(\"fastestLapTime\");\n            entity.Property(e => e.Grid).HasColumnName(\"grid\");\n            entity.Property(e => e.Laps).HasColumnName(\"laps\");\n            entity.Property(e => e.Milliseconds).HasColumnName(\"milliseconds\");\n            entity.Property(e => e.Number)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"number\");\n            entity.Property(e => e.Points).HasColumnName(\"points\");\n            entity.Property(e => e.Position).HasColumnName(\"position\");\n            entity.Property(e => e.PositionOrder).HasColumnName(\"positionOrder\");\n            entity.Property(e => e.PositionText).HasColumnName(\"positionText\");\n            entity.Property(e => e.RaceId).HasColumnName(\"raceId\");\n            entity.Property(e => e.Rank).HasColumnName(\"rank\");\n            entity.Property(e => e.StatusId).HasColumnName(\"statusId\");\n            entity.Property(e => e.Time).HasColumnName(\"time\");\n\n            entity.HasOne(d => d.Constructor).WithMany(p => p.Results).HasForeignKey(d => d.ConstructorId);\n\n            entity.HasOne(d => d.Driver).WithMany(p => p.Results).HasForeignKey(d => d.DriverId);\n\n            entity.HasOne(d => d.Race).WithMany(p => p.Results).HasForeignKey(d => d.RaceId);\n        });\n\n        modelBuilder.Entity<Season>(entity =>\n        {\n            entity.HasKey(e => e.Year);\n\n            entity.ToTable(\"seasons\");\n\n            entity.Property(e => e.Year)\n                .ValueGeneratedNever()\n                .HasColumnName(\"year\");\n            entity.Property(e => e.Url).HasColumnName(\"url\");\n        });\n\n        modelBuilder.Entity<Status>(entity =>\n        {\n            entity.ToTable(\"status\");\n\n            entity.Property(e => e.StatusId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"statusId\");\n            entity.Property(e => e.Status1).HasColumnName(\"status\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Circuit\n{\n    public int CircuitId { get; set; }\n\n    public string? CircuitRef { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Location { get; set; }\n\n    public string? Country { get; set; }\n\n    public double? Lat { get; set; }\n\n    public double? Lng { get; set; }\n\n    public string? Alt { get; set; }\n\n    public string? Url { get; set; }\n\n    public virtual ICollection<Race> Races { get; set; } = new List<Race>();\n}",
      "public partial class Constructor\n{\n    public int ConstructorId { get; set; }\n\n    public string? ConstructorRef { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Nationality { get; set; }\n\n    public string? Url { get; set; }\n\n    public virtual ICollection<ConstructorResult> ConstructorResults { get; set; } = new List<ConstructorResult>();\n\n    public virtual ICollection<ConstructorStanding> ConstructorStandings { get; set; } = new List<ConstructorStanding>();\n\n    public virtual ICollection<Qualifying> Qualifyings { get; set; } = new List<Qualifying>();\n\n    public virtual ICollection<Result> Results { get; set; } = new List<Result>();\n}",
      "public partial class ConstructorResult\n{\n    public int ConstructorResultsId { get; set; }\n\n    public int? RaceId { get; set; }\n\n    public int? ConstructorId { get; set; }\n\n    public double? Points { get; set; }\n\n    public string? Status { get; set; }\n\n    public virtual Constructor? Constructor { get; set; }\n\n    public virtual Race? Race { get; set; }\n}",
      "public partial class ConstructorStanding\n{\n    public int ConstructorStandingsId { get; set; }\n\n    public int? RaceId { get; set; }\n\n    public int? ConstructorId { get; set; }\n\n    public double? Points { get; set; }\n\n    public int? Position { get; set; }\n\n    public string? PositionText { get; set; }\n\n    public int? Wins { get; set; }\n\n    public virtual Constructor? Constructor { get; set; }\n\n    public virtual Race? Race { get; set; }\n}",
      "public partial class Driver\n{\n    public int DriverId { get; set; }\n\n    public string? DriverRef { get; set; }\n\n    public string? Number { get; set; }\n\n    public string? Code { get; set; }\n\n    public string? Forename { get; set; }\n\n    public string? Surname { get; set; }\n\n    public string? Dob { get; set; }\n\n    public string? Nationality { get; set; }\n\n    public string? Url { get; set; }\n\n    public virtual ICollection<DriverStanding> DriverStandings { get; set; } = new List<DriverStanding>();\n\n    public virtual ICollection<LapTime> LapTimes { get; set; } = new List<LapTime>();\n\n    public virtual ICollection<PitStop> PitStops { get; set; } = new List<PitStop>();\n\n    public virtual ICollection<Qualifying> Qualifyings { get; set; } = new List<Qualifying>();\n\n    public virtual ICollection<Result> Results { get; set; } = new List<Result>();\n}",
      "public partial class DriverStanding\n{\n    public int DriverStandingsId { get; set; }\n\n    public int? RaceId { get; set; }\n\n    public int? DriverId { get; set; }\n\n    public double? Points { get; set; }\n\n    public int? Position { get; set; }\n\n    public string? PositionText { get; set; }\n\n    public int? Wins { get; set; }\n\n    public virtual Driver? Driver { get; set; }\n\n    public virtual Race? Race { get; set; }\n}",
      "public partial class LapTime\n{\n    public int RaceId { get; set; }\n\n    public int DriverId { get; set; }\n\n    public int Lap { get; set; }\n\n    public int? Position { get; set; }\n\n    public string? Time { get; set; }\n\n    public int? Milliseconds { get; set; }\n\n    public virtual Driver Driver { get; set; } = null!;\n\n    public virtual Race Race { get; set; } = null!;\n}",
      "public partial class PitStop\n{\n    public int RaceId { get; set; }\n\n    public int DriverId { get; set; }\n\n    public int Stop { get; set; }\n\n    public int? Lap { get; set; }\n\n    public string? Time { get; set; }\n\n    public string? Duration { get; set; }\n\n    public int? Milliseconds { get; set; }\n\n    public virtual Driver Driver { get; set; } = null!;\n\n    public virtual Race Race { get; set; } = null!;\n}",
      "public partial class Qualifying\n{\n    public int QualifyId { get; set; }\n\n    public int? RaceId { get; set; }\n\n    public int? DriverId { get; set; }\n\n    public int? ConstructorId { get; set; }\n\n    public int? Number { get; set; }\n\n    public int? Position { get; set; }\n\n    public string? Q1 { get; set; }\n\n    public string? Q2 { get; set; }\n\n    public string? Q3 { get; set; }\n\n    public virtual Constructor? Constructor { get; set; }\n\n    public virtual Driver? Driver { get; set; }\n\n    public virtual Race? Race { get; set; }\n}",
      "public partial class Race\n{\n    public int RaceId { get; set; }\n\n    public int? Year { get; set; }\n\n    public int? Round { get; set; }\n\n    public int? CircuitId { get; set; }\n\n    public string? Name { get; set; }\n\n    public DateOnly? Date { get; set; }\n\n    public TimeSpan? Time { get; set; }\n\n    public string? Url { get; set; }\n\n    public virtual Circuit? Circuit { get; set; }\n\n    public virtual ICollection<ConstructorResult> ConstructorResults { get; set; } = new List<ConstructorResult>();\n\n    public virtual ICollection<ConstructorStanding> ConstructorStandings { get; set; } = new List<ConstructorStanding>();\n\n    public virtual ICollection<DriverStanding> DriverStandings { get; set; } = new List<DriverStanding>();\n\n    public virtual ICollection<LapTime> LapTimes { get; set; } = new List<LapTime>();\n\n    public virtual ICollection<PitStop> PitStops { get; set; } = new List<PitStop>();\n\n    public virtual ICollection<Qualifying> Qualifyings { get; set; } = new List<Qualifying>();\n\n    public virtual ICollection<Result> Results { get; set; } = new List<Result>();\n}",
      "public partial class Result\n{\n    public int ResultId { get; set; }\n\n    public int? RaceId { get; set; }\n\n    public int? DriverId { get; set; }\n\n    public int? ConstructorId { get; set; }\n\n    public string? Number { get; set; }\n\n    public int? Grid { get; set; }\n\n    public string? Position { get; set; }\n\n    public string? PositionText { get; set; }\n\n    public int? PositionOrder { get; set; }\n\n    public double? Points { get; set; }\n\n    public string? Laps { get; set; }\n\n    public decimal? Time { get; set; }\n\n    public string? Milliseconds { get; set; }\n\n    public string? FastestLap { get; set; }\n\n    public string? Rank { get; set; }\n\n    public string? FastestLapTime { get; set; }\n\n    public decimal? FastestLapSpeed { get; set; }\n\n    public int? StatusId { get; set; }\n\n    public virtual Constructor? Constructor { get; set; }\n\n    public virtual Driver? Driver { get; set; }\n\n    public virtual Race? Race { get; set; }\n}",
      "public partial class Season\n{\n    public int Year { get; set; }\n\n    public string? Url { get; set; }\n}",
      "public partial class Status\n{\n    public int StatusId { get; set; }\n\n    public string? Status1 { get; set; }\n}"
    ]
  },
  "imdb": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.imdb;\n\npublic partial class ImdbContext : DbContext\n{\n    public ImdbContext()\n    {\n    }\n\n    public ImdbContext(DbContextOptions<ImdbContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Actor> Actors { get; set; }\n\n    public virtual DbSet<Cast> Casts { get; set; }\n\n    public virtual DbSet<Classification> Classifications { get; set; }\n\n    public virtual DbSet<Company> Companies { get; set; }\n\n    public virtual DbSet<Copyright> Copyrights { get; set; }\n\n    public virtual DbSet<DirectedBy> DirectedBies { get; set; }\n\n    public virtual DbSet<Director> Directors { get; set; }\n\n    public virtual DbSet<Genre> Genres { get; set; }\n\n    public virtual DbSet<Keyword> Keywords { get; set; }\n\n    public virtual DbSet<MadeBy> MadeBies { get; set; }\n\n    public virtual DbSet<Movie> Movies { get; set; }\n\n    public virtual DbSet<Producer> Producers { get; set; }\n\n    public virtual DbSet<Tag> Tags { get; set; }\n\n    public virtual DbSet<TvSeries> TvSeries { get; set; }\n\n    public virtual DbSet<Writer> Writers { get; set; }\n\n    public virtual DbSet<WrittenBy> WrittenBies { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/imdb.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Actor>(entity =>\n        {\n            entity.HasKey(e => e.Aid);\n\n            entity.ToTable(\"actor\");\n\n            entity.Property(e => e.Aid)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"aid\");\n            entity.Property(e => e.BirthCity).HasColumnName(\"birth_city\");\n            entity.Property(e => e.BirthYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"birth_year\");\n            entity.Property(e => e.Gender).HasColumnName(\"gender\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.Nationality).HasColumnName(\"nationality\");\n        });\n\n        modelBuilder.Entity<Cast>(entity =>\n        {\n            entity.ToTable(\"cast\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.Aid)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"aid\");\n            entity.Property(e => e.Msid)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"msid\");\n            entity.Property(e => e.Role)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"role\");\n\n            entity.HasOne(d => d.AidNavigation).WithMany(p => p.Casts).HasForeignKey(d => d.Aid);\n        });\n\n        modelBuilder.Entity<Classification>(entity =>\n        {\n            entity.ToTable(\"classification\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.Gid)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"gid\");\n            entity.Property(e => e.Msid)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"msid\");\n\n            entity.HasOne(d => d.GidNavigation).WithMany(p => p.Classifications).HasForeignKey(d => d.Gid);\n        });\n\n        modelBuilder.Entity<Company>(entity =>\n        {\n            entity.ToTable(\"company\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.CountryCode).HasColumnName(\"country_code\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n        });\n\n        modelBuilder.Entity<Copyright>(entity =>\n        {\n            entity.ToTable(\"copyright\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.Cid)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"cid\");\n            entity.Property(e => e.Msid)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"msid\");\n        });\n\n        modelBuilder.Entity<DirectedBy>(entity =>\n        {\n            entity.ToTable(\"directed_by\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.Did)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"did\");\n            entity.Property(e => e.Msid)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"msid\");\n\n            entity.HasOne(d => d.DidNavigation).WithMany(p => p.DirectedBies).HasForeignKey(d => d.Did);\n        });\n\n        modelBuilder.Entity<Director>(entity =>\n        {\n            entity.HasKey(e => e.Did);\n\n            entity.ToTable(\"director\");\n\n            entity.Property(e => e.Did)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"did\");\n            entity.Property(e => e.BirthCity).HasColumnName(\"birth_city\");\n            entity.Property(e => e.BirthYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"birth_year\");\n            entity.Property(e => e.Gender).HasColumnName(\"gender\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.Nationality).HasColumnName(\"nationality\");\n        });\n\n        modelBuilder.Entity<Genre>(entity =>\n        {\n            entity.HasKey(e => e.Gid);\n\n            entity.ToTable(\"genre\");\n\n            entity.Property(e => e.Gid)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"gid\");\n            entity.Property(e => e.Genre1).HasColumnName(\"genre\");\n        });\n\n        modelBuilder.Entity<Keyword>(entity =>\n        {\n            entity.ToTable(\"keyword\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.Keyword1).HasColumnName(\"keyword\");\n        });\n\n        modelBuilder.Entity<MadeBy>(entity =>\n        {\n            entity.ToTable(\"made_by\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.Msid)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"msid\");\n            entity.Property(e => e.Pid)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"pid\");\n\n            entity.HasOne(d => d.PidNavigation).WithMany(p => p.MadeBies).HasForeignKey(d => d.Pid);\n        });\n\n        modelBuilder.Entity<Movie>(entity =>\n        {\n            entity.HasKey(e => e.Mid);\n\n            entity.ToTable(\"movie\");\n\n            entity.Property(e => e.Mid)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"mid\");\n            entity.Property(e => e.Budget).HasColumnName(\"budget\");\n            entity.Property(e => e.ReleaseYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"release_year\");\n            entity.Property(e => e.Title).HasColumnName(\"title\");\n            entity.Property(e => e.TitleAka).HasColumnName(\"title_aka\");\n        });\n\n        modelBuilder.Entity<Producer>(entity =>\n        {\n            entity.HasKey(e => e.Pid);\n\n            entity.ToTable(\"producer\");\n\n            entity.Property(e => e.Pid)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"pid\");\n            entity.Property(e => e.BirthCity).HasColumnName(\"birth_city\");\n            entity.Property(e => e.BirthYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"birth_year\");\n            entity.Property(e => e.Gender).HasColumnName(\"gender\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.Nationality).HasColumnName(\"nationality\");\n        });\n\n        modelBuilder.Entity<Tag>(entity =>\n        {\n            entity.ToTable(\"tags\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.Kid)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"kid\");\n            entity.Property(e => e.Msid)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"msid\");\n        });\n\n        modelBuilder.Entity<TvSeries>(entity =>\n        {\n            entity.HasKey(e => e.Sid);\n\n            entity.ToTable(\"tv_series\");\n\n            entity.Property(e => e.Sid)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"sid\");\n            entity.Property(e => e.Budget).HasColumnName(\"budget\");\n            entity.Property(e => e.NumOfEpisodes)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"num_of_episodes\");\n            entity.Property(e => e.NumOfSeasons)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"num_of_seasons\");\n            entity.Property(e => e.ReleaseYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"release_year\");\n            entity.Property(e => e.Title).HasColumnName(\"title\");\n            entity.Property(e => e.TitleAka).HasColumnName(\"title_aka\");\n        });\n\n        modelBuilder.Entity<Writer>(entity =>\n        {\n            entity.HasKey(e => e.Wid);\n\n            entity.ToTable(\"writer\");\n\n            entity.Property(e => e.Wid)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"wid\");\n            entity.Property(e => e.BirthCity).HasColumnName(\"birth_city\");\n            entity.Property(e => e.BirthYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"birth_year\");\n            entity.Property(e => e.Gender).HasColumnName(\"gender\");\n            entity.Property(e => e.Name)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"name\");\n            entity.Property(e => e.Nationality)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"nationality\");\n            entity.Property(e => e.NumOfEpisodes)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"num_of_episodes\");\n        });\n\n        modelBuilder.Entity<WrittenBy>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"written_by\");\n\n            entity.Property(e => e.Id)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.Msid)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"msid\");\n            entity.Property(e => e.Wid)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"wid\");\n\n            entity.HasOne(d => d.WidNavigation).WithMany().HasForeignKey(d => d.Wid);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Actor\n{\n    public int Aid { get; set; }\n\n    public string? Gender { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Nationality { get; set; }\n\n    public string? BirthCity { get; set; }\n\n    public int? BirthYear { get; set; }\n\n    public virtual ICollection<Cast> Casts { get; set; } = new List<Cast>();\n}",
      "public partial class Cast\n{\n    public int Id { get; set; }\n\n    public int? Msid { get; set; }\n\n    public int? Aid { get; set; }\n\n    public int? Role { get; set; }\n\n    public virtual Actor? AidNavigation { get; set; }\n}",
      "public partial class Classification\n{\n    public int Id { get; set; }\n\n    public int? Msid { get; set; }\n\n    public int? Gid { get; set; }\n\n    public virtual Genre? GidNavigation { get; set; }\n}",
      "public partial class Company\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? CountryCode { get; set; }\n}",
      "public partial class Copyright\n{\n    public int Id { get; set; }\n\n    public int Msid { get; set; }\n\n    public int? Cid { get; set; }\n}",
      "public partial class DirectedBy\n{\n    public int Id { get; set; }\n\n    public int? Msid { get; set; }\n\n    public int? Did { get; set; }\n\n    public virtual Director? DidNavigation { get; set; }\n}",
      "public partial class Director\n{\n    public int Did { get; set; }\n\n    public string? Gender { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Nationality { get; set; }\n\n    public string? BirthCity { get; set; }\n\n    public int? BirthYear { get; set; }\n\n    public virtual ICollection<DirectedBy> DirectedBies { get; set; } = new List<DirectedBy>();\n}",
      "public partial class Genre\n{\n    public int Gid { get; set; }\n\n    public string? Genre1 { get; set; }\n\n    public virtual ICollection<Classification> Classifications { get; set; } = new List<Classification>();\n}",
      "public partial class Keyword\n{\n    public int Id { get; set; }\n\n    public string? Keyword1 { get; set; }\n}",
      "public partial class MadeBy\n{\n    public int Id { get; set; }\n\n    public int? Msid { get; set; }\n\n    public int? Pid { get; set; }\n\n    public virtual Producer? PidNavigation { get; set; }\n}",
      "public partial class Movie\n{\n    public int Mid { get; set; }\n\n    public string? Title { get; set; }\n\n    public int? ReleaseYear { get; set; }\n\n    public string? TitleAka { get; set; }\n\n    public string? Budget { get; set; }\n}",
      "public partial class Producer\n{\n    public int Pid { get; set; }\n\n    public string? Gender { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Nationality { get; set; }\n\n    public string? BirthCity { get; set; }\n\n    public int? BirthYear { get; set; }\n\n    public virtual ICollection<MadeBy> MadeBies { get; set; } = new List<MadeBy>();\n}",
      "public partial class Tag\n{\n    public int Id { get; set; }\n\n    public int? Msid { get; set; }\n\n    public int? Kid { get; set; }\n}",
      "public partial class TvSeries\n{\n    public int Sid { get; set; }\n\n    public string? Title { get; set; }\n\n    public int? ReleaseYear { get; set; }\n\n    public int? NumOfSeasons { get; set; }\n\n    public int? NumOfEpisodes { get; set; }\n\n    public string? TitleAka { get; set; }\n\n    public string? Budget { get; set; }\n}",
      "public partial class Writer\n{\n    public int Wid { get; set; }\n\n    public string? Gender { get; set; }\n\n    public int? Name { get; set; }\n\n    public int? Nationality { get; set; }\n\n    public int? NumOfEpisodes { get; set; }\n\n    public string? BirthCity { get; set; }\n\n    public int? BirthYear { get; set; }\n}",
      "public partial class WrittenBy\n{\n    public int? Id { get; set; }\n\n    public int? Msid { get; set; }\n\n    public int? Wid { get; set; }\n\n    public virtual Writer? WidNavigation { get; set; }\n}"
    ]
  },
  "university_basketball": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.university_basketball;\n\npublic partial class UniversityBasketballContext : DbContext\n{\n    public UniversityBasketballContext()\n    {\n    }\n\n    public UniversityBasketballContext(DbContextOptions<UniversityBasketballContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<BasketballMatch> BasketballMatches { get; set; }\n\n    public virtual DbSet<University> Universities { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/university_basketball.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<BasketballMatch>(entity =>\n        {\n            entity.HasKey(e => e.TeamId);\n\n            entity.ToTable(\"basketball_match\");\n\n            entity.Property(e => e.TeamId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Team_ID\");\n            entity.Property(e => e.AccHome).HasColumnName(\"ACC_Home\");\n            entity.Property(e => e.AccPercent).HasColumnName(\"ACC_Percent\");\n            entity.Property(e => e.AccRegularSeason).HasColumnName(\"ACC_Regular_Season\");\n            entity.Property(e => e.AccRoad).HasColumnName(\"ACC_Road\");\n            entity.Property(e => e.AllGames).HasColumnName(\"All_Games\");\n            entity.Property(e => e.AllGamesPercent)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"All_Games_Percent\");\n            entity.Property(e => e.AllHome).HasColumnName(\"All_Home\");\n            entity.Property(e => e.AllNeutral).HasColumnName(\"All_Neutral\");\n            entity.Property(e => e.AllRoad).HasColumnName(\"All_Road\");\n            entity.Property(e => e.SchoolId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"School_ID\");\n            entity.Property(e => e.TeamName).HasColumnName(\"Team_Name\");\n\n            entity.HasOne(d => d.School).WithMany(p => p.BasketballMatches).HasForeignKey(d => d.SchoolId);\n        });\n\n        modelBuilder.Entity<University>(entity =>\n        {\n            entity.HasKey(e => e.SchoolId);\n\n            entity.ToTable(\"university\");\n\n            entity.Property(e => e.SchoolId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"School_ID\");\n            entity.Property(e => e.PrimaryConference).HasColumnName(\"Primary_conference\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class BasketballMatch\n{\n    public int TeamId { get; set; }\n\n    public int? SchoolId { get; set; }\n\n    public string? TeamName { get; set; }\n\n    public string? AccRegularSeason { get; set; }\n\n    public string? AccPercent { get; set; }\n\n    public string? AccHome { get; set; }\n\n    public string? AccRoad { get; set; }\n\n    public string? AllGames { get; set; }\n\n    public double? AllGamesPercent { get; set; }\n\n    public string? AllHome { get; set; }\n\n    public string? AllRoad { get; set; }\n\n    public string? AllNeutral { get; set; }\n\n    public virtual University? School { get; set; }\n}",
      "public partial class University\n{\n    public int SchoolId { get; set; }\n\n    public string? School { get; set; }\n\n    public string? Location { get; set; }\n\n    public double? Founded { get; set; }\n\n    public string? Affiliation { get; set; }\n\n    public double? Enrollment { get; set; }\n\n    public string? Nickname { get; set; }\n\n    public string? PrimaryConference { get; set; }\n\n    public virtual ICollection<BasketballMatch> BasketballMatches { get; set; } = new List<BasketballMatch>();\n}"
    ]
  },
  "course_teach": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.course_teach;\n\npublic partial class CourseTeachContext : DbContext\n{\n    public CourseTeachContext()\n    {\n    }\n\n    public CourseTeachContext(DbContextOptions<CourseTeachContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Course> Courses { get; set; }\n\n    public virtual DbSet<CourseArrange> CourseArranges { get; set; }\n\n    public virtual DbSet<Teacher> Teachers { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/course_teach.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Course>(entity =>\n        {\n            entity.ToTable(\"course\");\n\n            entity.Property(e => e.CourseId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Course_ID\");\n            entity.Property(e => e.Course1).HasColumnName(\"Course\");\n            entity.Property(e => e.StaringDate).HasColumnName(\"Staring_Date\");\n        });\n\n        modelBuilder.Entity<CourseArrange>(entity =>\n        {\n            entity.HasKey(e => new { e.CourseId, e.TeacherId, e.Grade });\n\n            entity.ToTable(\"course_arrange\");\n\n            entity.Property(e => e.CourseId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Course_ID\");\n            entity.Property(e => e.TeacherId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Teacher_ID\");\n            entity.Property(e => e.Grade).HasColumnType(\"INT\");\n\n            entity.HasOne(d => d.Course).WithMany(p => p.CourseArranges)\n                .HasForeignKey(d => d.CourseId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Teacher).WithMany(p => p.CourseArranges)\n                .HasForeignKey(d => d.TeacherId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Teacher>(entity =>\n        {\n            entity.ToTable(\"teacher\");\n\n            entity.Property(e => e.TeacherId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Teacher_ID\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Course\n{\n    public int CourseId { get; set; }\n\n    public string? StaringDate { get; set; }\n\n    public string? Course1 { get; set; }\n\n    public virtual ICollection<CourseArrange> CourseArranges { get; set; } = new List<CourseArrange>();\n}",
      "public partial class CourseArrange\n{\n    public int CourseId { get; set; }\n\n    public int TeacherId { get; set; }\n\n    public int Grade { get; set; }\n\n    public virtual Course Course { get; set; } = null!;\n\n    public virtual Teacher Teacher { get; set; } = null!;\n}",
      "public partial class Teacher\n{\n    public int TeacherId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Age { get; set; }\n\n    public string? Hometown { get; set; }\n\n    public virtual ICollection<CourseArrange> CourseArranges { get; set; } = new List<CourseArrange>();\n}"
    ]
  },
  "cre_Docs_and_Epenses": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.cre_Docs_and_Epenses;\n\npublic partial class CreDocsAndEpensesContext : DbContext\n{\n    public CreDocsAndEpensesContext()\n    {\n    }\n\n    public CreDocsAndEpensesContext(DbContextOptions<CreDocsAndEpensesContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Account> Accounts { get; set; }\n\n    public virtual DbSet<Document> Documents { get; set; }\n\n    public virtual DbSet<DocumentsWithExpense> DocumentsWithExpenses { get; set; }\n\n    public virtual DbSet<Project> Projects { get; set; }\n\n    public virtual DbSet<RefBudgetCode> RefBudgetCodes { get; set; }\n\n    public virtual DbSet<RefDocumentType> RefDocumentTypes { get; set; }\n\n    public virtual DbSet<Statement> Statements { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/cre_Docs_and_Epenses.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Account>(entity =>\n        {\n            entity.Property(e => e.AccountId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Account_ID\");\n            entity.Property(e => e.AccountDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Account_Details\");\n            entity.Property(e => e.StatementId).HasColumnName(\"Statement_ID\");\n\n            entity.HasOne(d => d.Statement).WithMany(p => p.Accounts)\n                .HasForeignKey(d => d.StatementId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Document>(entity =>\n        {\n            entity.Property(e => e.DocumentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Document_ID\");\n            entity.Property(e => e.DocumentDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"Document_Date\");\n            entity.Property(e => e.DocumentDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Document_Description\");\n            entity.Property(e => e.DocumentName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Document_Name\");\n            entity.Property(e => e.DocumentTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Document_Type_Code\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Other_Details\");\n            entity.Property(e => e.ProjectId).HasColumnName(\"Project_ID\");\n\n            entity.HasOne(d => d.DocumentTypeCodeNavigation).WithMany(p => p.Documents)\n                .HasForeignKey(d => d.DocumentTypeCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Project).WithMany(p => p.Documents)\n                .HasForeignKey(d => d.ProjectId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<DocumentsWithExpense>(entity =>\n        {\n            entity.HasKey(e => e.DocumentId);\n\n            entity.ToTable(\"Documents_with_Expenses\");\n\n            entity.Property(e => e.DocumentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Document_ID\");\n            entity.Property(e => e.BudgetTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Budget_Type_Code\");\n            entity.Property(e => e.DocumentDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Document_Details\");\n\n            entity.HasOne(d => d.BudgetTypeCodeNavigation).WithMany(p => p.DocumentsWithExpenses)\n                .HasForeignKey(d => d.BudgetTypeCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Document).WithOne(p => p.DocumentsWithExpense)\n                .HasForeignKey<DocumentsWithExpense>(d => d.DocumentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Project>(entity =>\n        {\n            entity.Property(e => e.ProjectId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Project_ID\");\n            entity.Property(e => e.ProjectDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Project_Details\");\n        });\n\n        modelBuilder.Entity<RefBudgetCode>(entity =>\n        {\n            entity.HasKey(e => e.BudgetTypeCode);\n\n            entity.ToTable(\"Ref_Budget_Codes\");\n\n            entity.Property(e => e.BudgetTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Budget_Type_Code\");\n            entity.Property(e => e.BudgetTypeDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Budget_Type_Description\");\n        });\n\n        modelBuilder.Entity<RefDocumentType>(entity =>\n        {\n            entity.HasKey(e => e.DocumentTypeCode);\n\n            entity.ToTable(\"Ref_Document_Types\");\n\n            entity.Property(e => e.DocumentTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Document_Type_Code\");\n            entity.Property(e => e.DocumentTypeDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Document_Type_Description\");\n            entity.Property(e => e.DocumentTypeName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Document_Type_Name\");\n        });\n\n        modelBuilder.Entity<Statement>(entity =>\n        {\n            entity.Property(e => e.StatementId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Statement_ID\");\n            entity.Property(e => e.StatementDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Statement_Details\");\n\n            entity.HasOne(d => d.StatementNavigation).WithOne(p => p.Statement)\n                .HasForeignKey<Statement>(d => d.StatementId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Account\n{\n    public int AccountId { get; set; }\n\n    public int StatementId { get; set; }\n\n    public decimal? AccountDetails { get; set; }\n\n    public virtual Statement Statement { get; set; } = null!;\n}",
      "public partial class Document\n{\n    public int DocumentId { get; set; }\n\n    public string DocumentTypeCode { get; set; } = null!;\n\n    public int ProjectId { get; set; }\n\n    public DateTime? DocumentDate { get; set; }\n\n    public string? DocumentName { get; set; }\n\n    public string? DocumentDescription { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual RefDocumentType DocumentTypeCodeNavigation { get; set; } = null!;\n\n    public virtual DocumentsWithExpense? DocumentsWithExpense { get; set; }\n\n    public virtual Project Project { get; set; } = null!;\n\n    public virtual Statement? Statement { get; set; }\n}",
      "public partial class DocumentsWithExpense\n{\n    public int DocumentId { get; set; }\n\n    public string BudgetTypeCode { get; set; } = null!;\n\n    public string? DocumentDetails { get; set; }\n\n    public virtual RefBudgetCode BudgetTypeCodeNavigation { get; set; } = null!;\n\n    public virtual Document Document { get; set; } = null!;\n}",
      "public partial class Project\n{\n    public int ProjectId { get; set; }\n\n    public string? ProjectDetails { get; set; }\n\n    public virtual ICollection<Document> Documents { get; set; } = new List<Document>();\n}",
      "public partial class RefBudgetCode\n{\n    public string BudgetTypeCode { get; set; } = null!;\n\n    public string BudgetTypeDescription { get; set; } = null!;\n\n    public virtual ICollection<DocumentsWithExpense> DocumentsWithExpenses { get; set; } = new List<DocumentsWithExpense>();\n}",
      "public partial class RefDocumentType\n{\n    public string DocumentTypeCode { get; set; } = null!;\n\n    public string DocumentTypeName { get; set; } = null!;\n\n    public string DocumentTypeDescription { get; set; } = null!;\n\n    public virtual ICollection<Document> Documents { get; set; } = new List<Document>();\n}",
      "public partial class Statement\n{\n    public int StatementId { get; set; }\n\n    public string? StatementDetails { get; set; }\n\n    public virtual ICollection<Account> Accounts { get; set; } = new List<Account>();\n\n    public virtual Document StatementNavigation { get; set; } = null!;\n}"
    ]
  },
  "program_share": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.program_share;\n\npublic partial class ProgramShareContext : DbContext\n{\n    public ProgramShareContext()\n    {\n    }\n\n    public ProgramShareContext(DbContextOptions<ProgramShareContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Broadcast> Broadcasts { get; set; }\n\n    public virtual DbSet<BroadcastShare> BroadcastShares { get; set; }\n\n    public virtual DbSet<Channel> Channels { get; set; }\n\n    public virtual DbSet<Program> Programs { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/program_share.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Broadcast>(entity =>\n        {\n            entity.HasKey(e => new { e.ChannelId, e.ProgramId });\n\n            entity.ToTable(\"broadcast\");\n\n            entity.Property(e => e.ChannelId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Channel_ID\");\n            entity.Property(e => e.ProgramId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Program_ID\");\n            entity.Property(e => e.TimeOfDay).HasColumnName(\"Time_of_day\");\n\n            entity.HasOne(d => d.Channel).WithMany(p => p.Broadcasts)\n                .HasForeignKey(d => d.ChannelId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Program).WithMany(p => p.Broadcasts)\n                .HasForeignKey(d => d.ProgramId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<BroadcastShare>(entity =>\n        {\n            entity.HasKey(e => new { e.ChannelId, e.ProgramId });\n\n            entity.ToTable(\"broadcast_share\");\n\n            entity.Property(e => e.ChannelId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Channel_ID\");\n            entity.Property(e => e.ProgramId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Program_ID\");\n            entity.Property(e => e.ShareInPercent).HasColumnName(\"Share_in_percent\");\n\n            entity.HasOne(d => d.Channel).WithMany(p => p.BroadcastShares)\n                .HasForeignKey(d => d.ChannelId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Program).WithMany(p => p.BroadcastShares)\n                .HasForeignKey(d => d.ProgramId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Channel>(entity =>\n        {\n            entity.ToTable(\"channel\");\n\n            entity.Property(e => e.ChannelId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Channel_ID\");\n            entity.Property(e => e.RatingInPercent).HasColumnName(\"Rating_in_percent\");\n            entity.Property(e => e.ShareInPercent).HasColumnName(\"Share_in_percent\");\n        });\n\n        modelBuilder.Entity<Program>(entity =>\n        {\n            entity.ToTable(\"program\");\n\n            entity.Property(e => e.ProgramId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Program_ID\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Broadcast\n{\n    public int ChannelId { get; set; }\n\n    public int ProgramId { get; set; }\n\n    public string? TimeOfDay { get; set; }\n\n    public virtual Channel Channel { get; set; } = null!;\n\n    public virtual Program Program { get; set; } = null!;\n}",
      "public partial class BroadcastShare\n{\n    public int ChannelId { get; set; }\n\n    public int ProgramId { get; set; }\n\n    public string? Date { get; set; }\n\n    public double? ShareInPercent { get; set; }\n\n    public virtual Channel Channel { get; set; } = null!;\n\n    public virtual Program Program { get; set; } = null!;\n}",
      "public partial class Channel\n{\n    public int ChannelId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Owner { get; set; }\n\n    public double? ShareInPercent { get; set; }\n\n    public double? RatingInPercent { get; set; }\n\n    public virtual ICollection<BroadcastShare> BroadcastShares { get; set; } = new List<BroadcastShare>();\n\n    public virtual ICollection<Broadcast> Broadcasts { get; set; } = new List<Broadcast>();\n}",
      "public partial class Program\n{\n    public int ProgramId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Origin { get; set; }\n\n    public double? Launch { get; set; }\n\n    public string? Owner { get; set; }\n\n    public virtual ICollection<BroadcastShare> BroadcastShares { get; set; } = new List<BroadcastShare>();\n\n    public virtual ICollection<Broadcast> Broadcasts { get; set; } = new List<Broadcast>();\n}"
    ]
  },
  "flight_company": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.flight_company;\n\npublic partial class FlightCompanyContext : DbContext\n{\n    public FlightCompanyContext()\n    {\n    }\n\n    public FlightCompanyContext(DbContextOptions<FlightCompanyContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Airport> Airports { get; set; }\n\n    public virtual DbSet<Flight> Flights { get; set; }\n\n    public virtual DbSet<OperateCompany> OperateCompanies { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/flight_company.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Airport>(entity =>\n        {\n            entity.ToTable(\"airport\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.Iata).HasColumnName(\"IATA\");\n            entity.Property(e => e.Icao).HasColumnName(\"ICAO\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n        });\n\n        modelBuilder.Entity<Flight>(entity =>\n        {\n            entity.ToTable(\"flight\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.AirportId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"airport_id\");\n            entity.Property(e => e.CompanyId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"company_id\");\n            entity.Property(e => e.VehicleFlightNumber).HasColumnName(\"Vehicle_Flight_number\");\n\n            entity.HasOne(d => d.Airport).WithMany(p => p.Flights).HasForeignKey(d => d.AirportId);\n\n            entity.HasOne(d => d.Company).WithMany(p => p.Flights).HasForeignKey(d => d.CompanyId);\n        });\n\n        modelBuilder.Entity<OperateCompany>(entity =>\n        {\n            entity.ToTable(\"operate_company\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.GroupEquityShareholding).HasColumnName(\"Group_Equity_Shareholding\");\n            entity.Property(e => e.IncorporatedIn).HasColumnName(\"Incorporated_in\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.PrincipalActivities).HasColumnName(\"Principal_activities\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Airport\n{\n    public int Id { get; set; }\n\n    public string? City { get; set; }\n\n    public string? Country { get; set; }\n\n    public string? Iata { get; set; }\n\n    public string? Icao { get; set; }\n\n    public string? Name { get; set; }\n\n    public virtual ICollection<Flight> Flights { get; set; } = new List<Flight>();\n}",
      "public partial class Flight\n{\n    public int Id { get; set; }\n\n    public string? VehicleFlightNumber { get; set; }\n\n    public string? Date { get; set; }\n\n    public string? Pilot { get; set; }\n\n    public double? Velocity { get; set; }\n\n    public double? Altitude { get; set; }\n\n    public int? AirportId { get; set; }\n\n    public int? CompanyId { get; set; }\n\n    public virtual Airport? Airport { get; set; }\n\n    public virtual OperateCompany? Company { get; set; }\n}",
      "public partial class OperateCompany\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Type { get; set; }\n\n    public string? PrincipalActivities { get; set; }\n\n    public string? IncorporatedIn { get; set; }\n\n    public double? GroupEquityShareholding { get; set; }\n\n    public virtual ICollection<Flight> Flights { get; set; } = new List<Flight>();\n}"
    ]
  },
  "device": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.device;\n\npublic partial class DeviceContext : DbContext\n{\n    public DeviceContext()\n    {\n    }\n\n    public DeviceContext(DbContextOptions<DeviceContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Device> Devices { get; set; }\n\n    public virtual DbSet<Shop> Shops { get; set; }\n\n    public virtual DbSet<Stock> Stocks { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/device.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Device>(entity =>\n        {\n            entity.ToTable(\"device\");\n\n            entity.Property(e => e.DeviceId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Device_ID\");\n            entity.Property(e => e.Device1).HasColumnName(\"Device\");\n            entity.Property(e => e.PackageVersion).HasColumnName(\"Package_Version\");\n            entity.Property(e => e.SoftwarePlatform).HasColumnName(\"Software_Platform\");\n        });\n\n        modelBuilder.Entity<Shop>(entity =>\n        {\n            entity.ToTable(\"shop\");\n\n            entity.Property(e => e.ShopId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Shop_ID\");\n            entity.Property(e => e.OpenDate).HasColumnName(\"Open_Date\");\n            entity.Property(e => e.OpenYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Open_Year\");\n            entity.Property(e => e.ShopName).HasColumnName(\"Shop_Name\");\n        });\n\n        modelBuilder.Entity<Stock>(entity =>\n        {\n            entity.HasKey(e => new { e.ShopId, e.DeviceId });\n\n            entity.ToTable(\"stock\");\n\n            entity.Property(e => e.ShopId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Shop_ID\");\n            entity.Property(e => e.DeviceId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Device_ID\");\n            entity.Property(e => e.Quantity).HasColumnType(\"INT\");\n\n            entity.HasOne(d => d.Device).WithMany(p => p.Stocks)\n                .HasForeignKey(d => d.DeviceId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Shop).WithMany(p => p.Stocks)\n                .HasForeignKey(d => d.ShopId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Device\n{\n    public int DeviceId { get; set; }\n\n    public string? Device1 { get; set; }\n\n    public string? Carrier { get; set; }\n\n    public string? PackageVersion { get; set; }\n\n    public string? Applications { get; set; }\n\n    public string? SoftwarePlatform { get; set; }\n\n    public virtual ICollection<Stock> Stocks { get; set; } = new List<Stock>();\n}",
      "public partial class Shop\n{\n    public int ShopId { get; set; }\n\n    public string? ShopName { get; set; }\n\n    public string? Location { get; set; }\n\n    public string? OpenDate { get; set; }\n\n    public int? OpenYear { get; set; }\n\n    public virtual ICollection<Stock> Stocks { get; set; } = new List<Stock>();\n}",
      "public partial class Stock\n{\n    public int ShopId { get; set; }\n\n    public int DeviceId { get; set; }\n\n    public int? Quantity { get; set; }\n\n    public virtual Device Device { get; set; } = null!;\n\n    public virtual Shop Shop { get; set; } = null!;\n}"
    ]
  },
  "yelp": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.yelp;\n\npublic partial class YelpContext : DbContext\n{\n    public YelpContext()\n    {\n    }\n\n    public YelpContext(DbContextOptions<YelpContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Business> Businesses { get; set; }\n\n    public virtual DbSet<Category> Categories { get; set; }\n\n    public virtual DbSet<Checkin> Checkins { get; set; }\n\n    public virtual DbSet<Neighbourhood> Neighbourhoods { get; set; }\n\n    public virtual DbSet<Review> Reviews { get; set; }\n\n    public virtual DbSet<Tip> Tips { get; set; }\n\n    public virtual DbSet<User> Users { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/yelp.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Business>(entity =>\n        {\n            entity.HasKey(e => e.Bid);\n\n            entity.ToTable(\"business\");\n\n            entity.Property(e => e.Bid)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"bid\");\n            entity.Property(e => e.BusinessId).HasColumnName(\"business_id\");\n            entity.Property(e => e.City).HasColumnName(\"city\");\n            entity.Property(e => e.FullAddress).HasColumnName(\"full_address\");\n            entity.Property(e => e.IsOpen)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"is_open\");\n            entity.Property(e => e.Latitude).HasColumnName(\"latitude\");\n            entity.Property(e => e.Longitude).HasColumnName(\"longitude\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.Rating).HasColumnName(\"rating\");\n            entity.Property(e => e.ReviewCount)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"review_count\");\n            entity.Property(e => e.State).HasColumnName(\"state\");\n        });\n\n        modelBuilder.Entity<Category>(entity =>\n        {\n            entity.ToTable(\"category\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.BusinessId).HasColumnName(\"business_id\");\n            entity.Property(e => e.CategoryName).HasColumnName(\"category_name\");\n        });\n\n        modelBuilder.Entity<Checkin>(entity =>\n        {\n            entity.HasKey(e => e.Cid);\n\n            entity.ToTable(\"checkin\");\n\n            entity.Property(e => e.Cid)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"cid\");\n            entity.Property(e => e.BusinessId).HasColumnName(\"business_id\");\n            entity.Property(e => e.Count)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"count\");\n            entity.Property(e => e.Day).HasColumnName(\"day\");\n        });\n\n        modelBuilder.Entity<Neighbourhood>(entity =>\n        {\n            entity.ToTable(\"neighbourhood\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.BusinessId).HasColumnName(\"business_id\");\n            entity.Property(e => e.NeighbourhoodName).HasColumnName(\"neighbourhood_name\");\n        });\n\n        modelBuilder.Entity<Review>(entity =>\n        {\n            entity.HasKey(e => e.Rid);\n\n            entity.ToTable(\"review\");\n\n            entity.Property(e => e.Rid)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"rid\");\n            entity.Property(e => e.BusinessId).HasColumnName(\"business_id\");\n            entity.Property(e => e.Month).HasColumnName(\"month\");\n            entity.Property(e => e.Rating).HasColumnName(\"rating\");\n            entity.Property(e => e.Text).HasColumnName(\"text\");\n            entity.Property(e => e.UserId).HasColumnName(\"user_id\");\n            entity.Property(e => e.Year)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<Tip>(entity =>\n        {\n            entity.ToTable(\"tip\");\n\n            entity.Property(e => e.TipId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"tip_id\");\n            entity.Property(e => e.BusinessId).HasColumnName(\"business_id\");\n            entity.Property(e => e.Likes)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"likes\");\n            entity.Property(e => e.Month).HasColumnName(\"month\");\n            entity.Property(e => e.Text).HasColumnName(\"text\");\n            entity.Property(e => e.UserId).HasColumnName(\"user_id\");\n            entity.Property(e => e.Year)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<User>(entity =>\n        {\n            entity.HasKey(e => e.Uid);\n\n            entity.ToTable(\"user\");\n\n            entity.Property(e => e.Uid)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"uid\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.UserId).HasColumnName(\"user_id\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Business\n{\n    public int Bid { get; set; }\n\n    public string BusinessId { get; set; } = null!;\n\n    public string? Name { get; set; }\n\n    public string? FullAddress { get; set; }\n\n    public string? City { get; set; }\n\n    public string? Latitude { get; set; }\n\n    public string? Longitude { get; set; }\n\n    public int? ReviewCount { get; set; }\n\n    public int? IsOpen { get; set; }\n\n    public double? Rating { get; set; }\n\n    public string? State { get; set; }\n}",
      "public partial class Category\n{\n    public int Id { get; set; }\n\n    public string? BusinessId { get; set; }\n\n    public string? CategoryName { get; set; }\n}",
      "public partial class Checkin\n{\n    public int Cid { get; set; }\n\n    public string? BusinessId { get; set; }\n\n    public int? Count { get; set; }\n\n    public string? Day { get; set; }\n}",
      "public partial class Neighbourhood\n{\n    public int Id { get; set; }\n\n    public string? BusinessId { get; set; }\n\n    public string? NeighbourhoodName { get; set; }\n}",
      "public partial class Review\n{\n    public int Rid { get; set; }\n\n    public string? BusinessId { get; set; }\n\n    public string? UserId { get; set; }\n\n    public double? Rating { get; set; }\n\n    public string? Text { get; set; }\n\n    public int? Year { get; set; }\n\n    public string? Month { get; set; }\n}",
      "public partial class Tip\n{\n    public int TipId { get; set; }\n\n    public string? BusinessId { get; set; }\n\n    public string? Text { get; set; }\n\n    public string? UserId { get; set; }\n\n    public int? Likes { get; set; }\n\n    public int? Year { get; set; }\n\n    public string? Month { get; set; }\n}",
      "public partial class User\n{\n    public int Uid { get; set; }\n\n    public string UserId { get; set; } = null!;\n\n    public string? Name { get; set; }\n}"
    ]
  },
  "voter_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.voter_1;\n\npublic partial class Voter1Context : DbContext\n{\n    public Voter1Context()\n    {\n    }\n\n    public Voter1Context(DbContextOptions<Voter1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<AreaCodeState> AreaCodeStates { get; set; }\n\n    public virtual DbSet<Contestant> Contestants { get; set; }\n\n    public virtual DbSet<Vote> Votes { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/voter_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<AreaCodeState>(entity =>\n        {\n            entity.HasKey(e => e.AreaCode);\n\n            entity.ToTable(\"AREA_CODE_STATE\");\n\n            entity.Property(e => e.AreaCode)\n                .ValueGeneratedNever()\n                .HasColumnName(\"area_code\");\n            entity.Property(e => e.State)\n                .HasColumnType(\"varchar(2)\")\n                .HasColumnName(\"state\");\n        });\n\n        modelBuilder.Entity<Contestant>(entity =>\n        {\n            entity.HasKey(e => e.ContestantNumber);\n\n            entity.ToTable(\"CONTESTANTS\");\n\n            entity.Property(e => e.ContestantNumber)\n                .ValueGeneratedNever()\n                .HasColumnName(\"contestant_number\");\n            entity.Property(e => e.ContestantName)\n                .HasColumnType(\"varchar(50)\")\n                .HasColumnName(\"contestant_name\");\n        });\n\n        modelBuilder.Entity<Vote>(entity =>\n        {\n            entity.ToTable(\"VOTES\");\n\n            entity.HasIndex(e => e.PhoneNumber, \"idx_VOTES_idx_votes_phone_number\");\n\n            entity.Property(e => e.VoteId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"vote_id\");\n            entity.Property(e => e.ContestantNumber).HasColumnName(\"contestant_number\");\n            entity.Property(e => e.Created)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"timestamp\")\n                .HasColumnName(\"created\");\n            entity.Property(e => e.PhoneNumber).HasColumnName(\"phone_number\");\n            entity.Property(e => e.State)\n                .HasColumnType(\"varchar(2)\")\n                .HasColumnName(\"state\");\n\n            entity.HasOne(d => d.ContestantNumberNavigation).WithMany(p => p.Votes)\n                .HasForeignKey(d => d.ContestantNumber)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class AreaCodeState\n{\n    public int AreaCode { get; set; }\n\n    public string State { get; set; } = null!;\n}",
      "public partial class Contestant\n{\n    public int ContestantNumber { get; set; }\n\n    public string ContestantName { get; set; } = null!;\n\n    public virtual ICollection<Vote> Votes { get; set; } = new List<Vote>();\n}",
      "public partial class Vote\n{\n    public int VoteId { get; set; }\n\n    public long PhoneNumber { get; set; }\n\n    public string State { get; set; } = null!;\n\n    public int ContestantNumber { get; set; }\n\n    public DateTime Created { get; set; }\n\n    public virtual Contestant ContestantNumberNavigation { get; set; } = null!;\n}"
    ]
  },
  "customers_card_transactions": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.customers_card_transactions;\n\npublic partial class CustomersCardTransactionsContext : DbContext\n{\n    public CustomersCardTransactionsContext()\n    {\n    }\n\n    public CustomersCardTransactionsContext(DbContextOptions<CustomersCardTransactionsContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Account> Accounts { get; set; }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<CustomersCard> CustomersCards { get; set; }\n\n    public virtual DbSet<FinancialTransaction> FinancialTransactions { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/customers_card_transactions.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Account>(entity =>\n        {\n            entity.Property(e => e.AccountId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"account_id\");\n            entity.Property(e => e.AccountName)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"account_name\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.OtherAccountDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_account_details\");\n        });\n\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.Property(e => e.CustomerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"customer_id\");\n            entity.Property(e => e.CustomerAddress)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"customer_address\");\n            entity.Property(e => e.CustomerEmail)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"customer_email\");\n            entity.Property(e => e.CustomerFirstName)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"customer_first_name\");\n            entity.Property(e => e.CustomerLastName)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"customer_last_name\");\n            entity.Property(e => e.CustomerPhone)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"customer_phone\");\n            entity.Property(e => e.OtherCustomerDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_customer_details\");\n        });\n\n        modelBuilder.Entity<CustomersCard>(entity =>\n        {\n            entity.HasKey(e => e.CardId);\n\n            entity.ToTable(\"Customers_Cards\");\n\n            entity.Property(e => e.CardId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"card_id\");\n            entity.Property(e => e.CardNumber)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"card_number\");\n            entity.Property(e => e.CardTypeCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"card_type_code\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.DateValidFrom)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_valid_from\");\n            entity.Property(e => e.DateValidTo)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_valid_to\");\n            entity.Property(e => e.OtherCardDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_card_details\");\n        });\n\n        modelBuilder.Entity<FinancialTransaction>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Financial_Transactions\");\n\n            entity.Property(e => e.AccountId).HasColumnName(\"account_id\");\n            entity.Property(e => e.CardId).HasColumnName(\"card_id\");\n            entity.Property(e => e.OtherTransactionDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_transaction_details\");\n            entity.Property(e => e.PreviousTransactionId).HasColumnName(\"previous_transaction_id\");\n            entity.Property(e => e.TransactionAmount)\n                .HasColumnType(\"DOUBLE\")\n                .HasColumnName(\"transaction_amount\");\n            entity.Property(e => e.TransactionComment)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"transaction_comment\");\n            entity.Property(e => e.TransactionDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"transaction_date\");\n            entity.Property(e => e.TransactionId).HasColumnName(\"transaction_id\");\n            entity.Property(e => e.TransactionType)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"transaction_type\");\n\n            entity.HasOne(d => d.Account).WithMany()\n                .HasForeignKey(d => d.AccountId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Card).WithMany()\n                .HasForeignKey(d => d.CardId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Account\n{\n    public int AccountId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public string? AccountName { get; set; }\n\n    public string? OtherAccountDetails { get; set; }\n}",
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public string? CustomerFirstName { get; set; }\n\n    public string? CustomerLastName { get; set; }\n\n    public string? CustomerAddress { get; set; }\n\n    public string? CustomerPhone { get; set; }\n\n    public string? CustomerEmail { get; set; }\n\n    public string? OtherCustomerDetails { get; set; }\n}",
      "public partial class CustomersCard\n{\n    public int CardId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public string CardTypeCode { get; set; } = null!;\n\n    public string? CardNumber { get; set; }\n\n    public DateTime? DateValidFrom { get; set; }\n\n    public DateTime? DateValidTo { get; set; }\n\n    public string? OtherCardDetails { get; set; }\n}",
      "public partial class FinancialTransaction\n{\n    public int TransactionId { get; set; }\n\n    public int? PreviousTransactionId { get; set; }\n\n    public int AccountId { get; set; }\n\n    public int CardId { get; set; }\n\n    public string TransactionType { get; set; } = null!;\n\n    public DateTime? TransactionDate { get; set; }\n\n    public double? TransactionAmount { get; set; }\n\n    public string? TransactionComment { get; set; }\n\n    public string? OtherTransactionDetails { get; set; }\n\n    public virtual Account Account { get; set; } = null!;\n\n    public virtual CustomersCard Card { get; set; } = null!;\n}"
    ]
  },
  "college_3": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.college_3;\n\npublic partial class College3Context : DbContext\n{\n    public College3Context()\n    {\n    }\n\n    public College3Context(DbContextOptions<College3Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Course> Courses { get; set; }\n\n    public virtual DbSet<Department> Departments { get; set; }\n\n    public virtual DbSet<EnrolledIn> EnrolledIns { get; set; }\n\n    public virtual DbSet<Faculty> Faculties { get; set; }\n\n    public virtual DbSet<Gradeconversion> Gradeconversions { get; set; }\n\n    public virtual DbSet<MemberOf> MemberOfs { get; set; }\n\n    public virtual DbSet<MinorIn> MinorIns { get; set; }\n\n    public virtual DbSet<Student> Students { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/college_3.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Course>(entity =>\n        {\n            entity.HasKey(e => e.Cid);\n\n            entity.ToTable(\"Course\");\n\n            entity.Property(e => e.Cid)\n                .HasColumnType(\"VARCHAR(7)\")\n                .HasColumnName(\"CID\");\n            entity.Property(e => e.Cname)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"CName\");\n            entity.Property(e => e.Days).HasColumnType(\"VARCHAR(5)\");\n            entity.Property(e => e.Dno).HasColumnName(\"DNO\");\n            entity.Property(e => e.Hours).HasColumnType(\"VARCHAR(11)\");\n\n            entity.HasOne(d => d.DnoNavigation).WithMany(p => p.Courses).HasForeignKey(d => d.Dno);\n\n            entity.HasOne(d => d.InstructorNavigation).WithMany(p => p.Courses).HasForeignKey(d => d.Instructor);\n        });\n\n        modelBuilder.Entity<Department>(entity =>\n        {\n            entity.HasKey(e => e.Dno);\n\n            entity.ToTable(\"Department\");\n\n            entity.Property(e => e.Dno)\n                .ValueGeneratedNever()\n                .HasColumnName(\"DNO\");\n            entity.Property(e => e.Building).HasColumnType(\"VARCHAR(13)\");\n            entity.Property(e => e.Division).HasColumnType(\"VARCHAR(2)\");\n            entity.Property(e => e.Dname)\n                .HasColumnType(\"VARCHAR(25)\")\n                .HasColumnName(\"DName\");\n            entity.Property(e => e.Dphone).HasColumnName(\"DPhone\");\n            entity.Property(e => e.Room).HasColumnType(\"VARCHAR(5)\");\n        });\n\n        modelBuilder.Entity<EnrolledIn>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Enrolled_in\");\n\n            entity.Property(e => e.Cid)\n                .HasColumnType(\"VARCHAR(7)\")\n                .HasColumnName(\"CID\");\n            entity.Property(e => e.Grade).HasColumnType(\"VARCHAR(2)\");\n            entity.Property(e => e.StuId).HasColumnName(\"StuID\");\n\n            entity.HasOne(d => d.CidNavigation).WithMany().HasForeignKey(d => d.Cid);\n\n            entity.HasOne(d => d.GradeNavigation).WithMany().HasForeignKey(d => d.Grade);\n\n            entity.HasOne(d => d.Stu).WithMany().HasForeignKey(d => d.StuId);\n        });\n\n        modelBuilder.Entity<Faculty>(entity =>\n        {\n            entity.HasKey(e => e.FacId);\n\n            entity.ToTable(\"Faculty\");\n\n            entity.Property(e => e.FacId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"FacID\");\n            entity.Property(e => e.Building).HasColumnType(\"VARCHAR(13)\");\n            entity.Property(e => e.Fname).HasColumnType(\"VARCHAR(15)\");\n            entity.Property(e => e.Lname).HasColumnType(\"VARCHAR(15)\");\n            entity.Property(e => e.Rank).HasColumnType(\"VARCHAR(15)\");\n            entity.Property(e => e.Room).HasColumnType(\"VARCHAR(5)\");\n            entity.Property(e => e.Sex).HasColumnType(\"VARCHAR(1)\");\n        });\n\n        modelBuilder.Entity<Gradeconversion>(entity =>\n        {\n            entity.HasKey(e => e.Lettergrade);\n\n            entity.ToTable(\"Gradeconversion\");\n\n            entity.Property(e => e.Lettergrade)\n                .HasColumnType(\"VARCHAR(2)\")\n                .HasColumnName(\"lettergrade\");\n            entity.Property(e => e.Gradepoint)\n                .HasColumnType(\"FLOAT\")\n                .HasColumnName(\"gradepoint\");\n        });\n\n        modelBuilder.Entity<MemberOf>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Member_of\");\n\n            entity.Property(e => e.ApptType)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"Appt_Type\");\n            entity.Property(e => e.Dno).HasColumnName(\"DNO\");\n            entity.Property(e => e.FacId).HasColumnName(\"FacID\");\n\n            entity.HasOne(d => d.DnoNavigation).WithMany().HasForeignKey(d => d.Dno);\n\n            entity.HasOne(d => d.Fac).WithMany().HasForeignKey(d => d.FacId);\n        });\n\n        modelBuilder.Entity<MinorIn>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Minor_in\");\n\n            entity.Property(e => e.Dno).HasColumnName(\"DNO\");\n            entity.Property(e => e.StuId).HasColumnName(\"StuID\");\n\n            entity.HasOne(d => d.DnoNavigation).WithMany().HasForeignKey(d => d.Dno);\n\n            entity.HasOne(d => d.Stu).WithMany().HasForeignKey(d => d.StuId);\n        });\n\n        modelBuilder.Entity<Student>(entity =>\n        {\n            entity.HasKey(e => e.StuId);\n\n            entity.ToTable(\"Student\");\n\n            entity.Property(e => e.StuId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"StuID\");\n            entity.Property(e => e.CityCode)\n                .HasColumnType(\"VARCHAR(3)\")\n                .HasColumnName(\"city_code\");\n            entity.Property(e => e.Fname).HasColumnType(\"VARCHAR(12)\");\n            entity.Property(e => e.Lname)\n                .HasColumnType(\"VARCHAR(12)\")\n                .HasColumnName(\"LName\");\n            entity.Property(e => e.Sex).HasColumnType(\"VARCHAR(1)\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Course\n{\n    public decimal Cid { get; set; }\n\n    public string? Cname { get; set; }\n\n    public int? Credits { get; set; }\n\n    public int? Instructor { get; set; }\n\n    public string? Days { get; set; }\n\n    public string? Hours { get; set; }\n\n    public int? Dno { get; set; }\n\n    public virtual Department? DnoNavigation { get; set; }\n\n    public virtual Faculty? InstructorNavigation { get; set; }\n}",
      "public partial class Department\n{\n    public int Dno { get; set; }\n\n    public string? Division { get; set; }\n\n    public string? Dname { get; set; }\n\n    public string? Room { get; set; }\n\n    public string? Building { get; set; }\n\n    public int? Dphone { get; set; }\n\n    public virtual ICollection<Course> Courses { get; set; } = new List<Course>();\n}",
      "public partial class EnrolledIn\n{\n    public int? StuId { get; set; }\n\n    public decimal? Cid { get; set; }\n\n    public string? Grade { get; set; }\n\n    public virtual Course? CidNavigation { get; set; }\n\n    public virtual Gradeconversion? GradeNavigation { get; set; }\n\n    public virtual Student? Stu { get; set; }\n}",
      "public partial class Faculty\n{\n    public int FacId { get; set; }\n\n    public string? Lname { get; set; }\n\n    public string? Fname { get; set; }\n\n    public string? Rank { get; set; }\n\n    public string? Sex { get; set; }\n\n    public int? Phone { get; set; }\n\n    public string? Room { get; set; }\n\n    public string? Building { get; set; }\n\n    public virtual ICollection<Course> Courses { get; set; } = new List<Course>();\n}",
      "public partial class Gradeconversion\n{\n    public string Lettergrade { get; set; } = null!;\n\n    public double? Gradepoint { get; set; }\n}",
      "public partial class MemberOf\n{\n    public int? FacId { get; set; }\n\n    public int? Dno { get; set; }\n\n    public string? ApptType { get; set; }\n\n    public virtual Department? DnoNavigation { get; set; }\n\n    public virtual Faculty? Fac { get; set; }\n}",
      "public partial class MinorIn\n{\n    public int? StuId { get; set; }\n\n    public int? Dno { get; set; }\n\n    public virtual Department? DnoNavigation { get; set; }\n\n    public virtual Student? Stu { get; set; }\n}",
      "public partial class Student\n{\n    public int StuId { get; set; }\n\n    public string? Lname { get; set; }\n\n    public string? Fname { get; set; }\n\n    public int? Age { get; set; }\n\n    public string? Sex { get; set; }\n\n    public int? Major { get; set; }\n\n    public int? Advisor { get; set; }\n\n    public string? CityCode { get; set; }\n}"
    ]
  },
  "allergy_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.allergy_1;\n\npublic partial class Allergy1Context : DbContext\n{\n    public Allergy1Context()\n    {\n    }\n\n    public Allergy1Context(DbContextOptions<Allergy1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<AllergyType> AllergyTypes { get; set; }\n\n    public virtual DbSet<HasAllergy> HasAllergies { get; set; }\n\n    public virtual DbSet<Student> Students { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/allergy_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<AllergyType>(entity =>\n        {\n            entity.HasKey(e => e.Allergy);\n\n            entity.ToTable(\"Allergy_Type\");\n\n            entity.Property(e => e.Allergy).HasColumnType(\"VARCHAR(20)\");\n            entity.Property(e => e.AllergyType1)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"AllergyType\");\n        });\n\n        modelBuilder.Entity<HasAllergy>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Has_Allergy\");\n\n            entity.Property(e => e.Allergy).HasColumnType(\"VARCHAR(20)\");\n            entity.Property(e => e.StuId).HasColumnName(\"StuID\");\n\n            entity.HasOne(d => d.AllergyNavigation).WithMany().HasForeignKey(d => d.Allergy);\n\n            entity.HasOne(d => d.Stu).WithMany().HasForeignKey(d => d.StuId);\n        });\n\n        modelBuilder.Entity<Student>(entity =>\n        {\n            entity.HasKey(e => e.StuId);\n\n            entity.ToTable(\"Student\");\n\n            entity.Property(e => e.StuId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"StuID\");\n            entity.Property(e => e.CityCode)\n                .HasColumnType(\"VARCHAR(3)\")\n                .HasColumnName(\"city_code\");\n            entity.Property(e => e.Fname).HasColumnType(\"VARCHAR(12)\");\n            entity.Property(e => e.Lname)\n                .HasColumnType(\"VARCHAR(12)\")\n                .HasColumnName(\"LName\");\n            entity.Property(e => e.Sex).HasColumnType(\"VARCHAR(1)\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class AllergyType\n{\n    public string Allergy { get; set; } = null!;\n\n    public string? AllergyType1 { get; set; }\n}",
      "public partial class HasAllergy\n{\n    public int? StuId { get; set; }\n\n    public string? Allergy { get; set; }\n\n    public virtual AllergyType? AllergyNavigation { get; set; }\n\n    public virtual Student? Stu { get; set; }\n}",
      "public partial class Student\n{\n    public int StuId { get; set; }\n\n    public string? Lname { get; set; }\n\n    public string? Fname { get; set; }\n\n    public int? Age { get; set; }\n\n    public string? Sex { get; set; }\n\n    public int? Major { get; set; }\n\n    public int? Advisor { get; set; }\n\n    public string? CityCode { get; set; }\n}"
    ]
  },
  "tracking_software_problems": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.tracking_software_problems;\n\npublic partial class TrackingSoftwareProblemsContext : DbContext\n{\n    public TrackingSoftwareProblemsContext()\n    {\n    }\n\n    public TrackingSoftwareProblemsContext(DbContextOptions<TrackingSoftwareProblemsContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Problem> Problems { get; set; }\n\n    public virtual DbSet<ProblemCategoryCode> ProblemCategoryCodes { get; set; }\n\n    public virtual DbSet<ProblemLog> ProblemLogs { get; set; }\n\n    public virtual DbSet<ProblemStatusCode> ProblemStatusCodes { get; set; }\n\n    public virtual DbSet<Product> Products { get; set; }\n\n    public virtual DbSet<Staff> Staff { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/tracking_software_problems.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Problem>(entity =>\n        {\n            entity.Property(e => e.ProblemId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"problem_id\");\n            entity.Property(e => e.ClosureAuthorisedByStaffId).HasColumnName(\"closure_authorised_by_staff_id\");\n            entity.Property(e => e.DateProblemClosed)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_problem_closed\");\n            entity.Property(e => e.DateProblemReported)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_problem_reported\");\n            entity.Property(e => e.OtherProblemDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_problem_details\");\n            entity.Property(e => e.ProblemDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"problem_description\");\n            entity.Property(e => e.ProductId).HasColumnName(\"product_id\");\n            entity.Property(e => e.ReportedByStaffId).HasColumnName(\"reported_by_staff_id\");\n\n            entity.HasOne(d => d.ClosureAuthorisedByStaff).WithMany(p => p.ProblemClosureAuthorisedByStaffs)\n                .HasForeignKey(d => d.ClosureAuthorisedByStaffId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Product).WithMany(p => p.Problems)\n                .HasForeignKey(d => d.ProductId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.ReportedByStaff).WithMany(p => p.ProblemReportedByStaffs)\n                .HasForeignKey(d => d.ReportedByStaffId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ProblemCategoryCode>(entity =>\n        {\n            entity.HasKey(e => e.ProblemCategoryCode1);\n\n            entity.ToTable(\"Problem_Category_Codes\");\n\n            entity.Property(e => e.ProblemCategoryCode1)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"problem_category_code\");\n            entity.Property(e => e.ProblemCategoryDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"problem_category_description\");\n        });\n\n        modelBuilder.Entity<ProblemLog>(entity =>\n        {\n            entity.ToTable(\"Problem_Log\");\n\n            entity.Property(e => e.ProblemLogId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"problem_log_id\");\n            entity.Property(e => e.AssignedToStaffId).HasColumnName(\"assigned_to_staff_id\");\n            entity.Property(e => e.LogEntryDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"log_entry_date\");\n            entity.Property(e => e.LogEntryDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"log_entry_description\");\n            entity.Property(e => e.LogEntryFix)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"log_entry_fix\");\n            entity.Property(e => e.OtherLogDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_log_details\");\n            entity.Property(e => e.ProblemCategoryCode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"problem_category_code\");\n            entity.Property(e => e.ProblemId).HasColumnName(\"problem_id\");\n            entity.Property(e => e.ProblemStatusCode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"problem_status_code\");\n\n            entity.HasOne(d => d.AssignedToStaff).WithMany(p => p.ProblemLogs)\n                .HasForeignKey(d => d.AssignedToStaffId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.ProblemCategoryCodeNavigation).WithMany(p => p.ProblemLogs)\n                .HasForeignKey(d => d.ProblemCategoryCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Problem).WithMany(p => p.ProblemLogs)\n                .HasForeignKey(d => d.ProblemId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.ProblemStatusCodeNavigation).WithMany(p => p.ProblemLogs)\n                .HasForeignKey(d => d.ProblemStatusCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ProblemStatusCode>(entity =>\n        {\n            entity.HasKey(e => e.ProblemStatusCode1);\n\n            entity.ToTable(\"Problem_Status_Codes\");\n\n            entity.Property(e => e.ProblemStatusCode1)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"problem_status_code\");\n            entity.Property(e => e.ProblemStatusDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"problem_status_description\");\n        });\n\n        modelBuilder.Entity<Product>(entity =>\n        {\n            entity.ToTable(\"Product\");\n\n            entity.Property(e => e.ProductId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"product_id\");\n            entity.Property(e => e.ProductDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"product_details\");\n            entity.Property(e => e.ProductName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"product_name\");\n        });\n\n        modelBuilder.Entity<Staff>(entity =>\n        {\n            entity.Property(e => e.StaffId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"staff_id\");\n            entity.Property(e => e.OtherStaffDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_staff_details\");\n            entity.Property(e => e.StaffFirstName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"staff_first_name\");\n            entity.Property(e => e.StaffLastName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"staff_last_name\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Problem\n{\n    public int ProblemId { get; set; }\n\n    public int ProductId { get; set; }\n\n    public int ClosureAuthorisedByStaffId { get; set; }\n\n    public int ReportedByStaffId { get; set; }\n\n    public DateTime DateProblemReported { get; set; }\n\n    public DateTime? DateProblemClosed { get; set; }\n\n    public string? ProblemDescription { get; set; }\n\n    public string? OtherProblemDetails { get; set; }\n\n    public virtual Staff ClosureAuthorisedByStaff { get; set; } = null!;\n\n    public virtual ICollection<ProblemLog> ProblemLogs { get; set; } = new List<ProblemLog>();\n\n    public virtual Product Product { get; set; } = null!;\n\n    public virtual Staff ReportedByStaff { get; set; } = null!;\n}",
      "public partial class ProblemCategoryCode\n{\n    public string ProblemCategoryCode1 { get; set; } = null!;\n\n    public string? ProblemCategoryDescription { get; set; }\n\n    public virtual ICollection<ProblemLog> ProblemLogs { get; set; } = new List<ProblemLog>();\n}",
      "public partial class ProblemLog\n{\n    public int ProblemLogId { get; set; }\n\n    public int AssignedToStaffId { get; set; }\n\n    public int ProblemId { get; set; }\n\n    public string ProblemCategoryCode { get; set; } = null!;\n\n    public string ProblemStatusCode { get; set; } = null!;\n\n    public DateTime? LogEntryDate { get; set; }\n\n    public string? LogEntryDescription { get; set; }\n\n    public string? LogEntryFix { get; set; }\n\n    public string? OtherLogDetails { get; set; }\n\n    public virtual Staff AssignedToStaff { get; set; } = null!;\n\n    public virtual Problem Problem { get; set; } = null!;\n\n    public virtual ProblemCategoryCode ProblemCategoryCodeNavigation { get; set; } = null!;\n\n    public virtual ProblemStatusCode ProblemStatusCodeNavigation { get; set; } = null!;\n}",
      "public partial class ProblemStatusCode\n{\n    public string ProblemStatusCode1 { get; set; } = null!;\n\n    public string? ProblemStatusDescription { get; set; }\n\n    public virtual ICollection<ProblemLog> ProblemLogs { get; set; } = new List<ProblemLog>();\n}",
      "public partial class Product\n{\n    public int ProductId { get; set; }\n\n    public string? ProductName { get; set; }\n\n    public string? ProductDetails { get; set; }\n\n    public virtual ICollection<Problem> Problems { get; set; } = new List<Problem>();\n}",
      "public partial class Staff\n{\n    public int StaffId { get; set; }\n\n    public string? StaffFirstName { get; set; }\n\n    public string? StaffLastName { get; set; }\n\n    public string? OtherStaffDetails { get; set; }\n\n    public virtual ICollection<Problem> ProblemClosureAuthorisedByStaffs { get; set; } = new List<Problem>();\n\n    public virtual ICollection<ProblemLog> ProblemLogs { get; set; } = new List<ProblemLog>();\n\n    public virtual ICollection<Problem> ProblemReportedByStaffs { get; set; } = new List<Problem>();\n}"
    ]
  },
  "manufacturer": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.manufacturer;\n\npublic partial class ManufacturerContext : DbContext\n{\n    public ManufacturerContext()\n    {\n    }\n\n    public ManufacturerContext(DbContextOptions<ManufacturerContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Furniture> Furnitures { get; set; }\n\n    public virtual DbSet<FurnitureManufacte> FurnitureManufactes { get; set; }\n\n    public virtual DbSet<Manufacturer> Manufacturers { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/manufacturer.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Furniture>(entity =>\n        {\n            entity.ToTable(\"furniture\");\n\n            entity.Property(e => e.FurnitureId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Furniture_ID\");\n            entity.Property(e => e.MarketRate).HasColumnName(\"Market_Rate\");\n            entity.Property(e => e.NumOfComponent)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Num_of_Component\");\n        });\n\n        modelBuilder.Entity<FurnitureManufacte>(entity =>\n        {\n            entity.HasKey(e => new { e.ManufacturerId, e.FurnitureId });\n\n            entity.ToTable(\"furniture_manufacte\");\n\n            entity.Property(e => e.ManufacturerId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Manufacturer_ID\");\n            entity.Property(e => e.FurnitureId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Furniture_ID\");\n            entity.Property(e => e.PriceInDollar).HasColumnName(\"Price_in_Dollar\");\n\n            entity.HasOne(d => d.Furniture).WithMany(p => p.FurnitureManufactes)\n                .HasForeignKey(d => d.FurnitureId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Manufacturer).WithMany(p => p.FurnitureManufactes)\n                .HasForeignKey(d => d.ManufacturerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Manufacturer>(entity =>\n        {\n            entity.ToTable(\"manufacturer\");\n\n            entity.Property(e => e.ManufacturerId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Manufacturer_ID\");\n            entity.Property(e => e.NumOfFactories)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Num_of_Factories\");\n            entity.Property(e => e.NumOfShops)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Num_of_Shops\");\n            entity.Property(e => e.OpenYear).HasColumnName(\"Open_Year\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Furniture\n{\n    public int FurnitureId { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? NumOfComponent { get; set; }\n\n    public double? MarketRate { get; set; }\n\n    public virtual ICollection<FurnitureManufacte> FurnitureManufactes { get; set; } = new List<FurnitureManufacte>();\n}",
      "public partial class FurnitureManufacte\n{\n    public int ManufacturerId { get; set; }\n\n    public int FurnitureId { get; set; }\n\n    public double? PriceInDollar { get; set; }\n\n    public virtual Furniture Furniture { get; set; } = null!;\n\n    public virtual Manufacturer Manufacturer { get; set; } = null!;\n}",
      "public partial class Manufacturer\n{\n    public int ManufacturerId { get; set; }\n\n    public double? OpenYear { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? NumOfFactories { get; set; }\n\n    public int? NumOfShops { get; set; }\n\n    public virtual ICollection<FurnitureManufacte> FurnitureManufactes { get; set; } = new List<FurnitureManufacte>();\n}"
    ]
  },
  "products_gen_characteristics": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.products_gen_characteristics;\n\npublic partial class ProductsGenCharacteristicsContext : DbContext\n{\n    public ProductsGenCharacteristicsContext()\n    {\n    }\n\n    public ProductsGenCharacteristicsContext(DbContextOptions<ProductsGenCharacteristicsContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Characteristic> Characteristics { get; set; }\n\n    public virtual DbSet<Product> Products { get; set; }\n\n    public virtual DbSet<ProductCharacteristic> ProductCharacteristics { get; set; }\n\n    public virtual DbSet<RefCharacteristicType> RefCharacteristicTypes { get; set; }\n\n    public virtual DbSet<RefColor> RefColors { get; set; }\n\n    public virtual DbSet<RefProductCategory> RefProductCategories { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/products_gen_characteristics.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Characteristic>(entity =>\n        {\n            entity.Property(e => e.CharacteristicId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"characteristic_id\");\n            entity.Property(e => e.CharacteristicDataType)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"characteristic_data_type\");\n            entity.Property(e => e.CharacteristicName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"characteristic_name\");\n            entity.Property(e => e.CharacteristicTypeCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"characteristic_type_code\");\n            entity.Property(e => e.OtherCharacteristicDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_characteristic_details\");\n\n            entity.HasOne(d => d.CharacteristicTypeCodeNavigation).WithMany(p => p.Characteristics)\n                .HasForeignKey(d => d.CharacteristicTypeCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Product>(entity =>\n        {\n            entity.Property(e => e.ProductId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"product_id\");\n            entity.Property(e => e.ColorCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"color_code\");\n            entity.Property(e => e.OtherProductDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_product_details\");\n            entity.Property(e => e.ProductCategoryCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"product_category_code\");\n            entity.Property(e => e.ProductDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"product_description\");\n            entity.Property(e => e.ProductName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"product_name\");\n            entity.Property(e => e.TypicalBuyingPrice)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"typical_buying_price\");\n            entity.Property(e => e.TypicalSellingPrice)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"typical_selling_price\");\n\n            entity.HasOne(d => d.ColorCodeNavigation).WithMany(p => p.Products)\n                .HasForeignKey(d => d.ColorCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.ProductCategoryCodeNavigation).WithMany(p => p.Products)\n                .HasForeignKey(d => d.ProductCategoryCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ProductCharacteristic>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Product_Characteristics\");\n\n            entity.Property(e => e.CharacteristicId).HasColumnName(\"characteristic_id\");\n            entity.Property(e => e.ProductCharacteristicValue)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"product_characteristic_value\");\n            entity.Property(e => e.ProductId).HasColumnName(\"product_id\");\n\n            entity.HasOne(d => d.Characteristic).WithMany()\n                .HasForeignKey(d => d.CharacteristicId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Product).WithMany()\n                .HasForeignKey(d => d.ProductId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<RefCharacteristicType>(entity =>\n        {\n            entity.HasKey(e => e.CharacteristicTypeCode);\n\n            entity.ToTable(\"Ref_Characteristic_Types\");\n\n            entity.Property(e => e.CharacteristicTypeCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"characteristic_type_code\");\n            entity.Property(e => e.CharacteristicTypeDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"characteristic_type_description\");\n        });\n\n        modelBuilder.Entity<RefColor>(entity =>\n        {\n            entity.HasKey(e => e.ColorCode);\n\n            entity.ToTable(\"Ref_Colors\");\n\n            entity.Property(e => e.ColorCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"color_code\");\n            entity.Property(e => e.ColorDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"color_description\");\n        });\n\n        modelBuilder.Entity<RefProductCategory>(entity =>\n        {\n            entity.HasKey(e => e.ProductCategoryCode);\n\n            entity.ToTable(\"Ref_Product_Categories\");\n\n            entity.Property(e => e.ProductCategoryCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"product_category_code\");\n            entity.Property(e => e.ProductCategoryDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"product_category_description\");\n            entity.Property(e => e.UnitOfMeasure)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"unit_of_measure\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Characteristic\n{\n    public int CharacteristicId { get; set; }\n\n    public string CharacteristicTypeCode { get; set; } = null!;\n\n    public string? CharacteristicDataType { get; set; }\n\n    public string? CharacteristicName { get; set; }\n\n    public string? OtherCharacteristicDetails { get; set; }\n\n    public virtual RefCharacteristicType CharacteristicTypeCodeNavigation { get; set; } = null!;\n}",
      "public partial class Product\n{\n    public int ProductId { get; set; }\n\n    public string ColorCode { get; set; } = null!;\n\n    public string ProductCategoryCode { get; set; } = null!;\n\n    public string? ProductName { get; set; }\n\n    public decimal? TypicalBuyingPrice { get; set; }\n\n    public decimal? TypicalSellingPrice { get; set; }\n\n    public string? ProductDescription { get; set; }\n\n    public string? OtherProductDetails { get; set; }\n\n    public virtual RefColor ColorCodeNavigation { get; set; } = null!;\n\n    public virtual RefProductCategory ProductCategoryCodeNavigation { get; set; } = null!;\n}",
      "public partial class ProductCharacteristic\n{\n    public int ProductId { get; set; }\n\n    public int CharacteristicId { get; set; }\n\n    public string? ProductCharacteristicValue { get; set; }\n\n    public virtual Characteristic Characteristic { get; set; } = null!;\n\n    public virtual Product Product { get; set; } = null!;\n}",
      "public partial class RefCharacteristicType\n{\n    public string CharacteristicTypeCode { get; set; } = null!;\n\n    public string? CharacteristicTypeDescription { get; set; }\n\n    public virtual ICollection<Characteristic> Characteristics { get; set; } = new List<Characteristic>();\n}",
      "public partial class RefColor\n{\n    public string ColorCode { get; set; } = null!;\n\n    public string? ColorDescription { get; set; }\n\n    public virtual ICollection<Product> Products { get; set; } = new List<Product>();\n}",
      "public partial class RefProductCategory\n{\n    public string ProductCategoryCode { get; set; } = null!;\n\n    public string? ProductCategoryDescription { get; set; }\n\n    public string? UnitOfMeasure { get; set; }\n\n    public virtual ICollection<Product> Products { get; set; } = new List<Product>();\n}"
    ]
  },
  "entrepreneur": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.entrepreneur;\n\npublic partial class EntrepreneurContext : DbContext\n{\n    public EntrepreneurContext()\n    {\n    }\n\n    public EntrepreneurContext(DbContextOptions<EntrepreneurContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Entrepreneur> Entrepreneurs { get; set; }\n\n    public virtual DbSet<Person> People { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/entrepreneur.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Entrepreneur>(entity =>\n        {\n            entity.ToTable(\"entrepreneur\");\n\n            entity.Property(e => e.EntrepreneurId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Entrepreneur_ID\");\n            entity.Property(e => e.MoneyRequested).HasColumnName(\"Money_Requested\");\n            entity.Property(e => e.PeopleId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"People_ID\");\n\n            entity.HasOne(d => d.People).WithMany(p => p.Entrepreneurs).HasForeignKey(d => d.PeopleId);\n        });\n\n        modelBuilder.Entity<Person>(entity =>\n        {\n            entity.HasKey(e => e.PeopleId);\n\n            entity.ToTable(\"people\");\n\n            entity.Property(e => e.PeopleId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"People_ID\");\n            entity.Property(e => e.DateOfBirth).HasColumnName(\"Date_of_Birth\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Entrepreneur\n{\n    public int EntrepreneurId { get; set; }\n\n    public int? PeopleId { get; set; }\n\n    public string? Company { get; set; }\n\n    public double? MoneyRequested { get; set; }\n\n    public string? Investor { get; set; }\n\n    public virtual Person? People { get; set; }\n}",
      "public partial class Person\n{\n    public int PeopleId { get; set; }\n\n    public string? Name { get; set; }\n\n    public double? Height { get; set; }\n\n    public double? Weight { get; set; }\n\n    public DateOnly? DateOfBirth { get; set; }\n\n    public virtual ICollection<Entrepreneur> Entrepreneurs { get; set; } = new List<Entrepreneur>();\n}"
    ]
  },
  "film_rank": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.film_rank;\n\npublic partial class FilmRankContext : DbContext\n{\n    public FilmRankContext()\n    {\n    }\n\n    public FilmRankContext(DbContextOptions<FilmRankContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Film> Films { get; set; }\n\n    public virtual DbSet<FilmMarketEstimation> FilmMarketEstimations { get; set; }\n\n    public virtual DbSet<Market> Markets { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/film_rank.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Film>(entity =>\n        {\n            entity.ToTable(\"film\");\n\n            entity.Property(e => e.FilmId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Film_ID\");\n            entity.Property(e => e.GrossInDollar)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Gross_in_dollar\");\n        });\n\n        modelBuilder.Entity<FilmMarketEstimation>(entity =>\n        {\n            entity.HasKey(e => e.EstimationId);\n\n            entity.ToTable(\"film_market_estimation\");\n\n            entity.Property(e => e.EstimationId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Estimation_ID\");\n            entity.Property(e => e.FilmId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Film_ID\");\n            entity.Property(e => e.HighEstimate).HasColumnName(\"High_Estimate\");\n            entity.Property(e => e.LowEstimate).HasColumnName(\"Low_Estimate\");\n            entity.Property(e => e.MarketId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Market_ID\");\n            entity.Property(e => e.Year).HasColumnType(\"INT\");\n\n            entity.HasOne(d => d.Film).WithMany(p => p.FilmMarketEstimations).HasForeignKey(d => d.FilmId);\n\n            entity.HasOne(d => d.Market).WithMany(p => p.FilmMarketEstimations).HasForeignKey(d => d.MarketId);\n        });\n\n        modelBuilder.Entity<Market>(entity =>\n        {\n            entity.ToTable(\"market\");\n\n            entity.Property(e => e.MarketId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Market_ID\");\n            entity.Property(e => e.NumberCities)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Number_cities\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Film\n{\n    public int FilmId { get; set; }\n\n    public string? Title { get; set; }\n\n    public string? Studio { get; set; }\n\n    public string? Director { get; set; }\n\n    public int? GrossInDollar { get; set; }\n\n    public virtual ICollection<FilmMarketEstimation> FilmMarketEstimations { get; set; } = new List<FilmMarketEstimation>();\n}",
      "public partial class FilmMarketEstimation\n{\n    public int EstimationId { get; set; }\n\n    public double? LowEstimate { get; set; }\n\n    public double? HighEstimate { get; set; }\n\n    public int? FilmId { get; set; }\n\n    public string? Type { get; set; }\n\n    public int? MarketId { get; set; }\n\n    public int? Year { get; set; }\n\n    public virtual Film? Film { get; set; }\n\n    public virtual Market? Market { get; set; }\n}",
      "public partial class Market\n{\n    public int MarketId { get; set; }\n\n    public string? Country { get; set; }\n\n    public int? NumberCities { get; set; }\n\n    public virtual ICollection<FilmMarketEstimation> FilmMarketEstimations { get; set; } = new List<FilmMarketEstimation>();\n}"
    ]
  },
  "entertainment_awards": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.entertainment_awards;\n\npublic partial class EntertainmentAwardsContext : DbContext\n{\n    public EntertainmentAwardsContext()\n    {\n    }\n\n    public EntertainmentAwardsContext(DbContextOptions<EntertainmentAwardsContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Artwork> Artworks { get; set; }\n\n    public virtual DbSet<FestivalDetail> FestivalDetails { get; set; }\n\n    public virtual DbSet<Nomination> Nominations { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/entertainment_awards.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Artwork>(entity =>\n        {\n            entity.ToTable(\"artwork\");\n\n            entity.Property(e => e.ArtworkId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Artwork_ID\");\n        });\n\n        modelBuilder.Entity<FestivalDetail>(entity =>\n        {\n            entity.HasKey(e => e.FestivalId);\n\n            entity.ToTable(\"festival_detail\");\n\n            entity.Property(e => e.FestivalId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Festival_ID\");\n            entity.Property(e => e.ChairName).HasColumnName(\"Chair_Name\");\n            entity.Property(e => e.FestivalName).HasColumnName(\"Festival_Name\");\n            entity.Property(e => e.NumOfAudience)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Num_of_Audience\");\n            entity.Property(e => e.Year).HasColumnType(\"INT\");\n        });\n\n        modelBuilder.Entity<Nomination>(entity =>\n        {\n            entity.HasKey(e => new { e.ArtworkId, e.FestivalId });\n\n            entity.ToTable(\"nomination\");\n\n            entity.Property(e => e.ArtworkId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Artwork_ID\");\n            entity.Property(e => e.FestivalId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Festival_ID\");\n\n            entity.HasOne(d => d.Artwork).WithMany(p => p.Nominations)\n                .HasForeignKey(d => d.ArtworkId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Festival).WithMany(p => p.Nominations)\n                .HasForeignKey(d => d.FestivalId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Artwork\n{\n    public int ArtworkId { get; set; }\n\n    public string? Type { get; set; }\n\n    public string? Name { get; set; }\n\n    public virtual ICollection<Nomination> Nominations { get; set; } = new List<Nomination>();\n}",
      "public partial class FestivalDetail\n{\n    public int FestivalId { get; set; }\n\n    public string? FestivalName { get; set; }\n\n    public string? ChairName { get; set; }\n\n    public string? Location { get; set; }\n\n    public int? Year { get; set; }\n\n    public int? NumOfAudience { get; set; }\n\n    public virtual ICollection<Nomination> Nominations { get; set; } = new List<Nomination>();\n}",
      "public partial class Nomination\n{\n    public int ArtworkId { get; set; }\n\n    public int FestivalId { get; set; }\n\n    public string? Result { get; set; }\n\n    public virtual Artwork Artwork { get; set; } = null!;\n\n    public virtual FestivalDetail Festival { get; set; } = null!;\n}"
    ]
  },
  "hr_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.hr_1;\n\npublic partial class Hr1Context : DbContext\n{\n    public Hr1Context()\n    {\n    }\n\n    public Hr1Context(DbContextOptions<Hr1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Country> Countries { get; set; }\n\n    public virtual DbSet<Department> Departments { get; set; }\n\n    public virtual DbSet<Employee> Employees { get; set; }\n\n    public virtual DbSet<Job> Jobs { get; set; }\n\n    public virtual DbSet<JobHistory> JobHistories { get; set; }\n\n    public virtual DbSet<Location> Locations { get; set; }\n\n    public virtual DbSet<Region> Regions { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/hr_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Country>(entity =>\n        {\n            entity.ToTable(\"countries\");\n\n            entity.Property(e => e.CountryId)\n                .HasColumnType(\"varchar(2)\")\n                .HasColumnName(\"COUNTRY_ID\");\n            entity.Property(e => e.CountryName)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(40)\")\n                .HasColumnName(\"COUNTRY_NAME\");\n            entity.Property(e => e.RegionId)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"decimal(10,0)\")\n                .HasColumnName(\"REGION_ID\");\n\n            entity.HasOne(d => d.Region).WithMany(p => p.Countries).HasForeignKey(d => d.RegionId);\n        });\n\n        modelBuilder.Entity<Department>(entity =>\n        {\n            entity.ToTable(\"departments\");\n\n            entity.Property(e => e.DepartmentId)\n                .HasDefaultValueSql(\"'0'\")\n                .HasColumnType(\"decimal(4,0)\")\n                .HasColumnName(\"DEPARTMENT_ID\");\n            entity.Property(e => e.DepartmentName)\n                .HasColumnType(\"varchar(30)\")\n                .HasColumnName(\"DEPARTMENT_NAME\");\n            entity.Property(e => e.LocationId)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"decimal(4,0)\")\n                .HasColumnName(\"LOCATION_ID\");\n            entity.Property(e => e.ManagerId)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"decimal(6,0)\")\n                .HasColumnName(\"MANAGER_ID\");\n        });\n\n        modelBuilder.Entity<Employee>(entity =>\n        {\n            entity.ToTable(\"employees\");\n\n            entity.Property(e => e.EmployeeId)\n                .HasDefaultValueSql(\"'0'\")\n                .HasColumnType(\"decimal(6,0)\")\n                .HasColumnName(\"EMPLOYEE_ID\");\n            entity.Property(e => e.CommissionPct)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"decimal(2,2)\")\n                .HasColumnName(\"COMMISSION_PCT\");\n            entity.Property(e => e.DepartmentId)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"decimal(4,0)\")\n                .HasColumnName(\"DEPARTMENT_ID\");\n            entity.Property(e => e.Email)\n                .HasColumnType(\"varchar(25)\")\n                .HasColumnName(\"EMAIL\");\n            entity.Property(e => e.FirstName)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"FIRST_NAME\");\n            entity.Property(e => e.HireDate)\n                .HasColumnType(\"date\")\n                .HasColumnName(\"HIRE_DATE\");\n            entity.Property(e => e.JobId)\n                .HasColumnType(\"varchar(10)\")\n                .HasColumnName(\"JOB_ID\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"varchar(25)\")\n                .HasColumnName(\"LAST_NAME\");\n            entity.Property(e => e.ManagerId)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"decimal(6,0)\")\n                .HasColumnName(\"MANAGER_ID\");\n            entity.Property(e => e.PhoneNumber)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"PHONE_NUMBER\");\n            entity.Property(e => e.Salary)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"decimal(8,2)\")\n                .HasColumnName(\"SALARY\");\n\n            entity.HasOne(d => d.Department).WithMany(p => p.Employees).HasForeignKey(d => d.DepartmentId);\n\n            entity.HasOne(d => d.Job).WithMany(p => p.Employees)\n                .HasForeignKey(d => d.JobId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Job>(entity =>\n        {\n            entity.ToTable(\"jobs\");\n\n            entity.Property(e => e.JobId)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"varchar(10)\")\n                .HasColumnName(\"JOB_ID\");\n            entity.Property(e => e.JobTitle)\n                .HasColumnType(\"varchar(35)\")\n                .HasColumnName(\"JOB_TITLE\");\n            entity.Property(e => e.MaxSalary)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"decimal(6,0)\")\n                .HasColumnName(\"MAX_SALARY\");\n            entity.Property(e => e.MinSalary)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"decimal(6,0)\")\n                .HasColumnName(\"MIN_SALARY\");\n        });\n\n        modelBuilder.Entity<JobHistory>(entity =>\n        {\n            entity.HasKey(e => new { e.EmployeeId, e.StartDate });\n\n            entity.ToTable(\"job_history\");\n\n            entity.Property(e => e.EmployeeId)\n                .HasColumnType(\"decimal(6,0)\")\n                .HasColumnName(\"EMPLOYEE_ID\");\n            entity.Property(e => e.StartDate)\n                .HasColumnType(\"date\")\n                .HasColumnName(\"START_DATE\");\n            entity.Property(e => e.DepartmentId)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"decimal(4,0)\")\n                .HasColumnName(\"DEPARTMENT_ID\");\n            entity.Property(e => e.EndDate)\n                .HasColumnType(\"date\")\n                .HasColumnName(\"END_DATE\");\n            entity.Property(e => e.JobId)\n                .HasColumnType(\"varchar(10)\")\n                .HasColumnName(\"JOB_ID\");\n\n            entity.HasOne(d => d.Department).WithMany(p => p.JobHistories).HasForeignKey(d => d.DepartmentId);\n\n            entity.HasOne(d => d.Employee).WithMany(p => p.JobHistories)\n                .HasForeignKey(d => d.EmployeeId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Job).WithMany(p => p.JobHistories)\n                .HasForeignKey(d => d.JobId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Location>(entity =>\n        {\n            entity.ToTable(\"locations\");\n\n            entity.Property(e => e.LocationId)\n                .HasDefaultValueSql(\"'0'\")\n                .HasColumnType(\"decimal(4,0)\")\n                .HasColumnName(\"LOCATION_ID\");\n            entity.Property(e => e.City)\n                .HasColumnType(\"varchar(30)\")\n                .HasColumnName(\"CITY\");\n            entity.Property(e => e.CountryId)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(2)\")\n                .HasColumnName(\"COUNTRY_ID\");\n            entity.Property(e => e.PostalCode)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(12)\")\n                .HasColumnName(\"POSTAL_CODE\");\n            entity.Property(e => e.StateProvince)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(25)\")\n                .HasColumnName(\"STATE_PROVINCE\");\n            entity.Property(e => e.StreetAddress)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(40)\")\n                .HasColumnName(\"STREET_ADDRESS\");\n\n            entity.HasOne(d => d.Country).WithMany(p => p.Locations).HasForeignKey(d => d.CountryId);\n        });\n\n        modelBuilder.Entity<Region>(entity =>\n        {\n            entity.ToTable(\"regions\");\n\n            entity.Property(e => e.RegionId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"decimal(5,0)\")\n                .HasColumnName(\"REGION_ID\");\n            entity.Property(e => e.RegionName)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(25)\")\n                .HasColumnName(\"REGION_NAME\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Country\n{\n    public string CountryId { get; set; } = null!;\n\n    public string? CountryName { get; set; }\n\n    public int? RegionId { get; set; }\n\n    public virtual ICollection<Location> Locations { get; set; } = new List<Location>();\n\n    public virtual Region? Region { get; set; }\n}",
      "public partial class Department\n{\n    public int DepartmentId { get; set; }\n\n    public string DepartmentName { get; set; } = null!;\n\n    public int? ManagerId { get; set; }\n\n    public int? LocationId { get; set; }\n\n    public virtual ICollection<Employee> Employees { get; set; } = new List<Employee>();\n\n    public virtual ICollection<JobHistory> JobHistories { get; set; } = new List<JobHistory>();\n}",
      "public partial class Employee\n{\n    public int EmployeeId { get; set; }\n\n    public string? FirstName { get; set; }\n\n    public string LastName { get; set; } = null!;\n\n    public string Email { get; set; } = null!;\n\n    public string? PhoneNumber { get; set; }\n\n    public DateOnly HireDate { get; set; }\n\n    public string JobId { get; set; } = null!;\n\n    public int? Salary { get; set; }\n\n    public decimal? CommissionPct { get; set; }\n\n    public int? ManagerId { get; set; }\n\n    public int? DepartmentId { get; set; }\n\n    public virtual Department? Department { get; set; }\n\n    public virtual Job Job { get; set; } = null!;\n\n    public virtual ICollection<JobHistory> JobHistories { get; set; } = new List<JobHistory>();\n}",
      "public partial class Job\n{\n    public string JobId { get; set; } = null!;\n\n    public string JobTitle { get; set; } = null!;\n\n    public int? MinSalary { get; set; }\n\n    public int? MaxSalary { get; set; }\n\n    public virtual ICollection<Employee> Employees { get; set; } = new List<Employee>();\n\n    public virtual ICollection<JobHistory> JobHistories { get; set; } = new List<JobHistory>();\n}",
      "public partial class JobHistory\n{\n    public int EmployeeId { get; set; }\n\n    public DateOnly StartDate { get; set; }\n\n    public DateOnly EndDate { get; set; }\n\n    public string JobId { get; set; } = null!;\n\n    public int? DepartmentId { get; set; }\n\n    public virtual Department? Department { get; set; }\n\n    public virtual Employee Employee { get; set; } = null!;\n\n    public virtual Job Job { get; set; } = null!;\n}",
      "public partial class Location\n{\n    public int LocationId { get; set; }\n\n    public string? StreetAddress { get; set; }\n\n    public string? PostalCode { get; set; }\n\n    public string City { get; set; } = null!;\n\n    public string? StateProvince { get; set; }\n\n    public string? CountryId { get; set; }\n\n    public virtual Country? Country { get; set; }\n}",
      "public partial class Region\n{\n    public int RegionId { get; set; }\n\n    public string? RegionName { get; set; }\n\n    public virtual ICollection<Country> Countries { get; set; } = new List<Country>();\n}"
    ]
  },
  "movie_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.movie_1;\n\npublic partial class Movie1Context : DbContext\n{\n    public Movie1Context()\n    {\n    }\n\n    public Movie1Context(DbContextOptions<Movie1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Movie> Movies { get; set; }\n\n    public virtual DbSet<Rating> Ratings { get; set; }\n\n    public virtual DbSet<Reviewer> Reviewers { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/movie_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Movie>(entity =>\n        {\n            entity.HasKey(e => e.MId);\n\n            entity.ToTable(\"Movie\");\n\n            entity.Property(e => e.MId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"mID\");\n            entity.Property(e => e.Director).HasColumnName(\"director\");\n            entity.Property(e => e.Title).HasColumnName(\"title\");\n            entity.Property(e => e.Year)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"year\");\n        });\n\n        modelBuilder.Entity<Rating>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Rating\");\n\n            entity.Property(e => e.MId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"mID\");\n            entity.Property(e => e.RId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"rID\");\n            entity.Property(e => e.RatingDate)\n                .HasColumnType(\"date\")\n                .HasColumnName(\"ratingDate\");\n            entity.Property(e => e.Stars)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"stars\");\n\n            entity.HasOne(d => d.MIdNavigation).WithMany().HasForeignKey(d => d.MId);\n\n            entity.HasOne(d => d.RIdNavigation).WithMany().HasForeignKey(d => d.RId);\n        });\n\n        modelBuilder.Entity<Reviewer>(entity =>\n        {\n            entity.HasKey(e => e.RId);\n\n            entity.ToTable(\"Reviewer\");\n\n            entity.Property(e => e.RId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"rID\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Movie\n{\n    public int MId { get; set; }\n\n    public string? Title { get; set; }\n\n    public int? Year { get; set; }\n\n    public string? Director { get; set; }\n}",
      "public partial class Rating\n{\n    public int? RId { get; set; }\n\n    public int? MId { get; set; }\n\n    public int? Stars { get; set; }\n\n    public DateOnly? RatingDate { get; set; }\n\n    public virtual Movie? MIdNavigation { get; set; }\n\n    public virtual Reviewer? RIdNavigation { get; set; }\n}",
      "public partial class Reviewer\n{\n    public int RId { get; set; }\n\n    public string? Name { get; set; }\n}"
    ]
  },
  "wta_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.wta_1;\n\npublic partial class Wta1Context : DbContext\n{\n    public Wta1Context()\n    {\n    }\n\n    public Wta1Context(DbContextOptions<Wta1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Match> Matches { get; set; }\n\n    public virtual DbSet<Player> Players { get; set; }\n\n    public virtual DbSet<Ranking> Rankings { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/wta_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Match>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"matches\");\n\n            entity.Property(e => e.BestOf)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"best_of\");\n            entity.Property(e => e.DrawSize)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"draw_size\");\n            entity.Property(e => e.LoserAge)\n                .HasColumnType(\"FLOAT\")\n                .HasColumnName(\"loser_age\");\n            entity.Property(e => e.LoserEntry).HasColumnName(\"loser_entry\");\n            entity.Property(e => e.LoserHand).HasColumnName(\"loser_hand\");\n            entity.Property(e => e.LoserHt)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"loser_ht\");\n            entity.Property(e => e.LoserId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"loser_id\");\n            entity.Property(e => e.LoserIoc).HasColumnName(\"loser_ioc\");\n            entity.Property(e => e.LoserName).HasColumnName(\"loser_name\");\n            entity.Property(e => e.LoserRank)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"loser_rank\");\n            entity.Property(e => e.LoserRankPoints)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"loser_rank_points\");\n            entity.Property(e => e.LoserSeed)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"loser_seed\");\n            entity.Property(e => e.MatchNum)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"match_num\");\n            entity.Property(e => e.Minutes)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"minutes\");\n            entity.Property(e => e.Round).HasColumnName(\"round\");\n            entity.Property(e => e.Score).HasColumnName(\"score\");\n            entity.Property(e => e.Surface).HasColumnName(\"surface\");\n            entity.Property(e => e.TourneyDate)\n                .HasColumnType(\"DATE\")\n                .HasColumnName(\"tourney_date\");\n            entity.Property(e => e.TourneyId).HasColumnName(\"tourney_id\");\n            entity.Property(e => e.TourneyLevel).HasColumnName(\"tourney_level\");\n            entity.Property(e => e.TourneyName).HasColumnName(\"tourney_name\");\n            entity.Property(e => e.WinnerAge)\n                .HasColumnType(\"FLOAT\")\n                .HasColumnName(\"winner_age\");\n            entity.Property(e => e.WinnerEntry).HasColumnName(\"winner_entry\");\n            entity.Property(e => e.WinnerHand).HasColumnName(\"winner_hand\");\n            entity.Property(e => e.WinnerHt)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"winner_ht\");\n            entity.Property(e => e.WinnerId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"winner_id\");\n            entity.Property(e => e.WinnerIoc).HasColumnName(\"winner_ioc\");\n            entity.Property(e => e.WinnerName).HasColumnName(\"winner_name\");\n            entity.Property(e => e.WinnerRank)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"winner_rank\");\n            entity.Property(e => e.WinnerRankPoints)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"winner_rank_points\");\n            entity.Property(e => e.WinnerSeed)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"winner_seed\");\n            entity.Property(e => e.Year)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"year\");\n\n            entity.HasOne(d => d.Loser).WithMany().HasForeignKey(d => d.LoserId);\n\n            entity.HasOne(d => d.Winner).WithMany().HasForeignKey(d => d.WinnerId);\n        });\n\n        modelBuilder.Entity<Player>(entity =>\n        {\n            entity.ToTable(\"players\");\n\n            entity.Property(e => e.PlayerId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"player_id\");\n            entity.Property(e => e.BirthDate)\n                .HasColumnType(\"DATE\")\n                .HasColumnName(\"birth_date\");\n            entity.Property(e => e.CountryCode).HasColumnName(\"country_code\");\n            entity.Property(e => e.FirstName).HasColumnName(\"first_name\");\n            entity.Property(e => e.Hand).HasColumnName(\"hand\");\n            entity.Property(e => e.LastName).HasColumnName(\"last_name\");\n        });\n\n        modelBuilder.Entity<Ranking>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"rankings\");\n\n            entity.Property(e => e.PlayerId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"player_id\");\n            entity.Property(e => e.Ranking1)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"ranking\");\n            entity.Property(e => e.RankingDate)\n                .HasColumnType(\"DATE\")\n                .HasColumnName(\"ranking_date\");\n            entity.Property(e => e.RankingPoints)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"ranking_points\");\n            entity.Property(e => e.Tours)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"tours\");\n\n            entity.HasOne(d => d.Player).WithMany().HasForeignKey(d => d.PlayerId);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Match\n{\n    public int? BestOf { get; set; }\n\n    public int? DrawSize { get; set; }\n\n    public double? LoserAge { get; set; }\n\n    public string? LoserEntry { get; set; }\n\n    public string? LoserHand { get; set; }\n\n    public int? LoserHt { get; set; }\n\n    public int? LoserId { get; set; }\n\n    public string? LoserIoc { get; set; }\n\n    public string? LoserName { get; set; }\n\n    public int? LoserRank { get; set; }\n\n    public int? LoserRankPoints { get; set; }\n\n    public int? LoserSeed { get; set; }\n\n    public int? MatchNum { get; set; }\n\n    public int? Minutes { get; set; }\n\n    public string? Round { get; set; }\n\n    public string? Score { get; set; }\n\n    public string? Surface { get; set; }\n\n    public int? TourneyDate { get; set; }\n\n    public string? TourneyId { get; set; }\n\n    public string? TourneyLevel { get; set; }\n\n    public string? TourneyName { get; set; }\n\n    public double? WinnerAge { get; set; }\n\n    public string? WinnerEntry { get; set; }\n\n    public string? WinnerHand { get; set; }\n\n    public int? WinnerHt { get; set; }\n\n    public int? WinnerId { get; set; }\n\n    public string? WinnerIoc { get; set; }\n\n    public string? WinnerName { get; set; }\n\n    public int? WinnerRank { get; set; }\n\n    public int? WinnerRankPoints { get; set; }\n\n    public int? WinnerSeed { get; set; }\n\n    public int? Year { get; set; }\n\n    public virtual Player? Loser { get; set; }\n\n    public virtual Player? Winner { get; set; }\n}",
      "public partial class Player\n{\n    public int PlayerId { get; set; }\n\n    public string? FirstName { get; set; }\n\n    public string? LastName { get; set; }\n\n    public string? Hand { get; set; }\n\n    public string? BirthDate { get; set; }\n\n    public string? CountryCode { get; set; }\n}",
      "public partial class Ranking\n{\n    public int? RankingDate { get; set; }\n\n    public int? Ranking1 { get; set; }\n\n    public int? PlayerId { get; set; }\n\n    public int? RankingPoints { get; set; }\n\n    public int? Tours { get; set; }\n\n    public virtual Player? Player { get; set; }\n}"
    ]
  },
  "icfp_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.icfp_1;\n\npublic partial class Icfp1Context : DbContext\n{\n    public Icfp1Context()\n    {\n    }\n\n    public Icfp1Context(DbContextOptions<Icfp1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Author> Authors { get; set; }\n\n    public virtual DbSet<Authorship> Authorships { get; set; }\n\n    public virtual DbSet<Inst> Insts { get; set; }\n\n    public virtual DbSet<Paper> Papers { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/icfp_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Author>(entity =>\n        {\n            entity.HasKey(e => e.AuthId);\n\n            entity.Property(e => e.AuthId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"authID\");\n            entity.Property(e => e.Fname).HasColumnName(\"fname\");\n            entity.Property(e => e.Lname).HasColumnName(\"lname\");\n        });\n\n        modelBuilder.Entity<Authorship>(entity =>\n        {\n            entity.HasKey(e => new { e.AuthId, e.InstId, e.PaperId });\n\n            entity.ToTable(\"Authorship\");\n\n            entity.Property(e => e.AuthId).HasColumnName(\"authID\");\n            entity.Property(e => e.InstId).HasColumnName(\"instID\");\n            entity.Property(e => e.PaperId).HasColumnName(\"paperID\");\n            entity.Property(e => e.AuthOrder).HasColumnName(\"authOrder\");\n\n            entity.HasOne(d => d.Auth).WithMany(p => p.Authorships)\n                .HasForeignKey(d => d.AuthId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Inst).WithMany(p => p.Authorships)\n                .HasForeignKey(d => d.InstId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Paper).WithMany(p => p.Authorships)\n                .HasForeignKey(d => d.PaperId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Inst>(entity =>\n        {\n            entity.ToTable(\"Inst\");\n\n            entity.Property(e => e.InstId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"instID\");\n            entity.Property(e => e.Country).HasColumnName(\"country\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n        });\n\n        modelBuilder.Entity<Paper>(entity =>\n        {\n            entity.Property(e => e.PaperId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"paperID\");\n            entity.Property(e => e.Title).HasColumnName(\"title\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Author\n{\n    public int AuthId { get; set; }\n\n    public string? Lname { get; set; }\n\n    public string? Fname { get; set; }\n\n    public virtual ICollection<Authorship> Authorships { get; set; } = new List<Authorship>();\n}",
      "public partial class Authorship\n{\n    public int AuthId { get; set; }\n\n    public int InstId { get; set; }\n\n    public int PaperId { get; set; }\n\n    public int? AuthOrder { get; set; }\n\n    public virtual Author Auth { get; set; } = null!;\n\n    public virtual Inst Inst { get; set; } = null!;\n\n    public virtual Paper Paper { get; set; } = null!;\n}",
      "public partial class Inst\n{\n    public int InstId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Country { get; set; }\n\n    public virtual ICollection<Authorship> Authorships { get; set; } = new List<Authorship>();\n}",
      "public partial class Paper\n{\n    public int PaperId { get; set; }\n\n    public string? Title { get; set; }\n\n    public virtual ICollection<Authorship> Authorships { get; set; } = new List<Authorship>();\n}"
    ]
  },
  "roller_coaster": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.roller_coaster;\n\npublic partial class RollerCoasterContext : DbContext\n{\n    public RollerCoasterContext()\n    {\n    }\n\n    public RollerCoasterContext(DbContextOptions<RollerCoasterContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Country> Countries { get; set; }\n\n    public virtual DbSet<RollerCoaster> RollerCoasters { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/roller_coaster.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Country>(entity =>\n        {\n            entity.ToTable(\"country\");\n\n            entity.Property(e => e.CountryId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Country_ID\");\n            entity.Property(e => e.Area).HasColumnType(\"INT\");\n            entity.Property(e => e.Population).HasColumnType(\"INT\");\n        });\n\n        modelBuilder.Entity<RollerCoaster>(entity =>\n        {\n            entity.ToTable(\"roller_coaster\");\n\n            entity.Property(e => e.RollerCoasterId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Roller_Coaster_ID\");\n            entity.Property(e => e.CountryId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Country_ID\");\n\n            entity.HasOne(d => d.Country).WithMany(p => p.RollerCoasters).HasForeignKey(d => d.CountryId);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Country\n{\n    public int CountryId { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? Population { get; set; }\n\n    public int? Area { get; set; }\n\n    public string? Languages { get; set; }\n\n    public virtual ICollection<RollerCoaster> RollerCoasters { get; set; } = new List<RollerCoaster>();\n}",
      "public partial class RollerCoaster\n{\n    public int RollerCoasterId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Park { get; set; }\n\n    public int? CountryId { get; set; }\n\n    public double? Length { get; set; }\n\n    public double? Height { get; set; }\n\n    public string? Speed { get; set; }\n\n    public string? Opened { get; set; }\n\n    public string? Status { get; set; }\n\n    public virtual Country? Country { get; set; }\n}"
    ]
  },
  "election_representative": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.election_representative;\n\npublic partial class ElectionRepresentativeContext : DbContext\n{\n    public ElectionRepresentativeContext()\n    {\n    }\n\n    public ElectionRepresentativeContext(DbContextOptions<ElectionRepresentativeContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Election> Elections { get; set; }\n\n    public virtual DbSet<Representative> Representatives { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/election_representative.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Election>(entity =>\n        {\n            entity.ToTable(\"election\");\n\n            entity.Property(e => e.ElectionId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Election_ID\");\n            entity.Property(e => e.RepresentativeId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Representative_ID\");\n            entity.Property(e => e.VotePercent).HasColumnName(\"Vote_Percent\");\n\n            entity.HasOne(d => d.Representative).WithMany(p => p.Elections).HasForeignKey(d => d.RepresentativeId);\n        });\n\n        modelBuilder.Entity<Representative>(entity =>\n        {\n            entity.ToTable(\"representative\");\n\n            entity.Property(e => e.RepresentativeId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Representative_ID\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Election\n{\n    public int ElectionId { get; set; }\n\n    public int? RepresentativeId { get; set; }\n\n    public string? Date { get; set; }\n\n    public double? Votes { get; set; }\n\n    public double? VotePercent { get; set; }\n\n    public double? Seats { get; set; }\n\n    public double? Place { get; set; }\n\n    public virtual Representative? Representative { get; set; }\n}",
      "public partial class Representative\n{\n    public int RepresentativeId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? State { get; set; }\n\n    public string? Party { get; set; }\n\n    public string? Lifespan { get; set; }\n\n    public virtual ICollection<Election> Elections { get; set; } = new List<Election>();\n}"
    ]
  },
  "gas_company": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.gas_company;\n\npublic partial class GasCompanyContext : DbContext\n{\n    public GasCompanyContext()\n    {\n    }\n\n    public GasCompanyContext(DbContextOptions<GasCompanyContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Company> Companies { get; set; }\n\n    public virtual DbSet<GasStation> GasStations { get; set; }\n\n    public virtual DbSet<StationCompany> StationCompanies { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/gas_company.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Company>(entity =>\n        {\n            entity.ToTable(\"company\");\n\n            entity.Property(e => e.CompanyId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Company_ID\");\n            entity.Property(e => e.AssetsBillion).HasColumnName(\"Assets_billion\");\n            entity.Property(e => e.Company1).HasColumnName(\"Company\");\n            entity.Property(e => e.MainIndustry).HasColumnName(\"Main_Industry\");\n            entity.Property(e => e.MarketValue).HasColumnName(\"Market_Value\");\n            entity.Property(e => e.ProfitsBillion).HasColumnName(\"Profits_billion\");\n            entity.Property(e => e.Rank).HasColumnType(\"INT\");\n            entity.Property(e => e.SalesBillion).HasColumnName(\"Sales_billion\");\n        });\n\n        modelBuilder.Entity<GasStation>(entity =>\n        {\n            entity.HasKey(e => e.StationId);\n\n            entity.ToTable(\"gas_station\");\n\n            entity.Property(e => e.StationId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Station_ID\");\n            entity.Property(e => e.ManagerName).HasColumnName(\"Manager_Name\");\n            entity.Property(e => e.OpenYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Open_Year\");\n            entity.Property(e => e.RepresentativeName).HasColumnName(\"Representative_Name\");\n            entity.Property(e => e.ViceManagerName).HasColumnName(\"Vice_Manager_Name\");\n        });\n\n        modelBuilder.Entity<StationCompany>(entity =>\n        {\n            entity.HasKey(e => new { e.StationId, e.CompanyId });\n\n            entity.ToTable(\"station_company\");\n\n            entity.Property(e => e.StationId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Station_ID\");\n            entity.Property(e => e.CompanyId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Company_ID\");\n            entity.Property(e => e.RankOfTheYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Rank_of_the_Year\");\n\n            entity.HasOne(d => d.Company).WithMany(p => p.StationCompanies)\n                .HasForeignKey(d => d.CompanyId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Station).WithMany(p => p.StationCompanies)\n                .HasForeignKey(d => d.StationId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Company\n{\n    public int CompanyId { get; set; }\n\n    public int? Rank { get; set; }\n\n    public string? Company1 { get; set; }\n\n    public string? Headquarters { get; set; }\n\n    public string? MainIndustry { get; set; }\n\n    public double? SalesBillion { get; set; }\n\n    public double? ProfitsBillion { get; set; }\n\n    public double? AssetsBillion { get; set; }\n\n    public double? MarketValue { get; set; }\n\n    public virtual ICollection<StationCompany> StationCompanies { get; set; } = new List<StationCompany>();\n}",
      "public partial class GasStation\n{\n    public int StationId { get; set; }\n\n    public int? OpenYear { get; set; }\n\n    public string? Location { get; set; }\n\n    public string? ManagerName { get; set; }\n\n    public string? ViceManagerName { get; set; }\n\n    public string? RepresentativeName { get; set; }\n\n    public virtual ICollection<StationCompany> StationCompanies { get; set; } = new List<StationCompany>();\n}",
      "public partial class StationCompany\n{\n    public int StationId { get; set; }\n\n    public int CompanyId { get; set; }\n\n    public int? RankOfTheYear { get; set; }\n\n    public virtual Company Company { get; set; } = null!;\n\n    public virtual GasStation Station { get; set; } = null!;\n}"
    ]
  },
  "department_store": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.department_store;\n\npublic partial class DepartmentStoreContext : DbContext\n{\n    public DepartmentStoreContext()\n    {\n    }\n\n    public DepartmentStoreContext(DbContextOptions<DepartmentStoreContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Address> Addresses { get; set; }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<CustomerAddress> CustomerAddresses { get; set; }\n\n    public virtual DbSet<CustomerOrder> CustomerOrders { get; set; }\n\n    public virtual DbSet<Department> Departments { get; set; }\n\n    public virtual DbSet<DepartmentStore> DepartmentStores { get; set; }\n\n    public virtual DbSet<DepartmentStoreChain> DepartmentStoreChains { get; set; }\n\n    public virtual DbSet<OrderItem> OrderItems { get; set; }\n\n    public virtual DbSet<Product> Products { get; set; }\n\n    public virtual DbSet<ProductSupplier> ProductSuppliers { get; set; }\n\n    public virtual DbSet<Staff> Staff { get; set; }\n\n    public virtual DbSet<StaffDepartmentAssignment> StaffDepartmentAssignments { get; set; }\n\n    public virtual DbSet<Supplier> Suppliers { get; set; }\n\n    public virtual DbSet<SupplierAddress> SupplierAddresses { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/department_store.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Address>(entity =>\n        {\n            entity.Property(e => e.AddressId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"address_id\");\n            entity.Property(e => e.AddressDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"address_details\");\n        });\n\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.Property(e => e.CustomerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"customer_id\");\n            entity.Property(e => e.CustomerAddress)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"customer_address\");\n            entity.Property(e => e.CustomerCode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"customer_code\");\n            entity.Property(e => e.CustomerEmail)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"customer_email\");\n            entity.Property(e => e.CustomerName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"customer_name\");\n            entity.Property(e => e.CustomerPhone)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"customer_phone\");\n            entity.Property(e => e.PaymentMethodCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"payment_method_code\");\n        });\n\n        modelBuilder.Entity<CustomerAddress>(entity =>\n        {\n            entity.HasKey(e => new { e.CustomerId, e.AddressId });\n\n            entity.ToTable(\"Customer_Addresses\");\n\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.AddressId).HasColumnName(\"address_id\");\n            entity.Property(e => e.DateFrom)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_from\");\n            entity.Property(e => e.DateTo)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_to\");\n\n            entity.HasOne(d => d.Address).WithMany(p => p.CustomerAddresses)\n                .HasForeignKey(d => d.AddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerAddresses)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<CustomerOrder>(entity =>\n        {\n            entity.HasKey(e => e.OrderId);\n\n            entity.ToTable(\"Customer_Orders\");\n\n            entity.Property(e => e.OrderId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"order_id\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.OrderDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"order_date\");\n            entity.Property(e => e.OrderStatusCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"order_status_code\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerOrders)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Department>(entity =>\n        {\n            entity.Property(e => e.DepartmentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"department_id\");\n            entity.Property(e => e.DepartmentName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"department_name\");\n            entity.Property(e => e.DeptStoreId).HasColumnName(\"dept_store_id\");\n\n            entity.HasOne(d => d.DeptStore).WithMany(p => p.Departments)\n                .HasForeignKey(d => d.DeptStoreId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<DepartmentStore>(entity =>\n        {\n            entity.HasKey(e => e.DeptStoreId);\n\n            entity.ToTable(\"Department_Stores\");\n\n            entity.Property(e => e.DeptStoreId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"dept_store_id\");\n            entity.Property(e => e.DeptStoreChainId).HasColumnName(\"dept_store_chain_id\");\n            entity.Property(e => e.StoreAddress)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"store_address\");\n            entity.Property(e => e.StoreEmail)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"store_email\");\n            entity.Property(e => e.StoreName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"store_name\");\n            entity.Property(e => e.StorePhone)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"store_phone\");\n\n            entity.HasOne(d => d.DeptStoreChain).WithMany(p => p.DepartmentStores).HasForeignKey(d => d.DeptStoreChainId);\n        });\n\n        modelBuilder.Entity<DepartmentStoreChain>(entity =>\n        {\n            entity.HasKey(e => e.DeptStoreChainId);\n\n            entity.ToTable(\"Department_Store_Chain\");\n\n            entity.Property(e => e.DeptStoreChainId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"dept_store_chain_id\");\n            entity.Property(e => e.DeptStoreChainName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"dept_store_chain_name\");\n        });\n\n        modelBuilder.Entity<OrderItem>(entity =>\n        {\n            entity.ToTable(\"Order_Items\");\n\n            entity.Property(e => e.OrderItemId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"order_item_id\");\n            entity.Property(e => e.OrderId).HasColumnName(\"order_id\");\n            entity.Property(e => e.ProductId).HasColumnName(\"product_id\");\n\n            entity.HasOne(d => d.Order).WithMany(p => p.OrderItems)\n                .HasForeignKey(d => d.OrderId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Product).WithMany(p => p.OrderItems)\n                .HasForeignKey(d => d.ProductId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Product>(entity =>\n        {\n            entity.Property(e => e.ProductId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"product_id\");\n            entity.Property(e => e.ProductName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"product_name\");\n            entity.Property(e => e.ProductPrice)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"product_price\");\n            entity.Property(e => e.ProductTypeCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"product_type_code\");\n        });\n\n        modelBuilder.Entity<ProductSupplier>(entity =>\n        {\n            entity.HasKey(e => new { e.ProductId, e.SupplierId });\n\n            entity.ToTable(\"Product_Suppliers\");\n\n            entity.Property(e => e.ProductId).HasColumnName(\"product_id\");\n            entity.Property(e => e.SupplierId).HasColumnName(\"supplier_id\");\n            entity.Property(e => e.DateSuppliedFrom)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_supplied_from\");\n            entity.Property(e => e.DateSuppliedTo)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_supplied_to\");\n            entity.Property(e => e.TotalAmountPurchased)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"total_amount_purchased\");\n            entity.Property(e => e.TotalValuePurchased)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"total_value_purchased\");\n\n            entity.HasOne(d => d.Product).WithMany(p => p.ProductSuppliers)\n                .HasForeignKey(d => d.ProductId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Supplier).WithMany(p => p.ProductSuppliers)\n                .HasForeignKey(d => d.SupplierId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Staff>(entity =>\n        {\n            entity.Property(e => e.StaffId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"staff_id\");\n            entity.Property(e => e.StaffGender)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"staff_gender\");\n            entity.Property(e => e.StaffName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"staff_name\");\n        });\n\n        modelBuilder.Entity<StaffDepartmentAssignment>(entity =>\n        {\n            entity.HasKey(e => new { e.StaffId, e.DepartmentId });\n\n            entity.ToTable(\"Staff_Department_Assignments\");\n\n            entity.Property(e => e.StaffId).HasColumnName(\"staff_id\");\n            entity.Property(e => e.DepartmentId).HasColumnName(\"department_id\");\n            entity.Property(e => e.DateAssignedFrom)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_assigned_from\");\n            entity.Property(e => e.DateAssignedTo)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_assigned_to\");\n            entity.Property(e => e.JobTitleCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"job_title_code\");\n\n            entity.HasOne(d => d.Department).WithMany(p => p.StaffDepartmentAssignments)\n                .HasForeignKey(d => d.DepartmentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Staff).WithMany(p => p.StaffDepartmentAssignments)\n                .HasForeignKey(d => d.StaffId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Supplier>(entity =>\n        {\n            entity.Property(e => e.SupplierId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"supplier_id\");\n            entity.Property(e => e.SupplierName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"supplier_name\");\n            entity.Property(e => e.SupplierPhone)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"supplier_phone\");\n        });\n\n        modelBuilder.Entity<SupplierAddress>(entity =>\n        {\n            entity.HasKey(e => new { e.SupplierId, e.AddressId });\n\n            entity.ToTable(\"Supplier_Addresses\");\n\n            entity.Property(e => e.SupplierId).HasColumnName(\"supplier_id\");\n            entity.Property(e => e.AddressId).HasColumnName(\"address_id\");\n            entity.Property(e => e.DateFrom)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_from\");\n            entity.Property(e => e.DateTo)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_to\");\n\n            entity.HasOne(d => d.Address).WithMany(p => p.SupplierAddresses)\n                .HasForeignKey(d => d.AddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Supplier).WithMany(p => p.SupplierAddresses)\n                .HasForeignKey(d => d.SupplierId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Address\n{\n    public int AddressId { get; set; }\n\n    public string? AddressDetails { get; set; }\n\n    public virtual ICollection<CustomerAddress> CustomerAddresses { get; set; } = new List<CustomerAddress>();\n\n    public virtual ICollection<SupplierAddress> SupplierAddresses { get; set; } = new List<SupplierAddress>();\n}",
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public string PaymentMethodCode { get; set; } = null!;\n\n    public string? CustomerCode { get; set; }\n\n    public string? CustomerName { get; set; }\n\n    public string? CustomerAddress { get; set; }\n\n    public string? CustomerPhone { get; set; }\n\n    public string? CustomerEmail { get; set; }\n\n    public virtual ICollection<CustomerAddress> CustomerAddresses { get; set; } = new List<CustomerAddress>();\n\n    public virtual ICollection<CustomerOrder> CustomerOrders { get; set; } = new List<CustomerOrder>();\n}",
      "public partial class CustomerAddress\n{\n    public int CustomerId { get; set; }\n\n    public int AddressId { get; set; }\n\n    public DateTime DateFrom { get; set; }\n\n    public DateTime? DateTo { get; set; }\n\n    public virtual Address Address { get; set; } = null!;\n\n    public virtual Customer Customer { get; set; } = null!;\n}",
      "public partial class CustomerOrder\n{\n    public int OrderId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public string OrderStatusCode { get; set; } = null!;\n\n    public DateTime OrderDate { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n\n    public virtual ICollection<OrderItem> OrderItems { get; set; } = new List<OrderItem>();\n}",
      "public partial class Department\n{\n    public int DepartmentId { get; set; }\n\n    public int DeptStoreId { get; set; }\n\n    public string? DepartmentName { get; set; }\n\n    public virtual DepartmentStore DeptStore { get; set; } = null!;\n\n    public virtual ICollection<StaffDepartmentAssignment> StaffDepartmentAssignments { get; set; } = new List<StaffDepartmentAssignment>();\n}",
      "public partial class DepartmentStore\n{\n    public int DeptStoreId { get; set; }\n\n    public int? DeptStoreChainId { get; set; }\n\n    public string? StoreName { get; set; }\n\n    public string? StoreAddress { get; set; }\n\n    public string? StorePhone { get; set; }\n\n    public string? StoreEmail { get; set; }\n\n    public virtual ICollection<Department> Departments { get; set; } = new List<Department>();\n\n    public virtual DepartmentStoreChain? DeptStoreChain { get; set; }\n}",
      "public partial class DepartmentStoreChain\n{\n    public int DeptStoreChainId { get; set; }\n\n    public string? DeptStoreChainName { get; set; }\n\n    public virtual ICollection<DepartmentStore> DepartmentStores { get; set; } = new List<DepartmentStore>();\n}",
      "public partial class OrderItem\n{\n    public int OrderItemId { get; set; }\n\n    public int OrderId { get; set; }\n\n    public int ProductId { get; set; }\n\n    public virtual CustomerOrder Order { get; set; } = null!;\n\n    public virtual Product Product { get; set; } = null!;\n}",
      "public partial class Product\n{\n    public int ProductId { get; set; }\n\n    public string ProductTypeCode { get; set; } = null!;\n\n    public string? ProductName { get; set; }\n\n    public decimal? ProductPrice { get; set; }\n\n    public virtual ICollection<OrderItem> OrderItems { get; set; } = new List<OrderItem>();\n\n    public virtual ICollection<ProductSupplier> ProductSuppliers { get; set; } = new List<ProductSupplier>();\n}",
      "public partial class ProductSupplier\n{\n    public int ProductId { get; set; }\n\n    public int SupplierId { get; set; }\n\n    public DateTime DateSuppliedFrom { get; set; }\n\n    public DateTime? DateSuppliedTo { get; set; }\n\n    public decimal? TotalAmountPurchased { get; set; }\n\n    public decimal? TotalValuePurchased { get; set; }\n\n    public virtual Product Product { get; set; } = null!;\n\n    public virtual Supplier Supplier { get; set; } = null!;\n}",
      "public partial class Staff\n{\n    public int StaffId { get; set; }\n\n    public string? StaffGender { get; set; }\n\n    public string? StaffName { get; set; }\n\n    public virtual ICollection<StaffDepartmentAssignment> StaffDepartmentAssignments { get; set; } = new List<StaffDepartmentAssignment>();\n}",
      "public partial class StaffDepartmentAssignment\n{\n    public int StaffId { get; set; }\n\n    public int DepartmentId { get; set; }\n\n    public DateTime DateAssignedFrom { get; set; }\n\n    public string JobTitleCode { get; set; } = null!;\n\n    public DateTime? DateAssignedTo { get; set; }\n\n    public virtual Department Department { get; set; } = null!;\n\n    public virtual Staff Staff { get; set; } = null!;\n}",
      "public partial class Supplier\n{\n    public int SupplierId { get; set; }\n\n    public string? SupplierName { get; set; }\n\n    public string? SupplierPhone { get; set; }\n\n    public virtual ICollection<ProductSupplier> ProductSuppliers { get; set; } = new List<ProductSupplier>();\n\n    public virtual ICollection<SupplierAddress> SupplierAddresses { get; set; } = new List<SupplierAddress>();\n}",
      "public partial class SupplierAddress\n{\n    public int SupplierId { get; set; }\n\n    public int AddressId { get; set; }\n\n    public DateTime DateFrom { get; set; }\n\n    public DateTime? DateTo { get; set; }\n\n    public virtual Address Address { get; set; } = null!;\n\n    public virtual Supplier Supplier { get; set; } = null!;\n}"
    ]
  },
  "climbing": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.climbing;\n\npublic partial class ClimbingContext : DbContext\n{\n    public ClimbingContext()\n    {\n    }\n\n    public ClimbingContext(DbContextOptions<ClimbingContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Climber> Climbers { get; set; }\n\n    public virtual DbSet<Mountain> Mountains { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/climbing.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Climber>(entity =>\n        {\n            entity.ToTable(\"climber\");\n\n            entity.Property(e => e.ClimberId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Climber_ID\");\n            entity.Property(e => e.MountainId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Mountain_ID\");\n\n            entity.HasOne(d => d.Mountain).WithMany(p => p.Climbers).HasForeignKey(d => d.MountainId);\n        });\n\n        modelBuilder.Entity<Mountain>(entity =>\n        {\n            entity.ToTable(\"mountain\");\n\n            entity.Property(e => e.MountainId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Mountain_ID\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Climber\n{\n    public int ClimberId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Country { get; set; }\n\n    public string? Time { get; set; }\n\n    public double? Points { get; set; }\n\n    public int? MountainId { get; set; }\n\n    public virtual Mountain? Mountain { get; set; }\n}",
      "public partial class Mountain\n{\n    public int MountainId { get; set; }\n\n    public string? Name { get; set; }\n\n    public double? Height { get; set; }\n\n    public double? Prominence { get; set; }\n\n    public string? Range { get; set; }\n\n    public string? Country { get; set; }\n\n    public virtual ICollection<Climber> Climbers { get; set; } = new List<Climber>();\n}"
    ]
  },
  "customers_and_products_contacts": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.customers_and_products_contacts;\n\npublic partial class CustomersAndProductsContactsContext : DbContext\n{\n    public CustomersAndProductsContactsContext()\n    {\n    }\n\n    public CustomersAndProductsContactsContext(DbContextOptions<CustomersAndProductsContactsContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Address> Addresses { get; set; }\n\n    public virtual DbSet<Contact> Contacts { get; set; }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<CustomerAddressHistory> CustomerAddressHistories { get; set; }\n\n    public virtual DbSet<CustomerOrder> CustomerOrders { get; set; }\n\n    public virtual DbSet<OrderItem> OrderItems { get; set; }\n\n    public virtual DbSet<Product> Products { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/customers_and_products_contacts.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Address>(entity =>\n        {\n            entity.Property(e => e.AddressId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"address_id\");\n            entity.Property(e => e.City)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"city\");\n            entity.Property(e => e.Country)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"country\");\n            entity.Property(e => e.Line1NumberBuilding)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"line_1_number_building\");\n            entity.Property(e => e.StateProvinceCounty)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"state_province_county\");\n            entity.Property(e => e.ZipPostcode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"zip_postcode\");\n        });\n\n        modelBuilder.Entity<Contact>(entity =>\n        {\n            entity.Property(e => e.ContactId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"contact_id\");\n            entity.Property(e => e.ContactPhone)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"contact_phone\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.FirstName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"first_name\");\n            entity.Property(e => e.Gender)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"gender\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"last_name\");\n        });\n\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.Property(e => e.CustomerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"customer_id\");\n            entity.Property(e => e.CustomerAddress)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"customer_address\");\n            entity.Property(e => e.CustomerEmail)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"customer_email\");\n            entity.Property(e => e.CustomerName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"customer_name\");\n            entity.Property(e => e.CustomerNumber)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"customer_number\");\n            entity.Property(e => e.CustomerPhone)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"customer_phone\");\n            entity.Property(e => e.PaymentMethodCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"payment_method_code\");\n        });\n\n        modelBuilder.Entity<CustomerAddressHistory>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Customer_Address_History\");\n\n            entity.Property(e => e.AddressId).HasColumnName(\"address_id\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.DateFrom)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_from\");\n            entity.Property(e => e.DateTo)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_to\");\n\n            entity.HasOne(d => d.Address).WithMany()\n                .HasForeignKey(d => d.AddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Customer).WithMany()\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<CustomerOrder>(entity =>\n        {\n            entity.HasKey(e => e.OrderId);\n\n            entity.ToTable(\"Customer_Orders\");\n\n            entity.Property(e => e.OrderId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"order_id\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.OrderDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"order_date\");\n            entity.Property(e => e.OrderStatusCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"order_status_code\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerOrders)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<OrderItem>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Order_Items\");\n\n            entity.Property(e => e.OrderId).HasColumnName(\"order_id\");\n            entity.Property(e => e.OrderItemId).HasColumnName(\"order_item_id\");\n            entity.Property(e => e.OrderQuantity)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"order_quantity\");\n            entity.Property(e => e.ProductId).HasColumnName(\"product_id\");\n\n            entity.HasOne(d => d.Order).WithMany()\n                .HasForeignKey(d => d.OrderId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Product).WithMany()\n                .HasForeignKey(d => d.ProductId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Product>(entity =>\n        {\n            entity.Property(e => e.ProductId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"product_id\");\n            entity.Property(e => e.ProductName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"product_name\");\n            entity.Property(e => e.ProductPrice)\n                .HasColumnType(\"DOUBLE\")\n                .HasColumnName(\"product_price\");\n            entity.Property(e => e.ProductTypeCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"product_type_code\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Address\n{\n    public int AddressId { get; set; }\n\n    public string? Line1NumberBuilding { get; set; }\n\n    public string? City { get; set; }\n\n    public string? ZipPostcode { get; set; }\n\n    public string? StateProvinceCounty { get; set; }\n\n    public string? Country { get; set; }\n}",
      "public partial class Contact\n{\n    public int ContactId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public string? Gender { get; set; }\n\n    public string? FirstName { get; set; }\n\n    public string? LastName { get; set; }\n\n    public string? ContactPhone { get; set; }\n}",
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public string? PaymentMethodCode { get; set; }\n\n    public string? CustomerNumber { get; set; }\n\n    public string? CustomerName { get; set; }\n\n    public string? CustomerAddress { get; set; }\n\n    public string? CustomerPhone { get; set; }\n\n    public string? CustomerEmail { get; set; }\n\n    public virtual ICollection<CustomerOrder> CustomerOrders { get; set; } = new List<CustomerOrder>();\n}",
      "public partial class CustomerAddressHistory\n{\n    public int CustomerId { get; set; }\n\n    public int AddressId { get; set; }\n\n    public DateTime DateFrom { get; set; }\n\n    public DateTime? DateTo { get; set; }\n\n    public virtual Address Address { get; set; } = null!;\n\n    public virtual Customer Customer { get; set; } = null!;\n}",
      "public partial class CustomerOrder\n{\n    public int OrderId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public DateTime OrderDate { get; set; }\n\n    public string? OrderStatusCode { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n}",
      "public partial class OrderItem\n{\n    public int OrderItemId { get; set; }\n\n    public int OrderId { get; set; }\n\n    public int ProductId { get; set; }\n\n    public string? OrderQuantity { get; set; }\n\n    public virtual CustomerOrder Order { get; set; } = null!;\n\n    public virtual Product Product { get; set; } = null!;\n}",
      "public partial class Product\n{\n    public int ProductId { get; set; }\n\n    public string? ProductTypeCode { get; set; }\n\n    public string? ProductName { get; set; }\n\n    public double? ProductPrice { get; set; }\n}"
    ]
  },
  "csu_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.csu_1;\n\npublic partial class Csu1Context : DbContext\n{\n    public Csu1Context()\n    {\n    }\n\n    public Csu1Context(DbContextOptions<Csu1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Campus> Campuses { get; set; }\n\n    public virtual DbSet<CsuFee> CsuFees { get; set; }\n\n    public virtual DbSet<Degree> Degrees { get; set; }\n\n    public virtual DbSet<DisciplineEnrollment> DisciplineEnrollments { get; set; }\n\n    public virtual DbSet<Enrollment> Enrollments { get; set; }\n\n    public virtual DbSet<Faculty> Faculties { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/csu_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Campus>(entity =>\n        {\n            entity.Property(e => e.Id).ValueGeneratedNever();\n            entity.Property(e => e.Campus1).HasColumnName(\"Campus\");\n        });\n\n        modelBuilder.Entity<CsuFee>(entity =>\n        {\n            entity.HasKey(e => e.Campus);\n\n            entity.ToTable(\"csu_fees\");\n\n            entity.Property(e => e.Campus).ValueGeneratedNever();\n\n            entity.HasOne(d => d.CampusNavigation).WithOne(p => p.CsuFee)\n                .HasForeignKey<CsuFee>(d => d.Campus)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Degree>(entity =>\n        {\n            entity.HasKey(e => new { e.Year, e.Campus });\n\n            entity.ToTable(\"degrees\");\n\n            entity.HasOne(d => d.CampusNavigation).WithMany(p => p.Degrees)\n                .HasForeignKey(d => d.Campus)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<DisciplineEnrollment>(entity =>\n        {\n            entity.HasKey(e => new { e.Campus, e.Discipline });\n\n            entity.ToTable(\"discipline_enrollments\");\n\n            entity.HasOne(d => d.CampusNavigation).WithMany(p => p.DisciplineEnrollments)\n                .HasForeignKey(d => d.Campus)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Enrollment>(entity =>\n        {\n            entity.HasKey(e => new { e.Campus, e.Year });\n\n            entity.ToTable(\"enrollments\");\n\n            entity.Property(e => e.FteAy).HasColumnName(\"FTE_AY\");\n            entity.Property(e => e.TotalEnrollmentAy).HasColumnName(\"TotalEnrollment_AY\");\n\n            entity.HasOne(d => d.CampusNavigation).WithMany(p => p.Enrollments)\n                .HasForeignKey(d => d.Campus)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Faculty>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"faculty\");\n\n            entity.Property(e => e.Faculty1).HasColumnName(\"Faculty\");\n\n            entity.HasOne(d => d.CampusNavigation).WithMany().HasForeignKey(d => d.Campus);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Campus\n{\n    public int Id { get; set; }\n\n    public string? Campus1 { get; set; }\n\n    public string? Location { get; set; }\n\n    public string? County { get; set; }\n\n    public int? Year { get; set; }\n\n    public virtual CsuFee? CsuFee { get; set; }\n\n    public virtual ICollection<Degree> Degrees { get; set; } = new List<Degree>();\n\n    public virtual ICollection<DisciplineEnrollment> DisciplineEnrollments { get; set; } = new List<DisciplineEnrollment>();\n\n    public virtual ICollection<Enrollment> Enrollments { get; set; } = new List<Enrollment>();\n}",
      "public partial class CsuFee\n{\n    public int Campus { get; set; }\n\n    public int? Year { get; set; }\n\n    public int? CampusFee { get; set; }\n\n    public virtual Campus CampusNavigation { get; set; } = null!;\n}",
      "public partial class Degree\n{\n    public int Year { get; set; }\n\n    public int Campus { get; set; }\n\n    public int? Degrees { get; set; }\n\n    public virtual Campus CampusNavigation { get; set; } = null!;\n}",
      "public partial class DisciplineEnrollment\n{\n    public int Campus { get; set; }\n\n    public int Discipline { get; set; }\n\n    public int? Year { get; set; }\n\n    public int? Undergraduate { get; set; }\n\n    public int? Graduate { get; set; }\n\n    public virtual Campus CampusNavigation { get; set; } = null!;\n}",
      "public partial class Enrollment\n{\n    public int Campus { get; set; }\n\n    public int Year { get; set; }\n\n    public int? TotalEnrollmentAy { get; set; }\n\n    public int? FteAy { get; set; }\n\n    public virtual Campus CampusNavigation { get; set; } = null!;\n}",
      "public partial class Faculty\n{\n    public int? Campus { get; set; }\n\n    public int? Year { get; set; }\n\n    public double? Faculty1 { get; set; }\n\n    public virtual Campus? CampusNavigation { get; set; }\n}"
    ]
  },
  "school_bus": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.school_bus;\n\npublic partial class SchoolBusContext : DbContext\n{\n    public SchoolBusContext()\n    {\n    }\n\n    public SchoolBusContext(DbContextOptions<SchoolBusContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Driver> Drivers { get; set; }\n\n    public virtual DbSet<School> Schools { get; set; }\n\n    public virtual DbSet<SchoolBu> SchoolBus { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/school_bus.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Driver>(entity =>\n        {\n            entity.ToTable(\"driver\");\n\n            entity.Property(e => e.DriverId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Driver_ID\");\n            entity.Property(e => e.Age).HasColumnType(\"INT\");\n            entity.Property(e => e.HomeCity).HasColumnName(\"Home_city\");\n        });\n\n        modelBuilder.Entity<School>(entity =>\n        {\n            entity.ToTable(\"school\");\n\n            entity.Property(e => e.SchoolId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"School_ID\");\n            entity.Property(e => e.School1).HasColumnName(\"School\");\n        });\n\n        modelBuilder.Entity<SchoolBu>(entity =>\n        {\n            entity.HasKey(e => new { e.SchoolId, e.DriverId });\n\n            entity.ToTable(\"school_bus\");\n\n            entity.Property(e => e.SchoolId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"School_ID\");\n            entity.Property(e => e.DriverId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Driver_ID\");\n            entity.Property(e => e.IfFullTime)\n                .HasColumnType(\"bool\")\n                .HasColumnName(\"If_full_time\");\n            entity.Property(e => e.YearsWorking)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Years_Working\");\n\n            entity.HasOne(d => d.Driver).WithMany(p => p.SchoolBus)\n                .HasForeignKey(d => d.DriverId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.School).WithMany(p => p.SchoolBus)\n                .HasForeignKey(d => d.SchoolId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Driver\n{\n    public int DriverId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Party { get; set; }\n\n    public string? HomeCity { get; set; }\n\n    public int? Age { get; set; }\n\n    public virtual ICollection<SchoolBu> SchoolBus { get; set; } = new List<SchoolBu>();\n}",
      "public partial class School\n{\n    public int SchoolId { get; set; }\n\n    public string? Grade { get; set; }\n\n    public string? School1 { get; set; }\n\n    public string? Location { get; set; }\n\n    public string? Type { get; set; }\n\n    public virtual ICollection<SchoolBu> SchoolBus { get; set; } = new List<SchoolBu>();\n}",
      "public partial class SchoolBu\n{\n    public int SchoolId { get; set; }\n\n    public int DriverId { get; set; }\n\n    public int? YearsWorking { get; set; }\n\n    public string? IfFullTime { get; set; }\n\n    public virtual Driver Driver { get; set; } = null!;\n\n    public virtual School School { get; set; } = null!;\n}"
    ]
  },
  "world_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.world_1;\n\npublic partial class World1Context : DbContext\n{\n    public World1Context()\n    {\n    }\n\n    public World1Context(DbContextOptions<World1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<City> Cities { get; set; }\n\n    public virtual DbSet<Country> Countries { get; set; }\n\n    public virtual DbSet<Countrylanguage> Countrylanguages { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/world_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<City>(entity =>\n        {\n            entity.ToTable(\"city\");\n\n            entity.HasIndex(e => e.CountryCode, \"idx_city_CountryCode\");\n\n            entity.Property(e => e.Id).HasColumnName(\"ID\");\n            entity.Property(e => e.CountryCode)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"char(3)\");\n            entity.Property(e => e.District)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"char(20)\");\n            entity.Property(e => e.Name)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"char(35)\");\n            entity.Property(e => e.Population).HasDefaultValueSql(\"'0'\");\n\n            entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.Cities)\n                .HasForeignKey(d => d.CountryCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Country>(entity =>\n        {\n            entity.HasKey(e => e.Code);\n\n            entity.ToTable(\"country\");\n\n            entity.Property(e => e.Code)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"char(3)\");\n            entity.Property(e => e.Capital).HasDefaultValueSql(\"NULL\");\n            entity.Property(e => e.Code2)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"char(2)\");\n            entity.Property(e => e.Continent).HasDefaultValue(\"Asia\");\n            entity.Property(e => e.Gnp)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"float(10,2)\")\n                .HasColumnName(\"GNP\");\n            entity.Property(e => e.Gnpold)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"float(10,2)\")\n                .HasColumnName(\"GNPOld\");\n            entity.Property(e => e.GovernmentForm)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"char(45)\");\n            entity.Property(e => e.HeadOfState)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"char(60)\");\n            entity.Property(e => e.IndepYear).HasDefaultValueSql(\"NULL\");\n            entity.Property(e => e.LifeExpectancy)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"float(3,1)\");\n            entity.Property(e => e.LocalName)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"char(45)\");\n            entity.Property(e => e.Name)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"char(52)\");\n            entity.Property(e => e.Population).HasDefaultValueSql(\"'0'\");\n            entity.Property(e => e.Region)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"char(26)\");\n            entity.Property(e => e.SurfaceArea)\n                .HasDefaultValueSql(\"'0.00'\")\n                .HasColumnType(\"float(10,2)\");\n        });\n\n        modelBuilder.Entity<Countrylanguage>(entity =>\n        {\n            entity.HasKey(e => new { e.CountryCode, e.Language });\n\n            entity.ToTable(\"countrylanguage\");\n\n            entity.HasIndex(e => e.CountryCode, \"idx_countrylanguage_CountryCode\");\n\n            entity.Property(e => e.CountryCode)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"char(3)\");\n            entity.Property(e => e.Language)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"char(30)\");\n            entity.Property(e => e.IsOfficial).HasDefaultValue(\"F\");\n            entity.Property(e => e.Percentage)\n                .HasDefaultValueSql(\"'0.0'\")\n                .HasColumnType(\"float(4,1)\");\n\n            entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.Countrylanguages)\n                .HasForeignKey(d => d.CountryCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class City\n{\n    public int Id { get; set; }\n\n    public string Name { get; set; } = null!;\n\n    public string CountryCode { get; set; } = null!;\n\n    public string District { get; set; } = null!;\n\n    public int Population { get; set; }\n\n    public virtual Country CountryCodeNavigation { get; set; } = null!;\n}",
      "public partial class Country\n{\n    public string Code { get; set; } = null!;\n\n    public string Name { get; set; } = null!;\n\n    public string Continent { get; set; } = null!;\n\n    public string Region { get; set; } = null!;\n\n    public double SurfaceArea { get; set; }\n\n    public int? IndepYear { get; set; }\n\n    public int Population { get; set; }\n\n    public double? LifeExpectancy { get; set; }\n\n    public double? Gnp { get; set; }\n\n    public double? Gnpold { get; set; }\n\n    public string LocalName { get; set; } = null!;\n\n    public string GovernmentForm { get; set; } = null!;\n\n    public string? HeadOfState { get; set; }\n\n    public int? Capital { get; set; }\n\n    public string Code2 { get; set; } = null!;\n\n    public virtual ICollection<City> Cities { get; set; } = new List<City>();\n\n    public virtual ICollection<Countrylanguage> Countrylanguages { get; set; } = new List<Countrylanguage>();\n}",
      "public partial class Countrylanguage\n{\n    public string CountryCode { get; set; } = null!;\n\n    public string Language { get; set; } = null!;\n\n    public string IsOfficial { get; set; } = null!;\n\n    public double Percentage { get; set; }\n\n    public virtual Country CountryCodeNavigation { get; set; } = null!;\n}"
    ]
  },
  "music_2": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.music_2;\n\npublic partial class Music2Context : DbContext\n{\n    public Music2Context()\n    {\n    }\n\n    public Music2Context(DbContextOptions<Music2Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Album> Albums { get; set; }\n\n    public virtual DbSet<Band> Bands { get; set; }\n\n    public virtual DbSet<Instrument> Instruments { get; set; }\n\n    public virtual DbSet<Performance> Performances { get; set; }\n\n    public virtual DbSet<Song> Songs { get; set; }\n\n    public virtual DbSet<Tracklist> Tracklists { get; set; }\n\n    public virtual DbSet<Vocal> Vocals { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/music_2.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Album>(entity =>\n        {\n            entity.HasKey(e => e.Aid);\n\n            entity.Property(e => e.Aid)\n                .ValueGeneratedNever()\n                .HasColumnName(\"AId\");\n        });\n\n        modelBuilder.Entity<Band>(entity =>\n        {\n            entity.ToTable(\"Band\");\n\n            entity.Property(e => e.Id).ValueGeneratedNever();\n        });\n\n        modelBuilder.Entity<Instrument>(entity =>\n        {\n            entity.HasKey(e => new { e.SongId, e.BandmateId, e.Instrument1 });\n\n            entity.Property(e => e.Instrument1).HasColumnName(\"Instrument\");\n\n            entity.HasOne(d => d.Bandmate).WithMany(p => p.Instruments)\n                .HasForeignKey(d => d.BandmateId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Song).WithMany(p => p.Instruments)\n                .HasForeignKey(d => d.SongId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Performance>(entity =>\n        {\n            entity.HasKey(e => new { e.SongId, e.Bandmate });\n\n            entity.ToTable(\"Performance\");\n\n            entity.HasOne(d => d.BandmateNavigation).WithMany(p => p.Performances)\n                .HasForeignKey(d => d.Bandmate)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Song).WithMany(p => p.Performances)\n                .HasForeignKey(d => d.SongId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Song>(entity =>\n        {\n            entity.Property(e => e.SongId).ValueGeneratedNever();\n        });\n\n        modelBuilder.Entity<Tracklist>(entity =>\n        {\n            entity.HasKey(e => new { e.AlbumId, e.Position });\n\n            entity.HasOne(d => d.Album).WithMany(p => p.Tracklists)\n                .HasForeignKey(d => d.AlbumId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Song).WithMany(p => p.Tracklists).HasForeignKey(d => d.SongId);\n        });\n\n        modelBuilder.Entity<Vocal>(entity =>\n        {\n            entity.HasKey(e => new { e.SongId, e.Bandmate });\n\n            entity.HasOne(d => d.BandmateNavigation).WithMany(p => p.Vocals)\n                .HasForeignKey(d => d.Bandmate)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Song).WithMany(p => p.Vocals)\n                .HasForeignKey(d => d.SongId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Album\n{\n    public int Aid { get; set; }\n\n    public string? Title { get; set; }\n\n    public int? Year { get; set; }\n\n    public string? Label { get; set; }\n\n    public string? Type { get; set; }\n\n    public virtual ICollection<Tracklist> Tracklists { get; set; } = new List<Tracklist>();\n}",
      "public partial class Band\n{\n    public int Id { get; set; }\n\n    public string? Firstname { get; set; }\n\n    public string? Lastname { get; set; }\n\n    public virtual ICollection<Instrument> Instruments { get; set; } = new List<Instrument>();\n\n    public virtual ICollection<Performance> Performances { get; set; } = new List<Performance>();\n\n    public virtual ICollection<Vocal> Vocals { get; set; } = new List<Vocal>();\n}",
      "public partial class Instrument\n{\n    public int SongId { get; set; }\n\n    public int BandmateId { get; set; }\n\n    public string Instrument1 { get; set; } = null!;\n\n    public virtual Band Bandmate { get; set; } = null!;\n\n    public virtual Song Song { get; set; } = null!;\n}",
      "public partial class Performance\n{\n    public int SongId { get; set; }\n\n    public int Bandmate { get; set; }\n\n    public string? StagePosition { get; set; }\n\n    public virtual Band BandmateNavigation { get; set; } = null!;\n\n    public virtual Song Song { get; set; } = null!;\n}",
      "public partial class Song\n{\n    public int SongId { get; set; }\n\n    public string? Title { get; set; }\n\n    public virtual ICollection<Instrument> Instruments { get; set; } = new List<Instrument>();\n\n    public virtual ICollection<Performance> Performances { get; set; } = new List<Performance>();\n\n    public virtual ICollection<Tracklist> Tracklists { get; set; } = new List<Tracklist>();\n\n    public virtual ICollection<Vocal> Vocals { get; set; } = new List<Vocal>();\n}",
      "public partial class Tracklist\n{\n    public int AlbumId { get; set; }\n\n    public int Position { get; set; }\n\n    public int? SongId { get; set; }\n\n    public virtual Album Album { get; set; } = null!;\n\n    public virtual Song? Song { get; set; }\n}",
      "public partial class Vocal\n{\n    public int SongId { get; set; }\n\n    public int Bandmate { get; set; }\n\n    public string? Type { get; set; }\n\n    public virtual Band BandmateNavigation { get; set; } = null!;\n\n    public virtual Song Song { get; set; } = null!;\n}"
    ]
  },
  "soccer_2": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.soccer_2;\n\npublic partial class Soccer2Context : DbContext\n{\n    public Soccer2Context()\n    {\n    }\n\n    public Soccer2Context(DbContextOptions<Soccer2Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<College> Colleges { get; set; }\n\n    public virtual DbSet<Player> Players { get; set; }\n\n    public virtual DbSet<Tryout> Tryouts { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/soccer_2.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<College>(entity =>\n        {\n            entity.HasKey(e => e.CName);\n\n            entity.ToTable(\"College\");\n\n            entity.Property(e => e.CName)\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"cName\");\n            entity.Property(e => e.Enr)\n                .HasColumnType(\"numeric(5,0)\")\n                .HasColumnName(\"enr\");\n            entity.Property(e => e.State)\n                .HasColumnType(\"varchar(2)\")\n                .HasColumnName(\"state\");\n        });\n\n        modelBuilder.Entity<Player>(entity =>\n        {\n            entity.HasKey(e => e.PId);\n\n            entity.ToTable(\"Player\");\n\n            entity.Property(e => e.PId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"numeric(5,0)\")\n                .HasColumnName(\"pID\");\n            entity.Property(e => e.Hs)\n                .HasColumnType(\"numeric(5,0)\")\n                .HasColumnName(\"HS\");\n            entity.Property(e => e.PName)\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"pName\");\n            entity.Property(e => e.YCard)\n                .HasColumnType(\"varchar(3)\")\n                .HasColumnName(\"yCard\");\n        });\n\n        modelBuilder.Entity<Tryout>(entity =>\n        {\n            entity.HasKey(e => new { e.PId, e.CName });\n\n            entity.ToTable(\"Tryout\");\n\n            entity.Property(e => e.PId)\n                .HasColumnType(\"numeric(5,0)\")\n                .HasColumnName(\"pID\");\n            entity.Property(e => e.CName)\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"cName\");\n            entity.Property(e => e.Decision)\n                .HasColumnType(\"varchar(3)\")\n                .HasColumnName(\"decision\");\n            entity.Property(e => e.PPos)\n                .HasColumnType(\"varchar(8)\")\n                .HasColumnName(\"pPos\");\n\n            entity.HasOne(d => d.CNameNavigation).WithMany(p => p.Tryouts)\n                .HasForeignKey(d => d.CName)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.PIdNavigation).WithMany(p => p.Tryouts)\n                .HasForeignKey(d => d.PId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class College\n{\n    public string CName { get; set; } = null!;\n\n    public string? State { get; set; }\n\n    public int? Enr { get; set; }\n\n    public virtual ICollection<Tryout> Tryouts { get; set; } = new List<Tryout>();\n}",
      "public partial class Player\n{\n    public int PId { get; set; }\n\n    public string? PName { get; set; }\n\n    public string? YCard { get; set; }\n\n    public int? Hs { get; set; }\n\n    public virtual ICollection<Tryout> Tryouts { get; set; } = new List<Tryout>();\n}",
      "public partial class Tryout\n{\n    public int PId { get; set; }\n\n    public string CName { get; set; } = null!;\n\n    public string? PPos { get; set; }\n\n    public string? Decision { get; set; }\n\n    public virtual College CNameNavigation { get; set; } = null!;\n\n    public virtual Player PIdNavigation { get; set; } = null!;\n}"
    ]
  },
  "apartment_rentals": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.apartment_rentals;\n\npublic partial class ApartmentRentalsContext : DbContext\n{\n    public ApartmentRentalsContext()\n    {\n    }\n\n    public ApartmentRentalsContext(DbContextOptions<ApartmentRentalsContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Apartment> Apartments { get; set; }\n\n    public virtual DbSet<ApartmentBooking> ApartmentBookings { get; set; }\n\n    public virtual DbSet<ApartmentBuilding> ApartmentBuildings { get; set; }\n\n    public virtual DbSet<ApartmentFacility> ApartmentFacilities { get; set; }\n\n    public virtual DbSet<Guest> Guests { get; set; }\n\n    public virtual DbSet<ViewUnitStatus> ViewUnitStatuses { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/apartment_rentals.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Apartment>(entity =>\n        {\n            entity.HasKey(e => e.AptId);\n\n            entity.HasIndex(e => e.AptId, \"IX_Apartments_apt_id\").IsUnique();\n\n            entity.Property(e => e.AptId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"apt_id\");\n            entity.Property(e => e.AptNumber)\n                .HasColumnType(\"CHAR(10)\")\n                .HasColumnName(\"apt_number\");\n            entity.Property(e => e.AptTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"apt_type_code\");\n            entity.Property(e => e.BathroomCount).HasColumnName(\"bathroom_count\");\n            entity.Property(e => e.BedroomCount).HasColumnName(\"bedroom_count\");\n            entity.Property(e => e.BuildingId).HasColumnName(\"building_id\");\n            entity.Property(e => e.RoomCount)\n                .HasColumnType(\"CHAR(5)\")\n                .HasColumnName(\"room_count\");\n\n            entity.HasOne(d => d.Building).WithMany(p => p.Apartments)\n                .HasForeignKey(d => d.BuildingId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ApartmentBooking>(entity =>\n        {\n            entity.HasKey(e => e.AptBookingId);\n\n            entity.ToTable(\"Apartment_Bookings\");\n\n            entity.HasIndex(e => e.AptBookingId, \"IX_Apartment_Bookings_apt_booking_id\").IsUnique();\n\n            entity.Property(e => e.AptBookingId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"apt_booking_id\");\n            entity.Property(e => e.AptId).HasColumnName(\"apt_id\");\n            entity.Property(e => e.BookingEndDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"booking_end_date\");\n            entity.Property(e => e.BookingStartDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"booking_start_date\");\n            entity.Property(e => e.BookingStatusCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"booking_status_code\");\n            entity.Property(e => e.GuestId).HasColumnName(\"guest_id\");\n\n            entity.HasOne(d => d.Apt).WithMany(p => p.ApartmentBookings).HasForeignKey(d => d.AptId);\n\n            entity.HasOne(d => d.Guest).WithMany(p => p.ApartmentBookings)\n                .HasForeignKey(d => d.GuestId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ApartmentBuilding>(entity =>\n        {\n            entity.HasKey(e => e.BuildingId);\n\n            entity.ToTable(\"Apartment_Buildings\");\n\n            entity.HasIndex(e => e.BuildingId, \"IX_Apartment_Buildings_building_id\").IsUnique();\n\n            entity.Property(e => e.BuildingId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"building_id\");\n            entity.Property(e => e.BuildingAddress)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"building_address\");\n            entity.Property(e => e.BuildingDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"building_description\");\n            entity.Property(e => e.BuildingFullName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"building_full_name\");\n            entity.Property(e => e.BuildingManager)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"building_manager\");\n            entity.Property(e => e.BuildingPhone)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"building_phone\");\n            entity.Property(e => e.BuildingShortName)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"building_short_name\");\n        });\n\n        modelBuilder.Entity<ApartmentFacility>(entity =>\n        {\n            entity.HasKey(e => new { e.AptId, e.FacilityCode });\n\n            entity.ToTable(\"Apartment_Facilities\");\n\n            entity.Property(e => e.AptId).HasColumnName(\"apt_id\");\n            entity.Property(e => e.FacilityCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"facility_code\");\n\n            entity.HasOne(d => d.Apt).WithMany(p => p.ApartmentFacilities)\n                .HasForeignKey(d => d.AptId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Guest>(entity =>\n        {\n            entity.HasIndex(e => e.GuestId, \"IX_Guests_guest_id\").IsUnique();\n\n            entity.Property(e => e.GuestId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"guest_id\");\n            entity.Property(e => e.DateOfBirth)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_of_birth\");\n            entity.Property(e => e.GenderCode)\n                .HasColumnType(\"CHAR(1)\")\n                .HasColumnName(\"gender_code\");\n            entity.Property(e => e.GuestFirstName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"guest_first_name\");\n            entity.Property(e => e.GuestLastName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"guest_last_name\");\n        });\n\n        modelBuilder.Entity<ViewUnitStatus>(entity =>\n        {\n            entity.HasKey(e => e.StatusDate);\n\n            entity.ToTable(\"View_Unit_Status\");\n\n            entity.Property(e => e.StatusDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"status_date\");\n            entity.Property(e => e.AptBookingId).HasColumnName(\"apt_booking_id\");\n            entity.Property(e => e.AptId).HasColumnName(\"apt_id\");\n            entity.Property(e => e.AvailableYn)\n                .HasColumnType(\"BIT\")\n                .HasColumnName(\"available_yn\");\n\n            entity.HasOne(d => d.AptBooking).WithMany(p => p.ViewUnitStatuses).HasForeignKey(d => d.AptBookingId);\n\n            entity.HasOne(d => d.Apt).WithMany(p => p.ViewUnitStatuses).HasForeignKey(d => d.AptId);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Apartment\n{\n    public int AptId { get; set; }\n\n    public int BuildingId { get; set; }\n\n    public string? AptTypeCode { get; set; }\n\n    public string? AptNumber { get; set; }\n\n    public int? BathroomCount { get; set; }\n\n    public int? BedroomCount { get; set; }\n\n    public string? RoomCount { get; set; }\n\n    public virtual ICollection<ApartmentBooking> ApartmentBookings { get; set; } = new List<ApartmentBooking>();\n\n    public virtual ICollection<ApartmentFacility> ApartmentFacilities { get; set; } = new List<ApartmentFacility>();\n\n    public virtual ApartmentBuilding Building { get; set; } = null!;\n\n    public virtual ICollection<ViewUnitStatus> ViewUnitStatuses { get; set; } = new List<ViewUnitStatus>();\n}",
      "public partial class ApartmentBooking\n{\n    public int AptBookingId { get; set; }\n\n    public int? AptId { get; set; }\n\n    public int GuestId { get; set; }\n\n    public string BookingStatusCode { get; set; } = null!;\n\n    public DateTime? BookingStartDate { get; set; }\n\n    public DateTime? BookingEndDate { get; set; }\n\n    public virtual Apartment? Apt { get; set; }\n\n    public virtual Guest Guest { get; set; } = null!;\n\n    public virtual ICollection<ViewUnitStatus> ViewUnitStatuses { get; set; } = new List<ViewUnitStatus>();\n}",
      "public partial class ApartmentBuilding\n{\n    public int BuildingId { get; set; }\n\n    public string? BuildingShortName { get; set; }\n\n    public string? BuildingFullName { get; set; }\n\n    public string? BuildingDescription { get; set; }\n\n    public string? BuildingAddress { get; set; }\n\n    public string? BuildingManager { get; set; }\n\n    public string? BuildingPhone { get; set; }\n\n    public virtual ICollection<Apartment> Apartments { get; set; } = new List<Apartment>();\n}",
      "public partial class ApartmentFacility\n{\n    public int AptId { get; set; }\n\n    public string FacilityCode { get; set; } = null!;\n\n    public virtual Apartment Apt { get; set; } = null!;\n}",
      "public partial class Guest\n{\n    public int GuestId { get; set; }\n\n    public string? GenderCode { get; set; }\n\n    public string? GuestFirstName { get; set; }\n\n    public string? GuestLastName { get; set; }\n\n    public DateTime? DateOfBirth { get; set; }\n\n    public virtual ICollection<ApartmentBooking> ApartmentBookings { get; set; } = new List<ApartmentBooking>();\n}",
      "public partial class ViewUnitStatus\n{\n    public int? AptId { get; set; }\n\n    public int? AptBookingId { get; set; }\n\n    public DateTime StatusDate { get; set; }\n\n    public bool? AvailableYn { get; set; }\n\n    public virtual Apartment? Apt { get; set; }\n\n    public virtual ApartmentBooking? AptBooking { get; set; }\n}"
    ]
  },
  "local_govt_and_lot": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.local_govt_and_lot;\n\npublic partial class LocalGovtAndLotContext : DbContext\n{\n    public LocalGovtAndLotContext()\n    {\n    }\n\n    public LocalGovtAndLotContext(DbContextOptions<LocalGovtAndLotContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<CustomerEvent> CustomerEvents { get; set; }\n\n    public virtual DbSet<CustomerEventNote> CustomerEventNotes { get; set; }\n\n    public virtual DbSet<Organization> Organizations { get; set; }\n\n    public virtual DbSet<Property> Properties { get; set; }\n\n    public virtual DbSet<Resident> Residents { get; set; }\n\n    public virtual DbSet<ResidentsService> ResidentsServices { get; set; }\n\n    public virtual DbSet<Service> Services { get; set; }\n\n    public virtual DbSet<Thing> Things { get; set; }\n\n    public virtual DbSet<TimedLocationsOfThing> TimedLocationsOfThings { get; set; }\n\n    public virtual DbSet<TimedStatusOfThing> TimedStatusOfThings { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/local_govt_and_lot.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.Property(e => e.CustomerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"customer_id\");\n            entity.Property(e => e.CustomerDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"customer_details\");\n        });\n\n        modelBuilder.Entity<CustomerEvent>(entity =>\n        {\n            entity.ToTable(\"Customer_Events\");\n\n            entity.Property(e => e.CustomerEventId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Customer_Event_ID\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.DateMovedIn)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_moved_in\");\n            entity.Property(e => e.PropertyId).HasColumnName(\"property_id\");\n            entity.Property(e => e.ResidentId).HasColumnName(\"resident_id\");\n            entity.Property(e => e.ThingId).HasColumnName(\"thing_id\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerEvents).HasForeignKey(d => d.CustomerId);\n\n            entity.HasOne(d => d.Thing).WithMany(p => p.CustomerEvents)\n                .HasForeignKey(d => d.ThingId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Resident).WithMany(p => p.CustomerEvents).HasForeignKey(d => new { d.ResidentId, d.PropertyId, d.DateMovedIn });\n        });\n\n        modelBuilder.Entity<CustomerEventNote>(entity =>\n        {\n            entity.ToTable(\"Customer_Event_Notes\");\n\n            entity.Property(e => e.CustomerEventNoteId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Customer_Event_Note_ID\");\n            entity.Property(e => e.CustomerEventId).HasColumnName(\"Customer_Event_ID\");\n            entity.Property(e => e.DateMovedIn)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_moved_in\");\n            entity.Property(e => e.PropertyId).HasColumnName(\"property_id\");\n            entity.Property(e => e.ResidentId).HasColumnName(\"resident_id\");\n            entity.Property(e => e.ServiceTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"service_type_code\");\n\n            entity.HasOne(d => d.CustomerEvent).WithMany(p => p.CustomerEventNotes)\n                .HasForeignKey(d => d.CustomerEventId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Organization>(entity =>\n        {\n            entity.Property(e => e.OrganizationId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"organization_id\");\n            entity.Property(e => e.OrganizationDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"organization_details\");\n            entity.Property(e => e.ParentOrganizationId).HasColumnName(\"parent_organization_id\");\n        });\n\n        modelBuilder.Entity<Property>(entity =>\n        {\n            entity.Property(e => e.PropertyId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"property_id\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n            entity.Property(e => e.PropertyAddress)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"property_address\");\n            entity.Property(e => e.PropertyTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"property_type_code\");\n        });\n\n        modelBuilder.Entity<Resident>(entity =>\n        {\n            entity.HasKey(e => new { e.ResidentId, e.PropertyId, e.DateMovedIn });\n\n            entity.Property(e => e.ResidentId).HasColumnName(\"resident_id\");\n            entity.Property(e => e.PropertyId).HasColumnName(\"property_id\");\n            entity.Property(e => e.DateMovedIn)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_moved_in\");\n            entity.Property(e => e.DateMovedOut)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_moved_out\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n\n            entity.HasOne(d => d.Property).WithMany(p => p.Residents)\n                .HasForeignKey(d => d.PropertyId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ResidentsService>(entity =>\n        {\n            entity.HasKey(e => new { e.ResidentId, e.ServiceId });\n\n            entity.ToTable(\"Residents_Services\");\n\n            entity.Property(e => e.ResidentId).HasColumnName(\"resident_id\");\n            entity.Property(e => e.ServiceId).HasColumnName(\"service_id\");\n            entity.Property(e => e.DateMovedIn)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_moved_in\");\n            entity.Property(e => e.DateProvided)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_provided\");\n            entity.Property(e => e.DateRequested)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_requested\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n            entity.Property(e => e.PropertyId).HasColumnName(\"property_id\");\n\n            entity.HasOne(d => d.Service).WithMany(p => p.ResidentsServices)\n                .HasForeignKey(d => d.ServiceId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Resident).WithMany(p => p.ResidentsServices).HasForeignKey(d => new { d.ResidentId, d.PropertyId, d.DateMovedIn });\n        });\n\n        modelBuilder.Entity<Service>(entity =>\n        {\n            entity.Property(e => e.ServiceId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"service_id\");\n            entity.Property(e => e.OrganizationId).HasColumnName(\"organization_id\");\n            entity.Property(e => e.ServiceDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"service_details\");\n            entity.Property(e => e.ServiceTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"service_type_code\");\n\n            entity.HasOne(d => d.Organization).WithMany(p => p.Services)\n                .HasForeignKey(d => d.OrganizationId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Thing>(entity =>\n        {\n            entity.Property(e => e.ThingId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"thing_id\");\n            entity.Property(e => e.OrganizationId).HasColumnName(\"organization_id\");\n            entity.Property(e => e.ServiceDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"service_details\");\n            entity.Property(e => e.ServiceTypeCode)\n                .HasColumnType(\"CHAR(10)\")\n                .HasColumnName(\"service_type_code\");\n            entity.Property(e => e.TypeOfThingCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Type_of_Thing_Code\");\n\n            entity.HasOne(d => d.Organization).WithMany(p => p.Things)\n                .HasForeignKey(d => d.OrganizationId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<TimedLocationsOfThing>(entity =>\n        {\n            entity.HasKey(e => new { e.ThingId, e.DateAndTime, e.LocationCode });\n\n            entity.ToTable(\"Timed_Locations_of_Things\");\n\n            entity.Property(e => e.ThingId).HasColumnName(\"thing_id\");\n            entity.Property(e => e.DateAndTime)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"Date_and_Time\");\n            entity.Property(e => e.LocationCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Location_Code\");\n\n            entity.HasOne(d => d.Thing).WithMany(p => p.TimedLocationsOfThings)\n                .HasForeignKey(d => d.ThingId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<TimedStatusOfThing>(entity =>\n        {\n            entity.HasKey(e => new { e.ThingId, e.DateAndDate, e.StatusOfThingCode });\n\n            entity.ToTable(\"Timed_Status_of_Things\");\n\n            entity.Property(e => e.ThingId).HasColumnName(\"thing_id\");\n            entity.Property(e => e.DateAndDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"Date_and_Date\");\n            entity.Property(e => e.StatusOfThingCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Status_of_Thing_Code\");\n\n            entity.HasOne(d => d.Thing).WithMany(p => p.TimedStatusOfThings)\n                .HasForeignKey(d => d.ThingId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public string? CustomerDetails { get; set; }\n\n    public virtual ICollection<CustomerEvent> CustomerEvents { get; set; } = new List<CustomerEvent>();\n}",
      "public partial class CustomerEvent\n{\n    public int CustomerEventId { get; set; }\n\n    public int? CustomerId { get; set; }\n\n    public DateTime? DateMovedIn { get; set; }\n\n    public int? PropertyId { get; set; }\n\n    public int? ResidentId { get; set; }\n\n    public int ThingId { get; set; }\n\n    public virtual Customer? Customer { get; set; }\n\n    public virtual ICollection<CustomerEventNote> CustomerEventNotes { get; set; } = new List<CustomerEventNote>();\n\n    public virtual Resident? Resident { get; set; }\n\n    public virtual Thing Thing { get; set; } = null!;\n}",
      "public partial class CustomerEventNote\n{\n    public int CustomerEventNoteId { get; set; }\n\n    public int CustomerEventId { get; set; }\n\n    public string ServiceTypeCode { get; set; } = null!;\n\n    public int ResidentId { get; set; }\n\n    public int PropertyId { get; set; }\n\n    public DateTime DateMovedIn { get; set; }\n\n    public virtual CustomerEvent CustomerEvent { get; set; } = null!;\n}",
      "public partial class Organization\n{\n    public int OrganizationId { get; set; }\n\n    public int? ParentOrganizationId { get; set; }\n\n    public string? OrganizationDetails { get; set; }\n\n    public virtual ICollection<Service> Services { get; set; } = new List<Service>();\n\n    public virtual ICollection<Thing> Things { get; set; } = new List<Thing>();\n}",
      "public partial class Property\n{\n    public int PropertyId { get; set; }\n\n    public string PropertyTypeCode { get; set; } = null!;\n\n    public string? PropertyAddress { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual ICollection<Resident> Residents { get; set; } = new List<Resident>();\n}",
      "public partial class Resident\n{\n    public int ResidentId { get; set; }\n\n    public int PropertyId { get; set; }\n\n    public DateTime DateMovedIn { get; set; }\n\n    public DateTime DateMovedOut { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual ICollection<CustomerEvent> CustomerEvents { get; set; } = new List<CustomerEvent>();\n\n    public virtual Property Property { get; set; } = null!;\n\n    public virtual ICollection<ResidentsService> ResidentsServices { get; set; } = new List<ResidentsService>();\n}",
      "public partial class ResidentsService\n{\n    public int ResidentId { get; set; }\n\n    public int ServiceId { get; set; }\n\n    public DateTime? DateMovedIn { get; set; }\n\n    public int? PropertyId { get; set; }\n\n    public DateTime? DateRequested { get; set; }\n\n    public DateTime? DateProvided { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual Resident? Resident { get; set; }\n\n    public virtual Service Service { get; set; } = null!;\n}",
      "public partial class Service\n{\n    public int ServiceId { get; set; }\n\n    public int OrganizationId { get; set; }\n\n    public string ServiceTypeCode { get; set; } = null!;\n\n    public string? ServiceDetails { get; set; }\n\n    public virtual Organization Organization { get; set; } = null!;\n\n    public virtual ICollection<ResidentsService> ResidentsServices { get; set; } = new List<ResidentsService>();\n}",
      "public partial class Thing\n{\n    public int ThingId { get; set; }\n\n    public int OrganizationId { get; set; }\n\n    public string TypeOfThingCode { get; set; } = null!;\n\n    public string ServiceTypeCode { get; set; } = null!;\n\n    public string? ServiceDetails { get; set; }\n\n    public virtual ICollection<CustomerEvent> CustomerEvents { get; set; } = new List<CustomerEvent>();\n\n    public virtual Organization Organization { get; set; } = null!;\n\n    public virtual ICollection<TimedLocationsOfThing> TimedLocationsOfThings { get; set; } = new List<TimedLocationsOfThing>();\n\n    public virtual ICollection<TimedStatusOfThing> TimedStatusOfThings { get; set; } = new List<TimedStatusOfThing>();\n}",
      "public partial class TimedLocationsOfThing\n{\n    public int ThingId { get; set; }\n\n    public DateTime DateAndTime { get; set; }\n\n    public string LocationCode { get; set; } = null!;\n\n    public virtual Thing Thing { get; set; } = null!;\n}",
      "public partial class TimedStatusOfThing\n{\n    public int ThingId { get; set; }\n\n    public DateTime DateAndDate { get; set; }\n\n    public string StatusOfThingCode { get; set; } = null!;\n\n    public virtual Thing Thing { get; set; } = null!;\n}"
    ]
  },
  "workshop_paper": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.workshop_paper;\n\npublic partial class WorkshopPaperContext : DbContext\n{\n    public WorkshopPaperContext()\n    {\n    }\n\n    public WorkshopPaperContext(DbContextOptions<WorkshopPaperContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Acceptance> Acceptances { get; set; }\n\n    public virtual DbSet<Submission> Submissions { get; set; }\n\n    public virtual DbSet<Workshop> Workshops { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/workshop_paper.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Acceptance>(entity =>\n        {\n            entity.HasKey(e => new { e.SubmissionId, e.WorkshopId });\n\n            entity.ToTable(\"Acceptance\");\n\n            entity.Property(e => e.SubmissionId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Submission_ID\");\n            entity.Property(e => e.WorkshopId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Workshop_ID\");\n\n            entity.HasOne(d => d.Submission).WithMany(p => p.Acceptances)\n                .HasForeignKey(d => d.SubmissionId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Workshop).WithMany(p => p.Acceptances)\n                .HasForeignKey(d => d.WorkshopId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Submission>(entity =>\n        {\n            entity.ToTable(\"submission\");\n\n            entity.Property(e => e.SubmissionId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Submission_ID\");\n        });\n\n        modelBuilder.Entity<Workshop>(entity =>\n        {\n            entity.ToTable(\"workshop\");\n\n            entity.Property(e => e.WorkshopId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Workshop_ID\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Acceptance\n{\n    public int SubmissionId { get; set; }\n\n    public int WorkshopId { get; set; }\n\n    public string? Result { get; set; }\n\n    public virtual Submission Submission { get; set; } = null!;\n\n    public virtual Workshop Workshop { get; set; } = null!;\n}",
      "public partial class Submission\n{\n    public int SubmissionId { get; set; }\n\n    public double? Scores { get; set; }\n\n    public string? Author { get; set; }\n\n    public string? College { get; set; }\n\n    public virtual ICollection<Acceptance> Acceptances { get; set; } = new List<Acceptance>();\n}",
      "public partial class Workshop\n{\n    public int WorkshopId { get; set; }\n\n    public string? Date { get; set; }\n\n    public string? Venue { get; set; }\n\n    public string? Name { get; set; }\n\n    public virtual ICollection<Acceptance> Acceptances { get; set; } = new List<Acceptance>();\n}"
    ]
  },
  "store_product": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.store_product;\n\npublic partial class StoreProductContext : DbContext\n{\n    public StoreProductContext()\n    {\n    }\n\n    public StoreProductContext(DbContextOptions<StoreProductContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<District> Districts { get; set; }\n\n    public virtual DbSet<Product> Products { get; set; }\n\n    public virtual DbSet<Store> Stores { get; set; }\n\n    public virtual DbSet<StoreDistrict> StoreDistricts { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/store_product.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<District>(entity =>\n        {\n            entity.ToTable(\"district\");\n\n            entity.Property(e => e.DistrictId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"District_ID\");\n            entity.Property(e => e.CityArea).HasColumnName(\"City_Area\");\n            entity.Property(e => e.CityPopulation).HasColumnName(\"City_Population\");\n            entity.Property(e => e.DistrictName).HasColumnName(\"District_name\");\n            entity.Property(e => e.HeadquarteredCity).HasColumnName(\"Headquartered_City\");\n        });\n\n        modelBuilder.Entity<Product>(entity =>\n        {\n            entity.ToTable(\"product\");\n\n            entity.Property(e => e.ProductId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"product_id\");\n            entity.Property(e => e.Dimensions).HasColumnName(\"dimensions\");\n            entity.Property(e => e.Dpi).HasColumnName(\"dpi\");\n            entity.Property(e => e.Interface).HasColumnName(\"interface\");\n            entity.Property(e => e.MaxPageSize).HasColumnName(\"max_page_size\");\n            entity.Property(e => e.PagesPerMinuteColor).HasColumnName(\"pages_per_minute_color\");\n            entity.Property(e => e.Product1).HasColumnName(\"product\");\n        });\n\n        modelBuilder.Entity<Store>(entity =>\n        {\n            entity.ToTable(\"store\");\n\n            entity.Property(e => e.StoreId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Store_ID\");\n            entity.Property(e => e.AreaSize).HasColumnName(\"Area_size\");\n            entity.Property(e => e.NumberOfProductCategory).HasColumnName(\"Number_of_product_category\");\n            entity.Property(e => e.Ranking).HasColumnType(\"INT\");\n            entity.Property(e => e.StoreName).HasColumnName(\"Store_Name\");\n\n            entity.HasMany(d => d.Products).WithMany(p => p.Stores)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"StoreProduct\",\n                    r => r.HasOne<Product>().WithMany()\n                        .HasForeignKey(\"ProductId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Store>().WithMany()\n                        .HasForeignKey(\"StoreId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"StoreId\", \"ProductId\");\n                        j.ToTable(\"store_product\");\n                        j.IndexerProperty<int>(\"StoreId\")\n                            .HasColumnType(\"INT\")\n                            .HasColumnName(\"Store_ID\");\n                        j.IndexerProperty<int>(\"ProductId\")\n                            .HasColumnType(\"INT\")\n                            .HasColumnName(\"Product_ID\");\n                    });\n        });\n\n        modelBuilder.Entity<StoreDistrict>(entity =>\n        {\n            entity.HasKey(e => e.StoreId);\n\n            entity.ToTable(\"store_district\");\n\n            entity.Property(e => e.StoreId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Store_ID\");\n            entity.Property(e => e.DistrictId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"District_ID\");\n\n            entity.HasOne(d => d.District).WithMany(p => p.StoreDistricts).HasForeignKey(d => d.DistrictId);\n\n            entity.HasOne(d => d.Store).WithOne(p => p.StoreDistrict)\n                .HasForeignKey<StoreDistrict>(d => d.StoreId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class District\n{\n    public int DistrictId { get; set; }\n\n    public string? DistrictName { get; set; }\n\n    public string? HeadquarteredCity { get; set; }\n\n    public double? CityPopulation { get; set; }\n\n    public double? CityArea { get; set; }\n\n    public virtual ICollection<StoreDistrict> StoreDistricts { get; set; } = new List<StoreDistrict>();\n}",
      "public partial class Product\n{\n    public int ProductId { get; set; }\n\n    public string? Product1 { get; set; }\n\n    public string? Dimensions { get; set; }\n\n    public double? Dpi { get; set; }\n\n    public double? PagesPerMinuteColor { get; set; }\n\n    public string? MaxPageSize { get; set; }\n\n    public string? Interface { get; set; }\n\n    public virtual ICollection<Store> Stores { get; set; } = new List<Store>();\n}",
      "public partial class Store\n{\n    public int StoreId { get; set; }\n\n    public string? StoreName { get; set; }\n\n    public string? Type { get; set; }\n\n    public double? AreaSize { get; set; }\n\n    public double? NumberOfProductCategory { get; set; }\n\n    public int? Ranking { get; set; }\n\n    public virtual StoreDistrict? StoreDistrict { get; set; }\n\n    public virtual ICollection<Product> Products { get; set; } = new List<Product>();\n}",
      "public partial class StoreDistrict\n{\n    public int StoreId { get; set; }\n\n    public int? DistrictId { get; set; }\n\n    public virtual District? District { get; set; }\n\n    public virtual Store Store { get; set; } = null!;\n}"
    ]
  },
  "assets_maintenance": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.assets_maintenance;\n\npublic partial class AssetsMaintenanceContext : DbContext\n{\n    public AssetsMaintenanceContext()\n    {\n    }\n\n    public AssetsMaintenanceContext(DbContextOptions<AssetsMaintenanceContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Asset> Assets { get; set; }\n\n    public virtual DbSet<AssetPart> AssetParts { get; set; }\n\n    public virtual DbSet<EngineerSkill> EngineerSkills { get; set; }\n\n    public virtual DbSet<EngineerVisit> EngineerVisits { get; set; }\n\n    public virtual DbSet<FaultLog> FaultLogs { get; set; }\n\n    public virtual DbSet<FaultLogPart> FaultLogParts { get; set; }\n\n    public virtual DbSet<MaintenanceContract> MaintenanceContracts { get; set; }\n\n    public virtual DbSet<MaintenanceEngineer> MaintenanceEngineers { get; set; }\n\n    public virtual DbSet<Part> Parts { get; set; }\n\n    public virtual DbSet<PartFault> PartFaults { get; set; }\n\n    public virtual DbSet<Skill> Skills { get; set; }\n\n    public virtual DbSet<SkillsRequiredToFix> SkillsRequiredToFixes { get; set; }\n\n    public virtual DbSet<Staff> Staff { get; set; }\n\n    public virtual DbSet<ThirdPartyCompany> ThirdPartyCompanies { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/assets_maintenance.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Asset>(entity =>\n        {\n            entity.Property(e => e.AssetId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"asset_id\");\n            entity.Property(e => e.AssetAcquiredDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"asset_acquired_date\");\n            entity.Property(e => e.AssetDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"asset_details\");\n            entity.Property(e => e.AssetDisposedDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"asset_disposed_date\");\n            entity.Property(e => e.AssetMake)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"asset_make\");\n            entity.Property(e => e.AssetModel)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"asset_model\");\n            entity.Property(e => e.MaintenanceContractId).HasColumnName(\"maintenance_contract_id\");\n            entity.Property(e => e.OtherAssetDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_asset_details\");\n            entity.Property(e => e.SupplierCompanyId).HasColumnName(\"supplier_company_id\");\n\n            entity.HasOne(d => d.MaintenanceContract).WithMany(p => p.Assets)\n                .HasForeignKey(d => d.MaintenanceContractId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.SupplierCompany).WithMany(p => p.Assets)\n                .HasForeignKey(d => d.SupplierCompanyId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<AssetPart>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Asset_Parts\");\n\n            entity.Property(e => e.AssetId).HasColumnName(\"asset_id\");\n            entity.Property(e => e.PartId).HasColumnName(\"part_id\");\n\n            entity.HasOne(d => d.Asset).WithMany()\n                .HasForeignKey(d => d.AssetId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Part).WithMany()\n                .HasForeignKey(d => d.PartId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<EngineerSkill>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Engineer_Skills\");\n\n            entity.Property(e => e.EngineerId).HasColumnName(\"engineer_id\");\n            entity.Property(e => e.SkillId).HasColumnName(\"skill_id\");\n\n            entity.HasOne(d => d.Engineer).WithMany()\n                .HasForeignKey(d => d.EngineerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Skill).WithMany()\n                .HasForeignKey(d => d.SkillId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<EngineerVisit>(entity =>\n        {\n            entity.ToTable(\"Engineer_Visits\");\n\n            entity.Property(e => e.EngineerVisitId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"engineer_visit_id\");\n            entity.Property(e => e.ContactStaffId).HasColumnName(\"contact_staff_id\");\n            entity.Property(e => e.EngineerId).HasColumnName(\"engineer_id\");\n            entity.Property(e => e.FaultLogEntryId).HasColumnName(\"fault_log_entry_id\");\n            entity.Property(e => e.FaultStatus)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"fault_status\");\n            entity.Property(e => e.OtherVisitDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_visit_details\");\n            entity.Property(e => e.VisitEndDatetime)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"visit_end_datetime\");\n            entity.Property(e => e.VisitStartDatetime)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"visit_start_datetime\");\n\n            entity.HasOne(d => d.ContactStaff).WithMany(p => p.EngineerVisits).HasForeignKey(d => d.ContactStaffId);\n\n            entity.HasOne(d => d.Engineer).WithMany(p => p.EngineerVisits)\n                .HasForeignKey(d => d.EngineerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.FaultLogEntry).WithMany(p => p.EngineerVisits)\n                .HasForeignKey(d => d.FaultLogEntryId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<FaultLog>(entity =>\n        {\n            entity.HasKey(e => e.FaultLogEntryId);\n\n            entity.ToTable(\"Fault_Log\");\n\n            entity.Property(e => e.FaultLogEntryId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"fault_log_entry_id\");\n            entity.Property(e => e.AssetId).HasColumnName(\"asset_id\");\n            entity.Property(e => e.FaultDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"fault_description\");\n            entity.Property(e => e.FaultLogEntryDatetime)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"fault_log_entry_datetime\");\n            entity.Property(e => e.OtherFaultDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_fault_details\");\n            entity.Property(e => e.RecordedByStaffId).HasColumnName(\"recorded_by_staff_id\");\n\n            entity.HasOne(d => d.Asset).WithMany(p => p.FaultLogs)\n                .HasForeignKey(d => d.AssetId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.RecordedByStaff).WithMany(p => p.FaultLogs)\n                .HasForeignKey(d => d.RecordedByStaffId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<FaultLogPart>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Fault_Log_Parts\");\n\n            entity.Property(e => e.FaultLogEntryId).HasColumnName(\"fault_log_entry_id\");\n            entity.Property(e => e.FaultStatus)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"fault_status\");\n            entity.Property(e => e.PartFaultId).HasColumnName(\"part_fault_id\");\n\n            entity.HasOne(d => d.FaultLogEntry).WithMany()\n                .HasForeignKey(d => d.FaultLogEntryId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.PartFault).WithMany()\n                .HasForeignKey(d => d.PartFaultId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<MaintenanceContract>(entity =>\n        {\n            entity.ToTable(\"Maintenance_Contracts\");\n\n            entity.Property(e => e.MaintenanceContractId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"maintenance_contract_id\");\n            entity.Property(e => e.ContractEndDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"contract_end_date\");\n            entity.Property(e => e.ContractStartDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"contract_start_date\");\n            entity.Property(e => e.MaintenanceContractCompanyId).HasColumnName(\"maintenance_contract_company_id\");\n            entity.Property(e => e.OtherContractDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_contract_details\");\n\n            entity.HasOne(d => d.MaintenanceContractCompany).WithMany(p => p.MaintenanceContracts)\n                .HasForeignKey(d => d.MaintenanceContractCompanyId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<MaintenanceEngineer>(entity =>\n        {\n            entity.HasKey(e => e.EngineerId);\n\n            entity.ToTable(\"Maintenance_Engineers\");\n\n            entity.Property(e => e.EngineerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"engineer_id\");\n            entity.Property(e => e.CompanyId).HasColumnName(\"company_id\");\n            entity.Property(e => e.FirstName)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"first_name\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"last_name\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n\n            entity.HasOne(d => d.Company).WithMany(p => p.MaintenanceEngineers)\n                .HasForeignKey(d => d.CompanyId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Part>(entity =>\n        {\n            entity.Property(e => e.PartId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"part_id\");\n            entity.Property(e => e.ChargeableAmount)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"chargeable_amount\");\n            entity.Property(e => e.ChargeableYn)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"chargeable_yn\");\n            entity.Property(e => e.OtherPartDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_part_details\");\n            entity.Property(e => e.PartName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"part_name\");\n        });\n\n        modelBuilder.Entity<PartFault>(entity =>\n        {\n            entity.ToTable(\"Part_Faults\");\n\n            entity.Property(e => e.PartFaultId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"part_fault_id\");\n            entity.Property(e => e.FaultDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"fault_description\");\n            entity.Property(e => e.FaultShortName)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"fault_short_name\");\n            entity.Property(e => e.OtherFaultDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_fault_details\");\n            entity.Property(e => e.PartId).HasColumnName(\"part_id\");\n\n            entity.HasOne(d => d.Part).WithMany(p => p.PartFaults)\n                .HasForeignKey(d => d.PartId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Skill>(entity =>\n        {\n            entity.Property(e => e.SkillId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"skill_id\");\n            entity.Property(e => e.SkillCode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"skill_code\");\n            entity.Property(e => e.SkillDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"skill_description\");\n        });\n\n        modelBuilder.Entity<SkillsRequiredToFix>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Skills_Required_To_Fix\");\n\n            entity.Property(e => e.PartFaultId).HasColumnName(\"part_fault_id\");\n            entity.Property(e => e.SkillId).HasColumnName(\"skill_id\");\n\n            entity.HasOne(d => d.PartFault).WithMany()\n                .HasForeignKey(d => d.PartFaultId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Skill).WithMany()\n                .HasForeignKey(d => d.SkillId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Staff>(entity =>\n        {\n            entity.Property(e => e.StaffId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"staff_id\");\n            entity.Property(e => e.Gender)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"gender\");\n            entity.Property(e => e.OtherStaffDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_staff_details\");\n            entity.Property(e => e.StaffName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"staff_name\");\n        });\n\n        modelBuilder.Entity<ThirdPartyCompany>(entity =>\n        {\n            entity.HasKey(e => e.CompanyId);\n\n            entity.ToTable(\"Third_Party_Companies\");\n\n            entity.Property(e => e.CompanyId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"company_id\");\n            entity.Property(e => e.CompanyAddress)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"company_address\");\n            entity.Property(e => e.CompanyName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"company_name\");\n            entity.Property(e => e.CompanyType)\n                .HasColumnType(\"VARCHAR(5)\")\n                .HasColumnName(\"company_type\");\n            entity.Property(e => e.OtherCompanyDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_company_details\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Asset\n{\n    public int AssetId { get; set; }\n\n    public int MaintenanceContractId { get; set; }\n\n    public int SupplierCompanyId { get; set; }\n\n    public string? AssetDetails { get; set; }\n\n    public string? AssetMake { get; set; }\n\n    public string? AssetModel { get; set; }\n\n    public DateTime? AssetAcquiredDate { get; set; }\n\n    public DateTime? AssetDisposedDate { get; set; }\n\n    public string? OtherAssetDetails { get; set; }\n\n    public virtual ICollection<FaultLog> FaultLogs { get; set; } = new List<FaultLog>();\n\n    public virtual MaintenanceContract MaintenanceContract { get; set; } = null!;\n\n    public virtual ThirdPartyCompany SupplierCompany { get; set; } = null!;\n}",
      "public partial class AssetPart\n{\n    public int AssetId { get; set; }\n\n    public int PartId { get; set; }\n\n    public virtual Asset Asset { get; set; } = null!;\n\n    public virtual Part Part { get; set; } = null!;\n}",
      "public partial class EngineerSkill\n{\n    public int EngineerId { get; set; }\n\n    public int SkillId { get; set; }\n\n    public virtual MaintenanceEngineer Engineer { get; set; } = null!;\n\n    public virtual Skill Skill { get; set; } = null!;\n}",
      "public partial class EngineerVisit\n{\n    public int EngineerVisitId { get; set; }\n\n    public int? ContactStaffId { get; set; }\n\n    public int EngineerId { get; set; }\n\n    public int FaultLogEntryId { get; set; }\n\n    public string FaultStatus { get; set; } = null!;\n\n    public DateTime? VisitStartDatetime { get; set; }\n\n    public DateTime? VisitEndDatetime { get; set; }\n\n    public string? OtherVisitDetails { get; set; }\n\n    public virtual Staff? ContactStaff { get; set; }\n\n    public virtual MaintenanceEngineer Engineer { get; set; } = null!;\n\n    public virtual FaultLog FaultLogEntry { get; set; } = null!;\n}",
      "public partial class FaultLog\n{\n    public int FaultLogEntryId { get; set; }\n\n    public int AssetId { get; set; }\n\n    public int RecordedByStaffId { get; set; }\n\n    public DateTime? FaultLogEntryDatetime { get; set; }\n\n    public string? FaultDescription { get; set; }\n\n    public string? OtherFaultDetails { get; set; }\n\n    public virtual Asset Asset { get; set; } = null!;\n\n    public virtual ICollection<EngineerVisit> EngineerVisits { get; set; } = new List<EngineerVisit>();\n\n    public virtual Staff RecordedByStaff { get; set; } = null!;\n}",
      "public partial class FaultLogPart\n{\n    public int FaultLogEntryId { get; set; }\n\n    public int PartFaultId { get; set; }\n\n    public string FaultStatus { get; set; } = null!;\n\n    public virtual FaultLog FaultLogEntry { get; set; } = null!;\n\n    public virtual PartFault PartFault { get; set; } = null!;\n}",
      "public partial class MaintenanceContract\n{\n    public int MaintenanceContractId { get; set; }\n\n    public int MaintenanceContractCompanyId { get; set; }\n\n    public DateTime? ContractStartDate { get; set; }\n\n    public DateTime? ContractEndDate { get; set; }\n\n    public string? OtherContractDetails { get; set; }\n\n    public virtual ICollection<Asset> Assets { get; set; } = new List<Asset>();\n\n    public virtual ThirdPartyCompany MaintenanceContractCompany { get; set; } = null!;\n}",
      "public partial class MaintenanceEngineer\n{\n    public int EngineerId { get; set; }\n\n    public int CompanyId { get; set; }\n\n    public string? FirstName { get; set; }\n\n    public string? LastName { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual ThirdPartyCompany Company { get; set; } = null!;\n\n    public virtual ICollection<EngineerVisit> EngineerVisits { get; set; } = new List<EngineerVisit>();\n}",
      "public partial class Part\n{\n    public int PartId { get; set; }\n\n    public string? PartName { get; set; }\n\n    public string? ChargeableYn { get; set; }\n\n    public string? ChargeableAmount { get; set; }\n\n    public string? OtherPartDetails { get; set; }\n\n    public virtual ICollection<PartFault> PartFaults { get; set; } = new List<PartFault>();\n}",
      "public partial class PartFault\n{\n    public int PartFaultId { get; set; }\n\n    public int PartId { get; set; }\n\n    public string? FaultShortName { get; set; }\n\n    public string? FaultDescription { get; set; }\n\n    public string? OtherFaultDetails { get; set; }\n\n    public virtual Part Part { get; set; } = null!;\n}",
      "public partial class Skill\n{\n    public int SkillId { get; set; }\n\n    public string? SkillCode { get; set; }\n\n    public string? SkillDescription { get; set; }\n}",
      "public partial class SkillsRequiredToFix\n{\n    public int PartFaultId { get; set; }\n\n    public int SkillId { get; set; }\n\n    public virtual PartFault PartFault { get; set; } = null!;\n\n    public virtual Skill Skill { get; set; } = null!;\n}",
      "public partial class Staff\n{\n    public int StaffId { get; set; }\n\n    public string? StaffName { get; set; }\n\n    public string? Gender { get; set; }\n\n    public string? OtherStaffDetails { get; set; }\n\n    public virtual ICollection<EngineerVisit> EngineerVisits { get; set; } = new List<EngineerVisit>();\n\n    public virtual ICollection<FaultLog> FaultLogs { get; set; } = new List<FaultLog>();\n}",
      "public partial class ThirdPartyCompany\n{\n    public int CompanyId { get; set; }\n\n    public string CompanyType { get; set; } = null!;\n\n    public string? CompanyName { get; set; }\n\n    public string? CompanyAddress { get; set; }\n\n    public string? OtherCompanyDetails { get; set; }\n\n    public virtual ICollection<Asset> Assets { get; set; } = new List<Asset>();\n\n    public virtual ICollection<MaintenanceContract> MaintenanceContracts { get; set; } = new List<MaintenanceContract>();\n\n    public virtual ICollection<MaintenanceEngineer> MaintenanceEngineers { get; set; } = new List<MaintenanceEngineer>();\n}"
    ]
  },
  "college_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.college_1;\n\npublic partial class College1Context : DbContext\n{\n    public College1Context()\n    {\n    }\n\n    public College1Context(DbContextOptions<College1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Class> Classes { get; set; }\n\n    public virtual DbSet<Course> Courses { get; set; }\n\n    public virtual DbSet<Department> Departments { get; set; }\n\n    public virtual DbSet<Employee> Employees { get; set; }\n\n    public virtual DbSet<Enroll> Enrolls { get; set; }\n\n    public virtual DbSet<Professor> Professors { get; set; }\n\n    public virtual DbSet<Student> Students { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/college_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Class>(entity =>\n        {\n            entity.HasKey(e => e.ClassCode);\n\n            entity.ToTable(\"CLASS\");\n\n            entity.Property(e => e.ClassCode)\n                .HasColumnType(\"varchar(5)\")\n                .HasColumnName(\"CLASS_CODE\");\n            entity.Property(e => e.ClassRoom)\n                .HasColumnType(\"varchar(8)\")\n                .HasColumnName(\"CLASS_ROOM\");\n            entity.Property(e => e.ClassSection)\n                .HasColumnType(\"varchar(2)\")\n                .HasColumnName(\"CLASS_SECTION\");\n            entity.Property(e => e.ClassTime)\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"CLASS_TIME\");\n            entity.Property(e => e.CrsCode)\n                .HasColumnType(\"varchar(10)\")\n                .HasColumnName(\"CRS_CODE\");\n            entity.Property(e => e.ProfNum)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"PROF_NUM\");\n\n            entity.HasOne(d => d.CrsCodeNavigation).WithMany(p => p.Classes).HasForeignKey(d => d.CrsCode);\n\n            entity.HasOne(d => d.ProfNumNavigation).WithMany(p => p.Classes).HasForeignKey(d => d.ProfNum);\n        });\n\n        modelBuilder.Entity<Course>(entity =>\n        {\n            entity.HasKey(e => e.CrsCode);\n\n            entity.ToTable(\"COURSE\");\n\n            entity.Property(e => e.CrsCode)\n                .HasColumnType(\"varchar(10)\")\n                .HasColumnName(\"CRS_CODE\");\n            entity.Property(e => e.CrsCredit)\n                .HasColumnType(\"float(8)\")\n                .HasColumnName(\"CRS_CREDIT\");\n            entity.Property(e => e.CrsDescription)\n                .HasColumnType(\"varchar(35)\")\n                .HasColumnName(\"CRS_DESCRIPTION\");\n            entity.Property(e => e.DeptCode)\n                .HasColumnType(\"varchar(10)\")\n                .HasColumnName(\"DEPT_CODE\");\n\n            entity.HasOne(d => d.DeptCodeNavigation).WithMany(p => p.Courses).HasForeignKey(d => d.DeptCode);\n        });\n\n        modelBuilder.Entity<Department>(entity =>\n        {\n            entity.HasKey(e => e.DeptCode);\n\n            entity.ToTable(\"DEPARTMENT\");\n\n            entity.Property(e => e.DeptCode)\n                .HasColumnType(\"varchar(10)\")\n                .HasColumnName(\"DEPT_CODE\");\n            entity.Property(e => e.DeptAddress)\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"DEPT_ADDRESS\");\n            entity.Property(e => e.DeptExtension)\n                .HasColumnType(\"varchar(4)\")\n                .HasColumnName(\"DEPT_EXTENSION\");\n            entity.Property(e => e.DeptName)\n                .HasColumnType(\"varchar(30)\")\n                .HasColumnName(\"DEPT_NAME\");\n            entity.Property(e => e.EmpNum)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"EMP_NUM\");\n            entity.Property(e => e.SchoolCode)\n                .HasColumnType(\"varchar(8)\")\n                .HasColumnName(\"SCHOOL_CODE\");\n\n            entity.HasOne(d => d.EmpNumNavigation).WithMany(p => p.Departments).HasForeignKey(d => d.EmpNum);\n        });\n\n        modelBuilder.Entity<Employee>(entity =>\n        {\n            entity.HasKey(e => e.EmpNum);\n\n            entity.ToTable(\"EMPLOYEE\");\n\n            entity.Property(e => e.EmpNum)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"EMP_NUM\");\n            entity.Property(e => e.EmpDob)\n                .HasColumnType(\"datetime\")\n                .HasColumnName(\"EMP_DOB\");\n            entity.Property(e => e.EmpFname)\n                .HasColumnType(\"varchar(12)\")\n                .HasColumnName(\"EMP_FNAME\");\n            entity.Property(e => e.EmpHiredate)\n                .HasColumnType(\"datetime\")\n                .HasColumnName(\"EMP_HIREDATE\");\n            entity.Property(e => e.EmpInitial)\n                .HasColumnType(\"varchar(1)\")\n                .HasColumnName(\"EMP_INITIAL\");\n            entity.Property(e => e.EmpJobcode)\n                .HasColumnType(\"varchar(5)\")\n                .HasColumnName(\"EMP_JOBCODE\");\n            entity.Property(e => e.EmpLname)\n                .HasColumnType(\"varchar(15)\")\n                .HasColumnName(\"EMP_LNAME\");\n        });\n\n        modelBuilder.Entity<Enroll>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"ENROLL\");\n\n            entity.Property(e => e.ClassCode)\n                .HasColumnType(\"varchar(5)\")\n                .HasColumnName(\"CLASS_CODE\");\n            entity.Property(e => e.EnrollGrade)\n                .HasColumnType(\"varchar(50)\")\n                .HasColumnName(\"ENROLL_GRADE\");\n            entity.Property(e => e.StuNum)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"STU_NUM\");\n\n            entity.HasOne(d => d.ClassCodeNavigation).WithMany().HasForeignKey(d => d.ClassCode);\n\n            entity.HasOne(d => d.StuNumNavigation).WithMany().HasForeignKey(d => d.StuNum);\n        });\n\n        modelBuilder.Entity<Professor>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"PROFESSOR\");\n\n            entity.Property(e => e.DeptCode)\n                .HasColumnType(\"varchar(10)\")\n                .HasColumnName(\"DEPT_CODE\");\n            entity.Property(e => e.EmpNum)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"EMP_NUM\");\n            entity.Property(e => e.ProfExtension)\n                .HasColumnType(\"varchar(4)\")\n                .HasColumnName(\"PROF_EXTENSION\");\n            entity.Property(e => e.ProfHighDegree)\n                .HasColumnType(\"varchar(5)\")\n                .HasColumnName(\"PROF_HIGH_DEGREE\");\n            entity.Property(e => e.ProfOffice)\n                .HasColumnType(\"varchar(50)\")\n                .HasColumnName(\"PROF_OFFICE\");\n\n            entity.HasOne(d => d.DeptCodeNavigation).WithMany().HasForeignKey(d => d.DeptCode);\n\n            entity.HasOne(d => d.EmpNumNavigation).WithMany().HasForeignKey(d => d.EmpNum);\n        });\n\n        modelBuilder.Entity<Student>(entity =>\n        {\n            entity.HasKey(e => e.StuNum);\n\n            entity.ToTable(\"STUDENT\");\n\n            entity.Property(e => e.StuNum)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"STU_NUM\");\n            entity.Property(e => e.DeptCode)\n                .HasColumnType(\"varchar(18)\")\n                .HasColumnName(\"DEPT_CODE\");\n            entity.Property(e => e.ProfNum)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"PROF_NUM\");\n            entity.Property(e => e.StuClass)\n                .HasColumnType(\"varchar(2)\")\n                .HasColumnName(\"STU_CLASS\");\n            entity.Property(e => e.StuDob)\n                .HasColumnType(\"datetime\")\n                .HasColumnName(\"STU_DOB\");\n            entity.Property(e => e.StuFname)\n                .HasColumnType(\"varchar(15)\")\n                .HasColumnName(\"STU_FNAME\");\n            entity.Property(e => e.StuGpa)\n                .HasColumnType(\"float(8)\")\n                .HasColumnName(\"STU_GPA\");\n            entity.Property(e => e.StuHrs)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"STU_HRS\");\n            entity.Property(e => e.StuInit)\n                .HasColumnType(\"varchar(1)\")\n                .HasColumnName(\"STU_INIT\");\n            entity.Property(e => e.StuLname)\n                .HasColumnType(\"varchar(15)\")\n                .HasColumnName(\"STU_LNAME\");\n            entity.Property(e => e.StuPhone)\n                .HasColumnType(\"varchar(4)\")\n                .HasColumnName(\"STU_PHONE\");\n            entity.Property(e => e.StuTransfer)\n                .HasColumnType(\"numeric\")\n                .HasColumnName(\"STU_TRANSFER\");\n\n            entity.HasOne(d => d.DeptCodeNavigation).WithMany(p => p.Students).HasForeignKey(d => d.DeptCode);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Class\n{\n    public string ClassCode { get; set; } = null!;\n\n    public string? CrsCode { get; set; }\n\n    public string? ClassSection { get; set; }\n\n    public string? ClassTime { get; set; }\n\n    public string? ClassRoom { get; set; }\n\n    public int? ProfNum { get; set; }\n\n    public virtual Course? CrsCodeNavigation { get; set; }\n\n    public virtual Employee? ProfNumNavigation { get; set; }\n}",
      "public partial class Course\n{\n    public string CrsCode { get; set; } = null!;\n\n    public string? DeptCode { get; set; }\n\n    public string? CrsDescription { get; set; }\n\n    public double? CrsCredit { get; set; }\n\n    public virtual ICollection<Class> Classes { get; set; } = new List<Class>();\n\n    public virtual Department? DeptCodeNavigation { get; set; }\n}",
      "public partial class Department\n{\n    public string DeptCode { get; set; } = null!;\n\n    public string? DeptName { get; set; }\n\n    public string? SchoolCode { get; set; }\n\n    public int? EmpNum { get; set; }\n\n    public string? DeptAddress { get; set; }\n\n    public string? DeptExtension { get; set; }\n\n    public virtual ICollection<Course> Courses { get; set; } = new List<Course>();\n\n    public virtual Employee? EmpNumNavigation { get; set; }\n\n    public virtual ICollection<Student> Students { get; set; } = new List<Student>();\n}",
      "public partial class Employee\n{\n    public int EmpNum { get; set; }\n\n    public string? EmpLname { get; set; }\n\n    public string? EmpFname { get; set; }\n\n    public string? EmpInitial { get; set; }\n\n    public string? EmpJobcode { get; set; }\n\n    public string? EmpHiredate { get; set; }\n\n    public string? EmpDob { get; set; }\n\n    public virtual ICollection<Class> Classes { get; set; } = new List<Class>();\n\n    public virtual ICollection<Department> Departments { get; set; } = new List<Department>();\n}",
      "public partial class Enroll\n{\n    public string? ClassCode { get; set; }\n\n    public int? StuNum { get; set; }\n\n    public string? EnrollGrade { get; set; }\n\n    public virtual Class? ClassCodeNavigation { get; set; }\n\n    public virtual Student? StuNumNavigation { get; set; }\n}",
      "public partial class Professor\n{\n    public int? EmpNum { get; set; }\n\n    public string? DeptCode { get; set; }\n\n    public string? ProfOffice { get; set; }\n\n    public string? ProfExtension { get; set; }\n\n    public string? ProfHighDegree { get; set; }\n\n    public virtual Department? DeptCodeNavigation { get; set; }\n\n    public virtual Employee? EmpNumNavigation { get; set; }\n}",
      "public partial class Student\n{\n    public int StuNum { get; set; }\n\n    public string? StuLname { get; set; }\n\n    public string? StuFname { get; set; }\n\n    public string? StuInit { get; set; }\n\n    public DateOnly? StuDob { get; set; }\n\n    public int? StuHrs { get; set; }\n\n    public string? StuClass { get; set; }\n\n    public double? StuGpa { get; set; }\n\n    public int? StuTransfer { get; set; }\n\n    public string? DeptCode { get; set; }\n\n    public string? StuPhone { get; set; }\n\n    public int? ProfNum { get; set; }\n\n    public virtual Department? DeptCodeNavigation { get; set; }\n}"
    ]
  },
  "solvency_ii": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.solvency_ii;\n\npublic partial class SolvencyIiContext : DbContext\n{\n    public SolvencyIiContext()\n    {\n    }\n\n    public SolvencyIiContext(DbContextOptions<SolvencyIiContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Address> Addresses { get; set; }\n\n    public virtual DbSet<Agreement> Agreements { get; set; }\n\n    public virtual DbSet<Asset> Assets { get; set; }\n\n    public virtual DbSet<AssetsInEvent> AssetsInEvents { get; set; }\n\n    public virtual DbSet<Channel> Channels { get; set; }\n\n    public virtual DbSet<Event> Events { get; set; }\n\n    public virtual DbSet<Finance> Finances { get; set; }\n\n    public virtual DbSet<Location> Locations { get; set; }\n\n    public virtual DbSet<PartiesInEvent> PartiesInEvents { get; set; }\n\n    public virtual DbSet<Party> Parties { get; set; }\n\n    public virtual DbSet<Product> Products { get; set; }\n\n    public virtual DbSet<ProductsInEvent> ProductsInEvents { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/solvency_ii.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Address>(entity =>\n        {\n            entity.HasIndex(e => e.AddressId, \"IX_Addresses_Address_ID\").IsUnique();\n\n            entity.Property(e => e.AddressId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Address_ID\");\n            entity.Property(e => e.AddressDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"address_details\");\n        });\n\n        modelBuilder.Entity<Agreement>(entity =>\n        {\n            entity.HasKey(e => e.DocumentId);\n\n            entity.Property(e => e.DocumentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Document_ID\");\n            entity.Property(e => e.EventId).HasColumnName(\"Event_ID\");\n\n            entity.HasOne(d => d.Event).WithMany(p => p.Agreements)\n                .HasForeignKey(d => d.EventId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Asset>(entity =>\n        {\n            entity.Property(e => e.AssetId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Asset_ID\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Other_Details\");\n        });\n\n        modelBuilder.Entity<AssetsInEvent>(entity =>\n        {\n            entity.HasKey(e => new { e.AssetId, e.EventId });\n\n            entity.ToTable(\"Assets_in_Events\");\n\n            entity.Property(e => e.AssetId).HasColumnName(\"Asset_ID\");\n            entity.Property(e => e.EventId).HasColumnName(\"Event_ID\");\n\n            entity.HasOne(d => d.Event).WithMany(p => p.AssetsInEvents)\n                .HasForeignKey(d => d.EventId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Channel>(entity =>\n        {\n            entity.Property(e => e.ChannelId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Channel_ID\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Other_Details\");\n        });\n\n        modelBuilder.Entity<Event>(entity =>\n        {\n            entity.HasIndex(e => e.EventId, \"IX_Events_Event_ID\").IsUnique();\n\n            entity.Property(e => e.EventId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Event_ID\");\n            entity.Property(e => e.AddressId).HasColumnName(\"Address_ID\");\n            entity.Property(e => e.ChannelId).HasColumnName(\"Channel_ID\");\n            entity.Property(e => e.EventTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Event_Type_Code\");\n            entity.Property(e => e.FinanceId).HasColumnName(\"Finance_ID\");\n            entity.Property(e => e.LocationId).HasColumnName(\"Location_ID\");\n\n            entity.HasOne(d => d.Address).WithMany(p => p.Events).HasForeignKey(d => d.AddressId);\n\n            entity.HasOne(d => d.Finance).WithMany(p => p.Events)\n                .HasForeignKey(d => d.FinanceId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Location).WithMany(p => p.Events)\n                .HasForeignKey(d => d.LocationId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Finance>(entity =>\n        {\n            entity.Property(e => e.FinanceId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Finance_ID\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Other_Details\");\n        });\n\n        modelBuilder.Entity<Location>(entity =>\n        {\n            entity.Property(e => e.LocationId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Location_ID\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Other_Details\");\n        });\n\n        modelBuilder.Entity<PartiesInEvent>(entity =>\n        {\n            entity.HasKey(e => new { e.PartyId, e.EventId });\n\n            entity.ToTable(\"Parties_in_Events\");\n\n            entity.Property(e => e.PartyId).HasColumnName(\"Party_ID\");\n            entity.Property(e => e.EventId).HasColumnName(\"Event_ID\");\n            entity.Property(e => e.RoleCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Role_Code\");\n\n            entity.HasOne(d => d.Event).WithMany(p => p.PartiesInEvents)\n                .HasForeignKey(d => d.EventId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Party).WithMany(p => p.PartiesInEvents)\n                .HasForeignKey(d => d.PartyId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Party>(entity =>\n        {\n            entity.Property(e => e.PartyId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Party_ID\");\n            entity.Property(e => e.PartyDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Party_Details\");\n        });\n\n        modelBuilder.Entity<Product>(entity =>\n        {\n            entity.HasIndex(e => e.ProductId, \"IX_Products_Product_ID\").IsUnique();\n\n            entity.Property(e => e.ProductId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Product_ID\");\n            entity.Property(e => e.ProductName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Product_Name\");\n            entity.Property(e => e.ProductPrice)\n                .HasColumnType(\"DECIMAL(20,4)\")\n                .HasColumnName(\"Product_Price\");\n            entity.Property(e => e.ProductTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Product_Type_Code\");\n        });\n\n        modelBuilder.Entity<ProductsInEvent>(entity =>\n        {\n            entity.HasKey(e => e.ProductInEventId);\n\n            entity.ToTable(\"Products_in_Events\");\n\n            entity.Property(e => e.ProductInEventId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Product_in_Event_ID\");\n            entity.Property(e => e.EventId).HasColumnName(\"Event_ID\");\n            entity.Property(e => e.ProductId).HasColumnName(\"Product_ID\");\n\n            entity.HasOne(d => d.Event).WithMany(p => p.ProductsInEvents)\n                .HasForeignKey(d => d.EventId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Product).WithMany(p => p.ProductsInEvents)\n                .HasForeignKey(d => d.ProductId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Address\n{\n    public int AddressId { get; set; }\n\n    public string? AddressDetails { get; set; }\n\n    public virtual ICollection<Event> Events { get; set; } = new List<Event>();\n}",
      "public partial class Agreement\n{\n    public int DocumentId { get; set; }\n\n    public int EventId { get; set; }\n\n    public virtual Event Event { get; set; } = null!;\n}",
      "public partial class Asset\n{\n    public int AssetId { get; set; }\n\n    public string? OtherDetails { get; set; }\n}",
      "public partial class AssetsInEvent\n{\n    public int AssetId { get; set; }\n\n    public int EventId { get; set; }\n\n    public virtual Event Event { get; set; } = null!;\n}",
      "public partial class Channel\n{\n    public int ChannelId { get; set; }\n\n    public string? OtherDetails { get; set; }\n}",
      "public partial class Event\n{\n    public int EventId { get; set; }\n\n    public int? AddressId { get; set; }\n\n    public int ChannelId { get; set; }\n\n    public string? EventTypeCode { get; set; }\n\n    public int FinanceId { get; set; }\n\n    public int LocationId { get; set; }\n\n    public virtual Address? Address { get; set; }\n\n    public virtual ICollection<Agreement> Agreements { get; set; } = new List<Agreement>();\n\n    public virtual ICollection<AssetsInEvent> AssetsInEvents { get; set; } = new List<AssetsInEvent>();\n\n    public virtual Finance Finance { get; set; } = null!;\n\n    public virtual Location Location { get; set; } = null!;\n\n    public virtual ICollection<PartiesInEvent> PartiesInEvents { get; set; } = new List<PartiesInEvent>();\n\n    public virtual ICollection<ProductsInEvent> ProductsInEvents { get; set; } = new List<ProductsInEvent>();\n}",
      "public partial class Finance\n{\n    public int FinanceId { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual ICollection<Event> Events { get; set; } = new List<Event>();\n}",
      "public partial class Location\n{\n    public int LocationId { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual ICollection<Event> Events { get; set; } = new List<Event>();\n}",
      "public partial class PartiesInEvent\n{\n    public int PartyId { get; set; }\n\n    public int EventId { get; set; }\n\n    public string? RoleCode { get; set; }\n\n    public virtual Event Event { get; set; } = null!;\n\n    public virtual Party Party { get; set; } = null!;\n}",
      "public partial class Party\n{\n    public int PartyId { get; set; }\n\n    public string? PartyDetails { get; set; }\n\n    public virtual ICollection<PartiesInEvent> PartiesInEvents { get; set; } = new List<PartiesInEvent>();\n}",
      "public partial class Product\n{\n    public int ProductId { get; set; }\n\n    public string? ProductTypeCode { get; set; }\n\n    public string? ProductName { get; set; }\n\n    public decimal? ProductPrice { get; set; }\n\n    public virtual ICollection<ProductsInEvent> ProductsInEvents { get; set; } = new List<ProductsInEvent>();\n}",
      "public partial class ProductsInEvent\n{\n    public int ProductInEventId { get; set; }\n\n    public int EventId { get; set; }\n\n    public int ProductId { get; set; }\n\n    public virtual Event Event { get; set; } = null!;\n\n    public virtual Product Product { get; set; } = null!;\n}"
    ]
  },
  "pets_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.pets_1;\n\npublic partial class Pets1Context : DbContext\n{\n    public Pets1Context()\n    {\n    }\n\n    public Pets1Context(DbContextOptions<Pets1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<HasPet> HasPets { get; set; }\n\n    public virtual DbSet<Pet> Pets { get; set; }\n\n    public virtual DbSet<Student> Students { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/pets_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<HasPet>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Has_Pet\");\n\n            entity.Property(e => e.PetId).HasColumnName(\"PetID\");\n            entity.Property(e => e.StuId).HasColumnName(\"StuID\");\n\n            entity.HasOne(d => d.Pet).WithMany().HasForeignKey(d => d.PetId);\n\n            entity.HasOne(d => d.Stu).WithMany().HasForeignKey(d => d.StuId);\n        });\n\n        modelBuilder.Entity<Pet>(entity =>\n        {\n            entity.Property(e => e.PetId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"PetID\");\n            entity.Property(e => e.PetAge).HasColumnName(\"pet_age\");\n            entity.Property(e => e.PetType).HasColumnType(\"VARCHAR(20)\");\n            entity.Property(e => e.Weight).HasColumnName(\"weight\");\n        });\n\n        modelBuilder.Entity<Student>(entity =>\n        {\n            entity.HasKey(e => e.StuId);\n\n            entity.ToTable(\"Student\");\n\n            entity.Property(e => e.StuId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"StuID\");\n            entity.Property(e => e.CityCode)\n                .HasColumnType(\"VARCHAR(3)\")\n                .HasColumnName(\"city_code\");\n            entity.Property(e => e.Fname).HasColumnType(\"VARCHAR(12)\");\n            entity.Property(e => e.Lname)\n                .HasColumnType(\"VARCHAR(12)\")\n                .HasColumnName(\"LName\");\n            entity.Property(e => e.Sex).HasColumnType(\"VARCHAR(1)\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class HasPet\n{\n    public int? StuId { get; set; }\n\n    public int? PetId { get; set; }\n\n    public virtual Pet? Pet { get; set; }\n\n    public virtual Student? Stu { get; set; }\n}",
      "public partial class Pet\n{\n    public int PetId { get; set; }\n\n    public string? PetType { get; set; }\n\n    public int? PetAge { get; set; }\n\n    public double? Weight { get; set; }\n}",
      "public partial class Student\n{\n    public int StuId { get; set; }\n\n    public string? Lname { get; set; }\n\n    public string? Fname { get; set; }\n\n    public int? Age { get; set; }\n\n    public string? Sex { get; set; }\n\n    public int? Major { get; set; }\n\n    public int? Advisor { get; set; }\n\n    public string? CityCode { get; set; }\n}"
    ]
  },
  "geo": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.geo;\n\npublic partial class GeoContext : DbContext\n{\n    public GeoContext()\n    {\n    }\n\n    public GeoContext(DbContextOptions<GeoContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<City> Cities { get; set; }\n\n    public virtual DbSet<Highlow> Highlows { get; set; }\n\n    public virtual DbSet<Lake> Lakes { get; set; }\n\n    public virtual DbSet<Mountain> Mountains { get; set; }\n\n    public virtual DbSet<River> Rivers { get; set; }\n\n    public virtual DbSet<State> States { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/geo.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<City>(entity =>\n        {\n            entity.HasKey(e => new { e.CityName, e.StateName });\n\n            entity.ToTable(\"city\");\n\n            entity.Property(e => e.CityName).HasColumnName(\"city_name\");\n            entity.Property(e => e.StateName).HasColumnName(\"state_name\");\n            entity.Property(e => e.CountryName)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"varchar(3)\")\n                .HasColumnName(\"country_name\");\n            entity.Property(e => e.Population)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnName(\"population\");\n\n            entity.HasOne(d => d.StateNameNavigation).WithMany(p => p.Cities)\n                .HasForeignKey(d => d.StateName)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Highlow>(entity =>\n        {\n            entity.HasKey(e => e.StateName);\n\n            entity.ToTable(\"highlow\");\n\n            entity.Property(e => e.StateName).HasColumnName(\"state_name\");\n            entity.Property(e => e.HighestElevation).HasColumnName(\"highest_elevation\");\n            entity.Property(e => e.HighestPoint).HasColumnName(\"highest_point\");\n            entity.Property(e => e.LowestElevation).HasColumnName(\"lowest_elevation\");\n            entity.Property(e => e.LowestPoint).HasColumnName(\"lowest_point\");\n\n            entity.HasOne(d => d.StateNameNavigation).WithOne(p => p.Highlow)\n                .HasForeignKey<Highlow>(d => d.StateName)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Lake>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"lake\");\n\n            entity.Property(e => e.Area)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"double\")\n                .HasColumnName(\"area\");\n            entity.Property(e => e.CountryName)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"varchar(3)\")\n                .HasColumnName(\"country_name\");\n            entity.Property(e => e.LakeName).HasColumnName(\"lake_name\");\n            entity.Property(e => e.StateName).HasColumnName(\"state_name\");\n        });\n\n        modelBuilder.Entity<Mountain>(entity =>\n        {\n            entity.HasKey(e => new { e.MountainName, e.StateName });\n\n            entity.ToTable(\"mountain\");\n\n            entity.Property(e => e.MountainName).HasColumnName(\"mountain_name\");\n            entity.Property(e => e.StateName).HasColumnName(\"state_name\");\n            entity.Property(e => e.CountryName)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"varchar(3)\")\n                .HasColumnName(\"country_name\");\n            entity.Property(e => e.MountainAltitude)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnName(\"mountain_altitude\");\n\n            entity.HasOne(d => d.StateNameNavigation).WithMany(p => p.Mountains)\n                .HasForeignKey(d => d.StateName)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<River>(entity =>\n        {\n            entity.HasKey(e => e.RiverName);\n\n            entity.ToTable(\"river\");\n\n            entity.Property(e => e.RiverName).HasColumnName(\"river_name\");\n            entity.Property(e => e.CountryName)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"varchar(3)\")\n                .HasColumnName(\"country_name\");\n            entity.Property(e => e.Length)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnName(\"length\");\n            entity.Property(e => e.Traverse).HasColumnName(\"traverse\");\n\n            entity.HasOne(d => d.TraverseNavigation).WithMany(p => p.Rivers).HasForeignKey(d => d.Traverse);\n        });\n\n        modelBuilder.Entity<State>(entity =>\n        {\n            entity.HasKey(e => e.StateName);\n\n            entity.ToTable(\"state\");\n\n            entity.Property(e => e.StateName).HasColumnName(\"state_name\");\n            entity.Property(e => e.Area)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"double\")\n                .HasColumnName(\"area\");\n            entity.Property(e => e.Capital).HasColumnName(\"capital\");\n            entity.Property(e => e.CountryName)\n                .HasDefaultValue(\"\")\n                .HasColumnType(\"varchar(3)\")\n                .HasColumnName(\"country_name\");\n            entity.Property(e => e.Density)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"double\")\n                .HasColumnName(\"density\");\n            entity.Property(e => e.Population)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnName(\"population\");\n\n            entity.HasMany(d => d.Borders).WithMany(p => p.StateNames)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"BorderInfo\",\n                    r => r.HasOne<State>().WithMany()\n                        .HasForeignKey(\"Border\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<State>().WithMany()\n                        .HasForeignKey(\"StateName\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"Border\", \"StateName\");\n                        j.ToTable(\"border_info\");\n                        j.IndexerProperty<string>(\"Border\").HasColumnName(\"border\");\n                        j.IndexerProperty<string>(\"StateName\").HasColumnName(\"state_name\");\n                    });\n\n            entity.HasMany(d => d.StateNames).WithMany(p => p.Borders)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"BorderInfo\",\n                    r => r.HasOne<State>().WithMany()\n                        .HasForeignKey(\"StateName\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<State>().WithMany()\n                        .HasForeignKey(\"Border\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"Border\", \"StateName\");\n                        j.ToTable(\"border_info\");\n                        j.IndexerProperty<string>(\"Border\").HasColumnName(\"border\");\n                        j.IndexerProperty<string>(\"StateName\").HasColumnName(\"state_name\");\n                    });\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class City\n{\n    public string CityName { get; set; } = null!;\n\n    public int? Population { get; set; }\n\n    public string CountryName { get; set; } = null!;\n\n    public string StateName { get; set; } = null!;\n\n    public virtual State StateNameNavigation { get; set; } = null!;\n}",
      "public partial class Highlow\n{\n    public string StateName { get; set; } = null!;\n\n    public string? HighestElevation { get; set; }\n\n    public string? LowestPoint { get; set; }\n\n    public string? HighestPoint { get; set; }\n\n    public string? LowestElevation { get; set; }\n\n    public virtual State StateNameNavigation { get; set; } = null!;\n}",
      "public partial class Lake\n{\n    public string? LakeName { get; set; }\n\n    public double? Area { get; set; }\n\n    public string CountryName { get; set; } = null!;\n\n    public string? StateName { get; set; }\n}",
      "public partial class Mountain\n{\n    public string MountainName { get; set; } = null!;\n\n    public int? MountainAltitude { get; set; }\n\n    public string CountryName { get; set; } = null!;\n\n    public string StateName { get; set; } = null!;\n\n    public virtual State StateNameNavigation { get; set; } = null!;\n}",
      "public partial class River\n{\n    public string RiverName { get; set; } = null!;\n\n    public int? Length { get; set; }\n\n    public string CountryName { get; set; } = null!;\n\n    public string? Traverse { get; set; }\n\n    public virtual State? TraverseNavigation { get; set; }\n}",
      "public partial class State\n{\n    public string StateName { get; set; } = null!;\n\n    public int? Population { get; set; }\n\n    public double? Area { get; set; }\n\n    public string CountryName { get; set; } = null!;\n\n    public string? Capital { get; set; }\n\n    public double? Density { get; set; }\n\n    public virtual ICollection<City> Cities { get; set; } = new List<City>();\n\n    public virtual Highlow? Highlow { get; set; }\n\n    public virtual ICollection<Mountain> Mountains { get; set; } = new List<Mountain>();\n\n    public virtual ICollection<River> Rivers { get; set; } = new List<River>();\n\n    public virtual ICollection<State> Borders { get; set; } = new List<State>();\n\n    public virtual ICollection<State> StateNames { get; set; } = new List<State>();\n}"
    ]
  },
  "decoration_competition": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.decoration_competition;\n\npublic partial class DecorationCompetitionContext : DbContext\n{\n    public DecorationCompetitionContext()\n    {\n    }\n\n    public DecorationCompetitionContext(DbContextOptions<DecorationCompetitionContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<College> Colleges { get; set; }\n\n    public virtual DbSet<Member> Members { get; set; }\n\n    public virtual DbSet<Round> Rounds { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/decoration_competition.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<College>(entity =>\n        {\n            entity.ToTable(\"college\");\n\n            entity.Property(e => e.CollegeId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"College_ID\");\n            entity.Property(e => e.CollegeLocation).HasColumnName(\"College_Location\");\n            entity.Property(e => e.LeaderName).HasColumnName(\"Leader_Name\");\n        });\n\n        modelBuilder.Entity<Member>(entity =>\n        {\n            entity.ToTable(\"member\");\n\n            entity.Property(e => e.MemberId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Member_ID\");\n            entity.Property(e => e.CollegeId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"College_ID\");\n\n            entity.HasOne(d => d.College).WithMany(p => p.Members).HasForeignKey(d => d.CollegeId);\n        });\n\n        modelBuilder.Entity<Round>(entity =>\n        {\n            entity.HasKey(e => new { e.MemberId, e.RoundId });\n\n            entity.ToTable(\"round\");\n\n            entity.Property(e => e.MemberId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Member_ID\");\n            entity.Property(e => e.RoundId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Round_ID\");\n            entity.Property(e => e.DecorationTheme).HasColumnName(\"Decoration_Theme\");\n            entity.Property(e => e.RankInRound)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Rank_in_Round\");\n\n            entity.HasOne(d => d.Member).WithMany(p => p.Rounds)\n                .HasForeignKey(d => d.MemberId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class College\n{\n    public int CollegeId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? LeaderName { get; set; }\n\n    public string? CollegeLocation { get; set; }\n\n    public virtual ICollection<Member> Members { get; set; } = new List<Member>();\n}",
      "public partial class Member\n{\n    public int MemberId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Country { get; set; }\n\n    public int? CollegeId { get; set; }\n\n    public virtual College? College { get; set; }\n\n    public virtual ICollection<Round> Rounds { get; set; } = new List<Round>();\n}",
      "public partial class Round\n{\n    public int RoundId { get; set; }\n\n    public int MemberId { get; set; }\n\n    public string? DecorationTheme { get; set; }\n\n    public int? RankInRound { get; set; }\n\n    public virtual Member Member { get; set; } = null!;\n}"
    ]
  },
  "school_player": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.school_player;\n\npublic partial class SchoolPlayerContext : DbContext\n{\n    public SchoolPlayerContext()\n    {\n    }\n\n    public SchoolPlayerContext(DbContextOptions<SchoolPlayerContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Player> Players { get; set; }\n\n    public virtual DbSet<School> Schools { get; set; }\n\n    public virtual DbSet<SchoolDetail> SchoolDetails { get; set; }\n\n    public virtual DbSet<SchoolPerformance> SchoolPerformances { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/school_player.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Player>(entity =>\n        {\n            entity.ToTable(\"player\");\n\n            entity.Property(e => e.PlayerId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Player_ID\");\n            entity.Property(e => e.Age).HasColumnType(\"INT\");\n            entity.Property(e => e.Player1).HasColumnName(\"Player\");\n            entity.Property(e => e.SchoolId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"School_ID\");\n\n            entity.HasOne(d => d.School).WithMany(p => p.Players).HasForeignKey(d => d.SchoolId);\n        });\n\n        modelBuilder.Entity<School>(entity =>\n        {\n            entity.ToTable(\"school\");\n\n            entity.Property(e => e.SchoolId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"School_ID\");\n            entity.Property(e => e.BoysOrGirls).HasColumnName(\"Boys_or_Girls\");\n            entity.Property(e => e.DayOrBoarding).HasColumnName(\"Day_or_Boarding\");\n            entity.Property(e => e.School1).HasColumnName(\"School\");\n            entity.Property(e => e.SchoolColors).HasColumnName(\"School_Colors\");\n            entity.Property(e => e.YearEnteredCompetition).HasColumnName(\"Year_Entered_Competition\");\n        });\n\n        modelBuilder.Entity<SchoolDetail>(entity =>\n        {\n            entity.HasKey(e => e.SchoolId);\n\n            entity.ToTable(\"school_details\");\n\n            entity.Property(e => e.SchoolId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"School_ID\");\n\n            entity.HasOne(d => d.School).WithOne(p => p.SchoolDetail)\n                .HasForeignKey<SchoolDetail>(d => d.SchoolId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<SchoolPerformance>(entity =>\n        {\n            entity.HasKey(e => new { e.SchoolId, e.SchoolYear });\n\n            entity.ToTable(\"school_performance\");\n\n            entity.Property(e => e.SchoolId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"School_Id\");\n            entity.Property(e => e.SchoolYear).HasColumnName(\"School_Year\");\n            entity.Property(e => e.ClassA).HasColumnName(\"Class_A\");\n            entity.Property(e => e.ClassAa).HasColumnName(\"Class_AA\");\n\n            entity.HasOne(d => d.School).WithMany(p => p.SchoolPerformances)\n                .HasForeignKey(d => d.SchoolId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Player\n{\n    public int PlayerId { get; set; }\n\n    public string? Player1 { get; set; }\n\n    public string? Team { get; set; }\n\n    public int? Age { get; set; }\n\n    public string? Position { get; set; }\n\n    public int? SchoolId { get; set; }\n\n    public virtual School? School { get; set; }\n}",
      "public partial class School\n{\n    public int SchoolId { get; set; }\n\n    public string? School1 { get; set; }\n\n    public string? Location { get; set; }\n\n    public double? Enrollment { get; set; }\n\n    public double? Founded { get; set; }\n\n    public string? Denomination { get; set; }\n\n    public string? BoysOrGirls { get; set; }\n\n    public string? DayOrBoarding { get; set; }\n\n    public double? YearEnteredCompetition { get; set; }\n\n    public string? SchoolColors { get; set; }\n\n    public virtual ICollection<Player> Players { get; set; } = new List<Player>();\n\n    public virtual SchoolDetail? SchoolDetail { get; set; }\n\n    public virtual ICollection<SchoolPerformance> SchoolPerformances { get; set; } = new List<SchoolPerformance>();\n}",
      "public partial class SchoolDetail\n{\n    public int SchoolId { get; set; }\n\n    public string? Nickname { get; set; }\n\n    public string? Colors { get; set; }\n\n    public string? League { get; set; }\n\n    public string? Class { get; set; }\n\n    public string? Division { get; set; }\n\n    public virtual School School { get; set; } = null!;\n}",
      "public partial class SchoolPerformance\n{\n    public int SchoolId { get; set; }\n\n    public string SchoolYear { get; set; } = null!;\n\n    public string? ClassA { get; set; }\n\n    public string? ClassAa { get; set; }\n\n    public virtual School School { get; set; } = null!;\n}"
    ]
  },
  "sakila_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.sakila_1;\n\npublic partial class Sakila1Context : DbContext\n{\n    public Sakila1Context()\n    {\n    }\n\n    public Sakila1Context(DbContextOptions<Sakila1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Actor> Actors { get; set; }\n\n    public virtual DbSet<Address> Addresses { get; set; }\n\n    public virtual DbSet<Category> Categories { get; set; }\n\n    public virtual DbSet<City> Cities { get; set; }\n\n    public virtual DbSet<Country> Countries { get; set; }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<Film> Films { get; set; }\n\n    public virtual DbSet<FilmActor> FilmActors { get; set; }\n\n    public virtual DbSet<FilmCategory> FilmCategories { get; set; }\n\n    public virtual DbSet<FilmText> FilmTexts { get; set; }\n\n    public virtual DbSet<Inventory> Inventories { get; set; }\n\n    public virtual DbSet<Language> Languages { get; set; }\n\n    public virtual DbSet<Payment> Payments { get; set; }\n\n    public virtual DbSet<Rental> Rentals { get; set; }\n\n    public virtual DbSet<Staff> Staff { get; set; }\n\n    public virtual DbSet<Store> Stores { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/sakila_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Actor>(entity =>\n        {\n            entity.ToTable(\"actor\");\n\n            entity.Property(e => e.ActorId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"actor_id\");\n            entity.Property(e => e.FirstName)\n                .HasColumnType(\"VARCHAR(45)\")\n                .HasColumnName(\"first_name\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"VARCHAR(45)\")\n                .HasColumnName(\"last_name\");\n            entity.Property(e => e.LastUpdate)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"last_update\");\n        });\n\n        modelBuilder.Entity<Address>(entity =>\n        {\n            entity.ToTable(\"address\");\n\n            entity.Property(e => e.AddressId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"address_id\");\n            entity.Property(e => e.Address1)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"address\");\n            entity.Property(e => e.Address2)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"address2\");\n            entity.Property(e => e.CityId)\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"city_id\");\n            entity.Property(e => e.District)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"district\");\n            entity.Property(e => e.LastUpdate)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"last_update\");\n            entity.Property(e => e.Phone)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"phone\");\n            entity.Property(e => e.PostalCode)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"postal_code\");\n\n            entity.HasOne(d => d.City).WithMany(p => p.Addresses)\n                .HasForeignKey(d => d.CityId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Category>(entity =>\n        {\n            entity.ToTable(\"category\");\n\n            entity.Property(e => e.CategoryId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"TINYINT UNSIGNED\")\n                .HasColumnName(\"category_id\");\n            entity.Property(e => e.LastUpdate)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"last_update\");\n            entity.Property(e => e.Name)\n                .HasColumnType(\"VARCHAR(25)\")\n                .HasColumnName(\"name\");\n        });\n\n        modelBuilder.Entity<City>(entity =>\n        {\n            entity.ToTable(\"city\");\n\n            entity.Property(e => e.CityId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"city_id\");\n            entity.Property(e => e.City1)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"city\");\n            entity.Property(e => e.CountryId)\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"country_id\");\n            entity.Property(e => e.LastUpdate)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"last_update\");\n\n            entity.HasOne(d => d.Country).WithMany(p => p.Cities)\n                .HasForeignKey(d => d.CountryId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Country>(entity =>\n        {\n            entity.ToTable(\"country\");\n\n            entity.Property(e => e.CountryId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"country_id\");\n            entity.Property(e => e.Country1)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"country\");\n            entity.Property(e => e.LastUpdate)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"last_update\");\n        });\n\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.ToTable(\"customer\");\n\n            entity.Property(e => e.CustomerId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"customer_id\");\n            entity.Property(e => e.Active)\n                .IsRequired()\n                .HasDefaultValueSql(\"TRUE\")\n                .HasColumnType(\"BOOLEAN\")\n                .HasColumnName(\"active\");\n            entity.Property(e => e.AddressId)\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"address_id\");\n            entity.Property(e => e.CreateDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"create_date\");\n            entity.Property(e => e.Email)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"email\");\n            entity.Property(e => e.FirstName)\n                .HasColumnType(\"VARCHAR(45)\")\n                .HasColumnName(\"first_name\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"VARCHAR(45)\")\n                .HasColumnName(\"last_name\");\n            entity.Property(e => e.LastUpdate)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"last_update\");\n            entity.Property(e => e.StoreId)\n                .HasColumnType(\"TINYINT UNSIGNED\")\n                .HasColumnName(\"store_id\");\n\n            entity.HasOne(d => d.Address).WithMany(p => p.Customers)\n                .HasForeignKey(d => d.AddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Store).WithMany(p => p.Customers)\n                .HasForeignKey(d => d.StoreId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Film>(entity =>\n        {\n            entity.ToTable(\"film\");\n\n            entity.Property(e => e.FilmId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"film_id\");\n            entity.Property(e => e.Description)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnName(\"description\");\n            entity.Property(e => e.LanguageId)\n                .HasColumnType(\"TINYINT UNSIGNED\")\n                .HasColumnName(\"language_id\");\n            entity.Property(e => e.LastUpdate)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"last_update\");\n            entity.Property(e => e.Length)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"length\");\n            entity.Property(e => e.OriginalLanguageId)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"TINYINT UNSIGNED\")\n                .HasColumnName(\"original_language_id\");\n            entity.Property(e => e.Rating)\n                .HasDefaultValue(\"G\")\n                .HasColumnName(\"rating\");\n            entity.Property(e => e.ReleaseYear)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"YEAR\")\n                .HasColumnName(\"release_year\");\n            entity.Property(e => e.RentalDuration)\n                .HasDefaultValue(3)\n                .HasColumnType(\"TINYINT UNSIGNED\")\n                .HasColumnName(\"rental_duration\");\n            entity.Property(e => e.RentalRate)\n                .HasDefaultValueSql(\"4.99\")\n                .HasColumnType(\"DECIMAL(4,2)\")\n                .HasColumnName(\"rental_rate\");\n            entity.Property(e => e.ReplacementCost)\n                .HasDefaultValueSql(\"19.99\")\n                .HasColumnType(\"DECIMAL(5,2)\")\n                .HasColumnName(\"replacement_cost\");\n            entity.Property(e => e.SpecialFeatures)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnName(\"special_features\");\n            entity.Property(e => e.Title)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"title\");\n\n            entity.HasOne(d => d.Language).WithMany(p => p.FilmLanguages)\n                .HasForeignKey(d => d.LanguageId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.OriginalLanguage).WithMany(p => p.FilmOriginalLanguages).HasForeignKey(d => d.OriginalLanguageId);\n        });\n\n        modelBuilder.Entity<FilmActor>(entity =>\n        {\n            entity.HasKey(e => new { e.ActorId, e.FilmId });\n\n            entity.ToTable(\"film_actor\");\n\n            entity.Property(e => e.ActorId)\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"actor_id\");\n            entity.Property(e => e.FilmId)\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"film_id\");\n            entity.Property(e => e.LastUpdate)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"last_update\");\n\n            entity.HasOne(d => d.Actor).WithMany(p => p.FilmActors)\n                .HasForeignKey(d => d.ActorId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Film).WithMany(p => p.FilmActors)\n                .HasForeignKey(d => d.FilmId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<FilmCategory>(entity =>\n        {\n            entity.HasKey(e => new { e.FilmId, e.CategoryId });\n\n            entity.ToTable(\"film_category\");\n\n            entity.Property(e => e.FilmId)\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"film_id\");\n            entity.Property(e => e.CategoryId)\n                .HasColumnType(\"TINYINT UNSIGNED\")\n                .HasColumnName(\"category_id\");\n            entity.Property(e => e.LastUpdate)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"last_update\");\n\n            entity.HasOne(d => d.Category).WithMany(p => p.FilmCategories)\n                .HasForeignKey(d => d.CategoryId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Film).WithMany(p => p.FilmCategories)\n                .HasForeignKey(d => d.FilmId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<FilmText>(entity =>\n        {\n            entity.HasKey(e => e.FilmId);\n\n            entity.ToTable(\"film_text\");\n\n            entity.Property(e => e.FilmId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"SMALLINT\")\n                .HasColumnName(\"film_id\");\n            entity.Property(e => e.Description).HasColumnName(\"description\");\n            entity.Property(e => e.Title)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"title\");\n        });\n\n        modelBuilder.Entity<Inventory>(entity =>\n        {\n            entity.ToTable(\"inventory\");\n\n            entity.Property(e => e.InventoryId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"MEDIUMINT UNSIGNED\")\n                .HasColumnName(\"inventory_id\");\n            entity.Property(e => e.FilmId)\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"film_id\");\n            entity.Property(e => e.LastUpdate)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"last_update\");\n            entity.Property(e => e.StoreId)\n                .HasColumnType(\"TINYINT UNSIGNED\")\n                .HasColumnName(\"store_id\");\n\n            entity.HasOne(d => d.Film).WithMany(p => p.Inventories)\n                .HasForeignKey(d => d.FilmId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Store).WithMany(p => p.Inventories)\n                .HasForeignKey(d => d.StoreId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Language>(entity =>\n        {\n            entity.ToTable(\"language\");\n\n            entity.Property(e => e.LanguageId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"TINYINT UNSIGNED\")\n                .HasColumnName(\"language_id\");\n            entity.Property(e => e.LastUpdate)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"last_update\");\n            entity.Property(e => e.Name)\n                .HasColumnType(\"CHAR(20)\")\n                .HasColumnName(\"name\");\n        });\n\n        modelBuilder.Entity<Payment>(entity =>\n        {\n            entity.ToTable(\"payment\");\n\n            entity.Property(e => e.PaymentId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"payment_id\");\n            entity.Property(e => e.Amount)\n                .HasColumnType(\"DECIMAL(5,2)\")\n                .HasColumnName(\"amount\");\n            entity.Property(e => e.CustomerId)\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"customer_id\");\n            entity.Property(e => e.LastUpdate)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"last_update\");\n            entity.Property(e => e.PaymentDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"payment_date\");\n            entity.Property(e => e.RentalId)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"rental_id\");\n            entity.Property(e => e.StaffId)\n                .HasColumnType(\"TINYINT UNSIGNED\")\n                .HasColumnName(\"staff_id\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.Payments)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Rental).WithMany(p => p.Payments).HasForeignKey(d => d.RentalId);\n\n            entity.HasOne(d => d.Staff).WithMany(p => p.Payments)\n                .HasForeignKey(d => d.StaffId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Rental>(entity =>\n        {\n            entity.ToTable(\"rental\");\n\n            entity.Property(e => e.RentalId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"rental_id\");\n            entity.Property(e => e.CustomerId)\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"customer_id\");\n            entity.Property(e => e.InventoryId)\n                .HasColumnType(\"MEDIUMINT UNSIGNED\")\n                .HasColumnName(\"inventory_id\");\n            entity.Property(e => e.LastUpdate)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"last_update\");\n            entity.Property(e => e.RentalDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"rental_date\");\n            entity.Property(e => e.ReturnDate)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"return_date\");\n            entity.Property(e => e.StaffId)\n                .HasColumnType(\"TINYINT UNSIGNED\")\n                .HasColumnName(\"staff_id\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.Rentals)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Inventory).WithMany(p => p.Rentals)\n                .HasForeignKey(d => d.InventoryId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Staff).WithMany(p => p.Rentals)\n                .HasForeignKey(d => d.StaffId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Staff>(entity =>\n        {\n            entity.ToTable(\"staff\");\n\n            entity.Property(e => e.StaffId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"TINYINT UNSIGNED\")\n                .HasColumnName(\"staff_id\");\n            entity.Property(e => e.Active)\n                .IsRequired()\n                .HasDefaultValueSql(\"TRUE\")\n                .HasColumnType(\"BOOLEAN\")\n                .HasColumnName(\"active\");\n            entity.Property(e => e.AddressId)\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"address_id\");\n            entity.Property(e => e.Email)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"email\");\n            entity.Property(e => e.FirstName)\n                .HasColumnType(\"VARCHAR(45)\")\n                .HasColumnName(\"first_name\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"VARCHAR(45)\")\n                .HasColumnName(\"last_name\");\n            entity.Property(e => e.LastUpdate)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"last_update\");\n            entity.Property(e => e.Password)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"password\");\n            entity.Property(e => e.Picture)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnName(\"picture\");\n            entity.Property(e => e.StoreId)\n                .HasColumnType(\"TINYINT UNSIGNED\")\n                .HasColumnName(\"store_id\");\n            entity.Property(e => e.Username)\n                .HasColumnType(\"VARCHAR(16)\")\n                .HasColumnName(\"username\");\n\n            entity.HasOne(d => d.Address).WithMany(p => p.Staff)\n                .HasForeignKey(d => d.AddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Store>(entity =>\n        {\n            entity.ToTable(\"store\");\n\n            entity.Property(e => e.StoreId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"TINYINT UNSIGNED\")\n                .HasColumnName(\"store_id\");\n            entity.Property(e => e.AddressId)\n                .HasColumnType(\"SMALLINT UNSIGNED\")\n                .HasColumnName(\"address_id\");\n            entity.Property(e => e.LastUpdate)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"last_update\");\n            entity.Property(e => e.ManagerStaffId)\n                .HasColumnType(\"TINYINT UNSIGNED\")\n                .HasColumnName(\"manager_staff_id\");\n\n            entity.HasOne(d => d.Address).WithMany(p => p.Stores)\n                .HasForeignKey(d => d.AddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.ManagerStaff).WithMany(p => p.Stores)\n                .HasForeignKey(d => d.ManagerStaffId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Actor\n{\n    public int ActorId { get; set; }\n\n    public string FirstName { get; set; } = null!;\n\n    public string LastName { get; set; } = null!;\n\n    public DateTime LastUpdate { get; set; }\n\n    public virtual ICollection<FilmActor> FilmActors { get; set; } = new List<FilmActor>();\n}",
      "public partial class Address\n{\n    public int AddressId { get; set; }\n\n    public string Address1 { get; set; } = null!;\n\n    public string? Address2 { get; set; }\n\n    public string District { get; set; } = null!;\n\n    public int CityId { get; set; }\n\n    public string? PostalCode { get; set; }\n\n    public string Phone { get; set; } = null!;\n\n    public DateTime LastUpdate { get; set; }\n\n    public virtual City City { get; set; } = null!;\n\n    public virtual ICollection<Customer> Customers { get; set; } = new List<Customer>();\n\n    public virtual ICollection<Staff> Staff { get; set; } = new List<Staff>();\n\n    public virtual ICollection<Store> Stores { get; set; } = new List<Store>();\n}",
      "public partial class Category\n{\n    public int CategoryId { get; set; }\n\n    public string Name { get; set; } = null!;\n\n    public DateTime LastUpdate { get; set; }\n\n    public virtual ICollection<FilmCategory> FilmCategories { get; set; } = new List<FilmCategory>();\n}",
      "public partial class City\n{\n    public int CityId { get; set; }\n\n    public string City1 { get; set; } = null!;\n\n    public int CountryId { get; set; }\n\n    public DateTime LastUpdate { get; set; }\n\n    public virtual ICollection<Address> Addresses { get; set; } = new List<Address>();\n\n    public virtual Country Country { get; set; } = null!;\n}",
      "public partial class Country\n{\n    public int CountryId { get; set; }\n\n    public string Country1 { get; set; } = null!;\n\n    public DateTime LastUpdate { get; set; }\n\n    public virtual ICollection<City> Cities { get; set; } = new List<City>();\n}",
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public int StoreId { get; set; }\n\n    public string FirstName { get; set; } = null!;\n\n    public string LastName { get; set; } = null!;\n\n    public string? Email { get; set; }\n\n    public int AddressId { get; set; }\n\n    public bool? Active { get; set; }\n\n    public DateTime CreateDate { get; set; }\n\n    public DateTime? LastUpdate { get; set; }\n\n    public virtual Address Address { get; set; } = null!;\n\n    public virtual ICollection<Payment> Payments { get; set; } = new List<Payment>();\n\n    public virtual ICollection<Rental> Rentals { get; set; } = new List<Rental>();\n\n    public virtual Store Store { get; set; } = null!;\n}",
      "public partial class Film\n{\n    public int FilmId { get; set; }\n\n    public string Title { get; set; } = null!;\n\n    public string? Description { get; set; }\n\n    public int? ReleaseYear { get; set; }\n\n    public int LanguageId { get; set; }\n\n    public int? OriginalLanguageId { get; set; }\n\n    public int RentalDuration { get; set; }\n\n    public decimal RentalRate { get; set; }\n\n    public int? Length { get; set; }\n\n    public decimal ReplacementCost { get; set; }\n\n    public string? Rating { get; set; }\n\n    public string? SpecialFeatures { get; set; }\n\n    public DateTime LastUpdate { get; set; }\n\n    public virtual ICollection<FilmActor> FilmActors { get; set; } = new List<FilmActor>();\n\n    public virtual ICollection<FilmCategory> FilmCategories { get; set; } = new List<FilmCategory>();\n\n    public virtual ICollection<Inventory> Inventories { get; set; } = new List<Inventory>();\n\n    public virtual Language Language { get; set; } = null!;\n\n    public virtual Language? OriginalLanguage { get; set; }\n}",
      "public partial class FilmActor\n{\n    public int ActorId { get; set; }\n\n    public int FilmId { get; set; }\n\n    public DateTime LastUpdate { get; set; }\n\n    public virtual Actor Actor { get; set; } = null!;\n\n    public virtual Film Film { get; set; } = null!;\n}",
      "public partial class FilmCategory\n{\n    public int FilmId { get; set; }\n\n    public int CategoryId { get; set; }\n\n    public DateTime LastUpdate { get; set; }\n\n    public virtual Category Category { get; set; } = null!;\n\n    public virtual Film Film { get; set; } = null!;\n}",
      "public partial class FilmText\n{\n    public short FilmId { get; set; }\n\n    public string Title { get; set; } = null!;\n\n    public string? Description { get; set; }\n}",
      "public partial class Inventory\n{\n    public int InventoryId { get; set; }\n\n    public int FilmId { get; set; }\n\n    public int StoreId { get; set; }\n\n    public DateTime LastUpdate { get; set; }\n\n    public virtual Film Film { get; set; } = null!;\n\n    public virtual ICollection<Rental> Rentals { get; set; } = new List<Rental>();\n\n    public virtual Store Store { get; set; } = null!;\n}",
      "public partial class Language\n{\n    public int LanguageId { get; set; }\n\n    public string Name { get; set; } = null!;\n\n    public DateTime LastUpdate { get; set; }\n\n    public virtual ICollection<Film> FilmLanguages { get; set; } = new List<Film>();\n\n    public virtual ICollection<Film> FilmOriginalLanguages { get; set; } = new List<Film>();\n}",
      "public partial class Payment\n{\n    public int PaymentId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public int StaffId { get; set; }\n\n    public int? RentalId { get; set; }\n\n    public decimal Amount { get; set; }\n\n    public DateTime PaymentDate { get; set; }\n\n    public DateTime? LastUpdate { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n\n    public virtual Rental? Rental { get; set; }\n\n    public virtual Staff Staff { get; set; } = null!;\n}",
      "public partial class Rental\n{\n    public int RentalId { get; set; }\n\n    public DateTime RentalDate { get; set; }\n\n    public int InventoryId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public DateTime? ReturnDate { get; set; }\n\n    public int StaffId { get; set; }\n\n    public DateTime LastUpdate { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n\n    public virtual Inventory Inventory { get; set; } = null!;\n\n    public virtual ICollection<Payment> Payments { get; set; } = new List<Payment>();\n\n    public virtual Staff Staff { get; set; } = null!;\n}",
      "public partial class Staff\n{\n    public int StaffId { get; set; }\n\n    public string FirstName { get; set; } = null!;\n\n    public string LastName { get; set; } = null!;\n\n    public int AddressId { get; set; }\n\n    public byte[]? Picture { get; set; }\n\n    public string? Email { get; set; }\n\n    public int StoreId { get; set; }\n\n    public bool? Active { get; set; }\n\n    public string Username { get; set; } = null!;\n\n    public string? Password { get; set; }\n\n    public DateTime LastUpdate { get; set; }\n\n    public virtual Address Address { get; set; } = null!;\n\n    public virtual ICollection<Payment> Payments { get; set; } = new List<Payment>();\n\n    public virtual ICollection<Rental> Rentals { get; set; } = new List<Rental>();\n\n    public virtual ICollection<Store> Stores { get; set; } = new List<Store>();\n}",
      "public partial class Store\n{\n    public int StoreId { get; set; }\n\n    public int ManagerStaffId { get; set; }\n\n    public int AddressId { get; set; }\n\n    public DateTime LastUpdate { get; set; }\n\n    public virtual Address Address { get; set; } = null!;\n\n    public virtual ICollection<Customer> Customers { get; set; } = new List<Customer>();\n\n    public virtual ICollection<Inventory> Inventories { get; set; } = new List<Inventory>();\n\n    public virtual Staff ManagerStaff { get; set; } = null!;\n}"
    ]
  },
  "customers_and_invoices": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.customers_and_invoices;\n\npublic partial class CustomersAndInvoicesContext : DbContext\n{\n    public CustomersAndInvoicesContext()\n    {\n    }\n\n    public CustomersAndInvoicesContext(DbContextOptions<CustomersAndInvoicesContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Account> Accounts { get; set; }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<FinancialTransaction> FinancialTransactions { get; set; }\n\n    public virtual DbSet<Invoice> Invoices { get; set; }\n\n    public virtual DbSet<InvoiceLineItem> InvoiceLineItems { get; set; }\n\n    public virtual DbSet<Order> Orders { get; set; }\n\n    public virtual DbSet<OrderItem> OrderItems { get; set; }\n\n    public virtual DbSet<Product> Products { get; set; }\n\n    public virtual DbSet<ProductCategory> ProductCategories { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/customers_and_invoices.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Account>(entity =>\n        {\n            entity.Property(e => e.AccountId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"account_id\");\n            entity.Property(e => e.AccountName)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"account_name\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.DateAccountOpened)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_account_opened\");\n            entity.Property(e => e.OtherAccountDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_account_details\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.Accounts)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.Property(e => e.CustomerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"customer_id\");\n            entity.Property(e => e.Country)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"country\");\n            entity.Property(e => e.CustomerFirstName)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"customer_first_name\");\n            entity.Property(e => e.CustomerLastName)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"customer_last_name\");\n            entity.Property(e => e.CustomerMiddleInitial)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"customer_middle_initial\");\n            entity.Property(e => e.EmailAddress)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"email_address\");\n            entity.Property(e => e.Gender)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"gender\");\n            entity.Property(e => e.LoginName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"login_name\");\n            entity.Property(e => e.LoginPassword)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"login_password\");\n            entity.Property(e => e.PhoneNumber)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"phone_number\");\n            entity.Property(e => e.StateCountyProvince)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"state_county_province\");\n            entity.Property(e => e.TownCity)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"town_city\");\n        });\n\n        modelBuilder.Entity<FinancialTransaction>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Financial_Transactions\");\n\n            entity.Property(e => e.AccountId).HasColumnName(\"account_id\");\n            entity.Property(e => e.InvoiceNumber).HasColumnName(\"invoice_number\");\n            entity.Property(e => e.OtherTransactionDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_transaction_details\");\n            entity.Property(e => e.TransactionAmount)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"transaction_amount\");\n            entity.Property(e => e.TransactionComment)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"transaction_comment\");\n            entity.Property(e => e.TransactionDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"transaction_date\");\n            entity.Property(e => e.TransactionId).HasColumnName(\"transaction_id\");\n            entity.Property(e => e.TransactionType)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"transaction_type\");\n\n            entity.HasOne(d => d.Account).WithMany()\n                .HasForeignKey(d => d.AccountId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.InvoiceNumberNavigation).WithMany().HasForeignKey(d => d.InvoiceNumber);\n        });\n\n        modelBuilder.Entity<Invoice>(entity =>\n        {\n            entity.HasKey(e => e.InvoiceNumber);\n\n            entity.Property(e => e.InvoiceNumber)\n                .ValueGeneratedNever()\n                .HasColumnName(\"invoice_number\");\n            entity.Property(e => e.InvoiceDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"invoice_date\");\n            entity.Property(e => e.OrderId).HasColumnName(\"order_id\");\n\n            entity.HasOne(d => d.Order).WithMany(p => p.Invoices)\n                .HasForeignKey(d => d.OrderId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<InvoiceLineItem>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Invoice_Line_Items\");\n\n            entity.Property(e => e.DerivedProductCost)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"derived_product_cost\");\n            entity.Property(e => e.DerivedTotalCost)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"derived_total_cost\");\n            entity.Property(e => e.DerivedVatPayable)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"derived_vat_payable\");\n            entity.Property(e => e.InvoiceNumber).HasColumnName(\"invoice_number\");\n            entity.Property(e => e.OrderItemId).HasColumnName(\"order_item_id\");\n            entity.Property(e => e.ProductId).HasColumnName(\"product_id\");\n            entity.Property(e => e.ProductPrice)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"product_price\");\n            entity.Property(e => e.ProductQuantity)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"product_quantity\");\n            entity.Property(e => e.ProductTitle)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"product_title\");\n\n            entity.HasOne(d => d.InvoiceNumberNavigation).WithMany()\n                .HasForeignKey(d => d.InvoiceNumber)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.OrderItem).WithMany()\n                .HasForeignKey(d => d.OrderItemId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Product).WithMany()\n                .HasForeignKey(d => d.ProductId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Order>(entity =>\n        {\n            entity.Property(e => e.OrderId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"order_id\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.DateOrderPlaced)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_order_placed\");\n            entity.Property(e => e.OrderDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"order_details\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.Orders)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<OrderItem>(entity =>\n        {\n            entity.ToTable(\"Order_Items\");\n\n            entity.Property(e => e.OrderItemId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"order_item_id\");\n            entity.Property(e => e.OrderId).HasColumnName(\"order_id\");\n            entity.Property(e => e.OtherOrderItemDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_order_item_details\");\n            entity.Property(e => e.ProductId).HasColumnName(\"product_id\");\n            entity.Property(e => e.ProductQuantity)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"product_quantity\");\n\n            entity.HasOne(d => d.Order).WithMany(p => p.OrderItems)\n                .HasForeignKey(d => d.OrderId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Product).WithMany(p => p.OrderItems)\n                .HasForeignKey(d => d.ProductId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Product>(entity =>\n        {\n            entity.Property(e => e.ProductId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"product_id\");\n            entity.Property(e => e.ParentProductId).HasColumnName(\"parent_product_id\");\n            entity.Property(e => e.ProductColor)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"product_color\");\n            entity.Property(e => e.ProductName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"product_name\");\n            entity.Property(e => e.ProductSize)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"product_size\");\n            entity.Property(e => e.ProductionTypeCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"production_type_code\");\n            entity.Property(e => e.UnitPrice)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"unit_price\");\n\n            entity.HasOne(d => d.ProductionTypeCodeNavigation).WithMany(p => p.Products)\n                .HasForeignKey(d => d.ProductionTypeCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ProductCategory>(entity =>\n        {\n            entity.HasKey(e => e.ProductionTypeCode);\n\n            entity.ToTable(\"Product_Categories\");\n\n            entity.Property(e => e.ProductionTypeCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"production_type_code\");\n            entity.Property(e => e.ProductTypeDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"product_type_description\");\n            entity.Property(e => e.VatRating)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"vat_rating\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Account\n{\n    public int AccountId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public DateTime? DateAccountOpened { get; set; }\n\n    public string? AccountName { get; set; }\n\n    public string? OtherAccountDetails { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n}",
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public string? CustomerFirstName { get; set; }\n\n    public string? CustomerMiddleInitial { get; set; }\n\n    public string? CustomerLastName { get; set; }\n\n    public string? Gender { get; set; }\n\n    public string? EmailAddress { get; set; }\n\n    public string? LoginName { get; set; }\n\n    public string? LoginPassword { get; set; }\n\n    public string? PhoneNumber { get; set; }\n\n    public string? TownCity { get; set; }\n\n    public string? StateCountyProvince { get; set; }\n\n    public string? Country { get; set; }\n\n    public virtual ICollection<Account> Accounts { get; set; } = new List<Account>();\n\n    public virtual ICollection<Order> Orders { get; set; } = new List<Order>();\n}",
      "public partial class FinancialTransaction\n{\n    public int TransactionId { get; set; }\n\n    public int AccountId { get; set; }\n\n    public int? InvoiceNumber { get; set; }\n\n    public string TransactionType { get; set; } = null!;\n\n    public DateTime? TransactionDate { get; set; }\n\n    public decimal? TransactionAmount { get; set; }\n\n    public string? TransactionComment { get; set; }\n\n    public string? OtherTransactionDetails { get; set; }\n\n    public virtual Account Account { get; set; } = null!;\n\n    public virtual Invoice? InvoiceNumberNavigation { get; set; }\n}",
      "public partial class Invoice\n{\n    public int InvoiceNumber { get; set; }\n\n    public int OrderId { get; set; }\n\n    public DateTime? InvoiceDate { get; set; }\n\n    public virtual Order Order { get; set; } = null!;\n}",
      "public partial class InvoiceLineItem\n{\n    public int OrderItemId { get; set; }\n\n    public int InvoiceNumber { get; set; }\n\n    public int ProductId { get; set; }\n\n    public string? ProductTitle { get; set; }\n\n    public string? ProductQuantity { get; set; }\n\n    public decimal? ProductPrice { get; set; }\n\n    public decimal? DerivedProductCost { get; set; }\n\n    public decimal? DerivedVatPayable { get; set; }\n\n    public decimal? DerivedTotalCost { get; set; }\n\n    public virtual Invoice InvoiceNumberNavigation { get; set; } = null!;\n\n    public virtual OrderItem OrderItem { get; set; } = null!;\n\n    public virtual Product Product { get; set; } = null!;\n}",
      "public partial class Order\n{\n    public int OrderId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public DateTime DateOrderPlaced { get; set; }\n\n    public string? OrderDetails { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n\n    public virtual ICollection<Invoice> Invoices { get; set; } = new List<Invoice>();\n\n    public virtual ICollection<OrderItem> OrderItems { get; set; } = new List<OrderItem>();\n}",
      "public partial class OrderItem\n{\n    public int OrderItemId { get; set; }\n\n    public int OrderId { get; set; }\n\n    public int ProductId { get; set; }\n\n    public string? ProductQuantity { get; set; }\n\n    public string? OtherOrderItemDetails { get; set; }\n\n    public virtual Order Order { get; set; } = null!;\n\n    public virtual Product Product { get; set; } = null!;\n}",
      "public partial class Product\n{\n    public int ProductId { get; set; }\n\n    public int? ParentProductId { get; set; }\n\n    public string ProductionTypeCode { get; set; } = null!;\n\n    public decimal? UnitPrice { get; set; }\n\n    public string? ProductName { get; set; }\n\n    public string? ProductColor { get; set; }\n\n    public string? ProductSize { get; set; }\n\n    public virtual ICollection<OrderItem> OrderItems { get; set; } = new List<OrderItem>();\n\n    public virtual ProductCategory ProductionTypeCodeNavigation { get; set; } = null!;\n}",
      "public partial class ProductCategory\n{\n    public string ProductionTypeCode { get; set; } = null!;\n\n    public string? ProductTypeDescription { get; set; }\n\n    public decimal? VatRating { get; set; }\n\n    public virtual ICollection<Product> Products { get; set; } = new List<Product>();\n}"
    ]
  },
  "club_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.club_1;\n\npublic partial class Club1Context : DbContext\n{\n    public Club1Context()\n    {\n    }\n\n    public Club1Context(DbContextOptions<Club1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Club> Clubs { get; set; }\n\n    public virtual DbSet<MemberOfClub> MemberOfClubs { get; set; }\n\n    public virtual DbSet<Student> Students { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/club_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Club>(entity =>\n        {\n            entity.ToTable(\"Club\");\n\n            entity.Property(e => e.ClubId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"ClubID\");\n            entity.Property(e => e.ClubDesc).HasColumnType(\"VARCHAR(1024)\");\n            entity.Property(e => e.ClubLocation).HasColumnType(\"VARCHAR(40)\");\n            entity.Property(e => e.ClubName).HasColumnType(\"VARCHAR(40)\");\n        });\n\n        modelBuilder.Entity<MemberOfClub>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Member_of_club\");\n\n            entity.Property(e => e.ClubId).HasColumnName(\"ClubID\");\n            entity.Property(e => e.Position).HasColumnType(\"VARCHAR(40)\");\n            entity.Property(e => e.StuId).HasColumnName(\"StuID\");\n\n            entity.HasOne(d => d.Club).WithMany().HasForeignKey(d => d.ClubId);\n\n            entity.HasOne(d => d.Stu).WithMany().HasForeignKey(d => d.StuId);\n        });\n\n        modelBuilder.Entity<Student>(entity =>\n        {\n            entity.HasKey(e => e.StuId);\n\n            entity.ToTable(\"Student\");\n\n            entity.Property(e => e.StuId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"StuID\");\n            entity.Property(e => e.CityCode)\n                .HasColumnType(\"VARCHAR(3)\")\n                .HasColumnName(\"city_code\");\n            entity.Property(e => e.Fname).HasColumnType(\"VARCHAR(12)\");\n            entity.Property(e => e.Lname)\n                .HasColumnType(\"VARCHAR(12)\")\n                .HasColumnName(\"LName\");\n            entity.Property(e => e.Sex).HasColumnType(\"VARCHAR(1)\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Club\n{\n    public int ClubId { get; set; }\n\n    public string? ClubName { get; set; }\n\n    public string? ClubDesc { get; set; }\n\n    public string? ClubLocation { get; set; }\n}",
      "public partial class MemberOfClub\n{\n    public int? StuId { get; set; }\n\n    public int? ClubId { get; set; }\n\n    public string? Position { get; set; }\n\n    public virtual Club? Club { get; set; }\n\n    public virtual Student? Stu { get; set; }\n}",
      "public partial class Student\n{\n    public int StuId { get; set; }\n\n    public string? Lname { get; set; }\n\n    public string? Fname { get; set; }\n\n    public int? Age { get; set; }\n\n    public string? Sex { get; set; }\n\n    public int? Major { get; set; }\n\n    public int? Advisor { get; set; }\n\n    public string? CityCode { get; set; }\n}"
    ]
  },
  "tracking_share_transactions": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.tracking_share_transactions;\n\npublic partial class TrackingShareTransactionsContext : DbContext\n{\n    public TrackingShareTransactionsContext()\n    {\n    }\n\n    public TrackingShareTransactionsContext(DbContextOptions<TrackingShareTransactionsContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Investor> Investors { get; set; }\n\n    public virtual DbSet<Lot> Lots { get; set; }\n\n    public virtual DbSet<Purchase> Purchases { get; set; }\n\n    public virtual DbSet<RefTransactionType> RefTransactionTypes { get; set; }\n\n    public virtual DbSet<Sale> Sales { get; set; }\n\n    public virtual DbSet<Transaction> Transactions { get; set; }\n\n    public virtual DbSet<TransactionsLot> TransactionsLots { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/tracking_share_transactions.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Investor>(entity =>\n        {\n            entity.Property(e => e.InvestorId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"investor_id\");\n            entity.Property(e => e.InvestorDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Investor_details\");\n        });\n\n        modelBuilder.Entity<Lot>(entity =>\n        {\n            entity.Property(e => e.LotId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"lot_id\");\n            entity.Property(e => e.InvestorId).HasColumnName(\"investor_id\");\n            entity.Property(e => e.LotDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"lot_details\");\n\n            entity.HasOne(d => d.Investor).WithMany(p => p.Lots)\n                .HasForeignKey(d => d.InvestorId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Purchase>(entity =>\n        {\n            entity.HasNoKey();\n\n            entity.Property(e => e.PurchaseDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"purchase_details\");\n            entity.Property(e => e.PurchaseTransactionId).HasColumnName(\"purchase_transaction_id\");\n\n            entity.HasOne(d => d.PurchaseTransaction).WithMany()\n                .HasForeignKey(d => d.PurchaseTransactionId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<RefTransactionType>(entity =>\n        {\n            entity.HasKey(e => e.TransactionTypeCode);\n\n            entity.ToTable(\"Ref_Transaction_Types\");\n\n            entity.Property(e => e.TransactionTypeCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"transaction_type_code\");\n            entity.Property(e => e.TransactionTypeDescription)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"transaction_type_description\");\n        });\n\n        modelBuilder.Entity<Sale>(entity =>\n        {\n            entity.HasKey(e => e.SalesTransactionId);\n\n            entity.Property(e => e.SalesTransactionId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"sales_transaction_id\");\n            entity.Property(e => e.SalesDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"sales_details\");\n\n            entity.HasOne(d => d.SalesTransaction).WithOne(p => p.Sale)\n                .HasForeignKey<Sale>(d => d.SalesTransactionId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Transaction>(entity =>\n        {\n            entity.Property(e => e.TransactionId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"transaction_id\");\n            entity.Property(e => e.AmountOfTransaction)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"amount_of_transaction\");\n            entity.Property(e => e.DateOfTransaction)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_of_transaction\");\n            entity.Property(e => e.InvestorId).HasColumnName(\"investor_id\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n            entity.Property(e => e.ShareCount)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"share_count\");\n            entity.Property(e => e.TransactionTypeCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"transaction_type_code\");\n\n            entity.HasOne(d => d.Investor).WithMany(p => p.Transactions)\n                .HasForeignKey(d => d.InvestorId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.TransactionTypeCodeNavigation).WithMany(p => p.Transactions)\n                .HasForeignKey(d => d.TransactionTypeCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<TransactionsLot>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Transactions_Lots\");\n\n            entity.Property(e => e.LotId).HasColumnName(\"lot_id\");\n            entity.Property(e => e.TransactionId).HasColumnName(\"transaction_id\");\n\n            entity.HasOne(d => d.Lot).WithMany()\n                .HasForeignKey(d => d.LotId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Transaction).WithMany()\n                .HasForeignKey(d => d.TransactionId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Investor\n{\n    public int InvestorId { get; set; }\n\n    public string? InvestorDetails { get; set; }\n\n    public virtual ICollection<Lot> Lots { get; set; } = new List<Lot>();\n\n    public virtual ICollection<Transaction> Transactions { get; set; } = new List<Transaction>();\n}",
      "public partial class Lot\n{\n    public int LotId { get; set; }\n\n    public int InvestorId { get; set; }\n\n    public string? LotDetails { get; set; }\n\n    public virtual Investor Investor { get; set; } = null!;\n}",
      "public partial class Purchase\n{\n    public int PurchaseTransactionId { get; set; }\n\n    public string PurchaseDetails { get; set; } = null!;\n\n    public virtual Transaction PurchaseTransaction { get; set; } = null!;\n}",
      "public partial class RefTransactionType\n{\n    public string TransactionTypeCode { get; set; } = null!;\n\n    public string TransactionTypeDescription { get; set; } = null!;\n\n    public virtual ICollection<Transaction> Transactions { get; set; } = new List<Transaction>();\n}",
      "public partial class Sale\n{\n    public int SalesTransactionId { get; set; }\n\n    public string? SalesDetails { get; set; }\n\n    public virtual Transaction SalesTransaction { get; set; } = null!;\n}",
      "public partial class Transaction\n{\n    public int TransactionId { get; set; }\n\n    public int InvestorId { get; set; }\n\n    public string TransactionTypeCode { get; set; } = null!;\n\n    public DateTime? DateOfTransaction { get; set; }\n\n    public decimal? AmountOfTransaction { get; set; }\n\n    public string? ShareCount { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual Investor Investor { get; set; } = null!;\n\n    public virtual Sale? Sale { get; set; }\n\n    public virtual RefTransactionType TransactionTypeCodeNavigation { get; set; } = null!;\n}",
      "public partial class TransactionsLot\n{\n    public int TransactionId { get; set; }\n\n    public int LotId { get; set; }\n\n    public virtual Lot Lot { get; set; } = null!;\n\n    public virtual Transaction Transaction { get; set; } = null!;\n}"
    ]
  },
  "college_2": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.college_2;\n\npublic partial class College2Context : DbContext\n{\n    public College2Context()\n    {\n    }\n\n    public College2Context(DbContextOptions<College2Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Advisor> Advisors { get; set; }\n\n    public virtual DbSet<Classroom> Classrooms { get; set; }\n\n    public virtual DbSet<Course> Courses { get; set; }\n\n    public virtual DbSet<Department> Departments { get; set; }\n\n    public virtual DbSet<Instructor> Instructors { get; set; }\n\n    public virtual DbSet<Section> Sections { get; set; }\n\n    public virtual DbSet<Student> Students { get; set; }\n\n    public virtual DbSet<Take> Takes { get; set; }\n\n    public virtual DbSet<TimeSlot> TimeSlots { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/college_2.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Advisor>(entity =>\n        {\n            entity.HasKey(e => e.SId);\n\n            entity.ToTable(\"advisor\");\n\n            entity.Property(e => e.SId)\n                .HasColumnType(\"varchar(5)\")\n                .HasColumnName(\"s_ID\");\n            entity.Property(e => e.IId)\n                .HasColumnType(\"varchar(5)\")\n                .HasColumnName(\"i_ID\");\n\n            entity.HasOne(d => d.IIdNavigation).WithMany(p => p.Advisors)\n                .HasForeignKey(d => d.IId)\n                .OnDelete(DeleteBehavior.SetNull);\n\n            entity.HasOne(d => d.SIdNavigation).WithOne(p => p.Advisor).HasForeignKey<Advisor>(d => d.SId);\n        });\n\n        modelBuilder.Entity<Classroom>(entity =>\n        {\n            entity.HasKey(e => new { e.Building, e.RoomNumber });\n\n            entity.ToTable(\"classroom\");\n\n            entity.Property(e => e.Building)\n                .HasColumnType(\"varchar(15)\")\n                .HasColumnName(\"building\");\n            entity.Property(e => e.RoomNumber)\n                .HasColumnType(\"varchar(7)\")\n                .HasColumnName(\"room_number\");\n            entity.Property(e => e.Capacity)\n                .HasColumnType(\"numeric(4,0)\")\n                .HasColumnName(\"capacity\");\n        });\n\n        modelBuilder.Entity<Course>(entity =>\n        {\n            entity.ToTable(\"course\");\n\n            entity.Property(e => e.CourseId)\n                .HasColumnType(\"varchar(8)\")\n                .HasColumnName(\"course_id\");\n            entity.Property(e => e.Credits)\n                .HasColumnType(\"numeric(2,0)\")\n                .HasColumnName(\"credits\");\n            entity.Property(e => e.DeptName)\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"dept_name\");\n            entity.Property(e => e.Title)\n                .HasColumnType(\"varchar(50)\")\n                .HasColumnName(\"title\");\n\n            entity.HasOne(d => d.DeptNameNavigation).WithMany(p => p.Courses)\n                .HasForeignKey(d => d.DeptName)\n                .OnDelete(DeleteBehavior.SetNull);\n\n            entity.HasMany(d => d.Courses).WithMany(p => p.Prereqs)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"Prereq\",\n                    r => r.HasOne<Course>().WithMany().HasForeignKey(\"CourseId\"),\n                    l => l.HasOne<Course>().WithMany()\n                        .HasForeignKey(\"PrereqId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"CourseId\", \"PrereqId\");\n                        j.ToTable(\"prereq\");\n                        j.IndexerProperty<string>(\"CourseId\")\n                            .HasColumnType(\"varchar(8)\")\n                            .HasColumnName(\"course_id\");\n                        j.IndexerProperty<string>(\"PrereqId\")\n                            .HasColumnType(\"varchar(8)\")\n                            .HasColumnName(\"prereq_id\");\n                    });\n\n            entity.HasMany(d => d.Prereqs).WithMany(p => p.Courses)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"Prereq\",\n                    r => r.HasOne<Course>().WithMany()\n                        .HasForeignKey(\"PrereqId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Course>().WithMany().HasForeignKey(\"CourseId\"),\n                    j =>\n                    {\n                        j.HasKey(\"CourseId\", \"PrereqId\");\n                        j.ToTable(\"prereq\");\n                        j.IndexerProperty<string>(\"CourseId\")\n                            .HasColumnType(\"varchar(8)\")\n                            .HasColumnName(\"course_id\");\n                        j.IndexerProperty<string>(\"PrereqId\")\n                            .HasColumnType(\"varchar(8)\")\n                            .HasColumnName(\"prereq_id\");\n                    });\n        });\n\n        modelBuilder.Entity<Department>(entity =>\n        {\n            entity.HasKey(e => e.DeptName);\n\n            entity.ToTable(\"department\");\n\n            entity.Property(e => e.DeptName)\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"dept_name\");\n            entity.Property(e => e.Budget)\n                .HasColumnType(\"numeric(12,2)\")\n                .HasColumnName(\"budget\");\n            entity.Property(e => e.Building)\n                .HasColumnType(\"varchar(15)\")\n                .HasColumnName(\"building\");\n        });\n\n        modelBuilder.Entity<Instructor>(entity =>\n        {\n            entity.ToTable(\"instructor\");\n\n            entity.Property(e => e.Id)\n                .HasColumnType(\"varchar(5)\")\n                .HasColumnName(\"ID\");\n            entity.Property(e => e.DeptName)\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"dept_name\");\n            entity.Property(e => e.Name)\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"name\");\n            entity.Property(e => e.Salary)\n                .HasColumnType(\"numeric(8,2)\")\n                .HasColumnName(\"salary\");\n\n            entity.HasOne(d => d.DeptNameNavigation).WithMany(p => p.Instructors)\n                .HasForeignKey(d => d.DeptName)\n                .OnDelete(DeleteBehavior.SetNull);\n\n            entity.HasMany(d => d.Sections).WithMany(p => p.Ids)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"Teach\",\n                    r => r.HasOne<Section>().WithMany().HasForeignKey(\"CourseId\", \"SecId\", \"Semester\", \"Year\"),\n                    l => l.HasOne<Instructor>().WithMany().HasForeignKey(\"Id\"),\n                    j =>\n                    {\n                        j.HasKey(\"Id\", \"CourseId\", \"SecId\", \"Semester\", \"Year\");\n                        j.ToTable(\"teaches\");\n                        j.IndexerProperty<string>(\"Id\")\n                            .HasColumnType(\"varchar(5)\")\n                            .HasColumnName(\"ID\");\n                        j.IndexerProperty<string>(\"CourseId\")\n                            .HasColumnType(\"varchar(8)\")\n                            .HasColumnName(\"course_id\");\n                        j.IndexerProperty<string>(\"SecId\")\n                            .HasColumnType(\"varchar(8)\")\n                            .HasColumnName(\"sec_id\");\n                        j.IndexerProperty<string>(\"Semester\")\n                            .HasColumnType(\"varchar(6)\")\n                            .HasColumnName(\"semester\");\n                        j.IndexerProperty<int>(\"Year\")\n                            .HasColumnType(\"numeric(4,0)\")\n                            .HasColumnName(\"year\");\n                    });\n        });\n\n        modelBuilder.Entity<Section>(entity =>\n        {\n            entity.HasKey(e => new { e.CourseId, e.SecId, e.Semester, e.Year });\n\n            entity.ToTable(\"section\");\n\n            entity.Property(e => e.CourseId)\n                .HasColumnType(\"varchar(8)\")\n                .HasColumnName(\"course_id\");\n            entity.Property(e => e.SecId)\n                .HasColumnType(\"varchar(8)\")\n                .HasColumnName(\"sec_id\");\n            entity.Property(e => e.Semester)\n                .HasColumnType(\"varchar(6)\")\n                .HasColumnName(\"semester\");\n            entity.Property(e => e.Year)\n                .HasColumnType(\"numeric(4,0)\")\n                .HasColumnName(\"year\");\n            entity.Property(e => e.Building)\n                .HasColumnType(\"varchar(15)\")\n                .HasColumnName(\"building\");\n            entity.Property(e => e.RoomNumber)\n                .HasColumnType(\"varchar(7)\")\n                .HasColumnName(\"room_number\");\n            entity.Property(e => e.TimeSlotId)\n                .HasColumnType(\"varchar(4)\")\n                .HasColumnName(\"time_slot_id\");\n\n            entity.HasOne(d => d.Course).WithMany(p => p.Sections).HasForeignKey(d => d.CourseId);\n\n            entity.HasOne(d => d.Classroom).WithMany(p => p.Sections)\n                .HasForeignKey(d => new { d.Building, d.RoomNumber })\n                .OnDelete(DeleteBehavior.SetNull);\n        });\n\n        modelBuilder.Entity<Student>(entity =>\n        {\n            entity.ToTable(\"student\");\n\n            entity.Property(e => e.Id)\n                .HasColumnType(\"varchar(5)\")\n                .HasColumnName(\"ID\");\n            entity.Property(e => e.DeptName)\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"dept_name\");\n            entity.Property(e => e.Name)\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"name\");\n            entity.Property(e => e.TotCred)\n                .HasColumnType(\"numeric(3,0)\")\n                .HasColumnName(\"tot_cred\");\n\n            entity.HasOne(d => d.DeptNameNavigation).WithMany(p => p.Students)\n                .HasForeignKey(d => d.DeptName)\n                .OnDelete(DeleteBehavior.SetNull);\n        });\n\n        modelBuilder.Entity<Take>(entity =>\n        {\n            entity.HasKey(e => new { e.Id, e.CourseId, e.SecId, e.Semester, e.Year });\n\n            entity.ToTable(\"takes\");\n\n            entity.Property(e => e.Id)\n                .HasColumnType(\"varchar(5)\")\n                .HasColumnName(\"ID\");\n            entity.Property(e => e.CourseId)\n                .HasColumnType(\"varchar(8)\")\n                .HasColumnName(\"course_id\");\n            entity.Property(e => e.SecId)\n                .HasColumnType(\"varchar(8)\")\n                .HasColumnName(\"sec_id\");\n            entity.Property(e => e.Semester)\n                .HasColumnType(\"varchar(6)\")\n                .HasColumnName(\"semester\");\n            entity.Property(e => e.Year)\n                .HasColumnType(\"numeric(4,0)\")\n                .HasColumnName(\"year\");\n            entity.Property(e => e.Grade)\n                .HasColumnType(\"varchar(2)\")\n                .HasColumnName(\"grade\");\n\n            entity.HasOne(d => d.IdNavigation).WithMany(p => p.Takes).HasForeignKey(d => d.Id);\n\n            entity.HasOne(d => d.Section).WithMany(p => p.Takes).HasForeignKey(d => new { d.CourseId, d.SecId, d.Semester, d.Year });\n        });\n\n        modelBuilder.Entity<TimeSlot>(entity =>\n        {\n            entity.HasKey(e => new { e.TimeSlotId, e.Day, e.StartHr, e.StartMin });\n\n            entity.ToTable(\"time_slot\");\n\n            entity.Property(e => e.TimeSlotId)\n                .HasColumnType(\"varchar(4)\")\n                .HasColumnName(\"time_slot_id\");\n            entity.Property(e => e.Day)\n                .HasColumnType(\"varchar(1)\")\n                .HasColumnName(\"day\");\n            entity.Property(e => e.StartHr)\n                .HasColumnType(\"numeric(2)\")\n                .HasColumnName(\"start_hr\");\n            entity.Property(e => e.StartMin)\n                .HasColumnType(\"numeric(2)\")\n                .HasColumnName(\"start_min\");\n            entity.Property(e => e.EndHr)\n                .HasColumnType(\"numeric(2)\")\n                .HasColumnName(\"end_hr\");\n            entity.Property(e => e.EndMin)\n                .HasColumnType(\"numeric(2)\")\n                .HasColumnName(\"end_min\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Advisor\n{\n    public string SId { get; set; } = null!;\n\n    public string? IId { get; set; }\n\n    public virtual Instructor? IIdNavigation { get; set; }\n\n    public virtual Student SIdNavigation { get; set; } = null!;\n}",
      "public partial class Classroom\n{\n    public string Building { get; set; } = null!;\n\n    public string RoomNumber { get; set; } = null!;\n\n    public int? Capacity { get; set; }\n\n    public virtual ICollection<Section> Sections { get; set; } = new List<Section>();\n}",
      "public partial class Course\n{\n    public string CourseId { get; set; } = null!;\n\n    public string? Title { get; set; }\n\n    public string? DeptName { get; set; }\n\n    public int? Credits { get; set; }\n\n    public virtual Department? DeptNameNavigation { get; set; }\n\n    public virtual ICollection<Section> Sections { get; set; } = new List<Section>();\n\n    public virtual ICollection<Course> Courses { get; set; } = new List<Course>();\n\n    public virtual ICollection<Course> Prereqs { get; set; } = new List<Course>();\n}",
      "public partial class Department\n{\n    public string DeptName { get; set; } = null!;\n\n    public string? Building { get; set; }\n\n    public double? Budget { get; set; }\n\n    public virtual ICollection<Course> Courses { get; set; } = new List<Course>();\n\n    public virtual ICollection<Instructor> Instructors { get; set; } = new List<Instructor>();\n\n    public virtual ICollection<Student> Students { get; set; } = new List<Student>();\n}",
      "public partial class Instructor\n{\n    public string Id { get; set; } = null!;\n\n    public string Name { get; set; } = null!;\n\n    public string? DeptName { get; set; }\n\n    public double? Salary { get; set; }\n\n    public virtual ICollection<Advisor> Advisors { get; set; } = new List<Advisor>();\n\n    public virtual Department? DeptNameNavigation { get; set; }\n\n    public virtual ICollection<Section> Sections { get; set; } = new List<Section>();\n}",
      "public partial class Section\n{\n    public string CourseId { get; set; } = null!;\n\n    public string SecId { get; set; } = null!;\n\n    public string Semester { get; set; } = null!;\n\n    public int Year { get; set; }\n\n    public string? Building { get; set; }\n\n    public string? RoomNumber { get; set; }\n\n    public string? TimeSlotId { get; set; }\n\n    public virtual Classroom? Classroom { get; set; }\n\n    public virtual Course Course { get; set; } = null!;\n\n    public virtual ICollection<Take> Takes { get; set; } = new List<Take>();\n\n    public virtual ICollection<Instructor> Ids { get; set; } = new List<Instructor>();\n}",
      "public partial class Student\n{\n    public string Id { get; set; } = null!;\n\n    public string Name { get; set; } = null!;\n\n    public string? DeptName { get; set; }\n\n    public int? TotCred { get; set; }\n\n    public virtual Advisor? Advisor { get; set; }\n\n    public virtual Department? DeptNameNavigation { get; set; }\n\n    public virtual ICollection<Take> Takes { get; set; } = new List<Take>();\n}",
      "public partial class Take\n{\n    public string Id { get; set; } = null!;\n\n    public string CourseId { get; set; } = null!;\n\n    public string SecId { get; set; } = null!;\n\n    public string Semester { get; set; } = null!;\n\n    public int Year { get; set; }\n\n    public string? Grade { get; set; }\n\n    public virtual Student IdNavigation { get; set; } = null!;\n\n    public virtual Section Section { get; set; } = null!;\n}",
      "public partial class TimeSlot\n{\n    public string TimeSlotId { get; set; } = null!;\n\n    public string Day { get; set; } = null!;\n\n    public int StartHr { get; set; }\n\n    public int StartMin { get; set; }\n\n    public int? EndHr { get; set; }\n\n    public int? EndMin { get; set; }\n}"
    ]
  },
  "battle_death": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.battle_death;\n\npublic partial class BattleDeathContext : DbContext\n{\n    public BattleDeathContext()\n    {\n    }\n\n    public BattleDeathContext(DbContextOptions<BattleDeathContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Battle> Battles { get; set; }\n\n    public virtual DbSet<Death> Deaths { get; set; }\n\n    public virtual DbSet<Ship> Ships { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/battle_death.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Battle>(entity =>\n        {\n            entity.ToTable(\"battle\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.BulgarianCommander).HasColumnName(\"bulgarian_commander\");\n            entity.Property(e => e.Date).HasColumnName(\"date\");\n            entity.Property(e => e.LatinCommander).HasColumnName(\"latin_commander\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.Result).HasColumnName(\"result\");\n        });\n\n        modelBuilder.Entity<Death>(entity =>\n        {\n            entity.ToTable(\"death\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.CausedByShipId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"caused_by_ship_id\");\n            entity.Property(e => e.Injured)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"injured\");\n            entity.Property(e => e.Killed)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"killed\");\n            entity.Property(e => e.Note).HasColumnName(\"note\");\n\n            entity.HasOne(d => d.CausedByShip).WithMany(p => p.Deaths).HasForeignKey(d => d.CausedByShipId);\n        });\n\n        modelBuilder.Entity<Ship>(entity =>\n        {\n            entity.ToTable(\"ship\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.DispositionOfShip).HasColumnName(\"disposition_of_ship\");\n            entity.Property(e => e.Location).HasColumnName(\"location\");\n            entity.Property(e => e.LostInBattle)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"lost_in_battle\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.ShipType).HasColumnName(\"ship_type\");\n            entity.Property(e => e.Tonnage).HasColumnName(\"tonnage\");\n\n            entity.HasOne(d => d.LostInBattleNavigation).WithMany(p => p.Ships).HasForeignKey(d => d.LostInBattle);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Battle\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Date { get; set; }\n\n    public string? BulgarianCommander { get; set; }\n\n    public string? LatinCommander { get; set; }\n\n    public string? Result { get; set; }\n\n    public virtual ICollection<Ship> Ships { get; set; } = new List<Ship>();\n}",
      "public partial class Death\n{\n    public int? CausedByShipId { get; set; }\n\n    public int Id { get; set; }\n\n    public string? Note { get; set; }\n\n    public int? Killed { get; set; }\n\n    public int? Injured { get; set; }\n\n    public virtual Ship? CausedByShip { get; set; }\n}",
      "public partial class Ship\n{\n    public int? LostInBattle { get; set; }\n\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Tonnage { get; set; }\n\n    public string? ShipType { get; set; }\n\n    public string? Location { get; set; }\n\n    public string? DispositionOfShip { get; set; }\n\n    public virtual ICollection<Death> Deaths { get; set; } = new List<Death>();\n\n    public virtual Battle? LostInBattleNavigation { get; set; }\n}"
    ]
  },
  "train_station": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.train_station;\n\npublic partial class TrainStationContext : DbContext\n{\n    public TrainStationContext()\n    {\n    }\n\n    public TrainStationContext(DbContextOptions<TrainStationContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Station> Stations { get; set; }\n\n    public virtual DbSet<Train> Trains { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/train_station.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Station>(entity =>\n        {\n            entity.ToTable(\"station\");\n\n            entity.Property(e => e.StationId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Station_ID\");\n            entity.Property(e => e.AnnualEntryExit).HasColumnName(\"Annual_entry_exit\");\n            entity.Property(e => e.AnnualInterchanges).HasColumnName(\"Annual_interchanges\");\n            entity.Property(e => e.MainServices).HasColumnName(\"Main_Services\");\n            entity.Property(e => e.NumberOfPlatforms)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Number_of_Platforms\");\n            entity.Property(e => e.TotalPassengers).HasColumnName(\"Total_Passengers\");\n        });\n\n        modelBuilder.Entity<Train>(entity =>\n        {\n            entity.ToTable(\"train\");\n\n            entity.Property(e => e.TrainId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Train_ID\");\n\n            entity.HasMany(d => d.Stations).WithMany(p => p.Trains)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"TrainStation\",\n                    r => r.HasOne<Station>().WithMany()\n                        .HasForeignKey(\"StationId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Train>().WithMany()\n                        .HasForeignKey(\"TrainId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"TrainId\", \"StationId\");\n                        j.ToTable(\"train_station\");\n                        j.IndexerProperty<int>(\"TrainId\")\n                            .HasColumnType(\"INT\")\n                            .HasColumnName(\"Train_ID\");\n                        j.IndexerProperty<int>(\"StationId\")\n                            .HasColumnType(\"INT\")\n                            .HasColumnName(\"Station_ID\");\n                    });\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Station\n{\n    public int StationId { get; set; }\n\n    public string? Name { get; set; }\n\n    public double? AnnualEntryExit { get; set; }\n\n    public double? AnnualInterchanges { get; set; }\n\n    public double? TotalPassengers { get; set; }\n\n    public string? Location { get; set; }\n\n    public string? MainServices { get; set; }\n\n    public int? NumberOfPlatforms { get; set; }\n\n    public virtual ICollection<Train> Trains { get; set; } = new List<Train>();\n}",
      "public partial class Train\n{\n    public int TrainId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Time { get; set; }\n\n    public string? Service { get; set; }\n\n    public virtual ICollection<Station> Stations { get; set; } = new List<Station>();\n}"
    ]
  },
  "station_weather": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.station_weather;\n\npublic partial class StationWeatherContext : DbContext\n{\n    public StationWeatherContext()\n    {\n    }\n\n    public StationWeatherContext(DbContextOptions<StationWeatherContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Station> Stations { get; set; }\n\n    public virtual DbSet<Train> Trains { get; set; }\n\n    public virtual DbSet<WeeklyWeather> WeeklyWeathers { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/station_weather.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Station>(entity =>\n        {\n            entity.ToTable(\"station\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.LocalAuthority).HasColumnName(\"local_authority\");\n            entity.Property(e => e.NetworkName).HasColumnName(\"network_name\");\n            entity.Property(e => e.Services).HasColumnName(\"services\");\n        });\n\n        modelBuilder.Entity<Train>(entity =>\n        {\n            entity.ToTable(\"train\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.Destination).HasColumnName(\"destination\");\n            entity.Property(e => e.Interval).HasColumnName(\"interval\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.Origin).HasColumnName(\"origin\");\n            entity.Property(e => e.Time).HasColumnName(\"time\");\n            entity.Property(e => e.TrainNumber)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"train_number\");\n\n            entity.HasMany(d => d.Stations).WithMany(p => p.Trains)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"Route\",\n                    r => r.HasOne<Station>().WithMany()\n                        .HasForeignKey(\"StationId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Train>().WithMany()\n                        .HasForeignKey(\"TrainId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"TrainId\", \"StationId\");\n                        j.ToTable(\"route\");\n                        j.IndexerProperty<int>(\"TrainId\")\n                            .HasColumnType(\"INT\")\n                            .HasColumnName(\"train_id\");\n                        j.IndexerProperty<int>(\"StationId\")\n                            .HasColumnType(\"INT\")\n                            .HasColumnName(\"station_id\");\n                    });\n        });\n\n        modelBuilder.Entity<WeeklyWeather>(entity =>\n        {\n            entity.HasKey(e => new { e.StationId, e.DayOfWeek });\n\n            entity.ToTable(\"weekly_weather\");\n\n            entity.Property(e => e.StationId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"station_id\");\n            entity.Property(e => e.DayOfWeek).HasColumnName(\"day_of_week\");\n            entity.Property(e => e.HighTemperature)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"high_temperature\");\n            entity.Property(e => e.LowTemperature)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"low_temperature\");\n            entity.Property(e => e.Precipitation).HasColumnName(\"precipitation\");\n            entity.Property(e => e.WindSpeedMph)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"wind_speed_mph\");\n\n            entity.HasOne(d => d.Station).WithMany(p => p.WeeklyWeathers)\n                .HasForeignKey(d => d.StationId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Station\n{\n    public int Id { get; set; }\n\n    public string? NetworkName { get; set; }\n\n    public string? Services { get; set; }\n\n    public string? LocalAuthority { get; set; }\n\n    public virtual ICollection<WeeklyWeather> WeeklyWeathers { get; set; } = new List<WeeklyWeather>();\n\n    public virtual ICollection<Train> Trains { get; set; } = new List<Train>();\n}",
      "public partial class Train\n{\n    public int Id { get; set; }\n\n    public int? TrainNumber { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Origin { get; set; }\n\n    public string? Destination { get; set; }\n\n    public string? Time { get; set; }\n\n    public string? Interval { get; set; }\n\n    public virtual ICollection<Station> Stations { get; set; } = new List<Station>();\n}",
      "public partial class WeeklyWeather\n{\n    public int StationId { get; set; }\n\n    public string DayOfWeek { get; set; } = null!;\n\n    public int? HighTemperature { get; set; }\n\n    public int? LowTemperature { get; set; }\n\n    public double? Precipitation { get; set; }\n\n    public int? WindSpeedMph { get; set; }\n\n    public virtual Station Station { get; set; } = null!;\n}"
    ]
  },
  "cinema": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.cinema;\n\npublic partial class CinemaContext : DbContext\n{\n    public CinemaContext()\n    {\n    }\n\n    public CinemaContext(DbContextOptions<CinemaContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Cinema> Cinemas { get; set; }\n\n    public virtual DbSet<Film> Films { get; set; }\n\n    public virtual DbSet<Schedule> Schedules { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/cinema.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Cinema>(entity =>\n        {\n            entity.ToTable(\"cinema\");\n\n            entity.Property(e => e.CinemaId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Cinema_ID\");\n            entity.Property(e => e.Capacity).HasColumnType(\"INT\");\n            entity.Property(e => e.OpenningYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Openning_year\");\n        });\n\n        modelBuilder.Entity<Film>(entity =>\n        {\n            entity.ToTable(\"film\");\n\n            entity.Property(e => e.FilmId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Film_ID\");\n            entity.Property(e => e.DirectedBy).HasColumnName(\"Directed_by\");\n            entity.Property(e => e.NumberInSeason)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Number_in_season\");\n            entity.Property(e => e.OriginalAirDate).HasColumnName(\"Original_air_date\");\n            entity.Property(e => e.ProductionCode).HasColumnName(\"Production_code\");\n            entity.Property(e => e.RankInSeries)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Rank_in_series\");\n        });\n\n        modelBuilder.Entity<Schedule>(entity =>\n        {\n            entity.HasKey(e => new { e.CinemaId, e.FilmId });\n\n            entity.ToTable(\"schedule\");\n\n            entity.Property(e => e.CinemaId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Cinema_ID\");\n            entity.Property(e => e.FilmId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Film_ID\");\n            entity.Property(e => e.Price).HasColumnType(\"float\");\n            entity.Property(e => e.ShowTimesPerDay)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Show_times_per_day\");\n\n            entity.HasOne(d => d.Cinema).WithMany(p => p.Schedules)\n                .HasForeignKey(d => d.CinemaId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Film).WithMany(p => p.Schedules)\n                .HasForeignKey(d => d.FilmId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Cinema\n{\n    public int CinemaId { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? OpenningYear { get; set; }\n\n    public int? Capacity { get; set; }\n\n    public string? Location { get; set; }\n\n    public virtual ICollection<Schedule> Schedules { get; set; } = new List<Schedule>();\n}",
      "public partial class Film\n{\n    public int FilmId { get; set; }\n\n    public int? RankInSeries { get; set; }\n\n    public int? NumberInSeason { get; set; }\n\n    public string? Title { get; set; }\n\n    public string? DirectedBy { get; set; }\n\n    public string? OriginalAirDate { get; set; }\n\n    public string? ProductionCode { get; set; }\n\n    public virtual ICollection<Schedule> Schedules { get; set; } = new List<Schedule>();\n}",
      "public partial class Schedule\n{\n    public int CinemaId { get; set; }\n\n    public int FilmId { get; set; }\n\n    public string? Date { get; set; }\n\n    public int? ShowTimesPerDay { get; set; }\n\n    public double? Price { get; set; }\n\n    public virtual Cinema Cinema { get; set; } = null!;\n\n    public virtual Film Film { get; set; } = null!;\n}"
    ]
  },
  "bike_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.bike_1;\n\npublic partial class Bike1Context : DbContext\n{\n    public Bike1Context()\n    {\n    }\n\n    public Bike1Context(DbContextOptions<Bike1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Station> Stations { get; set; }\n\n    public virtual DbSet<Status> Statuses { get; set; }\n\n    public virtual DbSet<Trip> Trips { get; set; }\n\n    public virtual DbSet<Weather> Weathers { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/bike_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Station>(entity =>\n        {\n            entity.ToTable(\"station\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnName(\"id\");\n            entity.Property(e => e.City).HasColumnName(\"city\");\n            entity.Property(e => e.DockCount).HasColumnName(\"dock_count\");\n            entity.Property(e => e.InstallationDate).HasColumnName(\"installation_date\");\n            entity.Property(e => e.Lat)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"lat\");\n            entity.Property(e => e.Long)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"long\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n        });\n\n        modelBuilder.Entity<Status>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"status\");\n\n            entity.Property(e => e.BikesAvailable).HasColumnName(\"bikes_available\");\n            entity.Property(e => e.DocksAvailable).HasColumnName(\"docks_available\");\n            entity.Property(e => e.StationId).HasColumnName(\"station_id\");\n            entity.Property(e => e.Time).HasColumnName(\"time\");\n\n            entity.HasOne(d => d.Station).WithMany().HasForeignKey(d => d.StationId);\n        });\n\n        modelBuilder.Entity<Trip>(entity =>\n        {\n            entity.ToTable(\"trip\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnName(\"id\");\n            entity.Property(e => e.BikeId).HasColumnName(\"bike_id\");\n            entity.Property(e => e.Duration).HasColumnName(\"duration\");\n            entity.Property(e => e.EndDate).HasColumnName(\"end_date\");\n            entity.Property(e => e.EndStationId).HasColumnName(\"end_station_id\");\n            entity.Property(e => e.EndStationName).HasColumnName(\"end_station_name\");\n            entity.Property(e => e.StartDate).HasColumnName(\"start_date\");\n            entity.Property(e => e.StartStationId).HasColumnName(\"start_station_id\");\n            entity.Property(e => e.StartStationName).HasColumnName(\"start_station_name\");\n            entity.Property(e => e.SubscriptionType).HasColumnName(\"subscription_type\");\n            entity.Property(e => e.ZipCode)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"zip_code\");\n        });\n\n        modelBuilder.Entity<Weather>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"weather\");\n\n            entity.Property(e => e.CloudCover)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"cloud_cover\");\n            entity.Property(e => e.Date).HasColumnName(\"date\");\n            entity.Property(e => e.Events).HasColumnName(\"events\");\n            entity.Property(e => e.MaxDewPointF)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"max_dew_point_f\");\n            entity.Property(e => e.MaxGustSpeedMph)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"max_gust_speed_mph\");\n            entity.Property(e => e.MaxHumidity)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"max_humidity\");\n            entity.Property(e => e.MaxSeaLevelPressureInches)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"max_sea_level_pressure_inches\");\n            entity.Property(e => e.MaxTemperatureF)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"max_temperature_f\");\n            entity.Property(e => e.MaxVisibilityMiles)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"max_visibility_miles\");\n            entity.Property(e => e.MaxWindSpeedMph)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"max_wind_Speed_mph\");\n            entity.Property(e => e.MeanDewPointF)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"mean_dew_point_f\");\n            entity.Property(e => e.MeanHumidity)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"mean_humidity\");\n            entity.Property(e => e.MeanSeaLevelPressureInches)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"mean_sea_level_pressure_inches\");\n            entity.Property(e => e.MeanTemperatureF)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"mean_temperature_f\");\n            entity.Property(e => e.MeanVisibilityMiles)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"mean_visibility_miles\");\n            entity.Property(e => e.MeanWindSpeedMph)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"mean_wind_speed_mph\");\n            entity.Property(e => e.MinDewPointF)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"min_dew_point_f\");\n            entity.Property(e => e.MinHumidity)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"min_humidity\");\n            entity.Property(e => e.MinSeaLevelPressureInches)\n                .HasColumnType(\"NUMERIC\")\n                .HasColumnName(\"min_sea_level_pressure_inches\");\n            entity.Property(e => e.MinTemperatureF)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"min_temperature_f\");\n            entity.Property(e => e.MinVisibilityMiles)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"min_visibility_miles\");\n            entity.Property(e => e.PrecipitationInches)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"precipitation_inches\");\n            entity.Property(e => e.WindDirDegrees)\n                .HasColumnType(\"INTEGER\")\n                .HasColumnName(\"wind_dir_degrees\");\n            entity.Property(e => e.ZipCode).HasColumnName(\"zip_code\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Station\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public double? Lat { get; set; }\n\n    public double? Long { get; set; }\n\n    public int? DockCount { get; set; }\n\n    public string? City { get; set; }\n\n    public string? InstallationDate { get; set; }\n}",
      "public partial class Status\n{\n    public int? StationId { get; set; }\n\n    public int? BikesAvailable { get; set; }\n\n    public int? DocksAvailable { get; set; }\n\n    public DateTime? Time { get; set; }\n\n    public virtual Station? Station { get; set; }\n}",
      "public partial class Trip\n{\n    public int Id { get; set; }\n\n    public int? Duration { get; set; }\n\n    public string? StartDate { get; set; }\n\n    public string? StartStationName { get; set; }\n\n    public int? StartStationId { get; set; }\n\n    public string? EndDate { get; set; }\n\n    public string? EndStationName { get; set; }\n\n    public int? EndStationId { get; set; }\n\n    public int? BikeId { get; set; }\n\n    public string? SubscriptionType { get; set; }\n\n    public string? ZipCode { get; set; }\n}",
      "public partial class Weather\n{\n    public string? Date { get; set; }\n\n    public string? MaxTemperatureF { get; set; }\n\n    public string? MeanTemperatureF { get; set; }\n\n    public string? MinTemperatureF { get; set; }\n\n    public string? MaxDewPointF { get; set; }\n\n    public string? MeanDewPointF { get; set; }\n\n    public string? MinDewPointF { get; set; }\n\n    public string? MaxHumidity { get; set; }\n\n    public string? MeanHumidity { get; set; }\n\n    public string? MinHumidity { get; set; }\n\n    public string? MaxSeaLevelPressureInches { get; set; }\n\n    public string? MeanSeaLevelPressureInches { get; set; }\n\n    public string? MinSeaLevelPressureInches { get; set; }\n\n    public string? MaxVisibilityMiles { get; set; }\n\n    public string? MeanVisibilityMiles { get; set; }\n\n    public string? MinVisibilityMiles { get; set; }\n\n    public string? MaxWindSpeedMph { get; set; }\n\n    public string? MeanWindSpeedMph { get; set; }\n\n    public string? MaxGustSpeedMph { get; set; }\n\n    public string? PrecipitationInches { get; set; }\n\n    public string? CloudCover { get; set; }\n\n    public string? Events { get; set; }\n\n    public string? WindDirDegrees { get; set; }\n\n    public int? ZipCode { get; set; }\n}"
    ]
  },
  "company_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.company_1;\n\npublic partial class Company1Context : DbContext\n{\n    public Company1Context()\n    {\n    }\n\n    public Company1Context(DbContextOptions<Company1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Department> Departments { get; set; }\n\n    public virtual DbSet<Dependent> Dependents { get; set; }\n\n    public virtual DbSet<DeptLocation> DeptLocations { get; set; }\n\n    public virtual DbSet<Employee> Employees { get; set; }\n\n    public virtual DbSet<Project> Projects { get; set; }\n\n    public virtual DbSet<WorksOn> WorksOns { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/company_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Department>(entity =>\n        {\n            entity.HasKey(e => e.Dnumber);\n\n            entity.ToTable(\"department\");\n\n            entity.Property(e => e.Dnumber).ValueGeneratedNever();\n            entity.Property(e => e.MgrSsn).HasColumnName(\"Mgr_ssn\");\n            entity.Property(e => e.MgrStartDate).HasColumnName(\"Mgr_start_date\");\n        });\n\n        modelBuilder.Entity<Dependent>(entity =>\n        {\n            entity.HasKey(e => new { e.Essn, e.DependentName });\n\n            entity.ToTable(\"dependent\");\n\n            entity.Property(e => e.DependentName).HasColumnName(\"Dependent_name\");\n        });\n\n        modelBuilder.Entity<DeptLocation>(entity =>\n        {\n            entity.HasKey(e => new { e.Dnumber, e.Dlocation });\n\n            entity.ToTable(\"dept_locations\");\n        });\n\n        modelBuilder.Entity<Employee>(entity =>\n        {\n            entity.HasKey(e => e.Ssn);\n\n            entity.ToTable(\"employee\");\n\n            entity.Property(e => e.Ssn).ValueGeneratedNever();\n            entity.Property(e => e.SuperSsn).HasColumnName(\"Super_ssn\");\n        });\n\n        modelBuilder.Entity<Project>(entity =>\n        {\n            entity.HasKey(e => e.Pnumber);\n\n            entity.ToTable(\"project\");\n\n            entity.Property(e => e.Pnumber).ValueGeneratedNever();\n        });\n\n        modelBuilder.Entity<WorksOn>(entity =>\n        {\n            entity.HasKey(e => new { e.Essn, e.Pno });\n\n            entity.ToTable(\"works_on\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Department\n{\n    public string? Dname { get; set; }\n\n    public int Dnumber { get; set; }\n\n    public int? MgrSsn { get; set; }\n\n    public DateOnly? MgrStartDate { get; set; }\n}",
      "public partial class Dependent\n{\n    public int Essn { get; set; }\n\n    public string DependentName { get; set; } = null!;\n\n    public string? Sex { get; set; }\n\n    public DateOnly? Bdate { get; set; }\n\n    public string? Relationship { get; set; }\n}",
      "public partial class DeptLocation\n{\n    public int Dnumber { get; set; }\n\n    public string Dlocation { get; set; } = null!;\n}",
      "public partial class Employee\n{\n    public string? Fname { get; set; }\n\n    public string? Minit { get; set; }\n\n    public string? Lname { get; set; }\n\n    public int Ssn { get; set; }\n\n    public DateOnly? Bdate { get; set; }\n\n    public string? Address { get; set; }\n\n    public string? Sex { get; set; }\n\n    public int? Salary { get; set; }\n\n    public int? SuperSsn { get; set; }\n\n    public int? Dno { get; set; }\n}",
      "public partial class Project\n{\n    public string? Pname { get; set; }\n\n    public int Pnumber { get; set; }\n\n    public string? Plocation { get; set; }\n\n    public int? Dnum { get; set; }\n}",
      "public partial class WorksOn\n{\n    public int Essn { get; set; }\n\n    public int Pno { get; set; }\n\n    public double? Hours { get; set; }\n}"
    ]
  },
  "wedding": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.wedding;\n\npublic partial class WeddingContext : DbContext\n{\n    public WeddingContext()\n    {\n    }\n\n    public WeddingContext(DbContextOptions<WeddingContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Church> Churches { get; set; }\n\n    public virtual DbSet<Person> People { get; set; }\n\n    public virtual DbSet<Wedding> Weddings { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/wedding.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Church>(entity =>\n        {\n            entity.ToTable(\"church\");\n\n            entity.Property(e => e.ChurchId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Church_ID\");\n            entity.Property(e => e.ContinuationOf).HasColumnName(\"Continuation_of\");\n            entity.Property(e => e.OpenDate)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Open_Date\");\n            entity.Property(e => e.OrganizedBy).HasColumnName(\"Organized_by\");\n        });\n\n        modelBuilder.Entity<Person>(entity =>\n        {\n            entity.HasKey(e => e.PeopleId);\n\n            entity.ToTable(\"people\");\n\n            entity.Property(e => e.PeopleId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"People_ID\");\n            entity.Property(e => e.Age).HasColumnType(\"INT\");\n            entity.Property(e => e.IsMale).HasColumnName(\"Is_Male\");\n        });\n\n        modelBuilder.Entity<Wedding>(entity =>\n        {\n            entity.HasKey(e => new { e.ChurchId, e.MaleId, e.FemaleId });\n\n            entity.ToTable(\"wedding\");\n\n            entity.Property(e => e.ChurchId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Church_ID\");\n            entity.Property(e => e.MaleId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Male_ID\");\n            entity.Property(e => e.FemaleId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Female_ID\");\n            entity.Property(e => e.Year).HasColumnType(\"INT\");\n\n            entity.HasOne(d => d.Church).WithMany(p => p.Weddings)\n                .HasForeignKey(d => d.ChurchId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Female).WithMany(p => p.WeddingFemales)\n                .HasForeignKey(d => d.FemaleId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Male).WithMany(p => p.WeddingMales)\n                .HasForeignKey(d => d.MaleId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Church\n{\n    public int ChurchId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? OrganizedBy { get; set; }\n\n    public int? OpenDate { get; set; }\n\n    public string? ContinuationOf { get; set; }\n\n    public virtual ICollection<Wedding> Weddings { get; set; } = new List<Wedding>();\n}",
      "public partial class Person\n{\n    public int PeopleId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Country { get; set; }\n\n    public string? IsMale { get; set; }\n\n    public int? Age { get; set; }\n\n    public virtual ICollection<Wedding> WeddingFemales { get; set; } = new List<Wedding>();\n\n    public virtual ICollection<Wedding> WeddingMales { get; set; } = new List<Wedding>();\n}",
      "public partial class Wedding\n{\n    public int ChurchId { get; set; }\n\n    public int MaleId { get; set; }\n\n    public int FemaleId { get; set; }\n\n    public int? Year { get; set; }\n\n    public virtual Church Church { get; set; } = null!;\n\n    public virtual Person Female { get; set; } = null!;\n\n    public virtual Person Male { get; set; } = null!;\n}"
    ]
  },
  "browser_web": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.browser_web;\n\npublic partial class BrowserWebContext : DbContext\n{\n    public BrowserWebContext()\n    {\n    }\n\n    public BrowserWebContext(DbContextOptions<BrowserWebContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<AcceleratorCompatibleBrowser> AcceleratorCompatibleBrowsers { get; set; }\n\n    public virtual DbSet<Browser> Browsers { get; set; }\n\n    public virtual DbSet<WebClientAccelerator> WebClientAccelerators { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/browser_web.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<AcceleratorCompatibleBrowser>(entity =>\n        {\n            entity.HasKey(e => new { e.AcceleratorId, e.BrowserId });\n\n            entity.ToTable(\"accelerator_compatible_browser\");\n\n            entity.Property(e => e.AcceleratorId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"accelerator_id\");\n            entity.Property(e => e.BrowserId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"browser_id\");\n            entity.Property(e => e.CompatibleSinceYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"compatible_since_year\");\n\n            entity.HasOne(d => d.Accelerator).WithMany(p => p.AcceleratorCompatibleBrowsers)\n                .HasForeignKey(d => d.AcceleratorId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Browser).WithMany(p => p.AcceleratorCompatibleBrowsers)\n                .HasForeignKey(d => d.BrowserId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Browser>(entity =>\n        {\n            entity.ToTable(\"browser\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.MarketShare).HasColumnName(\"market_share\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n        });\n\n        modelBuilder.Entity<WebClientAccelerator>(entity =>\n        {\n            entity.ToTable(\"Web_client_accelerator\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.OperatingSystem).HasColumnName(\"Operating_system\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class AcceleratorCompatibleBrowser\n{\n    public int AcceleratorId { get; set; }\n\n    public int BrowserId { get; set; }\n\n    public int? CompatibleSinceYear { get; set; }\n\n    public virtual WebClientAccelerator Accelerator { get; set; } = null!;\n\n    public virtual Browser Browser { get; set; } = null!;\n}",
      "public partial class Browser\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public double? MarketShare { get; set; }\n\n    public virtual ICollection<AcceleratorCompatibleBrowser> AcceleratorCompatibleBrowsers { get; set; } = new List<AcceleratorCompatibleBrowser>();\n}",
      "public partial class WebClientAccelerator\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? OperatingSystem { get; set; }\n\n    public string? Client { get; set; }\n\n    public string? Connection { get; set; }\n\n    public virtual ICollection<AcceleratorCompatibleBrowser> AcceleratorCompatibleBrowsers { get; set; } = new List<AcceleratorCompatibleBrowser>();\n}"
    ]
  },
  "news_report": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.news_report;\n\npublic partial class NewsReportContext : DbContext\n{\n    public NewsReportContext()\n    {\n    }\n\n    public NewsReportContext(DbContextOptions<NewsReportContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Event> Events { get; set; }\n\n    public virtual DbSet<Journalist> Journalists { get; set; }\n\n    public virtual DbSet<NewsReport> NewsReports { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/news_report.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Event>(entity =>\n        {\n            entity.ToTable(\"event\");\n\n            entity.Property(e => e.EventId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Event_ID\");\n            entity.Property(e => e.EventAttendance)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Event_Attendance\");\n        });\n\n        modelBuilder.Entity<Journalist>(entity =>\n        {\n            entity.ToTable(\"journalist\");\n\n            entity.Property(e => e.JournalistId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"journalist_ID\");\n            entity.Property(e => e.YearsWorking)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Years_working\");\n        });\n\n        modelBuilder.Entity<NewsReport>(entity =>\n        {\n            entity.HasKey(e => new { e.JournalistId, e.EventId });\n\n            entity.ToTable(\"news_report\");\n\n            entity.Property(e => e.JournalistId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"journalist_ID\");\n            entity.Property(e => e.EventId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Event_ID\");\n            entity.Property(e => e.WorkType).HasColumnName(\"Work_Type\");\n\n            entity.HasOne(d => d.Event).WithMany(p => p.NewsReports)\n                .HasForeignKey(d => d.EventId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Journalist).WithMany(p => p.NewsReports)\n                .HasForeignKey(d => d.JournalistId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Event\n{\n    public int EventId { get; set; }\n\n    public string? Date { get; set; }\n\n    public string? Venue { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? EventAttendance { get; set; }\n\n    public virtual ICollection<NewsReport> NewsReports { get; set; } = new List<NewsReport>();\n}",
      "public partial class Journalist\n{\n    public int JournalistId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Nationality { get; set; }\n\n    public string? Age { get; set; }\n\n    public int? YearsWorking { get; set; }\n\n    public virtual ICollection<NewsReport> NewsReports { get; set; } = new List<NewsReport>();\n}",
      "public partial class NewsReport\n{\n    public int JournalistId { get; set; }\n\n    public int EventId { get; set; }\n\n    public string? WorkType { get; set; }\n\n    public virtual Event Event { get; set; } = null!;\n\n    public virtual Journalist Journalist { get; set; } = null!;\n}"
    ]
  },
  "insurance_fnol": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.insurance_fnol;\n\npublic partial class InsuranceFnolContext : DbContext\n{\n    public InsuranceFnolContext()\n    {\n    }\n\n    public InsuranceFnolContext(DbContextOptions<InsuranceFnolContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<AvailablePolicy> AvailablePolicies { get; set; }\n\n    public virtual DbSet<Claim> Claims { get; set; }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<CustomersPolicy> CustomersPolicies { get; set; }\n\n    public virtual DbSet<FirstNotificationOfLoss> FirstNotificationOfLosses { get; set; }\n\n    public virtual DbSet<Service> Services { get; set; }\n\n    public virtual DbSet<Settlement> Settlements { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/insurance_fnol.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<AvailablePolicy>(entity =>\n        {\n            entity.HasKey(e => e.PolicyId);\n\n            entity.ToTable(\"Available_Policies\");\n\n            entity.HasIndex(e => e.PolicyId, \"IX_Available_Policies_Policy_ID\").IsUnique();\n\n            entity.Property(e => e.PolicyId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Policy_ID\");\n            entity.Property(e => e.CustomerPhone)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Customer_Phone\");\n            entity.Property(e => e.PolicyTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"policy_type_code\");\n        });\n\n        modelBuilder.Entity<Claim>(entity =>\n        {\n            entity.HasIndex(e => e.ClaimId, \"IX_Claims_Claim_ID\").IsUnique();\n\n            entity.Property(e => e.ClaimId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Claim_ID\");\n            entity.Property(e => e.EffectiveDate)\n                .HasColumnType(\"DATE\")\n                .HasColumnName(\"Effective_Date\");\n            entity.Property(e => e.FnolId).HasColumnName(\"FNOL_ID\");\n\n            entity.HasOne(d => d.Fnol).WithMany(p => p.Claims)\n                .HasForeignKey(d => d.FnolId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.Property(e => e.CustomerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Customer_ID\");\n            entity.Property(e => e.CustomerName)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"Customer_name\");\n        });\n\n        modelBuilder.Entity<CustomersPolicy>(entity =>\n        {\n            entity.HasKey(e => new { e.CustomerId, e.PolicyId });\n\n            entity.ToTable(\"Customers_Policies\");\n\n            entity.Property(e => e.CustomerId).HasColumnName(\"Customer_ID\");\n            entity.Property(e => e.PolicyId).HasColumnName(\"Policy_ID\");\n            entity.Property(e => e.DateClosed)\n                .HasColumnType(\"DATE\")\n                .HasColumnName(\"Date_Closed\");\n            entity.Property(e => e.DateOpened)\n                .HasColumnType(\"DATE\")\n                .HasColumnName(\"Date_Opened\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.CustomersPolicies)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Policy).WithMany(p => p.CustomersPolicies)\n                .HasForeignKey(d => d.PolicyId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<FirstNotificationOfLoss>(entity =>\n        {\n            entity.HasKey(e => e.FnolId);\n\n            entity.ToTable(\"First_Notification_of_Loss\");\n\n            entity.HasIndex(e => e.FnolId, \"IX_First_Notification_of_Loss_FNOL_ID\").IsUnique();\n\n            entity.Property(e => e.FnolId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"FNOL_ID\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"Customer_ID\");\n            entity.Property(e => e.PolicyId).HasColumnName(\"Policy_ID\");\n            entity.Property(e => e.ServiceId).HasColumnName(\"Service_ID\");\n\n            entity.HasOne(d => d.Service).WithMany(p => p.FirstNotificationOfLosses)\n                .HasForeignKey(d => d.ServiceId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.CustomersPolicy).WithMany(p => p.FirstNotificationOfLosses)\n                .HasForeignKey(d => new { d.CustomerId, d.PolicyId })\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Service>(entity =>\n        {\n            entity.Property(e => e.ServiceId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Service_ID\");\n            entity.Property(e => e.ServiceName)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"Service_name\");\n        });\n\n        modelBuilder.Entity<Settlement>(entity =>\n        {\n            entity.HasIndex(e => e.SettlementId, \"IX_Settlements_Settlement_ID\").IsUnique();\n\n            entity.Property(e => e.SettlementId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Settlement_ID\");\n            entity.Property(e => e.ClaimId).HasColumnName(\"Claim_ID\");\n            entity.Property(e => e.EffectiveDate)\n                .HasColumnType(\"DATE\")\n                .HasColumnName(\"Effective_Date\");\n            entity.Property(e => e.SettlementAmount).HasColumnName(\"Settlement_Amount\");\n\n            entity.HasOne(d => d.Claim).WithMany(p => p.Settlements).HasForeignKey(d => d.ClaimId);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class AvailablePolicy\n{\n    public int PolicyId { get; set; }\n\n    public string? PolicyTypeCode { get; set; }\n\n    public string? CustomerPhone { get; set; }\n\n    public virtual ICollection<CustomersPolicy> CustomersPolicies { get; set; } = new List<CustomersPolicy>();\n}",
      "public partial class Claim\n{\n    public int ClaimId { get; set; }\n\n    public int FnolId { get; set; }\n\n    public DateOnly? EffectiveDate { get; set; }\n\n    public virtual FirstNotificationOfLoss Fnol { get; set; } = null!;\n\n    public virtual ICollection<Settlement> Settlements { get; set; } = new List<Settlement>();\n}",
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public string? CustomerName { get; set; }\n\n    public virtual ICollection<CustomersPolicy> CustomersPolicies { get; set; } = new List<CustomersPolicy>();\n}",
      "public partial class CustomersPolicy\n{\n    public int CustomerId { get; set; }\n\n    public int PolicyId { get; set; }\n\n    public DateOnly? DateOpened { get; set; }\n\n    public DateOnly? DateClosed { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n\n    public virtual ICollection<FirstNotificationOfLoss> FirstNotificationOfLosses { get; set; } = new List<FirstNotificationOfLoss>();\n\n    public virtual AvailablePolicy Policy { get; set; } = null!;\n}",
      "public partial class FirstNotificationOfLoss\n{\n    public int FnolId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public int PolicyId { get; set; }\n\n    public int ServiceId { get; set; }\n\n    public virtual ICollection<Claim> Claims { get; set; } = new List<Claim>();\n\n    public virtual CustomersPolicy CustomersPolicy { get; set; } = null!;\n\n    public virtual Service Service { get; set; } = null!;\n}",
      "public partial class Service\n{\n    public int ServiceId { get; set; }\n\n    public string? ServiceName { get; set; }\n\n    public virtual ICollection<FirstNotificationOfLoss> FirstNotificationOfLosses { get; set; } = new List<FirstNotificationOfLoss>();\n}",
      "public partial class Settlement\n{\n    public int SettlementId { get; set; }\n\n    public int? ClaimId { get; set; }\n\n    public DateOnly? EffectiveDate { get; set; }\n\n    public double? SettlementAmount { get; set; }\n\n    public virtual Claim? Claim { get; set; }\n}"
    ]
  },
  "customers_campaigns_ecommerce": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.customers_campaigns_ecommerce;\n\npublic partial class CustomersCampaignsEcommerceContext : DbContext\n{\n    public CustomersCampaignsEcommerceContext()\n    {\n    }\n\n    public CustomersCampaignsEcommerceContext(DbContextOptions<CustomersCampaignsEcommerceContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<CustomerAddress> CustomerAddresses { get; set; }\n\n    public virtual DbSet<CustomerOrder> CustomerOrders { get; set; }\n\n    public virtual DbSet<MailshotCampaign> MailshotCampaigns { get; set; }\n\n    public virtual DbSet<MailshotCustomer> MailshotCustomers { get; set; }\n\n    public virtual DbSet<OrderItem> OrderItems { get; set; }\n\n    public virtual DbSet<Premise> Premises { get; set; }\n\n    public virtual DbSet<Product> Products { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/customers_campaigns_ecommerce.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.Property(e => e.CustomerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"customer_id\");\n            entity.Property(e => e.CustomerAddress)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"customer_address\");\n            entity.Property(e => e.CustomerEmail)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"customer_email\");\n            entity.Property(e => e.CustomerLogin)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"customer_login\");\n            entity.Property(e => e.CustomerName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"customer_name\");\n            entity.Property(e => e.CustomerPassword)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"customer_password\");\n            entity.Property(e => e.CustomerPhone)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"customer_phone\");\n            entity.Property(e => e.PaymentMethod)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"payment_method\");\n        });\n\n        modelBuilder.Entity<CustomerAddress>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Customer_Addresses\");\n\n            entity.Property(e => e.AddressTypeCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"address_type_code\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.DateAddressFrom)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_address_from\");\n            entity.Property(e => e.DateAddressTo)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_address_to\");\n            entity.Property(e => e.PremiseId).HasColumnName(\"premise_id\");\n\n            entity.HasOne(d => d.Customer).WithMany()\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Premise).WithMany()\n                .HasForeignKey(d => d.PremiseId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<CustomerOrder>(entity =>\n        {\n            entity.HasKey(e => e.OrderId);\n\n            entity.ToTable(\"Customer_Orders\");\n\n            entity.Property(e => e.OrderId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"order_id\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.OrderDeliveredDatetime)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"order_delivered_datetime\");\n            entity.Property(e => e.OrderPlacedDatetime)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"order_placed_datetime\");\n            entity.Property(e => e.OrderShippingCharges)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"order_shipping_charges\");\n            entity.Property(e => e.OrderStatusCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"order_status_code\");\n            entity.Property(e => e.ShippingMethodCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"shipping_method_code\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerOrders)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<MailshotCampaign>(entity =>\n        {\n            entity.HasKey(e => e.MailshotId);\n\n            entity.ToTable(\"Mailshot_Campaigns\");\n\n            entity.Property(e => e.MailshotId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"mailshot_id\");\n            entity.Property(e => e.MailshotEndDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"mailshot_end_date\");\n            entity.Property(e => e.MailshotName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"mailshot_name\");\n            entity.Property(e => e.MailshotStartDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"mailshot_start_date\");\n            entity.Property(e => e.ProductCategory)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"product_category\");\n        });\n\n        modelBuilder.Entity<MailshotCustomer>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Mailshot_Customers\");\n\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.MailshotCustomerDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"mailshot_customer_date\");\n            entity.Property(e => e.MailshotId).HasColumnName(\"mailshot_id\");\n            entity.Property(e => e.OutcomeCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"outcome_code\");\n\n            entity.HasOne(d => d.Customer).WithMany()\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Mailshot).WithMany()\n                .HasForeignKey(d => d.MailshotId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<OrderItem>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Order_Items\");\n\n            entity.Property(e => e.ItemDeliveredDatetime)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"item_delivered_datetime\");\n            entity.Property(e => e.ItemId).HasColumnName(\"item_id\");\n            entity.Property(e => e.ItemOrderQuantity)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"item_order_quantity\");\n            entity.Property(e => e.ItemStatusCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"item_status_code\");\n            entity.Property(e => e.OrderId).HasColumnName(\"order_id\");\n            entity.Property(e => e.OrderItemStatusCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"order_item_status_code\");\n            entity.Property(e => e.ProductId).HasColumnName(\"product_id\");\n\n            entity.HasOne(d => d.Order).WithMany()\n                .HasForeignKey(d => d.OrderId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Product).WithMany()\n                .HasForeignKey(d => d.ProductId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Premise>(entity =>\n        {\n            entity.Property(e => e.PremiseId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"premise_id\");\n            entity.Property(e => e.PremiseDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"premise_details\");\n            entity.Property(e => e.PremisesType)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"premises_type\");\n        });\n\n        modelBuilder.Entity<Product>(entity =>\n        {\n            entity.Property(e => e.ProductId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"product_id\");\n            entity.Property(e => e.ProductCategory)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"product_category\");\n            entity.Property(e => e.ProductName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"product_name\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public string PaymentMethod { get; set; } = null!;\n\n    public string? CustomerName { get; set; }\n\n    public string? CustomerPhone { get; set; }\n\n    public string? CustomerEmail { get; set; }\n\n    public string? CustomerAddress { get; set; }\n\n    public string? CustomerLogin { get; set; }\n\n    public string? CustomerPassword { get; set; }\n\n    public virtual ICollection<CustomerOrder> CustomerOrders { get; set; } = new List<CustomerOrder>();\n}",
      "public partial class CustomerAddress\n{\n    public int CustomerId { get; set; }\n\n    public int PremiseId { get; set; }\n\n    public DateTime DateAddressFrom { get; set; }\n\n    public string AddressTypeCode { get; set; } = null!;\n\n    public DateTime? DateAddressTo { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n\n    public virtual Premise Premise { get; set; } = null!;\n}",
      "public partial class CustomerOrder\n{\n    public int OrderId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public string OrderStatusCode { get; set; } = null!;\n\n    public string ShippingMethodCode { get; set; } = null!;\n\n    public DateTime OrderPlacedDatetime { get; set; }\n\n    public DateTime? OrderDeliveredDatetime { get; set; }\n\n    public decimal? OrderShippingCharges { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n}",
      "public partial class MailshotCampaign\n{\n    public int MailshotId { get; set; }\n\n    public string? ProductCategory { get; set; }\n\n    public string? MailshotName { get; set; }\n\n    public DateTime? MailshotStartDate { get; set; }\n\n    public DateTime? MailshotEndDate { get; set; }\n}",
      "public partial class MailshotCustomer\n{\n    public int MailshotId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public string OutcomeCode { get; set; } = null!;\n\n    public DateTime? MailshotCustomerDate { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n\n    public virtual MailshotCampaign Mailshot { get; set; } = null!;\n}",
      "public partial class OrderItem\n{\n    public int ItemId { get; set; }\n\n    public string OrderItemStatusCode { get; set; } = null!;\n\n    public int OrderId { get; set; }\n\n    public int ProductId { get; set; }\n\n    public string? ItemStatusCode { get; set; }\n\n    public DateTime? ItemDeliveredDatetime { get; set; }\n\n    public string? ItemOrderQuantity { get; set; }\n\n    public virtual CustomerOrder Order { get; set; } = null!;\n\n    public virtual Product Product { get; set; } = null!;\n}",
      "public partial class Premise\n{\n    public int PremiseId { get; set; }\n\n    public string PremisesType { get; set; } = null!;\n\n    public string? PremiseDetails { get; set; }\n}",
      "public partial class Product\n{\n    public int ProductId { get; set; }\n\n    public string ProductCategory { get; set; } = null!;\n\n    public string? ProductName { get; set; }\n}"
    ]
  },
  "gymnast": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.gymnast;\n\npublic partial class GymnastContext : DbContext\n{\n    public GymnastContext()\n    {\n    }\n\n    public GymnastContext(DbContextOptions<GymnastContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Gymnast> Gymnasts { get; set; }\n\n    public virtual DbSet<Person> People { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/gymnast.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Gymnast>(entity =>\n        {\n            entity.ToTable(\"gymnast\");\n\n            entity.Property(e => e.GymnastId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Gymnast_ID\");\n            entity.Property(e => e.FloorExercisePoints).HasColumnName(\"Floor_Exercise_Points\");\n            entity.Property(e => e.HorizontalBarPoints).HasColumnName(\"Horizontal_Bar_Points\");\n            entity.Property(e => e.ParallelBarsPoints).HasColumnName(\"Parallel_Bars_Points\");\n            entity.Property(e => e.PommelHorsePoints).HasColumnName(\"Pommel_Horse_Points\");\n            entity.Property(e => e.RingsPoints).HasColumnName(\"Rings_Points\");\n            entity.Property(e => e.TotalPoints).HasColumnName(\"Total_Points\");\n            entity.Property(e => e.VaultPoints).HasColumnName(\"Vault_Points\");\n\n            entity.HasOne(d => d.GymnastNavigation).WithOne(p => p.Gymnast)\n                .HasForeignKey<Gymnast>(d => d.GymnastId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Person>(entity =>\n        {\n            entity.HasKey(e => e.PeopleId);\n\n            entity.ToTable(\"people\");\n\n            entity.Property(e => e.PeopleId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"People_ID\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Gymnast\n{\n    public int GymnastId { get; set; }\n\n    public double? FloorExercisePoints { get; set; }\n\n    public double? PommelHorsePoints { get; set; }\n\n    public double? RingsPoints { get; set; }\n\n    public double? VaultPoints { get; set; }\n\n    public double? ParallelBarsPoints { get; set; }\n\n    public double? HorizontalBarPoints { get; set; }\n\n    public double? TotalPoints { get; set; }\n\n    public virtual Person GymnastNavigation { get; set; } = null!;\n}",
      "public partial class Person\n{\n    public int PeopleId { get; set; }\n\n    public string? Name { get; set; }\n\n    public double? Age { get; set; }\n\n    public double? Height { get; set; }\n\n    public string? Hometown { get; set; }\n\n    public virtual Gymnast? Gymnast { get; set; }\n}"
    ]
  },
  "local_govt_in_alabama": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.local_govt_in_alabama;\n\npublic partial class LocalGovtInAlabamaContext : DbContext\n{\n    public LocalGovtInAlabamaContext()\n    {\n    }\n\n    public LocalGovtInAlabamaContext(DbContextOptions<LocalGovtInAlabamaContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Event> Events { get; set; }\n\n    public virtual DbSet<Participant> Participants { get; set; }\n\n    public virtual DbSet<Service> Services { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/local_govt_in_alabama.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Event>(entity =>\n        {\n            entity.Property(e => e.EventId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Event_ID\");\n            entity.Property(e => e.EventDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Event_Details\");\n            entity.Property(e => e.ServiceId).HasColumnName(\"Service_ID\");\n\n            entity.HasOne(d => d.Service).WithMany(p => p.Events)\n                .HasForeignKey(d => d.ServiceId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasMany(d => d.Participants).WithMany(p => p.Events)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"ParticipantsInEvent\",\n                    r => r.HasOne<Participant>().WithMany()\n                        .HasForeignKey(\"ParticipantId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Event>().WithMany()\n                        .HasForeignKey(\"EventId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"EventId\", \"ParticipantId\");\n                        j.ToTable(\"Participants_in_Events\");\n                        j.IndexerProperty<int>(\"EventId\").HasColumnName(\"Event_ID\");\n                        j.IndexerProperty<int>(\"ParticipantId\").HasColumnName(\"Participant_ID\");\n                    });\n        });\n\n        modelBuilder.Entity<Participant>(entity =>\n        {\n            entity.Property(e => e.ParticipantId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Participant_ID\");\n            entity.Property(e => e.ParticipantDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Participant_Details\");\n            entity.Property(e => e.ParticipantTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Participant_Type_Code\");\n        });\n\n        modelBuilder.Entity<Service>(entity =>\n        {\n            entity.Property(e => e.ServiceId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Service_ID\");\n            entity.Property(e => e.ServiceTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Service_Type_Code\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Event\n{\n    public int EventId { get; set; }\n\n    public int ServiceId { get; set; }\n\n    public string? EventDetails { get; set; }\n\n    public virtual Service Service { get; set; } = null!;\n\n    public virtual ICollection<Participant> Participants { get; set; } = new List<Participant>();\n}",
      "public partial class Participant\n{\n    public int ParticipantId { get; set; }\n\n    public string ParticipantTypeCode { get; set; } = null!;\n\n    public string? ParticipantDetails { get; set; }\n\n    public virtual ICollection<Event> Events { get; set; } = new List<Event>();\n}",
      "public partial class Service\n{\n    public int ServiceId { get; set; }\n\n    public string ServiceTypeCode { get; set; } = null!;\n\n    public virtual ICollection<Event> Events { get; set; } = new List<Event>();\n}"
    ]
  },
  "tracking_orders": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.tracking_orders;\n\npublic partial class TrackingOrdersContext : DbContext\n{\n    public TrackingOrdersContext()\n    {\n    }\n\n    public TrackingOrdersContext(DbContextOptions<TrackingOrdersContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<Invoice> Invoices { get; set; }\n\n    public virtual DbSet<Order> Orders { get; set; }\n\n    public virtual DbSet<OrderItem> OrderItems { get; set; }\n\n    public virtual DbSet<Product> Products { get; set; }\n\n    public virtual DbSet<Shipment> Shipments { get; set; }\n\n    public virtual DbSet<ShipmentItem> ShipmentItems { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/tracking_orders.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.Property(e => e.CustomerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"customer_id\");\n            entity.Property(e => e.CustomerDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"customer_details\");\n            entity.Property(e => e.CustomerName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"customer_name\");\n        });\n\n        modelBuilder.Entity<Invoice>(entity =>\n        {\n            entity.HasKey(e => e.InvoiceNumber);\n\n            entity.Property(e => e.InvoiceNumber)\n                .ValueGeneratedNever()\n                .HasColumnName(\"invoice_number\");\n            entity.Property(e => e.InvoiceDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"invoice_date\");\n            entity.Property(e => e.InvoiceDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"invoice_details\");\n        });\n\n        modelBuilder.Entity<Order>(entity =>\n        {\n            entity.Property(e => e.OrderId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"order_id\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.DateOrderPlaced)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_order_placed\");\n            entity.Property(e => e.OrderDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"order_details\");\n            entity.Property(e => e.OrderStatus)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"order_status\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.Orders)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<OrderItem>(entity =>\n        {\n            entity.ToTable(\"Order_Items\");\n\n            entity.Property(e => e.OrderItemId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"order_item_id\");\n            entity.Property(e => e.OrderId).HasColumnName(\"order_id\");\n            entity.Property(e => e.OrderItemDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"order_item_details\");\n            entity.Property(e => e.OrderItemStatus)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"order_item_status\");\n            entity.Property(e => e.ProductId).HasColumnName(\"product_id\");\n\n            entity.HasOne(d => d.Order).WithMany(p => p.OrderItems)\n                .HasForeignKey(d => d.OrderId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Product).WithMany(p => p.OrderItems)\n                .HasForeignKey(d => d.ProductId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Product>(entity =>\n        {\n            entity.Property(e => e.ProductId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"product_id\");\n            entity.Property(e => e.ProductDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"product_details\");\n            entity.Property(e => e.ProductName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"product_name\");\n        });\n\n        modelBuilder.Entity<Shipment>(entity =>\n        {\n            entity.Property(e => e.ShipmentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"shipment_id\");\n            entity.Property(e => e.InvoiceNumber).HasColumnName(\"invoice_number\");\n            entity.Property(e => e.OrderId).HasColumnName(\"order_id\");\n            entity.Property(e => e.OtherShipmentDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_shipment_details\");\n            entity.Property(e => e.ShipmentDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"shipment_date\");\n            entity.Property(e => e.ShipmentTrackingNumber)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"shipment_tracking_number\");\n\n            entity.HasOne(d => d.InvoiceNumberNavigation).WithMany(p => p.Shipments)\n                .HasForeignKey(d => d.InvoiceNumber)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Order).WithMany(p => p.Shipments)\n                .HasForeignKey(d => d.OrderId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ShipmentItem>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Shipment_Items\");\n\n            entity.Property(e => e.OrderItemId).HasColumnName(\"order_item_id\");\n            entity.Property(e => e.ShipmentId).HasColumnName(\"shipment_id\");\n\n            entity.HasOne(d => d.OrderItem).WithMany()\n                .HasForeignKey(d => d.OrderItemId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Shipment).WithMany()\n                .HasForeignKey(d => d.ShipmentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public string? CustomerName { get; set; }\n\n    public string? CustomerDetails { get; set; }\n\n    public virtual ICollection<Order> Orders { get; set; } = new List<Order>();\n}",
      "public partial class Invoice\n{\n    public int InvoiceNumber { get; set; }\n\n    public DateTime? InvoiceDate { get; set; }\n\n    public string? InvoiceDetails { get; set; }\n\n    public virtual ICollection<Shipment> Shipments { get; set; } = new List<Shipment>();\n}",
      "public partial class Order\n{\n    public int OrderId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public string OrderStatus { get; set; } = null!;\n\n    public DateTime DateOrderPlaced { get; set; }\n\n    public string? OrderDetails { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n\n    public virtual ICollection<OrderItem> OrderItems { get; set; } = new List<OrderItem>();\n\n    public virtual ICollection<Shipment> Shipments { get; set; } = new List<Shipment>();\n}",
      "public partial class OrderItem\n{\n    public int OrderItemId { get; set; }\n\n    public int ProductId { get; set; }\n\n    public int OrderId { get; set; }\n\n    public string OrderItemStatus { get; set; } = null!;\n\n    public string? OrderItemDetails { get; set; }\n\n    public virtual Order Order { get; set; } = null!;\n\n    public virtual Product Product { get; set; } = null!;\n}",
      "public partial class Product\n{\n    public int ProductId { get; set; }\n\n    public string? ProductName { get; set; }\n\n    public string? ProductDetails { get; set; }\n\n    public virtual ICollection<OrderItem> OrderItems { get; set; } = new List<OrderItem>();\n}",
      "public partial class Shipment\n{\n    public int ShipmentId { get; set; }\n\n    public int OrderId { get; set; }\n\n    public int InvoiceNumber { get; set; }\n\n    public string? ShipmentTrackingNumber { get; set; }\n\n    public DateTime? ShipmentDate { get; set; }\n\n    public string? OtherShipmentDetails { get; set; }\n\n    public virtual Invoice InvoiceNumberNavigation { get; set; } = null!;\n\n    public virtual Order Order { get; set; } = null!;\n}",
      "public partial class ShipmentItem\n{\n    public int ShipmentId { get; set; }\n\n    public int OrderItemId { get; set; }\n\n    public virtual OrderItem OrderItem { get; set; } = null!;\n\n    public virtual Shipment Shipment { get; set; } = null!;\n}"
    ]
  },
  "network_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.network_1;\n\npublic partial class Network1Context : DbContext\n{\n    public Network1Context()\n    {\n    }\n\n    public Network1Context(DbContextOptions<Network1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Highschooler> Highschoolers { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/network_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Highschooler>(entity =>\n        {\n            entity.ToTable(\"Highschooler\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"ID\");\n            entity.Property(e => e.Grade)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"grade\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n\n            entity.HasMany(d => d.Friends).WithMany(p => p.Students)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"Friend\",\n                    r => r.HasOne<Highschooler>().WithMany()\n                        .HasForeignKey(\"FriendId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Highschooler>().WithMany()\n                        .HasForeignKey(\"StudentId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"StudentId\", \"FriendId\");\n                        j.ToTable(\"Friend\");\n                        j.IndexerProperty<int>(\"StudentId\")\n                            .HasColumnType(\"INT\")\n                            .HasColumnName(\"student_id\");\n                        j.IndexerProperty<int>(\"FriendId\")\n                            .HasColumnType(\"INT\")\n                            .HasColumnName(\"friend_id\");\n                    });\n\n            entity.HasMany(d => d.Likeds).WithMany(p => p.StudentsNavigation)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"Like\",\n                    r => r.HasOne<Highschooler>().WithMany()\n                        .HasForeignKey(\"LikedId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Highschooler>().WithMany()\n                        .HasForeignKey(\"StudentId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"StudentId\", \"LikedId\");\n                        j.ToTable(\"Likes\");\n                        j.IndexerProperty<int>(\"StudentId\")\n                            .HasColumnType(\"INT\")\n                            .HasColumnName(\"student_id\");\n                        j.IndexerProperty<int>(\"LikedId\")\n                            .HasColumnType(\"INT\")\n                            .HasColumnName(\"liked_id\");\n                    });\n\n            entity.HasMany(d => d.Students).WithMany(p => p.Friends)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"Friend\",\n                    r => r.HasOne<Highschooler>().WithMany()\n                        .HasForeignKey(\"StudentId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Highschooler>().WithMany()\n                        .HasForeignKey(\"FriendId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"StudentId\", \"FriendId\");\n                        j.ToTable(\"Friend\");\n                        j.IndexerProperty<int>(\"StudentId\")\n                            .HasColumnType(\"INT\")\n                            .HasColumnName(\"student_id\");\n                        j.IndexerProperty<int>(\"FriendId\")\n                            .HasColumnType(\"INT\")\n                            .HasColumnName(\"friend_id\");\n                    });\n\n            entity.HasMany(d => d.StudentsNavigation).WithMany(p => p.Likeds)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"Like\",\n                    r => r.HasOne<Highschooler>().WithMany()\n                        .HasForeignKey(\"StudentId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Highschooler>().WithMany()\n                        .HasForeignKey(\"LikedId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"StudentId\", \"LikedId\");\n                        j.ToTable(\"Likes\");\n                        j.IndexerProperty<int>(\"StudentId\")\n                            .HasColumnType(\"INT\")\n                            .HasColumnName(\"student_id\");\n                        j.IndexerProperty<int>(\"LikedId\")\n                            .HasColumnType(\"INT\")\n                            .HasColumnName(\"liked_id\");\n                    });\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Highschooler\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? Grade { get; set; }\n\n    public virtual ICollection<Highschooler> Friends { get; set; } = new List<Highschooler>();\n\n    public virtual ICollection<Highschooler> Likeds { get; set; } = new List<Highschooler>();\n\n    public virtual ICollection<Highschooler> Students { get; set; } = new List<Highschooler>();\n\n    public virtual ICollection<Highschooler> StudentsNavigation { get; set; } = new List<Highschooler>();\n}"
    ]
  },
  "twitter_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.twitter_1;\n\npublic partial class Twitter1Context : DbContext\n{\n    public Twitter1Context()\n    {\n    }\n\n    public Twitter1Context(DbContextOptions<Twitter1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Tweet> Tweets { get; set; }\n\n    public virtual DbSet<UserProfile> UserProfiles { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/twitter_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Tweet>(entity =>\n        {\n            entity.ToTable(\"tweets\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"bigint(20)\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.Createdate)\n                .HasDefaultValueSql(\"CURRENT_TIMESTAMP\")\n                .HasColumnType(\"datetime\")\n                .HasColumnName(\"createdate\");\n            entity.Property(e => e.Text)\n                .HasColumnType(\"char(140)\")\n                .HasColumnName(\"text\");\n            entity.Property(e => e.Uid)\n                .HasColumnType(\"int(11)\")\n                .HasColumnName(\"uid\");\n\n            entity.HasOne(d => d.UidNavigation).WithMany(p => p.Tweets)\n                .HasForeignKey(d => d.Uid)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<UserProfile>(entity =>\n        {\n            entity.HasKey(e => e.Uid);\n\n            entity.ToTable(\"user_profiles\");\n\n            entity.Property(e => e.Uid)\n                .ValueGeneratedNever()\n                .HasColumnType(\"int(11)\")\n                .HasColumnName(\"uid\");\n            entity.Property(e => e.Email)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(255)\")\n                .HasColumnName(\"email\");\n            entity.Property(e => e.Followers)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"int(11)\")\n                .HasColumnName(\"followers\");\n            entity.Property(e => e.Name)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(255)\")\n                .HasColumnName(\"name\");\n            entity.Property(e => e.Partitionid)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"int(11)\")\n                .HasColumnName(\"partitionid\");\n\n            entity.HasMany(d => d.F1s).WithMany(p => p.F2s)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"Follow\",\n                    r => r.HasOne<UserProfile>().WithMany()\n                        .HasForeignKey(\"F1\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<UserProfile>().WithMany()\n                        .HasForeignKey(\"F2\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"F1\", \"F2\");\n                        j.ToTable(\"follows\");\n                        j.IndexerProperty<int>(\"F1\")\n                            .HasColumnType(\"int(11)\")\n                            .HasColumnName(\"f1\");\n                        j.IndexerProperty<int>(\"F2\")\n                            .HasColumnType(\"int(11)\")\n                            .HasColumnName(\"f2\");\n                    });\n\n            entity.HasMany(d => d.F2s).WithMany(p => p.F1s)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"Follow\",\n                    r => r.HasOne<UserProfile>().WithMany()\n                        .HasForeignKey(\"F2\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<UserProfile>().WithMany()\n                        .HasForeignKey(\"F1\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"F1\", \"F2\");\n                        j.ToTable(\"follows\");\n                        j.IndexerProperty<int>(\"F1\")\n                            .HasColumnType(\"int(11)\")\n                            .HasColumnName(\"f1\");\n                        j.IndexerProperty<int>(\"F2\")\n                            .HasColumnType(\"int(11)\")\n                            .HasColumnName(\"f2\");\n                    });\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Tweet\n{\n    public long Id { get; set; }\n\n    public int Uid { get; set; }\n\n    public string Text { get; set; } = null!;\n\n    public DateTime? Createdate { get; set; }\n\n    public virtual UserProfile UidNavigation { get; set; } = null!;\n}",
      "public partial class UserProfile\n{\n    public int Uid { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Email { get; set; }\n\n    public int? Partitionid { get; set; }\n\n    public int? Followers { get; set; }\n\n    public virtual ICollection<Tweet> Tweets { get; set; } = new List<Tweet>();\n\n    public virtual ICollection<UserProfile> F1s { get; set; } = new List<UserProfile>();\n\n    public virtual ICollection<UserProfile> F2s { get; set; } = new List<UserProfile>();\n}"
    ]
  },
  "store_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.store_1;\n\npublic partial class Store1Context : DbContext\n{\n    public Store1Context()\n    {\n    }\n\n    public Store1Context(DbContextOptions<Store1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Album> Albums { get; set; }\n\n    public virtual DbSet<Artist> Artists { get; set; }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<Employee> Employees { get; set; }\n\n    public virtual DbSet<Genre> Genres { get; set; }\n\n    public virtual DbSet<Invoice> Invoices { get; set; }\n\n    public virtual DbSet<InvoiceLine> InvoiceLines { get; set; }\n\n    public virtual DbSet<MediaType> MediaTypes { get; set; }\n\n    public virtual DbSet<Playlist> Playlists { get; set; }\n\n    public virtual DbSet<Track> Tracks { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/store_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Album>(entity =>\n        {\n            entity.ToTable(\"albums\");\n\n            entity.HasIndex(e => e.ArtistId, \"index_album_on_artist_id\");\n\n            entity.HasIndex(e => e.Id, \"index_album_on_id\").IsUnique();\n\n            entity.Property(e => e.Id).HasColumnName(\"id\");\n            entity.Property(e => e.ArtistId).HasColumnName(\"artist_id\");\n            entity.Property(e => e.Title)\n                .HasColumnType(\"VARCHAR(160)\")\n                .HasColumnName(\"title\");\n\n            entity.HasOne(d => d.Artist).WithMany(p => p.Albums)\n                .HasForeignKey(d => d.ArtistId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Artist>(entity =>\n        {\n            entity.ToTable(\"artists\");\n\n            entity.HasIndex(e => e.Id, \"index_artist_on_id\").IsUnique();\n\n            entity.Property(e => e.Id).HasColumnName(\"id\");\n            entity.Property(e => e.Name)\n                .HasColumnType(\"VARCHAR(120)\")\n                .HasColumnName(\"name\");\n        });\n\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.ToTable(\"customers\");\n\n            entity.HasIndex(e => e.Id, \"index_customer_on_id\").IsUnique();\n\n            entity.HasIndex(e => e.SupportRepId, \"index_customers_on_support_rep_id\");\n\n            entity.Property(e => e.Id).HasColumnName(\"id\");\n            entity.Property(e => e.Address)\n                .HasColumnType(\"VARCHAR(70)\")\n                .HasColumnName(\"address\");\n            entity.Property(e => e.City)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"city\");\n            entity.Property(e => e.Company)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"company\");\n            entity.Property(e => e.Country)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"country\");\n            entity.Property(e => e.Email)\n                .HasColumnType(\"VARCHAR(60)\")\n                .HasColumnName(\"email\");\n            entity.Property(e => e.Fax)\n                .HasColumnType(\"VARCHAR(24)\")\n                .HasColumnName(\"fax\");\n            entity.Property(e => e.FirstName)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"first_name\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"last_name\");\n            entity.Property(e => e.Phone)\n                .HasColumnType(\"VARCHAR(24)\")\n                .HasColumnName(\"phone\");\n            entity.Property(e => e.PostalCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"postal_code\");\n            entity.Property(e => e.State)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"state\");\n            entity.Property(e => e.SupportRepId).HasColumnName(\"support_rep_id\");\n\n            entity.HasOne(d => d.SupportRep).WithMany(p => p.Customers).HasForeignKey(d => d.SupportRepId);\n        });\n\n        modelBuilder.Entity<Employee>(entity =>\n        {\n            entity.ToTable(\"employees\");\n\n            entity.HasIndex(e => e.Id, \"index_employee_on_id\").IsUnique();\n\n            entity.HasIndex(e => e.ReportsTo, \"index_employees_on_reports_to\");\n\n            entity.Property(e => e.Id).HasColumnName(\"id\");\n            entity.Property(e => e.Address)\n                .HasColumnType(\"VARCHAR(70)\")\n                .HasColumnName(\"address\");\n            entity.Property(e => e.BirthDate)\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"birth_date\");\n            entity.Property(e => e.City)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"city\");\n            entity.Property(e => e.Country)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"country\");\n            entity.Property(e => e.Email)\n                .HasColumnType(\"VARCHAR(60)\")\n                .HasColumnName(\"email\");\n            entity.Property(e => e.Fax)\n                .HasColumnType(\"VARCHAR(24)\")\n                .HasColumnName(\"fax\");\n            entity.Property(e => e.FirstName)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"first_name\");\n            entity.Property(e => e.HireDate)\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"hire_date\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"last_name\");\n            entity.Property(e => e.Phone)\n                .HasColumnType(\"VARCHAR(24)\")\n                .HasColumnName(\"phone\");\n            entity.Property(e => e.PostalCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"postal_code\");\n            entity.Property(e => e.ReportsTo).HasColumnName(\"reports_to\");\n            entity.Property(e => e.State)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"state\");\n            entity.Property(e => e.Title)\n                .HasColumnType(\"VARCHAR(30)\")\n                .HasColumnName(\"title\");\n\n            entity.HasOne(d => d.ReportsToNavigation).WithMany(p => p.InverseReportsToNavigation).HasForeignKey(d => d.ReportsTo);\n        });\n\n        modelBuilder.Entity<Genre>(entity =>\n        {\n            entity.ToTable(\"genres\");\n\n            entity.HasIndex(e => e.Id, \"index_genre_on_id\").IsUnique();\n\n            entity.Property(e => e.Id).HasColumnName(\"id\");\n            entity.Property(e => e.Name)\n                .HasColumnType(\"VARCHAR(120)\")\n                .HasColumnName(\"name\");\n        });\n\n        modelBuilder.Entity<Invoice>(entity =>\n        {\n            entity.ToTable(\"invoices\");\n\n            entity.HasIndex(e => e.Id, \"index_invoice_on_id\").IsUnique();\n\n            entity.HasIndex(e => e.CustomerId, \"index_invoices_on_customer_id\");\n\n            entity.Property(e => e.Id).HasColumnName(\"id\");\n            entity.Property(e => e.BillingAddress)\n                .HasColumnType(\"VARCHAR(70)\")\n                .HasColumnName(\"billing_address\");\n            entity.Property(e => e.BillingCity)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"billing_city\");\n            entity.Property(e => e.BillingCountry)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"billing_country\");\n            entity.Property(e => e.BillingPostalCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"billing_postal_code\");\n            entity.Property(e => e.BillingState)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"billing_state\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.InvoiceDate)\n                .HasColumnType(\"TIMESTAMP\")\n                .HasColumnName(\"invoice_date\");\n            entity.Property(e => e.Total)\n                .HasColumnType(\"NUMERIC(10,2)\")\n                .HasColumnName(\"total\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.Invoices)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<InvoiceLine>(entity =>\n        {\n            entity.ToTable(\"invoice_lines\");\n\n            entity.HasIndex(e => e.Id, \"index_invoice_line_on_id\").IsUnique();\n\n            entity.HasIndex(e => e.InvoiceId, \"index_invoice_lines_on_invoice_id\");\n\n            entity.HasIndex(e => e.TrackId, \"index_invoice_lines_on_track_id\");\n\n            entity.Property(e => e.Id).HasColumnName(\"id\");\n            entity.Property(e => e.InvoiceId).HasColumnName(\"invoice_id\");\n            entity.Property(e => e.Quantity).HasColumnName(\"quantity\");\n            entity.Property(e => e.TrackId).HasColumnName(\"track_id\");\n            entity.Property(e => e.UnitPrice)\n                .HasColumnType(\"NUMERIC(10,2)\")\n                .HasColumnName(\"unit_price\");\n\n            entity.HasOne(d => d.Invoice).WithMany(p => p.InvoiceLines)\n                .HasForeignKey(d => d.InvoiceId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Track).WithMany(p => p.InvoiceLines)\n                .HasForeignKey(d => d.TrackId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<MediaType>(entity =>\n        {\n            entity.ToTable(\"media_types\");\n\n            entity.HasIndex(e => e.Id, \"index_media_type_on_id\").IsUnique();\n\n            entity.Property(e => e.Id).HasColumnName(\"id\");\n            entity.Property(e => e.Name)\n                .HasColumnType(\"VARCHAR(120)\")\n                .HasColumnName(\"name\");\n        });\n\n        modelBuilder.Entity<Playlist>(entity =>\n        {\n            entity.ToTable(\"playlists\");\n\n            entity.HasIndex(e => e.Id, \"index_playlist_on_id\").IsUnique();\n\n            entity.Property(e => e.Id).HasColumnName(\"id\");\n            entity.Property(e => e.Name)\n                .HasColumnType(\"VARCHAR(120)\")\n                .HasColumnName(\"name\");\n\n            entity.HasMany(d => d.Tracks).WithMany(p => p.Playlists)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"PlaylistTrack\",\n                    r => r.HasOne<Track>().WithMany()\n                        .HasForeignKey(\"TrackId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Playlist>().WithMany()\n                        .HasForeignKey(\"PlaylistId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"PlaylistId\", \"TrackId\");\n                        j.ToTable(\"playlist_tracks\");\n                        j.HasIndex(new[] { \"PlaylistId\", \"TrackId\" }, \"index_playlist_track_on_id\").IsUnique();\n                        j.HasIndex(new[] { \"TrackId\" }, \"index_playlist_tracks_on_track_id\");\n                        j.IndexerProperty<int>(\"PlaylistId\").HasColumnName(\"playlist_id\");\n                        j.IndexerProperty<int>(\"TrackId\").HasColumnName(\"track_id\");\n                    });\n        });\n\n        modelBuilder.Entity<Track>(entity =>\n        {\n            entity.ToTable(\"tracks\");\n\n            entity.HasIndex(e => e.GenreId, \"index_track_on_genre_id\");\n\n            entity.HasIndex(e => e.Id, \"index_track_on_id\").IsUnique();\n\n            entity.HasIndex(e => e.MediaTypeId, \"index_track_on_media_type_id\");\n\n            entity.HasIndex(e => e.AlbumId, \"index_tracks_on_album_id\");\n\n            entity.Property(e => e.Id).HasColumnName(\"id\");\n            entity.Property(e => e.AlbumId).HasColumnName(\"album_id\");\n            entity.Property(e => e.Bytes).HasColumnName(\"bytes\");\n            entity.Property(e => e.Composer)\n                .HasColumnType(\"VARCHAR(220)\")\n                .HasColumnName(\"composer\");\n            entity.Property(e => e.GenreId).HasColumnName(\"genre_id\");\n            entity.Property(e => e.MediaTypeId).HasColumnName(\"media_type_id\");\n            entity.Property(e => e.Milliseconds).HasColumnName(\"milliseconds\");\n            entity.Property(e => e.Name)\n                .HasColumnType(\"VARCHAR(200)\")\n                .HasColumnName(\"name\");\n            entity.Property(e => e.UnitPrice)\n                .HasColumnType(\"NUMERIC(10,2)\")\n                .HasColumnName(\"unit_price\");\n\n            entity.HasOne(d => d.Album).WithMany(p => p.Tracks).HasForeignKey(d => d.AlbumId);\n\n            entity.HasOne(d => d.Genre).WithMany(p => p.Tracks).HasForeignKey(d => d.GenreId);\n\n            entity.HasOne(d => d.MediaType).WithMany(p => p.Tracks)\n                .HasForeignKey(d => d.MediaTypeId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Album\n{\n    public int Id { get; set; }\n\n    public string Title { get; set; } = null!;\n\n    public int ArtistId { get; set; }\n\n    public virtual Artist Artist { get; set; } = null!;\n\n    public virtual ICollection<Track> Tracks { get; set; } = new List<Track>();\n}",
      "public partial class Artist\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public virtual ICollection<Album> Albums { get; set; } = new List<Album>();\n}",
      "public partial class Customer\n{\n    public int Id { get; set; }\n\n    public string FirstName { get; set; } = null!;\n\n    public string LastName { get; set; } = null!;\n\n    public string? Company { get; set; }\n\n    public string? Address { get; set; }\n\n    public string? City { get; set; }\n\n    public string? State { get; set; }\n\n    public string? Country { get; set; }\n\n    public string? PostalCode { get; set; }\n\n    public string? Phone { get; set; }\n\n    public string? Fax { get; set; }\n\n    public string Email { get; set; } = null!;\n\n    public int? SupportRepId { get; set; }\n\n    public virtual ICollection<Invoice> Invoices { get; set; } = new List<Invoice>();\n\n    public virtual Employee? SupportRep { get; set; }\n}",
      "public partial class Employee\n{\n    public int Id { get; set; }\n\n    public string LastName { get; set; } = null!;\n\n    public string FirstName { get; set; } = null!;\n\n    public string? Title { get; set; }\n\n    public int? ReportsTo { get; set; }\n\n    public DateTime? BirthDate { get; set; }\n\n    public DateTime? HireDate { get; set; }\n\n    public string? Address { get; set; }\n\n    public string? City { get; set; }\n\n    public string? State { get; set; }\n\n    public string? Country { get; set; }\n\n    public string? PostalCode { get; set; }\n\n    public string? Phone { get; set; }\n\n    public string? Fax { get; set; }\n\n    public string? Email { get; set; }\n\n    public virtual ICollection<Customer> Customers { get; set; } = new List<Customer>();\n\n    public virtual ICollection<Employee> InverseReportsToNavigation { get; set; } = new List<Employee>();\n\n    public virtual Employee? ReportsToNavigation { get; set; }\n}",
      "public partial class Genre\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public virtual ICollection<Track> Tracks { get; set; } = new List<Track>();\n}",
      "public partial class Invoice\n{\n    public int Id { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public DateTime InvoiceDate { get; set; }\n\n    public string? BillingAddress { get; set; }\n\n    public string? BillingCity { get; set; }\n\n    public string? BillingState { get; set; }\n\n    public string? BillingCountry { get; set; }\n\n    public string? BillingPostalCode { get; set; }\n\n    public double Total { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n\n    public virtual ICollection<InvoiceLine> InvoiceLines { get; set; } = new List<InvoiceLine>();\n}",
      "public partial class InvoiceLine\n{\n    public int Id { get; set; }\n\n    public int InvoiceId { get; set; }\n\n    public int TrackId { get; set; }\n\n    public double UnitPrice { get; set; }\n\n    public int Quantity { get; set; }\n\n    public virtual Invoice Invoice { get; set; } = null!;\n\n    public virtual Track Track { get; set; } = null!;\n}",
      "public partial class MediaType\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public virtual ICollection<Track> Tracks { get; set; } = new List<Track>();\n}",
      "public partial class Track\n{\n    public int Id { get; set; }\n\n    public string Name { get; set; } = null!;\n\n    public int? AlbumId { get; set; }\n\n    public int MediaTypeId { get; set; }\n\n    public int? GenreId { get; set; }\n\n    public string? Composer { get; set; }\n\n    public int Milliseconds { get; set; }\n\n    public int? Bytes { get; set; }\n\n    public double UnitPrice { get; set; }\n\n    public virtual Album? Album { get; set; }\n\n    public virtual Genre? Genre { get; set; }\n\n    public virtual ICollection<InvoiceLine> InvoiceLines { get; set; } = new List<InvoiceLine>();\n\n    public virtual MediaType MediaType { get; set; } = null!;\n\n    public virtual ICollection<Playlist> Playlists { get; set; } = new List<Playlist>();\n}"
    ]
  },
  "match_season": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.match_season;\n\npublic partial class MatchSeasonContext : DbContext\n{\n    public MatchSeasonContext()\n    {\n    }\n\n    public MatchSeasonContext(DbContextOptions<MatchSeasonContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Country> Countries { get; set; }\n\n    public virtual DbSet<MatchSeason> MatchSeasons { get; set; }\n\n    public virtual DbSet<Player> Players { get; set; }\n\n    public virtual DbSet<Team> Teams { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/match_season.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Country>(entity =>\n        {\n            entity.ToTable(\"country\");\n\n            entity.Property(e => e.CountryId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Country_id\");\n            entity.Property(e => e.CountryName).HasColumnName(\"Country_name\");\n            entity.Property(e => e.OfficialNativeLanguage).HasColumnName(\"Official_native_language\");\n        });\n\n        modelBuilder.Entity<MatchSeason>(entity =>\n        {\n            entity.HasKey(e => e.Season);\n\n            entity.ToTable(\"match_season\");\n\n            entity.Property(e => e.Country).HasColumnType(\"INT\");\n            entity.Property(e => e.DraftClass).HasColumnName(\"Draft_Class\");\n            entity.Property(e => e.DraftPickNumber)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Draft_Pick_Number\");\n            entity.Property(e => e.Team).HasColumnType(\"INT\");\n\n            entity.HasOne(d => d.CountryNavigation).WithMany(p => p.MatchSeasons).HasForeignKey(d => d.Country);\n\n            entity.HasOne(d => d.TeamNavigation).WithMany(p => p.MatchSeasons).HasForeignKey(d => d.Team);\n        });\n\n        modelBuilder.Entity<Player>(entity =>\n        {\n            entity.ToTable(\"player\");\n\n            entity.Property(e => e.PlayerId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Player_ID\");\n            entity.Property(e => e.DoublesWl).HasColumnName(\"Doubles_WL\");\n            entity.Property(e => e.Player1).HasColumnName(\"Player\");\n            entity.Property(e => e.SinglesWl).HasColumnName(\"Singles_WL\");\n            entity.Property(e => e.Team).HasColumnType(\"INT\");\n            entity.Property(e => e.TotalWl).HasColumnName(\"Total_WL\");\n            entity.Property(e => e.YearsPlayed).HasColumnName(\"Years_Played\");\n\n            entity.HasOne(d => d.TeamNavigation).WithMany(p => p.Players).HasForeignKey(d => d.Team);\n        });\n\n        modelBuilder.Entity<Team>(entity =>\n        {\n            entity.ToTable(\"team\");\n\n            entity.Property(e => e.TeamId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Team_id\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Country\n{\n    public int CountryId { get; set; }\n\n    public string? CountryName { get; set; }\n\n    public string? Capital { get; set; }\n\n    public string? OfficialNativeLanguage { get; set; }\n\n    public virtual ICollection<MatchSeason> MatchSeasons { get; set; } = new List<MatchSeason>();\n}",
      "public partial class MatchSeason\n{\n    public double Season { get; set; }\n\n    public string? Player { get; set; }\n\n    public string? Position { get; set; }\n\n    public int? Country { get; set; }\n\n    public int? Team { get; set; }\n\n    public int? DraftPickNumber { get; set; }\n\n    public string? DraftClass { get; set; }\n\n    public string? College { get; set; }\n\n    public virtual Country? CountryNavigation { get; set; }\n\n    public virtual Team? TeamNavigation { get; set; }\n}",
      "public partial class Player\n{\n    public int PlayerId { get; set; }\n\n    public string? Player1 { get; set; }\n\n    public string? YearsPlayed { get; set; }\n\n    public string? TotalWl { get; set; }\n\n    public string? SinglesWl { get; set; }\n\n    public string? DoublesWl { get; set; }\n\n    public int? Team { get; set; }\n\n    public virtual Team? TeamNavigation { get; set; }\n}",
      "public partial class Team\n{\n    public int TeamId { get; set; }\n\n    public string? Name { get; set; }\n\n    public virtual ICollection<MatchSeason> MatchSeasons { get; set; } = new List<MatchSeason>();\n\n    public virtual ICollection<Player> Players { get; set; } = new List<Player>();\n}"
    ]
  },
  "music_4": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.music_4;\n\npublic partial class Music4Context : DbContext\n{\n    public Music4Context()\n    {\n    }\n\n    public Music4Context(DbContextOptions<Music4Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Artist> Artists { get; set; }\n\n    public virtual DbSet<MusicFestival> MusicFestivals { get; set; }\n\n    public virtual DbSet<Volume> Volumes { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/music_4.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Artist>(entity =>\n        {\n            entity.ToTable(\"artist\");\n\n            entity.Property(e => e.ArtistId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Artist_ID\");\n            entity.Property(e => e.Age).HasColumnType(\"INT\");\n            entity.Property(e => e.Artist1).HasColumnName(\"Artist\");\n            entity.Property(e => e.FamousReleaseDate).HasColumnName(\"Famous_Release_date\");\n            entity.Property(e => e.FamousTitle).HasColumnName(\"Famous_Title\");\n        });\n\n        modelBuilder.Entity<MusicFestival>(entity =>\n        {\n            entity.ToTable(\"music_festival\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"ID\");\n            entity.Property(e => e.DateOfCeremony).HasColumnName(\"Date_of_ceremony\");\n            entity.Property(e => e.MusicFestival1).HasColumnName(\"Music_Festival\");\n            entity.Property(e => e.Volume).HasColumnType(\"INT\");\n\n            entity.HasOne(d => d.VolumeNavigation).WithMany(p => p.MusicFestivals).HasForeignKey(d => d.Volume);\n        });\n\n        modelBuilder.Entity<Volume>(entity =>\n        {\n            entity.ToTable(\"volume\");\n\n            entity.Property(e => e.VolumeId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Volume_ID\");\n            entity.Property(e => e.ArtistId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Artist_ID\");\n            entity.Property(e => e.IssueDate).HasColumnName(\"Issue_Date\");\n            entity.Property(e => e.VolumeIssue).HasColumnName(\"Volume_Issue\");\n            entity.Property(e => e.WeeksOnTop).HasColumnName(\"Weeks_on_Top\");\n\n            entity.HasOne(d => d.Artist).WithMany(p => p.Volumes).HasForeignKey(d => d.ArtistId);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Artist\n{\n    public int ArtistId { get; set; }\n\n    public string? Artist1 { get; set; }\n\n    public int? Age { get; set; }\n\n    public string? FamousTitle { get; set; }\n\n    public string? FamousReleaseDate { get; set; }\n\n    public virtual ICollection<Volume> Volumes { get; set; } = new List<Volume>();\n}",
      "public partial class MusicFestival\n{\n    public int Id { get; set; }\n\n    public string? MusicFestival1 { get; set; }\n\n    public string? DateOfCeremony { get; set; }\n\n    public string? Category { get; set; }\n\n    public int? Volume { get; set; }\n\n    public string? Result { get; set; }\n\n    public virtual Volume? VolumeNavigation { get; set; }\n}",
      "public partial class Volume\n{\n    public int VolumeId { get; set; }\n\n    public string? VolumeIssue { get; set; }\n\n    public string? IssueDate { get; set; }\n\n    public double? WeeksOnTop { get; set; }\n\n    public string? Song { get; set; }\n\n    public int? ArtistId { get; set; }\n\n    public virtual Artist? Artist { get; set; }\n\n    public virtual ICollection<MusicFestival> MusicFestivals { get; set; } = new List<MusicFestival>();\n}"
    ]
  },
  "debate": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.debate;\n\npublic partial class DebateContext : DbContext\n{\n    public DebateContext()\n    {\n    }\n\n    public DebateContext(DbContextOptions<DebateContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Debate> Debates { get; set; }\n\n    public virtual DbSet<DebatePerson> DebatePeople { get; set; }\n\n    public virtual DbSet<Person> People { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/debate.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Debate>(entity =>\n        {\n            entity.ToTable(\"debate\");\n\n            entity.Property(e => e.DebateId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Debate_ID\");\n            entity.Property(e => e.NumOfAudience)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Num_of_Audience\");\n        });\n\n        modelBuilder.Entity<DebatePerson>(entity =>\n        {\n            entity.HasKey(e => new { e.DebateId, e.Affirmative, e.Negative });\n\n            entity.ToTable(\"debate_people\");\n\n            entity.Property(e => e.DebateId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Debate_ID\");\n            entity.Property(e => e.Affirmative).HasColumnType(\"INT\");\n            entity.Property(e => e.Negative).HasColumnType(\"INT\");\n            entity.Property(e => e.IfAffirmativeWin)\n                .HasColumnType(\"bool\")\n                .HasColumnName(\"If_Affirmative_Win\");\n\n            entity.HasOne(d => d.AffirmativeNavigation).WithMany(p => p.DebatePersonAffirmativeNavigations)\n                .HasForeignKey(d => d.Affirmative)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Debate).WithMany(p => p.DebatePeople)\n                .HasForeignKey(d => d.DebateId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.NegativeNavigation).WithMany(p => p.DebatePersonNegativeNavigations)\n                .HasForeignKey(d => d.Negative)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Person>(entity =>\n        {\n            entity.HasKey(e => e.PeopleId);\n\n            entity.ToTable(\"people\");\n\n            entity.Property(e => e.PeopleId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"People_ID\");\n            entity.Property(e => e.Age).HasColumnType(\"INT\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Debate\n{\n    public int DebateId { get; set; }\n\n    public string? Date { get; set; }\n\n    public string? Venue { get; set; }\n\n    public int? NumOfAudience { get; set; }\n\n    public virtual ICollection<DebatePerson> DebatePeople { get; set; } = new List<DebatePerson>();\n}",
      "public partial class DebatePerson\n{\n    public int DebateId { get; set; }\n\n    public int Affirmative { get; set; }\n\n    public int Negative { get; set; }\n\n    public string? IfAffirmativeWin { get; set; }\n\n    public virtual Person AffirmativeNavigation { get; set; } = null!;\n\n    public virtual Debate Debate { get; set; } = null!;\n\n    public virtual Person NegativeNavigation { get; set; } = null!;\n}",
      "public partial class Person\n{\n    public int PeopleId { get; set; }\n\n    public string? District { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Party { get; set; }\n\n    public int? Age { get; set; }\n\n    public virtual ICollection<DebatePerson> DebatePersonAffirmativeNavigations { get; set; } = new List<DebatePerson>();\n\n    public virtual ICollection<DebatePerson> DebatePersonNegativeNavigations { get; set; } = new List<DebatePerson>();\n}"
    ]
  },
  "ship_mission": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.ship_mission;\n\npublic partial class ShipMissionContext : DbContext\n{\n    public ShipMissionContext()\n    {\n    }\n\n    public ShipMissionContext(DbContextOptions<ShipMissionContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Mission> Missions { get; set; }\n\n    public virtual DbSet<Ship> Ships { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/ship_mission.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Mission>(entity =>\n        {\n            entity.ToTable(\"mission\");\n\n            entity.Property(e => e.MissionId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Mission_ID\");\n            entity.Property(e => e.LaunchedYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Launched_Year\");\n            entity.Property(e => e.ShipId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Ship_ID\");\n            entity.Property(e => e.SpeedKnots)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Speed_knots\");\n\n            entity.HasOne(d => d.Ship).WithMany(p => p.Missions).HasForeignKey(d => d.ShipId);\n        });\n\n        modelBuilder.Entity<Ship>(entity =>\n        {\n            entity.ToTable(\"ship\");\n\n            entity.Property(e => e.ShipId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Ship_ID\");\n            entity.Property(e => e.Tonnage).HasColumnType(\"INT\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Mission\n{\n    public int MissionId { get; set; }\n\n    public int? ShipId { get; set; }\n\n    public string? Code { get; set; }\n\n    public int? LaunchedYear { get; set; }\n\n    public string? Location { get; set; }\n\n    public int? SpeedKnots { get; set; }\n\n    public string? Fate { get; set; }\n\n    public virtual Ship? Ship { get; set; }\n}",
      "public partial class Ship\n{\n    public int ShipId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Type { get; set; }\n\n    public string? Nationality { get; set; }\n\n    public int? Tonnage { get; set; }\n\n    public virtual ICollection<Mission> Missions { get; set; } = new List<Mission>();\n}"
    ]
  },
  "student_transcripts_tracking": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.student_transcripts_tracking;\n\npublic partial class StudentTranscriptsTrackingContext : DbContext\n{\n    public StudentTranscriptsTrackingContext()\n    {\n    }\n\n    public StudentTranscriptsTrackingContext(DbContextOptions<StudentTranscriptsTrackingContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Address> Addresses { get; set; }\n\n    public virtual DbSet<Course> Courses { get; set; }\n\n    public virtual DbSet<DegreeProgram> DegreePrograms { get; set; }\n\n    public virtual DbSet<Department> Departments { get; set; }\n\n    public virtual DbSet<Section> Sections { get; set; }\n\n    public virtual DbSet<Semester> Semesters { get; set; }\n\n    public virtual DbSet<Student> Students { get; set; }\n\n    public virtual DbSet<StudentEnrolment> StudentEnrolments { get; set; }\n\n    public virtual DbSet<StudentEnrolmentCourse> StudentEnrolmentCourses { get; set; }\n\n    public virtual DbSet<Transcript> Transcripts { get; set; }\n\n    public virtual DbSet<TranscriptContent> TranscriptContents { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/student_transcripts_tracking.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Address>(entity =>\n        {\n            entity.Property(e => e.AddressId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"address_id\");\n            entity.Property(e => e.City)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"city\");\n            entity.Property(e => e.Country)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"country\");\n            entity.Property(e => e.Line1)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"line_1\");\n            entity.Property(e => e.Line2)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"line_2\");\n            entity.Property(e => e.Line3)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"line_3\");\n            entity.Property(e => e.OtherAddressDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_address_details\");\n            entity.Property(e => e.StateProvinceCounty)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"state_province_county\");\n            entity.Property(e => e.ZipPostcode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"zip_postcode\");\n        });\n\n        modelBuilder.Entity<Course>(entity =>\n        {\n            entity.Property(e => e.CourseId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"course_id\");\n            entity.Property(e => e.CourseDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"course_description\");\n            entity.Property(e => e.CourseName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"course_name\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n        });\n\n        modelBuilder.Entity<DegreeProgram>(entity =>\n        {\n            entity.ToTable(\"Degree_Programs\");\n\n            entity.Property(e => e.DegreeProgramId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"degree_program_id\");\n            entity.Property(e => e.DegreeSummaryDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"degree_summary_description\");\n            entity.Property(e => e.DegreeSummaryName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"degree_summary_name\");\n            entity.Property(e => e.DepartmentId).HasColumnName(\"department_id\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n\n            entity.HasOne(d => d.Department).WithMany(p => p.DegreePrograms)\n                .HasForeignKey(d => d.DepartmentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Department>(entity =>\n        {\n            entity.Property(e => e.DepartmentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"department_id\");\n            entity.Property(e => e.DepartmentDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"department_description\");\n            entity.Property(e => e.DepartmentName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"department_name\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n        });\n\n        modelBuilder.Entity<Section>(entity =>\n        {\n            entity.Property(e => e.SectionId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"section_id\");\n            entity.Property(e => e.CourseId).HasColumnName(\"course_id\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n            entity.Property(e => e.SectionDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"section_description\");\n            entity.Property(e => e.SectionName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"section_name\");\n\n            entity.HasOne(d => d.Course).WithMany(p => p.Sections)\n                .HasForeignKey(d => d.CourseId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Semester>(entity =>\n        {\n            entity.Property(e => e.SemesterId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"semester_id\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n            entity.Property(e => e.SemesterDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"semester_description\");\n            entity.Property(e => e.SemesterName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"semester_name\");\n        });\n\n        modelBuilder.Entity<Student>(entity =>\n        {\n            entity.Property(e => e.StudentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"student_id\");\n            entity.Property(e => e.CellMobileNumber)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"cell_mobile_number\");\n            entity.Property(e => e.CurrentAddressId).HasColumnName(\"current_address_id\");\n            entity.Property(e => e.DateFirstRegistered)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_first_registered\");\n            entity.Property(e => e.DateLeft)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_left\");\n            entity.Property(e => e.EmailAddress)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"email_address\");\n            entity.Property(e => e.FirstName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"first_name\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"last_name\");\n            entity.Property(e => e.MiddleName)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"middle_name\");\n            entity.Property(e => e.OtherStudentDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_student_details\");\n            entity.Property(e => e.PermanentAddressId).HasColumnName(\"permanent_address_id\");\n            entity.Property(e => e.Ssn)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"ssn\");\n\n            entity.HasOne(d => d.CurrentAddress).WithMany(p => p.StudentCurrentAddresses)\n                .HasForeignKey(d => d.CurrentAddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.PermanentAddress).WithMany(p => p.StudentPermanentAddresses)\n                .HasForeignKey(d => d.PermanentAddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<StudentEnrolment>(entity =>\n        {\n            entity.ToTable(\"Student_Enrolment\");\n\n            entity.Property(e => e.StudentEnrolmentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"student_enrolment_id\");\n            entity.Property(e => e.DegreeProgramId).HasColumnName(\"degree_program_id\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n            entity.Property(e => e.SemesterId).HasColumnName(\"semester_id\");\n            entity.Property(e => e.StudentId).HasColumnName(\"student_id\");\n\n            entity.HasOne(d => d.DegreeProgram).WithMany(p => p.StudentEnrolments)\n                .HasForeignKey(d => d.DegreeProgramId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Semester).WithMany(p => p.StudentEnrolments)\n                .HasForeignKey(d => d.SemesterId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Student).WithMany(p => p.StudentEnrolments)\n                .HasForeignKey(d => d.StudentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<StudentEnrolmentCourse>(entity =>\n        {\n            entity.HasKey(e => e.StudentCourseId);\n\n            entity.ToTable(\"Student_Enrolment_Courses\");\n\n            entity.Property(e => e.StudentCourseId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"student_course_id\");\n            entity.Property(e => e.CourseId).HasColumnName(\"course_id\");\n            entity.Property(e => e.StudentEnrolmentId).HasColumnName(\"student_enrolment_id\");\n\n            entity.HasOne(d => d.Course).WithMany(p => p.StudentEnrolmentCourses)\n                .HasForeignKey(d => d.CourseId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.StudentEnrolment).WithMany(p => p.StudentEnrolmentCourses)\n                .HasForeignKey(d => d.StudentEnrolmentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Transcript>(entity =>\n        {\n            entity.Property(e => e.TranscriptId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"transcript_id\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_details\");\n            entity.Property(e => e.TranscriptDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"transcript_date\");\n        });\n\n        modelBuilder.Entity<TranscriptContent>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Transcript_Contents\");\n\n            entity.Property(e => e.StudentCourseId).HasColumnName(\"student_course_id\");\n            entity.Property(e => e.TranscriptId).HasColumnName(\"transcript_id\");\n\n            entity.HasOne(d => d.StudentCourse).WithMany()\n                .HasForeignKey(d => d.StudentCourseId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Transcript).WithMany()\n                .HasForeignKey(d => d.TranscriptId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Address\n{\n    public int AddressId { get; set; }\n\n    public string? Line1 { get; set; }\n\n    public string? Line2 { get; set; }\n\n    public string? Line3 { get; set; }\n\n    public string? City { get; set; }\n\n    public string? ZipPostcode { get; set; }\n\n    public string? StateProvinceCounty { get; set; }\n\n    public string? Country { get; set; }\n\n    public string? OtherAddressDetails { get; set; }\n\n    public virtual ICollection<Student> StudentCurrentAddresses { get; set; } = new List<Student>();\n\n    public virtual ICollection<Student> StudentPermanentAddresses { get; set; } = new List<Student>();\n}",
      "public partial class Course\n{\n    public int CourseId { get; set; }\n\n    public string? CourseName { get; set; }\n\n    public string? CourseDescription { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual ICollection<Section> Sections { get; set; } = new List<Section>();\n\n    public virtual ICollection<StudentEnrolmentCourse> StudentEnrolmentCourses { get; set; } = new List<StudentEnrolmentCourse>();\n}",
      "public partial class DegreeProgram\n{\n    public int DegreeProgramId { get; set; }\n\n    public int DepartmentId { get; set; }\n\n    public string? DegreeSummaryName { get; set; }\n\n    public string? DegreeSummaryDescription { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual Department Department { get; set; } = null!;\n\n    public virtual ICollection<StudentEnrolment> StudentEnrolments { get; set; } = new List<StudentEnrolment>();\n}",
      "public partial class Department\n{\n    public int DepartmentId { get; set; }\n\n    public string? DepartmentName { get; set; }\n\n    public string? DepartmentDescription { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual ICollection<DegreeProgram> DegreePrograms { get; set; } = new List<DegreeProgram>();\n}",
      "public partial class Section\n{\n    public int SectionId { get; set; }\n\n    public int CourseId { get; set; }\n\n    public string? SectionName { get; set; }\n\n    public string? SectionDescription { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual Course Course { get; set; } = null!;\n}",
      "public partial class Semester\n{\n    public int SemesterId { get; set; }\n\n    public string? SemesterName { get; set; }\n\n    public string? SemesterDescription { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual ICollection<StudentEnrolment> StudentEnrolments { get; set; } = new List<StudentEnrolment>();\n}",
      "public partial class Student\n{\n    public int StudentId { get; set; }\n\n    public int CurrentAddressId { get; set; }\n\n    public int PermanentAddressId { get; set; }\n\n    public string? FirstName { get; set; }\n\n    public string? MiddleName { get; set; }\n\n    public string? LastName { get; set; }\n\n    public string? CellMobileNumber { get; set; }\n\n    public string? EmailAddress { get; set; }\n\n    public string? Ssn { get; set; }\n\n    public DateTime? DateFirstRegistered { get; set; }\n\n    public DateTime? DateLeft { get; set; }\n\n    public string? OtherStudentDetails { get; set; }\n\n    public virtual Address CurrentAddress { get; set; } = null!;\n\n    public virtual Address PermanentAddress { get; set; } = null!;\n\n    public virtual ICollection<StudentEnrolment> StudentEnrolments { get; set; } = new List<StudentEnrolment>();\n}",
      "public partial class StudentEnrolment\n{\n    public int StudentEnrolmentId { get; set; }\n\n    public int DegreeProgramId { get; set; }\n\n    public int SemesterId { get; set; }\n\n    public int StudentId { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual DegreeProgram DegreeProgram { get; set; } = null!;\n\n    public virtual Semester Semester { get; set; } = null!;\n\n    public virtual Student Student { get; set; } = null!;\n\n    public virtual ICollection<StudentEnrolmentCourse> StudentEnrolmentCourses { get; set; } = new List<StudentEnrolmentCourse>();\n}",
      "public partial class StudentEnrolmentCourse\n{\n    public int StudentCourseId { get; set; }\n\n    public int CourseId { get; set; }\n\n    public int StudentEnrolmentId { get; set; }\n\n    public virtual Course Course { get; set; } = null!;\n\n    public virtual StudentEnrolment StudentEnrolment { get; set; } = null!;\n}",
      "public partial class Transcript\n{\n    public int TranscriptId { get; set; }\n\n    public DateTime? TranscriptDate { get; set; }\n\n    public string? OtherDetails { get; set; }\n}",
      "public partial class TranscriptContent\n{\n    public int StudentCourseId { get; set; }\n\n    public int TranscriptId { get; set; }\n\n    public virtual StudentEnrolmentCourse StudentCourse { get; set; } = null!;\n\n    public virtual Transcript Transcript { get; set; } = null!;\n}"
    ]
  },
  "flight_2": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.flight_2;\n\npublic partial class Flight2Context : DbContext\n{\n    public Flight2Context()\n    {\n    }\n\n    public Flight2Context(DbContextOptions<Flight2Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Airline> Airlines { get; set; }\n\n    public virtual DbSet<Airport> Airports { get; set; }\n\n    public virtual DbSet<Flight> Flights { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/flight_2.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Airline>(entity =>\n        {\n            entity.HasKey(e => e.Uid);\n\n            entity.ToTable(\"airlines\");\n\n            entity.Property(e => e.Uid)\n                .ValueGeneratedNever()\n                .HasColumnName(\"uid\");\n            entity.Property(e => e.Airline1).HasColumnName(\"Airline\");\n        });\n\n        modelBuilder.Entity<Airport>(entity =>\n        {\n            entity.HasKey(e => e.AirportCode);\n\n            entity.ToTable(\"airports\");\n        });\n\n        modelBuilder.Entity<Flight>(entity =>\n        {\n            entity.HasKey(e => new { e.Airline, e.FlightNo });\n\n            entity.ToTable(\"flights\");\n\n            entity.HasOne(d => d.DestAirportNavigation).WithMany(p => p.FlightDestAirportNavigations).HasForeignKey(d => d.DestAirport);\n\n            entity.HasOne(d => d.SourceAirportNavigation).WithMany(p => p.FlightSourceAirportNavigations).HasForeignKey(d => d.SourceAirport);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Airline\n{\n    public int Uid { get; set; }\n\n    public string? Airline1 { get; set; }\n\n    public string? Abbreviation { get; set; }\n\n    public string? Country { get; set; }\n}",
      "public partial class Airport\n{\n    public string? City { get; set; }\n\n    public string AirportCode { get; set; } = null!;\n\n    public string? AirportName { get; set; }\n\n    public string? Country { get; set; }\n\n    public string? CountryAbbrev { get; set; }\n\n    public virtual ICollection<Flight> FlightDestAirportNavigations { get; set; } = new List<Flight>();\n\n    public virtual ICollection<Flight> FlightSourceAirportNavigations { get; set; } = new List<Flight>();\n}",
      "public partial class Flight\n{\n    public int Airline { get; set; }\n\n    public int FlightNo { get; set; }\n\n    public string? SourceAirport { get; set; }\n\n    public string? DestAirport { get; set; }\n\n    public virtual Airport? DestAirportNavigation { get; set; }\n\n    public virtual Airport? SourceAirportNavigation { get; set; }\n}"
    ]
  },
  "ship_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.ship_1;\n\npublic partial class Ship1Context : DbContext\n{\n    public Ship1Context()\n    {\n    }\n\n    public Ship1Context(DbContextOptions<Ship1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Captain> Captains { get; set; }\n\n    public virtual DbSet<Ship> Ships { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/ship_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Captain>(entity =>\n        {\n            entity.ToTable(\"captain\");\n\n            entity.Property(e => e.CaptainId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Captain_ID\");\n            entity.Property(e => e.Age).HasColumnName(\"age\");\n            entity.Property(e => e.ShipId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Ship_ID\");\n\n            entity.HasOne(d => d.Ship).WithMany(p => p.Captains).HasForeignKey(d => d.ShipId);\n        });\n\n        modelBuilder.Entity<Ship>(entity =>\n        {\n            entity.ToTable(\"Ship\");\n\n            entity.Property(e => e.ShipId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Ship_ID\");\n            entity.Property(e => e.BuiltYear).HasColumnName(\"Built_Year\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Captain\n{\n    public int CaptainId { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? ShipId { get; set; }\n\n    public string? Age { get; set; }\n\n    public string? Class { get; set; }\n\n    public string? Rank { get; set; }\n\n    public virtual Ship? Ship { get; set; }\n}",
      "public partial class Ship\n{\n    public int ShipId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Type { get; set; }\n\n    public double? BuiltYear { get; set; }\n\n    public string? Class { get; set; }\n\n    public string? Flag { get; set; }\n\n    public virtual ICollection<Captain> Captains { get; set; } = new List<Captain>();\n}"
    ]
  },
  "restaurant_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.restaurant_1;\n\npublic partial class Restaurant1Context : DbContext\n{\n    public Restaurant1Context()\n    {\n    }\n\n    public Restaurant1Context(DbContextOptions<Restaurant1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Restaurant> Restaurants { get; set; }\n\n    public virtual DbSet<RestaurantType> RestaurantTypes { get; set; }\n\n    public virtual DbSet<Student> Students { get; set; }\n\n    public virtual DbSet<TypeOfRestaurant> TypeOfRestaurants { get; set; }\n\n    public virtual DbSet<VisitsRestaurant> VisitsRestaurants { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/restaurant_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Restaurant>(entity =>\n        {\n            entity.HasKey(e => e.ResId);\n\n            entity.ToTable(\"Restaurant\");\n\n            entity.Property(e => e.ResId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"ResID\");\n            entity.Property(e => e.Address).HasColumnType(\"VARCHAR(100)\");\n            entity.Property(e => e.ResName).HasColumnType(\"VARCHAR(100)\");\n        });\n\n        modelBuilder.Entity<RestaurantType>(entity =>\n        {\n            entity.HasKey(e => e.ResTypeId);\n\n            entity.ToTable(\"Restaurant_Type\");\n\n            entity.Property(e => e.ResTypeId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"ResTypeID\");\n            entity.Property(e => e.ResTypeDescription).HasColumnType(\"VARCHAR(100)\");\n            entity.Property(e => e.ResTypeName).HasColumnType(\"VARCHAR(40)\");\n        });\n\n        modelBuilder.Entity<Student>(entity =>\n        {\n            entity.HasKey(e => e.StuId);\n\n            entity.ToTable(\"Student\");\n\n            entity.Property(e => e.StuId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"StuID\");\n            entity.Property(e => e.CityCode)\n                .HasColumnType(\"VARCHAR(3)\")\n                .HasColumnName(\"city_code\");\n            entity.Property(e => e.Fname).HasColumnType(\"VARCHAR(12)\");\n            entity.Property(e => e.Lname)\n                .HasColumnType(\"VARCHAR(12)\")\n                .HasColumnName(\"LName\");\n            entity.Property(e => e.Sex).HasColumnType(\"VARCHAR(1)\");\n        });\n\n        modelBuilder.Entity<TypeOfRestaurant>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Type_Of_Restaurant\");\n\n            entity.Property(e => e.ResId).HasColumnName(\"ResID\");\n            entity.Property(e => e.ResTypeId).HasColumnName(\"ResTypeID\");\n\n            entity.HasOne(d => d.Res).WithMany().HasForeignKey(d => d.ResId);\n\n            entity.HasOne(d => d.ResType).WithMany().HasForeignKey(d => d.ResTypeId);\n        });\n\n        modelBuilder.Entity<VisitsRestaurant>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Visits_Restaurant\");\n\n            entity.Property(e => e.ResId).HasColumnName(\"ResID\");\n            entity.Property(e => e.Spent).HasColumnType(\"FLOAT\");\n            entity.Property(e => e.StuId).HasColumnName(\"StuID\");\n            entity.Property(e => e.Time).HasColumnType(\"TIMESTAMP\");\n\n            entity.HasOne(d => d.Res).WithMany().HasForeignKey(d => d.ResId);\n\n            entity.HasOne(d => d.Stu).WithMany().HasForeignKey(d => d.StuId);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Restaurant\n{\n    public int ResId { get; set; }\n\n    public string? ResName { get; set; }\n\n    public string? Address { get; set; }\n\n    public int? Rating { get; set; }\n}",
      "public partial class RestaurantType\n{\n    public int ResTypeId { get; set; }\n\n    public string? ResTypeName { get; set; }\n\n    public string? ResTypeDescription { get; set; }\n}",
      "public partial class Student\n{\n    public int StuId { get; set; }\n\n    public string? Lname { get; set; }\n\n    public string? Fname { get; set; }\n\n    public int? Age { get; set; }\n\n    public string? Sex { get; set; }\n\n    public int? Major { get; set; }\n\n    public int? Advisor { get; set; }\n\n    public string? CityCode { get; set; }\n}",
      "public partial class TypeOfRestaurant\n{\n    public int? ResId { get; set; }\n\n    public int? ResTypeId { get; set; }\n\n    public virtual Restaurant? Res { get; set; }\n\n    public virtual RestaurantType? ResType { get; set; }\n}",
      "public partial class VisitsRestaurant\n{\n    public int? StuId { get; set; }\n\n    public int? ResId { get; set; }\n\n    public DateTime? Time { get; set; }\n\n    public double? Spent { get; set; }\n\n    public virtual Restaurant? Res { get; set; }\n\n    public virtual Student? Stu { get; set; }\n}"
    ]
  },
  "theme_gallery": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.theme_gallery;\n\npublic partial class ThemeGalleryContext : DbContext\n{\n    public ThemeGalleryContext()\n    {\n    }\n\n    public ThemeGalleryContext(DbContextOptions<ThemeGalleryContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Artist> Artists { get; set; }\n\n    public virtual DbSet<Exhibition> Exhibitions { get; set; }\n\n    public virtual DbSet<ExhibitionRecord> ExhibitionRecords { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/theme_gallery.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Artist>(entity =>\n        {\n            entity.ToTable(\"artist\");\n\n            entity.Property(e => e.ArtistId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Artist_ID\");\n            entity.Property(e => e.Age).HasColumnType(\"INT\");\n            entity.Property(e => e.YearJoin)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Year_Join\");\n        });\n\n        modelBuilder.Entity<Exhibition>(entity =>\n        {\n            entity.ToTable(\"exhibition\");\n\n            entity.Property(e => e.ExhibitionId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Exhibition_ID\");\n            entity.Property(e => e.ArtistId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Artist_ID\");\n            entity.Property(e => e.TicketPrice).HasColumnName(\"Ticket_Price\");\n            entity.Property(e => e.Year).HasColumnType(\"INT\");\n\n            entity.HasOne(d => d.Artist).WithMany(p => p.Exhibitions).HasForeignKey(d => d.ArtistId);\n        });\n\n        modelBuilder.Entity<ExhibitionRecord>(entity =>\n        {\n            entity.HasKey(e => new { e.ExhibitionId, e.Date });\n\n            entity.ToTable(\"exhibition_record\");\n\n            entity.Property(e => e.ExhibitionId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Exhibition_ID\");\n            entity.Property(e => e.Attendance).HasColumnType(\"INT\");\n\n            entity.HasOne(d => d.Exhibition).WithMany(p => p.ExhibitionRecords)\n                .HasForeignKey(d => d.ExhibitionId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Artist\n{\n    public int ArtistId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Country { get; set; }\n\n    public int? YearJoin { get; set; }\n\n    public int? Age { get; set; }\n\n    public virtual ICollection<Exhibition> Exhibitions { get; set; } = new List<Exhibition>();\n}",
      "public partial class Exhibition\n{\n    public int ExhibitionId { get; set; }\n\n    public int? Year { get; set; }\n\n    public string? Theme { get; set; }\n\n    public int? ArtistId { get; set; }\n\n    public double? TicketPrice { get; set; }\n\n    public virtual Artist? Artist { get; set; }\n\n    public virtual ICollection<ExhibitionRecord> ExhibitionRecords { get; set; } = new List<ExhibitionRecord>();\n}",
      "public partial class ExhibitionRecord\n{\n    public int ExhibitionId { get; set; }\n\n    public string Date { get; set; } = null!;\n\n    public int? Attendance { get; set; }\n\n    public virtual Exhibition Exhibition { get; set; } = null!;\n}"
    ]
  },
  "sports_competition": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.sports_competition;\n\npublic partial class SportsCompetitionContext : DbContext\n{\n    public SportsCompetitionContext()\n    {\n    }\n\n    public SportsCompetitionContext(DbContextOptions<SportsCompetitionContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Club> Clubs { get; set; }\n\n    public virtual DbSet<ClubRank> ClubRanks { get; set; }\n\n    public virtual DbSet<Competition> Competitions { get; set; }\n\n    public virtual DbSet<CompetitionResult> CompetitionResults { get; set; }\n\n    public virtual DbSet<Player> Players { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/sports_competition.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Club>(entity =>\n        {\n            entity.ToTable(\"club\");\n\n            entity.Property(e => e.ClubId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Club_ID\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.StartYear).HasColumnName(\"Start_year\");\n        });\n\n        modelBuilder.Entity<ClubRank>(entity =>\n        {\n            entity.HasKey(e => new { e.Rank, e.ClubId });\n\n            entity.ToTable(\"club_rank\");\n\n            entity.Property(e => e.ClubId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Club_ID\");\n\n            entity.HasOne(d => d.Club).WithMany(p => p.ClubRanks)\n                .HasForeignKey(d => d.ClubId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Competition>(entity =>\n        {\n            entity.ToTable(\"competition\");\n\n            entity.Property(e => e.CompetitionId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Competition_ID\");\n            entity.Property(e => e.CompetitionType).HasColumnName(\"Competition_type\");\n        });\n\n        modelBuilder.Entity<CompetitionResult>(entity =>\n        {\n            entity.HasKey(e => new { e.CompetitionId, e.ClubId1, e.ClubId2 });\n\n            entity.ToTable(\"competition_result\");\n\n            entity.Property(e => e.CompetitionId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Competition_ID\");\n            entity.Property(e => e.ClubId1)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Club_ID_1\");\n            entity.Property(e => e.ClubId2)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Club_ID_2\");\n\n            entity.HasOne(d => d.ClubId1Navigation).WithMany(p => p.CompetitionResultClubId1Navigations)\n                .HasForeignKey(d => d.ClubId1)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.ClubId2Navigation).WithMany(p => p.CompetitionResultClubId2Navigations)\n                .HasForeignKey(d => d.ClubId2)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Competition).WithMany(p => p.CompetitionResults)\n                .HasForeignKey(d => d.CompetitionId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Player>(entity =>\n        {\n            entity.ToTable(\"player\");\n\n            entity.Property(e => e.PlayerId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Player_ID\");\n            entity.Property(e => e.ClubId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Club_ID\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n\n            entity.HasOne(d => d.Club).WithMany(p => p.Players).HasForeignKey(d => d.ClubId);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Club\n{\n    public int ClubId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Region { get; set; }\n\n    public string? StartYear { get; set; }\n\n    public virtual ICollection<ClubRank> ClubRanks { get; set; } = new List<ClubRank>();\n\n    public virtual ICollection<CompetitionResult> CompetitionResultClubId1Navigations { get; set; } = new List<CompetitionResult>();\n\n    public virtual ICollection<CompetitionResult> CompetitionResultClubId2Navigations { get; set; } = new List<CompetitionResult>();\n\n    public virtual ICollection<Player> Players { get; set; } = new List<Player>();\n}",
      "public partial class ClubRank\n{\n    public double Rank { get; set; }\n\n    public int ClubId { get; set; }\n\n    public double? Gold { get; set; }\n\n    public double? Silver { get; set; }\n\n    public double? Bronze { get; set; }\n\n    public double? Total { get; set; }\n\n    public virtual Club Club { get; set; } = null!;\n}",
      "public partial class Competition\n{\n    public int CompetitionId { get; set; }\n\n    public double? Year { get; set; }\n\n    public string? CompetitionType { get; set; }\n\n    public string? Country { get; set; }\n\n    public virtual ICollection<CompetitionResult> CompetitionResults { get; set; } = new List<CompetitionResult>();\n}",
      "public partial class CompetitionResult\n{\n    public int CompetitionId { get; set; }\n\n    public int ClubId1 { get; set; }\n\n    public int ClubId2 { get; set; }\n\n    public string? Score { get; set; }\n\n    public virtual Club ClubId1Navigation { get; set; } = null!;\n\n    public virtual Club ClubId2Navigation { get; set; } = null!;\n\n    public virtual Competition Competition { get; set; } = null!;\n}",
      "public partial class Player\n{\n    public int PlayerId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Position { get; set; }\n\n    public int? ClubId { get; set; }\n\n    public double? Apps { get; set; }\n\n    public double? Tries { get; set; }\n\n    public string? Goals { get; set; }\n\n    public double? Points { get; set; }\n\n    public virtual Club? Club { get; set; }\n}"
    ]
  },
  "poker_player": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.poker_player;\n\npublic partial class PokerPlayerContext : DbContext\n{\n    public PokerPlayerContext()\n    {\n    }\n\n    public PokerPlayerContext(DbContextOptions<PokerPlayerContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Person> People { get; set; }\n\n    public virtual DbSet<PokerPlayer> PokerPlayers { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/poker_player.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Person>(entity =>\n        {\n            entity.HasKey(e => e.PeopleId);\n\n            entity.ToTable(\"people\");\n\n            entity.Property(e => e.PeopleId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"People_ID\");\n            entity.Property(e => e.BirthDate).HasColumnName(\"Birth_Date\");\n        });\n\n        modelBuilder.Entity<PokerPlayer>(entity =>\n        {\n            entity.ToTable(\"poker_player\");\n\n            entity.Property(e => e.PokerPlayerId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Poker_Player_ID\");\n            entity.Property(e => e.BestFinish).HasColumnName(\"Best_Finish\");\n            entity.Property(e => e.FinalTableMade).HasColumnName(\"Final_Table_Made\");\n            entity.Property(e => e.MoneyRank).HasColumnName(\"Money_Rank\");\n            entity.Property(e => e.PeopleId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"People_ID\");\n\n            entity.HasOne(d => d.People).WithMany(p => p.PokerPlayers).HasForeignKey(d => d.PeopleId);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Person\n{\n    public int PeopleId { get; set; }\n\n    public string? Nationality { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? BirthDate { get; set; }\n\n    public double? Height { get; set; }\n\n    public virtual ICollection<PokerPlayer> PokerPlayers { get; set; } = new List<PokerPlayer>();\n}",
      "public partial class PokerPlayer\n{\n    public int PokerPlayerId { get; set; }\n\n    public int? PeopleId { get; set; }\n\n    public double? FinalTableMade { get; set; }\n\n    public double? BestFinish { get; set; }\n\n    public double? MoneyRank { get; set; }\n\n    public double? Earnings { get; set; }\n\n    public virtual Person? People { get; set; }\n}"
    ]
  },
  "medicine_enzyme_interaction": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.medicine_enzyme_interaction;\n\npublic partial class MedicineEnzymeInteractionContext : DbContext\n{\n    public MedicineEnzymeInteractionContext()\n    {\n    }\n\n    public MedicineEnzymeInteractionContext(DbContextOptions<MedicineEnzymeInteractionContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Enzyme> Enzymes { get; set; }\n\n    public virtual DbSet<Medicine> Medicines { get; set; }\n\n    public virtual DbSet<MedicineEnzymeInteraction> MedicineEnzymeInteractions { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/medicine_enzyme_interaction.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Enzyme>(entity =>\n        {\n            entity.ToTable(\"enzyme\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.Omim)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"OMIM\");\n        });\n\n        modelBuilder.Entity<Medicine>(entity =>\n        {\n            entity.ToTable(\"medicine\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"id\");\n            entity.Property(e => e.FdaApproved).HasColumnName(\"FDA_approved\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.TradeName).HasColumnName(\"Trade_Name\");\n        });\n\n        modelBuilder.Entity<MedicineEnzymeInteraction>(entity =>\n        {\n            entity.HasKey(e => new { e.EnzymeId, e.MedicineId });\n\n            entity.ToTable(\"medicine_enzyme_interaction\");\n\n            entity.Property(e => e.EnzymeId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"enzyme_id\");\n            entity.Property(e => e.MedicineId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"medicine_id\");\n            entity.Property(e => e.InteractionType).HasColumnName(\"interaction_type\");\n\n            entity.HasOne(d => d.Enzyme).WithMany(p => p.MedicineEnzymeInteractions)\n                .HasForeignKey(d => d.EnzymeId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Medicine).WithMany(p => p.MedicineEnzymeInteractions)\n                .HasForeignKey(d => d.MedicineId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Enzyme\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Location { get; set; }\n\n    public string? Product { get; set; }\n\n    public string? Chromosome { get; set; }\n\n    public int? Omim { get; set; }\n\n    public string? Porphyria { get; set; }\n\n    public virtual ICollection<MedicineEnzymeInteraction> MedicineEnzymeInteractions { get; set; } = new List<MedicineEnzymeInteraction>();\n}",
      "public partial class Medicine\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? TradeName { get; set; }\n\n    public string? FdaApproved { get; set; }\n\n    public virtual ICollection<MedicineEnzymeInteraction> MedicineEnzymeInteractions { get; set; } = new List<MedicineEnzymeInteraction>();\n}",
      "public partial class MedicineEnzymeInteraction\n{\n    public int EnzymeId { get; set; }\n\n    public int MedicineId { get; set; }\n\n    public string? InteractionType { get; set; }\n\n    public virtual Enzyme Enzyme { get; set; } = null!;\n\n    public virtual Medicine Medicine { get; set; } = null!;\n}"
    ]
  },
  "game_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.game_1;\n\npublic partial class Game1Context : DbContext\n{\n    public Game1Context()\n    {\n    }\n\n    public Game1Context(DbContextOptions<Game1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<PlaysGame> PlaysGames { get; set; }\n\n    public virtual DbSet<SportsInfo> SportsInfos { get; set; }\n\n    public virtual DbSet<Student> Students { get; set; }\n\n    public virtual DbSet<VideoGame> VideoGames { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/game_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<PlaysGame>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Plays_Games\");\n\n            entity.Property(e => e.GameId).HasColumnName(\"GameID\");\n            entity.Property(e => e.HoursPlayed).HasColumnName(\"Hours_Played\");\n            entity.Property(e => e.StuId).HasColumnName(\"StuID\");\n\n            entity.HasOne(d => d.Game).WithMany().HasForeignKey(d => d.GameId);\n\n            entity.HasOne(d => d.Stu).WithMany().HasForeignKey(d => d.StuId);\n        });\n\n        modelBuilder.Entity<SportsInfo>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"SportsInfo\");\n\n            entity.Property(e => e.OnScholarship).HasColumnType(\"VARCHAR(1)\");\n            entity.Property(e => e.SportName).HasColumnType(\"VARCHAR(32)\");\n            entity.Property(e => e.StuId).HasColumnName(\"StuID\");\n\n            entity.HasOne(d => d.Stu).WithMany().HasForeignKey(d => d.StuId);\n        });\n\n        modelBuilder.Entity<Student>(entity =>\n        {\n            entity.HasKey(e => e.StuId);\n\n            entity.ToTable(\"Student\");\n\n            entity.Property(e => e.StuId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"StuID\");\n            entity.Property(e => e.CityCode)\n                .HasColumnType(\"VARCHAR(3)\")\n                .HasColumnName(\"city_code\");\n            entity.Property(e => e.Fname).HasColumnType(\"VARCHAR(12)\");\n            entity.Property(e => e.Lname)\n                .HasColumnType(\"VARCHAR(12)\")\n                .HasColumnName(\"LName\");\n            entity.Property(e => e.Sex).HasColumnType(\"VARCHAR(1)\");\n        });\n\n        modelBuilder.Entity<VideoGame>(entity =>\n        {\n            entity.HasKey(e => e.GameId);\n\n            entity.ToTable(\"Video_Games\");\n\n            entity.Property(e => e.GameId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"GameID\");\n            entity.Property(e => e.Gname)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"GName\");\n            entity.Property(e => e.Gtype)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"GType\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class PlaysGame\n{\n    public int? StuId { get; set; }\n\n    public int? GameId { get; set; }\n\n    public int? HoursPlayed { get; set; }\n\n    public virtual VideoGame? Game { get; set; }\n\n    public virtual Student? Stu { get; set; }\n}",
      "public partial class SportsInfo\n{\n    public int? StuId { get; set; }\n\n    public string? SportName { get; set; }\n\n    public int? HoursPerWeek { get; set; }\n\n    public int? GamesPlayed { get; set; }\n\n    public string? OnScholarship { get; set; }\n\n    public virtual Student? Stu { get; set; }\n}",
      "public partial class Student\n{\n    public int StuId { get; set; }\n\n    public string? Lname { get; set; }\n\n    public string? Fname { get; set; }\n\n    public int? Age { get; set; }\n\n    public string? Sex { get; set; }\n\n    public int? Major { get; set; }\n\n    public int? Advisor { get; set; }\n\n    public string? CityCode { get; set; }\n}",
      "public partial class VideoGame\n{\n    public int GameId { get; set; }\n\n    public string? Gname { get; set; }\n\n    public string? Gtype { get; set; }\n}"
    ]
  },
  "riding_club": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.riding_club;\n\npublic partial class RidingClubContext : DbContext\n{\n    public RidingClubContext()\n    {\n    }\n\n    public RidingClubContext(DbContextOptions<RidingClubContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Club> Clubs { get; set; }\n\n    public virtual DbSet<Coach> Coaches { get; set; }\n\n    public virtual DbSet<MatchResult> MatchResults { get; set; }\n\n    public virtual DbSet<Player> Players { get; set; }\n\n    public virtual DbSet<PlayerCoach> PlayerCoaches { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/riding_club.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Club>(entity =>\n        {\n            entity.ToTable(\"club\");\n\n            entity.Property(e => e.ClubId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Club_ID\");\n            entity.Property(e => e.ClubName).HasColumnName(\"Club_name\");\n            entity.Property(e => e.StartYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Start_year\");\n        });\n\n        modelBuilder.Entity<Coach>(entity =>\n        {\n            entity.ToTable(\"coach\");\n\n            entity.Property(e => e.CoachId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Coach_ID\");\n            entity.Property(e => e.ClubId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Club_ID\");\n            entity.Property(e => e.CoachName).HasColumnName(\"Coach_name\");\n            entity.Property(e => e.Rank).HasColumnType(\"INT\");\n\n            entity.HasOne(d => d.Club).WithMany(p => p.Coaches).HasForeignKey(d => d.ClubId);\n        });\n\n        modelBuilder.Entity<MatchResult>(entity =>\n        {\n            entity.HasKey(e => new { e.Rank, e.ClubId });\n\n            entity.ToTable(\"match_result\");\n\n            entity.Property(e => e.Rank).HasColumnType(\"INT\");\n            entity.Property(e => e.ClubId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Club_ID\");\n            entity.Property(e => e.BigSilver)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Big_Silver\");\n            entity.Property(e => e.Bronze).HasColumnType(\"INT\");\n            entity.Property(e => e.Gold).HasColumnType(\"INT\");\n            entity.Property(e => e.Points).HasColumnType(\"INT\");\n            entity.Property(e => e.SmallSilver)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Small_Silver\");\n\n            entity.HasOne(d => d.Club).WithMany(p => p.MatchResults)\n                .HasForeignKey(d => d.ClubId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Player>(entity =>\n        {\n            entity.ToTable(\"player\");\n\n            entity.Property(e => e.PlayerId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Player_ID\");\n            entity.Property(e => e.PlayerName).HasColumnName(\"Player_name\");\n            entity.Property(e => e.SponsorName).HasColumnName(\"Sponsor_name\");\n            entity.Property(e => e.Votes).HasColumnType(\"INT\");\n        });\n\n        modelBuilder.Entity<PlayerCoach>(entity =>\n        {\n            entity.HasKey(e => new { e.PlayerId, e.CoachId });\n\n            entity.ToTable(\"player_coach\");\n\n            entity.Property(e => e.PlayerId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Player_ID\");\n            entity.Property(e => e.CoachId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Coach_ID\");\n            entity.Property(e => e.StartingYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Starting_year\");\n\n            entity.HasOne(d => d.Coach).WithMany(p => p.PlayerCoaches)\n                .HasForeignKey(d => d.CoachId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Player).WithMany(p => p.PlayerCoaches)\n                .HasForeignKey(d => d.PlayerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Club\n{\n    public int ClubId { get; set; }\n\n    public string? ClubName { get; set; }\n\n    public string? Region { get; set; }\n\n    public int? StartYear { get; set; }\n\n    public virtual ICollection<Coach> Coaches { get; set; } = new List<Coach>();\n\n    public virtual ICollection<MatchResult> MatchResults { get; set; } = new List<MatchResult>();\n}",
      "public partial class Coach\n{\n    public int CoachId { get; set; }\n\n    public string? CoachName { get; set; }\n\n    public string? Gender { get; set; }\n\n    public int? ClubId { get; set; }\n\n    public int? Rank { get; set; }\n\n    public virtual Club? Club { get; set; }\n\n    public virtual ICollection<PlayerCoach> PlayerCoaches { get; set; } = new List<PlayerCoach>();\n}",
      "public partial class MatchResult\n{\n    public int Rank { get; set; }\n\n    public int ClubId { get; set; }\n\n    public int? Gold { get; set; }\n\n    public int? BigSilver { get; set; }\n\n    public int? SmallSilver { get; set; }\n\n    public int? Bronze { get; set; }\n\n    public int? Points { get; set; }\n\n    public virtual Club Club { get; set; } = null!;\n}",
      "public partial class Player\n{\n    public int PlayerId { get; set; }\n\n    public string? SponsorName { get; set; }\n\n    public string? PlayerName { get; set; }\n\n    public string? Gender { get; set; }\n\n    public string? Residence { get; set; }\n\n    public string? Occupation { get; set; }\n\n    public int? Votes { get; set; }\n\n    public string? Rank { get; set; }\n\n    public virtual ICollection<PlayerCoach> PlayerCoaches { get; set; } = new List<PlayerCoach>();\n}",
      "public partial class PlayerCoach\n{\n    public int PlayerId { get; set; }\n\n    public int CoachId { get; set; }\n\n    public int? StartingYear { get; set; }\n\n    public virtual Coach Coach { get; set; } = null!;\n\n    public virtual Player Player { get; set; } = null!;\n}"
    ]
  },
  "hospital_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.hospital_1;\n\npublic partial class Hospital1Context : DbContext\n{\n    public Hospital1Context()\n    {\n    }\n\n    public Hospital1Context(DbContextOptions<Hospital1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<AffiliatedWith> AffiliatedWiths { get; set; }\n\n    public virtual DbSet<Appointment> Appointments { get; set; }\n\n    public virtual DbSet<Block> Blocks { get; set; }\n\n    public virtual DbSet<Department> Departments { get; set; }\n\n    public virtual DbSet<Medication> Medications { get; set; }\n\n    public virtual DbSet<Nurse> Nurses { get; set; }\n\n    public virtual DbSet<OnCall> OnCalls { get; set; }\n\n    public virtual DbSet<Patient> Patients { get; set; }\n\n    public virtual DbSet<Physician> Physicians { get; set; }\n\n    public virtual DbSet<Prescribe> Prescribes { get; set; }\n\n    public virtual DbSet<Procedure> Procedures { get; set; }\n\n    public virtual DbSet<Room> Rooms { get; set; }\n\n    public virtual DbSet<Stay> Stays { get; set; }\n\n    public virtual DbSet<TrainedIn> TrainedIns { get; set; }\n\n    public virtual DbSet<Undergo> Undergoes { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/hospital_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<AffiliatedWith>(entity =>\n        {\n            entity.HasKey(e => new { e.Physician, e.Department });\n\n            entity.ToTable(\"Affiliated_With\");\n\n            entity.Property(e => e.PrimaryAffiliation).HasColumnType(\"BOOLEAN\");\n\n            entity.HasOne(d => d.DepartmentNavigation).WithMany(p => p.AffiliatedWiths)\n                .HasForeignKey(d => d.Department)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.PhysicianNavigation).WithMany(p => p.AffiliatedWiths)\n                .HasForeignKey(d => d.Physician)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Appointment>(entity =>\n        {\n            entity.ToTable(\"Appointment\");\n\n            entity.Property(e => e.AppointmentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"AppointmentID\");\n            entity.Property(e => e.End).HasColumnType(\"DATETIME\");\n            entity.Property(e => e.Start).HasColumnType(\"DATETIME\");\n\n            entity.HasOne(d => d.PatientNavigation).WithMany(p => p.Appointments)\n                .HasForeignKey(d => d.Patient)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.PhysicianNavigation).WithMany(p => p.Appointments)\n                .HasForeignKey(d => d.Physician)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.PrepNurseNavigation).WithMany(p => p.Appointments).HasForeignKey(d => d.PrepNurse);\n        });\n\n        modelBuilder.Entity<Block>(entity =>\n        {\n            entity.HasKey(e => new { e.BlockFloor, e.BlockCode });\n\n            entity.ToTable(\"Block\");\n        });\n\n        modelBuilder.Entity<Department>(entity =>\n        {\n            entity.ToTable(\"Department\");\n\n            entity.Property(e => e.DepartmentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"DepartmentID\");\n            entity.Property(e => e.Name).HasColumnType(\"VARCHAR(30)\");\n\n            entity.HasOne(d => d.HeadNavigation).WithMany(p => p.Departments)\n                .HasForeignKey(d => d.Head)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Medication>(entity =>\n        {\n            entity.HasKey(e => e.Code);\n\n            entity.ToTable(\"Medication\");\n\n            entity.Property(e => e.Code).ValueGeneratedNever();\n            entity.Property(e => e.Brand).HasColumnType(\"VARCHAR(30)\");\n            entity.Property(e => e.Description).HasColumnType(\"VARCHAR(30)\");\n            entity.Property(e => e.Name).HasColumnType(\"VARCHAR(30)\");\n        });\n\n        modelBuilder.Entity<Nurse>(entity =>\n        {\n            entity.HasKey(e => e.EmployeeId);\n\n            entity.ToTable(\"Nurse\");\n\n            entity.Property(e => e.EmployeeId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"EmployeeID\");\n            entity.Property(e => e.Name).HasColumnType(\"VARCHAR(30)\");\n            entity.Property(e => e.Position).HasColumnType(\"VARCHAR(30)\");\n            entity.Property(e => e.Registered).HasColumnType(\"BOOLEAN\");\n            entity.Property(e => e.Ssn).HasColumnName(\"SSN\");\n        });\n\n        modelBuilder.Entity<OnCall>(entity =>\n        {\n            entity.HasKey(e => new { e.Nurse, e.BlockFloor, e.BlockCode, e.OnCallStart, e.OnCallEnd });\n\n            entity.ToTable(\"On_Call\");\n\n            entity.Property(e => e.OnCallStart).HasColumnType(\"DATETIME\");\n            entity.Property(e => e.OnCallEnd).HasColumnType(\"DATETIME\");\n\n            entity.HasOne(d => d.NurseNavigation).WithMany(p => p.OnCalls)\n                .HasForeignKey(d => d.Nurse)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Block).WithMany(p => p.OnCalls)\n                .HasForeignKey(d => new { d.BlockFloor, d.BlockCode })\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Patient>(entity =>\n        {\n            entity.HasKey(e => e.Ssn);\n\n            entity.ToTable(\"Patient\");\n\n            entity.Property(e => e.Ssn)\n                .ValueGeneratedNever()\n                .HasColumnName(\"SSN\");\n            entity.Property(e => e.Address).HasColumnType(\"VARCHAR(30)\");\n            entity.Property(e => e.InsuranceId).HasColumnName(\"InsuranceID\");\n            entity.Property(e => e.Name).HasColumnType(\"VARCHAR(30)\");\n            entity.Property(e => e.Pcp).HasColumnName(\"PCP\");\n            entity.Property(e => e.Phone).HasColumnType(\"VARCHAR(30)\");\n\n            entity.HasOne(d => d.PcpNavigation).WithMany(p => p.Patients)\n                .HasForeignKey(d => d.Pcp)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Physician>(entity =>\n        {\n            entity.HasKey(e => e.EmployeeId);\n\n            entity.ToTable(\"Physician\");\n\n            entity.Property(e => e.EmployeeId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"EmployeeID\");\n            entity.Property(e => e.Name).HasColumnType(\"VARCHAR(30)\");\n            entity.Property(e => e.Position).HasColumnType(\"VARCHAR(30)\");\n            entity.Property(e => e.Ssn).HasColumnName(\"SSN\");\n        });\n\n        modelBuilder.Entity<Prescribe>(entity =>\n        {\n            entity.HasKey(e => new { e.Physician, e.Patient, e.Medication, e.Date });\n\n            entity.Property(e => e.Date).HasColumnType(\"DATETIME\");\n            entity.Property(e => e.Dose).HasColumnType(\"VARCHAR(30)\");\n\n            entity.HasOne(d => d.AppointmentNavigation).WithMany(p => p.Prescribes).HasForeignKey(d => d.Appointment);\n\n            entity.HasOne(d => d.MedicationNavigation).WithMany(p => p.Prescribes)\n                .HasForeignKey(d => d.Medication)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.PatientNavigation).WithMany(p => p.Prescribes)\n                .HasForeignKey(d => d.Patient)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.PhysicianNavigation).WithMany(p => p.Prescribes)\n                .HasForeignKey(d => d.Physician)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Procedure>(entity =>\n        {\n            entity.HasKey(e => e.Code);\n\n            entity.Property(e => e.Code).ValueGeneratedNever();\n            entity.Property(e => e.Name).HasColumnType(\"VARCHAR(30)\");\n        });\n\n        modelBuilder.Entity<Room>(entity =>\n        {\n            entity.HasKey(e => e.RoomNumber);\n\n            entity.ToTable(\"Room\");\n\n            entity.Property(e => e.RoomNumber).ValueGeneratedNever();\n            entity.Property(e => e.RoomType).HasColumnType(\"VARCHAR(30)\");\n            entity.Property(e => e.Unavailable).HasColumnType(\"BOOLEAN\");\n\n            entity.HasOne(d => d.Block).WithMany(p => p.Rooms)\n                .HasForeignKey(d => new { d.BlockFloor, d.BlockCode })\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Stay>(entity =>\n        {\n            entity.ToTable(\"Stay\");\n\n            entity.Property(e => e.StayId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"StayID\");\n            entity.Property(e => e.StayEnd).HasColumnType(\"DATETIME\");\n            entity.Property(e => e.StayStart).HasColumnType(\"DATETIME\");\n\n            entity.HasOne(d => d.PatientNavigation).WithMany(p => p.Stays)\n                .HasForeignKey(d => d.Patient)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.RoomNavigation).WithMany(p => p.Stays)\n                .HasForeignKey(d => d.Room)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<TrainedIn>(entity =>\n        {\n            entity.HasKey(e => new { e.Physician, e.Treatment });\n\n            entity.ToTable(\"Trained_In\");\n\n            entity.Property(e => e.CertificationDate).HasColumnType(\"DATETIME\");\n            entity.Property(e => e.CertificationExpires).HasColumnType(\"DATETIME\");\n\n            entity.HasOne(d => d.PhysicianNavigation).WithMany(p => p.TrainedIns)\n                .HasForeignKey(d => d.Physician)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.TreatmentNavigation).WithMany(p => p.TrainedIns)\n                .HasForeignKey(d => d.Treatment)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Undergo>(entity =>\n        {\n            entity.HasKey(e => new { e.Patient, e.Procedures, e.Stay, e.DateUndergoes });\n\n            entity.Property(e => e.DateUndergoes).HasColumnType(\"DATETIME\");\n\n            entity.HasOne(d => d.AssistingNurseNavigation).WithMany(p => p.Undergos).HasForeignKey(d => d.AssistingNurse);\n\n            entity.HasOne(d => d.PatientNavigation).WithMany(p => p.Undergos)\n                .HasForeignKey(d => d.Patient)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.PhysicianNavigation).WithMany(p => p.Undergos)\n                .HasForeignKey(d => d.Physician)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.ProceduresNavigation).WithMany(p => p.Undergos)\n                .HasForeignKey(d => d.Procedures)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.StayNavigation).WithMany(p => p.Undergos)\n                .HasForeignKey(d => d.Stay)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class AffiliatedWith\n{\n    public int Physician { get; set; }\n\n    public int Department { get; set; }\n\n    public bool PrimaryAffiliation { get; set; }\n\n    public virtual Department DepartmentNavigation { get; set; } = null!;\n\n    public virtual Physician PhysicianNavigation { get; set; } = null!;\n}",
      "public partial class Appointment\n{\n    public int AppointmentId { get; set; }\n\n    public int Patient { get; set; }\n\n    public int? PrepNurse { get; set; }\n\n    public int Physician { get; set; }\n\n    public string Start { get; set; } = null!;\n\n    public string End { get; set; } = null!;\n\n    public string ExaminationRoom { get; set; } = null!;\n\n    public virtual Patient PatientNavigation { get; set; } = null!;\n\n    public virtual Physician PhysicianNavigation { get; set; } = null!;\n\n    public virtual Nurse? PrepNurseNavigation { get; set; }\n\n    public virtual ICollection<Prescribe> Prescribes { get; set; } = new List<Prescribe>();\n}",
      "public partial class Block\n{\n    public int BlockFloor { get; set; }\n\n    public int BlockCode { get; set; }\n\n    public virtual ICollection<OnCall> OnCalls { get; set; } = new List<OnCall>();\n\n    public virtual ICollection<Room> Rooms { get; set; } = new List<Room>();\n}",
      "public partial class Department\n{\n    public int DepartmentId { get; set; }\n\n    public string Name { get; set; } = null!;\n\n    public int Head { get; set; }\n\n    public virtual ICollection<AffiliatedWith> AffiliatedWiths { get; set; } = new List<AffiliatedWith>();\n\n    public virtual Physician HeadNavigation { get; set; } = null!;\n}",
      "public partial class Medication\n{\n    public int Code { get; set; }\n\n    public string Name { get; set; } = null!;\n\n    public string Brand { get; set; } = null!;\n\n    public string Description { get; set; } = null!;\n\n    public virtual ICollection<Prescribe> Prescribes { get; set; } = new List<Prescribe>();\n}",
      "public partial class Nurse\n{\n    public int EmployeeId { get; set; }\n\n    public string Name { get; set; } = null!;\n\n    public string Position { get; set; } = null!;\n\n    public bool Registered { get; set; }\n\n    public int Ssn { get; set; }\n\n    public virtual ICollection<Appointment> Appointments { get; set; } = new List<Appointment>();\n\n    public virtual ICollection<OnCall> OnCalls { get; set; } = new List<OnCall>();\n\n    public virtual ICollection<Undergo> Undergos { get; set; } = new List<Undergo>();\n}",
      "public partial class OnCall\n{\n    public int Nurse { get; set; }\n\n    public int BlockFloor { get; set; }\n\n    public int BlockCode { get; set; }\n\n    public string OnCallStart { get; set; } = null!;\n\n    public string OnCallEnd { get; set; } = null!;\n\n    public virtual Block Block { get; set; } = null!;\n\n    public virtual Nurse NurseNavigation { get; set; } = null!;\n}",
      "public partial class Patient\n{\n    public int Ssn { get; set; }\n\n    public string Name { get; set; } = null!;\n\n    public string Address { get; set; } = null!;\n\n    public string Phone { get; set; } = null!;\n\n    public int InsuranceId { get; set; }\n\n    public int Pcp { get; set; }\n\n    public virtual ICollection<Appointment> Appointments { get; set; } = new List<Appointment>();\n\n    public virtual Physician PcpNavigation { get; set; } = null!;\n\n    public virtual ICollection<Prescribe> Prescribes { get; set; } = new List<Prescribe>();\n\n    public virtual ICollection<Stay> Stays { get; set; } = new List<Stay>();\n\n    public virtual ICollection<Undergo> Undergos { get; set; } = new List<Undergo>();\n}",
      "public partial class Physician\n{\n    public int EmployeeId { get; set; }\n\n    public string Name { get; set; } = null!;\n\n    public string Position { get; set; } = null!;\n\n    public int Ssn { get; set; }\n\n    public virtual ICollection<AffiliatedWith> AffiliatedWiths { get; set; } = new List<AffiliatedWith>();\n\n    public virtual ICollection<Appointment> Appointments { get; set; } = new List<Appointment>();\n\n    public virtual ICollection<Department> Departments { get; set; } = new List<Department>();\n\n    public virtual ICollection<Patient> Patients { get; set; } = new List<Patient>();\n\n    public virtual ICollection<Prescribe> Prescribes { get; set; } = new List<Prescribe>();\n\n    public virtual ICollection<TrainedIn> TrainedIns { get; set; } = new List<TrainedIn>();\n\n    public virtual ICollection<Undergo> Undergos { get; set; } = new List<Undergo>();\n}",
      "public partial class Prescribe\n{\n    public int Physician { get; set; }\n\n    public int Patient { get; set; }\n\n    public int Medication { get; set; }\n\n    public string Date { get; set; } = null!;\n\n    public int? Appointment { get; set; }\n\n    public string Dose { get; set; } = null!;\n\n    public virtual Appointment? AppointmentNavigation { get; set; }\n\n    public virtual Medication MedicationNavigation { get; set; } = null!;\n\n    public virtual Patient PatientNavigation { get; set; } = null!;\n\n    public virtual Physician PhysicianNavigation { get; set; } = null!;\n}",
      "public partial class Procedure\n{\n    public int Code { get; set; }\n\n    public string Name { get; set; } = null!;\n\n    public double Cost { get; set; }\n\n    public virtual ICollection<TrainedIn> TrainedIns { get; set; } = new List<TrainedIn>();\n\n    public virtual ICollection<Undergo> Undergos { get; set; } = new List<Undergo>();\n}",
      "public partial class Room\n{\n    public int RoomNumber { get; set; }\n\n    public string RoomType { get; set; } = null!;\n\n    public int BlockFloor { get; set; }\n\n    public int BlockCode { get; set; }\n\n    public bool Unavailable { get; set; }\n\n    public virtual Block Block { get; set; } = null!;\n\n    public virtual ICollection<Stay> Stays { get; set; } = new List<Stay>();\n}",
      "public partial class Stay\n{\n    public int StayId { get; set; }\n\n    public int Patient { get; set; }\n\n    public int Room { get; set; }\n\n    public DateOnly StayStart { get; set; }\n\n    public DateOnly StayEnd { get; set; }\n\n    public virtual Patient PatientNavigation { get; set; } = null!;\n\n    public virtual Room RoomNavigation { get; set; } = null!;\n\n    public virtual ICollection<Undergo> Undergos { get; set; } = new List<Undergo>();\n}",
      "public partial class TrainedIn\n{\n    public int Physician { get; set; }\n\n    public int Treatment { get; set; }\n\n    public DateOnly CertificationDate { get; set; }\n\n    public DateOnly CertificationExpires { get; set; }\n\n    public virtual Physician PhysicianNavigation { get; set; } = null!;\n\n    public virtual Procedure TreatmentNavigation { get; set; } = null!;\n}",
      "public partial class Undergo\n{\n    public int Patient { get; set; }\n\n    public int Procedures { get; set; }\n\n    public int Stay { get; set; }\n\n    public DateOnly DateUndergoes { get; set; }\n\n    public int Physician { get; set; }\n\n    public int? AssistingNurse { get; set; }\n\n    public virtual Nurse? AssistingNurseNavigation { get; set; }\n\n    public virtual Patient PatientNavigation { get; set; } = null!;\n\n    public virtual Physician PhysicianNavigation { get; set; } = null!;\n\n    public virtual Procedure ProceduresNavigation { get; set; } = null!;\n\n    public virtual Stay StayNavigation { get; set; } = null!;\n}"
    ]
  },
  "dorm_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.dorm_1;\n\npublic partial class Dorm1Context : DbContext\n{\n    public Dorm1Context()\n    {\n    }\n\n    public Dorm1Context(DbContextOptions<Dorm1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Dorm> Dorms { get; set; }\n\n    public virtual DbSet<DormAmenity> DormAmenities { get; set; }\n\n    public virtual DbSet<HasAmenity> HasAmenities { get; set; }\n\n    public virtual DbSet<LivesIn> LivesIns { get; set; }\n\n    public virtual DbSet<Student> Students { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/dorm_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Dorm>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Dorm\");\n\n            entity.Property(e => e.DormName)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"dorm_name\");\n            entity.Property(e => e.Dormid).HasColumnName(\"dormid\");\n            entity.Property(e => e.Gender)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"gender\");\n            entity.Property(e => e.StudentCapacity).HasColumnName(\"student_capacity\");\n        });\n\n        modelBuilder.Entity<DormAmenity>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Dorm_amenity\");\n\n            entity.Property(e => e.Amenid).HasColumnName(\"amenid\");\n            entity.Property(e => e.AmenityName)\n                .HasColumnType(\"VARCHAR(25)\")\n                .HasColumnName(\"amenity_name\");\n        });\n\n        modelBuilder.Entity<HasAmenity>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Has_amenity\");\n\n            entity.Property(e => e.Amenid).HasColumnName(\"amenid\");\n            entity.Property(e => e.Dormid).HasColumnName(\"dormid\");\n        });\n\n        modelBuilder.Entity<LivesIn>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Lives_in\");\n\n            entity.Property(e => e.Dormid).HasColumnName(\"dormid\");\n            entity.Property(e => e.RoomNumber).HasColumnName(\"room_number\");\n            entity.Property(e => e.Stuid).HasColumnName(\"stuid\");\n\n            entity.HasOne(d => d.Stu).WithMany().HasForeignKey(d => d.Stuid);\n        });\n\n        modelBuilder.Entity<Student>(entity =>\n        {\n            entity.HasKey(e => e.StuId);\n\n            entity.ToTable(\"Student\");\n\n            entity.Property(e => e.StuId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"StuID\");\n            entity.Property(e => e.CityCode)\n                .HasColumnType(\"VARCHAR(3)\")\n                .HasColumnName(\"city_code\");\n            entity.Property(e => e.Fname).HasColumnType(\"VARCHAR(12)\");\n            entity.Property(e => e.Lname)\n                .HasColumnType(\"VARCHAR(12)\")\n                .HasColumnName(\"LName\");\n            entity.Property(e => e.Sex).HasColumnType(\"VARCHAR(1)\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Dorm\n{\n    public int Dormid { get; set; }\n\n    public string? DormName { get; set; }\n\n    public int? StudentCapacity { get; set; }\n\n    public string? Gender { get; set; }\n}",
      "public partial class DormAmenity\n{\n    public int Amenid { get; set; }\n\n    public string? AmenityName { get; set; }\n}",
      "public partial class HasAmenity\n{\n    public int? Dormid { get; set; }\n\n    public int? Amenid { get; set; }\n}",
      "public partial class LivesIn\n{\n    public int? Stuid { get; set; }\n\n    public int? Dormid { get; set; }\n\n    public int? RoomNumber { get; set; }\n\n    public virtual Student? Stu { get; set; }\n}",
      "public partial class Student\n{\n    public int StuId { get; set; }\n\n    public string? Lname { get; set; }\n\n    public string? Fname { get; set; }\n\n    public int? Age { get; set; }\n\n    public string? Sex { get; set; }\n\n    public int? Major { get; set; }\n\n    public int? Advisor { get; set; }\n\n    public string? CityCode { get; set; }\n}"
    ]
  },
  "department_management": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.department_management;\n\npublic partial class DepartmentManagementContext : DbContext\n{\n    public DepartmentManagementContext()\n    {\n    }\n\n    public DepartmentManagementContext(DbContextOptions<DepartmentManagementContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Department> Departments { get; set; }\n\n    public virtual DbSet<Head> Heads { get; set; }\n\n    public virtual DbSet<Management> Managements { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/department_management.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Department>(entity =>\n        {\n            entity.ToTable(\"department\");\n\n            entity.Property(e => e.DepartmentId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Department_ID\");\n            entity.Property(e => e.BudgetInBillions).HasColumnName(\"Budget_in_Billions\");\n            entity.Property(e => e.NumEmployees).HasColumnName(\"Num_Employees\");\n            entity.Property(e => e.Ranking).HasColumnType(\"INT\");\n        });\n\n        modelBuilder.Entity<Head>(entity =>\n        {\n            entity.ToTable(\"head\");\n\n            entity.Property(e => e.HeadId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"head_ID\");\n            entity.Property(e => e.Age).HasColumnName(\"age\");\n            entity.Property(e => e.BornState).HasColumnName(\"born_state\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n        });\n\n        modelBuilder.Entity<Management>(entity =>\n        {\n            entity.HasKey(e => new { e.DepartmentId, e.HeadId });\n\n            entity.ToTable(\"management\");\n\n            entity.Property(e => e.DepartmentId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"department_ID\");\n            entity.Property(e => e.HeadId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"head_ID\");\n            entity.Property(e => e.TemporaryActing).HasColumnName(\"temporary_acting\");\n\n            entity.HasOne(d => d.Department).WithMany(p => p.Managements)\n                .HasForeignKey(d => d.DepartmentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Head).WithMany(p => p.Managements)\n                .HasForeignKey(d => d.HeadId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Department\n{\n    public int DepartmentId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Creation { get; set; }\n\n    public int? Ranking { get; set; }\n\n    public double? BudgetInBillions { get; set; }\n\n    public double? NumEmployees { get; set; }\n\n    public virtual ICollection<Management> Managements { get; set; } = new List<Management>();\n}",
      "public partial class Head\n{\n    public int HeadId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? BornState { get; set; }\n\n    public double? Age { get; set; }\n\n    public virtual ICollection<Management> Managements { get; set; } = new List<Management>();\n}",
      "public partial class Management\n{\n    public int DepartmentId { get; set; }\n\n    public int HeadId { get; set; }\n\n    public string? TemporaryActing { get; set; }\n\n    public virtual Department Department { get; set; } = null!;\n\n    public virtual Head Head { get; set; } = null!;\n}"
    ]
  },
  "storm_record": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.storm_record;\n\npublic partial class StormRecordContext : DbContext\n{\n    public StormRecordContext()\n    {\n    }\n\n    public StormRecordContext(DbContextOptions<StormRecordContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<AffectedRegion> AffectedRegions { get; set; }\n\n    public virtual DbSet<Region> Regions { get; set; }\n\n    public virtual DbSet<Storm> Storms { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/storm_record.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<AffectedRegion>(entity =>\n        {\n            entity.HasKey(e => new { e.RegionId, e.StormId });\n\n            entity.ToTable(\"affected_region\");\n\n            entity.Property(e => e.RegionId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Region_id\");\n            entity.Property(e => e.StormId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Storm_ID\");\n            entity.Property(e => e.NumberCityAffected).HasColumnName(\"Number_city_affected\");\n\n            entity.HasOne(d => d.Region).WithMany(p => p.AffectedRegions)\n                .HasForeignKey(d => d.RegionId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Storm).WithMany(p => p.AffectedRegions)\n                .HasForeignKey(d => d.StormId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Region>(entity =>\n        {\n            entity.ToTable(\"region\");\n\n            entity.Property(e => e.RegionId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Region_id\");\n            entity.Property(e => e.RegionCode).HasColumnName(\"Region_code\");\n            entity.Property(e => e.RegionName).HasColumnName(\"Region_name\");\n        });\n\n        modelBuilder.Entity<Storm>(entity =>\n        {\n            entity.ToTable(\"storm\");\n\n            entity.Property(e => e.StormId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Storm_ID\");\n            entity.Property(e => e.DamageMillionsUsd).HasColumnName(\"Damage_millions_USD\");\n            entity.Property(e => e.DatesActive).HasColumnName(\"Dates_active\");\n            entity.Property(e => e.MaxSpeed)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Max_speed\");\n            entity.Property(e => e.NumberDeaths)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Number_Deaths\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class AffectedRegion\n{\n    public int RegionId { get; set; }\n\n    public int StormId { get; set; }\n\n    public double? NumberCityAffected { get; set; }\n\n    public virtual Region Region { get; set; } = null!;\n\n    public virtual Storm Storm { get; set; } = null!;\n}",
      "public partial class Region\n{\n    public int RegionId { get; set; }\n\n    public string? RegionCode { get; set; }\n\n    public string? RegionName { get; set; }\n\n    public virtual ICollection<AffectedRegion> AffectedRegions { get; set; } = new List<AffectedRegion>();\n}",
      "public partial class Storm\n{\n    public int StormId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? DatesActive { get; set; }\n\n    public int? MaxSpeed { get; set; }\n\n    public double? DamageMillionsUsd { get; set; }\n\n    public int? NumberDeaths { get; set; }\n\n    public virtual ICollection<AffectedRegion> AffectedRegions { get; set; } = new List<AffectedRegion>();\n}"
    ]
  },
  "small_bank_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.small_bank_1;\n\npublic partial class SmallBank1Context : DbContext\n{\n    public SmallBank1Context()\n    {\n    }\n\n    public SmallBank1Context(DbContextOptions<SmallBank1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Account> Accounts { get; set; }\n\n    public virtual DbSet<Checking> Checkings { get; set; }\n\n    public virtual DbSet<Saving> Savings { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/small_bank_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Account>(entity =>\n        {\n            entity.HasKey(e => e.Custid);\n\n            entity.ToTable(\"ACCOUNTS\");\n\n            entity.Property(e => e.Custid)\n                .ValueGeneratedNever()\n                .HasColumnType(\"BIGINT\")\n                .HasColumnName(\"custid\");\n            entity.Property(e => e.Name)\n                .HasColumnType(\"VARCHAR(64)\")\n                .HasColumnName(\"name\");\n        });\n\n        modelBuilder.Entity<Checking>(entity =>\n        {\n            entity.HasKey(e => e.Custid);\n\n            entity.ToTable(\"CHECKING\");\n\n            entity.Property(e => e.Custid)\n                .ValueGeneratedNever()\n                .HasColumnType(\"BIGINT\")\n                .HasColumnName(\"custid\");\n            entity.Property(e => e.Balance)\n                .HasColumnType(\"FLOAT\")\n                .HasColumnName(\"balance\");\n\n            entity.HasOne(d => d.Cust).WithOne(p => p.Checking)\n                .HasForeignKey<Checking>(d => d.Custid)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Saving>(entity =>\n        {\n            entity.HasKey(e => e.Custid);\n\n            entity.ToTable(\"SAVINGS\");\n\n            entity.Property(e => e.Custid)\n                .ValueGeneratedNever()\n                .HasColumnType(\"BIGINT\")\n                .HasColumnName(\"custid\");\n            entity.Property(e => e.Balance)\n                .HasColumnType(\"FLOAT\")\n                .HasColumnName(\"balance\");\n\n            entity.HasOne(d => d.Cust).WithOne(p => p.Saving)\n                .HasForeignKey<Saving>(d => d.Custid)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Account\n{\n    public long Custid { get; set; }\n\n    public string Name { get; set; } = null!;\n\n    public virtual Checking? Checking { get; set; }\n\n    public virtual Saving? Saving { get; set; }\n}",
      "public partial class Checking\n{\n    public long Custid { get; set; }\n\n    public double Balance { get; set; }\n\n    public virtual Account Cust { get; set; } = null!;\n}",
      "public partial class Saving\n{\n    public long Custid { get; set; }\n\n    public double Balance { get; set; }\n\n    public virtual Account Cust { get; set; } = null!;\n}"
    ]
  },
  "candidate_poll": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.candidate_poll;\n\npublic partial class CandidatePollContext : DbContext\n{\n    public CandidatePollContext()\n    {\n    }\n\n    public CandidatePollContext(DbContextOptions<CandidatePollContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Candidate> Candidates { get; set; }\n\n    public virtual DbSet<Person> People { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/candidate_poll.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Candidate>(entity =>\n        {\n            entity.ToTable(\"candidate\");\n\n            entity.Property(e => e.CandidateId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Candidate_ID\");\n            entity.Property(e => e.ConsiderRate).HasColumnName(\"Consider_rate\");\n            entity.Property(e => e.OpposeRate).HasColumnName(\"Oppose_rate\");\n            entity.Property(e => e.PeopleId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"People_ID\");\n            entity.Property(e => e.PollSource).HasColumnName(\"Poll_Source\");\n            entity.Property(e => e.SupportRate).HasColumnName(\"Support_rate\");\n            entity.Property(e => e.UnsureRate).HasColumnName(\"Unsure_rate\");\n\n            entity.HasOne(d => d.People).WithMany(p => p.Candidates).HasForeignKey(d => d.PeopleId);\n        });\n\n        modelBuilder.Entity<Person>(entity =>\n        {\n            entity.HasKey(e => e.PeopleId);\n\n            entity.ToTable(\"people\");\n\n            entity.Property(e => e.PeopleId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"People_ID\");\n            entity.Property(e => e.DateOfBirth).HasColumnName(\"Date_of_Birth\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Candidate\n{\n    public int CandidateId { get; set; }\n\n    public int? PeopleId { get; set; }\n\n    public string? PollSource { get; set; }\n\n    public string? Date { get; set; }\n\n    public double? SupportRate { get; set; }\n\n    public double? ConsiderRate { get; set; }\n\n    public double? OpposeRate { get; set; }\n\n    public double? UnsureRate { get; set; }\n\n    public virtual Person? People { get; set; }\n}",
      "public partial class Person\n{\n    public int PeopleId { get; set; }\n\n    public string? Sex { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? DateOfBirth { get; set; }\n\n    public double? Height { get; set; }\n\n    public double? Weight { get; set; }\n\n    public virtual ICollection<Candidate> Candidates { get; set; } = new List<Candidate>();\n}"
    ]
  },
  "insurance_and_eClaims": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.insurance_and_eClaims;\n\npublic partial class InsuranceAndEClaimsContext : DbContext\n{\n    public InsuranceAndEClaimsContext()\n    {\n    }\n\n    public InsuranceAndEClaimsContext(DbContextOptions<InsuranceAndEClaimsContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<ClaimHeader> ClaimHeaders { get; set; }\n\n    public virtual DbSet<ClaimsDocument> ClaimsDocuments { get; set; }\n\n    public virtual DbSet<ClaimsProcessing> ClaimsProcessings { get; set; }\n\n    public virtual DbSet<ClaimsProcessingStage> ClaimsProcessingStages { get; set; }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<Policy> Policies { get; set; }\n\n    public virtual DbSet<Staff> Staff { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/insurance_and_eClaims.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<ClaimHeader>(entity =>\n        {\n            entity.ToTable(\"Claim_Headers\");\n\n            entity.Property(e => e.ClaimHeaderId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Claim_Header_ID\");\n            entity.Property(e => e.AmountClaimed)\n                .HasColumnType(\"DECIMAL(20,4)\")\n                .HasColumnName(\"Amount_Claimed\");\n            entity.Property(e => e.AmountPiad)\n                .HasColumnType(\"DECIMAL(20,4)\")\n                .HasColumnName(\"Amount_Piad\");\n            entity.Property(e => e.ClaimStatusCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Claim_Status_Code\");\n            entity.Property(e => e.ClaimTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Claim_Type_Code\");\n            entity.Property(e => e.DateOfClaim)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"Date_of_Claim\");\n            entity.Property(e => e.DateOfSettlement)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"Date_of_Settlement\");\n            entity.Property(e => e.PolicyId).HasColumnName(\"Policy_ID\");\n\n            entity.HasOne(d => d.Policy).WithMany(p => p.ClaimHeaders)\n                .HasForeignKey(d => d.PolicyId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ClaimsDocument>(entity =>\n        {\n            entity.HasKey(e => new { e.ClaimId, e.DocumentTypeCode });\n\n            entity.ToTable(\"Claims_Documents\");\n\n            entity.Property(e => e.ClaimId).HasColumnName(\"Claim_ID\");\n            entity.Property(e => e.DocumentTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Document_Type_Code\");\n            entity.Property(e => e.CreatedByStaffId).HasColumnName(\"Created_by_Staff_ID\");\n            entity.Property(e => e.CreatedDate).HasColumnName(\"Created_Date\");\n\n            entity.HasOne(d => d.Claim).WithMany(p => p.ClaimsDocuments)\n                .HasForeignKey(d => d.ClaimId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.CreatedByStaff).WithMany(p => p.ClaimsDocuments).HasForeignKey(d => d.CreatedByStaffId);\n        });\n\n        modelBuilder.Entity<ClaimsProcessing>(entity =>\n        {\n            entity.HasKey(e => e.ClaimProcessingId);\n\n            entity.ToTable(\"Claims_Processing\");\n\n            entity.Property(e => e.ClaimProcessingId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Claim_Processing_ID\");\n            entity.Property(e => e.ClaimId).HasColumnName(\"Claim_ID\");\n            entity.Property(e => e.ClaimOutcomeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Claim_Outcome_Code\");\n            entity.Property(e => e.ClaimStageId).HasColumnName(\"Claim_Stage_ID\");\n            entity.Property(e => e.StaffId).HasColumnName(\"Staff_ID\");\n\n            entity.HasOne(d => d.Claim).WithMany(p => p.ClaimsProcessings)\n                .HasForeignKey(d => d.ClaimId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Staff).WithMany(p => p.ClaimsProcessings).HasForeignKey(d => d.StaffId);\n        });\n\n        modelBuilder.Entity<ClaimsProcessingStage>(entity =>\n        {\n            entity.HasKey(e => e.ClaimStageId);\n\n            entity.ToTable(\"Claims_Processing_Stages\");\n\n            entity.Property(e => e.ClaimStageId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Claim_Stage_ID\");\n            entity.Property(e => e.ClaimStatusDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Claim_Status_Description\");\n            entity.Property(e => e.ClaimStatusName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Claim_Status_Name\");\n            entity.Property(e => e.NextClaimStageId).HasColumnName(\"Next_Claim_Stage_ID\");\n        });\n\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.Property(e => e.CustomerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Customer_ID\");\n            entity.Property(e => e.CustomerDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Customer_Details\");\n        });\n\n        modelBuilder.Entity<Policy>(entity =>\n        {\n            entity.Property(e => e.PolicyId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Policy_ID\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"Customer_ID\");\n            entity.Property(e => e.EndDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"End_Date\");\n            entity.Property(e => e.PolicyTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Policy_Type_Code\");\n            entity.Property(e => e.StartDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"Start_Date\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.Policies)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Staff>(entity =>\n        {\n            entity.Property(e => e.StaffId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Staff_ID\");\n            entity.Property(e => e.StaffDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Staff_Details\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class ClaimHeader\n{\n    public int ClaimHeaderId { get; set; }\n\n    public string ClaimStatusCode { get; set; } = null!;\n\n    public string ClaimTypeCode { get; set; } = null!;\n\n    public int PolicyId { get; set; }\n\n    public DateTime? DateOfClaim { get; set; }\n\n    public DateTime? DateOfSettlement { get; set; }\n\n    public decimal? AmountClaimed { get; set; }\n\n    public int? AmountPiad { get; set; }\n\n    public virtual ICollection<ClaimsDocument> ClaimsDocuments { get; set; } = new List<ClaimsDocument>();\n\n    public virtual ICollection<ClaimsProcessing> ClaimsProcessings { get; set; } = new List<ClaimsProcessing>();\n\n    public virtual Policy Policy { get; set; } = null!;\n}",
      "public partial class ClaimsDocument\n{\n    public int ClaimId { get; set; }\n\n    public string DocumentTypeCode { get; set; } = null!;\n\n    public int? CreatedByStaffId { get; set; }\n\n    public int? CreatedDate { get; set; }\n\n    public virtual ClaimHeader Claim { get; set; } = null!;\n\n    public virtual Staff? CreatedByStaff { get; set; }\n}",
      "public partial class ClaimsProcessing\n{\n    public int ClaimProcessingId { get; set; }\n\n    public int ClaimId { get; set; }\n\n    public string ClaimOutcomeCode { get; set; } = null!;\n\n    public int ClaimStageId { get; set; }\n\n    public int? StaffId { get; set; }\n\n    public virtual ClaimHeader Claim { get; set; } = null!;\n\n    public virtual Staff? Staff { get; set; }\n}",
      "public partial class ClaimsProcessingStage\n{\n    public int ClaimStageId { get; set; }\n\n    public int? NextClaimStageId { get; set; }\n\n    public string ClaimStatusName { get; set; } = null!;\n\n    public string ClaimStatusDescription { get; set; } = null!;\n}",
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public string CustomerDetails { get; set; } = null!;\n\n    public virtual ICollection<Policy> Policies { get; set; } = new List<Policy>();\n}",
      "public partial class Policy\n{\n    public int PolicyId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public string PolicyTypeCode { get; set; } = null!;\n\n    public DateTime? StartDate { get; set; }\n\n    public DateTime? EndDate { get; set; }\n\n    public virtual ICollection<ClaimHeader> ClaimHeaders { get; set; } = new List<ClaimHeader>();\n\n    public virtual Customer Customer { get; set; } = null!;\n}",
      "public partial class Staff\n{\n    public int StaffId { get; set; }\n\n    public string StaffDetails { get; set; } = null!;\n\n    public virtual ICollection<ClaimsDocument> ClaimsDocuments { get; set; } = new List<ClaimsDocument>();\n\n    public virtual ICollection<ClaimsProcessing> ClaimsProcessings { get; set; } = new List<ClaimsProcessing>();\n}"
    ]
  },
  "coffee_shop": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.coffee_shop;\n\npublic partial class CoffeeShopContext : DbContext\n{\n    public CoffeeShopContext()\n    {\n    }\n\n    public CoffeeShopContext(DbContextOptions<CoffeeShopContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<HappyHour> HappyHours { get; set; }\n\n    public virtual DbSet<HappyHourMember> HappyHourMembers { get; set; }\n\n    public virtual DbSet<Member> Members { get; set; }\n\n    public virtual DbSet<Shop> Shops { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/coffee_shop.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<HappyHour>(entity =>\n        {\n            entity.HasKey(e => new { e.HhId, e.ShopId, e.Month });\n\n            entity.ToTable(\"happy_hour\");\n\n            entity.Property(e => e.HhId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"HH_ID\");\n            entity.Property(e => e.ShopId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Shop_ID\");\n            entity.Property(e => e.NumOfShaffInCharge)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Num_of_shaff_in_charge\");\n\n            entity.HasOne(d => d.Shop).WithMany(p => p.HappyHours)\n                .HasForeignKey(d => d.ShopId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<HappyHourMember>(entity =>\n        {\n            entity.HasKey(e => new { e.HhId, e.MemberId });\n\n            entity.ToTable(\"happy_hour_member\");\n\n            entity.Property(e => e.HhId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"HH_ID\");\n            entity.Property(e => e.MemberId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Member_ID\");\n            entity.Property(e => e.TotalAmount).HasColumnName(\"Total_amount\");\n\n            entity.HasOne(d => d.Member).WithMany(p => p.HappyHourMembers)\n                .HasForeignKey(d => d.MemberId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Member>(entity =>\n        {\n            entity.ToTable(\"member\");\n\n            entity.Property(e => e.MemberId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Member_ID\");\n            entity.Property(e => e.Age).HasColumnType(\"INT\");\n            entity.Property(e => e.LevelOfMembership)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Level_of_membership\");\n            entity.Property(e => e.MembershipCard).HasColumnName(\"Membership_card\");\n            entity.Property(e => e.TimeOfPurchase)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Time_of_purchase\");\n        });\n\n        modelBuilder.Entity<Shop>(entity =>\n        {\n            entity.ToTable(\"shop\");\n\n            entity.Property(e => e.ShopId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Shop_ID\");\n            entity.Property(e => e.NumOfStaff).HasColumnName(\"Num_of_staff\");\n            entity.Property(e => e.OpenYear).HasColumnName(\"Open_Year\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class HappyHour\n{\n    public int HhId { get; set; }\n\n    public int ShopId { get; set; }\n\n    public string Month { get; set; } = null!;\n\n    public int? NumOfShaffInCharge { get; set; }\n\n    public virtual Shop Shop { get; set; } = null!;\n}",
      "public partial class HappyHourMember\n{\n    public int HhId { get; set; }\n\n    public int MemberId { get; set; }\n\n    public double? TotalAmount { get; set; }\n\n    public virtual Member Member { get; set; } = null!;\n}",
      "public partial class Member\n{\n    public int MemberId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? MembershipCard { get; set; }\n\n    public int? Age { get; set; }\n\n    public int? TimeOfPurchase { get; set; }\n\n    public int? LevelOfMembership { get; set; }\n\n    public string? Address { get; set; }\n\n    public virtual ICollection<HappyHourMember> HappyHourMembers { get; set; } = new List<HappyHourMember>();\n}",
      "public partial class Shop\n{\n    public int ShopId { get; set; }\n\n    public string? Address { get; set; }\n\n    public string? NumOfStaff { get; set; }\n\n    public double? Score { get; set; }\n\n    public string? OpenYear { get; set; }\n\n    public virtual ICollection<HappyHour> HappyHours { get; set; } = new List<HappyHour>();\n}"
    ]
  },
  "pilot_record": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.pilot_record;\n\npublic partial class PilotRecordContext : DbContext\n{\n    public PilotRecordContext()\n    {\n    }\n\n    public PilotRecordContext(DbContextOptions<PilotRecordContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Aircraft> Aircraft { get; set; }\n\n    public virtual DbSet<Pilot> Pilots { get; set; }\n\n    public virtual DbSet<PilotRecord> PilotRecords { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/pilot_record.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Aircraft>(entity =>\n        {\n            entity.ToTable(\"aircraft\");\n\n            entity.Property(e => e.AircraftId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Aircraft_ID\");\n            entity.Property(e => e.FleetSeries).HasColumnName(\"Fleet_Series\");\n            entity.Property(e => e.FuelPropulsion).HasColumnName(\"Fuel_Propulsion\");\n            entity.Property(e => e.OrderYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Order_Year\");\n        });\n\n        modelBuilder.Entity<Pilot>(entity =>\n        {\n            entity.ToTable(\"pilot\");\n\n            entity.Property(e => e.PilotId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Pilot_ID\");\n            entity.Property(e => e.Age).HasColumnType(\"INT\");\n            entity.Property(e => e.JoinYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Join_Year\");\n            entity.Property(e => e.PilotName).HasColumnName(\"Pilot_name\");\n            entity.Property(e => e.Rank).HasColumnType(\"INT\");\n        });\n\n        modelBuilder.Entity<PilotRecord>(entity =>\n        {\n            entity.HasKey(e => new { e.PilotId, e.AircraftId, e.Date });\n\n            entity.ToTable(\"pilot_record\");\n\n            entity.Property(e => e.PilotId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Pilot_ID\");\n            entity.Property(e => e.AircraftId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Aircraft_ID\");\n            entity.Property(e => e.RecordId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Record_ID\");\n\n            entity.HasOne(d => d.Aircraft).WithMany(p => p.PilotRecords)\n                .HasForeignKey(d => d.AircraftId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Pilot).WithMany(p => p.PilotRecords)\n                .HasForeignKey(d => d.PilotId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Aircraft\n{\n    public int AircraftId { get; set; }\n\n    public int? OrderYear { get; set; }\n\n    public string? Manufacturer { get; set; }\n\n    public string? Model { get; set; }\n\n    public string? FleetSeries { get; set; }\n\n    public string? Powertrain { get; set; }\n\n    public string? FuelPropulsion { get; set; }\n\n    public virtual ICollection<PilotRecord> PilotRecords { get; set; } = new List<PilotRecord>();\n}",
      "public partial class Pilot\n{\n    public int PilotId { get; set; }\n\n    public string? PilotName { get; set; }\n\n    public int? Rank { get; set; }\n\n    public int? Age { get; set; }\n\n    public string? Nationality { get; set; }\n\n    public string? Position { get; set; }\n\n    public int? JoinYear { get; set; }\n\n    public string? Team { get; set; }\n\n    public virtual ICollection<PilotRecord> PilotRecords { get; set; } = new List<PilotRecord>();\n}",
      "public partial class PilotRecord\n{\n    public int? RecordId { get; set; }\n\n    public int PilotId { get; set; }\n\n    public int AircraftId { get; set; }\n\n    public string Date { get; set; } = null!;\n\n    public virtual Aircraft Aircraft { get; set; } = null!;\n\n    public virtual Pilot Pilot { get; set; } = null!;\n}"
    ]
  },
  "epinions_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.epinions_1;\n\npublic partial class Epinions1Context : DbContext\n{\n    public Epinions1Context()\n    {\n    }\n\n    public Epinions1Context(DbContextOptions<Epinions1Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Item> Items { get; set; }\n\n    public virtual DbSet<Review> Reviews { get; set; }\n\n    public virtual DbSet<Trust> Trusts { get; set; }\n\n    public virtual DbSet<Useracct> Useraccts { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/epinions_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Item>(entity =>\n        {\n            entity.HasKey(e => e.IId);\n\n            entity.ToTable(\"item\");\n\n            entity.Property(e => e.IId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"i_id\");\n            entity.Property(e => e.Title)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"title\");\n        });\n\n        modelBuilder.Entity<Review>(entity =>\n        {\n            entity.HasKey(e => e.AId);\n\n            entity.ToTable(\"review\");\n\n            entity.HasIndex(e => e.AId, \"idx_review_IDX_RATING_AID\");\n\n            entity.HasIndex(e => e.IId, \"idx_review_IDX_RATING_IID\");\n\n            entity.HasIndex(e => e.UId, \"idx_review_IDX_RATING_UID\");\n\n            entity.Property(e => e.AId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"a_id\");\n            entity.Property(e => e.IId).HasColumnName(\"i_id\");\n            entity.Property(e => e.Rank)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnName(\"rank\");\n            entity.Property(e => e.Rating)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnName(\"rating\");\n            entity.Property(e => e.UId).HasColumnName(\"u_id\");\n\n            entity.HasOne(d => d.IIdNavigation).WithMany(p => p.Reviews)\n                .HasForeignKey(d => d.IId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.UIdNavigation).WithMany(p => p.Reviews)\n                .HasForeignKey(d => d.UId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Trust>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"trust\");\n\n            entity.HasIndex(e => e.SourceUId, \"idx_trust_IDX_TRUST_SID\");\n\n            entity.HasIndex(e => e.TargetUId, \"idx_trust_IDX_TRUST_TID\");\n\n            entity.Property(e => e.SourceUId).HasColumnName(\"source_u_id\");\n            entity.Property(e => e.TargetUId).HasColumnName(\"target_u_id\");\n            entity.Property(e => e.Trust1).HasColumnName(\"trust\");\n\n            entity.HasOne(d => d.SourceU).WithMany()\n                .HasForeignKey(d => d.SourceUId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.TargetU).WithMany()\n                .HasForeignKey(d => d.TargetUId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Useracct>(entity =>\n        {\n            entity.HasKey(e => e.UId);\n\n            entity.ToTable(\"useracct\");\n\n            entity.Property(e => e.UId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"u_id\");\n            entity.Property(e => e.Name)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(128)\")\n                .HasColumnName(\"name\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Item\n{\n    public int IId { get; set; }\n\n    public string? Title { get; set; }\n\n    public virtual ICollection<Review> Reviews { get; set; } = new List<Review>();\n}",
      "public partial class Review\n{\n    public int AId { get; set; }\n\n    public int UId { get; set; }\n\n    public int IId { get; set; }\n\n    public int? Rating { get; set; }\n\n    public int? Rank { get; set; }\n\n    public virtual Item IIdNavigation { get; set; } = null!;\n\n    public virtual Useracct UIdNavigation { get; set; } = null!;\n}",
      "public partial class Trust\n{\n    public int SourceUId { get; set; }\n\n    public int TargetUId { get; set; }\n\n    public int Trust1 { get; set; }\n\n    public virtual Useracct SourceU { get; set; } = null!;\n\n    public virtual Useracct TargetU { get; set; } = null!;\n}",
      "public partial class Useracct\n{\n    public int UId { get; set; }\n\n    public string? Name { get; set; }\n\n    public virtual ICollection<Review> Reviews { get; set; } = new List<Review>();\n}"
    ]
  },
  "county_public_safety": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.county_public_safety;\n\npublic partial class CountyPublicSafetyContext : DbContext\n{\n    public CountyPublicSafetyContext()\n    {\n    }\n\n    public CountyPublicSafetyContext(DbContextOptions<CountyPublicSafetyContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<City> Cities { get; set; }\n\n    public virtual DbSet<CountyPublicSafety> CountyPublicSafeties { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/county_public_safety.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<City>(entity =>\n        {\n            entity.ToTable(\"city\");\n\n            entity.Property(e => e.CityId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"City_ID\");\n            entity.Property(e => e.CountyId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"County_ID\");\n\n            entity.HasOne(d => d.County).WithMany(p => p.Cities).HasForeignKey(d => d.CountyId);\n        });\n\n        modelBuilder.Entity<CountyPublicSafety>(entity =>\n        {\n            entity.HasKey(e => e.CountyId);\n\n            entity.ToTable(\"county_public_safety\");\n\n            entity.Property(e => e.CountyId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"County_ID\");\n            entity.Property(e => e.CaseBurden)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Case_burden\");\n            entity.Property(e => e.CrimeRate).HasColumnName(\"Crime_rate\");\n            entity.Property(e => e.PoliceForce).HasColumnName(\"Police_force\");\n            entity.Property(e => e.PoliceOfficers)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Police_officers\");\n            entity.Property(e => e.Population).HasColumnType(\"INT\");\n            entity.Property(e => e.ResidentsPerOfficer)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Residents_per_officer\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class City\n{\n    public int CityId { get; set; }\n\n    public int? CountyId { get; set; }\n\n    public string? Name { get; set; }\n\n    public double? White { get; set; }\n\n    public double? Black { get; set; }\n\n    public double? Amerindian { get; set; }\n\n    public double? Asian { get; set; }\n\n    public double? Multiracial { get; set; }\n\n    public double? Hispanic { get; set; }\n\n    public virtual CountyPublicSafety? County { get; set; }\n}",
      "public partial class CountyPublicSafety\n{\n    public int CountyId { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? Population { get; set; }\n\n    public int? PoliceOfficers { get; set; }\n\n    public int? ResidentsPerOfficer { get; set; }\n\n    public int? CaseBurden { get; set; }\n\n    public double? CrimeRate { get; set; }\n\n    public string? PoliceForce { get; set; }\n\n    public string? Location { get; set; }\n\n    public virtual ICollection<City> Cities { get; set; } = new List<City>();\n}"
    ]
  },
  "swimming": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.swimming;\n\npublic partial class SwimmingContext : DbContext\n{\n    public SwimmingContext()\n    {\n    }\n\n    public SwimmingContext(DbContextOptions<SwimmingContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Event> Events { get; set; }\n\n    public virtual DbSet<Record> Records { get; set; }\n\n    public virtual DbSet<Stadium> Stadia { get; set; }\n\n    public virtual DbSet<Swimmer> Swimmers { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/swimming.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Event>(entity =>\n        {\n            entity.ToTable(\"event\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"ID\");\n            entity.Property(e => e.StadiumId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Stadium_ID\");\n\n            entity.HasOne(d => d.Stadium).WithMany(p => p.Events).HasForeignKey(d => d.StadiumId);\n        });\n\n        modelBuilder.Entity<Record>(entity =>\n        {\n            entity.HasKey(e => new { e.SwimmerId, e.EventId });\n\n            entity.ToTable(\"record\");\n\n            entity.Property(e => e.SwimmerId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Swimmer_ID\");\n            entity.Property(e => e.EventId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Event_ID\");\n            entity.Property(e => e.Id)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"ID\");\n\n            entity.HasOne(d => d.Event).WithMany(p => p.Records)\n                .HasForeignKey(d => d.EventId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Swimmer).WithMany(p => p.Records)\n                .HasForeignKey(d => d.SwimmerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Stadium>(entity =>\n        {\n            entity.ToTable(\"stadium\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"ID\");\n            entity.Property(e => e.Capacity).HasColumnType(\"INT\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n            entity.Property(e => e.OpeningYear)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Opening_year\");\n        });\n\n        modelBuilder.Entity<Swimmer>(entity =>\n        {\n            entity.ToTable(\"swimmer\");\n\n            entity.Property(e => e.Id)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"ID\");\n            entity.Property(e => e.Meter100).HasColumnName(\"meter_100\");\n            entity.Property(e => e.Meter200).HasColumnName(\"meter_200\");\n            entity.Property(e => e.Meter300).HasColumnName(\"meter_300\");\n            entity.Property(e => e.Meter400).HasColumnName(\"meter_400\");\n            entity.Property(e => e.Meter500).HasColumnName(\"meter_500\");\n            entity.Property(e => e.Meter600).HasColumnName(\"meter_600\");\n            entity.Property(e => e.Meter700).HasColumnName(\"meter_700\");\n            entity.Property(e => e.Name).HasColumnName(\"name\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Event\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? StadiumId { get; set; }\n\n    public string? Year { get; set; }\n\n    public virtual ICollection<Record> Records { get; set; } = new List<Record>();\n\n    public virtual Stadium? Stadium { get; set; }\n}",
      "public partial class Record\n{\n    public int? Id { get; set; }\n\n    public string? Result { get; set; }\n\n    public int SwimmerId { get; set; }\n\n    public int EventId { get; set; }\n\n    public virtual Event Event { get; set; } = null!;\n\n    public virtual Swimmer Swimmer { get; set; } = null!;\n}",
      "public partial class Stadium\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public int? Capacity { get; set; }\n\n    public string? City { get; set; }\n\n    public string? Country { get; set; }\n\n    public int? OpeningYear { get; set; }\n\n    public virtual ICollection<Event> Events { get; set; } = new List<Event>();\n}",
      "public partial class Swimmer\n{\n    public int Id { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Nationality { get; set; }\n\n    public double? Meter100 { get; set; }\n\n    public string? Meter200 { get; set; }\n\n    public string? Meter300 { get; set; }\n\n    public string? Meter400 { get; set; }\n\n    public string? Meter500 { get; set; }\n\n    public string? Meter600 { get; set; }\n\n    public string? Meter700 { get; set; }\n\n    public string? Time { get; set; }\n\n    public virtual ICollection<Record> Records { get; set; } = new List<Record>();\n}"
    ]
  },
  "network_2": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.network_2;\n\npublic partial class Network2Context : DbContext\n{\n    public Network2Context()\n    {\n    }\n\n    public Network2Context(DbContextOptions<Network2Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Person> People { get; set; }\n\n    public virtual DbSet<PersonFriend> PersonFriends { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/network_2.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Person>(entity =>\n        {\n            entity.HasKey(e => e.Name);\n\n            entity.ToTable(\"Person\");\n\n            entity.Property(e => e.Name)\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"name\");\n            entity.Property(e => e.Age).HasColumnName(\"age\");\n            entity.Property(e => e.City).HasColumnName(\"city\");\n            entity.Property(e => e.Gender).HasColumnName(\"gender\");\n            entity.Property(e => e.Job).HasColumnName(\"job\");\n        });\n\n        modelBuilder.Entity<PersonFriend>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"PersonFriend\");\n\n            entity.Property(e => e.Friend)\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"friend\");\n            entity.Property(e => e.Name)\n                .HasColumnType(\"varchar(20)\")\n                .HasColumnName(\"name\");\n            entity.Property(e => e.Year).HasColumnName(\"year\");\n\n            entity.HasOne(d => d.FriendNavigation).WithMany().HasForeignKey(d => d.Friend);\n\n            entity.HasOne(d => d.NameNavigation).WithMany().HasForeignKey(d => d.Name);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Person\n{\n    public string Name { get; set; } = null!;\n\n    public int? Age { get; set; }\n\n    public string? City { get; set; }\n\n    public string? Gender { get; set; }\n\n    public string? Job { get; set; }\n}",
      "public partial class PersonFriend\n{\n    public string? Name { get; set; }\n\n    public string? Friend { get; set; }\n\n    public int? Year { get; set; }\n\n    public virtual Person? FriendNavigation { get; set; }\n\n    public virtual Person? NameNavigation { get; set; }\n}"
    ]
  },
  "e_learning": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.e_learning;\n\npublic partial class ELearningContext : DbContext\n{\n    public ELearningContext()\n    {\n    }\n\n    public ELearningContext(DbContextOptions<ELearningContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Course> Courses { get; set; }\n\n    public virtual DbSet<CourseAuthorsAndTutor> CourseAuthorsAndTutors { get; set; }\n\n    public virtual DbSet<Student> Students { get; set; }\n\n    public virtual DbSet<StudentCourseEnrolment> StudentCourseEnrolments { get; set; }\n\n    public virtual DbSet<StudentTestsTaken> StudentTestsTakens { get; set; }\n\n    public virtual DbSet<Subject> Subjects { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/e_learning.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Course>(entity =>\n        {\n            entity.Property(e => e.CourseId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"course_id\");\n            entity.Property(e => e.AuthorId).HasColumnName(\"author_id\");\n            entity.Property(e => e.CourseDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"course_description\");\n            entity.Property(e => e.CourseName)\n                .HasColumnType(\"VARCHAR(120)\")\n                .HasColumnName(\"course_name\");\n            entity.Property(e => e.SubjectId).HasColumnName(\"subject_id\");\n\n            entity.HasOne(d => d.Author).WithMany(p => p.Courses)\n                .HasForeignKey(d => d.AuthorId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Subject).WithMany(p => p.Courses)\n                .HasForeignKey(d => d.SubjectId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<CourseAuthorsAndTutor>(entity =>\n        {\n            entity.HasKey(e => e.AuthorId);\n\n            entity.ToTable(\"Course_Authors_and_Tutors\");\n\n            entity.Property(e => e.AuthorId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"author_id\");\n            entity.Property(e => e.AddressLine1)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"address_line_1\");\n            entity.Property(e => e.AuthorTutorAtb)\n                .HasColumnType(\"VARCHAR(3)\")\n                .HasColumnName(\"author_tutor_ATB\");\n            entity.Property(e => e.FamilyName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"family_name\");\n            entity.Property(e => e.GenderMf)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"gender_mf\");\n            entity.Property(e => e.LoginName)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"login_name\");\n            entity.Property(e => e.MiddleName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"middle_name\");\n            entity.Property(e => e.Password)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"password\");\n            entity.Property(e => e.PersonalName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"personal_name\");\n        });\n\n        modelBuilder.Entity<Student>(entity =>\n        {\n            entity.Property(e => e.StudentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"student_id\");\n            entity.Property(e => e.DateOfLatestLogon)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_of_latest_logon\");\n            entity.Property(e => e.DateOfRegistration)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_of_registration\");\n            entity.Property(e => e.FamilyName)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"family_name\");\n            entity.Property(e => e.LoginName)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"login_name\");\n            entity.Property(e => e.MiddleName)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"middle_name\");\n            entity.Property(e => e.Password)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"password\");\n            entity.Property(e => e.PersonalName)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"personal_name\");\n        });\n\n        modelBuilder.Entity<StudentCourseEnrolment>(entity =>\n        {\n            entity.HasKey(e => e.RegistrationId);\n\n            entity.ToTable(\"Student_Course_Enrolment\");\n\n            entity.Property(e => e.RegistrationId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"registration_id\");\n            entity.Property(e => e.CourseId).HasColumnName(\"course_id\");\n            entity.Property(e => e.DateOfCompletion)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_of_completion\");\n            entity.Property(e => e.DateOfEnrolment)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_of_enrolment\");\n            entity.Property(e => e.StudentId).HasColumnName(\"student_id\");\n\n            entity.HasOne(d => d.Course).WithMany(p => p.StudentCourseEnrolments)\n                .HasForeignKey(d => d.CourseId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Student).WithMany(p => p.StudentCourseEnrolments)\n                .HasForeignKey(d => d.StudentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<StudentTestsTaken>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Student_Tests_Taken\");\n\n            entity.Property(e => e.DateTestTaken)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_test_taken\");\n            entity.Property(e => e.RegistrationId).HasColumnName(\"registration_id\");\n            entity.Property(e => e.TestResult)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"test_result\");\n\n            entity.HasOne(d => d.Registration).WithMany()\n                .HasForeignKey(d => d.RegistrationId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Subject>(entity =>\n        {\n            entity.Property(e => e.SubjectId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"subject_id\");\n            entity.Property(e => e.SubjectName)\n                .HasColumnType(\"VARCHAR(120)\")\n                .HasColumnName(\"subject_name\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Course\n{\n    public int CourseId { get; set; }\n\n    public int AuthorId { get; set; }\n\n    public int SubjectId { get; set; }\n\n    public string? CourseName { get; set; }\n\n    public string? CourseDescription { get; set; }\n\n    public virtual CourseAuthorsAndTutor Author { get; set; } = null!;\n\n    public virtual ICollection<StudentCourseEnrolment> StudentCourseEnrolments { get; set; } = new List<StudentCourseEnrolment>();\n\n    public virtual Subject Subject { get; set; } = null!;\n}",
      "public partial class CourseAuthorsAndTutor\n{\n    public int AuthorId { get; set; }\n\n    public string? AuthorTutorAtb { get; set; }\n\n    public string? LoginName { get; set; }\n\n    public string? Password { get; set; }\n\n    public string? PersonalName { get; set; }\n\n    public string? MiddleName { get; set; }\n\n    public string? FamilyName { get; set; }\n\n    public string? GenderMf { get; set; }\n\n    public string? AddressLine1 { get; set; }\n\n    public virtual ICollection<Course> Courses { get; set; } = new List<Course>();\n}",
      "public partial class Student\n{\n    public int StudentId { get; set; }\n\n    public DateTime? DateOfRegistration { get; set; }\n\n    public DateTime? DateOfLatestLogon { get; set; }\n\n    public string? LoginName { get; set; }\n\n    public string? Password { get; set; }\n\n    public string? PersonalName { get; set; }\n\n    public string? MiddleName { get; set; }\n\n    public string? FamilyName { get; set; }\n\n    public virtual ICollection<StudentCourseEnrolment> StudentCourseEnrolments { get; set; } = new List<StudentCourseEnrolment>();\n}",
      "public partial class StudentCourseEnrolment\n{\n    public int RegistrationId { get; set; }\n\n    public int StudentId { get; set; }\n\n    public int CourseId { get; set; }\n\n    public DateTime DateOfEnrolment { get; set; }\n\n    public DateTime DateOfCompletion { get; set; }\n\n    public virtual Course Course { get; set; } = null!;\n\n    public virtual Student Student { get; set; } = null!;\n}",
      "public partial class StudentTestsTaken\n{\n    public int RegistrationId { get; set; }\n\n    public DateTime DateTestTaken { get; set; }\n\n    public string? TestResult { get; set; }\n\n    public virtual StudentCourseEnrolment Registration { get; set; } = null!;\n}",
      "public partial class Subject\n{\n    public int SubjectId { get; set; }\n\n    public string? SubjectName { get; set; }\n\n    public virtual ICollection<Course> Courses { get; set; } = new List<Course>();\n}"
    ]
  },
  "products_for_hire": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.products_for_hire;\n\npublic partial class ProductsForHireContext : DbContext\n{\n    public ProductsForHireContext()\n    {\n    }\n\n    public ProductsForHireContext(DbContextOptions<ProductsForHireContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Booking> Bookings { get; set; }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<DiscountCoupon> DiscountCoupons { get; set; }\n\n    public virtual DbSet<Payment> Payments { get; set; }\n\n    public virtual DbSet<ProductsBooked> ProductsBookeds { get; set; }\n\n    public virtual DbSet<ProductsForHire> ProductsForHires { get; set; }\n\n    public virtual DbSet<ViewProductAvailability> ViewProductAvailabilities { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/products_for_hire.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Booking>(entity =>\n        {\n            entity.Property(e => e.BookingId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"booking_id\");\n            entity.Property(e => e.AmountOfDiscount)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"amount_of_discount\");\n            entity.Property(e => e.AmountOfRefund)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"amount_of_refund\");\n            entity.Property(e => e.AmountOutstanding)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"amount_outstanding\");\n            entity.Property(e => e.AmountPayable)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"amount_payable\");\n            entity.Property(e => e.BookingEndDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"booking_end_date\");\n            entity.Property(e => e.BookingStartDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"booking_start_date\");\n            entity.Property(e => e.BookingStatusCode)\n                .HasColumnType(\"VARCHAR(10)\")\n                .HasColumnName(\"booking_status_code\");\n            entity.Property(e => e.CountHired)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"count_hired\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.ReturnedDamagedYn)\n                .HasColumnType(\"VARCHAR(40)\")\n                .HasColumnName(\"returned_damaged_yn\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.Bookings)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.Property(e => e.CustomerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"customer_id\");\n            entity.Property(e => e.CouponId).HasColumnName(\"coupon_id\");\n            entity.Property(e => e.DateBecameCustomer)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_became_customer\");\n            entity.Property(e => e.DateLastHire)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_last_hire\");\n            entity.Property(e => e.FirstName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"first_name\");\n            entity.Property(e => e.GenderMf)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"gender_mf\");\n            entity.Property(e => e.GoodOrBadCustomer)\n                .HasColumnType(\"VARCHAR(4)\")\n                .HasColumnName(\"good_or_bad_customer\");\n            entity.Property(e => e.LastName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"last_name\");\n\n            entity.HasOne(d => d.Coupon).WithMany(p => p.Customers)\n                .HasForeignKey(d => d.CouponId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<DiscountCoupon>(entity =>\n        {\n            entity.HasKey(e => e.CouponId);\n\n            entity.ToTable(\"Discount_Coupons\");\n\n            entity.Property(e => e.CouponId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"coupon_id\");\n            entity.Property(e => e.CouponAmount)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"coupon_amount\");\n            entity.Property(e => e.DateIssued)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_issued\");\n        });\n\n        modelBuilder.Entity<Payment>(entity =>\n        {\n            entity.Property(e => e.PaymentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"payment_id\");\n            entity.Property(e => e.AmountDue)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"amount_due\");\n            entity.Property(e => e.AmountPaid)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"amount_paid\");\n            entity.Property(e => e.AmountPaidInFullYn)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"amount_paid_in_full_yn\");\n            entity.Property(e => e.BookingId).HasColumnName(\"booking_id\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.PaymentDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"payment_date\");\n            entity.Property(e => e.PaymentTypeCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"payment_type_code\");\n\n            entity.HasOne(d => d.Booking).WithMany(p => p.Payments).HasForeignKey(d => d.BookingId);\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.Payments)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ProductsBooked>(entity =>\n        {\n            entity.HasKey(e => new { e.BookingId, e.ProductId });\n\n            entity.ToTable(\"Products_Booked\");\n\n            entity.Property(e => e.BookingId).HasColumnName(\"booking_id\");\n            entity.Property(e => e.ProductId).HasColumnName(\"product_id\");\n            entity.Property(e => e.BookedAmount)\n                .HasColumnType(\"FLOAT\")\n                .HasColumnName(\"booked_amount\");\n            entity.Property(e => e.BookedCount).HasColumnName(\"booked_count\");\n            entity.Property(e => e.ReturnedLateYn)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"returned_late_yn\");\n            entity.Property(e => e.ReturnedYn)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"returned_yn\");\n\n            entity.HasOne(d => d.Booking).WithMany(p => p.ProductsBookeds)\n                .HasForeignKey(d => d.BookingId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Product).WithMany(p => p.ProductsBookeds)\n                .HasForeignKey(d => d.ProductId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<ProductsForHire>(entity =>\n        {\n            entity.HasKey(e => e.ProductId);\n\n            entity.ToTable(\"Products_for_Hire\");\n\n            entity.Property(e => e.ProductId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"product_id\");\n            entity.Property(e => e.DailyHireCost)\n                .HasColumnType(\"DECIMAL(19,4)\")\n                .HasColumnName(\"daily_hire_cost\");\n            entity.Property(e => e.ProductDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"product_description\");\n            entity.Property(e => e.ProductName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"product_name\");\n            entity.Property(e => e.ProductTypeCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"product_type_code\");\n        });\n\n        modelBuilder.Entity<ViewProductAvailability>(entity =>\n        {\n            entity.HasKey(e => e.StatusDate);\n\n            entity.ToTable(\"View_Product_Availability\");\n\n            entity.Property(e => e.StatusDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"status_date\");\n            entity.Property(e => e.AvailableYn)\n                .HasColumnType(\"VARCHAR(1)\")\n                .HasColumnName(\"available_yn\");\n            entity.Property(e => e.BookingId).HasColumnName(\"booking_id\");\n            entity.Property(e => e.ProductId).HasColumnName(\"product_id\");\n\n            entity.HasOne(d => d.Booking).WithMany(p => p.ViewProductAvailabilities)\n                .HasForeignKey(d => d.BookingId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Product).WithMany(p => p.ViewProductAvailabilities)\n                .HasForeignKey(d => d.ProductId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Booking\n{\n    public int BookingId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public string BookingStatusCode { get; set; } = null!;\n\n    public string? ReturnedDamagedYn { get; set; }\n\n    public DateTime? BookingStartDate { get; set; }\n\n    public DateTime? BookingEndDate { get; set; }\n\n    public string? CountHired { get; set; }\n\n    public decimal? AmountPayable { get; set; }\n\n    public decimal? AmountOfDiscount { get; set; }\n\n    public decimal? AmountOutstanding { get; set; }\n\n    public decimal? AmountOfRefund { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n\n    public virtual ICollection<Payment> Payments { get; set; } = new List<Payment>();\n\n    public virtual ICollection<ProductsBooked> ProductsBookeds { get; set; } = new List<ProductsBooked>();\n\n    public virtual ICollection<ViewProductAvailability> ViewProductAvailabilities { get; set; } = new List<ViewProductAvailability>();\n}",
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public int CouponId { get; set; }\n\n    public string? GoodOrBadCustomer { get; set; }\n\n    public string? FirstName { get; set; }\n\n    public string? LastName { get; set; }\n\n    public string? GenderMf { get; set; }\n\n    public DateTime? DateBecameCustomer { get; set; }\n\n    public DateTime? DateLastHire { get; set; }\n\n    public virtual ICollection<Booking> Bookings { get; set; } = new List<Booking>();\n\n    public virtual DiscountCoupon Coupon { get; set; } = null!;\n\n    public virtual ICollection<Payment> Payments { get; set; } = new List<Payment>();\n}",
      "public partial class DiscountCoupon\n{\n    public int CouponId { get; set; }\n\n    public DateTime? DateIssued { get; set; }\n\n    public decimal? CouponAmount { get; set; }\n\n    public virtual ICollection<Customer> Customers { get; set; } = new List<Customer>();\n}",
      "public partial class Payment\n{\n    public int PaymentId { get; set; }\n\n    public int? BookingId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public string PaymentTypeCode { get; set; } = null!;\n\n    public string? AmountPaidInFullYn { get; set; }\n\n    public DateTime? PaymentDate { get; set; }\n\n    public decimal? AmountDue { get; set; }\n\n    public decimal? AmountPaid { get; set; }\n\n    public virtual Booking? Booking { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n}",
      "public partial class ProductsBooked\n{\n    public int BookingId { get; set; }\n\n    public int ProductId { get; set; }\n\n    public string? ReturnedYn { get; set; }\n\n    public string? ReturnedLateYn { get; set; }\n\n    public int? BookedCount { get; set; }\n\n    public double? BookedAmount { get; set; }\n\n    public virtual Booking Booking { get; set; } = null!;\n\n    public virtual ProductsForHire Product { get; set; } = null!;\n}",
      "public partial class ProductsForHire\n{\n    public int ProductId { get; set; }\n\n    public string ProductTypeCode { get; set; } = null!;\n\n    public decimal? DailyHireCost { get; set; }\n\n    public string? ProductName { get; set; }\n\n    public string? ProductDescription { get; set; }\n\n    public virtual ICollection<ProductsBooked> ProductsBookeds { get; set; } = new List<ProductsBooked>();\n\n    public virtual ICollection<ViewProductAvailability> ViewProductAvailabilities { get; set; } = new List<ViewProductAvailability>();\n}",
      "public partial class ViewProductAvailability\n{\n    public int ProductId { get; set; }\n\n    public int BookingId { get; set; }\n\n    public DateTime StatusDate { get; set; }\n\n    public string? AvailableYn { get; set; }\n\n    public virtual Booking Booking { get; set; } = null!;\n\n    public virtual ProductsForHire Product { get; set; } = null!;\n}"
    ]
  },
  "soccer_1": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.soccer_1;\n\npublic partial class Soccer1Context : DbContext\n{\n    public Soccer1Context()\n    {\n    }\n\n    public Soccer1Context(DbContextOptions<Soccer1Context> options)\n        : base(options)\n    {\n    }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/soccer_1.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": []
  },
  "customers_and_addresses": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.customers_and_addresses;\n\npublic partial class CustomersAndAddressesContext : DbContext\n{\n    public CustomersAndAddressesContext()\n    {\n    }\n\n    public CustomersAndAddressesContext(DbContextOptions<CustomersAndAddressesContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Address> Addresses { get; set; }\n\n    public virtual DbSet<Customer> Customers { get; set; }\n\n    public virtual DbSet<CustomerAddress> CustomerAddresses { get; set; }\n\n    public virtual DbSet<CustomerContactChannel> CustomerContactChannels { get; set; }\n\n    public virtual DbSet<CustomerOrder> CustomerOrders { get; set; }\n\n    public virtual DbSet<OrderItem> OrderItems { get; set; }\n\n    public virtual DbSet<Product> Products { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/customers_and_addresses.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Address>(entity =>\n        {\n            entity.Property(e => e.AddressId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"address_id\");\n            entity.Property(e => e.AddressContent)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"address_content\");\n            entity.Property(e => e.City)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"city\");\n            entity.Property(e => e.Country)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"country\");\n            entity.Property(e => e.OtherAddressDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_address_details\");\n            entity.Property(e => e.StateProvinceCounty)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"state_province_county\");\n            entity.Property(e => e.ZipPostcode)\n                .HasColumnType(\"VARCHAR(20)\")\n                .HasColumnName(\"zip_postcode\");\n        });\n\n        modelBuilder.Entity<Customer>(entity =>\n        {\n            entity.Property(e => e.CustomerId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"customer_id\");\n            entity.Property(e => e.CustomerName)\n                .HasColumnType(\"VARCHAR(80)\")\n                .HasColumnName(\"customer_name\");\n            entity.Property(e => e.DateBecameCustomer)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_became_customer\");\n            entity.Property(e => e.OtherCustomerDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"other_customer_details\");\n            entity.Property(e => e.PaymentMethod)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"payment_method\");\n        });\n\n        modelBuilder.Entity<CustomerAddress>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Customer_Addresses\");\n\n            entity.Property(e => e.AddressId).HasColumnName(\"address_id\");\n            entity.Property(e => e.AddressType)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"address_type\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.DateAddressFrom)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_address_from\");\n            entity.Property(e => e.DateAddressTo)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"date_address_to\");\n\n            entity.HasOne(d => d.Address).WithMany()\n                .HasForeignKey(d => d.AddressId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Customer).WithMany()\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<CustomerContactChannel>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Customer_Contact_Channels\");\n\n            entity.Property(e => e.ActiveFromDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"active_from_date\");\n            entity.Property(e => e.ActiveToDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"active_to_date\");\n            entity.Property(e => e.ChannelCode)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"channel_code\");\n            entity.Property(e => e.ContactNumber)\n                .HasColumnType(\"VARCHAR(50)\")\n                .HasColumnName(\"contact_number\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n\n            entity.HasOne(d => d.Customer).WithMany()\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<CustomerOrder>(entity =>\n        {\n            entity.HasKey(e => e.OrderId);\n\n            entity.ToTable(\"Customer_Orders\");\n\n            entity.Property(e => e.OrderId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"order_id\");\n            entity.Property(e => e.CustomerId).HasColumnName(\"customer_id\");\n            entity.Property(e => e.OrderDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"order_date\");\n            entity.Property(e => e.OrderDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"order_details\");\n            entity.Property(e => e.OrderStatus)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"order_status\");\n\n            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerOrders)\n                .HasForeignKey(d => d.CustomerId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<OrderItem>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Order_Items\");\n\n            entity.Property(e => e.OrderId).HasColumnName(\"order_id\");\n            entity.Property(e => e.OrderQuantity)\n                .HasColumnType(\"VARCHAR(15)\")\n                .HasColumnName(\"order_quantity\");\n            entity.Property(e => e.ProductId).HasColumnName(\"product_id\");\n\n            entity.HasOne(d => d.Order).WithMany()\n                .HasForeignKey(d => d.OrderId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Product).WithMany()\n                .HasForeignKey(d => d.ProductId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Product>(entity =>\n        {\n            entity.Property(e => e.ProductId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"product_id\");\n            entity.Property(e => e.ProductDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"product_details\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Address\n{\n    public int AddressId { get; set; }\n\n    public string? AddressContent { get; set; }\n\n    public string? City { get; set; }\n\n    public string? ZipPostcode { get; set; }\n\n    public string? StateProvinceCounty { get; set; }\n\n    public string? Country { get; set; }\n\n    public string? OtherAddressDetails { get; set; }\n}",
      "public partial class Customer\n{\n    public int CustomerId { get; set; }\n\n    public string PaymentMethod { get; set; } = null!;\n\n    public string? CustomerName { get; set; }\n\n    public DateTime? DateBecameCustomer { get; set; }\n\n    public string? OtherCustomerDetails { get; set; }\n\n    public virtual ICollection<CustomerOrder> CustomerOrders { get; set; } = new List<CustomerOrder>();\n}",
      "public partial class CustomerAddress\n{\n    public int CustomerId { get; set; }\n\n    public int AddressId { get; set; }\n\n    public DateTime DateAddressFrom { get; set; }\n\n    public string AddressType { get; set; } = null!;\n\n    public DateTime? DateAddressTo { get; set; }\n\n    public virtual Address Address { get; set; } = null!;\n\n    public virtual Customer Customer { get; set; } = null!;\n}",
      "public partial class CustomerContactChannel\n{\n    public int CustomerId { get; set; }\n\n    public string ChannelCode { get; set; } = null!;\n\n    public DateTime ActiveFromDate { get; set; }\n\n    public DateTime? ActiveToDate { get; set; }\n\n    public string ContactNumber { get; set; } = null!;\n\n    public virtual Customer Customer { get; set; } = null!;\n}",
      "public partial class CustomerOrder\n{\n    public int OrderId { get; set; }\n\n    public int CustomerId { get; set; }\n\n    public string OrderStatus { get; set; } = null!;\n\n    public DateTime? OrderDate { get; set; }\n\n    public string? OrderDetails { get; set; }\n\n    public virtual Customer Customer { get; set; } = null!;\n}",
      "public partial class OrderItem\n{\n    public int OrderId { get; set; }\n\n    public int ProductId { get; set; }\n\n    public string? OrderQuantity { get; set; }\n\n    public virtual CustomerOrder Order { get; set; } = null!;\n\n    public virtual Product Product { get; set; } = null!;\n}",
      "public partial class Product\n{\n    public int ProductId { get; set; }\n\n    public string? ProductDetails { get; set; }\n}"
    ]
  },
  "cre_Doc_Tracking_DB": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.cre_Doc_Tracking_DB;\n\npublic partial class CreDocTrackingDbContext : DbContext\n{\n    public CreDocTrackingDbContext()\n    {\n    }\n\n    public CreDocTrackingDbContext(DbContextOptions<CreDocTrackingDbContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<AllDocument> AllDocuments { get; set; }\n\n    public virtual DbSet<DocumentLocation> DocumentLocations { get; set; }\n\n    public virtual DbSet<DocumentsToBeDestroyed> DocumentsToBeDestroyeds { get; set; }\n\n    public virtual DbSet<Employee> Employees { get; set; }\n\n    public virtual DbSet<RefCalendar> RefCalendars { get; set; }\n\n    public virtual DbSet<RefDocumentType> RefDocumentTypes { get; set; }\n\n    public virtual DbSet<RefLocation> RefLocations { get; set; }\n\n    public virtual DbSet<Role> Roles { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/cre_Doc_Tracking_DB.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<AllDocument>(entity =>\n        {\n            entity.HasKey(e => e.DocumentId);\n\n            entity.ToTable(\"All_Documents\");\n\n            entity.Property(e => e.DocumentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Document_ID\");\n            entity.Property(e => e.DateStored)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"Date_Stored\");\n            entity.Property(e => e.DocumentDescription)\n                .HasColumnType(\"CHAR(255)\")\n                .HasColumnName(\"Document_Description\");\n            entity.Property(e => e.DocumentName)\n                .HasColumnType(\"CHAR(255)\")\n                .HasColumnName(\"Document_Name\");\n            entity.Property(e => e.DocumentTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Document_Type_Code\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Other_Details\");\n\n            entity.HasOne(d => d.DateStoredNavigation).WithMany(p => p.AllDocuments).HasForeignKey(d => d.DateStored);\n\n            entity.HasOne(d => d.DocumentTypeCodeNavigation).WithMany(p => p.AllDocuments)\n                .HasForeignKey(d => d.DocumentTypeCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<DocumentLocation>(entity =>\n        {\n            entity.HasKey(e => new { e.DocumentId, e.LocationCode, e.DateInLocationFrom });\n\n            entity.ToTable(\"Document_Locations\");\n\n            entity.Property(e => e.DocumentId).HasColumnName(\"Document_ID\");\n            entity.Property(e => e.LocationCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Location_Code\");\n            entity.Property(e => e.DateInLocationFrom)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"Date_in_Location_From\");\n            entity.Property(e => e.DateInLocatonTo)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"Date_in_Locaton_To\");\n\n            entity.HasOne(d => d.DateInLocationFromNavigation).WithMany(p => p.DocumentLocationDateInLocationFromNavigations)\n                .HasForeignKey(d => d.DateInLocationFrom)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.DateInLocatonToNavigation).WithMany(p => p.DocumentLocationDateInLocatonToNavigations).HasForeignKey(d => d.DateInLocatonTo);\n\n            entity.HasOne(d => d.Document).WithMany(p => p.DocumentLocations)\n                .HasForeignKey(d => d.DocumentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.LocationCodeNavigation).WithMany(p => p.DocumentLocations)\n                .HasForeignKey(d => d.LocationCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<DocumentsToBeDestroyed>(entity =>\n        {\n            entity.HasKey(e => e.DocumentId);\n\n            entity.ToTable(\"Documents_to_be_Destroyed\");\n\n            entity.Property(e => e.DocumentId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Document_ID\");\n            entity.Property(e => e.ActualDestructionDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"Actual_Destruction_Date\");\n            entity.Property(e => e.DestroyedByEmployeeId).HasColumnName(\"Destroyed_by_Employee_ID\");\n            entity.Property(e => e.DestructionAuthorisedByEmployeeId).HasColumnName(\"Destruction_Authorised_by_Employee_ID\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Other_Details\");\n            entity.Property(e => e.PlannedDestructionDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"Planned_Destruction_Date\");\n\n            entity.HasOne(d => d.ActualDestructionDateNavigation).WithMany(p => p.DocumentsToBeDestroyedActualDestructionDateNavigations).HasForeignKey(d => d.ActualDestructionDate);\n\n            entity.HasOne(d => d.DestroyedByEmployee).WithMany(p => p.DocumentsToBeDestroyedDestroyedByEmployees).HasForeignKey(d => d.DestroyedByEmployeeId);\n\n            entity.HasOne(d => d.DestructionAuthorisedByEmployee).WithMany(p => p.DocumentsToBeDestroyedDestructionAuthorisedByEmployees).HasForeignKey(d => d.DestructionAuthorisedByEmployeeId);\n\n            entity.HasOne(d => d.Document).WithOne(p => p.DocumentsToBeDestroyed)\n                .HasForeignKey<DocumentsToBeDestroyed>(d => d.DocumentId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.PlannedDestructionDateNavigation).WithMany(p => p.DocumentsToBeDestroyedPlannedDestructionDateNavigations).HasForeignKey(d => d.PlannedDestructionDate);\n        });\n\n        modelBuilder.Entity<Employee>(entity =>\n        {\n            entity.Property(e => e.EmployeeId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"Employee_ID\");\n            entity.Property(e => e.DateOfBirth)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"Date_of_Birth\");\n            entity.Property(e => e.EmployeeName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Employee_Name\");\n            entity.Property(e => e.GenderMfu)\n                .HasColumnType(\"CHAR(1)\")\n                .HasColumnName(\"Gender_MFU\");\n            entity.Property(e => e.OtherDetails)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Other_Details\");\n            entity.Property(e => e.RoleCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Role_Code\");\n\n            entity.HasOne(d => d.RoleCodeNavigation).WithMany(p => p.Employees)\n                .HasForeignKey(d => d.RoleCode)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<RefCalendar>(entity =>\n        {\n            entity.HasKey(e => e.CalendarDate);\n\n            entity.ToTable(\"Ref_Calendar\");\n\n            entity.Property(e => e.CalendarDate)\n                .HasColumnType(\"DATETIME\")\n                .HasColumnName(\"Calendar_Date\");\n            entity.Property(e => e.DayNumber).HasColumnName(\"Day_Number\");\n        });\n\n        modelBuilder.Entity<RefDocumentType>(entity =>\n        {\n            entity.HasKey(e => e.DocumentTypeCode);\n\n            entity.ToTable(\"Ref_Document_Types\");\n\n            entity.Property(e => e.DocumentTypeCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Document_Type_Code\");\n            entity.Property(e => e.DocumentTypeDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Document_Type_Description\");\n            entity.Property(e => e.DocumentTypeName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Document_Type_Name\");\n        });\n\n        modelBuilder.Entity<RefLocation>(entity =>\n        {\n            entity.HasKey(e => e.LocationCode);\n\n            entity.ToTable(\"Ref_Locations\");\n\n            entity.Property(e => e.LocationCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Location_Code\");\n            entity.Property(e => e.LocationDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Location_Description\");\n            entity.Property(e => e.LocationName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Location_Name\");\n        });\n\n        modelBuilder.Entity<Role>(entity =>\n        {\n            entity.HasKey(e => e.RoleCode);\n\n            entity.Property(e => e.RoleCode)\n                .HasColumnType(\"CHAR(15)\")\n                .HasColumnName(\"Role_Code\");\n            entity.Property(e => e.RoleDescription)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Role_Description\");\n            entity.Property(e => e.RoleName)\n                .HasColumnType(\"VARCHAR(255)\")\n                .HasColumnName(\"Role_Name\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class AllDocument\n{\n    public int DocumentId { get; set; }\n\n    public DateTime? DateStored { get; set; }\n\n    public string DocumentTypeCode { get; set; } = null!;\n\n    public string? DocumentName { get; set; }\n\n    public string? DocumentDescription { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual RefCalendar? DateStoredNavigation { get; set; }\n\n    public virtual ICollection<DocumentLocation> DocumentLocations { get; set; } = new List<DocumentLocation>();\n\n    public virtual RefDocumentType DocumentTypeCodeNavigation { get; set; } = null!;\n\n    public virtual DocumentsToBeDestroyed? DocumentsToBeDestroyed { get; set; }\n}",
      "public partial class DocumentLocation\n{\n    public int DocumentId { get; set; }\n\n    public string LocationCode { get; set; } = null!;\n\n    public DateTime DateInLocationFrom { get; set; }\n\n    public DateTime? DateInLocatonTo { get; set; }\n\n    public virtual RefCalendar DateInLocationFromNavigation { get; set; } = null!;\n\n    public virtual RefCalendar? DateInLocatonToNavigation { get; set; }\n\n    public virtual AllDocument Document { get; set; } = null!;\n\n    public virtual RefLocation LocationCodeNavigation { get; set; } = null!;\n}",
      "public partial class DocumentsToBeDestroyed\n{\n    public int DocumentId { get; set; }\n\n    public int? DestructionAuthorisedByEmployeeId { get; set; }\n\n    public int? DestroyedByEmployeeId { get; set; }\n\n    public DateTime? PlannedDestructionDate { get; set; }\n\n    public DateTime? ActualDestructionDate { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual RefCalendar? ActualDestructionDateNavigation { get; set; }\n\n    public virtual Employee? DestroyedByEmployee { get; set; }\n\n    public virtual Employee? DestructionAuthorisedByEmployee { get; set; }\n\n    public virtual AllDocument Document { get; set; } = null!;\n\n    public virtual RefCalendar? PlannedDestructionDateNavigation { get; set; }\n}",
      "public partial class Employee\n{\n    public int EmployeeId { get; set; }\n\n    public string RoleCode { get; set; } = null!;\n\n    public string? EmployeeName { get; set; }\n\n    public string GenderMfu { get; set; } = null!;\n\n    public DateTime DateOfBirth { get; set; }\n\n    public string? OtherDetails { get; set; }\n\n    public virtual ICollection<DocumentsToBeDestroyed> DocumentsToBeDestroyedDestroyedByEmployees { get; set; } = new List<DocumentsToBeDestroyed>();\n\n    public virtual ICollection<DocumentsToBeDestroyed> DocumentsToBeDestroyedDestructionAuthorisedByEmployees { get; set; } = new List<DocumentsToBeDestroyed>();\n\n    public virtual Role RoleCodeNavigation { get; set; } = null!;\n}",
      "public partial class RefCalendar\n{\n    public DateTime CalendarDate { get; set; }\n\n    public int? DayNumber { get; set; }\n\n    public virtual ICollection<AllDocument> AllDocuments { get; set; } = new List<AllDocument>();\n\n    public virtual ICollection<DocumentLocation> DocumentLocationDateInLocationFromNavigations { get; set; } = new List<DocumentLocation>();\n\n    public virtual ICollection<DocumentLocation> DocumentLocationDateInLocatonToNavigations { get; set; } = new List<DocumentLocation>();\n\n    public virtual ICollection<DocumentsToBeDestroyed> DocumentsToBeDestroyedActualDestructionDateNavigations { get; set; } = new List<DocumentsToBeDestroyed>();\n\n    public virtual ICollection<DocumentsToBeDestroyed> DocumentsToBeDestroyedPlannedDestructionDateNavigations { get; set; } = new List<DocumentsToBeDestroyed>();\n}",
      "public partial class RefDocumentType\n{\n    public string DocumentTypeCode { get; set; } = null!;\n\n    public string DocumentTypeName { get; set; } = null!;\n\n    public string DocumentTypeDescription { get; set; } = null!;\n\n    public virtual ICollection<AllDocument> AllDocuments { get; set; } = new List<AllDocument>();\n}",
      "public partial class RefLocation\n{\n    public string LocationCode { get; set; } = null!;\n\n    public string LocationName { get; set; } = null!;\n\n    public string LocationDescription { get; set; } = null!;\n\n    public virtual ICollection<DocumentLocation> DocumentLocations { get; set; } = new List<DocumentLocation>();\n}",
      "public partial class Role\n{\n    public string RoleCode { get; set; } = null!;\n\n    public string? RoleName { get; set; }\n\n    public string? RoleDescription { get; set; }\n\n    public virtual ICollection<Employee> Employees { get; set; } = new List<Employee>();\n}"
    ]
  },
  "scholar": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.scholar;\n\npublic partial class ScholarContext : DbContext\n{\n    public ScholarContext()\n    {\n    }\n\n    public ScholarContext(DbContextOptions<ScholarContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Author> Authors { get; set; }\n\n    public virtual DbSet<Dataset> Datasets { get; set; }\n\n    public virtual DbSet<Journal> Journals { get; set; }\n\n    public virtual DbSet<Keyphrase> Keyphrases { get; set; }\n\n    public virtual DbSet<Paper> Papers { get; set; }\n\n    public virtual DbSet<PaperDataset> PaperDatasets { get; set; }\n\n    public virtual DbSet<Venue> Venues { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/scholar.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Author>(entity =>\n        {\n            entity.ToTable(\"author\");\n\n            entity.Property(e => e.AuthorId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"authorId\");\n            entity.Property(e => e.AuthorName)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(50)\")\n                .HasColumnName(\"authorName\");\n        });\n\n        modelBuilder.Entity<Dataset>(entity =>\n        {\n            entity.ToTable(\"dataset\");\n\n            entity.Property(e => e.DatasetId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"datasetId\");\n            entity.Property(e => e.DatasetName)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(50)\")\n                .HasColumnName(\"datasetName\");\n        });\n\n        modelBuilder.Entity<Journal>(entity =>\n        {\n            entity.ToTable(\"journal\");\n\n            entity.Property(e => e.JournalId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"journalId\");\n            entity.Property(e => e.JournalName)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(100)\")\n                .HasColumnName(\"journalName\");\n        });\n\n        modelBuilder.Entity<Keyphrase>(entity =>\n        {\n            entity.ToTable(\"keyphrase\");\n\n            entity.Property(e => e.KeyphraseId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"keyphraseId\");\n            entity.Property(e => e.KeyphraseName)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(50)\")\n                .HasColumnName(\"keyphraseName\");\n\n            entity.HasMany(d => d.Papers).WithMany(p => p.Keyphrases)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"PaperKeyphrase\",\n                    r => r.HasOne<Paper>().WithMany()\n                        .HasForeignKey(\"PaperId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Keyphrase>().WithMany()\n                        .HasForeignKey(\"KeyphraseId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"KeyphraseId\", \"PaperId\");\n                        j.ToTable(\"paperKeyphrase\");\n                        j.IndexerProperty<int>(\"KeyphraseId\")\n                            .HasDefaultValueSql(\"NULL\")\n                            .HasColumnName(\"keyphraseId\");\n                        j.IndexerProperty<int>(\"PaperId\")\n                            .HasDefaultValueSql(\"NULL\")\n                            .HasColumnName(\"paperId\");\n                    });\n        });\n\n        modelBuilder.Entity<Paper>(entity =>\n        {\n            entity.ToTable(\"paper\");\n\n            entity.Property(e => e.PaperId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"paperId\");\n            entity.Property(e => e.JournalId)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnName(\"journalId\");\n            entity.Property(e => e.NumCitedBy)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnName(\"numCitedBy\");\n            entity.Property(e => e.NumCiting)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnName(\"numCiting\");\n            entity.Property(e => e.Title)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(300)\")\n                .HasColumnName(\"title\");\n            entity.Property(e => e.VenueId)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnName(\"venueId\");\n            entity.Property(e => e.Year)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnName(\"year\");\n\n            entity.HasOne(d => d.Journal).WithMany(p => p.Papers).HasForeignKey(d => d.JournalId);\n\n            entity.HasOne(d => d.Venue).WithMany(p => p.Papers).HasForeignKey(d => d.VenueId);\n\n            entity.HasMany(d => d.Authors).WithMany(p => p.Papers)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"Write\",\n                    r => r.HasOne<Author>().WithMany()\n                        .HasForeignKey(\"AuthorId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Paper>().WithMany()\n                        .HasForeignKey(\"PaperId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"PaperId\", \"AuthorId\");\n                        j.ToTable(\"writes\");\n                        j.IndexerProperty<int>(\"PaperId\")\n                            .HasDefaultValueSql(\"NULL\")\n                            .HasColumnName(\"paperId\");\n                        j.IndexerProperty<int>(\"AuthorId\")\n                            .HasDefaultValueSql(\"NULL\")\n                            .HasColumnName(\"authorId\");\n                    });\n\n            entity.HasMany(d => d.CitedPapers).WithMany(p => p.CitingPapers)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"Cite\",\n                    r => r.HasOne<Paper>().WithMany()\n                        .HasForeignKey(\"CitedPaperId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Paper>().WithMany()\n                        .HasForeignKey(\"CitingPaperId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"CitingPaperId\", \"CitedPaperId\");\n                        j.ToTable(\"cite\");\n                        j.IndexerProperty<int>(\"CitingPaperId\").HasColumnName(\"citingPaperId\");\n                        j.IndexerProperty<int>(\"CitedPaperId\").HasColumnName(\"citedPaperId\");\n                    });\n\n            entity.HasMany(d => d.CitingPapers).WithMany(p => p.CitedPapers)\n                .UsingEntity<Dictionary<string, object>>(\n                    \"Cite\",\n                    r => r.HasOne<Paper>().WithMany()\n                        .HasForeignKey(\"CitingPaperId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    l => l.HasOne<Paper>().WithMany()\n                        .HasForeignKey(\"CitedPaperId\")\n                        .OnDelete(DeleteBehavior.ClientSetNull),\n                    j =>\n                    {\n                        j.HasKey(\"CitingPaperId\", \"CitedPaperId\");\n                        j.ToTable(\"cite\");\n                        j.IndexerProperty<int>(\"CitingPaperId\").HasColumnName(\"citingPaperId\");\n                        j.IndexerProperty<int>(\"CitedPaperId\").HasColumnName(\"citedPaperId\");\n                    });\n        });\n\n        modelBuilder.Entity<PaperDataset>(entity =>\n        {\n            entity.HasKey(e => new { e.DatasetId, e.PaperId });\n\n            entity.ToTable(\"paperDataset\");\n\n            entity.Property(e => e.DatasetId)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnName(\"datasetId\");\n            entity.Property(e => e.PaperId)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnName(\"paperId\");\n        });\n\n        modelBuilder.Entity<Venue>(entity =>\n        {\n            entity.ToTable(\"venue\");\n\n            entity.Property(e => e.VenueId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"venueId\");\n            entity.Property(e => e.VenueName)\n                .HasDefaultValueSql(\"NULL\")\n                .HasColumnType(\"varchar(100)\")\n                .HasColumnName(\"venueName\");\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Author\n{\n    public int AuthorId { get; set; }\n\n    public string? AuthorName { get; set; }\n\n    public virtual ICollection<Paper> Papers { get; set; } = new List<Paper>();\n}",
      "public partial class Dataset\n{\n    public int DatasetId { get; set; }\n\n    public string? DatasetName { get; set; }\n}",
      "public partial class Journal\n{\n    public int JournalId { get; set; }\n\n    public string? JournalName { get; set; }\n\n    public virtual ICollection<Paper> Papers { get; set; } = new List<Paper>();\n}",
      "public partial class Keyphrase\n{\n    public int KeyphraseId { get; set; }\n\n    public string? KeyphraseName { get; set; }\n\n    public virtual ICollection<Paper> Papers { get; set; } = new List<Paper>();\n}",
      "public partial class Paper\n{\n    public int PaperId { get; set; }\n\n    public string? Title { get; set; }\n\n    public int? VenueId { get; set; }\n\n    public int? Year { get; set; }\n\n    public int? NumCiting { get; set; }\n\n    public int? NumCitedBy { get; set; }\n\n    public int? JournalId { get; set; }\n\n    public virtual Journal? Journal { get; set; }\n\n    public virtual Venue? Venue { get; set; }\n\n    public virtual ICollection<Author> Authors { get; set; } = new List<Author>();\n\n    public virtual ICollection<Paper> CitedPapers { get; set; } = new List<Paper>();\n\n    public virtual ICollection<Paper> CitingPapers { get; set; } = new List<Paper>();\n\n    public virtual ICollection<Keyphrase> Keyphrases { get; set; } = new List<Keyphrase>();\n}",
      "public partial class PaperDataset\n{\n    public int PaperId { get; set; }\n\n    public int DatasetId { get; set; }\n}",
      "public partial class Venue\n{\n    public int VenueId { get; set; }\n\n    public string? VenueName { get; set; }\n\n    public virtual ICollection<Paper> Papers { get; set; } = new List<Paper>();\n}"
    ]
  },
  "party_host": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.party_host;\n\npublic partial class PartyHostContext : DbContext\n{\n    public PartyHostContext()\n    {\n    }\n\n    public PartyHostContext(DbContextOptions<PartyHostContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Host> Hosts { get; set; }\n\n    public virtual DbSet<Party> Parties { get; set; }\n\n    public virtual DbSet<PartyHost> PartyHosts { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/party_host.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Host>(entity =>\n        {\n            entity.ToTable(\"host\");\n\n            entity.Property(e => e.HostId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Host_ID\");\n        });\n\n        modelBuilder.Entity<Party>(entity =>\n        {\n            entity.ToTable(\"party\");\n\n            entity.Property(e => e.PartyId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Party_ID\");\n            entity.Property(e => e.FirstYear).HasColumnName(\"First_year\");\n            entity.Property(e => e.LastYear).HasColumnName(\"Last_year\");\n            entity.Property(e => e.NumberOfHosts)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Number_of_hosts\");\n            entity.Property(e => e.PartyTheme).HasColumnName(\"Party_Theme\");\n        });\n\n        modelBuilder.Entity<PartyHost>(entity =>\n        {\n            entity.HasKey(e => new { e.PartyId, e.HostId });\n\n            entity.ToTable(\"party_host\");\n\n            entity.Property(e => e.PartyId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Party_ID\");\n            entity.Property(e => e.HostId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Host_ID\");\n            entity.Property(e => e.IsMainInCharge)\n                .HasColumnType(\"bool\")\n                .HasColumnName(\"Is_Main_in_Charge\");\n\n            entity.HasOne(d => d.Host).WithMany(p => p.PartyHosts)\n                .HasForeignKey(d => d.HostId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Party).WithMany(p => p.PartyHosts)\n                .HasForeignKey(d => d.PartyId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Host\n{\n    public int HostId { get; set; }\n\n    public string? Name { get; set; }\n\n    public string? Nationality { get; set; }\n\n    public string? Age { get; set; }\n\n    public virtual ICollection<PartyHost> PartyHosts { get; set; } = new List<PartyHost>();\n}",
      "public partial class Party\n{\n    public int PartyId { get; set; }\n\n    public string? PartyTheme { get; set; }\n\n    public string? Location { get; set; }\n\n    public string? FirstYear { get; set; }\n\n    public string? LastYear { get; set; }\n\n    public int? NumberOfHosts { get; set; }\n\n    public virtual ICollection<PartyHost> PartyHosts { get; set; } = new List<PartyHost>();\n}",
      "public partial class PartyHost\n{\n    public int PartyId { get; set; }\n\n    public int HostId { get; set; }\n\n    public string? IsMainInCharge { get; set; }\n\n    public virtual Host Host { get; set; } = null!;\n\n    public virtual Party Party { get; set; } = null!;\n}"
    ]
  },
  "voter_2": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.voter_2;\n\npublic partial class Voter2Context : DbContext\n{\n    public Voter2Context()\n    {\n    }\n\n    public Voter2Context(DbContextOptions<Voter2Context> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<Student> Students { get; set; }\n\n    public virtual DbSet<VotingRecord> VotingRecords { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/voter_2.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Student>(entity =>\n        {\n            entity.HasKey(e => e.StuId);\n\n            entity.ToTable(\"Student\");\n\n            entity.Property(e => e.StuId)\n                .ValueGeneratedNever()\n                .HasColumnName(\"StuID\");\n            entity.Property(e => e.CityCode)\n                .HasColumnType(\"VARCHAR(3)\")\n                .HasColumnName(\"city_code\");\n            entity.Property(e => e.Fname).HasColumnType(\"VARCHAR(12)\");\n            entity.Property(e => e.Lname)\n                .HasColumnType(\"VARCHAR(12)\")\n                .HasColumnName(\"LName\");\n            entity.Property(e => e.Sex).HasColumnType(\"VARCHAR(1)\");\n        });\n\n        modelBuilder.Entity<VotingRecord>(entity =>\n        {\n            entity\n                .HasNoKey()\n                .ToTable(\"Voting_record\");\n\n            entity.Property(e => e.ClassPresidentVote).HasColumnName(\"Class_President_Vote\");\n            entity.Property(e => e.ClassSenatorVote).HasColumnName(\"Class_Senator_Vote\");\n            entity.Property(e => e.ElectionCycle)\n                .HasColumnType(\"VARCHAR(12)\")\n                .HasColumnName(\"Election_Cycle\");\n            entity.Property(e => e.PresidentVote).HasColumnName(\"President_Vote\");\n            entity.Property(e => e.RegistrationDate)\n                .HasColumnType(\"VARCHAR(12)\")\n                .HasColumnName(\"Registration_Date\");\n            entity.Property(e => e.SecretaryVote).HasColumnName(\"Secretary_Vote\");\n            entity.Property(e => e.StuId).HasColumnName(\"StuID\");\n            entity.Property(e => e.TreasurerVote).HasColumnName(\"Treasurer_Vote\");\n            entity.Property(e => e.VicePresidentVote).HasColumnName(\"Vice_President_Vote\");\n\n            entity.HasOne(d => d.ClassPresidentVoteNavigation).WithMany().HasForeignKey(d => d.ClassPresidentVote);\n\n            entity.HasOne(d => d.ClassSenatorVoteNavigation).WithMany().HasForeignKey(d => d.ClassSenatorVote);\n\n            entity.HasOne(d => d.PresidentVoteNavigation).WithMany().HasForeignKey(d => d.PresidentVote);\n\n            entity.HasOne(d => d.SecretaryVoteNavigation).WithMany().HasForeignKey(d => d.SecretaryVote);\n\n            entity.HasOne(d => d.Stu).WithMany().HasForeignKey(d => d.StuId);\n\n            entity.HasOne(d => d.TreasurerVoteNavigation).WithMany().HasForeignKey(d => d.TreasurerVote);\n\n            entity.HasOne(d => d.VicePresidentVoteNavigation).WithMany().HasForeignKey(d => d.VicePresidentVote);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class Student\n{\n    public int StuId { get; set; }\n\n    public string? Lname { get; set; }\n\n    public string? Fname { get; set; }\n\n    public int? Age { get; set; }\n\n    public string? Sex { get; set; }\n\n    public int? Major { get; set; }\n\n    public int? Advisor { get; set; }\n\n    public string? CityCode { get; set; }\n}",
      "public partial class VotingRecord\n{\n    public int? StuId { get; set; }\n\n    public string? RegistrationDate { get; set; }\n\n    public string? ElectionCycle { get; set; }\n\n    public int? PresidentVote { get; set; }\n\n    public int? VicePresidentVote { get; set; }\n\n    public int? SecretaryVote { get; set; }\n\n    public int? TreasurerVote { get; set; }\n\n    public int? ClassPresidentVote { get; set; }\n\n    public int? ClassSenatorVote { get; set; }\n\n    public virtual Student? ClassPresidentVoteNavigation { get; set; }\n\n    public virtual Student? ClassSenatorVoteNavigation { get; set; }\n\n    public virtual Student? PresidentVoteNavigation { get; set; }\n\n    public virtual Student? SecretaryVoteNavigation { get; set; }\n\n    public virtual Student? Stu { get; set; }\n\n    public virtual Student? TreasurerVoteNavigation { get; set; }\n\n    public virtual Student? VicePresidentVoteNavigation { get; set; }\n}"
    ]
  },
  "farm": {
    "context": "using System;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace entity_framework.Models.farm;\n\npublic partial class FarmContext : DbContext\n{\n    public FarmContext()\n    {\n    }\n\n    public FarmContext(DbContextOptions<FarmContext> options)\n        : base(options)\n    {\n    }\n\n    public virtual DbSet<City> Cities { get; set; }\n\n    public virtual DbSet<CompetitionRecord> CompetitionRecords { get; set; }\n\n    public virtual DbSet<Farm> Farms { get; set; }\n\n    public virtual DbSet<FarmCompetition> FarmCompetitions { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=../databases/farm.db\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<City>(entity =>\n        {\n            entity.ToTable(\"city\");\n\n            entity.Property(e => e.CityId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"City_ID\");\n            entity.Property(e => e.AreaKm2).HasColumnName(\"Area_km_2\");\n            entity.Property(e => e.CensusRanking).HasColumnName(\"Census_Ranking\");\n            entity.Property(e => e.OfficialName).HasColumnName(\"Official_Name\");\n        });\n\n        modelBuilder.Entity<CompetitionRecord>(entity =>\n        {\n            entity.HasKey(e => new { e.CompetitionId, e.FarmId });\n\n            entity.ToTable(\"competition_record\");\n\n            entity.Property(e => e.CompetitionId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Competition_ID\");\n            entity.Property(e => e.FarmId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Farm_ID\");\n            entity.Property(e => e.Rank).HasColumnType(\"INT\");\n\n            entity.HasOne(d => d.Competition).WithMany(p => p.CompetitionRecords)\n                .HasForeignKey(d => d.CompetitionId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n\n            entity.HasOne(d => d.Farm).WithMany(p => p.CompetitionRecords)\n                .HasForeignKey(d => d.FarmId)\n                .OnDelete(DeleteBehavior.ClientSetNull);\n        });\n\n        modelBuilder.Entity<Farm>(entity =>\n        {\n            entity.ToTable(\"farm\");\n\n            entity.Property(e => e.FarmId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Farm_ID\");\n            entity.Property(e => e.SheepAndGoats).HasColumnName(\"Sheep_and_Goats\");\n            entity.Property(e => e.TotalCattle).HasColumnName(\"Total_Cattle\");\n            entity.Property(e => e.TotalHorses).HasColumnName(\"Total_Horses\");\n            entity.Property(e => e.WorkingHorses).HasColumnName(\"Working_Horses\");\n            entity.Property(e => e.Year).HasColumnType(\"INT\");\n        });\n\n        modelBuilder.Entity<FarmCompetition>(entity =>\n        {\n            entity.HasKey(e => e.CompetitionId);\n\n            entity.ToTable(\"farm_competition\");\n\n            entity.Property(e => e.CompetitionId)\n                .ValueGeneratedNever()\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Competition_ID\");\n            entity.Property(e => e.HostCityId)\n                .HasColumnType(\"INT\")\n                .HasColumnName(\"Host_city_ID\");\n            entity.Property(e => e.Year).HasColumnType(\"INT\");\n\n            entity.HasOne(d => d.HostCity).WithMany(p => p.FarmCompetitions).HasForeignKey(d => d.HostCityId);\n        });\n\n        OnModelCreatingPartial(modelBuilder);\n    }\n\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n}\n",
    "models": [
      "public partial class City\n{\n    public int CityId { get; set; }\n\n    public string? OfficialName { get; set; }\n\n    public string? Status { get; set; }\n\n    public double? AreaKm2 { get; set; }\n\n    public double? Population { get; set; }\n\n    public string? CensusRanking { get; set; }\n\n    public virtual ICollection<FarmCompetition> FarmCompetitions { get; set; } = new List<FarmCompetition>();\n}",
      "public partial class CompetitionRecord\n{\n    public int CompetitionId { get; set; }\n\n    public int FarmId { get; set; }\n\n    public int? Rank { get; set; }\n\n    public virtual FarmCompetition Competition { get; set; } = null!;\n\n    public virtual Farm Farm { get; set; } = null!;\n}",
      "public partial class Farm\n{\n    public int FarmId { get; set; }\n\n    public int? Year { get; set; }\n\n    public double? TotalHorses { get; set; }\n\n    public double? WorkingHorses { get; set; }\n\n    public double? TotalCattle { get; set; }\n\n    public double? Oxen { get; set; }\n\n    public double? Bulls { get; set; }\n\n    public double? Cows { get; set; }\n\n    public double? Pigs { get; set; }\n\n    public double? SheepAndGoats { get; set; }\n\n    public virtual ICollection<CompetitionRecord> CompetitionRecords { get; set; } = new List<CompetitionRecord>();\n}",
      "public partial class FarmCompetition\n{\n    public int CompetitionId { get; set; }\n\n    public int? Year { get; set; }\n\n    public string? Theme { get; set; }\n\n    public int? HostCityId { get; set; }\n\n    public string? Hosts { get; set; }\n\n    public virtual ICollection<CompetitionRecord> CompetitionRecords { get; set; } = new List<CompetitionRecord>();\n\n    public virtual City? HostCity { get; set; }\n}"
    ]
  }
}