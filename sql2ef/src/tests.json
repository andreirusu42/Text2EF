[{"query":"SELECT count(*) FROM browser WHERE market_share >= 5","result":"context.Browsers.Where(row => row.MarketShare >= 5).Count();","db_name":"browser_web"},{"query":"SELECT name FROM browser ORDER BY market_share DESC","result":"context.Browsers.OrderByDescending(row => row.MarketShare).Select(row => new { row.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT id , name , market_share FROM browser","result":"context.Browsers.Select(row => new { row.Id, row.Name, row.MarketShare }).ToList();","db_name":"browser_web"},{"query":"SELECT max(market_share) , min(market_share) , avg(market_share) FROM browser","result":"context.Browsers.GroupBy(row => 1).Select(group => new { MaxMarketShare = group.Select(row => row.MarketShare).Max(), MinMarketShare = group.Select(row => row.MarketShare).Min(), AverageMarketShare = group.Select(row => row.MarketShare).Average() }).ToList();","db_name":"browser_web"},{"query":"SELECT id , market_share FROM browser WHERE name = 'Safari'","result":"context.Browsers.Where(row => row.Name == \"Safari\").Select(row => new { row.Id, row.MarketShare }).ToList();","db_name":"browser_web"},{"query":"SELECT name , operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'","result":"context.WebClientAccelerators.Where(row => row.Connection != \"Broadband\").Select(row => new { row.Name, row.OperatingSystem }).ToList();","db_name":"browser_web"},{"query":"SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998","result":"context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T2.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"CProxy\" && row.T2.CompatibleSinceYear > 1998).Select(row => new { row.T1.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count(*) >= 2","result":"context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT T1.id , T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1","result":"context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name }).Take(1).ToList();","db_name":"browser_web"},{"query":"SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'","result":"context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"CACHEbox\" && row.T2.Name == \"Internet Explorer\").Select(row => new { row.T1.CompatibleSinceYear }).ToList();","db_name":"browser_web"},{"query":"SELECT count(DISTINCT client) FROM web_client_accelerator","result":"context.WebClientAccelerators.Select(row => row.Client).Distinct().Count();","db_name":"browser_web"},{"query":"SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );","result":"context.WebClientAccelerators.Where(row => !context.AcceleratorCompatibleBrowsers.Select(row => row.AcceleratorId).Contains(row.Id)).Count();","db_name":"browser_web"},{"query":"SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15;","result":"context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.MarketShare > 15).Select(row => new { row.T1.Name }).Distinct().ToList();","db_name":"browser_web"},{"query":"SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'","result":"context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"CACHEbox\").Select(row => row.T3.Name).Intersect(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Fasterfox\").Select(row => row.T3.Name)).ToList();","db_name":"browser_web"},{"query":"SELECT name , operating_system FROM web_client_accelerator EXCEPT SELECT T1.name , T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'","result":"context.WebClientAccelerators.Select(row => new { row.Name, row.OperatingSystem }).Except(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Opera\").Select(row => new { row.T1.Name, row.T1.OperatingSystem })).ToList();","db_name":"browser_web"},{"query":"SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"","result":"context.WebClientAccelerators.Where(row => EF.Functions.Like(row.Name, \"%Opera%\")).Select(row => new { row.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system","result":"context.WebClientAccelerators.GroupBy(row => new { row.OperatingSystem }).Select(group => new { group.Key.OperatingSystem, Count = group.Count() }).ToList();","db_name":"browser_web"},{"query":"SELECT T2.name , T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id ORDER BY T1.compatible_since_year DESC","result":"context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T1.CompatibleSinceYear).Select(row => new { T2Name = row.T2.Name, T3Name = row.T3.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT count(*) FROM actor","result":"context.Actors.Count();","db_name":"musical"},{"query":"SELECT Name FROM actor ORDER BY Name ASC","result":"context.Actors.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();","db_name":"musical"},{"query":"SELECT Character , Duration FROM actor","result":"context.Actors.Select(row => new { row.Character, row.Duration }).ToList();","db_name":"musical"},{"query":"SELECT Name FROM actor WHERE Age != 20","result":"context.Actors.Where(row => row.Age != 20).Select(row => new { row.Name }).ToList();","db_name":"musical"},{"query":"SELECT Character FROM actor ORDER BY age DESC","result":"context.Actors.OrderByDescending(row => row.Age).Select(row => new { row.Character }).ToList();","db_name":"musical"},{"query":"SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1","result":"context.Actors.OrderByDescending(row => row.Age).Select(row => new { row.Duration }).Take(1).ToList();","db_name":"musical"},{"query":"SELECT Name FROM musical WHERE Nominee = \"Bob Fosse\"","result":"context.Musicals.Where(row => row.Nominee == \"Bob Fosse\").Select(row => new { row.Name }).ToList();","db_name":"musical"},{"query":"SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"","result":"context.Musicals.Where(row => row.Award != \"Tony Award\").Select(row => new { row.Nominee }).Distinct().ToList();","db_name":"musical"},{"query":"SELECT T1.Name , T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID","result":"context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).Select(row => new { T1Name = row.T1.Name, T2Name = row.T2.Name }).ToList();","db_name":"musical"},{"query":"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = \"The Phantom of the Opera\"","result":"context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"The Phantom of the Opera\").Select(row => new { row.T1.Name }).ToList();","db_name":"musical"},{"query":"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC","result":"context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Year).Select(row => new { row.T1.Name }).ToList();","db_name":"musical"},{"query":"SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID","result":"context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MusicalId }).Select(group => new { group.First().T2.Name, Count = group.Count() }).ToList();","db_name":"musical"},{"query":"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3","result":"context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MusicalId }).Where(group => group.Count() >= 3).Select(group => new { group.First().T2.Name }).ToList();","db_name":"musical"},{"query":"SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee","result":"context.Musicals.GroupBy(row => new { row.Nominee }).Select(group => new { group.Key.Nominee, Count = group.Count() }).ToList();","db_name":"musical"},{"query":"SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1","result":"context.Musicals.GroupBy(row => new { row.Nominee }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Nominee }).Take(1).ToList();","db_name":"musical"},{"query":"SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1","result":"context.Musicals.GroupBy(row => new { row.Result }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Result }).Take(1).ToList();","db_name":"musical"},{"query":"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2","result":"context.Musicals.GroupBy(row => new { row.Nominee }).Where(group => group.Count() > 2).Select(group => new { group.Key.Nominee }).ToList();","db_name":"musical"},{"query":"SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)","result":"context.Musicals.Where(row => !context.Actors.Select(row => row.MusicalId).Contains(row.MusicalId)).Select(row => new { row.Name }).ToList();","db_name":"musical"},{"query":"SELECT Nominee FROM musical WHERE Award = \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award = \"Drama Desk Award\"","result":"context.Musicals.Where(row => row.Award == \"Tony Award\").Select(row => row.Nominee).Intersect(context.Musicals.Where(row => row.Award == \"Drama Desk Award\").Select(row => row.Nominee)).ToList();","db_name":"musical"},{"query":"SELECT Nominee FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\"","result":"context.Musicals.Where(row => row.Award == \"Tony Award\" || row.Award == \"Cleavant Derricks\").Select(row => new { row.Nominee }).ToList();","db_name":"musical"},{"query":"SELECT count(*) FROM farm","result":"context.Farms.Count();","db_name":"farm"},{"query":"SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC","result":"context.Farms.OrderBy(row => row.TotalHorses).Select(row => new { row.TotalHorses }).ToList();","db_name":"farm"},{"query":"SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens'","result":"context.FarmCompetitions.Where(row => row.Theme != \"Aliens\").Select(row => new { row.Hosts }).ToList();","db_name":"farm"},{"query":"SELECT Theme FROM farm_competition ORDER BY YEAR ASC","result":"context.FarmCompetitions.OrderBy(row => row.Year).Select(row => new { row.Theme }).ToList();","db_name":"farm"},{"query":"SELECT avg(Working_Horses) FROM farm WHERE Total_Horses > 5000","result":"context.Farms.Where(row => row.TotalHorses > 5000).Select(row => (double) row.WorkingHorses).Average();","db_name":"farm"},{"query":"SELECT max(Cows) , min(Cows) FROM farm","result":"context.Farms.GroupBy(row => 1).Select(group => new { MaxCows = group.Select(row => row.Cows).Max(), MinCows = group.Select(row => row.Cows).Min() }).ToList();","db_name":"farm"},{"query":"SELECT count(DISTINCT Status) FROM city","result":"context.Cities.Select(row => row.Status).Distinct().Count();","db_name":"farm"},{"query":"SELECT Official_Name FROM city ORDER BY Population DESC","result":"context.Cities.OrderByDescending(row => row.Population).Select(row => new { row.OfficialName }).ToList();","db_name":"farm"},{"query":"SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1","result":"context.Cities.OrderByDescending(row => row.Population).Select(row => new { row.OfficialName, row.Status }).Take(1).ToList();","db_name":"farm"},{"query":"SELECT T2.Year , T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID","result":"context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Year, row.T1.OfficialName }).ToList();","db_name":"farm"},{"query":"SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1","result":"context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.HostCityId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.OfficialName }).ToList();","db_name":"farm"},{"query":"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1","result":"context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.HostCityId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Status }).Take(1).ToList();","db_name":"farm"},{"query":"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000","result":"context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Population > 1000).Select(row => new { row.T2.Theme }).ToList();","db_name":"farm"},{"query":"SELECT Status , avg(Population) FROM city GROUP BY Status","result":"context.Cities.GroupBy(row => new { row.Status }).Select(group => new { group.Key.Status, AveragePopulation = group.Select(row => row.Population).Average() }).ToList();","db_name":"farm"},{"query":"SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC","result":"context.Cities.GroupBy(row => new { row.Status }).OrderBy(group => group.Count()).Select(group => new { group.Key.Status }).ToList();","db_name":"farm"},{"query":"SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1","result":"context.Cities.GroupBy(row => new { row.Status }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Status }).Take(1).ToList();","db_name":"farm"},{"query":"SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)","result":"context.Cities.Where(row => !context.FarmCompetitions.Select(row => row.HostCityId).Contains(row.CityId)).Select(row => new { row.OfficialName }).ToList();","db_name":"farm"},{"query":"SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500","result":"context.Cities.Where(row => row.Population > 1500).Select(row => row.Status).Intersect(context.Cities.Where(row => row.Population < 500).Select(row => row.Status)).ToList();","db_name":"farm"},{"query":"SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500","result":"context.Cities.Where(row => row.Population > 1500 || row.Population < 500).Select(row => new { row.OfficialName }).ToList();","db_name":"farm"},{"query":"SELECT Census_Ranking FROM city WHERE Status != \"Village\"","result":"context.Cities.Where(row => row.Status != \"Village\").Select(row => new { row.CensusRanking }).ToList();","db_name":"farm"},{"query":"SELECT count(*) FROM game WHERE season > 2007","result":"context.Games.Where(row => row.Season > 2007).Count();","db_name":"game_injury"},{"query":"SELECT Date FROM game ORDER BY home_team DESC","result":"context.Games.OrderByDescending(row => row.HomeTeam).Select(row => new { row.Date }).ToList();","db_name":"game_injury"},{"query":"SELECT season , home_team , away_team FROM game","result":"context.Games.Select(row => new { row.Season, row.HomeTeam, row.AwayTeam }).ToList();","db_name":"game_injury"},{"query":"SELECT max(home_games) , min(home_games) , avg(home_games) FROM stadium","result":"context.Stadia.GroupBy(row => 1).Select(group => new { MaxHomeGames = group.Select(row => row.HomeGames).Max(), MinHomeGames = group.Select(row => row.HomeGames).Min(), AverageHomeGames = group.Select(row => row.HomeGames).Average() }).ToList();","db_name":"game_injury"},{"query":"SELECT average_attendance FROM stadium WHERE capacity_percentage > 100","result":"context.Stadia.Where(row => row.CapacityPercentage > 100).Select(row => new { row.AverageAttendance }).ToList();","db_name":"game_injury"},{"query":"SELECT player , number_of_matches , SOURCE FROM injury_accident WHERE injury != 'Knee problem'","result":"context.InjuryAccidents.Where(row => row.Injury != \"Knee problem\").Select(row => new { row.Player, row.NumberOfMatches, row.Source }).ToList();","db_name":"game_injury"},{"query":"SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'","result":"context.Games.Join(context.InjuryAccidents, T1 => T1.Id, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Player == \"Walter Samuel\").Select(row => new { row.T1.Season }).ToList();","db_name":"game_injury"},{"query":"SELECT T1.id , T1.score , T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING count(*) >= 2","result":"context.Games.Join(context.InjuryAccidents, T1 => T1.Id, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Score, group.First().T1.Date }).ToList();","db_name":"game_injury"},{"query":"SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1","result":"context.Stadia.Join(context.Games, T1 => T1.Id, T2 => T2.StadiumId, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T2.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name }).Take(1).ToList();","db_name":"game_injury"},{"query":"SELECT T1.season , T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'","result":"context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Injury == \"Foot injury\" || row.T3.Injury == \"Knee problem\").Select(row => new { row.T1.Season, row.T2.Name }).ToList();","db_name":"game_injury"},{"query":"SELECT count(DISTINCT SOURCE) FROM injury_accident","result":"context.InjuryAccidents.Select(row => row.Source).Distinct().Count();","db_name":"game_injury"},{"query":"SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )","result":"context.Games.Where(row => !context.InjuryAccidents.Select(row => row.GameId).Contains(row.Id)).Count();","db_name":"game_injury"},{"query":"SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010","result":"context.InjuryAccidents.Join(context.Games, T1 => T1.GameId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Season > 2010).Select(row => row.T1.Injury).Distinct().Count();","db_name":"game_injury"},{"query":"SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'","result":"context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Player == \"Walter Samuel\").Select(row => row.T2.Name).Intersect(context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Player == \"Thiago Motta\").Select(row => row.T2.Name)).ToList();","db_name":"game_injury"},{"query":"SELECT name , average_attendance , total_attendance FROM stadium EXCEPT SELECT T2.name , T2.average_attendance , T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id","result":"context.Stadia.Select(row => new { row.Name, row.AverageAttendance, row.TotalAttendance }).Except(context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.Name, row.T2.AverageAttendance, row.T2.TotalAttendance })).ToList();","db_name":"game_injury"},{"query":"SELECT name FROM stadium WHERE name LIKE \"%Bank%\"","result":"context.Stadia.Where(row => EF.Functions.Like(row.Name, \"%Bank%\")).Select(row => new { row.Name }).ToList();","db_name":"game_injury"},{"query":"SELECT T1.id , count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id","result":"context.Stadia.Join(context.Games, T1 => T1.Id, T2 => T2.StadiumId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Select(group => new { group.Key.Id, Count = group.Count() }).ToList();","db_name":"game_injury"},{"query":"SELECT T1.date , T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.season DESC","result":"context.Games.Join(context.InjuryAccidents, T1 => T1.Id, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Season).Select(row => new { row.T1.Date, row.T2.Player }).ToList();","db_name":"game_injury"},{"query":"SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;","result":"context.Departments.GroupBy(row => new { row.DepartmentId }).OrderByDescending(group => group.Count(row => row.DepartmentId != null)).Select(group => new { group.First().Name }).Take(1).ToList();","db_name":"hospital_1"},{"query":"SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;","result":"context.Departments.GroupBy(row => new { row.DepartmentId }).OrderBy(group => group.Count(row => row.DepartmentId != null)).Select(group => new { group.First().Head }).Take(1).ToList();","db_name":"hospital_1"},{"query":"SELECT T2.name , T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;","result":"context.Departments.Join(context.Physicians, T1 => T1.Head, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DepartmentId }).OrderBy(group => group.Count(row => row.T1.DepartmentId != null)).Select(group => new { group.First().T2.Name, group.First().T2.Position }).Take(1).ToList();","db_name":"hospital_1"},{"query":"SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn","result":"context.Appointments.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).ToList();","db_name":"hospital_1"},{"query":"SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count(*) > 1","result":"context.Appointments.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Patient }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.Name, group.First().T2.Phone }).ToList();","db_name":"hospital_1"},{"query":"SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1","result":"context.Appointments.OrderByDescending(row => row.Start).Select(row => new { row.AppointmentId }).Take(1).ToList();","db_name":"hospital_1"},{"query":"SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID","result":"context.Appointments.Join(context.Physicians, T1 => T1.Physician, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).ToList();","db_name":"hospital_1"},{"query":"SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID","result":"context.Physicians.Select(row => row.Name).Except(context.Appointments.Join(context.Physicians, T1 => T1.Physician, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Select(row => row.T2.Name)).ToList();","db_name":"hospital_1"},{"query":"SELECT T1.name , T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1","result":"context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.PrimaryAffiliation == true).Select(row => new { T1Name = row.T1.Name, T3Name = row.T3.Name }).ToList();","db_name":"hospital_1"},{"query":"SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1","result":"context.Patients.Join(context.Appointments, T1 => T1.Ssn, T2 => T2.Patient, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Start).Select(row => new { row.T1.Name }).Take(1).ToList();","db_name":"hospital_1"},{"query":"SELECT count(patient) FROM stay WHERE room = 112","result":"context.Stays.Where(row => row.Room == 112).Select(row => row.Patient).Count();","db_name":"hospital_1"},{"query":"SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid WHERE T3.name = \"John Dorian\"","result":"context.Patients.Join(context.Prescribes, T1 => T1.Ssn, T2 => T2.Patient, (T1, T2) => new { T1, T2 }).Join(context.Physicians, joined => joined.T2.Physician, T3 => T3.EmployeeId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"John Dorian\").Select(row => row.T1.Ssn).Count();","db_name":"hospital_1"},{"query":"SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code WHERE room = 111","result":"context.Stays.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).Join(context.Prescribes, joined => joined.T2.Ssn, T3 => T3.Patient, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Medications, joined => joined.T3.Medication, T4 => T4.Code, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T1.Room == 111).Select(row => new { row.T4.Name }).ToList();","db_name":"hospital_1"},{"query":"SELECT patient FROM stay WHERE room = 111 ORDER BY staystart DESC LIMIT 1","result":"context.Stays.Where(row => row.Room == 111).OrderByDescending(row => row.StayStart).Select(row => new { row.Patient }).Take(1).ToList();","db_name":"hospital_1"},{"query":"SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1","result":"context.Nurses.Join(context.Appointments, T1 => T1.EmployeeId, T2 => T2.PrepNurse, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EmployeeId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name }).Take(1).ToList();","db_name":"hospital_1"},{"query":"SELECT T1.name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid","result":"context.Physicians.Join(context.Patients, T1 => T1.EmployeeId, T2 => T2.Pcp, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EmployeeId }).Select(group => new { group.First().T1.Name, Count = group.Count() }).ToList();","db_name":"hospital_1"},{"query":"SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count(*) > 1","result":"context.Physicians.Join(context.Patients, T1 => T1.EmployeeId, T2 => T2.Pcp, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EmployeeId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Name }).ToList();","db_name":"hospital_1"},{"query":"SELECT count(*) , T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockfloor","result":"context.Blocks.Join(context.Rooms, T1 => new { Pair1 = T1.BlockFloor, Pair2 = T1.BlockCode }, T2 => new { Pair1 = T2.BlockFloor, Pair2 = T2.BlockCode }, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.BlockFloor }).Select(group => new { Count = group.Count(), group.Key.BlockFloor }).ToList();","db_name":"hospital_1"},{"query":"SELECT count(*) , T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockcode","result":"context.Blocks.Join(context.Rooms, T1 => new { Pair1 = T1.BlockFloor, Pair2 = T1.BlockCode }, T2 => new { Pair1 = T2.BlockFloor, Pair2 = T2.BlockCode }, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.BlockCode }).Select(group => new { Count = group.Count(), group.Key.BlockCode }).ToList();","db_name":"hospital_1"},{"query":"SELECT DISTINCT blockcode FROM room WHERE unavailable = 0","result":"context.Rooms.Where(row => row.Unavailable == false).Select(row => new { row.BlockCode }).Distinct().ToList();","db_name":"hospital_1"},{"query":"SELECT count(DISTINCT roomtype) FROM room","result":"context.Rooms.Select(row => row.RoomType).Distinct().Count();","db_name":"hospital_1"},{"query":"SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name = \"Thesisin\"","result":"context.Physicians.Join(context.Prescribes, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Medications, joined => joined.T2.Medication, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Thesisin\").Select(row => new { row.T1.Name }).Distinct().ToList();","db_name":"hospital_1"},{"query":"SELECT DISTINCT T1.name , T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand = \"X\"","result":"context.Physicians.Join(context.Prescribes, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Medications, joined => joined.T2.Medication, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Brand == \"X\").Select(row => new { row.T1.Name, row.T1.Position }).Distinct().ToList();","db_name":"hospital_1"},{"query":"SELECT count(*) , T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand","result":"context.Medications.Join(context.Prescribes, T1 => T1.Code, T2 => T2.Medication, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Brand }).Select(group => new { Count = group.Count(), group.First().T1.Name }).ToList();","db_name":"hospital_1"},{"query":"SELECT name FROM physician WHERE POSITION LIKE '%senior%'","result":"context.Physicians.Where(row => EF.Functions.Like(row.Position, \"%senior%\")).Select(row => new { row.Name }).ToList();","db_name":"hospital_1"},{"query":"SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1","result":"context.Undergoes.OrderBy(row => row.DateUndergoes).Select(row => new { row.Patient }).Take(1).ToList();","db_name":"hospital_1"},{"query":"SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID WHERE T3.room = 111","result":"context.Undergoes.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).Join(context.Stays, joined => joined.T1.Stay, T3 => T3.StayId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Room == 111).Select(row => new { row.T2.Name }).Distinct().ToList();","db_name":"hospital_1"},{"query":"SELECT DISTINCT name FROM nurse ORDER BY name","result":"context.Nurses.OrderBy(row => row.Name).Select(row => new { row.Name }).Distinct().ToList();","db_name":"hospital_1"},{"query":"SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID","result":"context.Undergoes.Join(context.Nurses, T1 => T1.AssistingNurse, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).Distinct().ToList();","db_name":"hospital_1"},{"query":"SELECT DISTINCT name FROM medication ORDER BY name","result":"context.Medications.OrderBy(row => row.Name).Select(row => new { row.Name }).Distinct().ToList();","db_name":"hospital_1"},{"query":"SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1","result":"context.Physicians.Join(context.Prescribes, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Dose).Select(row => new { row.T1.Name }).Take(1).ToList();","db_name":"hospital_1"},{"query":"SELECT physician , department FROM affiliated_with WHERE primaryaffiliation = 1","result":"context.AffiliatedWiths.Where(row => row.PrimaryAffiliation == true).Select(row => new { row.Physician, row.Department }).ToList();","db_name":"hospital_1"},{"query":"SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation = 1","result":"context.AffiliatedWiths.Join(context.Departments, T1 => T1.Department, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PrimaryAffiliation == true).Select(row => new { row.T2.Name }).Distinct().ToList();","db_name":"hospital_1"},{"query":"SELECT nurse FROM on_call WHERE blockfloor = 1 AND blockcode = 1","result":"context.OnCalls.Where(row => row.BlockFloor == 1 && row.BlockCode == 1).Select(row => new { row.Nurse }).ToList();","db_name":"hospital_1"},{"query":"SELECT MAX(cost) , MIN(cost) , AVG(cost) FROM procedures","result":"context.Procedures.GroupBy(row => 1).Select(group => new { MaxCost = group.Select(row => row.Cost).Max(), MinCost = group.Select(row => row.Cost).Min(), AverageCost = group.Select(row => row.Cost).Average() }).ToList();","db_name":"hospital_1"},{"query":"SELECT name , cost FROM procedures ORDER BY cost DESC","result":"context.Procedures.OrderByDescending(row => row.Cost).Select(row => new { row.Name, row.Cost }).ToList();","db_name":"hospital_1"},{"query":"SELECT name FROM procedures ORDER BY cost LIMIT 3","result":"context.Procedures.OrderBy(row => row.Cost).Select(row => new { row.Name }).Take(3).ToList();","db_name":"hospital_1"},{"query":"SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000","result":"context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Cost > 5000).Select(row => new { row.T1.Name }).ToList();","db_name":"hospital_1"},{"query":"SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment ORDER BY T3.cost DESC LIMIT 1","result":"context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T3.Cost).Select(row => new { row.T1.Name }).Take(1).ToList();","db_name":"hospital_1"},{"query":"SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"","result":"context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => (double) row.T3.Cost).Average();","db_name":"hospital_1"},{"query":"SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"","result":"context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => new { row.T3.Name }).ToList();","db_name":"hospital_1"},{"query":"SELECT name FROM procedures WHERE cost > 1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"","result":"context.Procedures.Where(row => row.Cost > 1000).Select(row => row.Name).Union(context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => row.T3.Name)).ToList();","db_name":"hospital_1"},{"query":"SELECT name FROM procedures WHERE cost > 1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"","result":"context.Procedures.Where(row => row.Cost > 1000).Select(row => row.Name).Except(context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => row.T3.Name)).ToList();","db_name":"hospital_1"},{"query":"SELECT name FROM procedures WHERE cost < 5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"","result":"context.Procedures.Where(row => row.Cost < 5000).Select(row => row.Name).Intersect(context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => row.T3.Name)).ToList();","db_name":"hospital_1"},{"query":"SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Psychiatry'","result":"context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Surgery\").Select(row => row.T1.Name).Intersect(context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Psychiatry\").Select(row => row.T1.Name)).ToList();","db_name":"hospital_1"},{"query":"SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'","result":"context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Surgery\" || row.T3.Name == \"Psychiatry\").Select(row => new { row.T1.Name }).ToList();","db_name":"hospital_1"},{"query":"SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code WHERE T3.name = 'Procrastin-X'","result":"context.Patients.Select(row => row.Name).Except(context.Patients.Join(context.Prescribes, T1 => T1.Ssn, T2 => T2.Patient, (T1, T2) => new { T1, T2 }).Join(context.Medications, joined => joined.T2.Medication, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Procrastin-X\").Select(row => row.T1.Name)).ToList();","db_name":"hospital_1"},{"query":"SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication = T2.Code WHERE T2.name = 'Procrastin-X' )","result":"context.Patients.Where(row => !context.Prescribes.Join(context.Medications, T1 => T1.Medication, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Procrastin-X\").Select(row => row.T1.Patient).Contains(row.Ssn)).Count();","db_name":"hospital_1"},{"query":"SELECT count(*) FROM appointment","result":"context.Appointments.Count();","db_name":"hospital_1"},{"query":"SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse","result":"context.Nurses.Join(context.OnCalls, T1 => T1.EmployeeId, T2 => T2.Nurse, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name }).Distinct().ToList();","db_name":"hospital_1"},{"query":"SELECT sum(num_of_component) FROM furniture","result":"context.Furnitures.Select(row => row.NumOfComponent).Sum();","db_name":"manufacturer"},{"query":"SELECT name , furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1","result":"context.Furnitures.OrderByDescending(row => row.MarketRate).Select(row => new { row.Name, row.FurnitureId }).Take(1).ToList();","db_name":"manufacturer"},{"query":"SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2","result":"context.Furnitures.OrderByDescending(row => row.MarketRate).Select(row => row.MarketRate).Sum();","db_name":"manufacturer"},{"query":"SELECT Num_of_Component , name FROM furniture WHERE Num_of_Component > 10","result":"context.Furnitures.Where(row => row.NumOfComponent > 10).Select(row => new { row.NumOfComponent, row.Name }).ToList();","db_name":"manufacturer"},{"query":"SELECT name , Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1","result":"context.Furnitures.OrderBy(row => row.MarketRate).Select(row => new { row.Name, row.NumOfComponent }).Take(1).ToList();","db_name":"manufacturer"},{"query":"SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID WHERE t2.Price_in_Dollar < (SELECT max(Price_in_Dollar) FROM furniture_manufacte)","result":"context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.PriceInDollar < context.FurnitureManufactes.Select(row => row.PriceInDollar).Max()).Select(row => new { row.t1.Name }).ToList();","db_name":"manufacturer"},{"query":"SELECT open_year , name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1","result":"context.Manufacturers.OrderByDescending(row => row.NumOfShops).Select(row => new { row.OpenYear, row.Name }).Take(1).ToList();","db_name":"manufacturer"},{"query":"SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops > 20","result":"context.Manufacturers.Where(row => row.NumOfShops > 20).Select(row => row.NumOfFactories).Average();","db_name":"manufacturer"},{"query":"SELECT name , manufacturer_id FROM manufacturer ORDER BY open_year","result":"context.Manufacturers.OrderBy(row => row.OpenYear).Select(row => new { row.Name, row.ManufacturerId }).ToList();","db_name":"manufacturer"},{"query":"SELECT name , open_year FROM manufacturer WHERE num_of_shops > 10 OR Num_of_Factories < 10","result":"context.Manufacturers.Where(row => row.NumOfShops > 10 || row.NumOfFactories < 10).Select(row => new { row.Name, row.OpenYear }).ToList();","db_name":"manufacturer"},{"query":"SELECT max(num_of_shops) , avg(Num_of_Factories) FROM manufacturer WHERE open_year < 1990","result":"context.Manufacturers.Where(row => row.OpenYear < 1990).GroupBy(row => 1).Select(group => new { MaxNumOfShops = group.Select(row => row.NumOfShops).Max(), AverageNumOfFactories = group.Select(row => row.NumOfFactories).Average() }).ToList();","db_name":"manufacturer"},{"query":"SELECT t1.manufacturer_id , t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1","result":"context.Manufacturers.Join(context.FurnitureManufactes, t1 => t1.ManufacturerId, t2 => t2.ManufacturerId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t2.PriceInDollar).Select(row => new { row.t1.ManufacturerId, row.t1.NumOfShops }).Take(1).ToList();","db_name":"manufacturer"},{"query":"SELECT count(*) , t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id","result":"context.Manufacturers.Join(context.FurnitureManufactes, t1 => t1.ManufacturerId, t2 => t2.ManufacturerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ManufacturerId }).Select(group => new { Count = group.Count(), group.First().t1.Name }).ToList();","db_name":"manufacturer"},{"query":"SELECT t1.name , t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID","result":"context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Select(row => new { row.t1.Name, row.t2.PriceInDollar }).ToList();","db_name":"manufacturer"},{"query":"SELECT Market_Rate , name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)","result":"context.Furnitures.Where(row => !context.FurnitureManufactes.Select(row => row.FurnitureId).Contains(row.FurnitureId)).Select(row => new { row.MarketRate, row.Name }).ToList();","db_name":"manufacturer"},{"query":"SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component < 6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component > 10","result":"context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Join(context.Manufacturers, joined => joined.t2.ManufacturerId, t3 => t3.ManufacturerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.NumOfComponent < 6).Select(row => row.t3.Name).Intersect(context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Join(context.Manufacturers, joined => joined.t2.ManufacturerId, t3 => t3.ManufacturerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.NumOfComponent > 10).Select(row => row.t3.Name)).ToList();","db_name":"manufacturer"},{"query":"SELECT local_authority , services FROM station","result":"context.Stations.Select(row => new { row.LocalAuthority, row.Services }).ToList();","db_name":"station_weather"},{"query":"SELECT train_number , name FROM train ORDER BY TIME","result":"context.Trains.OrderBy(row => row.Time).Select(row => new { row.TrainNumber, row.Name }).ToList();","db_name":"station_weather"},{"query":"SELECT TIME , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME","result":"context.Trains.Where(row => row.Destination == \"Chennai\").OrderBy(row => row.Time).Select(row => new { row.Time, row.TrainNumber }).ToList();","db_name":"station_weather"},{"query":"SELECT count(*) FROM train WHERE name LIKE \"%Express%\"","result":"context.Trains.Where(row => EF.Functions.Like(row.Name, \"%Express%\")).Count();","db_name":"station_weather"},{"query":"SELECT train_number , TIME FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur'","result":"context.Trains.Where(row => row.Origin == \"Chennai\" && row.Destination == \"Guruvayur\").Select(row => new { row.TrainNumber, row.Time }).ToList();","db_name":"station_weather"},{"query":"SELECT origin , count(*) FROM train GROUP BY origin","result":"context.Trains.GroupBy(row => new { row.Origin }).Select(group => new { group.Key.Origin, Count = group.Count() }).ToList();","db_name":"station_weather"},{"query":"SELECT avg(high_temperature) , day_of_week FROM weekly_weather GROUP BY day_of_week","result":"context.WeeklyWeathers.GroupBy(row => new { row.DayOfWeek }).Select(group => new { AverageHighTemperature = group.Select(row => row.HighTemperature).Average(), group.Key.DayOfWeek }).ToList();","db_name":"station_weather"},{"query":"SELECT max(t1.low_temperature) , avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = \"Amersham\"","result":"context.WeeklyWeathers.Join(context.Stations, t1 => t1.StationId, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t2.NetworkName == \"Amersham\").GroupBy(row => 1).Select(group => new { MaxLowTemperature = group.Select(row => row.t1.LowTemperature).Max(), AveragePrecipitation = group.Select(row => row.t1.Precipitation).Average() }).ToList();","db_name":"station_weather"},{"query":"SELECT count(DISTINCT services) FROM station","result":"context.Stations.Select(row => row.Services).Distinct().Count();","db_name":"station_weather"},{"query":"SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1","result":"context.WeeklyWeathers.Join(context.Stations, t1 => t1.StationId, t2 => t2.Id, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.StationId }).OrderByDescending(group => group.Average(row => row.t1.HighTemperature)).Select(group => new { group.First().t2.Id, group.First().t2.LocalAuthority }).Take(1).ToList();","db_name":"station_weather"},{"query":"SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id HAVING max(t1.precipitation) > 50","result":"context.WeeklyWeathers.Join(context.Stations, t1 => t1.StationId, t2 => t2.Id, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.StationId }).Where(group => group.Max(row => row.t1.Precipitation) > 50).Select(group => new { group.First().t2.Id, group.First().t2.LocalAuthority }).ToList();","db_name":"station_weather"},{"query":"SELECT min(low_temperature) , max(wind_speed_mph) FROM weekly_weather","result":"context.WeeklyWeathers.GroupBy(row => 1).Select(group => new { MinLowTemperature = group.Select(row => row.LowTemperature).Min(), MaxWindSpeedMph = group.Select(row => row.WindSpeedMph).Max() }).ToList();","db_name":"station_weather"},{"query":"SELECT origin FROM train GROUP BY origin HAVING count(*) > 1","result":"context.Trains.GroupBy(row => new { row.Origin }).Where(group => group.Count() > 1).Select(group => new { group.Key.Origin }).ToList();","db_name":"station_weather"},{"query":"SELECT count(*) FROM perpetrator","result":"context.Perpetrators.Count();","db_name":"perpetrator"},{"query":"SELECT Date FROM perpetrator ORDER BY Killed DESC","result":"context.Perpetrators.OrderByDescending(row => row.Killed).Select(row => new { row.Date }).ToList();","db_name":"perpetrator"},{"query":"SELECT Injured FROM perpetrator ORDER BY Injured ASC","result":"context.Perpetrators.OrderBy(row => row.Injured).Select(row => new { row.Injured }).ToList();","db_name":"perpetrator"},{"query":"SELECT avg(Injured) FROM perpetrator","result":"context.Perpetrators.Select(row => row.Injured).Average();","db_name":"perpetrator"},{"query":"SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1","result":"context.Perpetrators.OrderByDescending(row => row.Killed).Select(row => new { row.Location }).Take(1).ToList();","db_name":"perpetrator"},{"query":"SELECT Name FROM People ORDER BY Height ASC","result":"context.People.OrderBy(row => row.Height).Select(row => new { row.Name }).ToList();","db_name":"perpetrator"},{"query":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID","result":"context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name }).ToList();","db_name":"perpetrator"},{"query":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country != \"China\"","result":"context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country != \"China\").Select(row => new { row.T1.Name }).ToList();","db_name":"perpetrator"},{"query":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1","result":"context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Weight).Select(row => new { row.T1.Name }).Take(1).ToList();","db_name":"perpetrator"},{"query":"SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84","result":"context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Height > 1.84).Select(row => row.T2.Killed).Sum();","db_name":"perpetrator"},{"query":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = \"China\" OR T2.Country = \"Japan\"","result":"context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country == \"China\" || row.T2.Country == \"Japan\").Select(row => new { row.T1.Name }).ToList();","db_name":"perpetrator"},{"query":"SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Injured DESC","result":"context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Injured).Select(row => new { row.T1.Height }).ToList();","db_name":"perpetrator"},{"query":"SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country","result":"context.Perpetrators.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();","db_name":"perpetrator"},{"query":"SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1","result":"context.Perpetrators.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();","db_name":"perpetrator"},{"query":"SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*) >= 2","result":"context.Perpetrators.GroupBy(row => new { row.Country }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();","db_name":"perpetrator"},{"query":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Year DESC","result":"context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Year).Select(row => new { row.T1.Name }).ToList();","db_name":"perpetrator"},{"query":"SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)","result":"context.People.Where(row => !context.Perpetrators.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();","db_name":"perpetrator"},{"query":"SELECT Country FROM perpetrator WHERE Injured > 50 INTERSECT SELECT Country FROM perpetrator WHERE Injured < 20","result":"context.Perpetrators.Where(row => row.Injured > 50).Select(row => row.Country).Intersect(context.Perpetrators.Where(row => row.Injured < 20).Select(row => row.Country)).ToList();","db_name":"perpetrator"},{"query":"SELECT count(DISTINCT LOCATION) FROM perpetrator","result":"context.Perpetrators.Select(row => row.Location).Distinct().Count();","db_name":"perpetrator"},{"query":"SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1","result":"context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Height).Select(row => new { row.T2.Date }).Take(1).ToList();","db_name":"perpetrator"},{"query":"SELECT max(YEAR) FROM perpetrator;","result":"context.Perpetrators.Select(row => row.Year).Max();","db_name":"perpetrator"},{"query":"SELECT count(*) FROM region","result":"context.Regions.Count();","db_name":"storm_record"},{"query":"SELECT region_code , region_name FROM region ORDER BY region_code","result":"context.Regions.OrderBy(row => row.RegionCode).Select(row => new { row.RegionCode, row.RegionName }).ToList();","db_name":"storm_record"},{"query":"SELECT region_name FROM region ORDER BY region_name","result":"context.Regions.OrderBy(row => row.RegionName).Select(row => new { row.RegionName }).ToList();","db_name":"storm_record"},{"query":"SELECT region_name FROM region WHERE region_name != 'Denmark'","result":"context.Regions.Where(row => row.RegionName != \"Denmark\").Select(row => new { row.RegionName }).ToList();","db_name":"storm_record"},{"query":"SELECT count(*) FROM storm WHERE Number_Deaths > 0","result":"context.Storms.Where(row => row.NumberDeaths > 0).Count();","db_name":"storm_record"},{"query":"SELECT name , dates_active , number_deaths FROM storm WHERE number_deaths >= 1","result":"context.Storms.Where(row => row.NumberDeaths >= 1).Select(row => new { row.Name, row.DatesActive, row.NumberDeaths }).ToList();","db_name":"storm_record"},{"query":"SELECT avg(damage_millions_USD) , max(damage_millions_USD) FROM storm WHERE max_speed > 1000","result":"context.Storms.Where(row => row.MaxSpeed > 1000).GroupBy(row => 1).Select(group => new { AverageDamageMillionsUsd = group.Select(row => row.DamageMillionsUsd).Average(), MaxDamageMillionsUsd = group.Select(row => row.DamageMillionsUsd).Max() }).ToList();","db_name":"storm_record"},{"query":"SELECT sum(number_deaths) , sum(damage_millions_USD) FROM storm WHERE max_speed > (SELECT avg(max_speed) FROM storm)","result":"context.Storms.Where(row => row.MaxSpeed > context.Storms.Select(row => row.MaxSpeed).Average()).GroupBy(row => 1).Select(group => new { SumNumberDeaths = group.Select(row => row.NumberDeaths).Sum(), SumDamageMillionsUsd = group.Select(row => row.DamageMillionsUsd).Sum() }).ToList();","db_name":"storm_record"},{"query":"SELECT name , damage_millions_USD FROM storm ORDER BY max_speed DESC","result":"context.Storms.OrderByDescending(row => row.MaxSpeed).Select(row => new { row.Name, row.DamageMillionsUsd }).ToList();","db_name":"storm_record"},{"query":"SELECT count(DISTINCT region_id) FROM affected_region","result":"context.AffectedRegions.Select(row => row.RegionId).Distinct().Count();","db_name":"storm_record"},{"query":"SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)","result":"context.Regions.Where(row => !context.AffectedRegions.Select(row => row.RegionId).Contains(row.RegionId)).Select(row => new { row.RegionName }).ToList();","db_name":"storm_record"},{"query":"SELECT T1.region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id","result":"context.Regions.Join(context.AffectedRegions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.RegionId }).Select(group => new { group.First().T1.RegionName, Count = group.Count() }).ToList();","db_name":"storm_record"},{"query":"SELECT T1.name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id","result":"context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).Select(group => new { group.First().T1.Name, Count = group.Count() }).ToList();","db_name":"storm_record"},{"query":"SELECT T1.name , T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1","result":"context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name, group.First().T1.MaxSpeed }).Take(1).ToList();","db_name":"storm_record"},{"query":"SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)","result":"context.Storms.Where(row => !context.AffectedRegions.Select(row => row.StormId).Contains(row.StormId)).Select(row => new { row.Name }).ToList();","db_name":"storm_record"},{"query":"SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected) >= 10","result":"context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).Where(group => group.Count() >= 2).Select(group => group.First().T1.Name).Intersect(context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).Where(group => group.Sum(row => row.T2.NumberCityAffected) >= 10).Select(group => group.First().T1.Name)).ToList();","db_name":"storm_record"},{"query":"SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2","result":"context.Storms.Select(row => row.Name).Except(context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).Where(group => group.Count() >= 2).Select(group => group.First().T1.Name)).ToList();","db_name":"storm_record"},{"query":"SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10","result":"context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.NumberDeaths >= 10).Select(row => new { row.T2.RegionName }).ToList();","db_name":"storm_record"},{"query":"SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark'","result":"context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.RegionName == \"Denmark\").Select(row => new { row.T3.Name }).ToList();","db_name":"storm_record"},{"query":"SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*) >= 2","result":"context.Regions.Join(context.AffectedRegions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.RegionId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.RegionName }).ToList();","db_name":"storm_record"},{"query":"SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1","result":"context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T3.NumberDeaths).Select(row => new { row.T2.RegionName }).Take(1).ToList();","db_name":"storm_record"},{"query":"SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'","result":"context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.RegionName == \"Afghanistan\").Select(row => row.T3.Name).Intersect(context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.RegionName == \"Albania\").Select(row => row.T3.Name)).ToList();","db_name":"storm_record"},{"query":"SELECT founder FROM manufacturers WHERE name = 'Sony'","result":"context.Manufacturers.Where(row => row.Name == \"Sony\").Select(row => new { row.Founder }).ToList();","db_name":"manufactory_1"},{"query":"SELECT headquarter FROM manufacturers WHERE founder = 'James'","result":"context.Manufacturers.Where(row => row.Founder == \"James\").Select(row => new { row.Headquarter }).ToList();","db_name":"manufactory_1"},{"query":"SELECT name , headquarter FROM manufacturers ORDER BY revenue DESC","result":"context.Manufacturers.OrderByDescending(row => row.Revenue).Select(row => new { row.Name, row.Headquarter }).ToList();","db_name":"manufactory_1"}]