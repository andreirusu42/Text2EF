[
  {
    "query": "SELECT count(*) FROM browser WHERE market_share >= 5",
    "result": "context.Browsers.Where(row => row.MarketShare >= 5).Count();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM browser ORDER BY market_share DESC",
    "result": "context.Browsers.OrderByDescending(row => row.MarketShare).Select(row => new { row.Name }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT id , name , market_share FROM browser",
    "result": "context.Browsers.Select(row => new { row.Id, row.Name, row.MarketShare }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(market_share) , min(market_share) , avg(market_share) FROM browser",
    "result": "context.Browsers.GroupBy(row => 1).Select(group => new { MaxMarketShare = group.Select(row => row.MarketShare).Max(), MinMarketShare = group.Select(row => row.MarketShare).Min(), AverageMarketShare = group.Select(row => row.MarketShare).Average() }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT id , market_share FROM browser WHERE name = 'Safari'",
    "result": "context.Browsers.Where(row => row.Name == \"Safari\").Select(row => new { row.Id, row.MarketShare }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
    "result": "context.WebClientAccelerators.Where(row => row.Connection != \"Broadband\").Select(row => new { row.Name, row.OperatingSystem }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998",
    "result": "context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T2.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"CProxy\" && row.T2.CompatibleSinceYear > 1998).Where(row => row.T1.Name.HasValue).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "browser_web",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,368): error CS1061: 'string' does not contain a definition for 'HasValue' and no accessible extension method 'HasValue' accepting a first argument of type 'string' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.29"
  },
  {
    "query": "SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count(*) >= 2",
    "result": "context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name }).Take(1).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'",
    "result": "context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"CACHEbox\" && row.T2.Name == \"Internet Explorer\").Select(row => new { row.T1.CompatibleSinceYear }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT client) FROM web_client_accelerator",
    "result": "context.WebClientAccelerators.Select(row => row.Client).Distinct().Count();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );",
    "result": "context.WebClientAccelerators.Where(row => !context.AcceleratorCompatibleBrowsers.Select(row => row.AcceleratorId).Contains(row.Id)).Count();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15;",
    "result": "context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.MarketShare > 15).Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'",
    "result": "context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"CACHEbox\").Select(row => row.T3.Name).Intersect(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Fasterfox\").Select(row => row.T3.Name)).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , operating_system FROM web_client_accelerator EXCEPT SELECT T1.name , T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'",
    "result": "context.WebClientAccelerators.Select(row => new { row.Name, row.OperatingSystem }).Except(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Opera\").Select(row => new { row.T1.Name, row.T1.OperatingSystem })).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
    "result": "context.WebClientAccelerators.Where(row => EF.Functions.Like(row.Name, \"%Opera%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system",
    "result": "context.WebClientAccelerators.GroupBy(row => new { row.OperatingSystem }).Select(group => new { group.Key.OperatingSystem, Count = group.Count() }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name , T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id ORDER BY T1.compatible_since_year DESC",
    "result": "context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T1.CompatibleSinceYear).Select(row => new { T2Name = row.T2.Name, T3Name = row.T3.Name }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM actor",
    "result": "context.Actors.Count();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM actor ORDER BY Name ASC",
    "result": "context.Actors.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Character , Duration FROM actor",
    "result": "context.Actors.Select(row => new { row.Character, row.Duration }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM actor WHERE Age != 20",
    "result": "context.Actors.Where(row => row.Age != 20).Select(row => new { row.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Character FROM actor ORDER BY age DESC",
    "result": "context.Actors.OrderByDescending(row => row.Age).Select(row => new { row.Character }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
    "result": "context.Actors.OrderByDescending(row => row.Age).Select(row => new { row.Duration }).Take(1).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM musical WHERE Nominee = \"Bob Fosse\"",
    "result": "context.Musicals.Where(row => row.Nominee == \"Bob Fosse\").Select(row => new { row.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"",
    "result": "context.Musicals.Where(row => row.Award != \"Tony Award\").Select(row => new { row.Nominee }).Distinct().ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID",
    "result": "context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).Select(row => new { T1Name = row.T1.Name, T2Name = row.T2.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = \"The Phantom of the Opera\"",
    "result": "context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"The Phantom of the Opera\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC",
    "result": "context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Year).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID",
    "result": "context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MusicalId }).Select(group => new { group.First().T2.Name, Count = group.Count() }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3",
    "result": "context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MusicalId }).Where(group => group.Count() >= 3).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee",
    "result": "context.Musicals.GroupBy(row => new { row.Nominee }).Select(group => new { group.Key.Nominee, Count = group.Count() }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Musicals.GroupBy(row => new { row.Nominee }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Nominee }).Take(1).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Musicals.GroupBy(row => new { row.Result }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Result }).Take(1).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2",
    "result": "context.Musicals.GroupBy(row => new { row.Nominee }).Where(group => group.Count() > 2).Select(group => new { group.Key.Nominee }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
    "result": "context.Musicals.Where(row => !context.Actors.Select(row => row.MusicalId).Contains(row.MusicalId)).Select(row => new { row.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award = \"Drama Desk Award\"",
    "result": "context.Musicals.Where(row => row.Award == \"Tony Award\").Select(row => row.Nominee).Intersect(context.Musicals.Where(row => row.Award == \"Drama Desk Award\").Select(row => row.Nominee)).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\"",
    "result": "context.Musicals.Where(row => row.Award == \"Tony Award\" || row.Award == \"Cleavant Derricks\").Select(row => new { row.Nominee }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM farm",
    "result": "context.Farms.Count();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
    "result": "context.Farms.OrderBy(row => row.TotalHorses).Select(row => new { row.TotalHorses }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens'",
    "result": "context.FarmCompetitions.Where(row => row.Theme != \"Aliens\").Select(row => new { row.Hosts }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
    "result": "context.FarmCompetitions.OrderBy(row => row.Year).Select(row => new { row.Theme }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses > 5000",
    "result": "context.Farms.Where(row => row.TotalHorses > 5000).Select(row => (double) row.WorkingHorses).Average();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Cows) , min(Cows) FROM farm",
    "result": "context.Farms.GroupBy(row => 1).Select(group => new { MaxCows = group.Select(row => row.Cows).Max(), MinCows = group.Select(row => row.Cows).Min() }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT Status) FROM city",
    "result": "context.Cities.Select(row => row.Status).Distinct().Count();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
    "result": "context.Cities.OrderByDescending(row => row.Population).Select(row => new { row.OfficialName }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1",
    "result": "context.Cities.OrderByDescending(row => row.Population).Select(row => new { row.OfficialName, row.Status }).Take(1).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Year , T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID",
    "result": "context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Year, row.T1.OfficialName }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1",
    "result": "context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.HostCityId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.OfficialName }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.HostCityId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Status }).Take(1).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000",
    "result": "context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Population > 1000).Select(row => new { row.T2.Theme }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Status , avg(Population) FROM city GROUP BY Status",
    "result": "context.Cities.GroupBy(row => new { row.Status }).Select(group => new { group.Key.Status, AveragePopulation = group.Select(row => row.Population).Average() }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
    "result": "context.Cities.GroupBy(row => new { row.Status }).OrderBy(group => group.Count()).Select(group => new { group.Key.Status }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Cities.GroupBy(row => new { row.Status }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Status }).Take(1).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
    "result": "context.Cities.Where(row => !context.FarmCompetitions.Select(row => row.HostCityId).Contains(row.CityId)).Select(row => new { row.OfficialName }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500",
    "result": "context.Cities.Where(row => row.Population > 1500).Select(row => row.Status).Intersect(context.Cities.Where(row => row.Population < 500).Select(row => row.Status)).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500",
    "result": "context.Cities.Where(row => row.Population > 1500 || row.Population < 500).Select(row => new { row.OfficialName }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Census_Ranking FROM city WHERE Status != \"Village\"",
    "result": "context.Cities.Where(row => row.Status != \"Village\").Select(row => new { row.CensusRanking }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM game WHERE season > 2007",
    "result": "context.Games.Where(row => row.Season > 2007).Count();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Date FROM game ORDER BY home_team DESC",
    "result": "context.Games.OrderByDescending(row => row.HomeTeam).Select(row => new { row.Date }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT season , home_team , away_team FROM game",
    "result": "context.Games.Select(row => new { row.Season, row.HomeTeam, row.AwayTeam }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(home_games) , min(home_games) , avg(home_games) FROM stadium",
    "result": "context.Stadia.GroupBy(row => 1).Select(group => new { MaxHomeGames = group.Select(row => row.HomeGames).Max(), MinHomeGames = group.Select(row => row.HomeGames).Min(), AverageHomeGames = group.Select(row => row.HomeGames).Average() }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT average_attendance FROM stadium WHERE capacity_percentage > 100",
    "result": "context.Stadia.Where(row => row.CapacityPercentage > 100).Select(row => new { row.AverageAttendance }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT player , number_of_matches , SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
    "result": "context.InjuryAccidents.Where(row => row.Injury != \"Knee problem\").Select(row => new { row.Player, row.NumberOfMatches, row.Source }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'",
    "result": "context.Games.Join(context.InjuryAccidents, T1 => T1.Id, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Player == \"Walter Samuel\").Select(row => new { row.T1.Season }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T1.score , T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING count(*) >= 2",
    "result": "context.Games.Join(context.InjuryAccidents, T1 => T1.Id, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Score, group.First().T1.Date }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Stadia.Join(context.Games, T1 => T1.Id, T2 => T2.StadiumId, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T2.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name }).Take(1).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.season , T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'",
    "result": "context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Injury == \"Foot injury\" || row.T3.Injury == \"Knee problem\").Select(row => new { row.T1.Season, row.T2.Name }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT SOURCE) FROM injury_accident",
    "result": "context.InjuryAccidents.Select(row => row.Source).Distinct().Count();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
    "result": "context.Games.Where(row => !context.InjuryAccidents.Select(row => row.GameId).Contains(row.Id)).Count();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010",
    "result": "context.InjuryAccidents.Join(context.Games, T1 => T1.GameId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Season > 2010).Select(row => row.T1.Injury).Distinct().Count();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'",
    "result": "context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Player == \"Walter Samuel\").Select(row => row.T2.Name).Intersect(context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Player == \"Thiago Motta\").Select(row => row.T2.Name)).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , average_attendance , total_attendance FROM stadium EXCEPT SELECT T2.name , T2.average_attendance , T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id",
    "result": "context.Stadia.Where(row => row.AverageAttendance.HasValue && row.TotalAttendance.HasValue).Select(row => new { row.Name, row.AverageAttendance.Value, row.TotalAttendance.Value }).Except(context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.Name, row.T2.AverageAttendance, row.T2.TotalAttendance })).ToList();",
    "db_name": "game_injury",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,163): error CS0833: An anonymous type cannot have multiple properties with the same name [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    148 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.42"
  },
  {
    "query": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"",
    "result": "context.Stadia.Where(row => EF.Functions.Like(row.Name, \"%Bank%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id",
    "result": "context.Stadia.Join(context.Games, T1 => T1.Id, T2 => T2.StadiumId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Select(group => new { group.Key.Id, Count = group.Count() }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.date , T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.season DESC",
    "result": "context.Games.Join(context.InjuryAccidents, T1 => T1.Id, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Season).Select(row => new { row.T1.Date, row.T2.Player }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;",
    "result": "context.Departments.GroupBy(row => new { row.DepartmentId }).OrderByDescending(group => group.Count(row => row.DepartmentId != null)).Select(group => new { group.First().Name }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
    "result": "context.Departments.GroupBy(row => new { row.DepartmentId }).OrderBy(group => group.Count(row => row.DepartmentId != null)).Select(group => new { group.First().Head }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name , T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
    "result": "context.Departments.Join(context.Physicians, T1 => T1.Head, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DepartmentId }).OrderBy(group => group.Count(row => row.T1.DepartmentId != null)).Select(group => new { group.First().T2.Name, group.First().T2.Position }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn",
    "result": "context.Appointments.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count(*) > 1",
    "result": "context.Appointments.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Patient }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.Name, group.First().T2.Phone }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1",
    "result": "context.Appointments.OrderByDescending(row => row.Start).Select(row => new { row.AppointmentId }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID",
    "result": "context.Appointments.Join(context.Physicians, T1 => T1.Physician, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID",
    "result": "context.Physicians.Select(row => row.Name).Except(context.Appointments.Join(context.Physicians, T1 => T1.Physician, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Select(row => row.T2.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1",
    "result": "context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.PrimaryAffiliation == true).Select(row => new { T1Name = row.T1.Name, T3Name = row.T3.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1",
    "result": "context.Patients.Join(context.Appointments, T1 => T1.Ssn, T2 => T2.Patient, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Start).Select(row => new { row.T1.Name }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(patient) FROM stay WHERE room = 112",
    "result": "context.Stays.Where(row => row.Room == 112).Select(row => row.Patient).Count();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid WHERE T3.name = \"John Dorian\"",
    "result": "context.Patients.Join(context.Prescribes, T1 => T1.Ssn, T2 => T2.Patient, (T1, T2) => new { T1, T2 }).Join(context.Physicians, joined => joined.T2.Physician, T3 => T3.EmployeeId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"John Dorian\").Select(row => row.T1.Ssn).Count();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code WHERE room = 111",
    "result": "context.Stays.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).Join(context.Prescribes, joined => joined.T2.Ssn, T3 => T3.Patient, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Medications, joined => joined.T3.Medication, T4 => T4.Code, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T1.Room == 111).Select(row => new { row.T4.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT patient FROM stay WHERE room = 111 ORDER BY staystart DESC LIMIT 1",
    "result": "context.Stays.Where(row => row.Room == 111).OrderByDescending(row => row.StayStart).Select(row => new { row.Patient }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Nurses.Join(context.Appointments, T1 => T1.EmployeeId, T2 => T2.PrepNurse, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EmployeeId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
    "result": "context.Physicians.Join(context.Patients, T1 => T1.EmployeeId, T2 => T2.Pcp, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EmployeeId }).Select(group => new { group.First().T1.Name, Count = group.Count() }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count(*) > 1",
    "result": "context.Physicians.Join(context.Patients, T1 => T1.EmployeeId, T2 => T2.Pcp, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EmployeeId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockfloor",
    "result": "context.Blocks.Join(context.Rooms, T1 => new { Pair1 = T1.BlockFloor, Pair2 = T1.BlockCode }, T2 => new { Pair1 = T2.BlockFloor, Pair2 = T2.BlockCode }, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.BlockFloor }).Select(group => new { Count = group.Count(), group.Key.BlockFloor }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockcode",
    "result": "context.Blocks.Join(context.Rooms, T1 => new { Pair1 = T1.BlockFloor, Pair2 = T1.BlockCode }, T2 => new { Pair1 = T2.BlockFloor, Pair2 = T2.BlockCode }, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.BlockCode }).Select(group => new { Count = group.Count(), group.Key.BlockCode }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT blockcode FROM room WHERE unavailable = 0",
    "result": "context.Rooms.Where(row => row.Unavailable == false).Select(row => new { row.BlockCode }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT roomtype) FROM room",
    "result": "context.Rooms.Select(row => row.RoomType).Distinct().Count();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name = \"Thesisin\"",
    "result": "context.Physicians.Join(context.Prescribes, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Medications, joined => joined.T2.Medication, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Thesisin\").Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.name , T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand = \"X\"",
    "result": "context.Physicians.Join(context.Prescribes, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Medications, joined => joined.T2.Medication, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Brand == \"X\").Select(row => new { row.T1.Name, row.T1.Position }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
    "result": "context.Medications.Join(context.Prescribes, T1 => T1.Code, T2 => T2.Medication, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Brand }).Select(group => new { Count = group.Count(), group.First().T1.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
    "result": "context.Physicians.Where(row => EF.Functions.Like(row.Position, \"%senior%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
    "result": "context.Undergoes.OrderBy(row => row.DateUndergoes).Select(row => new { row.Patient }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID WHERE T3.room = 111",
    "result": "context.Undergoes.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).Join(context.Stays, joined => joined.T1.Stay, T3 => T3.StayId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Room == 111).Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT name FROM nurse ORDER BY name",
    "result": "context.Nurses.OrderBy(row => row.Name).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID",
    "result": "context.Undergoes.Join(context.Nurses, T1 => T1.AssistingNurse, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT name FROM medication ORDER BY name",
    "result": "context.Medications.OrderBy(row => row.Name).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
    "result": "context.Physicians.Join(context.Prescribes, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Dose).Select(row => new { row.T1.Name }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT physician , department FROM affiliated_with WHERE primaryaffiliation = 1",
    "result": "context.AffiliatedWiths.Where(row => row.PrimaryAffiliation == true).Select(row => new { row.Physician, row.Department }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation = 1",
    "result": "context.AffiliatedWiths.Join(context.Departments, T1 => T1.Department, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PrimaryAffiliation == true).Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT nurse FROM on_call WHERE blockfloor = 1 AND blockcode = 1",
    "result": "context.OnCalls.Where(row => row.BlockFloor == 1 && row.BlockCode == 1).Select(row => new { row.Nurse }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT MAX(cost) , MIN(cost) , AVG(cost) FROM procedures",
    "result": "context.Procedures.GroupBy(row => 1).Select(group => new { MaxCost = group.Select(row => row.Cost).Max(), MinCost = group.Select(row => row.Cost).Min(), AverageCost = group.Select(row => row.Cost).Average() }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , cost FROM procedures ORDER BY cost DESC",
    "result": "context.Procedures.OrderByDescending(row => row.Cost).Select(row => new { row.Name, row.Cost }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
    "result": "context.Procedures.OrderBy(row => row.Cost).Select(row => new { row.Name }).Take(3).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000",
    "result": "context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Cost > 5000).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment ORDER BY T3.cost DESC LIMIT 1",
    "result": "context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T3.Cost).Select(row => new { row.T1.Name }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
    "result": "context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => (double) row.T3.Cost).Average();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
    "result": "context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => new { row.T3.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM procedures WHERE cost > 1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
    "result": "context.Procedures.Where(row => row.Cost > 1000).Select(row => row.Name).Union(context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => row.T3.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM procedures WHERE cost > 1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
    "result": "context.Procedures.Where(row => row.Cost > 1000).Select(row => row.Name).Except(context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => row.T3.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM procedures WHERE cost < 5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
    "result": "context.Procedures.Where(row => row.Cost < 5000).Select(row => row.Name).Intersect(context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => row.T3.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Psychiatry'",
    "result": "context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Surgery\").Select(row => row.T1.Name).Intersect(context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Psychiatry\").Select(row => row.T1.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'",
    "result": "context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Surgery\" || row.T3.Name == \"Psychiatry\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code WHERE T3.name = 'Procrastin-X'",
    "result": "context.Patients.Select(row => row.Name).Except(context.Patients.Join(context.Prescribes, T1 => T1.Ssn, T2 => T2.Patient, (T1, T2) => new { T1, T2 }).Join(context.Medications, joined => joined.T2.Medication, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Procrastin-X\").Select(row => row.T1.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication = T2.Code WHERE T2.name = 'Procrastin-X' )",
    "result": "context.Patients.Where(row => !context.Prescribes.Join(context.Medications, T1 => T1.Medication, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Procrastin-X\").Select(row => row.T1.Patient).Contains(row.Ssn)).Count();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM appointment",
    "result": "context.Appointments.Count();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse",
    "result": "context.Nurses.Join(context.OnCalls, T1 => T1.EmployeeId, T2 => T2.Nurse, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(num_of_component) FROM furniture",
    "result": "context.Furnitures.Select(row => row.NumOfComponent).Sum();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1",
    "result": "context.Furnitures.OrderByDescending(row => row.MarketRate).Select(row => new { row.Name, row.FurnitureId }).Take(1).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2",
    "result": "context.Furnitures.OrderByDescending(row => row.MarketRate).Select(row => row.MarketRate).Sum();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Num_of_Component , name FROM furniture WHERE Num_of_Component > 10",
    "result": "context.Furnitures.Where(row => row.NumOfComponent > 10).Select(row => new { row.NumOfComponent, row.Name }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1",
    "result": "context.Furnitures.OrderBy(row => row.MarketRate).Select(row => new { row.Name, row.NumOfComponent }).Take(1).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID WHERE t2.Price_in_Dollar < (SELECT max(Price_in_Dollar) FROM furniture_manufacte)",
    "result": "context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.PriceInDollar < context.FurnitureManufactes.Select(row => row.PriceInDollar).Max()).Select(row => new { row.t1.Name }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT open_year , name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",
    "result": "context.Manufacturers.OrderByDescending(row => row.NumOfShops).Select(row => new { row.OpenYear, row.Name }).Take(1).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops > 20",
    "result": "context.Manufacturers.Where(row => row.NumOfShops > 20).Select(row => row.NumOfFactories).Average();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , manufacturer_id FROM manufacturer ORDER BY open_year",
    "result": "context.Manufacturers.OrderBy(row => row.OpenYear).Select(row => new { row.Name, row.ManufacturerId }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , open_year FROM manufacturer WHERE num_of_shops > 10 OR Num_of_Factories < 10",
    "result": "context.Manufacturers.Where(row => row.NumOfShops > 10 || row.NumOfFactories < 10).Select(row => new { row.Name, row.OpenYear }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(num_of_shops) , avg(Num_of_Factories) FROM manufacturer WHERE open_year < 1990",
    "result": "context.Manufacturers.Where(row => row.OpenYear < 1990).GroupBy(row => 1).Select(group => new { MaxNumOfShops = group.Select(row => row.NumOfShops).Max(), AverageNumOfFactories = group.Select(row => row.NumOfFactories).Average() }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.manufacturer_id , t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1",
    "result": "context.Manufacturers.Join(context.FurnitureManufactes, t1 => t1.ManufacturerId, t2 => t2.ManufacturerId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t2.PriceInDollar).Select(row => new { row.t1.ManufacturerId, row.t1.NumOfShops }).Take(1).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id",
    "result": "context.Manufacturers.Join(context.FurnitureManufactes, t1 => t1.ManufacturerId, t2 => t2.ManufacturerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ManufacturerId }).Select(group => new { Count = group.Count(), group.First().t1.Name }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name , t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID",
    "result": "context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Select(row => new { row.t1.Name, row.t2.PriceInDollar }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Market_Rate , name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)",
    "result": "context.Furnitures.Where(row => !context.FurnitureManufactes.Select(row => row.FurnitureId).Contains(row.FurnitureId)).Select(row => new { row.MarketRate, row.Name }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component < 6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component > 10",
    "result": "context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Join(context.Manufacturers, joined => joined.t2.ManufacturerId, t3 => t3.ManufacturerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.NumOfComponent < 6).Select(row => row.t3.Name).Intersect(context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Join(context.Manufacturers, joined => joined.t2.ManufacturerId, t3 => t3.ManufacturerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.NumOfComponent > 10).Select(row => row.t3.Name)).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT local_authority , services FROM station",
    "result": "context.Stations.Select(row => new { row.LocalAuthority, row.Services }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT train_number , name FROM train ORDER BY TIME",
    "result": "context.Trains.OrderBy(row => row.Time).Select(row => new { row.TrainNumber, row.Name }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TIME , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME",
    "result": "context.Trains.Where(row => row.Destination == \"Chennai\").OrderBy(row => row.Time).Select(row => new { row.Time, row.TrainNumber }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"",
    "result": "context.Trains.Where(row => EF.Functions.Like(row.Name, \"%Express%\")).Count();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT train_number , TIME FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur'",
    "result": "context.Trains.Where(row => row.Origin == \"Chennai\" && row.Destination == \"Guruvayur\").Select(row => new { row.TrainNumber, row.Time }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT origin , count(*) FROM train GROUP BY origin",
    "result": "context.Trains.GroupBy(row => new { row.Origin }).Select(group => new { group.Key.Origin, Count = group.Count() }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(high_temperature) , day_of_week FROM weekly_weather GROUP BY day_of_week",
    "result": "context.WeeklyWeathers.GroupBy(row => new { row.DayOfWeek }).Select(group => new { AverageHighTemperature = group.Select(row => row.HighTemperature).Average(), group.Key.DayOfWeek }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(t1.low_temperature) , avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = \"Amersham\"",
    "result": "context.WeeklyWeathers.Join(context.Stations, t1 => t1.StationId, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t2.NetworkName == \"Amersham\").GroupBy(row => 1).Select(group => new { MaxLowTemperature = group.Select(row => row.t1.LowTemperature).Max(), AveragePrecipitation = group.Select(row => row.t1.Precipitation).Average() }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT services) FROM station",
    "result": "context.Stations.Select(row => row.Services).Distinct().Count();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1",
    "result": "context.WeeklyWeathers.Join(context.Stations, t1 => t1.StationId, t2 => t2.Id, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.StationId }).OrderByDescending(group => group.Average(row => row.t1.HighTemperature)).Select(group => new { group.First().t2.Id, group.First().t2.LocalAuthority }).Take(1).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id HAVING max(t1.precipitation) > 50",
    "result": "context.WeeklyWeathers.Join(context.Stations, t1 => t1.StationId, t2 => t2.Id, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.StationId }).Where(group => group.Max(row => row.t1.Precipitation) > 50).Select(group => new { group.First().t2.Id, group.First().t2.LocalAuthority }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(low_temperature) , max(wind_speed_mph) FROM weekly_weather",
    "result": "context.WeeklyWeathers.GroupBy(row => 1).Select(group => new { MinLowTemperature = group.Select(row => row.LowTemperature).Min(), MaxWindSpeedMph = group.Select(row => row.WindSpeedMph).Max() }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT origin FROM train GROUP BY origin HAVING count(*) > 1",
    "result": "context.Trains.GroupBy(row => new { row.Origin }).Where(group => group.Count() > 1).Select(group => new { group.Key.Origin }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM perpetrator",
    "result": "context.Perpetrators.Count();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Date FROM perpetrator ORDER BY Killed DESC",
    "result": "context.Perpetrators.OrderByDescending(row => row.Killed).Select(row => new { row.Date }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Injured FROM perpetrator ORDER BY Injured ASC",
    "result": "context.Perpetrators.OrderBy(row => row.Injured).Select(row => new { row.Injured }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Injured) FROM perpetrator",
    "result": "context.Perpetrators.Select(row => row.Injured).Average();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1",
    "result": "context.Perpetrators.OrderByDescending(row => row.Killed).Select(row => new { row.Location }).Take(1).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM People ORDER BY Height ASC",
    "result": "context.People.OrderBy(row => row.Height).Select(row => new { row.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID",
    "result": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country != \"China\"",
    "result": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country != \"China\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1",
    "result": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Weight).Select(row => new { row.T1.Name }).Take(1).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84",
    "result": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Height > 1.84).Select(row => row.T2.Killed).Sum();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = \"China\" OR T2.Country = \"Japan\"",
    "result": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country == \"China\" || row.T2.Country == \"Japan\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Injured DESC",
    "result": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Injured).Select(row => new { row.T1.Height }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country",
    "result": "context.Perpetrators.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Perpetrators.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*) >= 2",
    "result": "context.Perpetrators.GroupBy(row => new { row.Country }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Year DESC",
    "result": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Year).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)",
    "result": "context.People.Where(row => !context.Perpetrators.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country FROM perpetrator WHERE Injured > 50 INTERSECT SELECT Country FROM perpetrator WHERE Injured < 20",
    "result": "context.Perpetrators.Where(row => row.Injured > 50).Select(row => row.Country).Intersect(context.Perpetrators.Where(row => row.Injured < 20).Select(row => row.Country)).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT LOCATION) FROM perpetrator",
    "result": "context.Perpetrators.Select(row => row.Location).Distinct().Count();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "result": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Height).Select(row => new { row.T2.Date }).Take(1).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(YEAR) FROM perpetrator;",
    "result": "context.Perpetrators.Select(row => row.Year).Max();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM region",
    "result": "context.Regions.Count();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT region_code , region_name FROM region ORDER BY region_code",
    "result": "context.Regions.OrderBy(row => row.RegionCode).Select(row => new { row.RegionCode, row.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT region_name FROM region ORDER BY region_name",
    "result": "context.Regions.OrderBy(row => row.RegionName).Select(row => new { row.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
    "result": "context.Regions.Where(row => row.RegionName != \"Denmark\").Select(row => new { row.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM storm WHERE Number_Deaths > 0",
    "result": "context.Storms.Where(row => row.NumberDeaths > 0).Count();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , dates_active , number_deaths FROM storm WHERE number_deaths >= 1",
    "result": "context.Storms.Where(row => row.NumberDeaths >= 1).Select(row => new { row.Name, row.DatesActive, row.NumberDeaths }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(damage_millions_USD) , max(damage_millions_USD) FROM storm WHERE max_speed > 1000",
    "result": "context.Storms.Where(row => row.MaxSpeed > 1000).GroupBy(row => 1).Select(group => new { AverageDamageMillionsUsd = group.Select(row => row.DamageMillionsUsd).Average(), MaxDamageMillionsUsd = group.Select(row => row.DamageMillionsUsd).Max() }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(number_deaths) , sum(damage_millions_USD) FROM storm WHERE max_speed > (SELECT avg(max_speed) FROM storm)",
    "result": "context.Storms.Where(row => row.MaxSpeed > context.Storms.Select(row => row.MaxSpeed).Average()).GroupBy(row => 1).Select(group => new { SumNumberDeaths = group.Select(row => row.NumberDeaths).Sum(), SumDamageMillionsUsd = group.Select(row => row.DamageMillionsUsd).Sum() }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , damage_millions_USD FROM storm ORDER BY max_speed DESC",
    "result": "context.Storms.OrderByDescending(row => row.MaxSpeed).Select(row => new { row.Name, row.DamageMillionsUsd }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT region_id) FROM affected_region",
    "result": "context.AffectedRegions.Select(row => row.RegionId).Distinct().Count();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
    "result": "context.Regions.Where(row => !context.AffectedRegions.Select(row => row.RegionId).Contains(row.RegionId)).Select(row => new { row.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
    "result": "context.Regions.Join(context.AffectedRegions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.RegionId }).Select(group => new { group.First().T1.RegionName, Count = group.Count() }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id",
    "result": "context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).Select(group => new { group.First().T1.Name, Count = group.Count() }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name, group.First().T1.MaxSpeed }).Take(1).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)",
    "result": "context.Storms.Where(row => !context.AffectedRegions.Select(row => row.StormId).Contains(row.StormId)).Select(row => new { row.Name }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected) >= 10",
    "result": "context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).Where(group => group.Count() >= 2).Select(group => group.First().T1.Name).Intersect(context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).Where(group => group.Sum(row => row.T2.NumberCityAffected) >= 10).Select(group => group.First().T1.Name)).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2",
    "result": "context.Storms.Select(row => row.Name).Except(context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).Where(group => group.Count() >= 2).Select(group => group.First().T1.Name)).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10",
    "result": "context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.NumberDeaths >= 10).Select(row => new { row.T2.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark'",
    "result": "context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.RegionName == \"Denmark\").Select(row => new { row.T3.Name }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*) >= 2",
    "result": "context.Regions.Join(context.AffectedRegions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.RegionId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1",
    "result": "context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T3.NumberDeaths).Select(row => new { row.T2.RegionName }).Take(1).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'",
    "result": "context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.RegionName == \"Afghanistan\").Select(row => row.T3.Name).Intersect(context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.RegionName == \"Albania\").Select(row => row.T3.Name)).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT founder FROM manufacturers WHERE name = 'Sony'",
    "result": "context.Manufacturers.Where(row => row.Name == \"Sony\").Select(row => new { row.Founder }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT headquarter FROM manufacturers WHERE founder = 'James'",
    "result": "context.Manufacturers.Where(row => row.Founder == \"James\").Select(row => new { row.Headquarter }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , headquarter FROM manufacturers ORDER BY revenue DESC",
    "result": "context.Manufacturers.OrderByDescending(row => row.Revenue).Select(row => new { row.Name, row.Headquarter }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(revenue) , max(revenue) , sum(revenue) FROM manufacturers",
    "result": "context.Manufacturers.GroupBy(row => 1).Select(group => new { AverageRevenue = group.Select(row => row.Revenue).Average(), MaxRevenue = group.Select(row => row.Revenue).Max(), SumRevenue = group.Select(row => row.Revenue).Sum() }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM manufacturers WHERE founder = 'Andy'",
    "result": "context.Manufacturers.Where(row => row.Founder == \"Andy\").Count();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(revenue) FROM manufacturers WHERE headquarter = 'Austin'",
    "result": "context.Manufacturers.Where(row => row.Headquarter == \"Austin\").Select(row => row.Revenue).Sum();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT headquarter FROM manufacturers",
    "result": "context.Manufacturers.Select(row => new { row.Headquarter }).Distinct().ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM manufacturers WHERE headquarter = 'Tokyo' OR headquarter = 'Beijing'",
    "result": "context.Manufacturers.Where(row => row.Headquarter == \"Tokyo\" || row.Headquarter == \"Beijing\").Count();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'",
    "result": "context.Manufacturers.Where(row => EF.Functions.Like(row.Name, \"S%\")).Select(row => new { row.Founder }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150",
    "result": "context.Manufacturers.Where(row => row.Revenue >= 100 && row.Revenue <= 150).Select(row => new { row.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter = 'Tokyo' OR Headquarter = 'Taiwan'",
    "result": "context.Manufacturers.Where(row => row.Headquarter == \"Tokyo\" || row.Headquarter == \"Taiwan\").Select(row => row.Revenue).Sum();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony'",
    "result": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Creative Labs\").Select(row => row.T1.Name).Intersect(context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Sony\").Select(row => row.T1.Name)).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , headquarter , founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",
    "result": "context.Manufacturers.OrderByDescending(row => row.Revenue).Select(row => new { row.Name, row.Headquarter, row.Founder }).Take(1).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , headquarter , revenue FROM manufacturers ORDER BY revenue DESC",
    "result": "context.Manufacturers.OrderByDescending(row => row.Revenue).Select(row => new { row.Name, row.Headquarter, row.Revenue }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM manufacturers WHERE revenue > (SELECT avg(revenue) FROM manufacturers)",
    "result": "context.Manufacturers.Where(row => row.Revenue > context.Manufacturers.Select(row => (double) row.Revenue).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM manufacturers WHERE revenue < (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')",
    "result": "context.Manufacturers.Where(row => row.Revenue < context.Manufacturers.Where(row => row.Headquarter == \"Austin\").Select(row => row.Revenue).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(revenue) FROM manufacturers WHERE revenue > (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')",
    "result": "context.Manufacturers.Where(row => row.Revenue > context.Manufacturers.Where(row => row.Headquarter == \"Austin\").Select(row => row.Revenue).Min()).Select(row => row.Revenue).Sum();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(revenue) , founder FROM manufacturers GROUP BY founder",
    "result": "context.Manufacturers.GroupBy(row => new { row.Founder }).Select(group => new { SumRevenue = group.Select(row => row.Revenue).Sum(), group.Key.Founder }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , max(revenue) , Headquarter FROM manufacturers GROUP BY Headquarter",
    "result": "context.Manufacturers.GroupBy(row => new { row.Headquarter }).Select(group => new { group.First().Name, MaxRevenue = group.Select(row => row.Revenue).Max(), group.Key.Headquarter }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(revenue) , name FROM manufacturers GROUP BY name",
    "result": "context.Manufacturers.GroupBy(row => new { row.Name }).Select(group => new { SumRevenue = group.Select(row => row.Revenue).Sum(), group.Key.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.price) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
    "result": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { AveragePrice = group.Select(row => row.T1.Price).Average(), group.Key.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT T1.name) , T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.Headquarter",
    "result": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Headquarter }).Select(group => new { CountDistinctName = group.Select(row => row.T1.Name).Distinct().Count(), group.Key.Headquarter }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony')",
    "result": "context.Products.Where(row => !context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Sony\").Select(row => row.T1.Name).Contains(row.Name)).Select(row => row.Name).Distinct().Count();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T1.name = 'DVD drive'",
    "result": "context.Manufacturers.Select(row => row.Name).Except(context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"DVD drive\").Select(row => row.T2.Name)).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
    "result": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { Count = group.Count(), group.Key.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM Products",
    "result": "context.Products.Select(row => new { row.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , price FROM products",
    "result": "context.Products.Select(row => new { row.Name, row.Price }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM products WHERE price <= 200",
    "result": "context.Products.Where(row => row.Price <= 200).Select(row => new { row.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM products WHERE price BETWEEN 60 AND 120",
    "result": "context.Products.Where(row => row.Price >= 60 && row.Price <= 120).Select(row => new { row..Code, row..Name, row..Price, row..Manufacturer }).ToList();",
    "db_name": "manufactory_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,138): error CS0119: 'Manufacturer' is a type, which is not valid in the given context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    12 Error(s)\n\nTime Elapsed 00:00:01.37"
  },
  {
    "query": "SELECT avg(price) FROM products",
    "result": "context.Products.Select(row => row.Price).Average();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(price) FROM products WHERE Manufacturer = 2",
    "result": "context.Products.Where(row => row.Manufacturer == 2).Select(row => row.Price).Average();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products WHERE price >= 180",
    "result": "context.Products.Where(row => row.Price >= 180).Count();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , price FROM products WHERE price >= 180 ORDER BY price DESC , name ASC",
    "result": "context.Products.Where(row => row.Price >= 180).OrderByDescending(row => row.Price).ThenBy(row => row.Name).Select(row => new { row.Name, row.Price }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT AVG(Price) , Manufacturer FROM Products GROUP BY Manufacturer",
    "result": "context.Products.GroupBy(row => new { row.Manufacturer }).Select(group => new { AveragePrice = group.Select(row => row.Price).Average(), group.Key.Manufacturer }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.Price) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name",
    "result": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { AveragePrice = group.Select(row => row.T1.Price).Average(), group.Key.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.Price) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
    "result": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { AveragePrice = group.Select(row => row.T1.Price).Average(), group.Key.Name }).Where(group => group.AveragePrice >= 150).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , price FROM Products ORDER BY price ASC LIMIT 1",
    "result": "context.Products.OrderBy(row => row.Price).Select(row => new { row.Name, row.Price }).Take(1).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM HOTELS",
    "result": "context.Hotels.Count();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT price_range FROM HOTELS",
    "result": "context.Hotels.Select(row => new { row.PriceRange }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Location_Name FROM LOCATIONS",
    "result": "context.Locations.Select(row => new { row.LocationName }).Distinct().ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name , Other_Details FROM Staff",
    "result": "context.Staff.Select(row => new { row.Name, row.OtherDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Tourist_Details FROM VISITORS",
    "result": "context.Visitors.Select(row => new { row.TouristDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT price_range FROM HOTELS WHERE star_rating_code = \"5\"",
    "result": "context.Hotels.Where(row => row.StarRatingCode == \"5\").Select(row => new { row.PriceRange }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code = \"5\" AND pets_allowed_yn = 1",
    "result": "context.Hotels.Where(row => row.StarRatingCode == \"5\" && row.PetsAllowedYn == \"1\").Select(row => (double) row.PriceRange).Average();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Address FROM LOCATIONS WHERE Location_Name = \"UK Gallery\"",
    "result": "context.Locations.Where(row => row.LocationName == \"UK Gallery\").Select(row => new { row.Address }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name = \"UK Gallery\"",
    "result": "context.Locations.Where(row => row.LocationName == \"UK Gallery\").Select(row => new { row.OtherDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"",
    "result": "context.Locations.Where(row => EF.Functions.Like(row.LocationName, \"%film%\")).Select(row => new { row.LocationName }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT Name) FROM PHOTOS",
    "result": "context.Photos.Select(row => row.Name).Distinct().Count();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Visit_Date FROM VISITS",
    "result": "context.Visits.Select(row => new { row.VisitDate }).Distinct().ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\"",
    "result": "context.TouristAttractions.Where(row => row.HowToGetThere == \"bus\").Select(row => new { row.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name , Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\" OR How_to_Get_There = \"walk\"",
    "result": "context.TouristAttractions.Where(row => row.HowToGetThere == \"bus\" || row.HowToGetThere == \"walk\").Select(row => new { row.Name, row.OpeningHours }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.price_range > 10000",
    "result": "context.Hotels.Join(context.RefHotelStarRatings, T1 => T1.StarRatingCode, T2 => T2.StarRatingCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PriceRange > 10000).Select(row => new { row.T2.StarRatingDescription }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID",
    "result": "context.Museums.Join(context.TouristAttractions, T1 => T1.MuseumId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.MuseumDetails, row.T2.OpeningHours }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = \"game1\"",
    "result": "context.Photos.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"game1\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"film festival\"",
    "result": "context.Photos.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"film festival\").Select(row => new { row.T1.Name, row.T1.Description }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Royal_Family_Details , T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID",
    "result": "context.RoyalFamilies.Join(context.TouristAttractions, T1 => T1.RoyalFamilyId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.RoyalFamilyDetails, row.T2.HowToGetThere }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\"",
    "result": "context.Shops.Join(context.TouristAttractions, T1 => T1.ShopId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.HowToGetThere == \"walk\").Select(row => new { row.T1.ShopDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"US museum\"",
    "result": "context.Staff.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"US museum\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\" OR T2.How_to_Get_There = \"bus\"",
    "result": "context.StreetMarkets.Join(context.TouristAttractions, T1 => T1.MarketId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.HowToGetThere == \"walk\" || row.T2.HowToGetThere == \"bus\").Select(row => new { row.T1.MarketDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Visit_Date , T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE T1.Tourist_Details = \"Vincent\"",
    "result": "context.Visitors.Join(context.Visits, T1 => T1.TouristId, T2 => T2.TouristId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.TouristDetails == \"Vincent\").Select(row => new { row.T2.VisitDate, row.T2.VisitDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = \"Vincent\"",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Join(context.Visitors, joined => joined.T2.TouristId, T3 => T3.TouristId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.TouristDetails == \"Vincent\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" OR T2.Tourist_Details = \"Vivian\"",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Vincent\" || row.T2.TouristDetails == \"Vivian\").Select(row => new { row.T1.Name, row.T3.VisitDate }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code",
    "result": "context.Hotels.GroupBy(row => new { row.StarRatingCode }).Select(group => new { group.Key.StarRatingCode, AveragePriceRange = group.Select(row => row.PriceRange).Average() }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT pets_allowed_yn , avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
    "result": "context.Hotels.GroupBy(row => new { row.PetsAllowedYn }).Select(group => new { group.Key.PetsAllowedYn, AveragePriceRange = group.Select(row => row.PriceRange).Average() }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT hotel_id , star_rating_code FROM HOTELS ORDER BY price_range ASC",
    "result": "context.Hotels.OrderBy(row => row.PriceRange).Select(row => new { row.HotelId, row.StarRatingCode }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3",
    "result": "context.Hotels.OrderByDescending(row => row.PriceRange).Select(row => new { row.OtherHotelDetails }).Take(3).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT other_hotel_details , star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
    "result": "context.Hotels.OrderBy(row => row.PriceRange).Select(row => new { row.OtherHotelDetails, row.StarRatingCode }).Take(3).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.TouristAttractions.GroupBy(row => new { row.HowToGetThere }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.HowToGetThere }).Take(1).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Attraction_Type_Description , T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.RefAttractionTypes.Join(context.TouristAttractions, T1 => T1.AttractionTypeCode, T2 => T2.AttractionTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AttractionTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.AttractionTypeDescription, group.Key.AttractionTypeCode }).Take(1).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
    "result": "context.TouristAttractions.GroupBy(row => new { row.HowToGetThere }).Select(group => new { group.Key.HowToGetThere, Count = group.Count() }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T2.Tourist_Attraction_ID , COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId, Count = group.Count() }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) >= 2",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) <= 1",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Where(group => group.Count() <= 1).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"660 Shea Crescent\" OR T2.How_to_Get_There = \"walk\"",
    "result": "context.Locations.Join(context.TouristAttractions, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Address == \"660 Shea Crescent\" || row.T2.HowToGetThere == \"walk\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"254 Ottilie Junction\" OR T2.How_to_Get_There = \"bus\"",
    "result": "context.Locations.Join(context.TouristAttractions, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Address == \"254 Ottilie Junction\" || row.T2.HowToGetThere == \"bus\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Marcelle\"",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Vincent\").Select(row => row.T1.Name).Intersect(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Marcelle\").Select(row => row.T1.Name)).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Rosalind\"",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Alison\").Select(row => row.T1.Name).Except(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Rosalind\").Select(row => row.T1.Name)).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
    "result": "context.Visitors.Where(row => !context.Visits.Select(row => row.TouristId).Contains(row.TouristId)).Count();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(enr) FROM College",
    "result": "context.Colleges.Select(row => row.Enr).Sum();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(enr) FROM College",
    "result": "context.Colleges.Select(row => row.Enr).Average();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM College",
    "result": "context.Colleges.Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Player WHERE HS > 1000",
    "result": "context.Players.Where(row => row.Hs > 1000).Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM College WHERE enr > 15000",
    "result": "context.Colleges.Where(row => row.Enr > 15000).Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(HS) FROM Player",
    "result": "context.Players.Select(row => row.Hs).Average();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT pName , HS FROM Player WHERE HS < 1500",
    "result": "context.Players.Where(row => row.Hs < 1500).Select(row => new { row.PName, row.Hs }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT cName) FROM tryout",
    "result": "context.Tryouts.Select(row => row.CName).Distinct().Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT pPos) FROM tryout",
    "result": "context.Tryouts.Select(row => row.PPos).Distinct().Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM tryout WHERE decision = 'yes'",
    "result": "context.Tryouts.Where(row => row.Decision == \"yes\").Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM tryout WHERE pPos = 'goalie'",
    "result": "context.Tryouts.Where(row => row.PPos == \"goalie\").Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(HS) , max(HS) , min(HS) FROM Player",
    "result": "context.Players.GroupBy(row => 1).Select(group => new { AverageHs = group.Select(row => row.Hs).Average(), MaxHs = group.Select(row => row.Hs).Max(), MinHs = group.Select(row => row.Hs).Min() }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(enr) FROM College WHERE state = 'FL'",
    "result": "context.Colleges.Where(row => row.State == \"FL\").Select(row => row.Enr).Average();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500",
    "result": "context.Players.Where(row => row.Hs >= 500 && row.Hs <= 1500).Select(row => new { row.PName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'",
    "result": "context.Players.Where(row => EF.Functions.Like(row.PName, \"%a%\")).Select(row => new { row.PName }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName , enr FROM College WHERE enr > 10000 AND state = \"LA\"",
    "result": "context.Colleges.Where(row => row.Enr > 10000 && row.State == \"LA\").Select(row => new { row.CName, row.Enr }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM College ORDER BY enr",
    "result": "context.Colleges.OrderBy(row => row.Enr).Select(row => new { row..CName, row..State, row..Enr }).ToList();",
    "db_name": "soccer_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,102): error CS0103: The name 'Enr' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    9 Error(s)\n\nTime Elapsed 00:00:01.31"
  },
  {
    "query": "SELECT cName FROM College WHERE enr > 18000 ORDER BY cName",
    "result": "context.Colleges.Where(row => row.Enr > 18000).OrderBy(row => row.CName).Select(row => new { row.CName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT pName FROM Player WHERE yCard = 'yes' ORDER BY HS DESC",
    "result": "context.Players.Where(row => row.YCard == \"yes\").OrderByDescending(row => row.Hs).Select(row => new { row.PName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
    "result": "context.Tryouts.OrderBy(row => row.CName).Select(row => new { row.CName }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Tryouts.GroupBy(row => new { row.PPos }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PPos }).Take(1).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "result": "context.Tryouts.GroupBy(row => new { row.CName }).Select(group => new { Count = group.Count(), group.Key.CName }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(T2.HS) , T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY T1.pPos",
    "result": "context.Tryouts.Join(context.Players, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PPos }).Select(group => new { MinHs = group.Select(row => row.T2.Hs).Min(), group.Key.PPos }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
    "result": "context.Colleges.OrderByDescending(row => row.Enr).Select(row => new { row.CName }).Take(3).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName , state , min(enr) FROM college GROUP BY state",
    "result": "context.Colleges.GroupBy(row => new { row.State }).Select(group => new { group.First().CName, group.Key.State, MinEnr = group.Select(row => row.Enr).Min() }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName",
    "result": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.State }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'",
    "result": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\").Select(row => new { row.T1.State }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.pName , T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
    "result": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\").Select(row => new { row.T1.PName, row.T2.CName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID ORDER BY T1.pName",
    "result": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T1.PName).Select(row => new { row.T1.PName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.pName , T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
    "result": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\").Select(row => new { row.T1.PName, row.T1.Hs }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'striker'",
    "result": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"striker\").Select(row => new { row.T1.State }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' AND T2.pPos = 'striker'",
    "result": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\" && row.T2.PPos == \"striker\").Select(row => new { row.T1.PName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID WHERE T3.pName = 'Charles'",
    "result": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Join(context.Players, joined => joined.T2.PId, T3 => T3.PId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PName == \"Charles\").Select(row => new { row.T1.State }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.HS) , max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
    "result": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\").GroupBy(row => 1).Select(group => new { AverageHsT1 = group.Select(row => row.T1.Hs).Average(), MaxHsT1 = group.Select(row => row.T1.Hs).Max() }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'no'",
    "result": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"no\").Select(row => row.T1.Hs).Average();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(T1.HS) , pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS > 1000 GROUP BY T2.pPos",
    "result": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Hs > 1000).GroupBy(row => new { row.T2.PPos }).Select(group => new { MaxHs = group.Select(row => row.T1.Hs).Max(), group.Key.PPos }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.cName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T2.pName LIKE 'D%'",
    "result": "context.Tryouts.Join(context.Players, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.PName, \"D%\")).Select(row => new { row.T1.CName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName FROM tryout WHERE decision = 'yes' AND pPos = 'goalie'",
    "result": "context.Tryouts.Where(row => row.Decision == \"yes\" && row.PPos == \"goalie\").Select(row => new { row.CName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T1.cName = (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)",
    "result": "context.Tryouts.Join(context.Players, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CName == context.Colleges.OrderByDescending(row => row.Enr).Select(row => row.CName).Take(1).First()).Select(row => new { row.T2.PName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.state , T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'",
    "result": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\").Select(row => new { row.T1.State, row.T1.Enr }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName FROM College WHERE enr < 13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr > 15000 AND state = \"LA\"",
    "result": "context.Colleges.Where(row => row.Enr < 13000 && row.State == \"AZ\").Select(row => row.CName).Union(context.Colleges.Where(row => row.Enr > 15000 && row.State == \"LA\").Select(row => row.CName)).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid'",
    "result": "context.Tryouts.Where(row => row.PPos == \"goalie\").Select(row => row.CName).Intersect(context.Tryouts.Where(row => row.PPos == \"mid\").Select(row => row.CName)).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid'",
    "result": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"goalie\").Select(row => row.T1.State).Intersect(context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"mid\").Select(row => row.T1.State)).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT(*) FROM (SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid')",
    "result": "context.Tryouts.Where(row => row.PPos == \"goalie\").Select(row => row.CName).Intersect(context.Tryouts.Where(row => row.PPos == \"mid\").Select(row => row.CName)).Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName FROM tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM tryout WHERE pPos = 'goalie'",
    "result": "context.Tryouts.Where(row => row.PPos == \"mid\").Select(row => row.CName).Except(context.Tryouts.Where(row => row.PPos == \"goalie\").Select(row => row.CName)).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'",
    "result": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"mid\").Select(row => row.T1.State).Except(context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"goalie\").Select(row => row.T1.State)).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie')",
    "result": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"mid\").Select(row => row.T1.State).Except(context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"goalie\").Select(row => row.T1.State)).Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT state FROM college WHERE enr < (SELECT max(enr) FROM college)",
    "result": "context.Colleges.Where(row => row.Enr < context.Colleges.Select(row => row.Enr).Max()).Select(row => new { row.State }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT cName FROM college WHERE enr > (SELECT min(enr) FROM college WHERE state = 'FL')",
    "result": "context.Colleges.Where(row => row.Enr > context.Colleges.Where(row => row.State == \"FL\").Select(row => row.Enr).Min()).Select(row => new { row.CName }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName FROM college WHERE enr > (SELECT max(enr) FROM college WHERE state = 'FL')",
    "result": "context.Colleges.Where(row => row.Enr > context.Colleges.Where(row => row.State == \"FL\").Select(row => row.Enr).Max()).Select(row => new { row.CName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos = \"goalie\")",
    "result": "context.Colleges.Where(row => !context.Tryouts.Where(row => row.PPos == \"goalie\").Select(row => row.CName).Contains(row.CName)).Select(row => row.Enr).Sum();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT state) FROM college WHERE enr > (SELECT avg(enr) FROM college)",
    "result": "context.Colleges.Where(row => row.Enr > context.Colleges.Select(row => row.Enr).Average()).Select(row => row.State).Distinct().Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT state) FROM college WHERE enr < (SELECT avg(enr) FROM college)",
    "result": "context.Colleges.Where(row => row.Enr < context.Colleges.Select(row => row.Enr).Average()).Select(row => row.State).Distinct().Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM station WHERE lat < 37.5",
    "result": "context.Stations.Where(row => row.Lat < 37.5).Select(row => new { row.Name }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city , max(lat) FROM station GROUP BY city",
    "result": "context.Stations.GroupBy(row => new { row.City }).Select(group => new { group.Key.City, MaxLat = group.Select(row => row.Lat).Max() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3",
    "result": "context.Trips.OrderBy(row => row.Id).Select(row => new { row.StartStationName, row.EndStationName }).Take(3).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(lat) , avg(long) FROM station WHERE city = \"San Jose\"",
    "result": "context.Stations.Where(row => row.City == \"San Jose\").GroupBy(row => 1).Select(group => new { AverageLat = group.Select(row => row.Lat).Average(), AverageLong = group.Select(row => row.Long).Average() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
    "result": "context.Trips.OrderBy(row => row.Duration).Select(row => new { row.Id }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(duration) , max(duration) FROM trip WHERE bike_id = 636",
    "result": "context.Trips.Where(row => row.BikeId == 636).GroupBy(row => 1).Select(group => new { SumDuration = group.Select(row => row.Duration).Sum(), MaxDuration = group.Select(row => row.Duration).Max() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT bike_id) FROM trip",
    "result": "context.Trips.Select(row => row.BikeId).Distinct().Count();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT city) FROM station",
    "result": "context.Stations.Select(row => row.City).Distinct().Count();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT(*) FROM station WHERE city = \"Mountain View\"",
    "result": "context.Stations.Where(row => row.City == \"Mountain View\").Count();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7",
    "result": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BikesAvailable == 7).Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Trips.Where(row => EF.Functions.Like(row.StartDate, \"8/%\")).GroupBy(row => new { row.StartStationName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StartStationName, group.First().StartStationId }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Trips.Where(row => row.ZipCode == \"94002\").GroupBy(row => new { row.BikeId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BikeId }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1",
    "result": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Duration).Select(row => new { row.T1.Lat, row.T1.Long, row.T1.City }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available) > 14 UNION SELECT name , id FROM station WHERE installation_date LIKE \"12/%\"",
    "result": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StationId }).Where(group => group.Average(row => row.T2.BikesAvailable) > 14).Select(group => new { group.First().T1.Name, group.First().T1.Id }).Union(context.Stations.Where(row => EF.Functions.Like(row.InstallationDate, \"12/%\")).Select(row => new { row.Name, row.Id })).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
    "result": "context.Weathers.Where(row => row.ZipCode == 94107).GroupBy(row => new { row.CloudCover }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CloudCover }).Take(3).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available) > 10)",
    "result": "context.Stations.Where(row => !context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Max(row => row.BikesAvailable) > 10).Select(group => group.Key.StationId).Contains(row.Id)).Select(row => (double) row.Long).Average();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id",
    "result": "context.Trips.Join(context.Stations, T1 => T1.EndStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Id, row.T2.InstallationDate }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1",
    "result": "context.Trips.Join(context.Stations, T1 => T1.StartStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.DockCount).Select(row => new { row.T1.Id }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != \"San Francisco\"",
    "result": "context.Trips.Join(context.Stations, T1 => T1.EndStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City != \"San Francisco\").Count();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
    "result": "context.Weathers.Where(row => row.ZipCode == 94107 && row.Events != \"Fog\" && row.Events != \"Rain\").Select(row => new { row.Date }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\"",
    "result": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StationId }).Where(group => group.Average(row => row.T2.BikesAvailable) > 10).Select(group => group.First().T1.Name).Except(context.Stations.Where(row => row.City == \"San Jose\").Select(row => row.Name)).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , lat , city FROM station ORDER BY lat LIMIT 1",
    "result": "context.Stations.OrderBy(row => row.Lat).Select(row => new { row.Name, row.Lat, row.City }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
    "result": "context.Weathers.OrderByDescending(row => row.MaxGustSpeedMph).Select(row => new { row.Date, row.MeanTemperatureF, row.MeanHumidity }).Take(3).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city , COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15",
    "result": "context.Stations.GroupBy(row => new { row.City }).Where(group => group.Count() >= 15).Select(group => new { group.Key.City, Count = group.Count() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200",
    "result": "context.Trips.GroupBy(row => new { row.StartStationName }).Where(group => group.Count() >= 200).Select(group => new { group.First().StartStationId, group.Key.StartStationName }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
    "result": "context.Stations.GroupBy(row => new { row.City }).OrderByDescending(group => group.Max(row => row.Lat)).Select(group => new { group.Key.City }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date , cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
    "result": "context.Weathers.OrderByDescending(row => row.CloudCover).Select(row => new { row.Date, row.CloudCover }).Take(5).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
    "result": "context.Trips.OrderByDescending(row => row.Duration).Select(row => new { row.Id, row.Duration }).Take(3).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
    "result": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StartStationId }).Select(group => new { group.First().T1.Name, group.First().T1.Long, AverageDuration = group.Select(row => row.T2.Duration).Average() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id",
    "result": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.EndStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.EndStationId }).Select(group => new { group.OrderBy(row => row.T2.Duration).First().T1.Name, group.OrderBy(row => row.T2.Duration).First().T1.Lat, MinDuration = group.Select(row => row.T2.Duration).Min() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100",
    "result": "context.Trips.Where(row => row.Duration < 100).Select(row => new { row.StartStationName }).Distinct().ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = 94103)",
    "result": "context.Trips.Where(row => row.Duration >= context.Trips.Where(row => row.ZipCode == \"94103\").Select(row => row.Duration).Average()).Select(row => new { row.Id }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12",
    "result": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BikesAvailable > 12).Select(row => new { row.T1.Id, row.T1.Name }).Distinct().ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 100",
    "result": "context.Stations.Where(row => row.City == \"Palo Alto\").Select(row => row.Name).Except(context.Trips.GroupBy(row => new { row.EndStationName }).Where(group => group.Count() > 100).Where(group => group.Key.EndStationName.HasValue).Select(group => group.Key.EndStationName.Value)).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,231): error CS1061: 'string' does not contain a definition for 'HasValue' and no accessible extension method 'HasValue' accepting a first argument of type 'string' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.45"
  },
  {
    "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = \"Mountain View\" AND T3.city = \"Palo Alto\"",
    "result": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).Join(context.Trips, joined => joined.T2.Id, T4 => T4.Id, (joined, T4) => new { joined.T1, joined.T2, T4 }).Join(context.Stations, joined => joined.T4.EndStationId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, joined.T4, T3 }).Where(row => row.T1.City == \"Mountain View\" && row.T3.City == \"Palo Alto\").Count();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.lat) , avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id",
    "result": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => 1).Select(group => new { AverageLat = group.Select(row => row.T1.Lat).Average(), AverageLong = group.Select(row => row.T1.Long).Average() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM pilot",
    "result": "context.Pilots.Count();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
    "result": "context.Pilots.OrderBy(row => row.Rank).Select(row => new { row.PilotName }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT POSITION , Team FROM pilot",
    "result": "context.Pilots.Select(row => new { row.Position, row.Team }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT POSITION FROM pilot WHERE Age > 30",
    "result": "context.Pilots.Where(row => row.Age > 30).Select(row => new { row.Position }).Distinct().ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Pilot_name FROM pilot WHERE Team = \"Bradley\" OR Team = \"Fordham\"",
    "result": "context.Pilots.Where(row => row.Team == \"Bradley\" || row.Team == \"Fordham\").Select(row => new { row.PilotName }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1",
    "result": "context.Pilots.OrderBy(row => row.Rank).Select(row => new { row.JoinYear }).Take(1).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "result": "context.Pilots.GroupBy(row => new { row.Nationality }).Select(group => new { group.Key.Nationality, Count = group.Count() }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Pilots.GroupBy(row => new { row.Nationality }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Nationality }).Take(1).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT POSITION FROM pilot WHERE Join_Year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year > 2005",
    "result": "context.Pilots.Where(row => row.JoinYear < 2000).Select(row => row.Position).Intersect(context.Pilots.Where(row => row.JoinYear > 2005).Select(row => row.Position)).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Pilot_name , T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID",
    "result": "context.PilotRecords.Join(context.Aircraft, T1 => T1.AircraftId, T2 => T2.AircraftId, (T1, T2) => new { T1, T2 }).Join(context.Pilots, joined => joined.T1.PilotId, T3 => T3.PilotId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.PilotName, row.T2.Model }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Pilot_name , T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID ORDER BY T3.Rank",
    "result": "context.PilotRecords.Join(context.Aircraft, T1 => T1.AircraftId, T2 => T2.AircraftId, (T1, T2) => new { T1, T2 }).Join(context.Pilots, joined => joined.T1.PilotId, T3 => T3.PilotId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T3.Rank).Select(row => new { row.T3.PilotName, row.T2.FleetSeries }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID WHERE T3.Age < 34",
    "result": "context.PilotRecords.Join(context.Aircraft, T1 => T1.AircraftId, T2 => T2.AircraftId, (T1, T2) => new { T1, T2 }).Join(context.Pilots, joined => joined.T1.PilotId, T3 => T3.PilotId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Age < 34).Select(row => new { row.T2.FleetSeries }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Pilot_name , COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name",
    "result": "context.PilotRecords.Join(context.Pilots, T1 => T1.PilotId, T2 => T2.PilotId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.PilotName }).Select(group => new { group.Key.PilotName, Count = group.Count() }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Pilot_name , COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*) > 1",
    "result": "context.PilotRecords.Join(context.Pilots, T1 => T1.PilotId, T2 => T2.PilotId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.PilotName }).Where(group => group.Count() > 1).Select(group => new { group.Key.PilotName, Count = group.Count() }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)",
    "result": "context.Pilots.Where(row => !context.PilotRecords.Select(row => row.PilotId).Contains(row.PilotId)).Select(row => new { row.PilotName }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Accounts",
    "result": "context.Accounts.Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
    "result": "context.Accounts.Select(row => row.CustomerId).Distinct().Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT account_id , date_account_opened , account_name , other_account_details FROM Accounts",
    "result": "context.Accounts.Select(row => new { row.AccountId, row.DateAccountOpened, row.AccountName, row.OtherAccountDetails }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.account_id , T1.date_account_opened , T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'",
    "result": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CustomerFirstName == \"Meaghan\").Select(row => new { row.T1.AccountId, row.T1.DateAccountOpened, row.T1.AccountName, row.T1.OtherAccountDetails }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Meaghan\" AND T2.customer_last_name = \"Keeling\"",
    "result": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CustomerFirstName == \"Meaghan\" && row.T2.CustomerLastName == \"Keeling\").Select(row => new { row.T1.AccountName, row.T1.OtherAccountDetails }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"900\"",
    "result": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.AccountName == \"900\").Select(row => new { row.T2.CustomerFirstName, row.T2.CustomerLastName }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
    "result": "context.Customers.Where(row => !context.Accounts.Select(row => row.CustomerId).Contains(row.CustomerId)).Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.customer_first_name , T1.customer_last_name , T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
    "result": "context.Customers.Join(context.Accounts, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.CustomerFirstName, row.T1.CustomerLastName, row.T1.PhoneNumber }).Distinct().ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts",
    "result": "context.Customers.Select(row => row.CustomerId).Except(context.Accounts.Select(row => row.CustomerId)).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , customer_id FROM Accounts GROUP BY customer_id",
    "result": "context.Accounts.GroupBy(row => new { row.CustomerId }).Select(group => new { Count = group.Count(), group.Key.CustomerId }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CustomerId, group.First().T2.CustomerFirstName, group.First().T2.CustomerLastName }).Take(1).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
    "result": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Select(group => new { group.Key.CustomerId, group.First().T2.CustomerFirstName, group.First().T2.CustomerLastName, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2",
    "result": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T2.CustomerFirstName, group.Key.CustomerId }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Customers",
    "result": "context.Customers.Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT gender , count(*) FROM Customers GROUP BY gender",
    "result": "context.Customers.GroupBy(row => new { row.Gender }).Select(group => new { group.Key.Gender, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Financial_transactions",
    "result": "context.FinancialTransactions.Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = \"337\"",
    "result": "context.FinancialTransactions.Join(context.Accounts, T1 => T1.AccountId, T2 => T2.AccountId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AccountName == \"337\").Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(transaction_amount) , min(transaction_amount) , max(transaction_amount) , sum(transaction_amount) FROM Financial_transactions",
    "result": "context.FinancialTransactions.GroupBy(row => 1).Select(group => new { AverageTransactionAmount = group.Select(row => (double) row.TransactionAmount).Average(), MinTransactionAmount = group.Select(row => (double) row.TransactionAmount).Min(), MaxTransactionAmount = group.Select(row => (double) row.TransactionAmount).Max(), SumTransactionAmount = group.Select(row => (double) row.TransactionAmount).Sum() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
    "result": "context.FinancialTransactions.GroupBy(row => new { row.TransactionType }).Select(group => new { group.Key.TransactionType, SumTransactionAmount = group.Select(row => (double) row.TransactionAmount).Sum() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.account_name , T1.account_id , count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id",
    "result": "context.FinancialTransactions.Join(context.Accounts, T1 => T1.AccountId, T2 => T2.AccountId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AccountId }).Select(group => new { group.First().T2.AccountName, group.Key.AccountId, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.FinancialTransactions.GroupBy(row => new { row.AccountId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AccountId }).Take(1).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count(*) >= 4",
    "result": "context.FinancialTransactions.Join(context.Accounts, T1 => T1.AccountId, T2 => T2.AccountId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AccountId }).Where(group => group.Count() >= 4).Select(group => new { group.Key.AccountId, group.First().T2.AccountName }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT product_size FROM Products",
    "result": "context.Products.Select(row => new { row.ProductSize }).Distinct().ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT product_color FROM Products",
    "result": "context.Products.Select(row => new { row.ProductColor }).Distinct().ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT invoice_number , count(*) FROM Financial_transactions GROUP BY invoice_number",
    "result": "context.FinancialTransactions.GroupBy(row => new { row.InvoiceNumber }).Select(group => new { group.Key.InvoiceNumber, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.invoice_number , T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
    "result": "context.FinancialTransactions.Join(context.Invoices, T1 => T1.InvoiceNumber, T2 => T2.InvoiceNumber, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.InvoiceNumber }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.InvoiceNumber, group.First().T2.InvoiceDate }).Take(1).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Invoices",
    "result": "context.Invoices.Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.invoice_date , T1.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id",
    "result": "context.Invoices.Join(context.Orders, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.InvoiceDate, row.T1.OrderId, row.T2.OrderDetails }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT order_id , count(*) FROM Invoices GROUP BY order_id",
    "result": "context.Invoices.GroupBy(row => new { row.OrderId }).Select(group => new { group.Key.OrderId, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count(*) > 2",
    "result": "context.Invoices.Join(context.Orders, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.OrderId }).Where(group => group.Count() > 2).Select(group => new { group.Key.OrderId, group.First().T2.OrderDetails }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.customer_last_name , T1.customer_id , T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Orders.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.CustomerLastName, group.Key.CustomerId, group.First().T2.PhoneNumber }).Take(1).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id",
    "result": "context.Products.Select(row => row.ProductName).Except(context.Products.Join(context.OrderItems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.ProductName)).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT order_id , count(*) FROM Order_items GROUP BY order_id",
    "result": "context.OrderItems.GroupBy(row => new { row.OrderId }).Select(group => new { group.Key.OrderId, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_id , count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
    "result": "context.OrderItems.GroupBy(row => new { row.ProductId }).Select(group => new { group.Key.ProductId, CountDistinctOrderId = group.Select(row => row.OrderId).Distinct().Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.product_name , count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name",
    "result": "context.OrderItems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Orders, joined => joined.T1.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T2.ProductName }).Select(group => new { group.Key.ProductName, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT order_id , count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
    "result": "context.OrderItems.GroupBy(row => new { row.OrderId }).Select(group => new { group.Key.OrderId, CountDistinctProductId = group.Select(row => row.ProductId).Distinct().Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
    "result": "context.Products.Where(row => !context.OrderItems.Select(row => row.ProductId).Contains(row.ProductId)).Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM head WHERE age > 56",
    "result": "context.Heads.Where(row => row.Age > 56).Count();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , born_state , age FROM head ORDER BY age",
    "result": "context.Heads.OrderBy(row => row.Age).Select(row => new { row.Name, row.BornState, row.Age }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT creation , name , budget_in_billions FROM department",
    "result": "context.Departments.Select(row => new { row.Creation, row.Name, row.BudgetInBillions }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(budget_in_billions) , min(budget_in_billions) FROM department",
    "result": "context.Departments.GroupBy(row => 1).Select(group => new { MaxBudgetInBillions = group.Select(row => row.BudgetInBillions).Max(), MinBudgetInBillions = group.Select(row => row.BudgetInBillions).Min() }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
    "result": "context.Departments.Where(row => row.Ranking >= 10 && row.Ranking <= 15).Select(row => (double) row.NumEmployees).Average();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM head WHERE born_state != 'California'",
    "result": "context.Heads.Where(row => row.BornState != \"California\").Select(row => new { row.Name }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'",
    "result": "context.Departments.Join(context.Managements, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Heads, joined => joined.T2.HeadId, T3 => T3.HeadId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.BornState == \"Alabama\").Select(row => new { row.T1.Creation }).Distinct().ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*) >= 3",
    "result": "context.Heads.GroupBy(row => new { row.BornState }).Where(group => group.Count() >= 3).Select(group => new { group.Key.BornState }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Departments.GroupBy(row => new { row.Creation }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Creation }).Take(1).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'",
    "result": "context.Departments.Join(context.Managements, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TemporaryActing == \"Yes\").Select(row => new { row.T1.Name, row.T1.NumEmployees }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
    "result": "context.Managements.Select(row => row.TemporaryActing).Distinct().Count();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
    "result": "context.Departments.Where(row => !context.Managements.Select(row => row.DepartmentId).Contains(row.DepartmentId)).Count();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'",
    "result": "context.Managements.Join(context.Heads, T2 => T2.HeadId, T1 => T1.HeadId, (T2, T1) => new { T2, T1 }).Where(row => row.T2.TemporaryActing == \"Yes\").Select(row => new { row.T1.Age }).Distinct().ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'",
    "result": "context.Departments.Join(context.Managements, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Heads, joined => joined.T2.HeadId, T3 => T3.HeadId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Treasury\").Select(row => row.T3.BornState).Intersect(context.Departments.Join(context.Managements, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Heads, joined => joined.T2.HeadId, T3 => T3.HeadId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Homeland Security\").Select(row => row.T3.BornState)).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.department_id , T1.name , count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING count(*) > 1",
    "result": "context.Managements.Join(context.Departments, T2 => T2.DepartmentId, T1 => T1.DepartmentId, (T2, T1) => new { T2, T1 }).GroupBy(row => new { row.T1.DepartmentId }).Select(group => new { group.Key.DepartmentId, group.First().T1.Name, Count = group.Count() }).Where(group => group.Count > 1).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT head_id , name FROM head WHERE name LIKE '%Ha%'",
    "result": "context.Heads.Where(row => EF.Functions.Like(row.Name, \"%Ha%\")).Select(row => new { row.HeadId, row.Name }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM journalist",
    "result": "context.Journalists.Count();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM journalist ORDER BY Years_working ASC",
    "result": "context.Journalists.OrderBy(row => row.YearsWorking).Select(row => new { row.Name }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nationality , Age FROM journalist",
    "result": "context.Journalists.Select(row => new { row.Nationality, row.Age }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM journalist WHERE Nationality = \"England\" OR Nationality = \"Wales\"",
    "result": "context.Journalists.Where(row => row.Nationality == \"England\" || row.Nationality == \"Wales\").Select(row => new { row.Name }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Years_working) FROM journalist",
    "result": "context.Journalists.Select(row => row.YearsWorking).Average();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1",
    "result": "context.Journalists.OrderByDescending(row => row.YearsWorking).Select(row => new { row.Nationality }).Take(1).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
    "result": "context.Journalists.GroupBy(row => new { row.Nationality }).Select(group => new { group.Key.Nationality, Count = group.Count() }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Journalists.GroupBy(row => new { row.Nationality }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Nationality }).Take(1).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3",
    "result": "context.Journalists.Where(row => row.YearsWorking > 10).Select(row => row.Nationality).Intersect(context.Journalists.Where(row => row.YearsWorking < 3).Select(row => row.Nationality)).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Date , Name , venue FROM event ORDER BY Event_Attendance DESC",
    "result": "context.Events.OrderByDescending(row => row.EventAttendance).Select(row => new { row.Date, row.Name, row.Venue }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Name , T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID",
    "result": "context.NewsReports.Join(context.Events, T1 => T1.EventId, T2 => T2.EventId, (T1, T2) => new { T1, T2 }).Join(context.Journalists, joined => joined.T1.JournalistId, T3 => T3.JournalistId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Name, row.T2.Date }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Name , T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID ORDER BY T2.Event_Attendance ASC",
    "result": "context.NewsReports.Join(context.Events, T1 => T1.EventId, T2 => T2.EventId, (T1, T2) => new { T1, T2 }).Join(context.Journalists, joined => joined.T1.JournalistId, T3 => T3.JournalistId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T2.EventAttendance).Select(row => new { T3Name = row.T3.Name, T2Name = row.T2.Name }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Name , COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name",
    "result": "context.NewsReports.Join(context.Events, T1 => T1.EventId, T2 => T2.EventId, (T1, T2) => new { T1, T2 }).Join(context.Journalists, joined => joined.T1.JournalistId, T3 => T3.JournalistId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.Name }).Select(group => new { group.Key.Name, Count = group.Count() }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*) > 1",
    "result": "context.NewsReports.Join(context.Events, T1 => T1.EventId, T2 => T2.EventId, (T1, T2) => new { T1, T2 }).Join(context.Journalists, joined => joined.T1.JournalistId, T3 => T3.JournalistId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.Name }).Where(group => group.Count() > 1).Select(group => new { group.Key.Name }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)",
    "result": "context.Journalists.Where(row => !context.NewsReports.Select(row => row.JournalistId).Contains(row.JournalistId)).Select(row => new { row.Name }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Event_Attendance) , max(Event_Attendance) FROM event",
    "result": "context.Events.GroupBy(row => 1).Select(group => new { AverageEventAttendance = group.Select(row => row.EventAttendance).Average(), MaxEventAttendance = group.Select(row => row.EventAttendance).Max() }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT venue , name FROM event ORDER BY Event_Attendance DESC LIMIT 2",
    "result": "context.Events.OrderByDescending(row => row.EventAttendance).Select(row => new { row.Venue, row.Name }).Take(2).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC",
    "result": "context.Districts.OrderByDescending(row => row.CityArea).Select(row => new { row.DistrictName }).Distinct().ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*) > 3",
    "result": "context.Products.GroupBy(row => new { row.MaxPageSize }).Where(group => group.Count() > 3).Select(group => new { group.Key.MaxPageSize }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT District_name , City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",
    "result": "context.Districts.Where(row => row.CityPopulation >= 200000 && row.CityPopulation <= 2000000).Select(row => new { row.DistrictName, row.CityPopulation }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000",
    "result": "context.Districts.Where(row => row.CityArea > 10 || row.CityPopulation > 100000).Select(row => new { row.DistrictName }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
    "result": "context.Districts.OrderByDescending(row => row.CityPopulation).Select(row => new { row.DistrictName }).Take(1).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
    "result": "context.Districts.OrderBy(row => row.CityArea).Select(row => new { row.DistrictName }).Take(1).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3",
    "result": "context.Districts.OrderByDescending(row => row.CityArea).Select(row => row.CityPopulation).Sum();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE , count(*) FROM store GROUP BY TYPE",
    "result": "context.Stores.GroupBy(row => new { row.Type }).Select(group => new { group.Key.Type, Count = group.Count() }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_name = \"Khanewal District\"",
    "result": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.DistrictName == \"Khanewal District\").Select(row => new { row.t1.StoreName }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district_id = (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
    "result": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.DistrictId == context.Districts.OrderByDescending(row => row.CityPopulation).Select(row => row.DistrictId).Take(1).First()).Select(row => new { row.t1.StoreName }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.store_name = \"Blackville\"",
    "result": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.StoreName == \"Blackville\").Select(row => new { row.t3.HeadquarteredCity }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.headquartered_city , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city",
    "result": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.HeadquarteredCity }).Select(group => new { group.Key.HeadquarteredCity, Count = group.Count() }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.HeadquarteredCity }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.HeadquarteredCity }).Take(1).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(pages_per_minute_color) FROM product",
    "result": "context.Products.Select(row => (double) row.PagesPerMinuteColor).Average();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product FROM product WHERE max_page_size = \"A4\" AND pages_per_minute_color < 5",
    "result": "context.Products.Where(row => row.MaxPageSize == \"A4\" && row.PagesPerMinuteColor < 5).Select(row => new { row.Product1 }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product FROM product WHERE max_page_size = \"A4\" OR pages_per_minute_color < 5",
    "result": "context.Products.Where(row => row.MaxPageSize == \"A4\" || row.PagesPerMinuteColor < 5).Select(row => new { row.Product1 }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"",
    "result": "context.Products.Where(row => EF.Functions.Like(row.Product1, \"%Scanner%\")).Select(row => new { row.Product1 }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Products.GroupBy(row => new { row.MaxPageSize }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.MaxPageSize }).Take(1).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
    "result": "context.Products.Where(row => row.Product1 != context.Products.GroupBy(row => new { row.MaxPageSize }).OrderByDescending(group => group.Count()).Select(group => group.Key.MaxPageSize).Take(1).First()).Select(row => new { row.Product1 }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(city_population) FROM district WHERE city_area > (SELECT avg(city_area) FROM district)",
    "result": "context.Districts.Where(row => row.CityArea > context.Districts.Select(row => (double) row.CityArea).Average()).Select(row => row.CityPopulation).Sum();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = \"Village Store\"",
    "result": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Type == \"City Mall\").Select(row => row.t3.DistrictName).Intersect(context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Type == \"Village Store\").Select(row => row.t3.DistrictName)).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT rank) FROM captain",
    "result": "context.Captains.Select(row => row.Rank).Distinct().Count();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , rank FROM captain GROUP BY rank",
    "result": "context.Captains.GroupBy(row => new { row.Rank }).Select(group => new { Count = group.Count(), group.Key.Rank }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM captain ORDER BY age DESC",
    "result": "context.Captains.OrderByDescending(row => row.Age).Select(row => new { row.Name }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , CLASS , rank FROM captain",
    "result": "context.Captains.Select(row => new { row.Name, row.Class, row.Rank }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Captains.GroupBy(row => new { row.Rank }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Rank }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*) > 2",
    "result": "context.Captains.GroupBy(row => new { row.Class }).Where(group => group.Count() > 2).Select(group => new { group.Key.Class }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM captain WHERE rank = 'Midshipman' OR rank = 'Lieutenant'",
    "result": "context.Captains.Where(row => row.Rank == \"Midshipman\" || row.Rank == \"Lieutenant\").Select(row => new { row.Name }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT rank FROM captain WHERE CLASS = 'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS = 'Armed schooner'",
    "result": "context.Captains.Where(row => row.Class == \"Cutter\").Select(row => row.Rank).Intersect(context.Captains.Where(row => row.Class == \"Armed schooner\").Select(row => row.Rank)).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS = 'Third-rate ship of the line'",
    "result": "context.Captains.Select(row => row.Rank).Except(context.Captains.Where(row => row.Class == \"Third-rate ship of the line\").Select(row => row.Rank)).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM captain ORDER BY age LIMIT 1",
    "result": "context.Captains.OrderBy(row => row.Age).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM ship",
    "result": "context.Ships.Count();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , TYPE , flag FROM ship ORDER BY built_year DESC LIMIT 1",
    "result": "context.Ships.OrderByDescending(row => row.BuiltYear).Select(row => new { row.Name, row.Type, row.Flag }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , flag FROM ship GROUP BY flag",
    "result": "context.Ships.GroupBy(row => new { row.Flag }).Select(group => new { Count = group.Count(), group.Key.Flag }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Ships.GroupBy(row => new { row.Flag }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Flag }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM ship ORDER BY built_year , CLASS",
    "result": "context.Ships.OrderBy(row => row.BuiltYear).ThenBy(row => row.Class).Select(row => new { row.Name }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE FROM ship WHERE flag = 'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag = 'Malta'",
    "result": "context.Ships.Where(row => row.Flag == \"Panama\").Select(row => row.Type).Intersect(context.Ships.Where(row => row.Flag == \"Malta\").Select(row => row.Type)).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Ships.GroupBy(row => new { row.BuiltYear }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BuiltYear }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING count(*) > 1",
    "result": "context.Ships.Join(context.Captains, t1 => t1.ShipId, t2 => t2.ShipId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ShipId }).Where(group => group.Count() > 1).Select(group => new { group.First().t1.Name }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",
    "result": "context.Ships.Where(row => !context.Captains.Select(row => row.ShipId).Contains(row.ShipId)).Select(row => new { row.Name, row.Class }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id ORDER BY t2.age LIMIT 1",
    "result": "context.Ships.Join(context.Captains, t1 => t1.ShipId, t2 => t2.ShipId, (t1, t2) => new { t1, t2 }).OrderBy(row => row.t2.Age).Select(row => new { row.t1.Name }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman')",
    "result": "context.Ships.Where(row => !context.Captains.Where(row => row.Rank == \"Midshipman\").Select(row => row.ShipId).Contains(row.ShipId)).Select(row => new { row.Name, row.Flag }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Lieutenant'",
    "result": "context.Ships.Join(context.Captains, t1 => t1.ShipId, t2 => t2.ShipId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Rank == \"Midshipman\").Select(row => row.t1.Name).Intersect(context.Ships.Join(context.Captains, t1 => t1.ShipId, t2 => t2.ShipId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Rank == \"Lieutenant\").Select(row => row.t1.Name)).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Products",
    "result": "context.Products.Count();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
    "result": "context.Products.OrderBy(row => (double) row.ProductPrice).Select(row => new { row.ProductName }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Name , Product_Type_Code FROM Products",
    "result": "context.Products.Select(row => new { row.ProductName, row.ProductTypeCode }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Price FROM Products WHERE Product_Name = \"Dining\" OR Product_Name = \"Trading Policy\"",
    "result": "context.Products.Where(row => row.ProductName == \"Dining\" || row.ProductName == \"Trading Policy\").Select(row => new { row.ProductPrice }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Product_Price) FROM Products",
    "result": "context.Products.Select(row => (double) row.ProductPrice).Average();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1",
    "result": "context.Products.OrderByDescending(row => (double) row.ProductPrice).Select(row => new { row.ProductName }).Take(1).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code",
    "result": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Select(group => new { group.Key.ProductTypeCode, Count = group.Count() }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Products.GroupBy(row => new { row.ProductTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ProductTypeCode }).Take(1).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*) >= 2",
    "result": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProductTypeCode }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price < 3000",
    "result": "context.Products.Where(row => row.ProductPrice > 4500).Select(row => row.ProductTypeCode).Intersect(context.Products.Where(row => row.ProductPrice < 3000).Select(row => row.ProductTypeCode)).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Product_Name , COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name",
    "result": "context.Products.Join(context.ProductsInEvents, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductName }).Select(group => new { group.Key.ProductName, Count = group.Count() }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Product_Name , COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC",
    "result": "context.Products.Join(context.ProductsInEvents, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductName }).Select(group => new { group.Key.ProductName, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*) >= 2",
    "result": "context.Products.Join(context.ProductsInEvents, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductName }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProductName }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*) >= 2 ORDER BY T1.Product_Name",
    "result": "context.Products.Join(context.ProductsInEvents, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductName }).Where(group => group.Count() >= 2).OrderBy(group => group.First().T1.ProductName).Select(group => new { group.Key.ProductName }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)",
    "result": "context.Products.Where(row => !context.ProductsInEvents.Select(row => row.ProductId).Contains(row.ProductId)).Select(row => new { row.ProductName }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products",
    "result": "context.Products.Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM ref_colors",
    "result": "context.RefColors.Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM CHARACTERISTICS",
    "result": "context.Characteristics.Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT color_description FROM ref_colors",
    "result": "context.RefColors.Select(row => new { row.ColorDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS",
    "result": "context.Characteristics.Select(row => new { row.CharacteristicName }).Distinct().ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_name FROM products WHERE product_category_code = \"Spices\"",
    "result": "context.Products.Where(row => row.ProductCategoryCode == \"Spices\").Select(row => new { row.ProductName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.product_name , T2.color_description , T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code = T2.color_code WHERE product_category_code = \"Herbs\"",
    "result": "context.Products.Join(context.RefColors, T1 => T1.ColorCode, T2 => T2.ColorCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ProductCategoryCode == \"Herbs\").Select(row => new { row.T1.ProductName, row.T2.ColorDescription, row.T1.ProductDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products WHERE product_category_code = \"Seeds\"",
    "result": "context.Products.Where(row => row.ProductCategoryCode == \"Seeds\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_category_code FROM products WHERE product_name = \"flax\"",
    "result": "context.Products.Where(row => row.ProductName == \"flax\").Select(row => new { row.ProductCategoryCode }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description = 'yellow'",
    "result": "context.Products.Join(context.RefColors, T1 => T1.ColorCode, T2 => T2.ColorCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ColorDescription == \"yellow\").Select(row => new { row.T1.ProductName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%'",
    "result": "context.RefProductCategories.Join(context.Products, T1 => T1.ProductCategoryCode, T2 => T2.ProductCategoryCode, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.ProductDescription, \"%t%\")).Select(row => new { row.T1.ProductCategoryDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"catnip\"",
    "result": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ProductName == \"catnip\").Select(row => new { row.t2.ColorDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.color_code , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"chervil\"",
    "result": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ProductName == \"chervil\").Select(row => new { row.t1.ColorCode, row.t2.ColorDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.product_id , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id HAVING count(*) >= 2",
    "result": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).Join(context.ProductCharacteristics, joined => joined.t1.ProductId, t3 => t3.ProductId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.ProductId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProductId, group.First().t2.ColorDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"white\"",
    "result": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).Where(row => row.t2.ColorDescription == \"white\").Select(row => new { row.t1.ProductName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"sesame\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ProductName == \"sesame\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"sesame\").Select(row => row.t3.CharacteristicName).Distinct().Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"sesame\").Select(row => new { row.t3.CharacteristicName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.characteristic_name , t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"cumin\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"cumin\").Select(row => new { row.t3.CharacteristicName, row.t3.CharacteristicDataType }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\" AND t3.characteristic_type_code = \"Grade\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"sesame\" && row.t3.CharacteristicTypeCode == \"Grade\").Select(row => new { row.t3.CharacteristicName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"laurel\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"laurel\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"flax\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"flax\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"red\" AND t3.characteristic_name = \"fast\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.RefColors, joined => joined.t1.ColorCode, t4 => t4.ColorCode, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ColorDescription == \"red\" && row.t3.CharacteristicName == \"fast\").Select(row => new { row.t1.ProductName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"hot\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.CharacteristicName == \"hot\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"warm\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.CharacteristicName == \"warm\").Select(row => new { row.t1.ProductName }).Distinct().ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"red\" AND t3.characteristic_name = \"slow\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.RefColors, joined => joined.t1.ColorCode, t4 => t4.ColorCode, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ColorDescription == \"red\" && row.t3.CharacteristicName == \"slow\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"white\" OR t3.characteristic_name = \"hot\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.RefColors, joined => joined.t1.ColorCode, t4 => t4.ColorCode, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ColorDescription == \"white\" || row.t3.CharacteristicName == \"hot\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code = \"Herbs\"",
    "result": "context.RefProductCategories.Where(row => row.ProductCategoryCode == \"Herbs\").Select(row => new { row.UnitOfMeasure }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code = \"Spices\"",
    "result": "context.RefProductCategories.Where(row => row.ProductCategoryCode == \"Spices\").Select(row => new { row.ProductCategoryDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_category_description , unit_of_measure FROM ref_product_categories WHERE product_category_code = \"Herbs\"",
    "result": "context.RefProductCategories.Where(row => row.ProductCategoryCode == \"Herbs\").Select(row => new { row.ProductCategoryDescription, row.UnitOfMeasure }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"cumin\"",
    "result": "context.Products.Join(context.RefProductCategories, t1 => t1.ProductCategoryCode, t2 => t2.ProductCategoryCode, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ProductName == \"cumin\").Select(row => new { row.t2.UnitOfMeasure }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.unit_of_measure , t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"chervil\"",
    "result": "context.Products.Join(context.RefProductCategories, t1 => t1.ProductCategoryCode, t2 => t2.ProductCategoryCode, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ProductName == \"chervil\").Select(row => new { row.t2.UnitOfMeasure, row.t2.ProductCategoryCode }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code WHERE t3.color_description = \"white\" AND t2.unit_of_measure != \"Handful\"",
    "result": "context.Products.Join(context.RefProductCategories, t1 => t1.ProductCategoryCode, t2 => t2.ProductCategoryCode, (t1, t2) => new { t1, t2 }).Join(context.RefColors, joined => joined.t1.ColorCode, t3 => t3.ColorCode, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.ColorDescription == \"white\" && row.t2.UnitOfMeasure != \"Handful\").Select(row => new { row.t1.ProductName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ColorDescription }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ColorDescription }).Take(1).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ColorDescription }).OrderBy(group => group.Count()).Select(group => new { group.Key.ColorDescription }).Take(1).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.CharacteristicName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CharacteristicName }).Take(1).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name , t1.other_characteristic_details , t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id",
    "result": "context.Characteristics.Select(row => new { row.CharacteristicName, row.OtherCharacteristicDetails, row.CharacteristicDataType }).Except(context.Characteristics.Join(context.ProductCharacteristics, t1 => t1.CharacteristicId, t2 => t2.CharacteristicId, (t1, t2) => new { t1, t2 }).Select(row => new { row.t1.CharacteristicName, row.t1.OtherCharacteristicDetails, row.t1.CharacteristicDataType })).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*) >= 2",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.CharacteristicName }).Where(group => group.Count() >= 2).Select(group => new { group.Key.CharacteristicName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
    "result": "context.RefColors.Where(row => !context.Products.Select(row => row.ColorCode).Contains(row.ColorCode)).Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.property_id , count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id",
    "result": "context.Properties.Join(context.Residents, T1 => T1.PropertyId, T2 => T2.PropertyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PropertyId }).Select(group => new { group.Key.PropertyId, Count = group.Count() }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id = T2.organization_id WHERE T2.organization_details = 'Denesik and Sons Party'",
    "result": "context.Services.Join(context.Organizations, T1 => T1.OrganizationId, T2 => T2.OrganizationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrganizationDetails == \"Denesik and Sons Party\").Select(row => new { row.T1.ServiceTypeCode }).Distinct().ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.resident_id , T1.other_details , count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id = T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC",
    "result": "context.Residents.Join(context.ResidentsServices, T1 => T1.ResidentId, T2 => T2.ResidentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ResidentId }).Select(group => new { group.Key.ResidentId, group.First().T1.OtherDetails, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.service_id , T1.service_details , count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id = T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Services.Join(context.ResidentsServices, T1 => T1.ServiceId, T2 => T2.ServiceId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ServiceId }).Select(group => new { group.Key.ServiceId, group.First().T1.ServiceDetails, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.thing_id , T1.type_of_Thing_Code , T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id",
    "result": "context.Things.Join(context.Organizations, T1 => T1.OrganizationId, T2 => T2.OrganizationId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.ThingId, row.T1.TypeOfThingCode, row.T2.OrganizationDetails }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 3",
    "result": "context.Customers.Join(context.CustomerEvents, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 3).Select(group => new { group.Key.CustomerId, group.First().T1.CustomerDetails }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.date_moved_in , T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id",
    "result": "context.Customers.Join(context.CustomerEvents, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.DateMovedIn, row.T1.CustomerId, row.T1.CustomerDetails }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Customer_Event_ID , T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID = T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3",
    "result": "context.CustomerEvents.Join(context.CustomerEventNotes, T1 => T1.CustomerEventId, T2 => T2.CustomerEventId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerEventId }).Where(group => group.Count() >= 1 && group.Count() <= 3).Select(group => new { group.Key.CustomerEventId, group.First().T1.PropertyId }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.service_details = 'Unsatisfied'",
    "result": "context.Things.Join(context.TimedLocationsOfThings, T1 => T1.ThingId, T2 => T2.ThingId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ServiceDetails == \"Unsatisfied\").Select(row => row.T2.LocationCode).Distinct().Count();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things",
    "result": "context.TimedStatusOfThings.Select(row => row.StatusOfThingCode).Distinct().Count();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(date_moved_in) FROM Residents",
    "result": "context.Residents.Select(row => row.DateMovedIn).Max();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'",
    "result": "context.Residents.Where(row => EF.Functions.Like(row.OtherDetails, \"%Miss%\")).Select(row => new { row.OtherDetails }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_event_id , date_moved_in , property_id FROM customer_events",
    "result": "context.CustomerEvents.Select(row => new { row.CustomerEventId, row.DateMovedIn, row.PropertyId }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )",
    "result": "context.Customers.Where(row => !context.CustomerEvents.Select(row => row.CustomerId).Contains(row.CustomerId)).Count();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT date_moved_in FROM residents",
    "result": "context.Residents.Select(row => new { row.DateMovedIn }).Distinct().ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800",
    "result": "context.Cinemas.Select(row => row.Location).Except(context.Cinemas.Where(row => row.Capacity > 800).Select(row => row.Location)).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011",
    "result": "context.Cinemas.Where(row => row.OpenningYear == 2010).Select(row => row.Location).Intersect(context.Cinemas.Where(row => row.OpenningYear == 2011).Select(row => row.Location)).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM cinema",
    "result": "context.Cinemas.Count();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , openning_year , capacity FROM cinema",
    "result": "context.Cinemas.Select(row => new { row.Name, row.OpenningYear, row.Capacity }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , LOCATION FROM cinema WHERE capacity > (SELECT avg(capacity) FROM cinema)",
    "result": "context.Cinemas.Where(row => row.Capacity > context.Cinemas.Select(row => row.Capacity).Average()).Select(row => new { row.Name, row.Location }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT LOCATION FROM cinema",
    "result": "context.Cinemas.Select(row => new { row.Location }).Distinct().ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , openning_year FROM cinema ORDER BY openning_year DESC",
    "result": "context.Cinemas.OrderByDescending(row => row.OpenningYear).Select(row => new { row.Name, row.OpenningYear }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
    "result": "context.Cinemas.OrderByDescending(row => row.Capacity).Select(row => new { row.Name, row.Location }).Take(1).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(capacity) , min(capacity) , max(capacity) FROM cinema WHERE openning_year >= 2011",
    "result": "context.Cinemas.Where(row => row.OpenningYear >= 2011).GroupBy(row => 1).Select(group => new { AverageCapacity = group.Select(row => row.Capacity).Average(), MinCapacity = group.Select(row => row.Capacity).Min(), MaxCapacity = group.Select(row => row.Capacity).Max() }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION , count(*) FROM cinema GROUP BY LOCATION",
    "result": "context.Cinemas.GroupBy(row => new { row.Location }).Select(group => new { group.Key.Location, Count = group.Count() }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Cinemas.Where(row => row.OpenningYear >= 2010).GroupBy(row => new { row.Location }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Location }).Take(1).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) >= 2",
    "result": "context.Cinemas.Where(row => row.Capacity > 300).GroupBy(row => new { row.Location }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Location }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title , directed_by FROM film",
    "result": "context.Films.Select(row => new { row.Title, row.DirectedBy }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT directed_by FROM film",
    "result": "context.Films.Select(row => new { row.DirectedBy }).Distinct().ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT directed_by , count(*) FROM film GROUP BY directed_by",
    "result": "context.Films.GroupBy(row => new { row.DirectedBy }).Select(group => new { group.Key.DirectedBy, Count = group.Count() }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id",
    "result": "context.Schedules.Join(context.Cinemas, T1 => T1.CinemaId, T2 => T2.CinemaId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CinemaId }).Select(group => new { group.First().T2.Name, SumShowTimesPerDay = group.Select(row => row.T1.ShowTimesPerDay).Sum() }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id",
    "result": "context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FilmId }).Select(group => new { group.OrderByDescending(row => row.T1.Price).First().T2.Title, MaxPrice = group.Select(row => row.T1.Price).Max() }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.name , T2.title , T1.date , T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id",
    "result": "context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).Join(context.Cinemas, joined => joined.T1.CinemaId, T3 => T3.CinemaId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Name, row.T2.Title, row.T1.Date, row.T1.Price }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title , directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
    "result": "context.Films.Where(row => !context.Schedules.Select(row => row.FilmId).Contains(row.FilmId)).Select(row => new { row.Title, row.DirectedBy }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
    "result": "context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DirectedBy }).OrderByDescending(group => group.Sum(row => row.T1.ShowTimesPerDay)).Select(group => new { group.Key.DirectedBy }).Take(1).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) > 1",
    "result": "context.Cinemas.Where(row => row.Capacity > 300).GroupBy(row => new { row.Location }).Where(group => group.Count() > 1).Select(group => new { group.Key.Location }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
    "result": "context.Films.Where(row => EF.Functions.Like(row.Title, \"%Dummy%\")).Count();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM WINE ORDER BY Score LIMIT 1",
    "result": "context.Wines.OrderBy(row => row.Score).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1",
    "result": "context.Wines.OrderBy(row => row.Score).Select(row => new { row.Winery }).Take(1).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Grape , Appelation FROM WINE",
    "result": "context.Wines.Select(row => new { row.Grape, row.Appelation }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name , Score FROM WINE",
    "result": "context.Wines.Select(row => new { row.Name, row.Score }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Area , County FROM APPELLATIONS",
    "result": "context.Appellations.Select(row => new { row.Area, row.County }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Price FROM WINE WHERE YEAR < 2010",
    "result": "context.Wines.Where(row => row.Year < 2010).Select(row => new { row.Price }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM WINE WHERE score > 90",
    "result": "context.Wines.Where(row => row.Score > 90).Select(row => new { row.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"Red\"",
    "result": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Color == \"Red\").Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = \"North Coast\"",
    "result": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Area == \"North Coast\").Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM WINE WHERE Winery = \"Robert Biale\"",
    "result": "context.Wines.Where(row => row.Winery == \"Robert Biale\").Count();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM APPELLATIONS WHERE County = \"Napa\"",
    "result": "context.Appellations.Where(row => row.County == \"Napa\").Count();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Sonoma\"",
    "result": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T1.County == \"Sonoma\").Select(row => row.T2.Price).Average();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name , T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"White\"",
    "result": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Color == \"White\").Select(row => new { row.T2.Name, row.T2.Score }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = \"Central Coast\" AND T2.year < 2005",
    "result": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Area == \"Central Coast\" && row.T2.Year < 2005).Select(row => row.T2.Price).Max();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"White\" AND T2.score > 90",
    "result": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Color == \"White\" && row.T2.Score > 90).Select(row => new { row.T1.Grape1 }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"Red\" AND T2.price > 50",
    "result": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Color == \"Red\" && row.T2.Price > 50).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50",
    "result": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T1.County == \"Monterey\" && row.T2.Price < 50).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , Grape FROM WINE GROUP BY Grape",
    "result": "context.Wines.GroupBy(row => new { row.Grape }).Select(group => new { Count = group.Count(), group.Key.Grape }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Price) , YEAR FROM WINE GROUP BY YEAR",
    "result": "context.Wines.GroupBy(row => new { row.Year }).Select(group => new { AveragePrice = group.Select(row => row.Price).Average(), group.Key.Year }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Name FROM WINE WHERE Price > (SELECT min(Price) FROM wine WHERE Winery = \"John Anthony\")",
    "result": "context.Wines.Where(row => row.Price > context.Wines.Where(row => row.Winery == \"John Anthony\").Select(row => row.Price).Min()).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Name FROM WINE ORDER BY Name",
    "result": "context.Wines.OrderBy(row => row.Name).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Name FROM WINE ORDER BY price",
    "result": "context.Wines.OrderBy(row => row.Price).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1",
    "result": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Grape }).OrderByDescending(group => group.Average(row => row.T2.Price)).Select(group => new { group.First().T1.Color }).Take(1).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Name FROM WINE WHERE YEAR < 2000 OR YEAR > 2010",
    "result": "context.Wines.Where(row => row.Year < 2000 || row.Year > 2010).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100",
    "result": "context.Wines.Where(row => row.Price >= 50 && row.Price <= 100).Select(row => new { row.Winery }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Price) , max(Score) FROM WINE WHERE Appelation = \"St. Helena\"",
    "result": "context.Wines.Where(row => row.Appelation == \"St. Helena\").GroupBy(row => 1).Select(group => new { MaxPrice = group.Select(row => row.Price).Max(), MaxScore = group.Select(row => row.Score).Max() }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Price) , max(Score) , YEAR FROM WINE GROUP BY YEAR",
    "result": "context.Wines.GroupBy(row => new { row.Year }).Select(group => new { MaxPrice = group.Select(row => row.Price).Max(), MaxScore = group.Select(row => row.Score).Max(), group.Key.Year }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Price) , avg(Score) , Appelation FROM WINE GROUP BY Appelation",
    "result": "context.Wines.GroupBy(row => new { row.Appelation }).Select(group => new { AveragePrice = group.Select(row => row.Price).Average(), AverageScore = group.Select(row => row.Score).Average(), group.Key.Appelation }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*) >= 4",
    "result": "context.Wines.GroupBy(row => new { row.Winery }).Where(group => group.Count() >= 4).Select(group => new { group.Key.Winery }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING count(*) <= 3",
    "result": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Appelation }).Where(group => group.Count() <= 3).Select(group => new { group.First().T1.County }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM WINE WHERE YEAR < (SELECT min(YEAR) FROM WINE WHERE Winery = \"Brander\")",
    "result": "context.Wines.Where(row => row.Year < context.Wines.Where(row => row.Winery == \"Brander\").Select(row => row.Year).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM WINE WHERE Price > (SELECT max(Price) FROM WINE WHERE YEAR = 2006)",
    "result": "context.Wines.Where(row => row.Price > context.Wines.Where(row => row.Year == 2006).Select(row => row.Price).Max()).Select(row => new { row.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE WHERE T1.Color = \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
    "result": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Color == \"White\").GroupBy(row => new { row.T2.Winery }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Winery }).Take(3).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Grape , Winery , YEAR FROM WINE WHERE Price > 100 ORDER BY YEAR",
    "result": "context.Wines.Where(row => row.Price > 100).OrderBy(row => row.Year).Select(row => new { row.Grape, row.Winery, row.Year }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Grape , Appelation , Name FROM WINE WHERE Score > 93 ORDER BY Name",
    "result": "context.Wines.Where(row => row.Score > 93).OrderBy(row => row.Name).Select(row => new { row.Grape, row.Appelation, row.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Appelation FROM WINE WHERE YEAR > 2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area = \"Central Coast\"",
    "result": "context.Wines.Where(row => row.Year > 2008).Select(row => row.Appelation).Except(context.Appellations.Where(row => row.Area == \"Central Coast\").Select(row => row.Appelation)).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma')",
    "result": "context.Wines.Where(row => row.Appelation.HasValue && !context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T1.County == \"Sonoma\").Select(row => row.T1.Appelation).Contains(row.Appelation.Value)).Select(row => row.Price).Average();",
    "db_name": "wine_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,275): error CS1061: 'string' does not contain a definition for 'Value' and no accessible extension method 'Value' accepting a first argument of type 'string' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.38"
  },
  {
    "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Score > 90).GroupBy(row => new { row.T1.County }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.County }).Take(1).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM company",
    "result": "context.Companies.Count();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT company , rank FROM company ORDER BY Sales_billion DESC",
    "result": "context.Companies.OrderByDescending(row => row.SalesBillion).Select(row => new { row.Company1, row.Rank }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT company , main_industry FROM company WHERE headquarters != 'USA'",
    "result": "context.Companies.Where(row => row.Headquarters != \"USA\").Select(row => new { row.Company1, row.MainIndustry }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT company , headquarters FROM company ORDER BY market_value DESC",
    "result": "context.Companies.OrderByDescending(row => row.MarketValue).Select(row => new { row.Company1, row.Headquarters }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(market_value) , max(market_value) , avg(market_value) FROM company",
    "result": "context.Companies.GroupBy(row => 1).Select(group => new { MinMarketValue = group.Select(row => row.MarketValue).Min(), MaxMarketValue = group.Select(row => row.MarketValue).Max(), AverageMarketValue = group.Select(row => row.MarketValue).Average() }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT main_industry FROM company",
    "result": "context.Companies.Select(row => new { row.MainIndustry }).Distinct().ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT headquarters , count(*) FROM company GROUP BY headquarters",
    "result": "context.Companies.GroupBy(row => new { row.Headquarters }).Select(group => new { group.Key.Headquarters, Count = group.Count() }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT main_industry , sum(market_value) FROM company GROUP BY main_industry",
    "result": "context.Companies.GroupBy(row => new { row.MainIndustry }).Select(group => new { group.Key.MainIndustry, SumMarketValue = group.Select(row => row.MarketValue).Sum() }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING count(*) >= 2",
    "result": "context.Companies.Where(row => row.MainIndustry == \"Banking\").GroupBy(row => new { row.Headquarters }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Headquarters }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT station_id , LOCATION , manager_name FROM gas_station ORDER BY open_year",
    "result": "context.GasStations.OrderBy(row => row.OpenYear).Select(row => new { row.StationId, row.Location, row.ManagerName }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005",
    "result": "context.GasStations.Where(row => row.OpenYear >= 2000 && row.OpenYear <= 2005).Count();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION , count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
    "result": "context.GasStations.GroupBy(row => new { row.Location }).Select(group => new { group.Key.Location, Count = group.Count() }).OrderBy(group => group.Count).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'",
    "result": "context.Companies.Where(row => row.MainIndustry == \"Banking\").Select(row => row.Headquarters).Intersect(context.Companies.Where(row => row.MainIndustry == \"Oil and gas\").Select(row => row.Headquarters)).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry = 'Banking'",
    "result": "context.Companies.Select(row => row.Headquarters).Except(context.Companies.Where(row => row.MainIndustry == \"Banking\").Select(row => row.Headquarters)).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id",
    "result": "context.StationCompanies.Join(context.Companies, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CompanyId }).Select(group => new { group.First().T2.Company1, Count = group.Count() }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT company , main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
    "result": "context.Companies.Where(row => !context.StationCompanies.Select(row => row.CompanyId).Contains(row.CompanyId)).Select(row => new { row.Company1, row.MainIndustry }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.company = 'ExxonMobil'",
    "result": "context.StationCompanies.Join(context.Companies, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).Join(context.GasStations, joined => joined.T1.StationId, T3 => T3.StationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Company1 == \"ExxonMobil\").Select(row => new { row.T3.ManagerName }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.market_value > 100",
    "result": "context.StationCompanies.Join(context.Companies, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).Join(context.GasStations, joined => joined.T1.StationId, T3 => T3.StationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.MarketValue > 100).Select(row => new { row.T3.Location }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
    "result": "context.GasStations.Where(row => row.OpenYear > 2000).GroupBy(row => new { row.ManagerName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ManagerName }).Take(1).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM gas_station ORDER BY open_year",
    "result": "context.GasStations.OrderBy(row => row.OpenYear).Select(row => new { row.Location }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT rank , company , market_value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion",
    "result": "context.Companies.Where(row => row.MainIndustry == \"Banking\").OrderBy(row => row.SalesBillion).ThenBy(row => row.ProfitsBillion).Select(row => new { row.Rank, row.Company1, row.MarketValue }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.location , T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
    "result": "context.StationCompanies.Join(context.Companies, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).Join(context.GasStations, joined => joined.T1.StationId, T3 => T3.StationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T2.AssetsBillion).Select(row => new { row.T3.Location, row.T3.RepresentativeName }).Take(3).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Dan'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Dan\").Select(row => row.T2.Friend).Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Person WHERE gender = 'female'",
    "result": "context.People.Where(row => row.Gender == \"female\").Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(age) FROM Person",
    "result": "context.People.Select(row => row.Age).Average();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT city) FROM Person",
    "result": "context.People.Select(row => row.City).Distinct().Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT job) FROM Person",
    "result": "context.People.Select(row => row.Job).Distinct().Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Person WHERE age = (SELECT max(age) FROM person)",
    "result": "context.People.Where(row => row.Age == context.People.Select(row => row.Age).Max()).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Person WHERE job = 'student' AND age = (SELECT max(age) FROM person WHERE job = 'student' )",
    "result": "context.People.Where(row => row.Job == \"student\" && row.Age == context.People.Where(row => row.Job == \"student\").Select(row => row.Age).Max()).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Person WHERE gender = 'male' AND age = (SELECT min(age) FROM person WHERE gender = 'male' )",
    "result": "context.People.Where(row => row.Gender == \"male\" && row.Age == context.People.Where(row => row.Gender == \"male\").Select(row => row.Age).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT age FROM Person WHERE job = 'doctor' AND name = 'Zach'",
    "result": "context.People.Where(row => row.Job == \"doctor\" && row.Name == \"Zach\").Select(row => new { row.Age }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Person WHERE age < 30",
    "result": "context.People.Where(row => row.Age < 30).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Person WHERE age > 30 AND job = 'engineer'",
    "result": "context.People.Where(row => row.Age > 30 && row.Job == \"engineer\").Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(age) , gender FROM Person GROUP BY gender",
    "result": "context.People.GroupBy(row => new { row.Gender }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), group.Key.Gender }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(age) , job FROM Person GROUP BY job",
    "result": "context.People.GroupBy(row => new { row.Job }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), group.Key.Job }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(age) , job FROM Person WHERE gender = 'male' GROUP BY job",
    "result": "context.People.Where(row => row.Gender == \"male\").GroupBy(row => new { row.Job }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), group.Key.Job }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(age) , job FROM Person GROUP BY job",
    "result": "context.People.GroupBy(row => new { row.Job }).Select(group => new { MinAge = group.Select(row => row.Age).Min(), group.Key.Job }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , gender FROM Person WHERE age < 40 GROUP BY gender",
    "result": "context.People.Where(row => row.Age < 40).GroupBy(row => new { row.Gender }).Select(group => new { Count = group.Count(), group.Key.Gender }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Person WHERE age > (SELECT min(age) FROM person WHERE job = 'engineer') ORDER BY age",
    "result": "context.People.Where(row => row.Age > context.People.Where(row => row.Job == \"engineer\").Select(row => row.Age).Min()).OrderBy(row => row.Age).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Person WHERE age > (SELECT max(age) FROM person WHERE job = 'engineer')",
    "result": "context.People.Where(row => row.Age > context.People.Where(row => row.Job == \"engineer\").Select(row => row.Age).Max()).Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , job FROM Person ORDER BY name",
    "result": "context.People.OrderBy(row => row.Name).Select(row => new { row.Name, row.Job }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Person ORDER BY age DESC",
    "result": "context.People.OrderByDescending(row => row.Age).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Person WHERE gender = 'male' ORDER BY age",
    "result": "context.People.Where(row => row.Gender == \"male\").OrderBy(row => row.Age).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' INTERSECT SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Dan\").Where(row => row.T1.Age.HasValue).Select(row => new { row.T1.Name, row.T1.Age.Value }).Intersect(context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Alice\").Where(row => row.T1.Age.HasValue).Select(row => new { row.T1.Name, row.T1.Age.Value })).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' OR T2.friend = 'Alice'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Dan\" || row.T2.Friend == \"Alice\").Select(row => new { row.T1.Name, row.T1.Age }).Distinct().ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => context.People.Where(row => row.Age > 40).Select(row => row.Name).Contains(row.T2.Friend)).Select(row => row.T1.Name).Intersect(context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => context.People.Where(row => row.Age < 30).Select(row => row.Name).Contains(row.T2.Friend)).Select(row => row.T1.Name)).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => context.People.Where(row => row.Age > 40).Select(row => row.Name).Contains(row.T2.Friend)).Select(row => row.T1.Name).Except(context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => context.People.Where(row => row.Age < 30).Select(row => row.Name).Contains(row.T2.Friend)).Select(row => row.T1.Name)).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.job = 'student'",
    "result": "context.People.Select(row => row.Name).Except(context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Job == \"student\").Select(row => row.T2.Name)).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*) = 1",
    "result": "context.PersonFriends.GroupBy(row => new { row.Name }).Where(group => group.Count() == 1).Select(group => new { group.Key.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Bob'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Bob\").Select(row => new { row.T2.Friend }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Bob'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Bob\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Zach' AND T1.gender = 'female'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Zach\" && row.T1.Gender == \"female\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'female'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Alice\" && row.T1.Gender == \"female\").Select(row => new { row.T2.Friend }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'male' AND T1.job = 'doctor'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Alice\" && row.T1.Gender == \"male\" && row.T1.Job == \"doctor\").Select(row => new { row.T2.Friend }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.city = 'new york city'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T1.City == \"new york city\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age < (SELECT avg(age) FROM person)",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age < context.People.Select(row => row.Age).Average()).Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.name , T2.friend , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person)",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age > context.People.Select(row => row.Age).Average()).Select(row => new { row.T2.Name, row.T2.Friend, row.T1.Age }).Distinct().ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT friend FROM PersonFriend WHERE name = 'Zach' AND YEAR = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')",
    "result": "context.PersonFriends.Where(row => row.Name == \"Zach\" && row.Year == context.PersonFriends.Where(row => row.Name == \"Zach\").Select(row => row.Year).Max()).Select(row => new { row.Friend }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Zach' AND T2.year = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Zach\" && row.T2.Year == context.PersonFriends.Where(row => row.Name == \"Zach\").Select(row => row.Year).Max()).Select(row => new { row.T1.Age }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM PersonFriend WHERE friend = 'Alice' AND YEAR = (SELECT min(YEAR) FROM PersonFriend WHERE friend = 'Alice')",
    "result": "context.PersonFriends.Where(row => row.Friend == \"Alice\" && row.Year == context.PersonFriends.Where(row => row.Friend == \"Alice\").Select(row => row.Year).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.age , T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice' AND T2.year = (SELECT max(YEAR) FROM PersonFriend WHERE friend = 'Alice')",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Alice\" && row.T2.Year == context.PersonFriends.Where(row => row.Friend == \"Alice\").Select(row => row.Year).Max()).Select(row => new { row.T1.Name, row.T1.Age, row.T1.Job }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
    "result": "context.People.Select(row => row.Name).Except(context.PersonFriends.Select(row => row.Name)).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name , avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { group.Key.Name, AverageAge = group.Select(row => row.T1.Age).Average() }).OrderByDescending(group => group.AverageAge).Take(1).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city = 'Austin')",
    "result": "context.PersonFriends.Where(row => !context.People.Where(row => row.City == \"Austin\").Select(row => row.Name).Contains(row.Friend)).Select(row => row.Name).Distinct().Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name = T2.name JOIN PersonFriend AS T3 ON T1.friend = T3.name JOIN PersonFriend AS T4 ON T3.friend = T4.name WHERE T2.name = 'Alice' AND T4.name != 'Alice'",
    "result": "context.PersonFriends.Join(context.People, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Join(context.PersonFriends, joined => joined.T1.Friend, T3 => T3.Name, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.PersonFriends, joined => joined.T3.Friend, T4 => T4.Name, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T2.Name == \"Alice\" && row.T4.Name != \"Alice\").Select(row => new { row.T4.Name }).Distinct().ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM country",
    "result": "context.Countries.Count();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country_name , Capital FROM country",
    "result": "context.Countries.Select(row => new { row.CountryName, row.Capital }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
    "result": "context.Countries.Where(row => EF.Functions.Like(row.OfficialNativeLanguage, \"%English%\")).Select(row => new { row.OfficialNativeLanguage }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT POSITION FROM match_season",
    "result": "context.MatchSeasons.Select(row => new { row.Position }).Distinct().ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Player FROM match_season WHERE College = \"UCLA\"",
    "result": "context.MatchSeasons.Where(row => row.College == \"UCLA\").Select(row => new { row.Player }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT POSITION FROM match_season WHERE College = \"UCLA\" OR College = \"Duke\"",
    "result": "context.MatchSeasons.Where(row => row.College == \"UCLA\" || row.College == \"Duke\").Select(row => new { row.Position }).Distinct().ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Draft_Pick_Number , Draft_Class FROM match_season WHERE POSITION = \"Defender\"",
    "result": "context.MatchSeasons.Where(row => row.Position == \"Defender\").Select(row => new { row.DraftPickNumber, row.DraftClass }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT Team) FROM match_season",
    "result": "context.MatchSeasons.Select(row => row.Team).Distinct().Count();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Player , Years_Played FROM player",
    "result": "context.Players.Select(row => new { row.Player1, row.YearsPlayed }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM Team",
    "result": "context.Teams.Select(row => new { row.Name }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Season , T2.Player , T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country",
    "result": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Season, row.T2.Player, row.T1.CountryName }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Country_name = \"Indonesia\"",
    "result": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CountryName == \"Indonesia\").Select(row => new { row.T2.Player }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = \"Dublin\"",
    "result": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Capital == \"Dublin\").Select(row => new { row.T2.Position }).Distinct().ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = \"Maryland\" OR T2.College = \"Duke\"",
    "result": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T2.College == \"Maryland\" || row.T2.College == \"Duke\").Select(row => new { row.T1.OfficialNativeLanguage }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\"",
    "result": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Position == \"Defender\").Select(row => row.T1.OfficialNativeLanguage).Distinct().Count();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Season , T1.Player , T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id",
    "result": "context.MatchSeasons.Join(context.Teams, T1 => T1.Team, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Season, row.T1.Player, row.T2.Name }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Ryley Goldner\"",
    "result": "context.MatchSeasons.Join(context.Teams, T1 => T1.Team, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Ryley Goldner\").Select(row => new { row.T1.Position }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\"",
    "result": "context.MatchSeasons.Join(context.Teams, T1 => T1.Team, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Columbus Crew\").Select(row => row.T1.College).Distinct().Count();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\"",
    "result": "context.Players.Join(context.Teams, T1 => T1.Team, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Columbus Crew\").Select(row => new { row.T1.Player1, row.T1.YearsPlayed }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT POSITION , COUNT(*) FROM match_season GROUP BY POSITION",
    "result": "context.MatchSeasons.GroupBy(row => new { row.Position }).Select(group => new { group.Key.Position, Count = group.Count() }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name",
    "result": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CountryName }).Select(group => new { group.Key.CountryName, Count = group.Count() }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT player FROM match_season ORDER BY College ASC",
    "result": "context.MatchSeasons.OrderBy(row => row.College).Select(row => new { row.Player }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1",
    "result": "context.MatchSeasons.GroupBy(row => new { row.Position }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Position }).Take(1).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
    "result": "context.MatchSeasons.GroupBy(row => new { row.College }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.College }).Take(3).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT College FROM match_season GROUP BY College HAVING count(*) >= 2",
    "result": "context.MatchSeasons.GroupBy(row => new { row.College }).Where(group => group.Count() >= 2).Select(group => new { group.Key.College }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
    "result": "context.Teams.Where(row => !context.MatchSeasons.Select(row => row.Team).Contains(row.TeamId)).Select(row => new { row.Name }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\"",
    "result": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Position == \"Forward\").Select(row => row.T1.CountryName).Intersect(context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Position == \"Defender\").Select(row => row.T1.CountryName)).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT College FROM match_season WHERE POSITION = \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION = \"Defender\"",
    "result": "context.MatchSeasons.Where(row => row.Position == \"Midfielder\").Select(row => row.College).Intersect(context.MatchSeasons.Where(row => row.Position == \"Defender\").Select(row => row.College)).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(hours) FROM projects",
    "result": "context.Projects.Select(row => row.Hours).Sum();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT name) FROM projects",
    "result": "context.Projects.Select(row => row.Name).Distinct().Count();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(hours) FROM projects",
    "result": "context.Projects.Select(row => row.Hours).Average();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
    "result": "context.Projects.OrderByDescending(row => row.Hours).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM projects WHERE hours > (SELECT avg(hours) FROM projects)",
    "result": "context.Projects.Where(row => row.Hours > context.Projects.Select(row => row.Hours).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300",
    "result": "context.Projects.Where(row => row.Hours >= 100 && row.Hours <= 300).Select(row => new { row.Name }).ToList();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM COURSE",
    "result": "context.Courses.Count();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM COURSE WHERE Credits > 2",
    "result": "context.Courses.Where(row => row.Credits > 2).Count();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT CName FROM COURSE WHERE Credits = 1",
    "result": "context.Courses.Where(row => row.Credits == 1).Select(row => new { row.Cname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT CName FROM COURSE WHERE Days = \"MTW\"",
    "result": "context.Courses.Where(row => row.Days == \"MTW\").Select(row => new { row.Cname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM DEPARTMENT WHERE Division = \"AS\"",
    "result": "context.Departments.Where(row => row.Division == \"AS\").Count();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DPhone FROM DEPARTMENT WHERE Room = 268",
    "result": "context.Departments.Where(row => row.Room == \"268\").Select(row => new { row.Dphone }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade = \"B\"",
    "result": "context.EnrolledIns.Where(row => row.Grade == \"B\").Select(row => row.StuId).Distinct().Count();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(gradepoint) , min(gradepoint) FROM GRADECONVERSION",
    "result": "context.Gradeconversions.GroupBy(row => 1).Select(group => new { MaxGradepoint = group.Select(row => row.Gradepoint).Max(), MinGradepoint = group.Select(row => row.Gradepoint).Min() }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
    "result": "context.Students.Where(row => EF.Functions.Like(row.Fname, \"%a%\")).Select(row => new { row.Fname }).Distinct().ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Fname , Lname FROM FACULTY WHERE sex = \"M\" AND Building = \"NEB\"",
    "result": "context.Faculties.Where(row => row.Sex == \"M\" && row.Building == \"NEB\").Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Room FROM FACULTY WHERE Rank = \"Professor\" AND Building = \"NEB\"",
    "result": "context.Faculties.Where(row => row.Rank == \"Professor\" && row.Building == \"NEB\").Select(row => new { row.Room }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DName FROM DEPARTMENT WHERE Building = \"Mergenthaler\"",
    "result": "context.Departments.Where(row => row.Building == \"Mergenthaler\").Select(row => new { row.Dname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT CName FROM COURSE ORDER BY Credits",
    "result": "context.Courses.OrderBy(row => row.Credits).Select(row => new { row.Cname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Fname FROM STUDENT ORDER BY Age DESC",
    "result": "context.Students.OrderByDescending(row => row.Age).Select(row => new { row.Fname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LName FROM STUDENT WHERE Sex = \"F\" ORDER BY Age DESC",
    "result": "context.Students.Where(row => row.Sex == \"F\").OrderByDescending(row => row.Age).Select(row => new { row.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Lname FROM FACULTY WHERE Building = \"Barton\" ORDER BY Lname",
    "result": "context.Faculties.Where(row => row.Building == \"Barton\").OrderBy(row => row.Lname).Select(row => new { row.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Fname FROM FACULTY WHERE Rank = \"Professor\" ORDER BY Fname",
    "result": "context.Faculties.Where(row => row.Rank == \"Professor\").OrderBy(row => row.Fname).Select(row => new { row.Fname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Departments.Join(context.MinorIns, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Dno }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Dname }).Take(1).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO",
    "result": "context.Departments.Select(row => row.Dname).Except(context.Departments.Join(context.MinorIns, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Dname)).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Departments.Join(context.MemberOfs, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Dno }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.Dname }).Take(1).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Faculties.GroupBy(row => new { row.Rank }).OrderBy(group => group.Count()).Select(group => new { group.Key.Rank }).Take(1).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
    "result": "context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Instructor }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Fname, group.First().T2.Lname }).Take(3).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Instructor }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Building }).Take(1).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT(*) >= 5",
    "result": "context.Courses.Join(context.EnrolledIns, T1 => T1.Cid, T2 => T2.Cid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Cid }).Where(group => group.Count() >= 5).Select(group => new { group.First().T1.Cname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE T1.CName = \"COMPUTER LITERACY\"",
    "result": "context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Cname == \"COMPUTER LITERACY\").Select(row => new { row.T2.Fname, row.T2.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Dname , T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = \"INTRODUCTION TO COMPUTER SCIENCE\"",
    "result": "context.Courses.Join(context.Departments, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Cname == \"INTRODUCTION TO COMPUTER SCIENCE\").Select(row => new { row.T2.Dname, row.T2.Room }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Fname , T3.LName , T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID",
    "result": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Fname, row.T3.Lname, row.T2.Gradepoint }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T2.gradepoint >= 3.8",
    "result": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Gradepoint >= 3.8).Select(row => new { row.T3.Fname }).Distinct().ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Fname , T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520",
    "result": "context.Faculties.Join(context.MemberOfs, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Dno == 520).Select(row => new { row.T1.Fname, row.T1.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Fname , T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE T1.DNO = 140",
    "result": "context.MinorIns.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Dno == 140).Select(row => new { row.T2.Fname, row.T2.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = \"Computer Science\"",
    "result": "context.Departments.Join(context.MemberOfs, T1 => T1.Dno, T3 => T3.Dno, (T1, T3) => new { T1, T3 }).Join(context.Faculties, joined => joined.T3.FacId, T2 => T2.FacId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T1.Dname == \"Computer Science\").Select(row => new { row.T2.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = \"Smith\"",
    "result": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Lname == \"Smith\").Select(row => (double) row.T2.Gradepoint).Average();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(T2.gradepoint) , min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = \"NYC\"",
    "result": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CityCode == \"NYC\").GroupBy(row => 1).Select(group => new { MaxGradepointT2 = group.Select(row => row.T2.Gradepoint).Max(), MinGradepointT2 = group.Select(row => row.T2.Gradepoint).Min() }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT CName FROM COURSE WHERE Credits = 3 UNION SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4",
    "result": "context.Courses.Where(row => row.Credits == 3).Select(row => row.Cname).Union(context.Courses.Where(row => row.Credits == 1 && row.Hours == \"4\").Select(row => row.Cname)).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DName FROM DEPARTMENT WHERE Division = \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division = \"EN\" AND Building = \"NEB\"",
    "result": "context.Departments.Where(row => row.Division == \"AS\").Select(row => row.Dname).Union(context.Departments.Where(row => row.Division == \"EN\" && row.Building == \"NEB\").Select(row => row.Dname)).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
    "result": "context.Students.Where(row => !context.EnrolledIns.Select(row => row.StuId).Contains(row.StuId)).Select(row => new { row.Fname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.name = \"buttercup kitchen\";",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"san francisco\" && row.t1.Name == \"buttercup kitchen\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"chinese\";",
    "result": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Region == \"bay area\" && row.t1.FoodType == \"chinese\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.county = \"santa cruz county\" AND t1.name = \"jamerican cuisine\";",
    "result": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Where(row => row.t2.County == \"santa cruz county\" && row.t1.Name == \"jamerican cuisine\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t1.name = \"jamerican cuisine\";",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Name == \"jamerican cuisine\").Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" );",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"san francisco\" && row.t1.FoodType == \"french\" && row.t1.Rating == context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"san francisco\" && row.t1.FoodType == \"french\").Select(row => row.t1.Rating).Max()).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.name = \"denny\";",
    "result": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Join(context.Locations, joined => joined.t1.Id, t3 => t3.RestaurantId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.Region == \"bay area\" && row.t1.Name == \"denny\").Select(row => new { row.t3.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"bethel island\" AND t2.street_name = \"bethel island rd\" AND t1.rating > 2.5;",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"bethel island\" && row.t2.StreetName == \"bethel island rd\" && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"alameda\";",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"alameda\").Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t1.food_type = \"french\" AND t1.rating > 2.5;",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.FoodType == \"french\" && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"palo alto\" AND t1.food_type = \"french\";",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"palo alto\" && row.t1.FoodType == \"french\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.county = \"yolo county\" AND t1.food_type = \"italian\";",
    "result": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Where(row => row.t2.County == \"yolo county\" && row.t1.FoodType == \"italian\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"french\";",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"mountain view\" && row.t1.FoodType == \"french\").Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.name = \"denny\";",
    "result": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Region == \"bay area\" && row.t1.Name == \"denny\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"alameda\" AND t1.rating > 2.5;",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"alameda\" && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"san francisco\" && row.t2.StreetName == \"buchanan\" && row.t1.FoodType == \"arabic\" && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"french\";",
    "result": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Join(context.Locations, joined => joined.t1.Id, t3 => t3.RestaurantId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.Region == \"bay area\" && row.t1.FoodType == \"french\").Select(row => new { row.t3.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"bethel island\" AND t2.street_name = \"bethel island rd\";",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"bethel island\" && row.t2.StreetName == \"bethel island rd\").Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" );",
    "result": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Join(context.Locations, joined => joined.t1.Id, t3 => t3.RestaurantId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.Region == \"bay area\" && row.t1.FoodType == \"american\" && row.t1.Rating == context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Region == \"bay area\" && row.t1.FoodType == \"american\").Select(row => row.t1.Rating).Max()).Select(row => new { row.t3.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"yosemite and mono lake area\" AND t1.food_type = \"french\" AND t1.rating > 2.5;",
    "result": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Join(context.Locations, joined => joined.t1.Id, t3 => t3.RestaurantId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.Region == \"yosemite and mono lake area\" && row.t1.FoodType == \"french\" && row.t1.Rating > 2.5).Select(row => new { row.t3.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"mountain view\" && row.t1.FoodType == \"arabic\" && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.name = \"jamerican cuisine\";",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"san francisco\" && row.t1.Name == \"jamerican cuisine\").Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region = \"bay area\" );",
    "result": "context.Locations.Join(context.Restaurants, t2 => t2.RestaurantId, t1 => t1.Id, (t2, t1) => new { t2, t1 }).Where(row => context.Geographics.Where(row => row.Region == \"bay area\").Select(row => row.CityName).Contains(row.t1.CityName)).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region = \"region0\" ) AND t1.rating > 2.5;",
    "result": "context.Locations.Join(context.Restaurants, t2 => t2.RestaurantId, t1 => t1.Id, (t2, t1) => new { t2, t1 }).Where(row => context.Geographics.Where(row => row.Region == \"region0\").Select(row => row.CityName).Contains(row.t1.CityName) && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
    "result": "context.Channels.Where(row => row.Owner != \"CCTV\").Select(row => new { row.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
    "result": "context.Channels.OrderByDescending(row => row.RatingInPercent).Select(row => new { row.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1",
    "result": "context.Channels.OrderByDescending(row => row.RatingInPercent).Select(row => new { row.Owner }).Take(1).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM program",
    "result": "context.Programs.Count();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM program ORDER BY launch",
    "result": "context.Programs.OrderBy(row => row.Launch).Select(row => new { row.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , origin , OWNER FROM program",
    "result": "context.Programs.Select(row => new { row.Name, row.Origin, row.Owner }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
    "result": "context.Programs.OrderByDescending(row => row.Launch).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER = 'CCTV'",
    "result": "context.Channels.Where(row => row.Owner == \"CCTV\").Select(row => row.ShareInPercent).Sum();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning'",
    "result": "context.Channels.Join(context.Broadcasts, t1 => t1.ChannelId, t2 => t2.ChannelId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Morning\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Night'",
    "result": "context.Channels.Join(context.Broadcasts, t1 => t1.ChannelId, t2 => t2.ChannelId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Morning\").Select(row => row.t1.Name).Intersect(context.Channels.Join(context.Broadcasts, t1 => t1.ChannelId, t2 => t2.ChannelId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Night\").Select(row => row.t1.Name)).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , time_of_day FROM broadcast GROUP BY time_of_day",
    "result": "context.Broadcasts.GroupBy(row => new { row.TimeOfDay }).Select(group => new { Count = group.Count(), group.Key.TimeOfDay }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day = 'Night'",
    "result": "context.Broadcasts.Where(row => row.TimeOfDay == \"Night\").Select(row => row.ProgramId).Distinct().Count();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Morning\"",
    "result": "context.Programs.Select(row => row.Name).Except(context.Programs.Join(context.Broadcasts, t1 => t1.ProgramId, t2 => t2.ProgramId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Morning\").Select(row => row.t1.Name)).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Night\"",
    "result": "context.Programs.Join(context.Broadcasts, t1 => t1.ProgramId, t2 => t2.ProgramId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Morning\").Select(row => row.t1.Owner).Intersect(context.Programs.Join(context.Broadcasts, t1 => t1.ProgramId, t2 => t2.ProgramId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Night\").Select(row => row.t1.Owner)).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT origin FROM program ORDER BY origin",
    "result": "context.Programs.OrderBy(row => row.Origin).Select(row => new { row.Origin }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT OWNER) FROM channel",
    "result": "context.Channels.Select(row => row.Owner).Distinct().Count();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM program WHERE origin != 'Beijing'",
    "result": "context.Programs.Where(row => row.Origin != \"Beijing\").Select(row => new { row.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'",
    "result": "context.Channels.Where(row => row.Owner == \"CCTV\" || row.Owner == \"HBS\").Select(row => new { row.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(Rating_in_percent) , OWNER FROM channel GROUP BY OWNER",
    "result": "context.Channels.GroupBy(row => new { row.Owner }).Select(group => new { SumRatingInPercent = group.Select(row => row.RatingInPercent).Sum(), group.Key.Owner }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Programs.Join(context.Broadcasts, t1 => t1.ProgramId, t2 => t2.ProgramId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ProgramId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.Name }).Take(1).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Trains.Join(context.Route, t1 => t1.Id, t2 => t2.TrainId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.TrainId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.Name }).Take(1).ToList();",
    "db_name": "station_weather",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,40): error CS1061: 'StationWeatherContext' does not contain a definition for 'Route' and no accessible extension method 'Route' accepting a first argument of type 'StationWeatherContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.40"
  },
  {
    "query": "SELECT count(*) , t1.network_name , t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id",
    "result": "context.Stations.Join(context.Route, t1 => t1.Id, t2 => t2.StationId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.StationId }).Select(group => new { Count = group.Count(), group.First().t1.NetworkName, group.First().t1.Services }).ToList();",
    "db_name": "station_weather",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS1061: 'StationWeatherContext' does not contain a definition for 'Route' and no accessible extension method 'Route' accepting a first argument of type 'StationWeatherContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.28"
  },
  {
    "query": "SELECT t3.name , t3.time FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\"",
    "result": "context.Stations.Join(context.Route, t1 => t1.Id, t2 => t2.StationId, (t1, t2) => new { t1, t2 }).Join(context.Trains, joined => joined.t2.TrainId, t3 => t3.Id, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.LocalAuthority == \"Chiltern\").Select(row => new { row.t3.Name, row.t3.Time }).ToList();",
    "db_name": "station_weather",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS1061: 'StationWeatherContext' does not contain a definition for 'Route' and no accessible extension method 'Route' accepting a first argument of type 'StationWeatherContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.47"
  },
  {
    "query": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code",
    "result": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Select(row => new { T1Code = rowT1..Code, T1Name = rowT1..Name, rowT1..Price, rowT1..Manufacturer, T2Code = rowT2..Code, T2Name = rowT2..Name, rowT2..Headquarter, rowT2..Founder, rowT2..Revenue }).ToList();",
    "db_name": "manufactory_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,309): error CS0103: The name 'Revenue' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    23 Error(s)\n\nTime Elapsed 00:00:01.26"
  },
  {
    "query": "SELECT T1.Name , max(T1.Price) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name",
    "result": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { group.Key.Name, MaxPrice = group.Select(row => row.T1.Price).Max(), group.Key.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,249): error CS0833: An anonymous type cannot have multiple properties with the same name [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.40"
  },
  {
    "query": "SELECT code , name , min(price) FROM products GROUP BY name",
    "result": "context.Products.GroupBy(row => new { row.Name }).Select(group => new { group.First().Code, group.Key.Name, MinPrice = group.Select(row => row.Price).Min() }).ToList();",
    "db_name": "manufactory_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 7, 1: CD drive, 2: 90}, {0: 10, 1: DVD burner, 2: 180}, {0: 11, 1: DVD drive, 2: 150}, {0: 4, 1: Floppy disk, 2: 5}, {0: 1, 1: Hard drive, 2: 240}, {0: 2, 1: Memory, 2: 120}, {0: 5, 1: Monitor, 2: 240}, {0: 8, 1: Printer, 2: 270}, {0: 9, 1: Toner cartridge, 2: 66}, {0: 3, 1: ZIP drive, 2: 150}]\", linq_results: \"[{0: 7, 1: CD drive, 2: 90}, {0: 10, 1: DVD burner, 2: 180}, {0: 6, 1: DVD drive, 2: 150}, {0: 4, 1: Floppy disk, 2: 5}, {0: 1, 1: Hard drive, 2: 240}, {0: 2, 1: Memory, 2: 120}, {0: 5, 1: Monitor, 2: 240}, {0: 8, 1: Printer, 2: 270}, {0: 9, 1: Toner cartridge, 2: 66}, {0: 3, 1: ZIP drive, 2: 150}]\" }"
  },
  {
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'shopping'",
    "result": "context.TouristAttractions.Join(context.TouristAttractionFeature, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Join(context.Features, joined => joined.T2.FeatureId, T3 => T3.FeatureId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.FeatureDetails == \"park\").Select(row => row.T1.Name).Union(context.TouristAttractions.Join(context.TouristAttractionFeature, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Join(context.Features, joined => joined.T2.FeatureId, T3 => T3.FeatureId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.FeatureDetails == \"shopping\").Select(row => row.T1.Name)).ToList();",
    "db_name": "cre_Theme_park",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,409): error CS1061: 'CreThemeParkContext' does not contain a definition for 'TouristAttractionFeature' and no accessible extension method 'TouristAttractionFeature' accepting a first argument of type 'CreThemeParkContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.18"
  },
  {
    "query": "SELECT date FROM weather WHERE max_temperature_f > 85",
    "result": "context.Weathers.Where(row => row.MaxTemperatureF > \"85\").Select(row => new { row.Date }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.31"
  },
  {
    "query": "SELECT zip_code , avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
    "result": "context.Weathers.Where(row => EF.Functions.Like(row.Date, \"8/%\")).GroupBy(row => new { row.ZipCode }).Select(group => new { group.Key.ZipCode, AverageMeanTemperatureF = group.Select(row => row.MeanTemperatureF).Average() }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,181): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.30"
  },
  {
    "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8",
    "result": "context.Weathers.Where(row => row.MeanHumidity > \"50\" && row.MeanVisibilityMiles > \"8\").Count();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,69): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.28"
  },
  {
    "query": "SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10",
    "result": "context.Stations.Where(row => row.City == \"San Francisco\").Select(row => row.Id).Intersect(context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Average(row => row.BikesAvailable) > 10).Where(group => group.Key.StationId.HasValue).Select(group => group.Key.StationId.Value)).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
    "result": "context.Weathers.GroupBy(row => new { row.ZipCode }).OrderBy(group => group.Average(row => row.MeanSeaLevelPressureInches)).Select(group => new { group.Key.ZipCode }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,103): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.36"
  },
  {
    "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city = \"Palo Alto\")",
    "result": "context.Statuses.Where(row => row.StationId.HasValue && !context.Stations.Where(row => row.City == \"Palo Alto\").Select(row => row.Id).Contains(row.StationId.Value)).Select(row => row.BikesAvailable).Average();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date , zip_code FROM weather WHERE max_temperature_f >= 80",
    "result": "context.Weathers.Where(row => row.MaxTemperatureF >= \"80\").Select(row => new { row.Date, row.ZipCode }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '>=' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.28"
  },
  {
    "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f) > 60",
    "result": "context.Trips.Join(context.Weathers, T1 => T1.ZipCode, T2 => T2.ZipCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ZipCode }).Where(group => group.Average(row => row.T2.MeanTemperatureF) > 60).Select(group => new { group.First().T1.Id }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,26): error CS0411: The type arguments for method 'Enumerable.Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)' cannot be inferred from the usage. Try specifying the type arguments explicitly. [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.27"
  },
  {
    "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code",
    "result": "context.Weathers.Where(row => row.MaxWindSpeedMph >= \"25\").GroupBy(row => new { row.ZipCode }).Select(group => new { group.Key.ZipCode, Count = group.Count() }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '>=' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.28"
  },
  {
    "query": "SELECT date , zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)",
    "result": "context.Weathers.Where(row => row.MinDewPointF < context.Weathers.Where(row => row.ZipCode == 94107).Select(row => row.MinDewPointF).Min()).Select(row => new { row.Date, row.ZipCode }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.32"
  },
  {
    "query": "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available) < 7",
    "result": "context.Stations.Where(row => row.Lat > 37.4).Select(row => row.Id).Except(context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Min(row => row.BikesAvailable) < 7).Where(group => group.Key.StationId.HasValue).Select(group => group.Key.StationId.Value)).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles) < 10",
    "result": "context.Weathers.GroupBy(row => new { row.ZipCode }).Where(group => group.Average(row => row.MeanVisibilityMiles) < 10).Select(group => new { group.Key.ZipCode }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,101): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.30"
  },
  {
    "query": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70",
    "result": "context.Weathers.Select(row => row.ZipCode).Distinct().Except(context.Weathers.Where(row => row.MaxDewPointF >= \"70\").Select(row => row.ZipCode).Distinct()).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,104): error CS0019: Operator '>=' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.29"
  },
  {
    "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
    "result": "context.Weathers.Where(row => row.MeanSeaLevelPressureInches >= 30.3 && row.MeanSeaLevelPressureInches <= 31).Select(row => new { row.Date }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,84): error CS0019: Operator '<=' cannot be applied to operands of type 'string' and 'int' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.33"
  },
  {
    "query": "SELECT date , max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
    "result": "context.Weathers.Select(row => new { row.Date, Diff = row.MaxTemperatureF - row.MinTemperatureF }).OrderBy(row => row.Diff).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,66): error CS0019: Operator '-' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34"
  },
  {
    "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*) >= 100",
    "result": "context.Weathers.GroupBy(row => new { row.ZipCode }).Where(group => group.Average(row => row.MeanHumidity) < 70).Select(group => group.Key.ZipCode).Intersect(context.Trips.GroupBy(row => new { row.ZipCode }).Where(group => group.Count() >= 100).Select(group => group.Key.ZipCode)).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,101): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.34"
  },
  {
    "query": "SELECT count(*) , account_id FROM Financial_transactions",
    "result": "context.FinancialTransactions.Select(row => new { Count = row.Count(), row.AccountId }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,74): error CS1061: 'FinancialTransaction' does not contain a definition for 'Count' and no accessible extension method 'Count' accepting a first argument of type 'FinancialTransaction' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.39"
  },
  {
    "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > (SELECT avg(transaction_amount) FROM Financial_transactions)",
    "result": "context.FinancialTransactions.Where(row => row.TransactionAmount > context.FinancialTransactions.Select(row => (double) row.TransactionAmount).Average()).Select(row => new { row.TransactionId }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,55): error CS0019: Operator '>' cannot be applied to operands of type 'decimal?' and 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.31"
  },
  {
    "query": "SELECT T2.product_name , sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name",
    "result": "context.OrderItems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ProductName }).Select(group => new { group.Key.ProductName, SumProductQuantity = group.Select(row => row.T1.ProductQuantity).Sum() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,231): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34"
  },
  {
    "query": "SELECT order_id , sum(product_quantity) FROM Order_items GROUP BY order_id",
    "result": "context.OrderItems.GroupBy(row => new { row.OrderId }).Select(group => new { group.Key.OrderId, SumProductQuantity = group.Select(row => row.ProductQuantity).Sum() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,129): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.37"
  },
  {
    "query": "SELECT avg(t1.age) , avg(Years_working) , t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type",
    "result": "context.Journalists.Join(context.NewsReports, t1 => t1.JournalistId, t2 => t2.JournalistId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.WorkType }).Select(group => new { AverageAge = group.Select(row => row.t1.Age).Average(), AverageYearsWorking = group.Select(row => row.t1.YearsWorking).Average(), group.Key.WorkType }).ToList();",
    "db_name": "news_report",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,207): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.28"
  },
  {
    "query": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id = t2.product_id JOIN store AS t3 ON t2.store_id = t3.store_id WHERE t3.store_name = \"Miramichi\"",
    "result": "context.Products.Join(context.StoreProduct, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Stores, joined => joined.t2.StoreId, t3 => t3.StoreId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.StoreName == \"Miramichi\").Select(row => new { row.t1.Product1 }).ToList();",
    "db_name": "store_product",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS1061: 'StoreProductContext' does not contain a definition for 'StoreProduct' and no accessible extension method 'StoreProduct' accepting a first argument of type 'StoreProductContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.39"
  },
  {
    "query": "SELECT count(*) , rank FROM captain WHERE age < 50 GROUP BY rank",
    "result": "context.Captains.Where(row => row.Age < \"50\").GroupBy(row => new { row.Rank }).Select(group => new { Count = group.Count(), group.Key.Rank }).ToList();",
    "db_name": "ship_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.35"
  },
  {
    "query": "SELECT avg(age) , min(age) , CLASS FROM captain GROUP BY CLASS",
    "result": "context.Captains.GroupBy(row => new { row.Class }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), MinAge = group.Select(row => row.Age).Min(), group.Key.Class }).ToList();",
    "db_name": "ship_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,98): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.37"
  },
  {
    "query": "SELECT product_name , typical_buying_price FROM products",
    "result": "context.Products.Select(row => new { row.ProductName, row.TypicalBuyingPrice }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT count(*) FROM products WHERE product_category_code = \"Spices\" AND typical_buying_price > 1000",
    "result": "context.Products.Where(row => row.ProductCategoryCode == \"Spices\" && row.TypicalBuyingPrice > 1000).Count();",
    "db_name": "products_gen_characteristics",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT product_category_code , typical_buying_price FROM products WHERE product_name = \"cumin\"",
    "result": "context.Products.Where(row => row.ProductName == \"cumin\").Select(row => new { row.ProductCategoryCode, row.TypicalBuyingPrice }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT t1.product_name , t1.typical_buying_price , t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"yellow\"",
    "result": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).Where(row => row.t2.ColorDescription == \"yellow\").Select(row => new { row.t1.ProductName, row.t1.TypicalBuyingPrice, row.t1.TypicalSellingPrice }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT DISTINCT T2.thing_id , T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.Status_of_Thing_Code = 'Close' OR T1.Date_and_Date < '2017-06-19 02:59:21'",
    "result": "context.TimedStatusOfThings.Join(context.Things, T1 => T1.ThingId, T2 => T2.ThingId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StatusOfThingCode == \"Close\" || row.T1.DateAndDate < \"2017-06-19 02:59:21\").Select(row => new { row.T2.ThingId, row.T2.TypeOfThingCode }).Distinct().ToList();",
    "db_name": "local_govt_and_lot",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,177): error CS0019: Operator '<' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.30"
  },
  {
    "query": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations",
    "result": "context.Organizations.Select(row => row.OrganizationId).Except(context.Organizations.Where(row => row.ParentOrganizationId.HasValue).Select(row => row.ParentOrganizationId.Value)).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM WINE WHERE YEAR = \"2008\"",
    "result": "context.Wines.Where(row => row.Year == \"2008\").Select(row => new { row.Name }).ToList();",
    "db_name": "wine_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,39): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.45"
  },
  {
    "query": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING T2.year < 2010 ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Appelation }).Where(group => group.T2.Year < 2010).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Area }).Take(1).ToList();",
    "db_name": "wine_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,186): error CS1061: 'IGrouping<<anonymous type: string Appelation>, <anonymous type: Appellation T1, Wine T2>>' does not contain a definition for 'T2' and no accessible extension method 'T2' accepting a first argument of type 'IGrouping<<anonymous type: string Appelation>, <anonymous type: Appellation T1, Wine T2>>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.42"
  },
  {
    "query": "SELECT AVG(Price) , AVG(Cases) FROM WINE WHERE YEAR = 2009 AND Grape = \"Zinfandel\"",
    "result": "context.Wines.Where(row => row.Year == 2009 && row.Grape == \"Zinfandel\").GroupBy(row => 1).Select(group => new { AveragePrice = group.Select(row => row.Price).Average(), AverageCases = group.Select(row => row.Cases).Average() }).ToList();",
    "db_name": "wine_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,197): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.26"
  },
  {
    "query": "SELECT main_industry , count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
    "result": "context.Companies.GroupBy(row => new { row.MainIndustry }).Select(group => new { group.Key.MainIndustry, Count = group.Count() }).OrderByDescending(group => group.Sum(row => row.MarketValue)).Take(1).ToList();",
    "db_name": "gas_company",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,175): error CS1061: '<anonymous type: string MainIndustry, int Count>' does not contain a definition for 'Sum' and no accessible extension method 'Sum' accepting a first argument of type '<anonymous type: string MainIndustry, int Count>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.27"
  },
  {
    "query": "SELECT College FROM match_season GROUP BY College HAVING count(*) >= 2 ORDER BY College DESC",
    "result": "context.MatchSeasons.GroupBy(row => new { row.College }).Where(group => group.Count() >= 2).OrderByDescending(group => group.College).Select(group => new { group.Key.College }).ToList();",
    "db_name": "match_season",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,137): error CS1061: 'IGrouping<<anonymous type: string College>, MatchSeason>' does not contain a definition for 'College' and no accessible extension method 'College' accepting a first argument of type 'IGrouping<<anonymous type: string College>, MatchSeason>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38"
  },
  {
    "query": "SELECT * FROM COURSE ORDER BY Credits",
    "result": "context.Courses.OrderBy(row => row.Credits).Select(row => new { row..Cid, row..Cname, row..Credits, row..Instructor, row..Days, row..Hours, row..Dno }).ToList();",
    "db_name": "college_3",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,157): error CS0103: The name 'Dno' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    21 Error(s)\n\nTime Elapsed 00:00:01.30"
  },
  {
    "query": "SELECT DISTINCT building FROM classroom WHERE capacity > 50",
    "result": "context.Classrooms.Where(row => row.Capacity > 50).Select(row => new { row.Building }).Distinct().ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'",
    "result": "context.Classrooms.Where(row => row.Building != \"Lamberton\").Count();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT dept_name , building FROM department WHERE budget > (SELECT avg(budget) FROM department)",
    "result": "context.Departments.Where(row => row.Budget > context.Departments.Select(row => (double) row.Budget).Average()).Select(row => new { row.DeptName, row.Building }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT building , room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
    "result": "context.Classrooms.Where(row => row.Capacity >= 50 && row.Capacity <= 100).Select(row => new { row.Building, row.RoomNumber }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT dept_name , building FROM department ORDER BY budget DESC LIMIT 1",
    "result": "context.Departments.OrderByDescending(row => row.Budget).Select(row => new { row.DeptName, row.Building }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1",
    "result": "context.Students.Where(row => row.DeptName == \"History\").OrderByDescending(row => row.TotCred).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT count(*) FROM classroom WHERE building = 'Lamberton'",
    "result": "context.Classrooms.Where(row => row.Building == \"Lamberton\").Count();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT count(DISTINCT s_id) FROM advisor",
    "result": "context.Advisors.Select(row => row.SId).Distinct().Count();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT count(DISTINCT dept_name) FROM course",
    "result": "context.Courses.Select(row => row.DeptName).Distinct().Count();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name = 'Physics'",
    "result": "context.Courses.Where(row => row.DeptName == \"Physics\").Select(row => row.CourseId).Distinct().Count();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count(*) = 2",
    "result": "context.Courses.Join(context.Prereq, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CourseId }).Where(group => group.Count() == 2).Select(group => new { group.First().T1.Title }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,41): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.43"
  },
  {
    "query": "SELECT T1.title , T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count(*) > 1",
    "result": "context.Courses.Join(context.Prereq, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CourseId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Title, group.First().T1.Credits, group.First().T1.DeptName }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,41): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.26"
  },
  {
    "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
    "result": "context.Courses.Where(row => !context.Prereq.Select(row => row.CourseId).Contains(row.CourseId)).Count();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,50): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.35"
  },
  {
    "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
    "result": "context.Courses.Where(row => !context.Prereq.Select(row => row.CourseId).Contains(row.CourseId)).Select(row => new { row.Title }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,50): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.61"
  },
  {
    "query": "SELECT COUNT (DISTINCT id) FROM teaches",
    "result": "context.Teach.Select(row => row.Id).Distinct().Count();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34"
  },
  {
    "query": "SELECT sum(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'",
    "result": "context.Departments.Where(row => row.DeptName == \"Marketing\" || row.DeptName == \"Finance\").Select(row => row.Budget).Sum();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'",
    "result": "context.Instructors.Where(row => EF.Functions.Like(row.Name, \"%Soisalon%\")).Select(row => new { row.DeptName }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT count(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50",
    "result": "context.Classrooms.Where(row => row.Building == \"Lamberton\" && row.Capacity < 50).Count();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT dept_name , budget FROM department WHERE budget > (SELECT avg(budget) FROM department)",
    "result": "context.Departments.Where(row => row.Budget > context.Departments.Select(row => (double) row.Budget).Average()).Select(row => new { row.DeptName, row.Budget }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1",
    "result": "context.Instructors.Where(row => row.DeptName == \"Statistics\").OrderBy(row => row.Salary).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT title FROM course WHERE dept_name = 'Statistics' INTERSECT SELECT title FROM course WHERE dept_name = 'Psychology'",
    "result": "context.Courses.Where(row => row.DeptName == \"Statistics\").Select(row => row.Title).Intersect(context.Courses.Where(row => row.DeptName == \"Psychology\").Select(row => row.Title)).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'",
    "result": "context.Courses.Where(row => row.DeptName == \"Statistics\").Select(row => row.Title).Except(context.Courses.Where(row => row.DeptName == \"Psychology\").Select(row => row.Title)).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010",
    "result": "context.Teach.Where(row => row.Semester == \"Fall\" && row.Year == 2009).Select(row => row.Id).Except(context.Teach.Where(row => row.Semester == \"Spring\" && row.Year == 2010).Select(row => row.Id)).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,120): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.33"
  },
  {
    "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE YEAR = 2009 OR YEAR = 2010",
    "result": "context.Students.Join(context.Takes, T1 => T1.Id, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2009 || row.T2.Year == 2010).Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
    "result": "context.Courses.GroupBy(row => new { row.DeptName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DeptName }).Take(3).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
    "result": "context.Courses.GroupBy(row => new { row.DeptName }).OrderByDescending(group => group.Sum(row => row.Credits)).Select(group => new { group.Key.DeptName }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT title FROM course ORDER BY title , credits",
    "result": "context.Courses.OrderBy(row => row.Title).ThenBy(row => row.Credits).Select(row => new { row.Title }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
    "result": "context.Departments.OrderBy(row => row.Budget).Select(row => new { row.DeptName }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT dept_name , building FROM department ORDER BY budget DESC",
    "result": "context.Departments.OrderByDescending(row => row.Budget).Select(row => new { row.DeptName, row.Building }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
    "result": "context.Instructors.OrderByDescending(row => row.Salary).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT * FROM instructor ORDER BY salary",
    "result": "context.Instructors.OrderBy(row => row.Salary).Select(row => new { row..Id, row..Name, row..DeptName, row..Salary }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,119): error CS0103: The name 'Salary' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    12 Error(s)\n\nTime Elapsed 00:00:01.30"
  },
  {
    "query": "SELECT name , dept_name FROM student ORDER BY tot_cred",
    "result": "context.Students.OrderBy(row => row.TotCred).Select(row => new { row.Name, row.DeptName }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT T1.title , T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 ORDER BY T1.title",
    "result": "context.Courses.Join(context.Teach, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Join(context.Instructors, joined => joined.T2.Id, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Year == 2008).OrderBy(row => row.T1.Title).Select(row => new { row.T1.Title, row.T3.Name }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,41): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.33"
  },
  {
    "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING count(*) > 1",
    "result": "context.Instructors.Join(context.Advisors, T1 => T1.Id, T2 => T2.IId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.IId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING count(*) > 1",
    "result": "context.Students.Join(context.Advisors, T1 => T1.Id, T2 => T2.SId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.SId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT count(*) , building FROM classroom WHERE capacity > 50 GROUP BY building",
    "result": "context.Classrooms.Where(row => row.Capacity > 50).GroupBy(row => new { row.Building }).Select(group => new { Count = group.Count(), group.Key.Building }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT max(capacity) , avg(capacity) , building FROM classroom GROUP BY building",
    "result": "context.Classrooms.GroupBy(row => new { row.Building }).Select(group => new { MaxCapacity = group.Select(row => row.Capacity).Max(), AverageCapacity = group.Select(row => row.Capacity).Average(), group.Key.Building }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT title FROM course GROUP BY title HAVING count(*) > 1",
    "result": "context.Courses.GroupBy(row => new { row.Title }).Where(group => group.Count() > 1).Select(group => new { group.Key.Title }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT sum(credits) , dept_name FROM course GROUP BY dept_name",
    "result": "context.Courses.GroupBy(row => new { row.DeptName }).Select(group => new { SumCredits = group.Select(row => row.Credits).Sum(), group.Key.DeptName }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT min(salary) , dept_name FROM instructor GROUP BY dept_name HAVING avg(salary) > (SELECT avg(salary) FROM instructor)",
    "result": "context.Instructors.GroupBy(row => new { row.DeptName }).Where(group => group.Average(row => row.Salary) > context.Instructors.Select(row => (double) row.Salary).Average()).Select(group => new { MinSalary = group.Select(row => row.Salary).Min(), group.Key.DeptName }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT count(*) , semester , YEAR FROM SECTION GROUP BY semester , YEAR",
    "result": "context.Sections.GroupBy(row => new { row.Semester, row.Year }).Select(group => new { Count = group.Count(), group.Key.Semester, group.Key.Year }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Sections.GroupBy(row => new { row.Year }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Year }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT semester , YEAR FROM SECTION GROUP BY semester , YEAR ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Sections.GroupBy(row => new { row.Semester, row.Year }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Semester, group.Key.Year }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Students.GroupBy(row => new { row.DeptName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DeptName }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT count(*) , dept_name FROM student GROUP BY dept_name",
    "result": "context.Students.GroupBy(row => new { row.DeptName }).Select(group => new { Count = group.Count(), group.Key.DeptName }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT semester , YEAR FROM takes GROUP BY semester , YEAR ORDER BY count(*) LIMIT 1",
    "result": "context.Takes.GroupBy(row => new { row.Semester, row.Year }).OrderBy(group => group.Count()).Select(group => new { group.Key.Semester, group.Key.Year }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'History'",
    "result": "context.Advisors.Join(context.Students, T1 => T1.SId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DeptName == \"History\").Select(row => new { row.T1.IId }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT T2.name , T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'History'",
    "result": "context.Advisors.Join(context.Instructors, T1 => T1.IId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.SId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\").Select(row => new { row.T2.Name, row.T2.Salary }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
    "result": "context.Courses.Select(row => row.CourseId).Except(context.Prereq.Select(row => row.CourseId)).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,71): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49"
  },
  {
    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')",
    "result": "context.Courses.Where(row => context.Prereq.Join(context.Courses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"International Finance\").Select(row => row.T1.PrereqId).Contains(row.CourseId)).Select(row => new { row.Title }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,49): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46"
  },
  {
    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry')",
    "result": "context.Courses.Where(row => context.Prereq.Join(context.Courses, T1 => T1.PrereqId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Differential Geometry\").Select(row => row.T1.CourseId).Contains(row.CourseId)).Select(row => new { row.Title }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,49): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.61"
  },
  {
    "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003)",
    "result": "context.Students.Where(row => context.Takes.Where(row => row.Semester == \"Fall\" && row.Year == 2003).Select(row => row.Id).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010",
    "result": "context.Courses.Join(context.Sections, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Building == \"Chandler\" && row.T2.Semester == \"Fall\" && row.T2.Year == 2010).Select(row => new { row.T1.Title }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'",
    "result": "context.Instructors.Join(context.Teach, T1 => T1.Id, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T2.CourseId, T3 => T3.CourseId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Title == \"C Programming\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,45): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.70"
  },
  {
    "query": "SELECT T2.name , T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math'",
    "result": "context.Advisors.Join(context.Instructors, T1 => T1.IId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.SId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"Math\").Select(row => new { row.T2.Name, row.T2.Salary }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math' ORDER BY T3.tot_cred",
    "result": "context.Advisors.Join(context.Instructors, T1 => T1.IId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.SId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"Math\").OrderBy(row => row.T3.TotCred).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing')",
    "result": "context.Courses.Where(row => context.Prereq.Join(context.Courses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Mobile Computing\").Select(row => row.T1.PrereqId).Contains(row.CourseId)).Select(row => new { row.Title }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,49): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.56"
  },
  {
    "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
    "result": "context.Advisors.Join(context.Instructors, T1 => T1.IId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.SId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T3.TotCred).Select(row => new { row.T2.Name }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
    "result": "context.Instructors.Where(row => !context.Teach.Select(row => row.Id).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,54): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.74"
  },
  {
    "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
    "result": "context.Instructors.Select(row => row.Id).Except(context.Teach.Select(row => row.Id)).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,69): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49"
  },
  {
    "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester = 'Spring')",
    "result": "context.Instructors.Where(row => !context.Teach.Where(row => row.Semester == \"Spring\").Select(row => row.Id).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,54): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.62"
  },
  {
    "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
    "result": "context.Instructors.GroupBy(row => new { row.DeptName }).OrderByDescending(group => group.Average(row => row.Salary)).Select(group => new { group.Key.DeptName }).Take(1).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT avg(T1.salary) , count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1",
    "result": "context.Instructors.Join(context.Departments, T1 => T1.DeptName, T2 => T2.DeptName, (T1, T2) => new { T1, T2 }).GroupBy(row => 1).Select(group => new { AverageSalary = group.Select(row => row.T1.Salary).Average(), Count = group.Count() }).OrderByDescending(row => row.T2.Budget).Take(1).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,280): error CS1061: '<anonymous type: double? AverageSalary, int Count>' does not contain a definition for 'T2' and no accessible extension method 'T2' accepting a first argument of type '<anonymous type: double? AverageSalary, int Count>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.73"
  },
  {
    "query": "SELECT T3.title , T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.capacity = (SELECT max(capacity) FROM classroom)",
    "result": "context.Classrooms.Join(context.Sections, T1 => new { Pair1 = T1.Building, Pair2 = T1.RoomNumber }, T2 => new { Pair1 = T2.Building, Pair2 = T2.RoomNumber }, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T2.CourseId, T3 => T3.CourseId, (joined, T3) => new { joined.T2, T3 }).Where(row => row.T1.Capacity == context.Classrooms.Select(row => row.Capacity).Max()).Select(row => new { row.T3.Title, row.T3.Credits }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,325): error CS1061: '<anonymous type: Section T2, Course T3>' does not contain a definition for 'T1' and no accessible extension method 'T1' accepting a first argument of type '<anonymous type: Section T2, Course T3>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.63"
  },
  {
    "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = 'Biology')",
    "result": "context.Students.Where(row => !context.Takes.Join(context.Courses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DeptName == \"Biology\").Select(row => row.T1.Id).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT count(DISTINCT T2.id) , count(DISTINCT T3.id) , T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name GROUP BY T3.dept_name",
    "result": "context.Departments.Join(context.Students, T1 => T1.DeptName, T2 => T2.DeptName, (T1, T2) => new { T1, T2 }).Join(context.Instructors, joined => joined.T1.DeptName, T3 => T3.DeptName, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.DeptName }).Select(group => new { CountDistinctIdT2 = group.Select(row => row.T2.Id).Distinct().Count(), CountDistinctIdT3 = group.Select(row => row.T3.Id).Distinct().Count(), group.Key.DeptName }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance')",
    "result": "context.Students.Join(context.Takes, T1 => T1.Id, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => context.Courses.Join(context.Prereq, T3 => T3.CourseId, T4 => T4.CourseId, (T3, T4) => new { T3, T4 }).Where(row => row.T3.Title == \"International Finance\").Select(row => row.T4.PrereqId).Contains(row.T2.CourseId)).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,145): error CS1061: 'College2Context' does not contain a definition for 'Prereq' and no accessible extension method 'Prereq' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.74"
  },
  {
    "query": "SELECT name , salary FROM instructor WHERE salary < (SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics')",
    "result": "context.Instructors.Where(row => row.Salary < context.Instructors.Where(row => row.DeptName == \"Physics\").Select(row => (double) row.Salary).Average()).Select(row => new { row.Name, row.Salary }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id WHERE T1.dept_name = 'Statistics'",
    "result": "context.Courses.Join(context.Takes, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.Id, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.DeptName == \"Statistics\").Select(row => new { row.T3.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT T2.building , T2.room_number , T2.semester , T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' ORDER BY T1.title",
    "result": "context.Courses.Join(context.Sections, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DeptName == \"Psychology\").OrderBy(row => row.T1.Title).Select(row => new { row.T2.Building, row.T2.RoomNumber, row.T2.Semester, row.T2.Year }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'",
    "result": "context.Instructors.Where(row => row.DeptName == \"Comp. Sci.\").Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000",
    "result": "context.Instructors.Where(row => row.DeptName == \"Comp. Sci.\" && row.Salary > 80000).Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
    "result": "context.Instructors.Join(context.Teach, T1 => T1.Id, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name, row.T2.CourseId }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,45): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.71"
  },
  {
    "query": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name = 'Art'",
    "result": "context.Instructors.Join(context.Teach, T1 => T1.Id, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DeptName == \"Art\").Select(row => new { row.T1.Name, row.T2.CourseId }).ToList();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,45): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.59"
  },
  {
    "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'",
    "result": "context.Instructors.Where(row => EF.Functions.Like(row.Name, \"%dar%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT DISTINCT name FROM instructor ORDER BY name",
    "result": "context.Instructors.OrderBy(row => row.Name).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
    "result": "context.Sections.Where(row => row.Semester == \"Fall\" && row.Year == 2009).Select(row => row.CourseId).Union(context.Sections.Where(row => row.Semester == \"Spring\" && row.Year == 2010).Select(row => row.CourseId)).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
    "result": "context.Sections.Where(row => row.Semester == \"Fall\" && row.Year == 2009).Select(row => row.CourseId).Intersect(context.Sections.Where(row => row.Semester == \"Spring\" && row.Year == 2010).Select(row => row.CourseId)).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
    "result": "context.Sections.Where(row => row.Semester == \"Fall\" && row.Year == 2009).Select(row => row.CourseId).Except(context.Sections.Where(row => row.Semester == \"Spring\" && row.Year == 2010).Select(row => row.CourseId)).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT max(salary) FROM instructor)",
    "result": "context.Instructors.Where(row => row.Salary < context.Instructors.Select(row => row.Salary).Max()).Select(row => new { row.Salary }).Distinct().ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester = 'Spring' AND YEAR = 2010",
    "result": "context.Teach.Where(row => row.Semester == \"Spring\" && row.Year == 2010).Select(row => row.Id).Distinct().Count();",
    "db_name": "college_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'College2Context' does not contain a definition for 'Teach' and no accessible extension method 'Teach' accepting a first argument of type 'College2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.93"
  },
  {
    "query": "SELECT dept_name , AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary) > 42000",
    "result": "context.Instructors.GroupBy(row => new { row.DeptName }).Select(group => new { group.Key.DeptName, AverageSalary = group.Select(row => row.Salary).Average() }).Where(group => group.AverageSalary > 42000).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT name FROM instructor WHERE salary > (SELECT min(salary) FROM instructor WHERE dept_name = 'Biology')",
    "result": "context.Instructors.Where(row => row.Salary > context.Instructors.Where(row => row.DeptName == \"Biology\").Select(row => row.Salary).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT name FROM instructor WHERE salary > (SELECT max(salary) FROM instructor WHERE dept_name = 'Biology')",
    "result": "context.Instructors.Where(row => row.Salary > context.Instructors.Where(row => row.DeptName == \"Biology\").Select(row => row.Salary).Max()).Select(row => new { row.Name }).ToList();",
    "db_name": "college_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT count(*) FROM candidate",
    "result": "context.Candidates.Count();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Candidates.GroupBy(row => new { row.PollSource }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PollSource }).Take(1).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
    "result": "context.Candidates.OrderByDescending(row => row.SupportRate).Select(row => new { row.SupportRate }).Take(3).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
    "result": "context.Candidates.OrderBy(row => row.OpposeRate).Select(row => new { row.CandidateId }).Take(1).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Support_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY unsure_rate",
    "result": "context.Candidates.OrderBy(row => row.UnsureRate).Select(row => new { row.SupportRate, row.ConsiderRate, row.OpposeRate }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
    "result": "context.Candidates.OrderByDescending(row => row.OpposeRate).Select(row => new { row.PollSource }).Take(1).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM people ORDER BY date_of_birth",
    "result": "context.People.OrderBy(row => row.DateOfBirth).Select(row => new { row.Name }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(height) , avg(weight) FROM people WHERE sex = 'M'",
    "result": "context.People.Where(row => row.Sex == \"M\").GroupBy(row => 1).Select(group => new { AverageHeight = group.Select(row => row.Height).Average(), AverageWeight = group.Select(row => row.Weight).Average() }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM people WHERE height > 200 OR height < 190",
    "result": "context.People.Where(row => row.Height > 200 || row.Height < 190).Select(row => new { row.Name }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(weight) , min(weight) , sex FROM people GROUP BY sex",
    "result": "context.People.GroupBy(row => new { row.Sex }).Select(group => new { AverageWeight = group.Select(row => row.Weight).Average(), MinWeight = group.Select(row => row.Weight).Min(), group.Key.Sex }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name , t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
    "result": "context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t2.SupportRate).Select(row => new { row.t1.Name, row.t1.Sex }).Take(1).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name , t1.sex , min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex",
    "result": "context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.Sex }).Select(group => new { group.OrderBy(row => row.t2.OpposeRate).First().t1.Name, group.Key.Sex, MinOpposeRate = group.Select(row => row.t2.OpposeRate).Min() }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
    "result": "context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.Sex }).OrderByDescending(group => group.Average(row => row.t2.UnsureRate)).Select(group => new { group.Key.Sex }).Take(1).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)",
    "result": "context.People.Where(row => !context.Candidates.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate < t2.oppose_rate",
    "result": "context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.SupportRate < row.t2.OpposeRate).Select(row => new { row.t1.Name }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , sex FROM people WHERE weight > 85 GROUP BY sex",
    "result": "context.People.Where(row => row.Weight > 85).GroupBy(row => new { row.Sex }).Select(group => new { Count = group.Count(), group.Key.Sex }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(support_rate) , min(consider_rate) , min(oppose_rate) FROM candidate",
    "result": "context.Candidates.GroupBy(row => 1).Select(group => new { MaxSupportRate = group.Select(row => row.SupportRate).Max(), MinConsiderRate = group.Select(row => row.ConsiderRate).Min(), MinOpposeRate = group.Select(row => row.OpposeRate).Min() }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name",
    "result": "context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Sex == \"F\").OrderBy(row => row.t1.Name).Select(row => new { row.t1.Name }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM people WHERE height < (SELECT avg(height) FROM people)",
    "result": "context.People.Where(row => row.Height < context.People.Select(row => (double) row.Height).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "candidate_poll",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM people",
    "result": "context.People.Select(row => new { row..PeopleId, row..Sex, row..Name, row..DateOfBirth, row..Height, row..Weight }).ToList();",
    "db_name": "candidate_poll",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,119): error CS0103: The name 'Weight' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    18 Error(s)\n\nTime Elapsed 00:00:02.03"
  },
  {
    "query": "SELECT document_status_code FROM Ref_Document_Status;",
    "result": "context.RefDocumentStatuses.Select(row => new { row.DocumentStatusCode }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";",
    "result": "context.RefDocumentStatuses.Where(row => row.DocumentStatusCode == \"working\").Select(row => new { row.DocumentStatusDescription }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_code FROM Ref_Document_Types;",
    "result": "context.RefDocumentTypes.Select(row => new { row.DocumentTypeCode }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";",
    "result": "context.RefDocumentTypes.Where(row => row.DocumentTypeCode == \"Paper\").Select(row => new { row.DocumentTypeDescription }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;",
    "result": "context.RefShippingAgents.Select(row => new { row.ShippingAgentName }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";",
    "result": "context.RefShippingAgents.Where(row => row.ShippingAgentName == \"UPS\").Select(row => new { row.ShippingAgentCode }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT role_code FROM ROLES;",
    "result": "context.Roles.Select(row => new { row.RoleCode }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";",
    "result": "context.Roles.Where(row => row.RoleCode == \"ED\").Select(row => new { row.RoleDescription }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Employees;",
    "result": "context.Employees.Count();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";",
    "result": "context.Roles.Join(context.Employees, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EmployeeName == \"Koby\").Select(row => new { row.T1.RoleDescription }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_id , receipt_date FROM Documents;",
    "result": "context.Documents.Select(row => new { row.DocumentId, row.ReceiptDate }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.role_description , T2.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;",
    "result": "context.Roles.Join(context.Employees, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.RoleCode }).Select(group => new { group.First().T1.RoleDescription, group.Key.RoleCode, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id) > 1;",
    "result": "context.Roles.Join(context.Employees, Roles => Roles.RoleCode, Employees => Employees.RoleCode, (Roles, Employees) => new { Roles, Employees }).GroupBy(row => new { row.Employees.RoleCode }).Select(group => new { group.First().Roles.RoleDescription, CountEmployeeId = group.Select(row => row.Employees.EmployeeId).Count() }).Where(group => group.CountEmployeeId > 1).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;",
    "result": "context.RefDocumentStatuses.Join(context.Documents, RefDocumentStatuses => RefDocumentStatuses.DocumentStatusCode, Documents => Documents.DocumentStatusCode, (RefDocumentStatuses, Documents) => new { RefDocumentStatuses, Documents }).Where(row => row.Documents.DocumentId == 1).Select(row => new { row.RefDocumentStatuses.DocumentStatusDescription }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Documents WHERE document_status_code = \"done\";",
    "result": "context.Documents.Where(row => row.DocumentStatusCode == \"done\").Count();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_code FROM Documents WHERE document_id = 2;",
    "result": "context.Documents.Where(row => row.DocumentId == 2).Select(row => new { row.DocumentTypeCode }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";",
    "result": "context.Documents.Where(row => row.DocumentStatusCode == \"done\" && row.DocumentTypeCode == \"Paper\").Select(row => new { row.DocumentId }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;",
    "result": "context.RefShippingAgents.Join(context.Documents, RefShippingAgents => RefShippingAgents.ShippingAgentCode, Documents => Documents.ShippingAgentCode, (RefShippingAgents, Documents) => new { RefShippingAgents, Documents }).Where(row => row.Documents.DocumentId == 2).Select(row => new { row.RefShippingAgents.ShippingAgentName }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
    "result": "context.RefShippingAgents.Join(context.Documents, RefShippingAgents => RefShippingAgents.ShippingAgentCode, Documents => Documents.ShippingAgentCode, (RefShippingAgents, Documents) => new { RefShippingAgents, Documents }).Where(row => row.RefShippingAgents.ShippingAgentName == \"USPS\").Count();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
    "result": "context.RefShippingAgents.Join(context.Documents, RefShippingAgents => RefShippingAgents.ShippingAgentCode, Documents => Documents.ShippingAgentCode, (RefShippingAgents, Documents) => new { RefShippingAgents, Documents }).GroupBy(row => new { row.RefShippingAgents.ShippingAgentCode }).Select(group => new { group.First().RefShippingAgents.ShippingAgentName, CountDocumentId = group.Select(row => row.Documents.DocumentId).Count() }).OrderByDescending(group => group.CountDocumentId).Take(1).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT receipt_date FROM Documents WHERE document_id = 3;",
    "result": "context.Documents.Where(row => row.DocumentId == 3).Select(row => new { row.ReceiptDate }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;",
    "result": "context.Addresses.Join(context.DocumentsMaileds, Addresses => Addresses.AddressId, DocumentsMaileds => DocumentsMaileds.MailedToAddressId, (Addresses, DocumentsMaileds) => new { Addresses, DocumentsMaileds }).Where(row => row.DocumentsMaileds.DocumentId == 4).Select(row => new { row.Addresses.AddressDetails }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;",
    "result": "context.DocumentsMaileds.Where(row => row.DocumentId == 7).Select(row => new { row.MailingDate }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
    "result": "context.Documents.Where(row => row.DocumentStatusCode == \"done\" && row.DocumentTypeCode == \"Paper\").Select(row => row.DocumentId).Except(context.Documents.Join(context.RefShippingAgents, Documents => Documents.ShippingAgentCode, RefShippingAgents => RefShippingAgents.ShippingAgentCode, (Documents, RefShippingAgents) => new { Documents, RefShippingAgents }).Where(row => row.RefShippingAgents.ShippingAgentName == \"USPS\").Select(row => row.Documents.DocumentId)).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
    "result": "context.Documents.Where(row => row.DocumentStatusCode == \"done\" && row.DocumentTypeCode == \"Paper\").Select(row => row.DocumentId).Intersect(context.Documents.Join(context.RefShippingAgents, Documents => Documents.ShippingAgentCode, RefShippingAgents => RefShippingAgents.ShippingAgentCode, (Documents, RefShippingAgents) => new { Documents, RefShippingAgents }).Where(row => row.RefShippingAgents.ShippingAgentName == \"USPS\").Select(row => row.Documents.DocumentId)).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;",
    "result": "context.DocumentDrafts.Where(row => row.DocumentId == 7).Select(row => new { row.DraftDetails }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;",
    "result": "context.DraftCopies.Where(row => row.DocumentId == 2).Count();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
    "result": "context.DraftCopies.GroupBy(row => new { row.DocumentId }).Select(group => new { group.Key.DocumentId, CountCopyNumber = group.Select(row => row.CopyNumber).Count() }).OrderByDescending(group => group.CountCopyNumber).Take(1).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*) > 1;",
    "result": "context.DraftCopies.GroupBy(row => new { row.DocumentId }).Select(group => new { group.Key.DocumentId, Count = group.Count() }).Where(group => group.Count > 1).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;",
    "result": "context.Employees.Join(context.CirculationHistory, Employees => Employees.EmployeeId, CirculationHistory => CirculationHistory.EmployeeId, (Employees, CirculationHistory) => new { Employees, CirculationHistory }).Where(row => row.CirculationHistory.DocumentId == 1).Select(row => new { row.Employees.EmployeeName }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS1061: 'CreDocControlSystemsContext' does not contain a definition for 'CirculationHistory' and no accessible extension method 'CirculationHistory' accepting a first argument of type 'CreDocControlSystemsContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.55"
  },
  {
    "query": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id",
    "result": "context.Employees.Select(row => row.EmployeeName).Except(context.Employees.Join(context.CirculationHistory, Employees => Employees.EmployeeId, CirculationHistory => CirculationHistory.EmployeeId, (Employees, CirculationHistory) => new { Employees, CirculationHistory }).Select(row => row.Employees.EmployeeName)).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,100): error CS1061: 'CreDocControlSystemsContext' does not contain a definition for 'CirculationHistory' and no accessible extension method 'CirculationHistory' accepting a first argument of type 'CreDocControlSystemsContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.76"
  },
  {
    "query": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;",
    "result": "context.Employees.Join(context.CirculationHistory, Employees => Employees.EmployeeId, CirculationHistory => CirculationHistory.EmployeeId, (Employees, CirculationHistory) => new { Employees, CirculationHistory }).GroupBy(row => new { row.CirculationHistory.DocumentId, row.CirculationHistory.DraftNumber, row.CirculationHistory.CopyNumber }).Select(group => new { group.First().Employees.EmployeeName, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS1061: 'CreDocControlSystemsContext' does not contain a definition for 'CirculationHistory' and no accessible extension method 'CirculationHistory' accepting a first argument of type 'CreDocControlSystemsContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.98"
  },
  {
    "query": "SELECT document_id , count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;",
    "result": "context.CirculationHistory.GroupBy(row => new { row.DocumentId }).Select(group => new { group.Key.DocumentId, CountDistinctEmployeeId = group.Select(row => row.EmployeeId).Distinct().Count() }).ToList();",
    "db_name": "cre_Doc_Control_Systems",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'CreDocControlSystemsContext' does not contain a definition for 'CirculationHistory' and no accessible extension method 'CirculationHistory' accepting a first argument of type 'CreDocControlSystemsContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.69"
  },
  {
    "query": "SELECT count(*) FROM Church WHERE Open_Date < 1850",
    "result": "context.Churches.Where(row => row.OpenDate < 1850).Count();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , open_date , organized_by FROM Church",
    "result": "context.Churches.Select(row => new { row.Name, row.OpenDate, row.OrganizedBy }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM church ORDER BY open_date DESC",
    "result": "context.Churches.OrderByDescending(row => row.OpenDate).Select(row => new { row.Name }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT open_date FROM church GROUP BY open_date HAVING count(*) >= 2",
    "result": "context.Churches.GroupBy(row => new { row.OpenDate }).Where(group => group.Count() >= 2).Select(group => new { group.Key.OpenDate }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT organized_by , name FROM church WHERE open_date BETWEEN 1830 AND 1840",
    "result": "context.Churches.Where(row => row.OpenDate >= 1830 && row.OpenDate <= 1840).Select(row => new { row.OrganizedBy, row.Name }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT open_date , count(*) FROM church GROUP BY open_date",
    "result": "context.Churches.GroupBy(row => new { row.OpenDate }).Select(group => new { group.Key.OpenDate, Count = group.Count() }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , open_date FROM church ORDER BY open_date DESC LIMIT 3",
    "result": "context.Churches.OrderByDescending(row => row.OpenDate).Select(row => new { row.Name, row.OpenDate }).Take(3).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM people WHERE is_male = 'F' AND age > 30",
    "result": "context.People.Where(row => row.IsMale == \"F\" && row.Age > 30).Count();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT country FROM people WHERE age < 25 INTERSECT SELECT country FROM people WHERE age > 30",
    "result": "context.People.Where(row => row.Age < 25).Select(row => row.Country).Intersect(context.People.Where(row => row.Age > 30).Select(row => row.Country)).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(age) , max(age) , avg(age) FROM people",
    "result": "context.People.GroupBy(row => 1).Select(group => new { MinAge = group.Select(row => row.Age).Min(), MaxAge = group.Select(row => row.Age).Max(), AverageAge = group.Select(row => row.Age).Average() }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , country FROM people WHERE age < (SELECT avg(age) FROM people)",
    "result": "context.People.Where(row => row.Age < context.People.Select(row => row.Age).Average()).Select(row => new { row.Name, row.Country }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name , T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id WHERE T1.year > 2014",
    "result": "context.Weddings.Join(context.People, T1 => T1.MaleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Join(context.People, joined => joined.T1.FemaleId, T3 => T3.PeopleId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Year > 2014).Select(row => new { T2Name = row.T2.Name, T3Name = row.T3.Name }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , age FROM people WHERE is_male = 'T' AND people_id NOT IN (SELECT male_id FROM wedding)",
    "result": "context.People.Where(row => row.IsMale == \"T\" && !context.Weddings.Select(row => row.MaleId).Contains(row.PeopleId)).Select(row => new { row.Name, row.Age }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id WHERE T2.year = 2015",
    "result": "context.Churches.Select(row => row.Name).Except(context.Churches.Join(context.Weddings, T1 => T1.ChurchId, T2 => T2.ChurchId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2015).Select(row => row.T1.Name)).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id GROUP BY T1.church_id HAVING count(*) >= 2",
    "result": "context.Churches.Join(context.Weddings, T1 => T1.ChurchId, T2 => T2.ChurchId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ChurchId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.Name }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id = T2.people_id WHERE T1.year = 2016 AND T2.is_male = 'F' AND T2.country = 'Canada'",
    "result": "context.Weddings.Join(context.People, T1 => T1.FemaleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2016 && row.T2.IsMale == \"F\" && row.T2.Country == \"Canada\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM wedding WHERE YEAR = 2016",
    "result": "context.Weddings.Where(row => row.Year == 2016).Count();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id JOIN church AS T4 ON T4.church_id = T1.church_id WHERE T2.age > 30 OR T3.age > 30",
    "result": "context.Weddings.Join(context.People, T1 => T1.MaleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Join(context.People, joined => joined.T1.FemaleId, T3 => T3.PeopleId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Churches, joined => joined.T1.ChurchId, T4 => T4.ChurchId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T2.Age > 30 || row.T3.Age > 30).Select(row => new { row.T4.Name }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT country , count(*) FROM people GROUP BY country",
    "result": "context.People.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR = 2016",
    "result": "context.Weddings.Where(row => row.Year == 2016).Select(row => row.ChurchId).Distinct().Count();",
    "db_name": "wedding",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM business WHERE rating > 4.5;",
    "result": "context.Businesses.Where(row => row.Rating > 4.5).Select(row => new { row.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM business WHERE rating = 3.5;",
    "result": "context.Businesses.Where(row => row.Rating == 3.5).Select(row => new { row.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT user_id FROM USER WHERE name = \"Michelle\";",
    "result": "context.Users.Where(row => row.Name == \"Michelle\").Select(row => new { row.UserId }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state FROM business WHERE name = \"Whataburger\";",
    "result": "context.Businesses.Where(row => row.Name == \"Whataburger\").Select(row => new { row.State }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"MGM Grand Buffet\" AND t2.category_name = \"category_category_name0\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"MGM Grand Buffet\" && row.t2.CategoryName == \"category_category_name0\").Select(row => new { row.t1.City }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city FROM business WHERE rating < 1.5;",
    "result": "context.Businesses.Where(row => row.Rating < 1.5).Select(row => new { row.City }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city FROM business WHERE name = \"Taj Mahal\";",
    "result": "context.Businesses.Where(row => row.Name == \"Taj Mahal\").Select(row => new { row.City }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT text FROM review WHERE rating < 1;",
    "result": "context.Reviews.Where(row => row.Rating < 1).Select(row => new { row.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.rating > 3.5 AND t2.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Rating > 3.5 && row.t2.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Taj Mahal\" AND t2.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"Taj Mahal\" && row.t2.CategoryName == \"restaurant\").Select(row => new { row.t1.City }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t2.name = \"Niloofar\";",
    "result": "context.Users.Join(context.Reviews, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Name == \"Niloofar\").Select(row => new { row.t1.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t3.name = \"Niloofar\";",
    "result": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.Name == \"Niloofar\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t2.rating = 5 AND t3.name = \"Niloofar\";",
    "result": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Rating == 5 && row.t3.Name == \"Niloofar\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t4.text FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN review AS t4 ON t4.business_id = t1.business_id JOIN USER AS t5 ON t5.user_id = t4.user_id WHERE t2.category_name = \"Italian\" AND t3.category_name = \"category_category_name1\" AND t5.name = \"Michelle\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Reviews, joined => joined.t1.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Join(context.Users, joined => joined.t4.UserId, t5 => t5.UserId, (joined, t5) => new { joined.t2, joined.t1, joined.t3, joined.t4, t5 }).Where(row => row.t2.CategoryName == \"Italian\" && row.t3.CategoryName == \"category_category_name1\" && row.t5.Name == \"Michelle\").Select(row => new { row.t4.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t3.text ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id WHERE t1.name = \"Cafe Zinho\" AND t1.state = \"Texas\" AND t2.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Name == \"Cafe Zinho\" && row.t1.State == \"Texas\" && row.t2.CategoryName == \"restaurant\").Select(row => row.t3.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.rating = 5 AND t2.category_name = \"Italian\" AND t3.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Rating == 5 && row.t2.CategoryName == \"Italian\" && row.t3.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id = t2.business_id JOIN category AS t4 ON t4.business_id = t2.business_id JOIN neighbourhood AS t1 ON t1.business_id = t2.business_id WHERE t2.city = \"Madison\" AND t3.category_name = \"Italian\" AND t4.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t3 => t3.BusinessId, t2 => t2.BusinessId, (t3, t2) => new { t3, t2 }).Join(context.Categories, joined => joined.t2.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t3, joined.t2, t4 }).Join(context.Neighbourhoods, joined => joined.t2.BusinessId, t1 => t1.BusinessId, (joined, t1) => new { joined.t3, joined.t2, joined.t4, t1 }).Where(row => row.t2.City == \"Madison\" && row.t3.CategoryName == \"Italian\" && row.t4.CategoryName == \"restaurant\").Select(row => new { row.t1.NeighbourhoodName }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id = t2.business_id JOIN category AS t4 ON t4.business_id = t2.business_id JOIN neighbourhood AS t1 ON t1.business_id = t2.business_id WHERE t2.city = \"Madison\" AND t2.rating < 2.5 AND t3.category_name = \"Italian\" AND t4.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t3 => t3.BusinessId, t2 => t2.BusinessId, (t3, t2) => new { t3, t2 }).Join(context.Categories, joined => joined.t2.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t3, joined.t2, t4 }).Join(context.Neighbourhoods, joined => joined.t2.BusinessId, t1 => t1.BusinessId, (joined, t1) => new { joined.t3, joined.t2, joined.t4, t1 }).Where(row => row.t2.City == \"Madison\" && row.t2.Rating < 2.5 && row.t3.CategoryName == \"Italian\" && row.t4.CategoryName == \"restaurant\").Select(row => new { row.t1.NeighbourhoodName }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.state = \"Pennsylvania\" AND t2.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.State == \"Pennsylvania\" && row.t2.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.text FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id WHERE t1.review_count > 100 AND t2.category_name = \"Pet Groomers\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.ReviewCount > 100 && row.t2.CategoryName == \"Pet Groomers\").Select(row => new { row.t3.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"breweries\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.City == \"Los Angeles\" && row.t2.CategoryName == \"breweries\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.name = \"Mesa Grill\" AND t2.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.Name == \"Mesa Grill\" && row.t2.CategoryName == \"restaurant\").Select(row => new { row.t4.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT full_address FROM business WHERE city = \"Los Angeles\" AND name = \"Walmart\";",
    "result": "context.Businesses.Where(row => row.City == \"Los Angeles\" && row.Name == \"Walmart\").Select(row => new { row.FullAddress }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.city = \"Dallas\" AND t2.category_name = \"restaurant\" AND t4.name = \"Patrick\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.City == \"Dallas\" && row.t2.CategoryName == \"restaurant\" && row.t4.Name == \"Patrick\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t2.category_name = \"Bars\" AND t4.name = \"Patrick\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t2.CategoryName == \"Bars\" && row.t4.Name == \"Patrick\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.rating >= 3 AND t2.category_name = \"Bars\" AND t4.name = \"Patrick\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.Rating >= 3 && row.t2.CategoryName == \"Bars\" && row.t4.Name == \"Patrick\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.name = \"Barrio Cafe\" AND t2.year = 2015;",
    "result": "context.Tips.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Name == \"Barrio Cafe\" && row.t2.Year == 2015).Select(row => new { row.t3.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM business WHERE rating < 2 AND state = \"Texas\";",
    "result": "context.Businesses.Where(row => row.Rating < 2 && row.State == \"Texas\").Select(row => new { row.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"Seafood\" AND t3.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"Los Angeles\" && row.t2.CategoryName == \"Seafood\" && row.t3.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t1.rating > 4 AND t2.name = \"Patrick\";",
    "result": "context.Users.Join(context.Reviews, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Rating > 4 && row.t2.Name == \"Patrick\").Select(row => new { row.t1.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT business_id FROM business WHERE city = \"Los Angeles\" AND name = \"Apple Store\";",
    "result": "context.Businesses.Where(row => row.City == \"Los Angeles\" && row.Name == \"Apple Store\").Select(row => new { row.BusinessId }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Dallas\" AND t1.rating > 4.5 AND t2.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.City == \"Dallas\" && row.t1.Rating > 4.5 && row.t2.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id = t2.business_id JOIN neighbourhood AS t1 ON t1.business_id = t2.business_id WHERE t2.name = \"Flat Top Grill\" AND t3.category_name = \"category_category_name0\";",
    "result": "context.Categories.Join(context.Businesses, t3 => t3.BusinessId, t2 => t2.BusinessId, (t3, t2) => new { t3, t2 }).Join(context.Neighbourhoods, joined => joined.t2.BusinessId, t1 => t1.BusinessId, (joined, t1) => new { joined.t3, joined.t2, t1 }).Where(row => row.t2.Name == \"Flat Top Grill\" && row.t3.CategoryName == \"category_category_name0\").Select(row => new { row.t1.NeighbourhoodName }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Vintner Grill\" AND t2.likes > 9;",
    "result": "context.Tips.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"Vintner Grill\" && row.t2.Likes > 9).Select(row => new { row.t2.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Kabob Palace\" AND t2.year = 2014;",
    "result": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"Kabob Palace\" && row.t2.Year == 2014).Select(row => new { row.t2.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.city = \"Dallas\";",
    "result": "context.Tips.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"Dallas\").Select(row => new { row.t3.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"MGM Grand Buffet\" AND t1.state = \"Texas\" AND t2.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"MGM Grand Buffet\" && row.t1.State == \"Texas\" && row.t2.CategoryName == \"restaurant\").Select(row => new { row.t1.City }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN tip AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t2.category_name = \"Pet Groomers\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Tips, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t2.CategoryName == \"Pet Groomers\").Select(row => new { row.t4.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Cafe Zinho\" AND t1.state = \"Texas\";",
    "result": "context.Tips.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"Cafe Zinho\" && row.t1.State == \"Texas\").Select(row => new { row.t2.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t2.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t2.CategoryName == \"restaurant\").Select(row => new { row.t4.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Cafe Zinho\" AND t1.state = \"Pennsylvania\" AND t2.year = 2010;",
    "result": "context.Tips.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"Cafe Zinho\" && row.t1.State == \"Pennsylvania\" && row.t2.Year == 2010).Select(row => new { row.t2.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t2.category_name = \"restaurant\" AND t3.year = 2010;",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t2.CategoryName == \"restaurant\" && row.t3.Year == 2010).Select(row => new { row.t4.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.text FROM USER AS t3 JOIN review AS t1 ON t3.user_id = t1.user_id JOIN tip AS t2 ON t3.user_id = t2.user_id WHERE t1.year = 2012;",
    "result": "context.Users.Join(context.Reviews, t3 => t3.UserId, t1 => t1.UserId, (t3, t1) => new { t3, t1 }).Join(context.Tips, joined => joined.t3.UserId, t2 => t2.UserId, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Year == 2012).Select(row => new { row.t2.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.rating = 2.5;",
    "result": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Rating == 2.5).Select(row => new { row.t2.Text }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Madison\" AND t2.category_name = \"escape games\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.City == \"Madison\" && row.t2.CategoryName == \"escape games\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.rating > 3.5 AND t2.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Rating > 3.5 && row.t2.CategoryName == \"restaurant\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"restaurant\" AND t3.category_name = \"Moroccan\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Checkins, joined => joined.t1.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.City == \"Los Angeles\" && row.t2.CategoryName == \"restaurant\" && row.t3.CategoryName == \"Moroccan\").Select(row => row.t4.Count).Sum();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"Moroccan\" AND t3.category_name = \"restaurant\" AND t4.day = \"Friday\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Checkins, joined => joined.t1.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.City == \"Los Angeles\" && row.t2.CategoryName == \"Moroccan\" && row.t3.CategoryName == \"restaurant\" && row.t4.Day == \"Friday\").Select(row => row.t4.Count).Sum();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t4.day , SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"Moroccan\" AND t3.category_name = \"restaurant\" GROUP BY t4.day;",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Checkins, joined => joined.t1.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.City == \"Los Angeles\" && row.t2.CategoryName == \"Moroccan\" && row.t3.CategoryName == \"restaurant\").GroupBy(row => new { row.t4.Day }).Select(group => new { group.Key.Day, SumCount = group.Select(row => row.t4.Count).Sum() }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.state , SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t2.category_name = \"Italian\" AND t3.category_name = \"Delis\" AND t4.day = \"Sunday\" GROUP BY t1.state;",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Checkins, joined => joined.t1.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t2.CategoryName == \"Italian\" && row.t3.CategoryName == \"Delis\" && row.t4.Day == \"Sunday\").GroupBy(row => new { row.t1.State }).Select(group => new { group.Key.State, SumCount = group.Select(row => row.t4.Count).Sum() }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t1.year = 2015 AND t2.name = \"Niloofar\";",
    "result": "context.Users.Join(context.Reviews, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Year == 2015 && row.t2.Name == \"Niloofar\").Select(row => row.t1.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT AVG ( t1.rating ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t2.name = \"Michelle\";",
    "result": "context.Users.Join(context.Reviews, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Name == \"Michelle\").Select(row => (double) row.t1.Rating).Average();",
    "db_name": "yelp",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT t2.count FROM checkin AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Cafe Zinho\" AND t2.day = \"Friday\";",
    "result": "context.Checkins.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"Cafe Zinho\" && row.t2.Day == \"Friday\").Select(row => new { row.t2.Count }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.city = \"Pittsburgh\" AND t1.name = \"Sushi Too\";",
    "result": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"Pittsburgh\" && row.t1.Name == \"Sushi Too\").Select(row => row.t3.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Pittsburgh\" AND t1.rating = 4.5 AND t2.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.City == \"Pittsburgh\" && row.t1.Rating == 4.5 && row.t2.CategoryName == \"restaurant\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT text ) FROM tip WHERE YEAR = 2015;",
    "result": "context.Tips.Where(row => row.Year == 2015).Select(row => row.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT SUM ( t1.likes ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id WHERE t2.name = \"Niloofar\";",
    "result": "context.Users.Join(context.Tips, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Name == \"Niloofar\").Select(row => row.t1.Likes).Sum();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Cafe Zinho\";",
    "result": "context.Tips.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Name == \"Cafe Zinho\").Select(row => row.t2.Likes).Sum();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.name = \"Cafe Zinho\" AND t3.name = \"Niloofar\";",
    "result": "context.Tips.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Name == \"Cafe Zinho\" && row.t3.Name == \"Niloofar\").Select(row => row.t2.Likes).Sum();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id WHERE t1.year = 2010 AND t2.name = \"Michelle\";",
    "result": "context.Users.Join(context.Tips, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Year == 2010 && row.t2.Name == \"Michelle\").Select(row => row.t1.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id WHERE t1.month = \"April\" AND t2.name = \"Michelle\";",
    "result": "context.Users.Join(context.Tips, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Month == \"April\" && row.t2.Name == \"Michelle\").Select(row => row.t1.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.state = \"Texas\" AND t2.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.State == \"Texas\" && row.t2.CategoryName == \"restaurant\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Dallas\" AND t1.rating > 3.5 AND t2.category_name = \"Bars\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.City == \"Dallas\" && row.t1.Rating > 3.5 && row.t2.CategoryName == \"Bars\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.city = \"Dallas\" AND t1.name = \"Texas de Brazil\" AND t1.state = \"Texas\" AND t2.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.City == \"Dallas\" && row.t1.Name == \"Texas de Brazil\" && row.t1.State == \"Texas\" && row.t2.CategoryName == \"restaurant\").Select(row => row.t4.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.name = \"Bistro Di Napoli\" AND t2.year = 2015;",
    "result": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Name == \"Bistro Di Napoli\" && row.t2.Year == 2015).Select(row => row.t3.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t3 JOIN business AS t1 ON t3.business_id = t1.business_id JOIN neighbourhood AS t2 ON t2.business_id = t1.business_id WHERE t1.city = \"Dallas\" AND t3.category_name = \"restaurant\" AND t2.neighbourhood_name = \"Hazelwood\";",
    "result": "context.Categories.Join(context.Businesses, t3 => t3.BusinessId, t1 => t1.BusinessId, (t3, t1) => new { t3, t1 }).Join(context.Neighbourhoods, joined => joined.t1.BusinessId, t2 => t2.BusinessId, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.City == \"Dallas\" && row.t3.CategoryName == \"restaurant\" && row.t2.NeighbourhoodName == \"Hazelwood\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city = \"Dallas\" AND name = \"Starbucks\" AND state = \"Texas\";",
    "result": "context.Businesses.Where(row => row.City == \"Dallas\" && row.Name == \"Starbucks\" && row.State == \"Texas\").Select(row => row.BusinessId).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT review_count FROM business WHERE name = \"Acacia Cafe\";",
    "result": "context.Businesses.Where(row => row.Name == \"Acacia Cafe\").Select(row => new { row.ReviewCount }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT AVG ( t3.count ) , t3.day FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN checkin AS t3 ON t3.business_id = t1.business_id WHERE t1.name = \"Barrio Cafe\" AND t2.category_name = \"restaurant\" GROUP BY t3.day;",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Checkins, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Name == \"Barrio Cafe\" && row.t2.CategoryName == \"restaurant\").GroupBy(row => new { row.t3.Day }).Select(group => new { AverageCount = group.Select(row => row.t3.Count).Average(), group.Key.Day }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM neighbourhood AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Madison\" AND t2.neighbourhood_name = \"Stone Meadows\";",
    "result": "context.Neighbourhoods.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.City == \"Madison\" && row.t2.NeighbourhoodName == \"Stone Meadows\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t2.name = \"Adrienne\";",
    "result": "context.Users.Join(context.Reviews, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Name == \"Adrienne\").Select(row => row.t1.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t1.month = \"March\" AND t1.year = 2014 AND t2.name = \"Michelle\";",
    "result": "context.Users.Join(context.Reviews, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Month == \"March\" && row.t1.Year == 2014 && row.t2.Name == \"Michelle\").Select(row => row.t1.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t2.year = 2010 AND t3.name = \"Michelle\";",
    "result": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Year == 2010 && row.t3.Name == \"Michelle\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.city = \"San Diego\" AND t2.year = 2010 AND t3.name = \"Christine\";",
    "result": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Users, joined => joined.t2.UserId, t3 => t3.UserId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"San Diego\" && row.t2.Year == 2010 && row.t3.Name == \"Christine\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city = \"Los Angeles\" AND name = \"Target\";",
    "result": "context.Businesses.Where(row => row.City == \"Los Angeles\" && row.Name == \"Target\").Select(row => row.BusinessId).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.city = \"Dallas\" AND t2.category_name = \"Irish Pub\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.City == \"Dallas\" && row.t2.CategoryName == \"Irish Pub\").Select(row => row.t4.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT AVG ( rating ) FROM review WHERE YEAR = 2014;",
    "result": "context.Reviews.Where(row => row.Year == 2014).Select(row => (double) row.Rating).Average();",
    "db_name": "yelp",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.name = \"Vintner Grill\" AND t2.category_name = \"category_category_name0\" AND t3.year = 2010;",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Reviews, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Users, joined => joined.t3.UserId, t4 => t4.UserId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.Name == \"Vintner Grill\" && row.t2.CategoryName == \"category_category_name0\" && row.t3.Year == 2010).Select(row => row.t4.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t3.text ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id = t2.business_id JOIN review AS t3 ON t3.business_id = t2.business_id WHERE t1.neighbourhood_name = \"South Summerlin\";",
    "result": "context.Neighbourhoods.Join(context.Businesses, t1 => t1.BusinessId, t2 => t2.BusinessId, (t1, t2) => new { t1, t2 }).Join(context.Reviews, joined => joined.t2.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.NeighbourhoodName == \"South Summerlin\").Select(row => row.t3.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT name ) FROM USER WHERE name = \"Michelle\";",
    "result": "context.Users.Where(row => row.Name == \"Michelle\").Select(row => row.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t2.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.CategoryName == \"restaurant\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT city ) FROM business WHERE name = \"Panda Express\";",
    "result": "context.Businesses.Where(row => row.Name == \"Panda Express\").Select(row => row.City).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id WHERE t2.name = \"Michelle\";",
    "result": "context.Users.Join(context.Tips, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Name == \"Michelle\").Select(row => row.t1.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT SUM ( t3.count ) FROM checkin AS t3 JOIN business AS t1 ON t3.business_id = t1.business_id JOIN neighbourhood AS t2 ON t2.business_id = t1.business_id WHERE t2.neighbourhood_name = \"Brighton Heights\";",
    "result": "context.Checkins.Join(context.Businesses, t3 => t3.BusinessId, t1 => t1.BusinessId, (t3, t1) => new { t3, t1 }).Join(context.Neighbourhoods, joined => joined.t1.BusinessId, t2 => t2.BusinessId, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t2.NeighbourhoodName == \"Brighton Heights\").Select(row => row.t3.Count).Sum();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT text ) FROM review WHERE MONTH = \"March\";",
    "result": "context.Reviews.Where(row => row.Month == \"March\").Select(row => row.Text).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT text ) , MONTH FROM tip GROUP BY MONTH;",
    "result": "context.Tips.GroupBy(row => new { row.Month }).Select(group => new { CountDistinctText = group.Select(row => row.Text).Distinct().Count(), group.Key.Month }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.neighbourhood_name ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id = t2.business_id WHERE t2.city = \"Madison\" AND t2.rating = 5;",
    "result": "context.Neighbourhoods.Join(context.Businesses, t1 => t1.BusinessId, t2 => t2.BusinessId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.City == \"Madison\" && row.t2.Rating == 5).Select(row => row.t1.NeighbourhoodName).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.state = \"Texas\" AND t2.category_name = \"Moroccan\" AND t3.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.State == \"Texas\" && row.t2.CategoryName == \"Moroccan\" && row.t3.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM checkin AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id GROUP BY t1.name ORDER BY SUM ( t2.count ) DESC LIMIT 1;",
    "result": "context.Checkins.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).GroupBy(row => new { row.t1.Name }).OrderByDescending(group => group.Sum(row => row.t2.Count)).Select(group => new { group.Key.Name }).Take(1).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id = t2.business_id WHERE t2.city = \"Madison\" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1;",
    "result": "context.Neighbourhoods.Join(context.Businesses, t1 => t1.BusinessId, t2 => t2.BusinessId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.City == \"Madison\").GroupBy(row => new { row.t1.NeighbourhoodName }).OrderByDescending(group => group.Count(row => row.t2.Name != null)).Select(group => new { group.Key.NeighbourhoodName }).Take(1).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = \"Dallas\" AND t1.rating > 3.5 AND t2.category_name = \"Mexican\" AND t3.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"Dallas\" && row.t1.Rating > 3.5 && row.t2.CategoryName == \"Mexican\" && row.t3.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = \"Dallas\" AND t1.state = \"Texas\" AND t2.category_name = \"Valet Service\" AND t3.category_name = \"restaurant\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"Dallas\" && row.t1.State == \"Texas\" && row.t2.CategoryName == \"Valet Service\" && row.t3.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM category AS t3 JOIN business AS t1 ON t3.business_id = t1.business_id JOIN category AS t4 ON t4.business_id = t1.business_id JOIN neighbourhood AS t2 ON t2.business_id = t1.business_id WHERE t1.city = \"Madison\" AND t3.category_name = \"Italian\" AND t4.category_name = \"restaurant\" AND t2.neighbourhood_name = \"Meadowood\";",
    "result": "context.Categories.Join(context.Businesses, t3 => t3.BusinessId, t1 => t1.BusinessId, (t3, t1) => new { t3, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t3, joined.t1, t4 }).Join(context.Neighbourhoods, joined => joined.t1.BusinessId, t2 => t2.BusinessId, (joined, t2) => new { joined.t3, joined.t1, joined.t4, t2 }).Where(row => row.t1.City == \"Madison\" && row.t3.CategoryName == \"Italian\" && row.t4.CategoryName == \"restaurant\" && row.t2.NeighbourhoodName == \"Meadowood\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t1.rating > 3 AND t1.review_count > 30 AND t2.category_name = \"Bars\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.City == \"Los Angeles\" && row.t1.Rating > 3 && row.t1.ReviewCount > 30 && row.t2.CategoryName == \"Bars\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = \"Edinburgh\" AND t2.category_name = \"restaurant\" AND t3.category_name = \"Egyptian\";",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"Edinburgh\" && row.t2.CategoryName == \"restaurant\" && row.t3.CategoryName == \"Egyptian\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.name FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id GROUP BY t2.name HAVING AVG ( t1.rating ) < 3;",
    "result": "context.Users.Join(context.Reviews, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).GroupBy(row => new { row.t2.Name }).Where(group => group.Average(row => row.t1.Rating) < 3).Select(group => new { group.Key.Name }).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t2.month = \"April\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.text ) DESC LIMIT 1;",
    "result": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Month == \"April\").GroupBy(row => new { row.t1.Name }).OrderByDescending(group => group.Count(row => row.t2.Text != null)).Select(group => new { group.Key.Name }).Take(1).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;",
    "result": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).GroupBy(row => new { row.t1.Name }).OrderByDescending(group => group.Count(row => row.t2.CategoryName != null)).Select(group => new { group.Key.Name }).Take(1).ToList();",
    "db_name": "yelp",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_name , access_count FROM documents ORDER BY document_name",
    "result": "context.Documents.OrderBy(row => row.DocumentName).Select(row => new { row.DocumentName, row.AccessCount }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_name , access_count FROM documents ORDER BY access_count DESC LIMIT 1",
    "result": "context.Documents.OrderByDescending(row => row.AccessCount).Select(row => new { row.DocumentName, row.AccessCount }).Take(1).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*) > 4",
    "result": "context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Where(group => group.Count() > 4).Select(group => new { group.Key.DocumentTypeCode }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Select(group => new { SumAccessCount = group.Select(row => row.AccessCount).Sum() }).OrderByDescending(group => group.Count()).Take(1);",
    "db_name": "document_management",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,193): error CS1061: '<anonymous type: int? SumAccessCount>' does not contain a definition for 'Count' and no accessible extension method 'Count' accepting a first argument of type '<anonymous type: int? SumAccessCount>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.13"
  },
  {
    "query": "SELECT avg(access_count) FROM documents",
    "result": "context.Documents.Select(row => row.AccessCount).Average();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code = t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Documents.Join(context.DocumentStructures, t1 => t1.DocumentStructureCode, t2 => t2.DocumentStructureCode, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.DocumentStructureCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t2.DocumentStructureDescription }).Take(1).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_code FROM documents WHERE document_name = \"David CV\"",
    "result": "context.Documents.Where(row => row.DocumentName == \"David CV\").Select(row => new { row.DocumentTypeCode }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count) > 10000",
    "result": "context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Where(group => group.Sum(row => row.AccessCount) > 10000).Select(group => new { group.Key.DocumentTypeCode }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code WHERE t1.document_name = \"David CV\"",
    "result": "context.Documents.Join(context.DocumentSections, t1 => t1.DocumentCode, t2 => t2.DocumentCode, (t1, t2) => new { t1, t2 }).Where(row => row.t1.DocumentName == \"David CV\").Select(row => new { row.t2.SectionTitle }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
    "result": "context.Documents.Where(row => !context.DocumentSections.Select(row => row.DocumentCode).Contains(row.DocumentCode)).Select(row => new { row.DocumentName }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT user_name , password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Users.GroupBy(row => new { row.RoleCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().UserName, group.First().Password }).Take(1).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code WHERE t3.functional_area_description = \"Acknowledgement\"",
    "result": "context.Documents.Join(context.DocumentFunctionalAreas, t1 => t1.DocumentCode, t2 => t2.DocumentCode, (t1, t2) => new { t1, t2 }).Join(context.FunctionalAreas, joined => joined.t2.FunctionalAreaCode, t3 => t3.FunctionalAreaCode, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.FunctionalAreaDescription == \"Acknowledgement\").Select(row => row.t1.AccessCount).Average();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id",
    "result": "context.Documents.Select(row => row.DocumentName).Except(context.Documents.Join(context.DocumentSections, t1 => t1.DocumentCode, t2 => t2.DocumentCode, (t1, t2) => new { t1, t2 }).Join(context.DocumentSectionsImage, joined => joined.t2.SectionId, t3 => t3.SectionId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Select(row => row.t1.DocumentName)).ToList();",
    "db_name": "document_management",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,205): error CS1061: 'DocumentManagementContext' does not contain a definition for 'DocumentSectionsImage' and no accessible extension method 'DocumentSectionsImage' accepting a first argument of type 'DocumentManagementContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.84"
  },
  {
    "query": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Documents.Join(context.DocumentSections, t1 => t1.DocumentCode, t2 => t2.DocumentCode, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.DocumentCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.DocumentName }).Take(1).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"",
    "result": "context.Documents.Where(row => EF.Functions.Like(row.DocumentName, \"%CV%\")).Select(row => new { row.DocumentName }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM users WHERE user_login = 1",
    "result": "context.Users.Where(row => row.UserLogin == \"1\").Count();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT role_description FROM ROLES WHERE role_code = (SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
    "result": "context.Roles.Where(row => row.RoleCode == context.Users.Where(row => row.UserLogin == \"1\").GroupBy(row => new { row.RoleCode }).OrderByDescending(group => group.Count()).Select(group => group.Key.RoleCode).Take(1).First()).Select(row => new { row.RoleDescription }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Documents.GroupBy(row => new { row.DocumentStructureCode }).Select(group => new { AverageAccessCount = group.Select(row => row.AccessCount).Average() }).OrderBy(group => group.Count()).Take(1);",
    "db_name": "document_management",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,196): error CS1061: '<anonymous type: double? AverageAccessCount>' does not contain a definition for 'Count' and no accessible extension method 'Count' accepting a first argument of type '<anonymous type: double? AverageAccessCount>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.79"
  },
  {
    "query": "SELECT image_name , image_url FROM images ORDER BY image_name",
    "result": "context.Images.OrderBy(row => row.ImageName).Select(row => new { row.ImageName, row.ImageUrl }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , role_code FROM users GROUP BY role_code",
    "result": "context.Users.GroupBy(row => new { row.RoleCode }).Select(group => new { Count = group.Count(), group.Key.RoleCode }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*) > 2",
    "result": "context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Where(group => group.Count() > 2).Select(group => new { group.Key.DocumentTypeCode }).ToList();",
    "db_name": "document_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM railway",
    "result": "context.Railways.Count();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Builder FROM railway ORDER BY Builder ASC",
    "result": "context.Railways.OrderBy(row => row.Builder).Select(row => new { row.Builder }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Wheels , LOCATION FROM railway",
    "result": "context.Railways.Select(row => new { row.Wheels, row.Location }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia \"",
    "result": "context.Managers.Where(row => row.Country != \"Australia \").Select(row => row.Level).Max();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Age) FROM manager",
    "result": "context.Managers.Select(row => row.Age).Average();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM manager ORDER BY LEVEL ASC",
    "result": "context.Managers.OrderBy(row => row.Level).Select(row => new { row.Name }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name , Arrival FROM train",
    "result": "context.Trains.Select(row => new { row.Name, row.Arrival }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1",
    "result": "context.Managers.OrderByDescending(row => row.Age).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID",
    "result": "context.Railways.Join(context.Trains, T1 => T1.RailwayId, T2 => T2.RailwayId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name, row.T1.Location }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.Name = \"Andaman Exp\"",
    "result": "context.Railways.Join(context.Trains, T1 => T1.RailwayId, T2 => T2.RailwayId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Andaman Exp\").Select(row => new { row.T1.Builder }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Railway_ID , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*) > 1",
    "result": "context.Railways.Join(context.Trains, T1 => T1.RailwayId, T2 => T2.RailwayId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.RailwayId }).Where(group => group.Count() > 1).Select(group => new { group.Key.RailwayId, group.First().T1.Location }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Railway_ID , T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Railways.Join(context.Trains, T1 => T1.RailwayId, T2 => T2.RailwayId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.RailwayId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.RailwayId, group.First().T1.Builder }).Take(1).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Builder , COUNT(*) FROM railway GROUP BY Builder",
    "result": "context.Railways.GroupBy(row => new { row.Builder }).Select(group => new { group.Key.Builder, Count = group.Count() }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Railways.GroupBy(row => new { row.Builder }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Builder }).Take(1).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION , COUNT(*) FROM railway GROUP BY LOCATION",
    "result": "context.Railways.GroupBy(row => new { row.Location }).Select(group => new { group.Key.Location, Count = group.Count() }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*) > 1",
    "result": "context.Railways.GroupBy(row => new { row.Location }).Where(group => group.Count() > 1).Select(group => new { group.Key.Location }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)",
    "result": "context.Railways.Where(row => !context.Trains.Select(row => row.RailwayId).Contains(row.RailwayId)).Select(row => new { row.ObjectNumber }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country FROM manager WHERE Age > 50 INTERSECT SELECT Country FROM manager WHERE Age < 46",
    "result": "context.Managers.Where(row => row.Age > 50).Select(row => row.Country).Intersect(context.Managers.Where(row => row.Age < 46).Select(row => row.Country)).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Country FROM manager",
    "result": "context.Managers.Select(row => new { row.Country }).Distinct().ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC",
    "result": "context.Managers.OrderByDescending(row => row.Level).Select(row => new { row.WorkingYearStarts }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country FROM manager WHERE Age > 50 OR Age < 46",
    "result": "context.Managers.Where(row => row.Age > 50 || row.Age < 46).Select(row => new { row.Country }).ToList();",
    "db_name": "railway",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM flight WHERE velocity > 200",
    "result": "context.Flights.Where(row => row.Velocity > 200).Count();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT vehicle_flight_number , date , pilot FROM flight ORDER BY altitude ASC",
    "result": "context.Flights.OrderBy(row => row.Altitude).Select(row => new { row.VehicleFlightNumber, row.Date, row.Pilot }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT id , country , city , name FROM airport ORDER BY name",
    "result": "context.Airports.OrderBy(row => row.Name).Select(row => new { row.Id, row.Country, row.City, row.Name }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(group_equity_shareholding) FROM operate_company",
    "result": "context.OperateCompanies.Select(row => row.GroupEquityShareholding).Max();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(velocity) FROM flight WHERE pilot = 'Thompson'",
    "result": "context.Flights.Where(row => row.Pilot == \"Thompson\").Select(row => (double) row.Velocity).Average();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
    "result": "context.OperateCompanies.Join(context.Flights, T1 => T1.Id, t2 => t2.CompanyId, (T1, t2) => new { T1, t2 }).Select(row => new { row.T1.Name, row.T1.Type }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM airport WHERE country != 'Iceland'",
    "result": "context.Airports.Where(row => row.Country != \"Iceland\").Select(row => new { row.Name }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T2.velocity < 200",
    "result": "context.OperateCompanies.Join(context.Flights, T1 => T1.Id, t2 => t2.CompanyId, (T1, t2) => new { T1, t2 }).Where(row => row.t2.Velocity < 200).Select(row => new { row.T1.Type }).Distinct().ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY T1.id HAVING count(*) > 1",
    "result": "context.OperateCompanies.Join(context.Flights, T1 => T1.Id, t2 => t2.CompanyId, (T1, t2) => new { T1, t2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() > 1).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T1.name , T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Airports.Join(context.Flights, T1 => T1.Id, T2 => T2.AirportId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name, group.First().T1.Iata }).Take(1).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T1.country = 'United States' OR T1.name = 'Billund Airport'",
    "result": "context.Airports.Join(context.Flights, T1 => T1.Id, T2 => T2.AirportId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Country == \"United States\" || row.T1.Name == \"Billund Airport\").Select(row => new { row.T2.Pilot }).Distinct().ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE , count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
    "result": "context.OperateCompanies.GroupBy(row => new { row.Type }).Select(group => new { group.Key.Type, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot = 'Thompson' );",
    "result": "context.Airports.Where(row => !context.Flights.Where(row => row.Pilot == \"Thompson\").Select(row => row.AirportId).Contains(row.Id)).Count();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T1.principal_activities = 'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T1.principal_activities = 'Catering services'",
    "result": "context.OperateCompanies.Join(context.Flights, T1 => T1.Id, t2 => t2.CompanyId, (T1, t2) => new { T1, t2 }).Where(row => row.T1.PrincipalActivities == \"Cargo\").Select(row => row.t2.Pilot).Intersect(context.OperateCompanies.Join(context.Flights, T1 => T1.Id, t2 => t2.CompanyId, (T1, t2) => new { T1, t2 }).Where(row => row.T1.PrincipalActivities == \"Catering services\").Select(row => row.t2.Pilot)).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM airport WHERE name LIKE '%international%'",
    "result": "context.Airports.Where(row => EF.Functions.Like(row.Name, \"%international%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.id , count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id JOIN airport AS T3 ON T2.airport_id = T3.id GROUP BY T3.id",
    "result": "context.OperateCompanies.Join(context.Flights, T1 => T1.Id, t2 => t2.CompanyId, (T1, t2) => new { T1, t2 }).Join(context.Airports, joined => joined.t2.AirportId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.t2, T3 }).GroupBy(row => new { row.T3.Id }).Select(group => new { group.Key.Id, Count = group.Count() }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , country FROM airport GROUP BY country",
    "result": "context.Airports.GroupBy(row => new { row.Country }).Select(group => new { Count = group.Count(), group.Key.Country }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT country FROM airport GROUP BY country HAVING count(*) > 2",
    "result": "context.Airports.GroupBy(row => new { row.Country }).Where(group => group.Count() > 2).Select(group => new { group.Key.Country }).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Flights.GroupBy(row => new { row.Pilot }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Pilot }).Take(1).ToList();",
    "db_name": "flight_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT campus FROM campuses WHERE county = \"Los Angeles\"",
    "result": "context.Campuses.Where(row => row.County == \"Los Angeles\").Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT campus FROM campuses WHERE LOCATION = \"Chico\"",
    "result": "context.Campuses.Where(row => row.Location == \"Chico\").Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT campus FROM campuses WHERE YEAR = 1958",
    "result": "context.Campuses.Where(row => row.Year == 1958).Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT campus FROM campuses WHERE YEAR < 1800",
    "result": "context.Campuses.Where(row => row.Year < 1800).Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939",
    "result": "context.Campuses.Where(row => row.Year >= 1935 && row.Year <= 1939).Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT campus FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION = \"San Francisco\" AND county = \"San Francisco\"",
    "result": "context.Campuses.Where(row => row.Location == \"Northridge\" && row.County == \"Los Angeles\").Select(row => row.Campus1).Union(context.Campuses.Where(row => row.Location == \"San Francisco\" && row.County == \"San Francisco\").Select(row => row.Campus1)).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND T2.year = 1996",
    "result": "context.Campuses.Join(context.CsuFees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Jose State University\" && row.T2.Year == 1996).Select(row => new { row.T2.CampusFee }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND T2.year = 1996",
    "result": "context.Campuses.Join(context.CsuFees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Francisco State University\" && row.T2.Year == 1996).Select(row => new { row.T2.CampusFee }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)",
    "result": "context.CsuFees.Where(row => row.CampusFee > context.CsuFees.Select(row => row.CampusFee).Average()).Count();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT campus FROM campuses WHERE county = \"Los Angeles\" AND YEAR > 1950",
    "result": "context.Campuses.Where(row => row.County == \"Los Angeles\" && row.Year > 1950).Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
    "result": "context.Degrees.GroupBy(row => new { row.Year }).OrderByDescending(group => group.Sum(row => row.Degrees)).Select(group => new { group.Key.Year }).Take(1).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
    "result": "context.Degrees.GroupBy(row => new { row.Campus }).OrderByDescending(group => group.Sum(row => row.Degrees)).Select(group => new { group.Key.Campus }).Take(1).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 ORDER BY T2.faculty DESC LIMIT 1",
    "result": "context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2003).OrderByDescending(row => row.T2.Faculty1).Select(row => new { row.T1.Campus1 }).Take(1).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 1996",
    "result": "context.CsuFees.Where(row => row.Year == 1996).Select(row => row.CampusFee).Average();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 2005",
    "result": "context.CsuFees.Where(row => row.Year == 2005).Select(row => row.CampusFee).Average();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.campus , sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T2.year >= 1998 AND T2.year <= 2002 GROUP BY T1.campus",
    "result": "context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year >= 1998 && row.T2.Year <= 2002).GroupBy(row => new { row.T1.Campus1 }).Select(group => new { group.Key.Campus1, SumDegrees = group.Select(row => row.T2.Degrees).Sum() }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.campus , sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T1.county = \"Orange\" AND T2.year >= 2000 GROUP BY T1.campus",
    "result": "context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.County == \"Orange\" && row.T2.Year >= 2000).GroupBy(row => new { row.T1.Campus1 }).Select(group => new { group.Key.Campus1, SumDegrees = group.Select(row => row.T2.Degrees).Sum() }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND faculty > (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = \"Orange\")",
    "result": "context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2002 && row.T2.Faculty1 > context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2002 && row.T1.County == \"Orange\").Select(row => row.T2.Faculty1).Max()).Select(row => new { row.T1.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200",
    "result": "context.Campuses.Join(context.Enrollments, t1 => t1.Id, t2 => t2.Campus, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Year == 1956 && row.t2.TotalEnrollmentAy > 400 && row.t2.FteAy > 200).Select(row => new { row.t1.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM campuses WHERE county = \"Los Angeles\"",
    "result": "context.Campuses.Where(row => row.County == \"Los Angeles\").Count();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 2000",
    "result": "context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Jose State University\" && row.T2.Year == 2000).Select(row => new { row.T2.Degrees }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND t2.year = 2001",
    "result": "context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Francisco State University\" && row.T2.Year == 2001).Select(row => new { row.T2.Degrees }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(faculty) FROM faculty WHERE YEAR = 2002",
    "result": "context.Faculties.Where(row => row.Year == 2002).Select(row => row.Faculty1).Sum();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2002 AND T2.campus = \"Long Beach State University\"",
    "result": "context.Faculties.Join(context.Campuses, T1 => T1.Campus, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2002 && row.T2.Campus1 == \"Long Beach State University\").Select(row => new { row.T1.Faculty1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2004 AND T2.campus = \"San Francisco State University\"",
    "result": "context.Faculties.Join(context.Campuses, T1 => T1.Campus, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2004 && row.T2.Campus1 == \"San Francisco State University\").Select(row => new { row.T1.Faculty1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T1.year = 2004",
    "result": "context.Campuses.Join(context.Faculties, t1 => t1.Id, t2 => t2.Campus, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Faculty1 >= 600 && row.t2.Faculty1 <= 1000 && row.t1.Year == 2004).Select(row => new { row.t1.Campus1 }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1",
    "result": "context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Join(context.Degrees, joined => new { Pair1 = joined.T1.Id, Pair2 = joined.T2.Year }, T3 => new { Pair1 = joined.T3.Campus, Pair2 = joined.T3.Year }, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Year == 2002).OrderByDescending(row => row.T3.Degrees).Select(row => new { row.T2.Faculty1 }).Take(1).ToList();",
    "db_name": "csu_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,243): error CS0103: The name 'joined' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.68"
  },
  {
    "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2001 ORDER BY t3.degrees LIMIT 1",
    "result": "context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Join(context.Degrees, joined => new { Pair1 = joined.T1.Id, Pair2 = joined.T2.Year }, T3 => new { Pair1 = joined.T3.Campus, Pair2 = joined.T3.Year }, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Year == 2001).OrderBy(row => row.T3.Degrees).Select(row => new { row.T2.Faculty1 }).Take(1).ToList();",
    "db_name": "csu_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,243): error CS0103: The name 'joined' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.70"
  },
  {
    "query": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Jose State University\"",
    "result": "context.DisciplineEnrollments.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Year == 2004 && row.t2.Campus1 == \"San Jose State University\").Select(row => row.t1.Undergraduate).Sum();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Francisco State University\"",
    "result": "context.DisciplineEnrollments.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Year == 2004 && row.t2.Campus1 == \"San Francisco State University\").Select(row => row.t1.Graduate).Sum();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Francisco State University\" AND t1.year = 2000",
    "result": "context.CsuFees.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Campus1 == \"San Francisco State University\" && row.t1.Year == 2000).Select(row => new { row.t1.CampusFee }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Jose State University\" AND t1.year = 2000",
    "result": "context.CsuFees.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Campus1 == \"San Jose State University\" && row.t1.Year == 2000).Select(row => new { row.t1.CampusFee }).ToList();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM campuses",
    "result": "context.Campuses.Count();",
    "db_name": "csu_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM authors",
    "result": "context.Authors.Count();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM inst",
    "result": "context.Insts.Count();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM papers",
    "result": "context.Papers.Count();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Jeremy\" AND t1.lname = \"Gibbons\"",
    "result": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Fname == \"Jeremy\" && row.t1.Lname == \"Gibbons\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Aaron\" AND t1.lname = \"Turon\"",
    "result": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Fname == \"Aaron\" && row.t1.Lname == \"Turon\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Atsushi\" AND t1.lname = \"Ohori\"",
    "result": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Fname == \"Atsushi\" && row.t1.Lname == \"Ohori\").Count();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Matthias\" AND t1.lname = \"Blume\"",
    "result": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Insts, joined => joined.t2.InstId, t3 => t3.InstId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Fname == \"Matthias\" && row.t1.Lname == \"Blume\").Select(row => new { row.t3.Name }).Distinct().ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Katsuhiro\" AND t1.lname = \"Ueno\"",
    "result": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Insts, joined => joined.t2.InstId, t3 => t3.InstId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Fname == \"Katsuhiro\" && row.t1.Lname == \"Ueno\").Select(row => new { row.t3.Name }).Distinct().ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Oxford\"",
    "result": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Insts, joined => joined.t2.InstId, t3 => t3.InstId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Name == \"University of Oxford\").Select(row => new { row.t1.Fname, row.t1.Lname }).Distinct().ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\"",
    "result": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Insts, joined => joined.t2.InstId, t3 => t3.InstId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Name == \"Google\").Select(row => new { row.t1.Fname, row.t1.Lname }).Distinct().ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Binders Unbound\"",
    "result": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Title == \"Binders Unbound\").Select(row => new { row.t1.Lname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Nameless , Painless\"",
    "result": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Title == \"Nameless , Painless\").Select(row => new { row.t1.Fname, row.t1.Lname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Indiana University\"",
    "result": "context.Papers.Join(context.Authorships, t1 => t1.PaperId, t2 => t2.PaperId, (t1, t2) => new { t1, t2 }).Join(context.Insts, joined => joined.t2.InstId, t3 => t3.InstId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Name == \"Indiana University\").Select(row => new { row.t1.Title }).Distinct().ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\"",
    "result": "context.Papers.Join(context.Authorships, t1 => t1.PaperId, t2 => t2.PaperId, (t1, t2) => new { t1, t2 }).Join(context.Insts, joined => joined.t2.InstId, t3 => t3.InstId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Name == \"Google\").Select(row => new { row.t1.Title }).Distinct().ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Tokohu University\"",
    "result": "context.Papers.Join(context.Authorships, t1 => t1.PaperId, t2 => t2.PaperId, (t1, t2) => new { t1, t2 }).Join(context.Insts, joined => joined.t2.InstId, t3 => t3.InstId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Name == \"Tokohu University\").Select(row => row.t1.Title).Distinct().Count();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Pennsylvania\"",
    "result": "context.Papers.Join(context.Authorships, t1 => t1.PaperId, t2 => t2.PaperId, (t1, t2) => new { t1, t2 }).Join(context.Insts, joined => joined.t2.InstId, t3 => t3.InstId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Name == \"University of Pennsylvania\").Select(row => row.t1.Title).Distinct().Count();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Olin\" AND t1.lname = \"Shivers\"",
    "result": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Fname == \"Olin\" && row.t1.Lname == \"Shivers\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Stephanie\" AND t1.lname = \"Weirich\"",
    "result": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Fname == \"Stephanie\" && row.t1.Lname == \"Weirich\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"USA\" AND t2.authorder = 2 AND t1.lname = \"Turon\"",
    "result": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Insts, joined => joined.t2.InstId, t4 => t4.InstId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.Country == \"USA\" && row.t2.AuthOrder == 2 && row.t1.Lname == \"Turon\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"Japan\" AND t2.authorder = 1 AND t1.lname = \"Ohori\"",
    "result": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Insts, joined => joined.t2.InstId, t4 => t4.InstId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.Country == \"Japan\" && row.t2.AuthOrder == 1 && row.t1.Lname == \"Ohori\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.fname , t1.lname ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.Fname, row.t1.Lname }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Lname }).Take(1).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Insts.Join(context.Authorships, t1 => t1.InstId, t2 => t2.InstId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.Country }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Country }).Take(1).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Insts.Join(context.Authorships, t1 => t1.InstId, t2 => t2.InstId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.Name }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Name }).Take(1).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title FROM papers WHERE title LIKE \"%ML%\"",
    "result": "context.Papers.Where(row => EF.Functions.Like(row.Title, \"%ML%\")).Select(row => new { row.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
    "result": "context.Papers.Where(row => EF.Functions.Like(row.Title, \"%Database%\")).Select(row => new { row.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE \"%Functional%\"",
    "result": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => EF.Functions.Like(row.t3.Title, \"%Functional%\")).Select(row => new { row.t1.Fname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE \"%Monadic%\"",
    "result": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => EF.Functions.Like(row.t3.Title, \"%Monadic%\")).Select(row => new { row.t1.Lname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE t1.authorder = (SELECT max(authorder) FROM authorship)",
    "result": "context.Authorships.Join(context.Papers, t1 => t1.PaperId, t2 => t2.PaperId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.AuthOrder == context.Authorships.Select(row => row.AuthOrder).Max()).Select(row => new { row.t2.Title }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT fname FROM authors WHERE lname = \"Ueno\"",
    "result": "context.Authors.Where(row => row.Lname == \"Ueno\").Select(row => new { row.Fname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lname FROM authors WHERE fname = \"Amal\"",
    "result": "context.Authors.Where(row => row.Fname == \"Amal\").Select(row => new { row.Lname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT fname FROM authors ORDER BY fname",
    "result": "context.Authors.OrderBy(row => row.Fname).Select(row => new { row.Fname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lname FROM authors ORDER BY lname",
    "result": "context.Authors.OrderBy(row => row.Lname).Select(row => new { row.Lname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT fname , lname FROM authors ORDER BY lname",
    "result": "context.Authors.OrderBy(row => row.Lname).Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "icfp_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM COURSES",
    "result": "context.Courses.Count();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT course_description FROM COURSES WHERE course_name = \"database\"",
    "result": "context.Courses.Where(row => row.CourseName == \"database\").Select(row => new { row.CourseDescription }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = \"Cathrine\"",
    "result": "context.CourseAuthorsAndTutors.Where(row => row.PersonalName == \"Cathrine\").Select(row => new { row.AddressLine1 }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors",
    "result": "context.CourseAuthorsAndTutors.Select(row => new { row.AddressLine1 }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT login_name , family_name FROM Course_Authors_and_Tutors",
    "result": "context.CourseAuthorsAndTutors.Select(row => new { row.LoginName, row.FamilyName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_of_enrolment , date_of_completion FROM Student_Course_Enrolment",
    "result": "context.StudentCourseEnrolments.Select(row => new { row.DateOfEnrolment, row.DateOfCompletion }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment",
    "result": "context.StudentCourseEnrolments.Select(row => row.StudentId).Distinct().Count();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(course_id) FROM Student_Course_Enrolment",
    "result": "context.StudentCourseEnrolments.Select(row => row.CourseId).Count();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = \"Pass\"",
    "result": "context.StudentTestsTakens.Where(row => row.TestResult == \"Pass\").Select(row => new { row.DateTestTaken }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result = \"Fail\"",
    "result": "context.StudentTestsTakens.Where(row => row.TestResult == \"Fail\").Count();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT login_name FROM Students WHERE family_name = \"Ward\"",
    "result": "context.Students.Where(row => row.FamilyName == \"Ward\").Select(row => new { row.LoginName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_of_latest_logon FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\"",
    "result": "context.Students.Where(row => row.FamilyName == \"Jaskolski\" || row.FamilyName == \"Langosh\").Select(row => new { row.DateOfLatestLogon }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\"",
    "result": "context.Students.Where(row => EF.Functions.Like(row.PersonalName, \"%son%\")).Count();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT subject_name FROM SUBJECTS",
    "result": "context.Subjects.Select(row => new { row.SubjectName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
    "result": "context.CourseAuthorsAndTutors.OrderBy(row => row.PersonalName).Select(row => new { row..AuthorId, row..AuthorTutorAtb, row..LoginName, row..Password, row..PersonalName, row..MiddleName, row..FamilyName, row..GenderMf, row..AddressLine1 }).ToList();",
    "db_name": "e_learning",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,236): error CS0103: The name 'AddressLine1' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    27 Error(s)\n\nTime Elapsed 00:00:01.75"
  },
  {
    "query": "SELECT personal_name , family_name FROM Students ORDER BY family_name",
    "result": "context.Students.OrderBy(row => row.FamilyName).Select(row => new { row.PersonalName, row.FamilyName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT test_result , COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
    "result": "context.StudentTestsTakens.GroupBy(row => new { row.TestResult }).Select(group => new { group.Key.TestResult, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = \"advanced database\"",
    "result": "context.CourseAuthorsAndTutors.Join(context.Courses, T1 => T1.AuthorId, T2 => T2.AuthorId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CourseName == \"advanced database\").Select(row => new { row.T1.LoginName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = \"operating system\" OR T2.course_name = \"data structure\"",
    "result": "context.CourseAuthorsAndTutors.Join(context.Courses, T1 => T1.AuthorId, T2 => T2.AuthorId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CourseName == \"operating system\" || row.T2.CourseName == \"data structure\").Select(row => new { row.T1.AddressLine1 }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.personal_name , T1.family_name , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.CourseAuthorsAndTutors.Join(context.Courses, T1 => T1.AuthorId, T2 => T2.AuthorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AuthorId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.PersonalName, group.First().T1.FamilyName, group.Key.AuthorId }).Take(1).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count(*) >= 2",
    "result": "context.CourseAuthorsAndTutors.Join(context.Courses, T1 => T1.AuthorId, T2 => T2.AuthorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AuthorId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.AddressLine1, group.Key.AuthorId }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.personal_name = \"Julio\"",
    "result": "context.CourseAuthorsAndTutors.Join(context.Courses, T1 => T1.AuthorId, T2 => T2.AuthorId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PersonalName == \"Julio\").Select(row => new { row.T2.CourseName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.course_name , T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = \"Computer Science\"",
    "result": "context.Courses.Join(context.Subjects, T1 => T1.SubjectId, T2 => T2.SubjectId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SubjectName == \"Computer Science\").Select(row => new { row.T1.CourseName, row.T1.CourseDescription }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.subject_id , T2.subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id",
    "result": "context.Courses.Join(context.Subjects, T1 => T1.SubjectId, T2 => T2.SubjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SubjectId }).Select(group => new { group.Key.SubjectId, group.First().T2.SubjectName, Count = group.Count() }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.subject_id , T2.subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC",
    "result": "context.Courses.Join(context.Subjects, T1 => T1.SubjectId, T2 => T2.SubjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SubjectId }).Select(group => new { group.Key.SubjectId, group.First().T2.SubjectName, Count = group.Count() }).OrderBy(group => group.Count).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"",
    "result": "context.Courses.Join(context.StudentCourseEnrolments, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CourseName == \"Spanish\").Select(row => new { row.T2.DateOfEnrolment }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Courses.Join(context.StudentCourseEnrolments, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CourseName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CourseName }).Take(1).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) = 1",
    "result": "context.Courses.Join(context.StudentCourseEnrolments, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CourseName }).Where(group => group.Count() == 1).Select(group => new { group.Key.CourseName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) > 2",
    "result": "context.Courses.Join(context.StudentCourseEnrolments, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CourseName }).Where(group => group.Count() > 2).Select(group => new { group.First().T1.CourseDescription, group.Key.CourseName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name",
    "result": "context.Courses.Join(context.StudentCourseEnrolments, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CourseName }).Select(group => new { group.Key.CourseName, Count = group.Count() }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"",
    "result": "context.StudentCourseEnrolments.Join(context.StudentTestsTakens, T1 => T1.RegistrationId, T2 => T2.RegistrationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TestResult == \"Pass\").Select(row => new { row.T1.DateOfEnrolment }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"",
    "result": "context.StudentCourseEnrolments.Join(context.StudentTestsTakens, T1 => T1.RegistrationId, T2 => T2.RegistrationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TestResult == \"Fail\").Select(row => new { row.T1.DateOfCompletion }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.date_of_enrolment , T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name = \"Karson\"",
    "result": "context.StudentCourseEnrolments.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PersonalName == \"Karson\").Select(row => new { row.T1.DateOfEnrolment, row.T1.DateOfCompletion }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.date_of_enrolment , T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.family_name = \"Zieme\" AND T2.personal_name = \"Bernie\"",
    "result": "context.StudentCourseEnrolments.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FamilyName == \"Zieme\" && row.T2.PersonalName == \"Bernie\").Select(row => new { row.T1.DateOfEnrolment, row.T1.DateOfCompletion }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.student_id , T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.StudentCourseEnrolments.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StudentId, group.First().T2.LoginName }).Take(1).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) >= 2",
    "result": "context.StudentCourseEnrolments.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.StudentId, group.First().T2.PersonalName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.student_id , T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) <= 2",
    "result": "context.StudentCourseEnrolments.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).Where(group => group.Count() <= 2).Select(group => new { group.Key.StudentId, group.First().T2.MiddleName }).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id",
    "result": "context.Students.Select(row => row.PersonalName).Except(context.Students.Join(context.StudentCourseEnrolments, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.PersonalName)).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)",
    "result": "context.Students.Where(row => !context.StudentCourseEnrolments.Select(row => row.StudentId).Contains(row.StudentId)).Count();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
    "result": "context.CourseAuthorsAndTutors.Select(row => row.LoginName).Intersect(context.Students.Select(row => row.LoginName)).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
    "result": "context.CourseAuthorsAndTutors.Select(row => row.PersonalName).Intersect(context.Students.Select(row => row.PersonalName)).ToList();",
    "db_name": "e_learning",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT actual_order_id FROM actual_orders WHERE order_status_code = 'Success'",
    "result": "context.ActualOrders.Where(row => row.OrderStatusCode == \"Success\").Select(row => new { row.ActualOrderId }).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.product_name , t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Products.Join(context.RegularOrderProducts, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ProductId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.ProductName, group.First().t1.ProductPrice }).Take(1).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM customers",
    "result": "context.Customers.Count();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT payment_method) FROM customers",
    "result": "context.Customers.Select(row => row.PaymentMethod).Distinct().Count();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
    "result": "context.Trucks.OrderBy(row => row.TruckLicenceNumber).Select(row => new { row.TruckDetails }).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1",
    "result": "context.Products.OrderByDescending(row => (double) row.ProductPrice).Select(row => new { row.ProductName }).Take(1).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'",
    "result": "context.Customers.Select(row => row.CustomerName).Except(context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.StateProvinceCounty == \"California\").Select(row => row.t1.CustomerName)).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_email , customer_name FROM customers WHERE payment_method = 'Visa'",
    "result": "context.Customers.Where(row => row.PaymentMethod == \"Visa\").Select(row => new { row.CustomerEmail, row.CustomerName }).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.customer_name , t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'",
    "result": "context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.StateProvinceCounty == \"California\").Select(row => new { row.t1.CustomerName, row.t1.CustomerPhone }).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)",
    "result": "context.Addresses.Where(row => !context.Employees.Select(row => row.EmployeeAddressId).Contains(row.AddressId)).Select(row => new { row.StateProvinceCounty }).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_name , customer_phone , customer_email FROM Customers ORDER BY date_became_customer",
    "result": "context.Customers.OrderBy(row => row.DateBecameCustomer).Select(row => new { row.CustomerName, row.CustomerPhone, row.CustomerEmail }).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5",
    "result": "context.Customers.OrderBy(row => row.DateBecameCustomer).Select(row => new { row.CustomerName }).Take(5).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Customers.GroupBy(row => new { row.PaymentMethod }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PaymentMethod }).Take(1).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT route_name FROM Delivery_Routes ORDER BY route_name",
    "result": "context.DeliveryRoutes.OrderBy(row => row.RouteName).Select(row => new { row.RouteName }).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id = t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.DeliveryRoutes.Join(context.DeliveryRouteLocations, t1 => t1.RouteId, t2 => t2.RouteId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.RouteId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.RouteName }).Take(1).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county",
    "result": "context.CustomerAddresses.Join(context.Addresses, t1 => t1.AddressId, t2 => t2.AddressId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.StateProvinceCounty }).Select(group => new { group.Key.StateProvinceCounty, Count = group.Count() }).ToList();",
    "db_name": "customer_deliveries",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Ref_calendar",
    "result": "context.RefCalendars.Count();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
    "result": "context.RefCalendars.Select(row => new { row.CalendarDate, row.DayNumber }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Ref_document_types",
    "result": "context.RefDocumentTypes.Count();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
    "result": "context.RefDocumentTypes.Select(row => new { row.DocumentTypeCode, row.DocumentTypeName }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_name , document_type_description FROM Ref_document_types WHERE document_type_code = \"RV\"",
    "result": "context.RefDocumentTypes.Where(row => row.DocumentTypeCode == \"RV\").Select(row => new { row.DocumentTypeName, row.DocumentTypeDescription }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name = \"Paper\"",
    "result": "context.RefDocumentTypes.Where(row => row.DocumentTypeName == \"Paper\").Select(row => new { row.DocumentTypeCode }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM All_documents WHERE document_type_code = \"CV\" OR document_type_code = \"BK\"",
    "result": "context.AllDocuments.Where(row => row.DocumentTypeCode == \"CV\" || row.DocumentTypeCode == \"BK\").Count();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_stored FROM All_documents WHERE Document_name = \"Marry CV\"",
    "result": "context.AllDocuments.Where(row => row.DocumentName == \"Marry CV\").Select(row => new { row.DateStored }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
    "result": "context.AllDocuments.Join(context.RefCalendars, T1 => T1.DateStored, T2 => T2.CalendarDate, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.DayNumber, row.T1.DateStored }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code WHERE T1.document_name = \"How to read a book\"",
    "result": "context.AllDocuments.Join(context.RefDocumentTypes, T1 => T1.DocumentTypeCode, T2 => T2.DocumentTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DocumentName == \"How to read a book\").Select(row => new { row.T2.DocumentTypeName }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Ref_locations",
    "result": "context.RefLocations.Count();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT location_code , location_name FROM Ref_locations",
    "result": "context.RefLocations.Select(row => new { row.LocationCode, row.LocationName }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT location_name , location_description FROM Ref_locations WHERE location_code = \"x\"",
    "result": "context.RefLocations.Where(row => row.LocationCode == \"x\").Select(row => new { row.LocationName, row.LocationDescription }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT location_code FROM Ref_locations WHERE location_name = \"Canada\"",
    "result": "context.RefLocations.Where(row => row.LocationName == \"Canada\").Select(row => new { row.LocationCode }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM ROLES",
    "result": "context.Roles.Count();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT role_code , role_name , role_description FROM ROLES",
    "result": "context.Roles.Select(row => new { row.RoleCode, row.RoleName, row.RoleDescription }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT role_name , role_description FROM ROLES WHERE role_code = \"MG\"",
    "result": "context.Roles.Where(row => row.RoleCode == \"MG\").Select(row => new { row.RoleName, row.RoleDescription }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT role_description FROM ROLES WHERE role_name = \"Proof Reader\"",
    "result": "context.Roles.Where(row => row.RoleName == \"Proof Reader\").Select(row => new { row.RoleDescription }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Employees",
    "result": "context.Employees.Count();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT employee_name , role_code , date_of_birth FROM Employees WHERE employee_Name = 'Armani'",
    "result": "context.Employees.Where(row => row.EmployeeName == \"Armani\").Select(row => new { row.EmployeeName, row.RoleCode, row.DateOfBirth }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT employee_ID FROM Employees WHERE employee_name = \"Ebba\"",
    "result": "context.Employees.Where(row => row.EmployeeName == \"Ebba\").Select(row => new { row.EmployeeId }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT employee_name FROM Employees WHERE role_code = \"HR\"",
    "result": "context.Employees.Where(row => row.RoleCode == \"HR\").Select(row => new { row.EmployeeName }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT role_code , count(*) FROM Employees GROUP BY role_code",
    "result": "context.Employees.GroupBy(row => new { row.RoleCode }).Select(group => new { group.Key.RoleCode, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Employees.GroupBy(row => new { row.RoleCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.RoleCode }).Take(1).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*) >= 3",
    "result": "context.Employees.GroupBy(row => new { row.RoleCode }).Where(group => group.Count() >= 3).Select(group => new { group.Key.RoleCode }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Employees.GroupBy(row => new { row.RoleCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.RoleCode }).Take(1).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.role_name , T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T1.employee_name = \"Ebba\"",
    "result": "context.Employees.Join(context.Roles, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.EmployeeName == \"Ebba\").Select(row => new { row.T2.RoleName, row.T2.RoleDescription }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = \"Editor\"",
    "result": "context.Employees.Join(context.Roles, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.RoleName == \"Editor\").Select(row => new { row.T1.EmployeeName }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = \"Human Resource\" OR T2.role_name = \"Manager\"",
    "result": "context.Employees.Join(context.Roles, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.RoleName == \"Human Resource\" || row.T2.RoleName == \"Manager\").Select(row => new { row.T1.EmployeeId }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT location_code FROM Document_locations",
    "result": "context.DocumentLocations.Select(row => new { row.LocationCode }).Distinct().ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = \"Robin CV\"",
    "result": "context.AllDocuments.Join(context.DocumentLocations, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Join(context.RefLocations, joined => joined.T2.LocationCode, T3 => T3.LocationCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.DocumentName == \"Robin CV\").Select(row => new { row.T3.LocationName }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT location_code , date_in_location_from , date_in_locaton_to FROM Document_locations",
    "result": "context.DocumentLocations.Select(row => new { row.LocationCode, row.DateInLocationFrom, row.DateInLocatonTo }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.date_in_location_from , T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Robin CV\"",
    "result": "context.DocumentLocations.Join(context.AllDocuments, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == \"Robin CV\").Select(row => new { row.T1.DateInLocationFrom, row.T1.DateInLocatonTo }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT location_code , count(*) FROM Document_locations GROUP BY location_code",
    "result": "context.DocumentLocations.GroupBy(row => new { row.LocationCode }).Select(group => new { group.Key.LocationCode, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.DocumentLocations.GroupBy(row => new { row.LocationCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.LocationCode }).Take(1).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*) >= 3",
    "result": "context.DocumentLocations.GroupBy(row => new { row.LocationCode }).Where(group => group.Count() >= 3).Select(group => new { group.Key.LocationCode }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.location_name , T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
    "result": "context.DocumentLocations.Join(context.RefLocations, T1 => T1.LocationCode, T2 => T2.LocationCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.LocationCode }).OrderBy(group => group.Count()).Select(group => new { group.First().T2.LocationName, group.Key.LocationCode }).Take(1).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.employee_name , T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;",
    "result": "context.DocumentsToBeDestroyeds.Join(context.Employees, T1 => T1.DestructionAuthorisedByEmployeeId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Join(context.Employees, joined => joined.T1.DestroyedByEmployeeId, T3 => T3.EmployeeId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { T2EmployeeName = row.T2.EmployeeName, T3EmployeeName = row.T3.EmployeeName }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Destruction_Authorised_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
    "result": "context.DocumentsToBeDestroyeds.GroupBy(row => new { row.DestructionAuthorisedByEmployeeId }).Select(group => new { group.Key.DestructionAuthorisedByEmployeeId, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Destroyed_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",
    "result": "context.DocumentsToBeDestroyeds.GroupBy(row => new { row.DestroyedByEmployeeId }).Select(group => new { group.Key.DestroyedByEmployeeId, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
    "result": "context.Employees.Select(row => row.EmployeeId).Except(context.DocumentsToBeDestroyeds.Where(row => row.DestructionAuthorisedByEmployeeId.HasValue).Select(row => row.DestructionAuthorisedByEmployeeId.Value)).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
    "result": "context.DocumentsToBeDestroyeds.Select(row => new { row.DestructionAuthorisedByEmployeeId }).Distinct().ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
    "result": "context.DocumentsToBeDestroyeds.Select(row => new { row.DestroyedByEmployeeId }).Distinct().ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
    "result": "context.Employees.Select(row => row.EmployeeId).Except(context.DocumentsToBeDestroyeds.Where(row => row.DestroyedByEmployeeId.HasValue).Select(row => row.DestroyedByEmployeeId.Value)).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
    "result": "context.DocumentsToBeDestroyeds.Where(row => row.DestroyedByEmployeeId.HasValue).Select(row => row.DestroyedByEmployeeId.Value).Union(context.DocumentsToBeDestroyeds.Where(row => row.DestructionAuthorisedByEmployeeId.HasValue).Select(row => row.DestructionAuthorisedByEmployeeId.Value)).ToList();",
    "db_name": "cre_Doc_Tracking_DB",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM artwork",
    "result": "context.Artworks.Count();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM artwork ORDER BY Name ASC",
    "result": "context.Artworks.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"",
    "result": "context.Artworks.Where(row => row.Type != \"Program Talent Show\").Select(row => new { row.Name }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Festival_Name , LOCATION FROM festival_detail",
    "result": "context.FestivalDetails.Select(row => new { row.FestivalName, row.Location }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC",
    "result": "context.FestivalDetails.OrderBy(row => row.Year).Select(row => new { row.ChairName }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1",
    "result": "context.FestivalDetails.OrderByDescending(row => row.NumOfAudience).Select(row => new { row.Location }).Take(1).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Festival_Name FROM festival_detail WHERE YEAR = 2007",
    "result": "context.FestivalDetails.Where(row => row.Year == 2007).Select(row => new { row.FestivalName }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Num_of_Audience) FROM festival_detail",
    "result": "context.FestivalDetails.Select(row => row.NumOfAudience).Average();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3",
    "result": "context.FestivalDetails.OrderByDescending(row => row.Year).Select(row => new { row.FestivalName }).Take(3).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name , T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID",
    "result": "context.Nominations.Join(context.Artworks, T1 => T1.ArtworkId, T2 => T2.ArtworkId, (T1, T2) => new { T1, T2 }).Join(context.FestivalDetails, joined => joined.T1.FestivalId, T3 => T3.FestivalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.Name, row.T3.FestivalName }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T3.Year = 2007",
    "result": "context.Nominations.Join(context.Artworks, T1 => T1.ArtworkId, T2 => T2.ArtworkId, (T1, T2) => new { T1, T2 }).Join(context.FestivalDetails, joined => joined.T1.FestivalId, T3 => T3.FestivalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Year == 2007).Select(row => new { row.T2.Type }).Distinct().ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID ORDER BY T3.Year",
    "result": "context.Nominations.Join(context.Artworks, T1 => T1.ArtworkId, T2 => T2.ArtworkId, (T1, T2) => new { T1, T2 }).Join(context.FestivalDetails, joined => joined.T1.FestivalId, T3 => T3.FestivalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T3.Year).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T2.Type = \"Program Talent Show\"",
    "result": "context.Nominations.Join(context.Artworks, T1 => T1.ArtworkId, T2 => T2.ArtworkId, (T1, T2) => new { T1, T2 }).Join(context.FestivalDetails, joined => joined.T1.FestivalId, T3 => T3.FestivalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Type == \"Program Talent Show\").Select(row => new { row.T3.FestivalName }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Festival_ID , T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*) >= 2",
    "result": "context.Nominations.Join(context.Artworks, T1 => T1.ArtworkId, T2 => T2.ArtworkId, (T1, T2) => new { T1, T2 }).Join(context.FestivalDetails, joined => joined.T1.FestivalId, T3 => T3.FestivalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.FestivalId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.FestivalId, group.First().T3.FestivalName }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Festival_ID , T3.Festival_Name , COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID",
    "result": "context.Nominations.Join(context.Artworks, T1 => T1.ArtworkId, T2 => T2.ArtworkId, (T1, T2) => new { T1, T2 }).Join(context.FestivalDetails, joined => joined.T1.FestivalId, T3 => T3.FestivalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.FestivalId }).Select(group => new { group.Key.FestivalId, group.First().T3.FestivalName, Count = group.Count() }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE , COUNT(*) FROM artwork GROUP BY TYPE",
    "result": "context.Artworks.GroupBy(row => new { row.Type }).Select(group => new { group.Key.Type, Count = group.Count() }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Artworks.GroupBy(row => new { row.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*) > 1",
    "result": "context.FestivalDetails.GroupBy(row => new { row.Year }).Where(group => group.Count() > 1).Select(group => new { group.Key.Year }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)",
    "result": "context.Artworks.Where(row => !context.Nominations.Select(row => row.ArtworkId).Contains(row.ArtworkId)).Select(row => new { row.Name }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR = 2008 OR YEAR = 2010",
    "result": "context.FestivalDetails.Where(row => row.Year == 2008 || row.Year == 2010).Select(row => new { row.NumOfAudience }).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(Num_of_Audience) FROM festival_detail",
    "result": "context.FestivalDetails.Select(row => row.NumOfAudience).Sum();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT YEAR FROM festival_detail WHERE LOCATION = 'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'",
    "result": "context.FestivalDetails.Where(row => row.Location == \"United States\").Where(row => row.Year.HasValue).Select(row => row.Year.Value).Intersect(context.FestivalDetails.Where(row => row.Location != \"United States\").Where(row => row.Year.HasValue).Select(row => row.Year.Value)).ToList();",
    "db_name": "entertainment_awards",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
    "result": "context.ProductSuppliers.OrderByDescending(row => (double) row.TotalAmountPurchased).Select(row => new { row.ProductId }).Take(3).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_id , product_type_code FROM products ORDER BY product_price LIMIT 1",
    "result": "context.Products.OrderBy(row => (double) row.ProductPrice).Select(row => new { row.ProductId, row.ProductTypeCode }).Take(1).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT product_type_code) FROM products",
    "result": "context.Products.Select(row => row.ProductTypeCode).Distinct().Count();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_id = 10",
    "result": "context.Addresses.Join(context.CustomerAddresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CustomerId == 10).Select(row => new { row.T1.AddressDetails }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.staff_id , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Department Manager\"",
    "result": "context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.JobTitleCode == \"Department Manager\").Select(row => new { row.T1.StaffId, row.T1.StaffGender }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code",
    "result": "context.Customers.GroupBy(row => new { row.PaymentMethodCode }).Select(group => new { group.Key.PaymentMethodCode, Count = group.Count() }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.OrderItems.GroupBy(row => new { row.ProductId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ProductId }).Take(1).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.CustomerName, group.First().T1.CustomerPhone, group.First().T1.CustomerEmail }).Take(1).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code",
    "result": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Select(group => new { group.Key.ProductTypeCode, AverageProductPrice = group.Select(row => (double) row.ProductPrice).Average() }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE T2.dept_store_chain_name = \"South\"",
    "result": "context.DepartmentStores.Join(context.DepartmentStoreChains, T1 => T1.DeptStoreChainId, T2 => T2.DeptStoreChainId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DeptStoreChainName == \"South\").Count();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.staff_name , T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1",
    "result": "context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.DateAssignedTo).Select(row => new { row.T1.StaffName, row.T2.JobTitleCode }).Take(1).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.product_type_code , T2.product_name , T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3",
    "result": "context.ProductSuppliers.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.SupplierId == 3).Select(row => new { row.T2.ProductTypeCode, row.T2.ProductName, row.T2.ProductPrice }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Pending\" ORDER BY T2.customer_id",
    "result": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatusCode == \"Pending\").OrderBy(row => row.T2.CustomerId).Select(row => new { row.T1.CustomerName }).Distinct().ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_name , T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"New\" INTERSECT SELECT T1.customer_name , T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Pending\"",
    "result": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatusCode == \"New\").Select(row => new { row.T1.CustomerName, row.T1.CustomerAddress }).Intersect(context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatusCode == \"Pending\").Select(row => new { row.T1.CustomerName, row.T1.CustomerAddress })).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 2 AND T2.product_price > (SELECT avg(product_price) FROM products)",
    "result": "context.ProductSuppliers.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.SupplierId == 2 && row.T2.ProductPrice > context.Products.Select(row => (double) row.ProductPrice).Average()).Select(row => new { row.T1.ProductId }).ToList();",
    "db_name": "department_store",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,167): error CS0019: Operator '>' cannot be applied to operands of type 'decimal?' and 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.30"
  },
  {
    "query": "SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"marketing\" INTERSECT SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"managing\"",
    "result": "context.Departments.Join(context.DepartmentStores, T1 => T1.DeptStoreId, T2 => T2.DeptStoreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DepartmentName == \"marketing\").Select(row => new { row.T2.DeptStoreId, row.T2.StoreName }).Intersect(context.Departments.Join(context.DepartmentStores, T1 => T1.DeptStoreId, T2 => T2.DeptStoreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DepartmentName == \"managing\").Select(row => new { row.T2.DeptStoreId, row.T2.StoreName })).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
    "result": "context.DepartmentStores.GroupBy(row => new { row.DeptStoreChainId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DeptStoreChainId }).Take(2).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
    "result": "context.StaffDepartmentAssignments.GroupBy(row => new { row.DepartmentId }).OrderBy(group => group.Count()).Select(group => new { group.Key.DepartmentId }).Take(1).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_type_code , max(product_price) , min(product_price) FROM products GROUP BY product_type_code",
    "result": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Select(group => new { group.Key.ProductTypeCode, MaxProductPrice = group.Select(row => (double) row.ProductPrice).Max(), MinProductPrice = group.Select(row => (double) row.ProductPrice).Min() }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price) > (SELECT avg(product_price) FROM products)",
    "result": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Where(group => group.Average(row => row.ProductPrice) > context.Products.Select(row => (double) row.ProductPrice).Average()).Select(group => new { group.Key.ProductTypeCode }).ToList();",
    "db_name": "department_store",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,88): error CS0019: Operator '>' cannot be applied to operands of type 'decimal?' and 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.31"
  },
  {
    "query": "SELECT T1.staff_id , T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
    "result": "context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.DateAssignedTo - row.T2.DateAssignedFrom).Select(row => new { row.T1.StaffId, row.T1.StaffName }).Take(1).ToList();",
    "db_name": "department_store",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT product_name , product_id FROM products WHERE product_price BETWEEN 600 AND 700",
    "result": "context.Products.Where(row => row.ProductPrice >= 600 && row.ProductPrice <= 700).Select(row => new { row.ProductName, row.ProductId }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date > (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code = \"Cancelled\")",
    "result": "context.CustomerOrders.Where(row => row.OrderDate > context.CustomerOrders.Where(row => row.OrderStatusCode == \"Cancelled\").Select(row => row.OrderDate).Min()).Select(row => new { row.CustomerId }).Distinct().ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical Staff')",
    "result": "context.StaffDepartmentAssignments.Where(row => row.DateAssignedTo < context.StaffDepartmentAssignments.Where(row => row.JobTitleCode == \"Clerical Staff\").Select(row => row.DateAssignedTo).Max()).Select(row => new { row.StaffId }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
    "result": "context.Customers.Where(row => EF.Functions.Like(row.CustomerAddress, \"%TN%\")).Select(row => new { row.CustomerName, row.CustomerId }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"",
    "result": "context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.DateAssignedFrom, \"2016%\")).Select(row => new { row.T1.StaffName, row.T1.StaffGender }).ToList();",
    "db_name": "department_store",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,162): error CS1503: Argument 2: cannot convert from 'System.DateTime' to 'string?' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.28"
  },
  {
    "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*) > 1",
    "result": "context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StaffId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.StaffName }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.supplier_name , T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id ORDER BY T3.address_details",
    "result": "context.Suppliers.Join(context.SupplierAddresses, T1 => T1.SupplierId, T2 => T2.SupplierId, (T1, T2) => new { T1, T2 }).Join(context.Addresses, joined => joined.T2.AddressId, T3 => T3.AddressId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T3.AddressDetails).Select(row => new { row.T1.SupplierName, row.T1.SupplierPhone }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers",
    "result": "context.Customers.Select(row => row.CustomerPhone).Union(context.Suppliers.Select(row => row.SupplierPhone)).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*) > 3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased) > 80000",
    "result": "context.OrderItems.GroupBy(row => new { row.ProductId }).Where(group => group.Count() > 3).Select(group => group.Key.ProductId).Union(context.ProductSuppliers.GroupBy(row => new { row.ProductId }).Where(group => group.Sum(row => row.TotalAmountPurchased) > 80000).Select(group => group.Key.ProductId)).ToList();",
    "db_name": "department_store",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT product_id , product_name FROM products WHERE product_price < 600 OR product_price > 900",
    "result": "context.Products.Where(row => row.ProductPrice < 600 || row.ProductPrice > 900).Select(row => new { row.ProductId, row.ProductName }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased) > 50000 OR avg(total_amount_purchased) < 30000",
    "result": "context.ProductSuppliers.GroupBy(row => new { row.SupplierId }).Where(group => group.Average(row => row.TotalAmountPurchased) > 50000 || group.Average(row => row.TotalAmountPurchased) < 30000).Select(group => new { group.Key.SupplierId }).ToList();",
    "db_name": "department_store",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT avg(total_amount_purchased) , avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id = (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",
    "result": "context.ProductSuppliers.Where(row => row.SupplierId == context.ProductSuppliers.GroupBy(row => new { row.SupplierId }).OrderByDescending(group => group.Count()).Select(group => group.Key.SupplierId).Take(1).First()).GroupBy(row => 1).Select(group => new { AverageTotalAmountPurchased = group.Select(row => (double) row.TotalAmountPurchased).Average(), AverageTotalValuePurchased = group.Select(row => (double) row.TotalValuePurchased).Average() }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(customer_code) , min(customer_code) FROM Customers",
    "result": "context.Customers.GroupBy(row => 1).Select(group => new { MaxCustomerCode = group.Select(row => row.CustomerCode).Max(), MinCustomerCode = group.Select(row => row.CustomerCode).Min() }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = \"keyboard\"",
    "result": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.OrderItems, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Products, joined => joined.T3.ProductId, T4 => T4.ProductId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.ProductName == \"keyboard\").Select(row => new { row.T1.CustomerName }).Distinct().ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.supplier_name , T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = \"red jeans\"",
    "result": "context.Suppliers.Join(context.ProductSuppliers, T1 => T1.SupplierId, T2 => T2.SupplierId, (T1, T2) => new { T1, T2 }).Join(context.Products, joined => joined.T2.ProductId, T3 => T3.ProductId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.ProductName == \"red jeans\").Select(row => new { row.T1.SupplierName, row.T1.SupplierPhone }).Distinct().ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(product_price) , min(product_price) , product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code",
    "result": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Select(group => new { MaxProductPrice = group.Select(row => (double) row.ProductPrice).Max(), MinProductPrice = group.Select(row => (double) row.ProductPrice).Min(), group.Key.ProductTypeCode }).OrderBy(group => group.ProductTypeCode).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT order_id , customer_id FROM customer_orders WHERE order_status_code = \"Cancelled\" ORDER BY order_date",
    "result": "context.CustomerOrders.Where(row => row.OrderStatusCode == \"Cancelled\").OrderBy(row => row.OrderDate).Select(row => new { row.OrderId, row.CustomerId }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id) >= 2",
    "result": "context.CustomerOrders.Join(context.OrderItems, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Join(context.Products, joined => joined.T2.ProductId, T3 => T3.ProductId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.ProductId }).Where(group => group.Count(row => row.T1.CustomerId) >= 2).Select(group => new { group.First().T3.ProductName }).Distinct().ToList();",
    "db_name": "department_store",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,323): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.37"
  },
  {
    "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id) >= 3",
    "result": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.OrderItems, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count(row => row.T3.ProductId) >= 3).Select(group => new { group.First().T1.CustomerName }).Distinct().ToList();",
    "db_name": "department_store",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,327): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.25"
  },
  {
    "query": "SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Sales Person\" EXCEPT SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Clerical Staff\"",
    "result": "context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.JobTitleCode == \"Sales Person\").Select(row => new { row.T1.StaffName, row.T1.StaffGender }).Except(context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.JobTitleCode == \"Clerical Staff\").Select(row => new { row.T1.StaffName, row.T1.StaffGender })).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_id , customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
    "result": "context.Customers.Where(row => EF.Functions.Like(row.CustomerAddress, \"%WY%\") && row.PaymentMethodCode != \"Credit Card\").Select(row => new { row.CustomerId, row.CustomerName }).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(product_price) FROM products WHERE product_type_code = 'Clothes'",
    "result": "context.Products.Where(row => row.ProductTypeCode == \"Clothes\").Select(row => (double) row.ProductPrice).Average();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price DESC LIMIT 1",
    "result": "context.Products.Where(row => row.ProductTypeCode == \"Hardware\").OrderByDescending(row => (double) row.ProductPrice).Select(row => new { row.ProductName }).Take(1).ToList();",
    "db_name": "department_store",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM STUDENT",
    "result": "context.Students.Count();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM VOTING_RECORD",
    "result": "context.VotingRecords.Count();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD",
    "result": "context.VotingRecords.Select(row => row.PresidentVote).Distinct().Count();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Age) FROM STUDENT",
    "result": "context.Students.Select(row => row.Age).Max();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LName FROM STUDENT WHERE Major = 50",
    "result": "context.Students.Where(row => row.Major == 50).Select(row => new { row.Lname }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Fname FROM STUDENT WHERE Age > 22",
    "result": "context.Students.Where(row => row.Age > 22).Select(row => new { row.Fname }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Major FROM STUDENT WHERE Sex = \"M\"",
    "result": "context.Students.Where(row => row.Sex == \"M\").Select(row => new { row.Major }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Age) FROM STUDENT WHERE Sex = \"F\"",
    "result": "context.Students.Where(row => row.Sex == \"F\").Select(row => row.Age).Average();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Age) , min(Age) FROM STUDENT WHERE Major = 600",
    "result": "context.Students.Where(row => row.Major == 600).GroupBy(row => 1).Select(group => new { MaxAge = group.Select(row => row.Age).Max(), MinAge = group.Select(row => row.Age).Min() }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Advisor FROM STUDENT WHERE city_code = \"BAL\"",
    "result": "context.Students.Where(row => row.CityCode == \"BAL\").Select(row => new { row.Advisor }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE = \"Fall\"",
    "result": "context.VotingRecords.Where(row => row.ElectionCycle == \"Fall\").Select(row => new { row.SecretaryVote }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date = \"08/30/2015\"",
    "result": "context.VotingRecords.Where(row => row.RegistrationDate == \"08/30/2015\").Select(row => new { row.PresidentVote }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Registration_Date , Election_Cycle FROM VOTING_RECORD",
    "result": "context.VotingRecords.Select(row => new { row.RegistrationDate, row.ElectionCycle }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT President_Vote , VICE_President_Vote FROM VOTING_RECORD",
    "result": "context.VotingRecords.Select(row => new { row.PresidentVote, row.VicePresidentVote }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_President_VOTE",
    "result": "context.Students.Join(context.VotingRecords, T1 => T1.StuId, T2 => T2.ClassPresidentVote, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Lname }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_Senator_VOTE",
    "result": "context.Students.Join(context.VotingRecords, T1 => T1.StuId, T2 => T2.ClassSenatorVote, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Fname }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE T2.Election_Cycle = \"Fall\"",
    "result": "context.Students.Join(context.VotingRecords, T1 => T1.StuId, T2 => T2.SecretaryVote, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ElectionCycle == \"Fall\").Select(row => new { row.T1.Age }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote WHERE T2.Election_Cycle = \"Spring\"",
    "result": "context.Students.Join(context.VotingRecords, T1 => T1.StuId, T2 => T2.TreasurerVote, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ElectionCycle == \"Spring\").Select(row => new { row.T1.Advisor }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote",
    "result": "context.Students.Join(context.VotingRecords, T1 => T1.StuId, T2 => T2.TreasurerVote, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Major }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.Fname , T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_VOTE WHERE T1.sex = \"F\"",
    "result": "context.Students.Join(context.VotingRecords, T1 => T1.StuId, T2 => T2.PresidentVote, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Sex == \"F\").Select(row => new { row.T1.Fname, row.T1.Lname }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.Fname , T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE WHERE T1.age = 18",
    "result": "context.Students.Join(context.VotingRecords, T1 => T1.StuId, T2 => T2.VicePresidentVote, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age == 18).Select(row => new { row.T1.Fname, row.T1.Lname }).Distinct().ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.Sex = \"M\" AND T2.Election_Cycle = \"Fall\"",
    "result": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Sex == \"M\" && row.T2.ElectionCycle == \"Fall\").Count();",
    "db_name": "voter_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 5}]\", linq_results: \"[{0: 120}]\" }"
  },
  {
    "query": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.city_code = \"NYC\" AND T2.Election_Cycle = \"Spring\"",
    "result": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CityCode == \"NYC\" && row.T2.ElectionCycle == \"Spring\").Count();",
    "db_name": "voter_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 0}]\", linq_results: \"[{0: 15}]\" }"
  },
  {
    "query": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.city_code = \"NYC\" AND T2.Election_Cycle = \"Spring\"",
    "result": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CityCode == \"NYC\" && row.T2.ElectionCycle == \"Spring\").Select(row => row.T1.Age).Average();",
    "db_name": "voter_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 22}]\", linq_results: \"[{0: 20,333333333333332}]\" }"
  },
  {
    "query": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.Sex = \"F\" AND T2.Election_Cycle = \"Spring\"",
    "result": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Sex == \"F\" && row.T2.ElectionCycle == \"Spring\").Select(row => row.T1.Age).Average();",
    "db_name": "voter_2",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 21}]\", linq_results: \"[{0: 19,7}]\" }"
  },
  {
    "query": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code = \"PIT\"",
    "result": "context.Students.Join(context.VotingRecords, T1 => T1.StuId, T2 => T2.VicePresidentVote, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Fname).Distinct().Except(context.Students.Where(row => row.CityCode == \"PIT\").Select(row => row.Fname).Distinct()).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = \"2192\"",
    "result": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Lname).Distinct().Except(context.Students.Where(row => row.Advisor == \"2192\").Select(row => row.Lname).Distinct()).ToList();",
    "db_name": "voter_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,172): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.23"
  },
  {
    "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = \"8741\"",
    "result": "context.Students.SelectMany(s => context.VotingRecords, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Lname).Distinct().Intersect(context.Students.Where(row => row.Advisor == \"8741\").Select(row => row.Lname).Distinct()).ToList();",
    "db_name": "voter_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,175): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.35"
  },
  {
    "query": "SELECT Advisor , count(*) FROM STUDENT GROUP BY Advisor",
    "result": "context.Students.GroupBy(row => new { row.Advisor }).Select(group => new { group.Key.Advisor, Count = group.Count() }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*) > 2",
    "result": "context.Students.GroupBy(row => new { row.Advisor }).Where(group => group.Count() > 2).Select(group => new { group.Key.Advisor }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*) < 3",
    "result": "context.Students.GroupBy(row => new { row.Major }).Where(group => group.Count() < 3).Select(group => new { group.Key.Major }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Election_Cycle , count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",
    "result": "context.VotingRecords.GroupBy(row => new { row.ElectionCycle }).Select(group => new { group.Key.ElectionCycle, Count = group.Count() }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Students.GroupBy(row => new { row.Major }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Major }).Take(1).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Major FROM STUDENT WHERE Sex = \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Students.Where(row => row.Sex == \"F\").GroupBy(row => new { row.Major }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Major }).Take(1).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Students.GroupBy(row => new { row.CityCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CityCode }).Take(1).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*) > 2",
    "result": "context.Students.GroupBy(row => new { row.Advisor }).Where(group => group.Count() > 2).Select(group => new { group.Key.Advisor }).ToList();",
    "db_name": "voter_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM roller_coaster",
    "result": "context.RollerCoasters.Count();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC",
    "result": "context.RollerCoasters.OrderBy(row => row.Length).Select(row => new { row.Name }).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LENGTH , Height FROM roller_coaster",
    "result": "context.RollerCoasters.Select(row => new { row.Length, row.Height }).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM country WHERE Languages != \"German\"",
    "result": "context.Countries.Where(row => row.Languages != \"German\").Select(row => new { row.Name }).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Status FROM roller_coaster WHERE LENGTH > 3300 OR Height > 100",
    "result": "context.RollerCoasters.Where(row => row.Length > 3300 || row.Height > 100).Select(row => new { row.Status }).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
    "result": "context.RollerCoasters.OrderByDescending(row => row.Length).Select(row => new { row.Speed }).Take(1).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Speed) FROM roller_coaster",
    "result": "context.RollerCoasters.Select(row => row.Speed).ToList().Select(value => double.Parse(value)).ToList().Average();",
    "db_name": "roller_coaster",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 56,31666666666666}]\", linq_results: \"[{0: 113,16666666666667}]\" }"
  },
  {
    "query": "SELECT Status , COUNT(*) FROM roller_coaster GROUP BY Status",
    "result": "context.RollerCoasters.GroupBy(row => new { row.Status }).Select(group => new { group.Key.Status, Count = group.Count() }).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.RollerCoasters.GroupBy(row => new { row.Status }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Status }).Take(1).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*) > 2",
    "result": "context.RollerCoasters.GroupBy(row => new { row.Status }).Where(group => group.Count() > 2).Select(group => new { group.Key.Status }).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1",
    "result": "context.RollerCoasters.OrderByDescending(row => row.Speed).Select(row => new { row.Park }).Take(1).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name , T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID",
    "result": "context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).Select(row => new { T2Name = row.T2.Name, T1Name = row.T1.Name }).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
    "result": "context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Where(group => group.Count() > 1).Select(group => new { group.Key.Name }).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID ORDER BY T2.Height DESC LIMIT 1",
    "result": "context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Height).Select(row => new { row.T1.Name, row.T1.Population }).Take(1).ToList();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name",
    "result": "context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Select(group => new { group.Key.Name, AverageSpeed = group.Select(row => row.T2.Speed).Average() }).ToList();",
    "db_name": "roller_coaster",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,216): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.24"
  },
  {
    "query": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH > 3000 )",
    "result": "context.Countries.Where(row => !context.RollerCoasters.Where(row => row.Length > 3000).Select(row => row.CountryId).Contains(row.CountryId)).Count();",
    "db_name": "roller_coaster",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.area , T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID WHERE T2.speed > 60 INTERSECT SELECT T1.name , T1.area , T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID WHERE T2.speed < 55",
    "result": "context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Speed > \"60\").Select(row => new { row.T1.Name, row.T1.Area, row.T1.Population }).Intersect(context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Speed < \"55\").Select(row => new { row.T1.Name, row.T1.Area, row.T1.Population })).ToList();",
    "db_name": "roller_coaster",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,366): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.46"
  },
  {
    "query": "SELECT count(*) FROM editor",
    "result": "context.Editors.Count();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM editor ORDER BY Age ASC",
    "result": "context.Editors.OrderBy(row => row.Age).Select(row => new { row.Name }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name , Age FROM editor",
    "result": "context.Editors.Select(row => new { row.Name, row.Age }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM editor WHERE Age > 25",
    "result": "context.Editors.Where(row => row.Age > 25).Select(row => new { row.Name }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM editor WHERE Age = 24 OR Age = 25",
    "result": "context.Editors.Where(row => row.Age == 24 || row.Age == 25).Select(row => new { row.Name }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
    "result": "context.Editors.OrderBy(row => row.Age).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Age , COUNT(*) FROM editor GROUP BY Age",
    "result": "context.Editors.GroupBy(row => new { row.Age }).Select(group => new { group.Key.Age, Count = group.Count() }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Editors.GroupBy(row => new { row.Age }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Age }).Take(1).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Theme FROM journal",
    "result": "context.Journals.Select(row => new { row.Theme }).Distinct().ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID",
    "result": "context.JournalCommittees.Join(context.Editors, T1 => T1.EditorId, T2 => T2.EditorId, (T1, T2) => new { T1, T2 }).Join(context.Journals, joined => joined.T1.JournalId, T3 => T3.JournalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.Name, row.T3.Theme }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name , T2.age , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme ASC",
    "result": "context.JournalCommittees.Join(context.Editors, T1 => T1.EditorId, T2 => T2.EditorId, (T1, T2) => new { T1, T2 }).Join(context.Journals, joined => joined.T1.JournalId, T3 => T3.JournalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T3.Theme).Select(row => new { row.T2.Name, row.T2.Age, row.T3.Theme }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000",
    "result": "context.JournalCommittees.Join(context.Editors, T1 => T1.EditorId, T2 => T2.EditorId, (T1, T2) => new { T1, T2 }).Join(context.Journals, joined => joined.T1.JournalId, T3 => T3.JournalId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Sales > 3000).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.editor_id , T1.Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id",
    "result": "context.Editors.Join(context.JournalCommittees, T1 => T1.EditorId, T2 => T2.EditorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EditorId }).Select(group => new { group.Key.EditorId, group.First().T1.Name, Count = group.Count() }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*) >= 2",
    "result": "context.Editors.Join(context.JournalCommittees, T1 => T1.EditorId, T2 => T2.EditorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Name }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
    "result": "context.Editors.Where(row => !context.JournalCommittees.Select(row => row.EditorId).Contains(row.EditorId)).Select(row => new { row.Name }).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date , theme , sales FROM journal EXCEPT SELECT T1.date , T1.theme , T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID",
    "result": "context.Journals.Where(row => row.Sales.HasValue).Select(row => new { row.Date, row.Theme, row.Sales.Value }).Except(context.Journals.Join(context.JournalCommittees, T1 => T1.JournalId, T2 => T2.JournalId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Sales.HasValue).Select(row => new { row.T1.Date, row.T1.Theme, row.T1.Sales.Value })).ToList();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.work_type = 'Photo'",
    "result": "context.Journals.Join(context.JournalCommittees, T1 => T1.JournalId, T2 => T2.JournalId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WorkType == \"Photo\").Select(row => row.T1.Sales).Average();",
    "db_name": "journal_committee",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM club",
    "result": "context.Clubs.Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT clubname FROM club",
    "result": "context.Clubs.Select(row => new { row.ClubName }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM student",
    "result": "context.Students.Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT fname FROM student",
    "result": "context.Students.Select(row => new { row.Fname }).Distinct().ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\").Select(row => new { row.t3.Lname }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Hopkins Student Enterprises\").Select(row => new { row.t3.Lname }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Tennis Club\").Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Pen and Paper Gaming\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Pen and Paper Gaming\").Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Linda\" AND t3.lname = \"Smith\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == \"Linda\" && row.t3.Lname == \"Smith\").Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Tracy\" AND t3.lname = \"Kim\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == \"Tracy\" && row.t3.Lname == \"Kim\").Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.sex = \"F\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\" && row.t3.Sex == \"F\").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t3.sex = \"M\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Hopkins Student Enterprises\" && row.t3.Sex == \"M\").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.major = \"600\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\" && row.t3.Major == \"600\").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList();",
    "db_name": "club_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,286): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.32"
  },
  {
    "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.major = \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Major == \"600\").GroupBy(row => new { row.t1.ClubName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ClubName }).Take(1).ToList();",
    "db_name": "club_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,245): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.28"
  },
  {
    "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.sex = \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Sex == \"F\").GroupBy(row => new { row.t1.ClubName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ClubName }).Take(1).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT clubdesc FROM club WHERE clubname = \"Tennis Club\"",
    "result": "context.Clubs.Where(row => row.ClubName == \"Tennis Club\").Select(row => new { row.ClubDesc }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT clubdesc FROM club WHERE clubname = \"Pen and Paper Gaming\"",
    "result": "context.Clubs.Where(row => row.ClubName == \"Pen and Paper Gaming\").Select(row => new { row.ClubDesc }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT clublocation FROM club WHERE clubname = \"Tennis Club\"",
    "result": "context.Clubs.Where(row => row.ClubName == \"Tennis Club\").Select(row => new { row.ClubLocation }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT clublocation FROM club WHERE clubname = \"Pen and Paper Gaming\"",
    "result": "context.Clubs.Where(row => row.ClubName == \"Pen and Paper Gaming\").Select(row => new { row.ClubLocation }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT clublocation FROM club WHERE clubname = \"Hopkins Student Enterprises\"",
    "result": "context.Clubs.Where(row => row.ClubName == \"Hopkins Student Enterprises\").Select(row => new { row.ClubLocation }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT clubname FROM club WHERE clublocation = \"AKW\"",
    "result": "context.Clubs.Where(row => row.ClubLocation == \"AKW\").Select(row => new { row.ClubName }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM club WHERE clublocation = \"HHH\"",
    "result": "context.Clubs.Where(row => row.ClubLocation == \"HHH\").Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t2.position = \"President\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\" && row.t2.Position == \"President\").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t2.position = \"CTO\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Hopkins Student Enterprises\" && row.t2.Position == \"CTO\").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE t1.clubname = \"Bootup Baltimore\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\").Select(row => row.t2.Position).Distinct().Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.age > 18",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\" && row.t3.Age > 18).Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.age < 18",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\" && row.t3.Age < 18).Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = \"BAL\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.CityCode == \"BAL\").Select(row => new { row.t1.ClubName }).Distinct().ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = \"HOU\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.CityCode == \"HOU\").Select(row => new { row.t1.ClubName }).Distinct().ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Eric\" AND t3.lname = \"Tai\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == \"Eric\" && row.t3.Lname == \"Tai\").Select(row => row.t1.ClubName).Distinct().Count();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Davis\" AND t3.lname = \"Steven\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == \"Davis\" && row.t3.Lname == \"Steven\").Select(row => new { row.t1.ClubName }).Distinct().ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.advisor = 1121",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Advisor == 1121).Select(row => new { row.t1.ClubName }).Distinct().ToList();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\").Select(row => row.t3.Age).Average();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Hopkins Student Enterprises\").Select(row => row.t3.Age).Average();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"",
    "result": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Tennis Club\").Select(row => row.t3.Age).Average();",
    "db_name": "club_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT i_id FROM item WHERE title = \"orange\"",
    "result": "context.Items.Where(row => row.Title == \"orange\").Select(row => new { row.IId }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM item",
    "result": "context.Items.Select(row => new { row..IId, row..Title }).ToList();",
    "db_name": "epinions_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,61): error CS0103: The name 'Title' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    6 Error(s)\n\nTime Elapsed 00:00:01.33"
  },
  {
    "query": "SELECT count(*) FROM review",
    "result": "context.Reviews.Count();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM useracct",
    "result": "context.Useraccts.Count();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(rating) , max(rating) FROM review",
    "result": "context.Reviews.GroupBy(row => 1).Select(group => new { AverageRating = group.Select(row => row.Rating).Average(), MaxRating = group.Select(row => row.Rating).Max() }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(rank) FROM review",
    "result": "context.Reviews.Select(row => row.Rank).Min();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT u_id) FROM review",
    "result": "context.Reviews.Select(row => row.UId).Distinct().Count();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT i_id) FROM review",
    "result": "context.Reviews.Select(row => row.IId).Distinct().Count();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
    "result": "context.Items.Where(row => !context.Reviews.Select(row => row.IId).Contains(row.IId)).Count();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
    "result": "context.Useraccts.Where(row => !context.Reviews.Select(row => row.UId).Contains(row.UId)).Select(row => new { row.Name }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating = 10",
    "result": "context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Rating == 10).Select(row => new { row.T1.Title }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > (SELECT avg(rating) FROM review)",
    "result": "context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Rating > context.Reviews.Select(row => row.Rating).Average()).Select(row => new { row.T1.Title }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5",
    "result": "context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Rating < 5).Select(row => new { row.T1.Title }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5",
    "result": "context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Rating > 8).Select(row => row.T1.Title).Intersect(context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Rating < 5).Select(row => row.T1.Title)).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rank > 3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating) > 5",
    "result": "context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Rank > 3).Select(row => row.T1.Title).Intersect(context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.IId }).Where(group => group.Average(row => row.T2.Rating) > 5).Select(group => group.First().T1.Title)).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1",
    "result": "context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.IId }).OrderBy(group => group.Average(row => row.T2.Rating)).Select(group => new { group.First().T1.Title }).Take(1).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title FROM item ORDER BY title",
    "result": "context.Items.OrderBy(row => row.Title).Select(row => new { row.Title }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Useraccts.Join(context.Reviews, T1 => T1.UId, T2 => T2.UId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.UId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name }).Take(1).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.title , T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1",
    "result": "context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.IId }).OrderByDescending(group => group.Average(row => row.T2.Rating)).Select(group => new { group.First().T1.Title, group.Key.IId }).Take(1).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.title , T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",
    "result": "context.Items.Join(context.Reviews, T1 => T1.IId, T2 => T2.IId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.IId }).OrderByDescending(group => group.Average(row => row.T2.Rank)).Select(group => new { group.First().T1.Title, group.Key.IId }).Take(1).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id",
    "result": "context.Useraccts.Join(context.Reviews, T1 => T1.UId, T2 => T2.UId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.UId }).Select(group => new { group.First().T1.Name, AverageRating = group.Select(row => row.T2.Rating).Average() }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id",
    "result": "context.Useraccts.Join(context.Reviews, T1 => T1.UId, T2 => T2.UId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.UId }).Select(group => new { group.First().T1.Name, Count = group.Count() }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id ORDER BY T2.rating DESC LIMIT 1",
    "result": "context.Useraccts.Join(context.Reviews, T1 => T1.UId, T2 => T2.UId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Rating).Select(row => new { row.T1.Name }).Take(1).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1",
    "result": "context.Useraccts.Join(context.Trusts, T1 => T1.UId, T2 => T2.SourceUId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.SourceUId }).OrderByDescending(group => group.Average(row => row.T2.Trust1)).Select(group => new { group.First().T1.Name }).Take(1).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id",
    "result": "context.Useraccts.Join(context.Trusts, T1 => T1.UId, T2 => T2.TargetUId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TargetUId }).Select(group => new { group.First().T1.Name, AverageTrust1 = group.Select(row => row.T2.Trust1).Average() }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id ORDER BY trust LIMIT 1",
    "result": "context.Useraccts.Join(context.Trusts, T1 => T1.UId, T2 => T2.TargetUId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Trust1).Select(row => new { row.T1.Name }).Take(1).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
    "result": "context.Items.Where(row => !context.Reviews.Select(row => row.IId).Contains(row.IId)).Select(row => new { row.Title }).ToList();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
    "result": "context.Useraccts.Where(row => !context.Reviews.Select(row => row.UId).Contains(row.UId)).Count();",
    "db_name": "epinions_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM member",
    "result": "context.Members.Count();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM member ORDER BY Name ASC",
    "result": "context.Members.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name , Country FROM member",
    "result": "context.Members.Select(row => new { row.Name, row.Country }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM member WHERE Country = \"United States\" OR Country = \"Canada\"",
    "result": "context.Members.Where(row => row.Country == \"United States\" || row.Country == \"Canada\").Select(row => new { row.Name }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country , COUNT(*) FROM member GROUP BY Country",
    "result": "context.Members.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Members.GroupBy(row => new { row.Country }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Country }).Take(1).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*) > 2",
    "result": "context.Members.GroupBy(row => new { row.Country }).Where(group => group.Count() > 2).Select(group => new { group.Key.Country }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Leader_Name , College_Location FROM college",
    "result": "context.Colleges.Select(row => new { row.LeaderName, row.CollegeLocation }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name , T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID",
    "result": "context.Colleges.Join(context.Members, T1 => T1.CollegeId, T2 => T2.CollegeId, (T1, T2) => new { T1, T2 }).Select(row => new { T2Name = row.T2.Name, T1Name = row.T1.Name }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name , T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID ORDER BY T2.Name ASC",
    "result": "context.Colleges.Join(context.Members, T1 => T1.CollegeId, T2 => T2.CollegeId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Name).Select(row => new { row.T2.Name, row.T1.CollegeLocation }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID WHERE T2.Country = \"Canada\"",
    "result": "context.Colleges.Join(context.Members, T1 => T1.CollegeId, T2 => T2.CollegeId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country == \"Canada\").Select(row => new { row.T1.LeaderName }).Distinct().ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID",
    "result": "context.Members.Join(context.Rounds, T1 => T1.MemberId, T2 => T2.MemberId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name, row.T2.DecorationTheme }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Rank_in_Round > 3",
    "result": "context.Members.Join(context.Rounds, T1 => T1.MemberId, T2 => T2.MemberId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.RankInRound > 3).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID ORDER BY Rank_in_Round ASC",
    "result": "context.Members.Join(context.Rounds, T1 => T1.MemberId, T2 => T2.MemberId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.RankInRound).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)",
    "result": "context.Members.Where(row => !context.Rounds.Select(row => row.MemberId).Contains(row.MemberId)).Select(row => new { row.Name }).ToList();",
    "db_name": "decoration_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM station",
    "result": "context.Stations.Count();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , LOCATION , number_of_platforms FROM station",
    "result": "context.Stations.Select(row => new { row.Name, row.Location, row.NumberOfPlatforms }).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT LOCATION FROM station",
    "result": "context.Stations.Select(row => new { row.Location }).Distinct().ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , total_passengers FROM station WHERE LOCATION != 'London'",
    "result": "context.Stations.Where(row => row.Location != \"London\").Select(row => new { row.Name, row.TotalPassengers }).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , main_services FROM station ORDER BY total_passengers DESC LIMIT 3",
    "result": "context.Stations.OrderByDescending(row => row.TotalPassengers).Select(row => new { row.Name, row.MainServices }).Take(3).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(total_passengers) , max(total_passengers) FROM station WHERE LOCATION = 'London' OR LOCATION = 'Glasgow'",
    "result": "context.Stations.Where(row => row.Location == \"London\" || row.Location == \"Glasgow\").GroupBy(row => 1).Select(group => new { AverageTotalPassengers = group.Select(row => row.TotalPassengers).Average(), MaxTotalPassengers = group.Select(row => row.TotalPassengers).Max() }).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION , sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY LOCATION",
    "result": "context.Stations.GroupBy(row => new { row.Location }).Select(group => new { group.Key.Location, SumNumberOfPlatforms = group.Select(row => row.NumberOfPlatforms).Sum(), SumTotalPassengers = group.Select(row => row.TotalPassengers).Sum() }).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms >= 15 AND total_passengers > 25",
    "result": "context.Stations.Where(row => row.NumberOfPlatforms >= 15 && row.TotalPassengers > 25).Select(row => new { row.Location }).Distinct().ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms >= 15",
    "result": "context.Stations.Select(row => row.Location).Except(context.Stations.Where(row => row.NumberOfPlatforms >= 15).Select(row => row.Location)).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Stations.GroupBy(row => new { row.Location }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Location }).Take(1).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , TIME , service FROM train",
    "result": "context.Trains.Select(row => new { row.Name, row.Time, row.Service }).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM train",
    "result": "context.Trains.Count();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , service FROM train ORDER BY TIME",
    "result": "context.Trains.OrderBy(row => row.Time).Select(row => new { row.Name, row.Service }).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name , count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id",
    "result": "context.TrainStation.Join(context.Stations, T1 => T1.StationId, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StationId }).Select(group => new { group.First().T2.Name, Count = group.Count() }).ToList();",
    "db_name": "train_station",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'TrainStationContext' does not contain a definition for 'TrainStation' and no accessible extension method 'TrainStation' accepting a first argument of type 'TrainStationContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.23"
  },
  {
    "query": "SELECT T2.name , T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id",
    "result": "context.TrainStation.Join(context.Stations, T1 => T1.StationId, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Join(context.Trains, joined => joined.T1.TrainId, T3 => T3.TrainId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { T2Name = row.T2.Name, T3Name = row.T3.Name }).ToList();",
    "db_name": "train_station",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'TrainStationContext' does not contain a definition for 'TrainStation' and no accessible extension method 'TrainStation' accepting a first argument of type 'TrainStationContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.20"
  },
  {
    "query": "SELECT T3.name , T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T2.location = 'London' ORDER BY T3.time DESC",
    "result": "context.TrainStation.Join(context.Stations, T1 => T1.StationId, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Join(context.Trains, joined => joined.T1.TrainId, T3 => T3.TrainId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Location == \"London\").OrderByDescending(row => row.T3.Time).Select(row => new { row.T3.Name, row.T3.Time }).ToList();",
    "db_name": "train_station",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'TrainStationContext' does not contain a definition for 'TrainStation' and no accessible extension method 'TrainStation' accepting a first argument of type 'TrainStationContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.17"
  },
  {
    "query": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.TrainStation.Join(context.Stations, T1 => T1.StationId, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StationId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name }).Take(1).ToList();",
    "db_name": "train_station",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'TrainStationContext' does not contain a definition for 'TrainStation' and no accessible extension method 'TrainStation' accepting a first argument of type 'TrainStationContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.22"
  },
  {
    "query": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id HAVING count(*) >= 2",
    "result": "context.TrainStation.Join(context.Stations, T1 => T1.StationId, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StationId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "train_station",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'TrainStationContext' does not contain a definition for 'TrainStation' and no accessible extension method 'TrainStation' accepting a first argument of type 'TrainStationContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.23"
  },
  {
    "query": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*) = 1",
    "result": "context.Stations.GroupBy(row => new { row.Location }).Where(group => group.Count() == 1).Select(group => new { group.Key.Location }).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)",
    "result": "context.Stations.Where(row => !context.TrainStation.Select(row => row.StationId).Contains(row.StationId)).Select(row => new { row.Name }).ToList();",
    "db_name": "train_station",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,51): error CS1061: 'TrainStationContext' does not contain a definition for 'TrainStation' and no accessible extension method 'TrainStation' accepting a first argument of type 'TrainStationContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.29"
  },
  {
    "query": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = \"Ananthapuri Express\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = \"Guruvayur Express\"",
    "result": "context.TrainStation.Join(context.Stations, T1 => T1.StationId, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Join(context.Trains, joined => joined.T1.TrainId, T3 => T3.TrainId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Ananthapuri Express\").Select(row => row.T2.Name).Intersect(context.TrainStation.Join(context.Stations, T1 => T1.StationId, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Join(context.Trains, joined => joined.T1.TrainId, T3 => T3.TrainId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Guruvayur Express\").Select(row => row.T2.Name)).ToList();",
    "db_name": "train_station",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,338): error CS1061: 'TrainStationContext' does not contain a definition for 'TrainStation' and no accessible extension method 'TrainStation' accepting a first argument of type 'TrainStationContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.25"
  },
  {
    "query": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id = T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id = T4.station_id WHERE t4.location = \"London\")",
    "result": "context.TrainStation.Join(context.Trains, T1 => T1.TrainId, T2 => T2.TrainId, (T1, T2) => new { T1, T2 }).Where(row => !context.TrainStation.Join(context.Stations, T3 => T3.StationId, T4 => T4.StationId, (T3, T4) => new { T3, T4 }).Where(row => row.T4.Location == \"London\").Select(row => row.T4.StationId).Contains(row.T1.StationId)).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "train_station",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,140): error CS1061: 'TrainStationContext' does not contain a definition for 'TrainStation' and no accessible extension method 'TrainStation' accepting a first argument of type 'TrainStationContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.16"
  },
  {
    "query": "SELECT name , LOCATION FROM station ORDER BY Annual_entry_exit , Annual_interchanges",
    "result": "context.Stations.OrderBy(row => row.AnnualEntryExit).ThenBy(row => row.AnnualInterchanges).Select(row => new { row.Name, row.Location }).ToList();",
    "db_name": "train_station",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
    "result": "context.AllergyTypes.Select(row => row.Allergy).Distinct().Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
    "result": "context.AllergyTypes.Select(row => row.AllergyType1).Distinct().Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT allergytype FROM Allergy_type",
    "result": "context.AllergyTypes.Select(row => new { row.AllergyType1 }).Distinct().ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT allergy , allergytype FROM Allergy_type",
    "result": "context.AllergyTypes.Select(row => new { row.Allergy, row.AllergyType1 }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = \"food\"",
    "result": "context.AllergyTypes.Where(row => row.AllergyType1 == \"food\").Select(row => new { row.Allergy }).Distinct().ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT allergytype FROM Allergy_type WHERE allergy = \"Cat\"",
    "result": "context.AllergyTypes.Where(row => row.Allergy == \"Cat\").Select(row => new { row.AllergyType1 }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype = \"animal\"",
    "result": "context.AllergyTypes.Where(row => row.AllergyType1 == \"animal\").Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT allergytype , count(*) FROM Allergy_type GROUP BY allergytype",
    "result": "context.AllergyTypes.GroupBy(row => new { row.AllergyType1 }).Select(group => new { group.Key.AllergyType1, Count = group.Count() }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
    "result": "context.AllergyTypes.GroupBy(row => new { row.AllergyType1 }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AllergyType1 }).Take(1).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
    "result": "context.AllergyTypes.GroupBy(row => new { row.AllergyType1 }).OrderBy(group => group.Count()).Select(group => new { group.Key.AllergyType1 }).Take(1).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Student",
    "result": "context.Students.Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Fname , Lname FROM Student",
    "result": "context.Students.Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT advisor) FROM Student",
    "result": "context.Students.Select(row => row.Advisor).Distinct().Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Major FROM Student",
    "result": "context.Students.Select(row => new { row.Major }).Distinct().ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT city_code FROM Student",
    "result": "context.Students.Select(row => new { row.CityCode }).Distinct().ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Fname , Lname , Age FROM Student WHERE Sex = 'F'",
    "result": "context.Students.Where(row => row.Sex == \"F\").Select(row => new { row.Fname, row.Lname, row.Age }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Student WHERE Sex = 'M'",
    "result": "context.Students.Where(row => row.Sex == \"M\").Select(row => new { row.StuId }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Student WHERE age = 18",
    "result": "context.Students.Where(row => row.Age == 18).Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Student WHERE age > 20",
    "result": "context.Students.Where(row => row.Age > 20).Select(row => new { row.StuId }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_code FROM Student WHERE LName = \"Kim\"",
    "result": "context.Students.Where(row => row.Lname == \"Kim\").Select(row => new { row.CityCode }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Advisor FROM Student WHERE StuID = 1004",
    "result": "context.Students.Where(row => row.StuId == 1004).Select(row => new { row.Advisor }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Student WHERE city_code = \"HKG\" OR city_code = \"CHI\"",
    "result": "context.Students.Where(row => row.CityCode == \"HKG\" || row.CityCode == \"CHI\").Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(age) , avg(age) , max(age) FROM Student",
    "result": "context.Students.GroupBy(row => 1).Select(group => new { MinAge = group.Select(row => row.Age).Min(), AverageAge = group.Select(row => row.Age).Average(), MaxAge = group.Select(row => row.Age).Max() }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LName FROM Student WHERE age = (SELECT min(age) FROM Student)",
    "result": "context.Students.Where(row => row.Age == context.Students.Select(row => row.Age).Min()).Select(row => new { row.Lname }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Student WHERE age = (SELECT max(age) FROM Student)",
    "result": "context.Students.Where(row => row.Age == context.Students.Select(row => row.Age).Max()).Select(row => new { row.StuId }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT major , count(*) FROM Student GROUP BY major",
    "result": "context.Students.GroupBy(row => new { row.Major }).Select(group => new { group.Key.Major, Count = group.Count() }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Students.GroupBy(row => new { row.Major }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Major }).Take(1).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT age , count(*) FROM Student GROUP BY age",
    "result": "context.Students.GroupBy(row => new { row.Age }).Select(group => new { group.Key.Age, Count = group.Count() }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(age) , sex FROM Student GROUP BY sex",
    "result": "context.Students.GroupBy(row => new { row.Sex }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), group.Key.Sex }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_code , count(*) FROM Student GROUP BY city_code",
    "result": "context.Students.GroupBy(row => new { row.CityCode }).Select(group => new { group.Key.CityCode, Count = group.Count() }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT advisor , count(*) FROM Student GROUP BY advisor",
    "result": "context.Students.GroupBy(row => new { row.Advisor }).Select(group => new { group.Key.Advisor, Count = group.Count() }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Students.GroupBy(row => new { row.Advisor }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Advisor }).Take(1).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Has_allergy WHERE Allergy = \"Cat\"",
    "result": "context.HasAllergies.Where(row => row.Allergy == \"Cat\").Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*) >= 2",
    "result": "context.HasAllergies.GroupBy(row => new { row.StuId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.StuId }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
    "result": "context.Students.Select(row => row.StuId).Except(context.HasAllergies.Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = \"F\" AND T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\"",
    "result": "context.HasAllergies.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Sex == \"F\" && row.T1.Allergy == \"Milk\" || row.T1.Allergy == \"Eggs\").Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = \"food\"",
    "result": "context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"food\").Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
    "result": "context.HasAllergies.GroupBy(row => new { row.Allergy }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Allergy }).Take(1).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy",
    "result": "context.HasAllergies.GroupBy(row => new { row.Allergy }).Select(group => new { group.Key.Allergy, Count = group.Count() }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.allergytype , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype",
    "result": "context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AllergyType1 }).Select(group => new { group.Key.AllergyType1, Count = group.Count() }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lname , age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")",
    "result": "context.Students.Where(row => context.HasAllergies.Where(row => row.Allergy == \"Milk\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value).Intersect(context.HasAllergies.Where(row => row.Allergy == \"Cat\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).Contains(row.StuId)).Select(row => new { row.Lname, row.Age }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Allergy , T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" ORDER BY T1.Allergy",
    "result": "context.AllergyTypes.Join(context.HasAllergies, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Fname == \"Lisa\").OrderBy(row => row.T1.Allergy).Select(row => new { row.T1.Allergy, row.T1.AllergyType1 }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT fname , sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")",
    "result": "context.Students.Where(row => context.HasAllergies.Where(row => row.Allergy == \"Milk\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value).Except(context.HasAllergies.Where(row => row.Allergy == \"Cat\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).Contains(row.StuId)).Select(row => new { row.Fname, row.Sex }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"animal\")",
    "result": "context.Students.Where(row => context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"food\").Where(row => row.T1.StuId.HasValue).Select(row => row.T1.StuId.Value).Intersect(context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"animal\").Where(row => row.T1.StuId.HasValue).Select(row => row.T1.StuId.Value)).Contains(row.StuId)).Select(row => row.Age).Average();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT fname , lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")",
    "result": "context.Students.Where(row => !context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"food\").Select(row => row.T1.StuId).Contains(row.StuId)).Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Student WHERE sex = \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")",
    "result": "context.Students.Where(row => row.Sex == \"M\" && context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"food\").Select(row => row.T1.StuId).Contains(row.StuId)).Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.fname , T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = \"Milk\" OR T2.Allergy = \"Cat\"",
    "result": "context.Students.Join(context.HasAllergies, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Allergy == \"Milk\" || row.T2.Allergy == \"Cat\").Select(row => new { row.T1.Fname, row.T1.CityCode }).Distinct().ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Student WHERE age > 18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" OR T2.allergytype = \"animal\")",
    "result": "context.Students.Where(row => row.Age > 18 && !context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"food\" || row.T2.AllergyType1 == \"animal\").Select(row => row.T1.StuId).Contains(row.StuId)).Count();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT fname , major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Soy\")",
    "result": "context.Students.Where(row => !context.HasAllergies.Where(row => row.Allergy == \"Soy\").Select(row => row.StuId).Contains(row.StuId)).Select(row => new { row.Fname, row.Major }).ToList();",
    "db_name": "allergy_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM election",
    "result": "context.Elections.Count();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Votes FROM election ORDER BY Votes DESC",
    "result": "context.Elections.OrderByDescending(row => row.Votes).Select(row => new { row.Votes }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Date , Vote_Percent FROM election",
    "result": "context.Elections.Select(row => new { row.Date, row.VotePercent }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(Vote_Percent) , max(Vote_Percent) FROM election",
    "result": "context.Elections.GroupBy(row => 1).Select(group => new { MinVotePercent = group.Select(row => row.VotePercent).Min(), MaxVotePercent = group.Select(row => row.VotePercent).Max() }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name , Party FROM representative",
    "result": "context.Representatives.Select(row => new { row.Name, row.Party }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM Representative WHERE Party != \"Republican\"",
    "result": "context.Representatives.Where(row => row.Party != \"Republican\").Select(row => new { row.Name }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Lifespan FROM representative WHERE State = \"New York\" OR State = \"Indiana\"",
    "result": "context.Representatives.Where(row => row.State == \"New York\" || row.State == \"Indiana\").Select(row => new { row.Lifespan }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name , T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID",
    "result": "context.Elections.Join(context.Representatives, T1 => T1.RepresentativeId, T2 => T2.RepresentativeId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name, row.T1.Date }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000",
    "result": "context.Elections.Join(context.Representatives, T1 => T1.RepresentativeId, T2 => T2.RepresentativeId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Votes > 10000).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes DESC",
    "result": "context.Elections.Join(context.Representatives, T1 => T1.RepresentativeId, T2 => T2.RepresentativeId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Votes).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes ASC LIMIT 1",
    "result": "context.Elections.Join(context.Representatives, T1 => T1.RepresentativeId, T2 => T2.RepresentativeId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T1.Votes).Select(row => new { row.T2.Party }).Take(1).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY Vote_Percent DESC",
    "result": "context.Elections.Join(context.Representatives, T1 => T1.RepresentativeId, T2 => T2.RepresentativeId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.VotePercent).Select(row => new { row.T2.Lifespan }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = \"Republican\"",
    "result": "context.Elections.Join(context.Representatives, T1 => T1.RepresentativeId, T2 => T2.RepresentativeId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Party == \"Republican\").Select(row => (double) row.T1.Votes).Average();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Party , COUNT(*) FROM representative GROUP BY Party",
    "result": "context.Representatives.GroupBy(row => new { row.Party }).Select(group => new { group.Key.Party, Count = group.Count() }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Representatives.GroupBy(row => new { row.Party }).Select(group => new { group.Key.Party, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*) >= 3",
    "result": "context.Representatives.GroupBy(row => new { row.Party }).Where(group => group.Count() >= 3).Select(group => new { group.Key.Party }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT State FROM representative GROUP BY State HAVING COUNT(*) >= 2",
    "result": "context.Representatives.GroupBy(row => new { row.State }).Where(group => group.Count() >= 2).Select(group => new { group.Key.State }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)",
    "result": "context.Representatives.Where(row => !context.Elections.Select(row => row.RepresentativeId).Contains(row.RepresentativeId)).Select(row => new { row.Name }).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Party FROM representative WHERE State = \"New York\" INTERSECT SELECT Party FROM representative WHERE State = \"Pennsylvania\"",
    "result": "context.Representatives.Where(row => row.State == \"New York\").Select(row => row.Party).Intersect(context.Representatives.Where(row => row.State == \"Pennsylvania\").Select(row => row.Party)).ToList();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT Party) FROM representative",
    "result": "context.Representatives.Select(row => row.Party).Distinct().Count();",
    "db_name": "election_representative",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM premises",
    "result": "context.Premises.Count();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT premises_type FROM premises",
    "result": "context.Premises.Select(row => new { row.PremisesType }).Distinct().ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT premises_type , premise_details FROM premises ORDER BY premises_type",
    "result": "context.Premises.OrderBy(row => row.PremisesType).Select(row => new { row.PremisesType, row.PremiseDetails }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT premises_type , count(*) FROM premises GROUP BY premises_type",
    "result": "context.Premises.GroupBy(row => new { row.PremisesType }).Select(group => new { group.Key.PremisesType, Count = group.Count() }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category",
    "result": "context.MailshotCampaigns.GroupBy(row => new { row.ProductCategory }).Select(group => new { group.Key.ProductCategory, Count = group.Count() }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_name , customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)",
    "result": "context.Customers.Where(row => !context.MailshotCustomers.Select(row => row.CustomerId).Contains(row.CustomerId)).Select(row => new { row.CustomerName, row.CustomerPhone }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_name , T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.outcome_code = 'No Response'",
    "result": "context.Customers.Join(context.MailshotCustomers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OutcomeCode == \"No Response\").Select(row => new { row.T1.CustomerName, row.T1.CustomerPhone }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code",
    "result": "context.MailshotCustomers.GroupBy(row => new { row.OutcomeCode }).Select(group => new { group.Key.OutcomeCode, Count = group.Count() }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE outcome_code = 'Order' GROUP BY T1.customer_id HAVING count(*) >= 2",
    "result": "context.MailshotCustomers.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.OutcomeCode == \"Order\").GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T2.CustomerName }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.MailshotCustomers.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.CustomerName }).Take(1).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.customer_name , T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'Order' INTERSECT SELECT T2.customer_name , T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'No Response'",
    "result": "context.MailshotCustomers.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.OutcomeCode == \"Order\").Select(row => new { row.T2.CustomerName, row.T2.PaymentMethod }).Intersect(context.MailshotCustomers.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.OutcomeCode == \"No Response\").Select(row => new { row.T2.CustomerName, row.T2.PaymentMethod })).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.premises_type , T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id",
    "result": "context.CustomerAddresses.Join(context.Premises, T1 => T1.PremiseId, T2 => T2.PremiseId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.PremisesType, row.T1.AddressTypeCode }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT address_type_code FROM customer_addresses",
    "result": "context.CustomerAddresses.Select(row => new { row.AddressTypeCode }).Distinct().ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT order_shipping_charges , customer_id FROM customer_orders WHERE order_status_code = 'Cancelled' OR order_status_code = 'Paid'",
    "result": "context.CustomerOrders.Where(row => row.OrderStatusCode == \"Cancelled\" || row.OrderStatusCode == \"Paid\").Select(row => new { row.OrderShippingCharges, row.CustomerId }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE shipping_method_code = 'FedEx' AND order_status_code = 'Paid'",
    "result": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ShippingMethodCode == \"FedEx\" && row.T2.OrderStatusCode == \"Paid\").Select(row => new { row.T1.CustomerName }).ToList();",
    "db_name": "customers_campaigns_ecommerce",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM customers",
    "result": "context.Customers.Count();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT email_address , phone_number FROM customers ORDER BY email_address , phone_number",
    "result": "context.Customers.OrderBy(row => row.EmailAddress).ThenBy(row => row.PhoneNumber).Select(row => new { row.EmailAddress, row.PhoneNumber }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT town_city FROM customers WHERE customer_type_code = \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1",
    "result": "context.Customers.Where(row => row.CustomerTypeCode == \"Good Credit Rating\").GroupBy(row => new { row.TownCity }).OrderBy(group => group.Count()).Select(group => new { group.Key.TownCity }).Take(1).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name",
    "result": "context.Products.Join(context.Complaints, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ProductName }).Select(group => new { group.Key.ProductName, Count = group.Count() }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
    "result": "context.Customers.Join(context.Complaints, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.CustomerId }).OrderBy(group => group.Count()).Select(group => new { group.First().t1.EmailAddress }).Take(1).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
    "result": "context.Products.Join(context.Complaints, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).SelectMany(s => context.Customers, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.CustomerId }).OrderBy(group => group.Count()).Select(group => new { group.First().t1.ProductName }).Distinct().Take(1).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
    "result": "context.Customers.Join(context.Complaints, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t2.DateComplaintRaised).Select(row => new { row.t1.PhoneNumber }).Take(1).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT email_address , phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
    "result": "context.Customers.Where(row => !context.Complaints.Select(row => row.CustomerId).Contains(row.CustomerId)).Select(row => new { row.EmailAddress, row.PhoneNumber }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff",
    "result": "context.Customers.Select(row => row.PhoneNumber).Union(context.Staff.Select(row => row.PhoneNumber)).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_description FROM products WHERE product_name = \"Chocolate\"",
    "result": "context.Products.Where(row => row.ProductName == \"Chocolate\").Select(row => new { row.ProductDescription }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_name , product_category_code FROM products ORDER BY product_price DESC LIMIT 1",
    "result": "context.Products.OrderByDescending(row => (double) row.ProductPrice).Select(row => new { row.ProductName, row.ProductCategoryCode }).Take(1).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
    "result": "context.Products.Where(row => !context.Complaints.Select(row => row.ProductId).Contains(row.ProductId)).Select(row => new { row.ProductPrice }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(product_price) , product_category_code FROM products GROUP BY product_category_code",
    "result": "context.Products.GroupBy(row => new { row.ProductCategoryCode }).Select(group => new { AverageProductPrice = group.Select(row => (double) row.ProductPrice).Average(), group.Key.ProductCategoryCode }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id JOIN products AS t3 ON t2.product_id = t3.product_id ORDER BY t3.product_price LIMIT 1",
    "result": "context.Staff.Join(context.Complaints, t1 => t1.StaffId, t2 => t2.StaffId, (t1, t2) => new { t1, t2 }).Join(context.Products, joined => joined.t2.ProductId, t3 => t3.ProductId, (joined, t3) => new { joined.t1, joined.t2, t3 }).OrderBy(row => (double) row.t3.ProductPrice).Select(row => new { row.t1.LastName }).Take(1).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*) > 3",
    "result": "context.Complaints.GroupBy(row => new { row.ComplaintStatusCode }).Where(group => group.Count() > 3).Select(group => new { group.Key.ComplaintStatusCode }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"",
    "result": "context.Staff.Where(row => EF.Functions.Like(row.EmailAddress, \"%wrau%\")).Select(row => new { row.LastName }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Customers.GroupBy(row => new { row.CustomerTypeCode }).Select(group => new { Count = group.Count() }).OrderByDescending(group => group.Count).Take(1);",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
    "result": "context.Staff.Join(context.Complaints, t1 => t1.StaffId, t2 => t2.StaffId, (t1, t2) => new { t1, t2 }).OrderBy(row => row.t2.DateComplaintRaised).Select(row => new { row.t1.LastName }).Take(1).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT complaint_type_code) FROM complaints",
    "result": "context.Complaints.Select(row => row.ComplaintTypeCode).Distinct().Count();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT address_line_1 , address_line_2 FROM customers WHERE email_address = \"vbogisich@example.org\"",
    "result": "context.Customers.Where(row => row.EmailAddress == \"vbogisich@example.org\").Select(row => new { row.AddressLine1, row.AddressLine2 }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT complaint_status_code , count(*) FROM complaints WHERE complaint_type_code = \"Product Failure\" GROUP BY complaint_status_code",
    "result": "context.Complaints.Where(row => row.ComplaintTypeCode == \"Product Failure\").GroupBy(row => new { row.ComplaintStatusCode }).Select(group => new { group.Key.ComplaintStatusCode, Count = group.Count() }).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5",
    "result": "context.Staff.Join(context.Complaints, t1 => t1.StaffId, t2 => t2.StaffId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.StaffId }).OrderBy(group => group.Count()).Select(group => new { group.First().t1.FirstName }).Take(5).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
    "result": "context.Customers.GroupBy(row => new { row.State }).OrderBy(group => group.Count()).Select(group => new { group.Key.State }).Take(1).ToList();",
    "db_name": "customer_complaints",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT dname FROM department ORDER BY mgr_start_date",
    "result": "context.Departments.OrderBy(row => row.MgrStartDate).Select(row => new { row.Dname }).ToList();",
    "db_name": "company_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Dependent_name FROM dependent WHERE relationship = 'Spouse'",
    "result": "context.Dependents.Where(row => row.Relationship == \"Spouse\").Select(row => new { row.DependentName }).ToList();",
    "db_name": "company_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM dependent WHERE sex = 'F'",
    "result": "context.Dependents.Where(row => row.Sex == \"F\").Count();",
    "db_name": "company_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber WHERE t2.dlocation = 'Houston'",
    "result": "context.Departments.Join(context.DeptLocations, t1 => t1.Dnumber, t2 => t2.Dnumber, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Dlocation == \"Houston\").Select(row => new { row.t1.Dname }).ToList();",
    "db_name": "company_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT fname , lname FROM employee WHERE salary > 30000",
    "result": "context.Employees.Where(row => row.Salary > 30000).Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "company_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , sex FROM employee WHERE salary < 50000 GROUP BY sex",
    "result": "context.Employees.Where(row => row.Salary < 50000).GroupBy(row => new { row.Sex }).Select(group => new { Count = group.Count(), group.Key.Sex }).ToList();",
    "db_name": "company_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT fname , lname , address FROM employee ORDER BY Bdate",
    "result": "context.Employees.OrderBy(row => row.Bdate).Select(row => new { row.Fname, row.Lname, row.Address }).ToList();",
    "db_name": "company_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Accounts",
    "result": "context.Accounts.Count();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT account_id , account_details FROM Accounts",
    "result": "context.Accounts.Select(row => new { row.AccountId, row.AccountDetails }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Statements",
    "result": "context.Statements.Count();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
    "result": "context.Statements.Select(row => new { row.StatementId, row.StatementDetails }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.statement_id , T2.statement_details , T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id",
    "result": "context.Accounts.Join(context.Statements, T1 => T1.StatementId, T2 => T2.StatementId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.StatementId, row.T2.StatementDetails, row.T1.AccountDetails }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT STATEMENT_ID , count(*) FROM Accounts GROUP BY STATEMENT_ID",
    "result": "context.Accounts.GroupBy(row => new { row.StatementId }).Select(group => new { group.Key.StatementId, Count = group.Count() }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.statement_id , T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Accounts.Join(context.Statements, T1 => T1.StatementId, T2 => T2.StatementId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StatementId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StatementId, group.First().T2.StatementDetails }).Take(1).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Documents",
    "result": "context.Documents.Count();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_code , document_name , document_description FROM Documents WHERE document_name = 'Noel CV' OR document_name = 'King Book'",
    "result": "context.Documents.Where(row => row.DocumentName == \"Noel CV\" || row.DocumentName == \"King Book\").Select(row => new { row.DocumentTypeCode, row.DocumentName, row.DocumentDescription }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_id , document_name FROM Documents",
    "result": "context.Documents.Select(row => new { row.DocumentId, row.DocumentName }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_name , document_id FROM Documents WHERE document_type_code = \"BK\"",
    "result": "context.Documents.Where(row => row.DocumentTypeCode == \"BK\").Select(row => new { row.DocumentName, row.DocumentId }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , project_id FROM Documents WHERE document_type_code = \"BK\" GROUP BY project_id",
    "result": "context.Documents.Where(row => row.DocumentTypeCode == \"BK\").GroupBy(row => new { row.ProjectId }).Select(group => new { Count = group.Count(), group.Key.ProjectId }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_name , document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'",
    "result": "context.Documents.Join(context.Projects, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ProjectDetails == \"Graph Database project\").Select(row => new { row.T1.DocumentName, row.T1.DocumentDate }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT project_id , count(*) FROM Documents GROUP BY project_id",
    "result": "context.Documents.GroupBy(row => new { row.ProjectId }).Select(group => new { group.Key.ProjectId, Count = group.Count() }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Documents.GroupBy(row => new { row.ProjectId }).OrderBy(group => group.Count()).Select(group => new { group.Key.ProjectId }).Take(1).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*) >= 2",
    "result": "context.Documents.GroupBy(row => new { row.ProjectId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProjectId }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_code , count(*) FROM Documents GROUP BY document_type_code",
    "result": "context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Select(group => new { group.Key.DocumentTypeCode, Count = group.Count() }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Documents.GroupBy(row => new { row.DocumentTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DocumentTypeCode }).Take(1).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*) < 3",
    "result": "context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Where(group => group.Count() < 3).Select(group => new { group.Key.DocumentTypeCode }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.statement_details , T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id = T2.document_id WHERE T1.statement_details = 'Private Project'",
    "result": "context.Statements.Join(context.Documents, T1 => T1.StatementId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StatementDetails == \"Private Project\").Select(row => new { row.T1.StatementDetails, row.T2.DocumentName }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_code , document_type_name , document_type_description FROM Ref_document_types",
    "result": "context.RefDocumentTypes.Select(row => new { row.DocumentTypeCode, row.DocumentTypeName, row.DocumentTypeDescription }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name = \"Film\"",
    "result": "context.RefDocumentTypes.Where(row => row.DocumentTypeName == \"Film\").Select(row => new { row.DocumentTypeDescription }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.document_type_name , T1.document_type_description , T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code",
    "result": "context.RefDocumentTypes.Join(context.Documents, T1 => T1.DocumentTypeCode, T2 => T2.DocumentTypeCode, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.DocumentTypeName, row.T1.DocumentTypeDescription, row.T2.DocumentDate }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Projects",
    "result": "context.Projects.Count();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT project_id , project_details FROM Projects",
    "result": "context.Projects.Select(row => new { row.ProjectId, row.ProjectDetails }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.project_id , T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING count(*) > 2",
    "result": "context.Projects.Join(context.Documents, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProjectId }).Where(group => group.Count() > 2).Select(group => new { group.Key.ProjectId, group.First().T1.ProjectDetails }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id WHERE T2.document_name = \"King Book\"",
    "result": "context.Projects.Join(context.Documents, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == \"King Book\").Select(row => new { row.T1.ProjectDetails }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Ref_budget_codes",
    "result": "context.RefBudgetCodes.Count();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT budget_type_code , budget_type_description FROM Ref_budget_codes",
    "result": "context.RefBudgetCodes.Select(row => new { row.BudgetTypeCode, row.BudgetTypeDescription }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code = \"ORG\"",
    "result": "context.RefBudgetCodes.Where(row => row.BudgetTypeCode == \"ORG\").Select(row => new { row.BudgetTypeDescription }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Documents_with_expenses",
    "result": "context.DocumentsWithExpenses.Count();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code = 'SF'",
    "result": "context.DocumentsWithExpenses.Where(row => row.BudgetTypeCode == \"SF\").Select(row => new { row.DocumentId }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.budget_type_code , T2.budget_type_description , T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code",
    "result": "context.DocumentsWithExpenses.Join(context.RefBudgetCodes, T1 => T1.BudgetTypeCode, T2 => T2.BudgetTypeCode, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.BudgetTypeCode, row.T2.BudgetTypeDescription, row.T1.DocumentId }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE T2.budget_type_Description = \"Government\"",
    "result": "context.DocumentsWithExpenses.Join(context.RefBudgetCodes, T1 => T1.BudgetTypeCode, T2 => T2.BudgetTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeDescription == \"Government\").Select(row => new { row.T1.DocumentId }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT budget_type_code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
    "result": "context.DocumentsWithExpenses.GroupBy(row => new { row.BudgetTypeCode }).Select(group => new { group.Key.BudgetTypeCode, Count = group.Count() }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.DocumentsWithExpenses.GroupBy(row => new { row.BudgetTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BudgetTypeCode }).Take(1).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses",
    "result": "context.Documents.Select(row => row.DocumentId).Except(context.DocumentsWithExpenses.Select(row => row.DocumentId)).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_id FROM Documents WHERE document_type_code = \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
    "result": "context.Documents.Where(row => row.DocumentTypeCode == \"CV\").Select(row => row.DocumentId).Except(context.DocumentsWithExpenses.Select(row => row.DocumentId)).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name LIKE '%s%'",
    "result": "context.Documents.Join(context.DocumentsWithExpenses, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.DocumentName, \"%s%\")).Select(row => new { row.T1.DocumentId }).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
    "result": "context.Documents.Where(row => !context.DocumentsWithExpenses.Select(row => row.DocumentId).Contains(row.DocumentId)).Count();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'SF'",
    "result": "context.Documents.Join(context.DocumentsWithExpenses, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeCode == \"GV\").Select(row => row.T1.DocumentDate).Intersect(context.Documents.Join(context.DocumentsWithExpenses, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeCode == \"SF\").Select(row => row.T1.DocumentDate)).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
    "result": "new List<string> { context.Accounts.Select(row => row.AccountDetails.ToString()).Max() }.Union(context.Accounts.Where(row => EF.Functions.Like(row.AccountDetails.ToString(), \"%5%\")).Where(row => row.AccountDetails.HasValue).Select(row => row.AccountDetails.Value)).ToList();",
    "db_name": "cre_Docs_and_Epenses",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,12): error CS1929: 'List<string>' does not contain a definition for 'Union' and the best extension method overload 'ParallelEnumerable.Union<decimal>(ParallelQuery<decimal>, IEnumerable<decimal>)' requires a receiver of type 'System.Linq.ParallelQuery<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    148 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.32"
  },
  {
    "query": "SELECT customer_details FROM customers ORDER BY customer_details",
    "result": "context.Customers.OrderBy(row => row.CustomerDetails).Select(row => new { row.CustomerDetails }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = \"Dayana Robel\"",
    "result": "context.Policies.Join(context.Customers, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CustomerDetails == \"Dayana Robel\").Select(row => new { row.t1.PolicyTypeCode }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Policies.GroupBy(row => new { row.PolicyTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PolicyTypeCode }).Take(1).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*) > 2",
    "result": "context.Policies.GroupBy(row => new { row.PolicyTypeCode }).Where(group => group.Count() > 2).Select(group => new { group.Key.PolicyTypeCode }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(amount_piad) , avg(amount_piad) FROM claim_headers",
    "result": "context.ClaimHeaders.GroupBy(row => 1).Select(group => new { SumAmountPiad = group.Select(row => row.AmountPiad).Sum(), AverageAmountPiad = group.Select(row => row.AmountPiad).Average() }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 7314,68, 1: 487,6453333333333}]\", linq_results: \"[{0: 7314, 1: 487,6453333333333}]\" }"
  },
  {
    "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
    "result": "context.ClaimHeaders.Join(context.ClaimsDocuments, t1 => t1.ClaimHeaderId, t2 => t2.ClaimId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CreatedDate == context.ClaimsDocuments.OrderBy(row => row.CreatedDate).Select(row => row.CreatedDate).Take(1).First()).Select(row => (double) row.t1.AmountClaimed).Sum();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_claimed = (SELECT max(amount_claimed) FROM claim_headers)",
    "result": "context.ClaimHeaders.Join(context.Policies, t1 => t1.PolicyId, t2 => t2.PolicyId, (t1, t2) => new { t1, t2 }).Join(context.Customers, joined => joined.t2.CustomerId, t3 => t3.CustomerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.AmountClaimed == context.ClaimHeaders.Select(row => (double) row.AmountClaimed).Max()).Select(row => new { row.t3.CustomerDetails }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,262): error CS0019: Operator '==' cannot be applied to operands of type 'decimal?' and 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.71"
  },
  {
    "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = (SELECT min(amount_piad) FROM claim_headers)",
    "result": "context.ClaimHeaders.Join(context.Policies, t1 => t1.PolicyId, t2 => t2.PolicyId, (t1, t2) => new { t1, t2 }).Join(context.Customers, joined => joined.t2.CustomerId, t3 => t3.CustomerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.AmountPiad == context.ClaimHeaders.Select(row => row.AmountPiad).Min()).Select(row => new { row.t3.CustomerDetails }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
    "result": "context.Customers.Select(row => row.CustomerDetails).Except(context.Policies.Join(context.Customers, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Select(row => row.t2.CustomerDetails)).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM claims_processing_stages",
    "result": "context.ClaimsProcessingStages.Count();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.ClaimsProcessings.Join(context.ClaimsProcessingStages, t1 => t1.ClaimStageId, t2 => t2.ClaimStageId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ClaimStageId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t2.ClaimStatusName }).Take(1).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
    "result": "context.Customers.Where(row => EF.Functions.Like(row.CustomerDetails, \"%Diana%\")).Select(row => new { row.CustomerDetails }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\"",
    "result": "context.Policies.Join(context.Customers, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.PolicyTypeCode == \"Deputy\").Select(row => new { row.t2.CustomerDetails }).Distinct().ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\" OR t1.policy_type_code = \"Uniform\"",
    "result": "context.Policies.Join(context.Customers, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.PolicyTypeCode == \"Deputy\" || row.t1.PolicyTypeCode == \"Uniform\").Select(row => new { row.t2.CustomerDetails }).Distinct().ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff",
    "result": "context.Customers.Select(row => row.CustomerDetails).Union(context.Staff.Select(row => row.StaffDetails)).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT policy_type_code , count(*) FROM policies GROUP BY policy_type_code",
    "result": "context.Policies.GroupBy(row => new { row.PolicyTypeCode }).Select(group => new { group.Key.PolicyTypeCode, Count = group.Count() }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Policies.Join(context.Customers, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.CustomerDetails }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CustomerDetails }).Take(1).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name = \"Open\"",
    "result": "context.ClaimsProcessingStages.Where(row => row.ClaimStatusName == \"Open\").Select(row => new { row.ClaimStatusDescription }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
    "result": "context.ClaimsProcessings.Select(row => row.ClaimOutcomeCode).Distinct().Count();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.start_date = (SELECT max(start_date) FROM policies)",
    "result": "context.Policies.Join(context.Customers, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.StartDate == context.Policies.Select(row => row.StartDate).Max()).Select(row => new { row.t2.CustomerDetails }).ToList();",
    "db_name": "insurance_and_eClaims",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM county_public_safety",
    "result": "context.CountyPublicSafeties.Count();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
    "result": "context.CountyPublicSafeties.OrderByDescending(row => row.Population).Select(row => new { row.Name }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"",
    "result": "context.CountyPublicSafeties.Where(row => row.Location != \"East\").Select(row => new { row.PoliceForce }).Distinct().ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(Crime_rate) , max(Crime_rate) FROM county_public_safety",
    "result": "context.CountyPublicSafeties.GroupBy(row => 1).Select(group => new { MinCrimeRate = group.Select(row => row.CrimeRate).Min(), MaxCrimeRate = group.Select(row => row.CrimeRate).Max() }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC",
    "result": "context.CountyPublicSafeties.OrderBy(row => row.PoliceOfficers).Select(row => new { row.CrimeRate }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM city ORDER BY Name ASC",
    "result": "context.Cities.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Hispanic FROM city WHERE Black > 10",
    "result": "context.Cities.Where(row => row.Black > 10).Select(row => new { row.Hispanic }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
    "result": "context.CountyPublicSafeties.OrderByDescending(row => row.Population).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM city ORDER BY White DESC LIMIT 5",
    "result": "context.Cities.OrderByDescending(row => row.White).Select(row => new { row.Name }).Take(5).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
    "result": "context.Cities.Join(context.CountyPublicSafeties, T1 => T1.CountyId, T2 => T2.CountyId, (T1, T2) => new { T1, T2 }).Select(row => new { T1Name = row.T1.Name, T2Name = row.T2.Name }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
    "result": "context.Cities.Join(context.CountyPublicSafeties, T1 => T1.CountyId, T2 => T2.CountyId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.White, row.T2.CrimeRate }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM city WHERE county_ID = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
    "result": "context.Cities.Where(row => row.CountyId == context.CountyPublicSafeties.OrderByDescending(row => row.PoliceOfficers).Select(row => row.CountyId).Take(1).First()).Select(row => new { row.Name }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)",
    "result": "context.Cities.Where(row => row.CountyId.HasValue && context.CountyPublicSafeties.Where(row => row.Population > 20000).Select(row => row.CountyId).Contains(row.CountyId.Value)).Count();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90",
    "result": "context.Cities.Join(context.CountyPublicSafeties, T1 => T1.CountyId, T2 => T2.CountyId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.White > 90).Select(row => new { row.T2.CrimeRate }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "result": "context.CountyPublicSafeties.GroupBy(row => new { row.PoliceForce }).Select(group => new { group.Key.PoliceForce, Count = group.Count() }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.CountyPublicSafeties.GroupBy(row => new { row.Location }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Location }).Take(1).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)",
    "result": "context.CountyPublicSafeties.Where(row => !context.Cities.Select(row => row.CountyId).Contains(row.CountyId)).Select(row => new { row.Name }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Police_force FROM county_public_safety WHERE LOCATION = \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION = \"West\"",
    "result": "context.CountyPublicSafeties.Where(row => row.Location == \"East\").Select(row => row.PoliceForce).Intersect(context.CountyPublicSafeties.Where(row => row.Location == \"West\").Select(row => row.PoliceForce)).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)",
    "result": "context.Cities.Where(row => row.CountyId.HasValue && context.CountyPublicSafeties.Where(row => row.CrimeRate < 100).Select(row => row.CountyId).Contains(row.CountyId.Value)).Select(row => new { row.Name }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
    "result": "context.CountyPublicSafeties.OrderByDescending(row => row.Population).Select(row => new { row.CaseBurden }).ToList();",
    "db_name": "county_public_safety",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name_full , T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;",
    "result": "context.Colleges.Join(context.PlayerColleges, T1 => T1.CollegeId, T2 => T2.CollegeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CollegeId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.NameFull, group.Key.CollegeId }).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'",
    "result": "context.Salaries.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\").Select(row => row.T1.Salary1).Average();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name_first , name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE YEAR = 1998",
    "result": "context.Players.Join(context.AllStars, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 1998).Select(row => new { row.T1.NameFirst, row.T1.NameLast }).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name_first , T1.name_last , T1.player_id , count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;",
    "result": "context.Players.Join(context.AllStars, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PlayerId }).Select(group => new { group.First().T1.NameFirst, group.First().T1.NameLast, group.Key.PlayerId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid;",
    "result": "context.HallOfFames.GroupBy(row => new { row.Yearid }).Select(group => new { group.Key.Yearid, Count = group.Count() }).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT YEAR , avg(attendance) FROM home_game GROUP BY YEAR;",
    "result": "context.HomeGames.GroupBy(row => new { row.Year }).Select(group => new { group.Key.Year, AverageAttendance = group.Select(row => row.Attendance).Average() }).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.team_id , T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T1.year = 2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;",
    "result": "context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2014).GroupBy(row => new { row.T1.TeamId }).OrderByDescending(group => group.Average(row => row.T1.Attendance)).Select(group => new { group.Key.TeamId, group.First().T2.Rank }).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;",
    "result": "context.Players.Join(context.ManagerAwards, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.PlayerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.NameFirst, group.First().T1.NameLast, group.Key.PlayerId }).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM park WHERE state = 'NY';",
    "result": "context.Parks.Where(row => row.State == \"NY\").Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;",
    "result": "context.Players.Join(context.PlayerAwards, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PlayerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.NameFirst, group.First().T1.NameLast, group.Key.PlayerId }).Take(3).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;",
    "result": "context.Players.GroupBy(row => new { row.BirthCountry }).OrderBy(group => group.Count()).Select(group => new { group.Key.BirthCountry }).Take(3).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name_first , name_last FROM player WHERE death_year = '';",
    "result": "context.Players.Where(row => row.DeathYear == \"\").Select(row => new { row.NameFirst, row.NameLast }).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats = 'R';",
    "result": "context.Players.Where(row => row.BirthCountry == \"USA\" && row.Bats == \"R\").Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T3.college_id = T2.college_id WHERE T3.name_full = 'Yale University';",
    "result": "context.Players.Join(context.PlayerColleges, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Join(context.Colleges, joined => joined.T2.CollegeId, T3 => T3.CollegeId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.NameFull == \"Yale University\").Select(row => row.T1.Height).ToList().Select(value => double.Parse(value)).ToList().Average();",
    "db_name": "baseball_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT T1.name , T1.team_id , max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id;",
    "result": "context.Teams.Join(context.Salaries, T1 => T1.TeamId, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TeamId }).Select(group => new { group.OrderByDescending(row => row.T2.Salary1).First().T1.Name, group.Key.TeamId, MaxSalary1 = group.Select(row => row.T2.Salary1).Max() }).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;",
    "result": "context.Teams.Join(context.Salaries, T1 => T1.TeamId, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TeamId }).OrderBy(group => group.Average(row => row.T2.Salary1)).Select(group => new { group.First().T1.Name, group.Key.TeamId }).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1961",
    "result": "context.Players.SelectMany(s => context.PlayerAwards, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 1960).Select(row => new { row.T1.NameFirst, row.T1.NameLast }).Intersect(context.Players.SelectMany(s => context.PlayerAwards, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 1961).Select(row => new { row.T1.NameFirst, row.T1.NameLast })).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name_first , name_last FROM player WHERE weight > 220 OR height < 75",
    "result": "context.Players.Where(row => row.Weight > \"220\" || row.Height < \"75\").Select(row => new { row.NameFirst, row.NameLast }).ToList();",
    "db_name": "baseball_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,63): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.81"
  },
  {
    "query": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings';",
    "result": "context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\").Select(row => row.T1.Wins).Max();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2009;",
    "result": "context.Postseasons.Join(context.Teams, T1 => T1.TeamIdLoser, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\" && row.T1.Year == 2009).Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name , T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",
    "result": "context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2008).GroupBy(row => new { row.T1.TeamIdWinner }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name, group.Key.TeamIdWinner }).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year",
    "result": "context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\").GroupBy(row => new { row.T1.Year }).Select(group => new { Count = group.Count(), group.Key.Year }).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' );",
    "result": "context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\").Select(row => new { T1Year = rowT1..Year, rowT1..Round, rowT1..TeamIdWinner, rowT1..LeagueIdWinner, rowT1..TeamIdLoser, rowT1..LeagueIdLoser, rowT1..Wins, rowT1..Losses, rowT1..Ties, T2Year = rowT2..Year, rowT2..LeagueId, rowT2..TeamId, rowT2..FranchiseId, rowT2..DivId, rowT2..Rank, rowT2..G, rowT2..Ghome, rowT2..W, rowT2..L, rowT2..DivWin, rowT2..WcWin, rowT2..LgWin, rowT2..WsWin, rowT2..R, rowT2..Ab, rowT2..H, rowT2..Double, rowT2..Triple, rowT2..Hr, rowT2..Bb, rowT2..So, rowT2..Sb, rowT2..Cs, rowT2..Hbp, rowT2..Sf, rowT2..Ra, rowT2..Er, rowT2..Era, rowT2..Cg, rowT2..Sho, rowT2..Sv, rowT2..Ipouts, rowT2..Ha, rowT2..Hra, rowT2..Bba, rowT2..Soa, rowT2..E, rowT2..Dp, rowT2..Fp, rowT2..Name, rowT2..Park, rowT2..Attendance, rowT2..Bpf, rowT2..Ppf, rowT2..TeamIdBr, rowT2..TeamIdLahman45, rowT2..TeamIdRetro }).Union(context.Postseasons.Join(context.Teams, T1 => T1.TeamIdLoser, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\").Select(row => new { T1Year = rowT1..Year, rowT1..Round, rowT1..TeamIdWinner, rowT1..LeagueIdWinner, rowT1..TeamIdLoser, rowT1..LeagueIdLoser, rowT1..Wins, rowT1..Losses, rowT1..Ties, T2Year = rowT2..Year, rowT2..LeagueId, rowT2..TeamId, rowT2..FranchiseId, rowT2..DivId, rowT2..Rank, rowT2..G, rowT2..Ghome, rowT2..W, rowT2..L, rowT2..DivWin, rowT2..WcWin, rowT2..LgWin, rowT2..WsWin, rowT2..R, rowT2..Ab, rowT2..H, rowT2..Double, rowT2..Triple, rowT2..Hr, rowT2..Bb, rowT2..So, rowT2..Sb, rowT2..Cs, rowT2..Hbp, rowT2..Sf, rowT2..Ra, rowT2..Er, rowT2..Era, rowT2..Cg, rowT2..Sho, rowT2..Sv, rowT2..Ipouts, rowT2..Ha, rowT2..Hra, rowT2..Bba, rowT2..Soa, rowT2..E, rowT2..Dp, rowT2..Fp, rowT2..Name, rowT2..Park, rowT2..Attendance, rowT2..Bpf, rowT2..Ppf, rowT2..TeamIdBr, rowT2..TeamIdLahman45, rowT2..TeamIdRetro })).Count();",
    "db_name": "baseball_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,1960): error CS0103: The name 'TeamIdRetro' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    338 Error(s)\n\nTime Elapsed 00:00:01.40"
  },
  {
    "query": "SELECT count(*) FROM postseason WHERE YEAR = 1885 AND ties = 1;",
    "result": "context.Postseasons.Where(row => row.Year == 1885 && row.Ties == 1).Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2010",
    "result": "context.Salaries.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\" && row.T1.Year == 2010).Select(row => row.T1.Salary1).Sum();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2000",
    "result": "context.Salaries.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\" && row.T1.Year == 2000).Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT salary FROM salary WHERE YEAR = 2001 ORDER BY salary DESC LIMIT 3;",
    "result": "context.Salaries.Where(row => row.Year == 2001).OrderByDescending(row => row.Salary1).Select(row => new { row.Salary1 }).Take(3).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT salary FROM salary WHERE YEAR = 2010 UNION SELECT salary FROM salary WHERE YEAR = 2001",
    "result": "context.Salaries.Where(row => row.Year == 2010).Where(row => row.Salary1.HasValue).Select(row => row.Salary1.Value).Union(context.Salaries.Where(row => row.Year == 2001).Where(row => row.Salary1.HasValue).Select(row => row.Salary1.Value)).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;",
    "result": "context.HallOfFames.GroupBy(row => new { row.Yearid }).OrderBy(group => group.Count()).Select(group => new { group.Key.Yearid }).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM park WHERE city = 'Atlanta';",
    "result": "context.Parks.Where(row => row.City == \"Atlanta\").Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';",
    "result": "context.HomeGames.Join(context.Parks, T1 => T1.ParkId, T2 => T2.ParkId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 1907 && row.T2.ParkName == \"Columbia Park\").Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2000 AND T2.city = 'Atlanta';",
    "result": "context.HomeGames.Join(context.Parks, T1 => T1.ParkId, T2 => T2.ParkId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2000 && row.T2.City == \"Atlanta\").Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;",
    "result": "context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\" && row.T1.Year >= 2000 && row.T1.Year <= 2010).Select(row => row.T1.Attendance).Sum();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = 'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;",
    "result": "context.Salaries.Join(context.Players, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.NameFirst == \"Len\" && row.T2.NameLast == \"Barker\" && row.T1.Year >= 1985 && row.T1.Year <= 1990).Select(row => row.T1.Salary1).Sum();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
    "result": "context.Salaries.Join(context.Players, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Join(context.Teams, joined => joined.T1.TeamId, T3 => T3.TeamIdBr, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Year == 2005 && row.T3.Name == \"Washington Nationals\").Select(row => new { row.T2.NameFirst, row.T2.NameLast }).Intersect(context.Salaries.Join(context.Players, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Join(context.Teams, joined => joined.T1.TeamId, T3 => T3.TeamIdBr, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Year == 2007 && row.T3.Name == \"Washington Nationals\").Select(row => new { row.T2.NameFirst, row.T2.NameLast })).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
    "result": "context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\" && row.T1.Year >= 1990 && row.T1.Year <= 2000).Select(row => row.T1.Games).Sum();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;",
    "result": "context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 1980).OrderBy(row => row.T1.Attendance).Select(row => new { row.T2.Name }).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state FROM park GROUP BY state HAVING count(*) > 2;",
    "result": "context.Parks.GroupBy(row => new { row.State }).Where(group => group.Count() > 2).Select(group => new { group.Key.State }).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM team_franchise WHERE active = 'Y';",
    "result": "context.TeamFranchises.Where(row => row.Active == \"Y\").Count();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
    "result": "context.Parks.GroupBy(row => new { row.City }).Where(group => group.Count() >= 2 && group.Count() <= 4).Select(group => new { group.Key.City }).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;",
    "result": "context.HomeGames.Join(context.Parks, T1 => T1.ParkId, T2 => T2.ParkId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2008).OrderByDescending(row => row.T1.Attendance).Select(row => new { row.T2.ParkName }).Take(1).ToList();",
    "db_name": "baseball_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT release_year FROM movie WHERE title = \"The Imitation Game\";",
    "result": "context.Movies.Where(row => row.Title == \"The Imitation Game\").Select(row => new { row.ReleaseYear }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT birth_year FROM actor WHERE name = \"Benedict Cumberbatch\";",
    "result": "context.Actors.Where(row => row.Name == \"Benedict Cumberbatch\").Select(row => new { row.BirthYear }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT nationality FROM actor WHERE name = \"Christoph Waltz\";",
    "result": "context.Actors.Where(row => row.Name == \"Christoph Waltz\").Select(row => new { row.Nationality }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title FROM movie WHERE release_year = 2015;",
    "result": "context.Movies.Where(row => row.ReleaseYear == 2015).Select(row => new { row.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM actor WHERE birth_city = \"Tehran\";",
    "result": "context.Actors.Where(row => row.BirthCity == \"Tehran\").Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM actor WHERE nationality = \"Afghanistan\";",
    "result": "context.Actors.Where(row => row.Nationality == \"Afghanistan\").Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM actor WHERE birth_year = 1984;",
    "result": "context.Actors.Where(row => row.BirthYear == 1984).Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT birth_year FROM actor WHERE name = \"actor_name0\";",
    "result": "context.Actors.Where(row => row.Name == \"actor_name0\").Select(row => new { row.BirthYear }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT birth_city FROM director WHERE name = \"director_name0\";",
    "result": "context.Directors.Where(row => row.Name == \"director_name0\").Select(row => new { row.BirthCity }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT nationality FROM director WHERE name = \"director_name0\";",
    "result": "context.Directors.Where(row => row.Name == \"director_name0\").Select(row => new { row.Nationality }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT budget FROM movie WHERE title = \"Finding Nemo\";",
    "result": "context.Movies.Where(row => row.Title == \"Finding Nemo\").Select(row => new { row.Budget }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Steven Spielberg\" AND t3.release_year > 2006;",
    "result": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Steven Spielberg\" && row.t3.ReleaseYear > 2006).Select(row => new { row.t3.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.title = \"James Bond\";",
    "result": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.Title == \"James Bond\").Select(row => new { row.t2.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t2.role = \"Alan Turing\" AND t3.title = \"The Imitation Game\";",
    "result": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Role == \"Alan Turing\" && row.t3.Title == \"The Imitation Game\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "imdb",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,227): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.97"
  },
  {
    "query": "SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.title = \"Jurassic Park\";",
    "result": "context.Genres.Join(context.Classifications, t2 => t2.Gid, t1 => t1.Gid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.Title == \"Jurassic Park\").Select(row => new { row.t2.Genre1 }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.release_year = 2015 AND t3.title = \"Joy\";",
    "result": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.ReleaseYear == 2015 && row.t3.Title == \"Joy\").Select(row => new { row.t2.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid = t1.mid JOIN writer AS t2 ON t3.wid = t2.wid WHERE t2.name = \"Matt Damon\";",
    "result": "context.WrittenBies.Join(context.Movies, t3 => t3.Msid, t1 => t1.Mid, (t3, t1) => new { t3, t1 }).Join(context.Writers, joined => joined.t3.Wid, t2 => t2.Wid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t2.Name == \"Matt Damon\").Select(row => new { row.t1.Title }).ToList();",
    "db_name": "imdb",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,234): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.76"
  },
  {
    "query": "SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid = t3.msid JOIN producer AS t1 ON t1.pid = t3.pid JOIN written_by AS t5 ON t5.msid = t2.mid JOIN writer AS t4 ON t5.wid = t4.wid WHERE t1.name = \"Woody Allen\" AND t4.name = \"Woody Allen\";",
    "result": "context.Movies.Join(context.MadeBies, t2 => t2.Mid, t3 => t3.Msid, (t2, t3) => new { t2, t3 }).Join(context.Producers, joined => joined.t3.Pid, t1 => t1.Pid, (joined, t1) => new { joined.t2, joined.t3, t1 }).Join(context.WrittenBies, joined => joined.t2.Mid, t5 => t5.Msid, (joined, t5) => new { joined.t2, joined.t3, joined.t1, t5 }).Join(context.Writers, joined => joined.t5.Wid, t4 => t4.Wid, (joined, t4) => new { joined.t2, joined.t3, joined.t1, joined.t5, t4 }).Where(row => row.t1.Name == \"Woody Allen\" && row.t4.Name == \"Woody Allen\").Select(row => new { row.t2.Title }).ToList();",
    "db_name": "imdb",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,525): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.64"
  },
  {
    "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Robin Wright\";",
    "result": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.Movies, joined => joined.t3.Msid, t2 => t2.Mid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Name == \"Robin Wright\").Select(row => new { row.t2.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT budget FROM movie WHERE release_year = 2007 AND title = \"Juno\";",
    "result": "context.Movies.Where(row => row.ReleaseYear == 2007 && row.Title == \"Juno\").Select(row => new { row.Budget }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.genre = \"Sci-Fi\" AND t3.release_year = 2010;",
    "result": "context.Genres.Join(context.Classifications, t2 => t2.Gid, t1 => t1.Gid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Genre1 == \"Sci-Fi\" && row.t3.ReleaseYear == 2010).Select(row => new { row.t3.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM actor WHERE birth_city = \"Austin\" AND birth_year > 1980;",
    "result": "context.Actors.Where(row => row.BirthCity == \"Austin\" && row.BirthYear > 1980).Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.birth_city = \"Los Angeles\";",
    "result": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.BirthCity == \"Los Angeles\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM actor WHERE birth_city = \"New York City\" AND birth_year = 1984;",
    "result": "context.Actors.Where(row => row.BirthCity == \"New York City\" && row.BirthYear == 1984).Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid = t1.id JOIN movie AS t3 ON t2.msid = t3.mid WHERE t1.keyword = \"nuclear weapons\";",
    "result": "context.Tags.Join(context.Keywords, t2 => t2.Kid, t1 => t1.Id, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Keyword1 == \"nuclear weapons\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Alfred Hitchcock\";",
    "result": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Alfred Hitchcock\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN directed_by AS t2 ON t4.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t1.name = \"Taraneh Alidoosti\" AND t3.name = \"Asghar Farhadi\";",
    "result": "context.Casts.Join(context.Actors, t5 => t5.Aid, t1 => t1.Aid, (t5, t1) => new { t5, t1 }).Join(context.Movies, joined => joined.t5.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t5, joined.t1, t4 }).Join(context.DirectedBies, joined => joined.t4.Mid, t2 => t2.Msid, (joined, t2) => new { joined.t5, joined.t1, joined.t4, t2 }).Join(context.Directors, joined => joined.t2.Did, t3 => t3.Did, (joined, t3) => new { joined.t5, joined.t1, joined.t4, joined.t2, t3 }).Where(row => row.t1.Name == \"Taraneh Alidoosti\" && row.t3.Name == \"Asghar Farhadi\").Select(row => new { row.t4.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid = t3.pid JOIN tv_series AS t2 ON t2.sid = t3.msid WHERE t1.name = \"Shonda Rhimes\";",
    "result": "context.Producers.Join(context.MadeBies, t1 => t1.Pid, t3 => t3.Pid, (t1, t3) => new { t1, t3 }).Join(context.TvSeries, joined => joined.t3.Msid, t2 => t2.Sid, (joined, t2) => new { joined.t1, joined.t3, t2 }).Where(row => row.t1.Name == \"Shonda Rhimes\").Select(row => new { row.t2.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN tv_series AS t2 ON t2.sid = t3.msid WHERE t3.role = \"Olivia Pope\" AND t2.title = \"Scandal\";",
    "result": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.TvSeries, joined => joined.t3.Msid, t2 => t2.Sid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t3.Role == \"Olivia Pope\" && row.t2.Title == \"Scandal\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "imdb",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,229): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.71"
  },
  {
    "query": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid = t1.mid JOIN writer AS t2 ON t3.wid = t2.wid WHERE t1.title = \"The Truman Show\";",
    "result": "context.WrittenBies.Join(context.Movies, t3 => t3.Msid, t1 => t1.Mid, (t3, t1) => new { t3, t1 }).Join(context.Writers, joined => joined.t3.Wid, t2 => t2.Wid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Title == \"The Truman Show\").Select(row => new { row.t2.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN tv_series AS t2 ON t2.sid = t3.msid WHERE t1.name = \"Scott Foley\";",
    "result": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.TvSeries, joined => joined.t3.Msid, t2 => t2.Sid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Name == \"Scott Foley\").Select(row => new { row.t2.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN directed_by AS t2 ON t5.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t1.name = \"Kate Winslet\";",
    "result": "context.Casts.Join(context.Actors, t4 => t4.Aid, t1 => t1.Aid, (t4, t1) => new { t4, t1 }).Join(context.Movies, joined => joined.t4.Msid, t5 => t5.Mid, (joined, t5) => new { joined.t4, joined.t1, t5 }).Join(context.DirectedBies, joined => joined.t5.Mid, t2 => t2.Msid, (joined, t2) => new { joined.t4, joined.t1, joined.t5, t2 }).Join(context.Directors, joined => joined.t2.Did, t3 => t3.Did, (joined, t3) => new { joined.t4, joined.t1, joined.t5, joined.t2, t3 }).Where(row => row.t1.Name == \"Kate Winslet\").Select(row => new { row.t3.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid = t2.aid JOIN movie AS t5 ON t5.mid = t3.msid JOIN made_by AS t4 ON t5.mid = t4.msid JOIN producer AS t1 ON t1.pid = t4.pid WHERE t2.name = \"Kate Winslet\";",
    "result": "context.Casts.Join(context.Actors, t3 => t3.Aid, t2 => t2.Aid, (t3, t2) => new { t3, t2 }).Join(context.Movies, joined => joined.t3.Msid, t5 => t5.Mid, (joined, t5) => new { joined.t3, joined.t2, t5 }).Join(context.MadeBies, joined => joined.t5.Mid, t4 => t4.Msid, (joined, t4) => new { joined.t3, joined.t2, joined.t5, t4 }).Join(context.Producers, joined => joined.t4.Pid, t1 => t1.Pid, (joined, t1) => new { joined.t3, joined.t2, joined.t5, joined.t4, t1 }).Where(row => row.t2.Name == \"Kate Winslet\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN tv_series AS t3 ON t3.sid = t1.msid WHERE t3.release_year = 2013 AND t3.title = \"House of Cards\";",
    "result": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.TvSeries, joined => joined.t1.Msid, t3 => t3.Sid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.ReleaseYear == 2013 && row.t3.Title == \"House of Cards\").Select(row => new { row.t2.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM actor WHERE birth_city = \"Austin\" AND gender = \"female\";",
    "result": "context.Actors.Where(row => row.BirthCity == \"Austin\" && row.Gender == \"female\").Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM actor WHERE birth_year > 1980 AND nationality = \"Italy\";",
    "result": "context.Actors.Where(row => row.BirthYear > 1980 && row.Nationality == \"Italy\").Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM actor WHERE birth_city = \"New York City\" AND birth_year > 1980 AND gender = \"female\";",
    "result": "context.Actors.Where(row => row.BirthCity == \"New York City\" && row.BirthYear > 1980 && row.Gender == \"female\").Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t1.gender = \"female\" AND t3.title = \"Saving Private Ryan\";",
    "result": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Gender == \"female\" && row.t3.Title == \"Saving Private Ryan\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM director WHERE nationality = \"Afghanistan\";",
    "result": "context.Directors.Where(row => row.Nationality == \"Afghanistan\").Select(row => new { row.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t3.title = \"Camp X-Ray\";",
    "result": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.Title == \"Camp X-Ray\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t1.nationality = \"Canada\" AND t3.title = \"James Bond\";",
    "result": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Nationality == \"Canada\" && row.t3.Title == \"James Bond\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Rowan Atkinson\" AND t3.role = \"Mr. Bean\";",
    "result": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.Movies, joined => joined.t3.Msid, t2 => t2.Mid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Name == \"Rowan Atkinson\" && row.t3.Role == \"Mr. Bean\").Select(row => new { row.t2.Title }).ToList();",
    "db_name": "imdb",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,262): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.76"
  },
  {
    "query": "SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.title = \"The Past\";",
    "result": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.Title == \"The Past\").Select(row => new { row.t2.BirthCity }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid WHERE t2.role = \"Mr. Bean\";",
    "result": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Role == \"Mr. Bean\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "imdb",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,116): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.71"
  },
  {
    "query": "SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN classification AS t1 ON t4.mid = t1.msid JOIN genre AS t3 ON t3.gid = t1.gid WHERE t5.name = \"Asghar Farhadi\";",
    "result": "context.Directors.Join(context.DirectedBies, t5 => t5.Did, t2 => t2.Did, (t5, t2) => new { t5, t2 }).Join(context.Movies, joined => joined.t2.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t5, joined.t2, t4 }).Join(context.Classifications, joined => joined.t4.Mid, t1 => t1.Msid, (joined, t1) => new { joined.t5, joined.t2, joined.t4, t1 }).Join(context.Genres, joined => joined.t1.Gid, t3 => t3.Gid, (joined, t3) => new { joined.t5, joined.t2, joined.t4, joined.t1, t3 }).Where(row => row.t5.Name == \"Asghar Farhadi\").Select(row => new { row.t3.Genre1 }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid = t2.msid WHERE t2.role = \"Daffy Duck\";",
    "result": "context.Movies.Join(context.Casts, t1 => t1.Mid, t2 => t2.Msid, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Role == \"Daffy Duck\").Select(row => new { row.t1.Title }).ToList();",
    "db_name": "imdb",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,117): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.66"
  },
  {
    "query": "SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t3.title = \"Daddy Long Legs\";",
    "result": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.Title == \"Daddy Long Legs\").Select(row => new { row.t2.Role }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN tags AS t5 ON t5.msid = t4.mid JOIN keyword AS t1 ON t5.kid = t1.id WHERE t1.keyword = \"nuclear weapons\";",
    "result": "context.Directors.Join(context.DirectedBies, t3 => t3.Did, t2 => t2.Did, (t3, t2) => new { t3, t2 }).Join(context.Movies, joined => joined.t2.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t3, joined.t2, t4 }).Join(context.Tags, joined => joined.t4.Mid, t5 => t5.Msid, (joined, t5) => new { joined.t3, joined.t2, joined.t4, t5 }).Join(context.Keywords, joined => joined.t5.Kid, t1 => t1.Id, (joined, t1) => new { joined.t3, joined.t2, joined.t4, joined.t5, t1 }).Where(row => row.t1.Keyword1 == \"nuclear weapons\").Select(row => new { row.t3.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Jennifer Aniston\" AND t2.release_year > 2010;",
    "result": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.Movies, joined => joined.t3.Msid, t2 => t2.Mid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Name == \"Jennifer Aniston\" && row.t2.ReleaseYear > 2010).Select(row => row.t2.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t3.title = \"Saving Private Ryan\";",
    "result": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.Title == \"Saving Private Ryan\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t3.title ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Steven Spielberg\";",
    "result": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Steven Spielberg\").Select(row => row.t3.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT title ) FROM movie WHERE release_year = 2013;",
    "result": "context.Movies.Where(row => row.ReleaseYear == 2013).Select(row => row.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t3.title ) , t3.release_year FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Woody Allen\" GROUP BY t3.release_year;",
    "result": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Woody Allen\").GroupBy(row => new { row.t3.ReleaseYear }).Select(group => new { CountDistinctTitle = group.Select(row => row.t3.Title).Distinct().Count(), group.Key.ReleaseYear }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Shahab Hosseini\";",
    "result": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.Movies, joined => joined.t3.Msid, t2 => t2.Mid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Name == \"Shahab Hosseini\").Select(row => row.t2.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT name ) FROM actor WHERE birth_city = \"Los Angeles\" AND birth_year > 2000;",
    "result": "context.Actors.Where(row => row.BirthCity == \"Los Angeles\" && row.BirthYear > 2000).Select(row => row.Name).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Humphrey Bogart\" AND t2.release_year < 1942;",
    "result": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.Movies, joined => joined.t3.Msid, t2 => t2.Mid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Name == \"Humphrey Bogart\" && row.t2.ReleaseYear < 1942).Select(row => row.t2.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t2.title ) , t2.release_year FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Brad Pitt\" GROUP BY t2.release_year;",
    "result": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.Movies, joined => joined.t3.Msid, t2 => t2.Mid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Name == \"Brad Pitt\").GroupBy(row => new { row.t2.ReleaseYear }).Select(group => new { CountDistinctTitle = group.Select(row => row.t2.Title).Distinct().Count(), group.Key.ReleaseYear }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t3.title ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid = t1.id JOIN movie AS t3 ON t2.msid = t3.mid WHERE t1.keyword = \"Iraq war\" AND t3.release_year = 2015;",
    "result": "context.Tags.Join(context.Keywords, t2 => t2.Kid, t1 => t1.Id, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Keyword1 == \"Iraq war\" && row.t3.ReleaseYear == 2015).Select(row => row.t3.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t3.title ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid = t1.id JOIN movie AS t3 ON t2.msid = t3.mid WHERE t1.keyword = \"Persians\" AND t3.release_year > 1990;",
    "result": "context.Tags.Join(context.Keywords, t2 => t2.Kid, t1 => t1.Id, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Keyword1 == \"Persians\" && row.t3.ReleaseYear > 1990).Select(row => row.t3.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t3.title ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Quentin Tarantino\" AND t3.release_year > 2010;",
    "result": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Quentin Tarantino\" && row.t3.ReleaseYear > 2010).Select(row => row.t3.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t3.title ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Quentin Tarantino\" AND t3.release_year < 2010;",
    "result": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Quentin Tarantino\" && row.t3.ReleaseYear < 2010).Select(row => row.t3.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t4.title ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN made_by AS t5 ON t4.mid = t5.msid JOIN producer AS t1 ON t1.pid = t5.pid WHERE t3.name = \"Quentin Tarantino\" AND t4.release_year < 2010 AND t4.release_year > 2002;",
    "result": "context.Directors.Join(context.DirectedBies, t3 => t3.Did, t2 => t2.Did, (t3, t2) => new { t3, t2 }).Join(context.Movies, joined => joined.t2.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t3, joined.t2, t4 }).Join(context.MadeBies, joined => joined.t4.Mid, t5 => t5.Msid, (joined, t5) => new { joined.t3, joined.t2, joined.t4, t5 }).Join(context.Producers, joined => joined.t5.Pid, t1 => t1.Pid, (joined, t1) => new { joined.t3, joined.t2, joined.t4, joined.t5, t1 }).Where(row => row.t3.Name == \"Quentin Tarantino\" && row.t4.ReleaseYear < 2010 && row.t4.ReleaseYear > 2002).Select(row => row.t4.Title).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT name ) FROM actor WHERE birth_city = \"New York City\" AND birth_year > 1980 AND gender = \"female\";",
    "result": "context.Actors.Where(row => row.BirthCity == \"New York City\" && row.BirthYear > 1980 && row.Gender == \"female\").Select(row => row.Name).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN directed_by AS t2 ON t5.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t1.nationality = \"Iran\" AND t3.name = \"Jim Jarmusch\";",
    "result": "context.Casts.Join(context.Actors, t4 => t4.Aid, t1 => t1.Aid, (t4, t1) => new { t4, t1 }).Join(context.Movies, joined => joined.t4.Msid, t5 => t5.Mid, (joined, t5) => new { joined.t4, joined.t1, t5 }).Join(context.DirectedBies, joined => joined.t5.Mid, t2 => t2.Msid, (joined, t2) => new { joined.t4, joined.t1, joined.t5, t2 }).Join(context.Directors, joined => joined.t2.Did, t3 => t3.Did, (joined, t3) => new { joined.t4, joined.t1, joined.t5, joined.t2, t3 }).Where(row => row.t1.Nationality == \"Iran\" && row.t3.Name == \"Jim Jarmusch\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t1.nationality = \"China\" AND t3.title = \"Rush Hour 3\";",
    "result": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Nationality == \"China\" && row.t3.Title == \"Rush Hour 3\").Select(row => row.t1.Name).Distinct().Count();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN CAST AS t3 ON t4.mid = t3.msid JOIN actor AS t2 ON t3.aid = t2.aid WHERE t1.name = \"Woody Strode\" AND t2.name = \"Jason Robards\";",
    "result": "context.Casts.Join(context.Actors, t5 => t5.Aid, t1 => t1.Aid, (t5, t1) => new { t5, t1 }).Join(context.Movies, joined => joined.t5.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t5, joined.t1, t4 }).Join(context.Casts, joined => joined.t4.Mid, t3 => t3.Msid, (joined, t3) => new { joined.t5, joined.t1, joined.t4, t3 }).Join(context.Actors, joined => joined.t3.Aid, t2 => t2.Aid, (joined, t2) => new { joined.t5, joined.t1, joined.t4, joined.t3, t2 }).Where(row => row.t1.Name == \"Woody Strode\" && row.t2.Name == \"Jason Robards\").Select(row => new { row.t4.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN CAST AS t3 ON t5.mid = t3.msid JOIN actor AS t2 ON t3.aid = t2.aid WHERE t2.name = \"Tom Hanks\";",
    "result": "context.Casts.Join(context.Actors, t4 => t4.Aid, t1 => t1.Aid, (t4, t1) => new { t4, t1 }).Join(context.Movies, joined => joined.t4.Msid, t5 => t5.Mid, (joined, t5) => new { joined.t4, joined.t1, t5 }).Join(context.Casts, joined => joined.t5.Mid, t3 => t3.Msid, (joined, t3) => new { joined.t4, joined.t1, joined.t5, t3 }).Join(context.Actors, joined => joined.t3.Aid, t2 => t2.Aid, (joined, t2) => new { joined.t4, joined.t1, joined.t5, joined.t3, t2 }).Where(row => row.t2.Name == \"Tom Hanks\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did = t2.did JOIN directed_by AS t1 ON t5.did = t1.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN movie AS t3 ON t3.mid = t1.msid WHERE t4.title = \"Revolutionary Road\";",
    "result": "context.Directors.Join(context.DirectedBies, t5 => t5.Did, t2 => t2.Did, (t5, t2) => new { t5, t2 }).Join(context.DirectedBies, joined => joined.t5.Did, t1 => t1.Did, (joined, t1) => new { joined.t5, joined.t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t5, joined.t2, joined.t1, t4 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t5, joined.t2, joined.t1, joined.t4, t3 }).Where(row => row.t4.Title == \"Revolutionary Road\").Select(row => new { row.t3.Title }).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid GROUP BY t3.title ORDER BY COUNT ( DISTINCT t2.genre ) DESC LIMIT 1;",
    "result": "context.Genres.Join(context.Classifications, t2 => t2.Gid, t1 => t1.Gid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).GroupBy(row => new { row.t3.Title }).OrderByDescending(group => group.Count(row => row.t2.Genre1 != null)).Select(group => new { group.Key.Title }).Take(1).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.nationality = \"China\" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name ) DESC LIMIT 1;",
    "result": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.Movies, joined => joined.t3.Msid, t2 => t2.Mid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Nationality == \"China\").GroupBy(row => new { row.t2.Title }).OrderByDescending(group => group.Count(row => row.t1.Name != null)).Select(group => new { group.Key.Title }).Take(1).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN directed_by AS t2 ON t5.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t3.name = \"Quentin Tarantino\" ORDER BY t5.release_year DESC LIMIT 1;",
    "result": "context.Casts.Join(context.Actors, t4 => t4.Aid, t1 => t1.Aid, (t4, t1) => new { t4, t1 }).Join(context.Movies, joined => joined.t4.Msid, t5 => t5.Mid, (joined, t5) => new { joined.t4, joined.t1, t5 }).Join(context.DirectedBies, joined => joined.t5.Mid, t2 => t2.Msid, (joined, t2) => new { joined.t4, joined.t1, joined.t5, t2 }).Join(context.Directors, joined => joined.t2.Did, t3 => t3.Did, (joined, t3) => new { joined.t4, joined.t1, joined.t5, joined.t2, t3 }).Where(row => row.t3.Name == \"Quentin Tarantino\").OrderByDescending(row => row.t5.ReleaseYear).Select(row => new { row.t1.Name }).Take(1).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.budget , t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Quentin Tarantino\" ORDER BY t3.release_year DESC LIMIT 1;",
    "result": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Quentin Tarantino\").OrderByDescending(row => row.t3.ReleaseYear).Select(row => new { row.t3.Budget, row.t3.Title }).Take(1).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1;",
    "result": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Jim Jarmusch\").OrderByDescending(row => row.t3.ReleaseYear).Select(row => new { row.t3.Title }).Take(1).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN made_by AS t5 ON t4.mid = t5.msid JOIN producer AS t1 ON t1.pid = t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name ) DESC LIMIT 1;",
    "result": "context.Directors.Join(context.DirectedBies, t3 => t3.Did, t2 => t2.Did, (t3, t2) => new { t3, t2 }).Join(context.Movies, joined => joined.t2.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t3, joined.t2, t4 }).Join(context.MadeBies, joined => joined.t4.Mid, t5 => t5.Msid, (joined, t5) => new { joined.t3, joined.t2, joined.t4, t5 }).Join(context.Producers, joined => joined.t5.Pid, t1 => t1.Pid, (joined, t1) => new { joined.t3, joined.t2, joined.t4, joined.t5, t1 }).GroupBy(row => new { row.t1.Name }).OrderByDescending(group => group.Count(row => row.t3.Name != null)).Select(group => new { group.Key.Name }).Take(1).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t1.name = \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;",
    "result": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Name == \"Gabriele Ferzetti\").OrderByDescending(row => row.t3.ReleaseYear).Select(row => new { row.t1.Name }).Take(1).ToList();",
    "db_name": "imdb",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Band",
    "result": "context.Bands.Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT label FROM Albums",
    "result": "context.Albums.Select(row => new { row.Label }).Distinct().ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM Albums WHERE YEAR = 2012",
    "result": "context.Albums.Where(row => row.Year == 2012).Select(row => new { row..Aid, row..Title, row..Year, row..Label, row..Type }).ToList();",
    "db_name": "music_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,128): error CS0119: 'Type' is a type, which is not valid in the given context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    15 Error(s)\n\nTime Elapsed 00:00:02.79"
  },
  {
    "query": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE Firstname = \"Solveig\"",
    "result": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Firstname == \"Solveig\").Select(row => new { row.T1.StagePosition }).Distinct().ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Songs",
    "result": "context.Songs.Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.Lastname = \"Heilo\"",
    "result": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Lastname == \"Heilo\").Select(row => new { row.T3.Title }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate = T2.id JOIN songs AS T3 ON T3.songid = T1.songid WHERE T3.Title = \"Flash\"",
    "result": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Title == \"Flash\").Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.firstname = \"Marianne\"",
    "result": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Firstname == \"Marianne\").Select(row => new { row.T3.Title }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = \"Badlands\"",
    "result": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Title == \"Badlands\").Select(row => new { row.T2.Firstname, row.T2.Lastname }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = \"Badlands\" AND T1.StagePosition = \"back\"",
    "result": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Title == \"Badlands\" && row.T1.StagePosition == \"back\").Select(row => new { row.T2.Firstname, row.T2.Lastname }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT label) FROM albums",
    "result": "context.Albums.Select(row => row.Label).Distinct().Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Albums.GroupBy(row => new { row.Label }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Label }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T2.Lastname }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Lastname }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE stageposition = \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StagePosition == \"back\").GroupBy(row => new { row.T2.Lastname }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Lastname }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title FROM songs WHERE title LIKE '% the %'",
    "result": "context.Songs.Where(row => EF.Functions.Like(row.Title, \"% the %\")).Select(row => new { row.Title }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT instrument FROM Instruments",
    "result": "context.Instruments.Select(row => new { row.Instrument1 }).Distinct().ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = \"Heilo\" AND T3.title = \"Le Pop\"",
    "result": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Instruments, joined => new { Pair1 = joined.T3.SongId, Pair2 = joined.T2.Id }, T4 => new { Pair1 = joined.T4.SongId, Pair2 = joined.T4.BandmateId }, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T2.Lastname == \"Heilo\" && row.T3.Title == \"Le Pop\").Select(row => new { row.T4.Instrument1 }).ToList();",
    "db_name": "music_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,366): error CS0103: The name 'joined' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.81"
  },
  {
    "query": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Instruments.GroupBy(row => new { row.Instrument1 }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Instrument1 }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM instruments WHERE instrument = \"drums\"",
    "result": "context.Instruments.Where(row => row.Instrument1 == \"drums\").Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Le Pop\"",
    "result": "context.Instruments.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Le Pop\").Select(row => new { row.T1.Instrument1 }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Le Pop\"",
    "result": "context.Instruments.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Le Pop\").Select(row => row.T1.Instrument1).Distinct().Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = \"Heilo\"",
    "result": "context.Instruments.Join(context.Bands, T1 => T1.BandmateId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Lastname == \"Heilo\").Select(row => row.T1.Instrument1).Distinct().Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = \"Heilo\"",
    "result": "context.Instruments.Join(context.Bands, T1 => T1.BandmateId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Lastname == \"Heilo\").Select(row => new { row.T1.Instrument1 }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SongId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Title }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Vocals.GroupBy(row => new { row.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE lastname = \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Vocals.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Lastname == \"Heilo\").GroupBy(row => new { row.T1.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Le Pop\"",
    "result": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Le Pop\").Select(row => new { row.T1.Type }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Demon Kitty Rag\"",
    "result": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Demon Kitty Rag\").Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = \"lead\"",
    "result": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Type == \"lead\").Select(row => row.T2.Title).Distinct().Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = \"Solveig\" AND T2.title = \"A Bar In Amsterdam\"",
    "result": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Join(context.Bands, joined => joined.T1.Bandmate, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Firstname == \"Solveig\" && row.T2.Title == \"A Bar In Amsterdam\").Select(row => new { row.T1.Type }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"lead\"",
    "result": "context.Vocals.Join(context.Songs, t1 => t1.SongId, t2 => t2.SongId, (t1, t2) => new { t1, t2 }).Select(row => row.t2.Title).Distinct().Except(context.Vocals.Join(context.Songs, t1 => t1.SongId, t2 => t2.SongId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Type == \"lead\").Select(row => row.t2.Title)).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT TYPE FROM vocals",
    "result": "context.Vocals.Select(row => new { row.Type }).Distinct().ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM Albums WHERE YEAR = 2010",
    "result": "context.Albums.Where(row => row.Year == 2010).Select(row => new { row..Aid, row..Title, row..Year, row..Label, row..Type }).ToList();",
    "db_name": "music_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,128): error CS0119: 'Type' is a type, which is not valid in the given context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    15 Error(s)\n\nTime Elapsed 00:00:01.74"
  },
  {
    "query": "SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = \"Le Pop\"",
    "result": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Title == \"Le Pop\").Select(row => new { row.T2.Firstname, row.T2.Lastname }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = \"Heilo\" AND T3.title = \"Badlands\"",
    "result": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Instruments, joined => new { Pair1 = joined.T3.SongId, Pair2 = joined.T2.Id }, T4 => new { Pair1 = joined.T4.SongId, Pair2 = joined.T4.BandmateId }, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T2.Lastname == \"Heilo\" && row.T3.Title == \"Badlands\").Select(row => new { row.T4.Instrument1 }).ToList();",
    "db_name": "music_2",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,366): error CS0103: The name 'joined' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:02.07"
  },
  {
    "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Badlands\"",
    "result": "context.Instruments.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Badlands\").Select(row => row.T1.Instrument1).Distinct().Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Badlands\"",
    "result": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Badlands\").Select(row => new { row.T1.Type }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Le Pop\"",
    "result": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Le Pop\").Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = \"shared\"",
    "result": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Type == \"shared\").Select(row => row.T2.Title).Distinct().Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"back\"",
    "result": "context.Vocals.Join(context.Songs, t1 => t1.SongId, t2 => t2.SongId, (t1, t2) => new { t1, t2 }).Select(row => row.t2.Title).Distinct().Except(context.Vocals.Join(context.Songs, t1 => t1.SongId, t2 => t2.SongId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Type == \"back\").Select(row => row.t2.Title)).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Vocals.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Firstname == \"Solveig\").GroupBy(row => new { row.T1.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.lastname = \"Heilo\" AND T2.title = \"Der Kapitan\"",
    "result": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Join(context.Bands, joined => joined.T1.Bandmate, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Lastname == \"Heilo\" && row.T2.Title == \"Der Kapitan\").Select(row => new { row.T1.Type }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate = t2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Performances.Join(context.Bands, t1 => t1.Bandmate, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Join(context.Songs, joined => joined.t1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.t1, joined.t2, T3 }).GroupBy(row => new { row.t2.Firstname }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Firstname }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Vocals.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Firstname == \"Marianne\").GroupBy(row => new { row.T1.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = \"Der Kapitan\" AND T1.StagePosition = \"back\"",
    "result": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Title == \"Der Kapitan\" && row.T1.StagePosition == \"back\").Select(row => new { row.T2.Firstname, row.T2.Lastname }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE T1.title = \"A Kiss Before You Go: Live in Hamburg\"",
    "result": "context.Albums.Join(context.Tracklists, T1 => T1.Aid, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T2.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Title == \"A Kiss Before You Go: Live in Hamburg\").Select(row => new { row.T3.Title }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.label = \"Universal Music Group\"",
    "result": "context.Albums.Join(context.Tracklists, T1 => T1.Aid, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T2.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Label == \"Universal Music Group\").Select(row => new { row.T3.Title }).ToList();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.type = \"Studio\"",
    "result": "context.Albums.Join(context.Tracklists, T1 => T1.Aid, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T2.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Type == \"Studio\").Select(row => row.T3.Title).Distinct().Count();",
    "db_name": "music_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM climber",
    "result": "context.Climbers.Count();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM climber ORDER BY Points DESC",
    "result": "context.Climbers.OrderByDescending(row => row.Points).Select(row => new { row.Name }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM climber WHERE Country != \"Switzerland\"",
    "result": "context.Climbers.Where(row => row.Country != \"Switzerland\").Select(row => new { row.Name }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Points) FROM climber WHERE Country = \"United Kingdom\"",
    "result": "context.Climbers.Where(row => row.Country == \"United Kingdom\").Select(row => row.Points).Max();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT(DISTINCT Country) FROM climber",
    "result": "context.Climbers.Select(row => row.Country).Distinct().Count();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM mountain ORDER BY Name ASC",
    "result": "context.Mountains.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country FROM mountain WHERE Height > 5000",
    "result": "context.Mountains.Where(row => row.Height > 5000).Select(row => new { row.Country }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
    "result": "context.Mountains.OrderByDescending(row => row.Height).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3",
    "result": "context.Mountains.OrderByDescending(row => row.Prominence).Select(row => new { row.Range }).Distinct().Take(3).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
    "result": "context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Select(row => new { T1Name = row.T1.Name, T2Name = row.T2.Name }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
    "result": "context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name, row.T2.Height }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1",
    "result": "context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Points).Select(row => new { row.T2.Height }).Take(1).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = \"West Germany\"",
    "result": "context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Country == \"West Germany\").Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = \"Uganda\"",
    "result": "context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country == \"Uganda\").Select(row => new { row.T1.Time }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "result": "context.Climbers.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1",
    "result": "context.Mountains.GroupBy(row => new { row.Country }).Where(group => group.Count() > 1).Select(group => new { group.Key.Country }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
    "result": "context.Mountains.Where(row => !context.Climbers.Select(row => row.MountainId).Contains(row.MountainId)).Select(row => new { row.Name }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200",
    "result": "context.Mountains.Where(row => row.Height > 5600).Select(row => row.Country).Intersect(context.Mountains.Where(row => row.Height < 5200).Select(row => row.Country)).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Mountains.GroupBy(row => new { row.Range }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Range }).Take(1).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000",
    "result": "context.Mountains.Where(row => row.Height > 5000 || row.Prominence > 1000).Select(row => new { row.Name }).ToList();",
    "db_name": "climbing",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM event",
    "result": "context.Events.Count();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM event ORDER BY YEAR DESC",
    "result": "context.Events.OrderByDescending(row => row.Year).Select(row => new { row.Name }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
    "result": "context.Events.OrderByDescending(row => row.Year).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM stadium",
    "result": "context.Stadia.Count();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1",
    "result": "context.Stadia.OrderByDescending(row => row.Capacity).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM stadium WHERE capacity < (SELECT avg(capacity) FROM stadium)",
    "result": "context.Stadia.Where(row => row.Capacity < context.Stadia.Select(row => row.Capacity).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Stadia.GroupBy(row => new { row.Country }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Country }).Take(1).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT country FROM stadium GROUP BY country HAVING count(*) <= 3",
    "result": "context.Stadia.GroupBy(row => new { row.Country }).Where(group => group.Count() <= 3).Select(group => new { group.Key.Country }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT country FROM stadium WHERE capacity > 60000 INTERSECT SELECT country FROM stadium WHERE capacity < 50000",
    "result": "context.Stadia.Where(row => row.Capacity > 60000).Select(row => row.Country).Intersect(context.Stadia.Where(row => row.Capacity < 50000).Select(row => row.Country)).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year < 2006",
    "result": "context.Stadia.Where(row => row.OpeningYear < 2006).Select(row => row.City).Distinct().Count();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT country , count(*) FROM stadium GROUP BY country",
    "result": "context.Stadia.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year > 2006",
    "result": "context.Stadia.Select(row => row.Country).Except(context.Stadia.Where(row => row.OpeningYear > 2006).Select(row => row.Country)).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM stadium WHERE country != 'Russia'",
    "result": "context.Stadia.Where(row => row.Country != \"Russia\").Count();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM swimmer ORDER BY meter_100",
    "result": "context.Swimmers.OrderBy(row => row.Meter100).Select(row => new { row.Name }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT nationality) FROM swimmer",
    "result": "context.Swimmers.Select(row => row.Nationality).Distinct().Count();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT nationality , count(*) FROM swimmer GROUP BY nationality HAVING count(*) > 1",
    "result": "context.Swimmers.GroupBy(row => new { row.Nationality }).Select(group => new { group.Key.Nationality, Count = group.Count() }).Where(group => group.Count > 1).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT meter_200 , meter_300 FROM swimmer WHERE nationality = 'Australia'",
    "result": "context.Swimmers.Where(row => row.Nationality == \"Australia\").Select(row => new { row.Meter200, row.Meter300 }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win'",
    "result": "context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Result == \"Win\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Stadia.Join(context.Events, t1 => t1.Id, t2 => t2.StadiumId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.StadiumId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.Name }).Take(1).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name , t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id WHERE t2.name = 'World Junior'",
    "result": "context.Stadia.Join(context.Events, t1 => t1.Id, t2 => t2.StadiumId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Name == \"World Junior\").Select(row => new { row.t1.Name, row.t1.Capacity }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)",
    "result": "context.Stadia.Where(row => !context.Events.Select(row => row.StadiumId).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.SwimmerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.Name }).Take(1).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*) >= 2",
    "result": "context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.SwimmerId }).Where(group => group.Count() >= 2).Select(group => new { group.First().t1.Name }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name , t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY t2.swimmer_id HAVING count(*) > 1",
    "result": "context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Result == \"Win\").GroupBy(row => new { row.t2.SwimmerId }).Where(group => group.Count() > 1).Select(group => new { group.First().t1.Name, group.First().t1.Nationality }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)",
    "result": "context.Swimmers.Where(row => !context.Records.Select(row => row.SwimmerId).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Loss'",
    "result": "context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Result == \"Win\").Select(row => row.t1.Name).Intersect(context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Result == \"Loss\").Select(row => row.t1.Name)).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia'",
    "result": "context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).Join(context.Events, joined => joined.t2.EventId, t3 => t3.Id, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Stadia, joined => joined.t3.StadiumId, t4 => t4.Id, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t1.Nationality == \"Australia\").Select(row => new { row.t4.Name }).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id = t2.id JOIN stadium AS t3 ON t3.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Records.Join(context.Events, t1 => t1.EventId, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Join(context.Stadia, joined => joined.t2.StadiumId, t3 => t3.Id, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t2.StadiumId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t3.Name }).Take(1).ToList();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM swimmer",
    "result": "context.Swimmers.Select(row => new { row..Id, row..Name, row..Nationality, row..Meter100, row..Meter200, row..Meter300, row..Meter400, row..Meter500, row..Meter600, row..Meter700, row..Time }).ToList();",
    "db_name": "swimming",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,197): error CS0103: The name 'Time' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    33 Error(s)\n\nTime Elapsed 00:00:02.70"
  },
  {
    "query": "SELECT avg(capacity) FROM stadium WHERE opening_year = 2005",
    "result": "context.Stadia.Where(row => row.OpeningYear == 2005).Select(row => row.Capacity).Average();",
    "db_name": "swimming",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_name FROM customers",
    "result": "context.Customers.Select(row => new { row.CustomerName }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM customers",
    "result": "context.Customers.Count();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(order_quantity) FROM order_items",
    "result": "context.OrderItems.Select(row => row.OrderQuantity).ToList().Select(value => double.Parse(value)).ToList().Average();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_name FROM customers WHERE payment_method = \"Cash\"",
    "result": "context.Customers.Where(row => row.PaymentMethod == \"Cash\").Select(row => new { row.CustomerName }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
    "result": "context.Customers.Where(row => row.CustomerId >= 10 && row.CustomerId <= 20).Select(row => new { row.DateBecameCustomer }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Customers.GroupBy(row => new { row.PaymentMethod }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PaymentMethod }).Take(1).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_name FROM customers WHERE payment_method = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)",
    "result": "context.Customers.Where(row => row.PaymentMethod == context.Customers.GroupBy(row => new { row.PaymentMethod }).OrderByDescending(group => group.Count()).Select(group => group.Key.PaymentMethod).Take(1).First()).Select(row => new { row.CustomerName }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT payment_method FROM customers",
    "result": "context.Customers.Select(row => new { row.PaymentMethod }).Distinct().ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT product_details FROM products",
    "result": "context.Products.Select(row => new { row.ProductDetails }).Distinct().ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"",
    "result": "context.Customers.Where(row => EF.Functions.Like(row.CustomerName, \"%Alex%\")).Select(row => new { row.CustomerName }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"",
    "result": "context.Products.Where(row => EF.Functions.Like(row.ProductDetails, \"%Latte%\") || EF.Functions.Like(row.ProductDetails, \"%Americano%\")).Select(row => new { row.ProductDetails }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.customer_name = \"Maudie Kertzmann\"",
    "result": "context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.CustomerName == \"Maudie Kertzmann\").Select(row => new { row.t3.AddressContent }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = \"Lake Geovannyton\"",
    "result": "context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.City == \"Lake Geovannyton\").Count();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = \"Colorado\"",
    "result": "context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.StateProvinceCounty == \"Colorado\").Select(row => new { row.t1.CustomerName }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id)",
    "result": "context.Addresses.Where(row => !context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Select(row => row.t3.City).Distinct().Contains(row.City)).Select(row => new { row.City }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.City }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.City }).Take(1).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT city FROM addresses",
    "result": "context.Addresses.Select(row => new { row.City }).Distinct().ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city FROM addresses WHERE zip_postcode = 255",
    "result": "context.Addresses.Where(row => row.ZipPostcode == \"255\").Select(row => new { row.City }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_province_county , country FROM addresses WHERE zip_postcode LIKE \"4%\"",
    "result": "context.Addresses.Where(row => EF.Functions.Like(row.ZipPostcode, \"4%\")).Select(row => new { row.StateProvinceCounty, row.Country }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT country FROM addresses GROUP BY country HAVING count(address_id) > 4",
    "result": "context.Addresses.GroupBy(row => new { row.Country }).Where(group => group.Count(row => row.AddressId != null) > 4).Select(group => new { group.Key.Country }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id) < 5",
    "result": "context.CustomerContactChannels.GroupBy(row => new { row.ChannelCode }).Where(group => group.Count(row => row.CustomerId != null) < 5).Select(group => new { group.Key.ChannelCode }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\"",
    "result": "context.Customers.Join(context.CustomerContactChannels, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.CustomerName == \"Tillman Ernser\").Select(row => new { row.t2.ChannelCode }).Distinct().ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\"",
    "result": "context.Customers.Join(context.CustomerContactChannels, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.CustomerName == \"Tillman Ernser\").Select(row => row.t2.ActiveToDate).Max();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.customer_name , t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email'",
    "result": "context.Customers.Join(context.CustomerContactChannels, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.ChannelCode == \"Email\").Select(row => new { row.t1.CustomerName, row.t2.ActiveFromDate }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t3.order_quantity = ( SELECT max(order_quantity) FROM order_items)",
    "result": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.OrderQuantity == context.OrderItems.Select(row => row.OrderQuantity).Max()).Select(row => new { row.t1.CustomerName }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
    "result": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.CustomerName }).OrderByDescending(group => group.Sum(row => row.t3.OrderQuantity)).Select(group => new { group.Key.CustomerName }).Take(1).ToList();",
    "db_name": "customers_and_addresses",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,339): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:02.07"
  },
  {
    "query": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
    "result": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.CustomerName }).OrderBy(group => group.Sum(row => row.t3.OrderQuantity)).Select(group => new { group.First().t1.PaymentMethod }).Take(1).ToList();",
    "db_name": "customers_and_addresses",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,329): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.81"
  },
  {
    "query": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\"",
    "result": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.CustomerName == \"Rodrick Heaney\").Select(row => row.t3.ProductId).Distinct().Count();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\"",
    "result": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.CustomerName == \"Rodrick Heaney\").Select(row => row.t3.OrderQuantity).Sum();",
    "db_name": "customers_and_addresses",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,12): error CS1929: 'IQueryable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.23"
  },
  {
    "query": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status = \"Cancelled\"",
    "result": "context.CustomerOrders.Where(row => row.OrderStatus == \"Cancelled\").Select(row => row.CustomerId).Distinct().Count();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM customer_orders WHERE order_details = \"Second time\"",
    "result": "context.CustomerOrders.Where(row => row.OrderDetails == \"Second time\").Count();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.customer_name , t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\"",
    "result": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.OrderStatus == \"Delivered\").Select(row => new { row.t1.CustomerName, row.t2.OrderDate }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_status = \"Cancelled\"",
    "result": "context.CustomerOrders.Join(context.OrderItems, t1 => t1.OrderId, t2 => t2.OrderId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.OrderStatus == \"Cancelled\").Select(row => row.t2.OrderQuantity).Sum();",
    "db_name": "customers_and_addresses",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,12): error CS1929: 'IQueryable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.31"
  },
  {
    "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_date < \"2018-03-17 07:13:53\"",
    "result": "context.CustomerOrders.Join(context.OrderItems, t1 => t1.OrderId, t2 => t2.OrderId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.OrderDate < \"2018-03-17 07:13:53\").Select(row => row.t2.OrderQuantity).Sum();",
    "db_name": "customers_and_addresses",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,137): error CS0019: Operator '<' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.00"
  },
  {
    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
    "result": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t2.OrderDate).Select(row => new { row.t1.CustomerName }).Take(1).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.OrderItems.Join(context.Products, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ProductId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t2.ProductDetails }).Take(1).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.product_details , t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1",
    "result": "context.OrderItems.Join(context.Products, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ProductId }).OrderBy(group => group.Sum(row => row.t1.OrderQuantity)).Select(group => new { group.First().t2.ProductDetails, group.Key.ProductId }).Take(1).ToList();",
    "db_name": "customers_and_addresses",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,197): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:02.42"
  },
  {
    "query": "SELECT address_content FROM addresses WHERE city = \"East Julianaside\" AND state_province_county = \"Texas\" UNION SELECT address_content FROM addresses WHERE city = \"Gleasonmouth\" AND state_province_county = \"Arizona\"",
    "result": "context.Addresses.Where(row => row.City == \"East Julianaside\" && row.StateProvinceCounty == \"Texas\").Select(row => row.AddressContent).Union(context.Addresses.Where(row => row.City == \"Gleasonmouth\" && row.StateProvinceCounty == \"Arizona\").Select(row => row.AddressContent)).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'",
    "result": "context.Customers.Where(row => row.PaymentMethod != \"Cash\").Select(row => new { row.CustomerName }).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte'",
    "result": "context.Customers.Select(row => row.CustomerName).Except(context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Products, joined => joined.t3.ProductId, t4 => t4.ProductId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ProductDetails == \"Latte\").Select(row => row.t1.CustomerName)).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id",
    "result": "context.Customers.Select(row => row.CustomerName).Except(context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Select(row => row.t1.CustomerName)).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Americano'",
    "result": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Products, joined => joined.t3.ProductId, t4 => t4.ProductId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ProductDetails == \"Latte\").Select(row => row.t1.CustomerName).Intersect(context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Products, joined => joined.t3.ProductId, t4 => t4.ProductId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ProductDetails == \"Americano\").Select(row => row.t1.CustomerName)).ToList();",
    "db_name": "customers_and_addresses",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM INVESTORS",
    "result": "context.Investors.Count();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Investor_details FROM INVESTORS",
    "result": "context.Investors.Select(row => new { row.InvestorDetails }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT lot_details FROM LOTS",
    "result": "context.Lots.Select(row => new { row.LotDetails }).Distinct().ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(amount_of_transaction) FROM TRANSACTIONS",
    "result": "context.Transactions.Select(row => (double) row.AmountOfTransaction).Max();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_of_transaction , share_count FROM TRANSACTIONS",
    "result": "context.Transactions.Select(row => new { row.DateOfTransaction, row.ShareCount }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(share_count) FROM TRANSACTIONS",
    "result": "context.Transactions.Select(row => row.ShareCount).Sum();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,12): error CS1929: 'IQueryable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.29"
  },
  {
    "query": "SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code = 'PUR'",
    "result": "context.Transactions.Where(row => row.TransactionTypeCode == \"PUR\").Select(row => new { row.TransactionId }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"",
    "result": "context.Transactions.Where(row => row.TransactionTypeCode == \"SALE\").Select(row => new { row.DateOfTransaction }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"",
    "result": "context.Transactions.Where(row => row.TransactionTypeCode == \"SALE\").Select(row => (double) row.AmountOfTransaction).Average();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code = \"PUR\"",
    "result": "context.RefTransactionTypes.Where(row => row.TransactionTypeCode == \"PUR\").Select(row => new { row.TransactionTypeDescription }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"PUR\" AND share_count > 50",
    "result": "context.Transactions.Where(row => row.TransactionTypeCode == \"PUR\" && row.ShareCount > \"50\").Select(row => (double) row.AmountOfTransaction).Min();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,82): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.78"
  },
  {
    "query": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction < 10000",
    "result": "context.Transactions.Where(row => row.AmountOfTransaction < 10000).Select(row => row.ShareCount).Max();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000",
    "result": "context.Transactions.Where(row => row.ShareCount > \"100\" || row.AmountOfTransaction > 1000).Select(row => new { row.DateOfTransaction }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,46): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.79"
  },
  {
    "query": "SELECT T1.transaction_type_description , T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code WHERE T2.share_count < 10",
    "result": "context.RefTransactionTypes.Join(context.Transactions, T1 => T1.TransactionTypeCode, T2 => T2.TransactionTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ShareCount < \"10\").Select(row => new { row.T1.TransactionTypeDescription, row.T2.DateOfTransaction }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,168): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.86"
  },
  {
    "query": "SELECT T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100",
    "result": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ShareCount > \"100\").Select(row => new { row.T1.InvestorDetails }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,140): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.77"
  },
  {
    "query": "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS",
    "result": "context.Transactions.Select(row => row.TransactionTypeCode).Distinct().Count();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lot_details , investor_id FROM LOTS",
    "result": "context.Lots.Select(row => new { row.LotDetails, row.InvestorId }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\"",
    "result": "context.Investors.Join(context.Lots, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.InvestorDetails == \"l\").Select(row => new { row.T2.LotDetails }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000",
    "result": "context.Purchases.Join(context.Transactions, T1 => T1.PurchaseTransactionId, T2 => T2.TransactionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AmountOfTransaction > 10000).Select(row => new { row.T1.PurchaseDetails }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.sales_details , T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction < 3000",
    "result": "context.Sales.Join(context.Transactions, T1 => T1.SalesTransactionId, T2 => T2.TransactionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AmountOfTransaction < 3000).Select(row => new { row.T1.SalesDetails, row.T2.DateOfTransaction }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE T3.share_count < 50",
    "result": "context.Lots.Join(context.TransactionsLots, T1 => T1.LotId, T2 => T2.TransactionId, (T1, T2) => new { T1, T2 }).Join(context.Transactions, joined => joined.T2.TransactionId, T3 => T3.TransactionId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.ShareCount < \"50\").Select(row => new { row.T1.LotDetails }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,273): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.24"
  },
  {
    "query": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE T3.share_count > 100 AND T3.transaction_type_code = \"PUR\"",
    "result": "context.Lots.Join(context.TransactionsLots, T1 => T1.LotId, T2 => T2.TransactionId, (T1, T2) => new { T1, T2 }).Join(context.Transactions, joined => joined.T2.TransactionId, T3 => T3.TransactionId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.ShareCount > \"100\" && row.T3.TransactionTypeCode == \"PUR\").Select(row => new { row.T1.LotDetails }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,273): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.72"
  },
  {
    "query": "SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
    "result": "context.Transactions.GroupBy(row => new { row.TransactionTypeCode }).Select(group => new { group.Key.TransactionTypeCode, AverageAmountOfTransaction = group.Select(row => (double) row.AmountOfTransaction).Average() }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT transaction_type_code , max(share_count) , min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code",
    "result": "context.Transactions.GroupBy(row => new { row.TransactionTypeCode }).Select(group => new { group.Key.TransactionTypeCode, MaxShareCount = group.Select(row => row.ShareCount).Max(), MinShareCount = group.Select(row => row.ShareCount).Min() }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT investor_id , avg(share_count) FROM TRANSACTIONS GROUP BY investor_id",
    "result": "context.Transactions.GroupBy(row => new { row.InvestorId }).Select(group => new { group.Key.InvestorId, AverageShareCount = group.Select(row => row.ShareCount).Average() }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,136): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.08"
  },
  {
    "query": "SELECT investor_id , avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)",
    "result": "context.Transactions.GroupBy(row => new { row.InvestorId }).Select(group => new { group.Key.InvestorId, AverageShareCount = group.Select(row => row.ShareCount).Average() }).OrderBy(group => group.AverageShareCount).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,136): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:03.83"
  },
  {
    "query": "SELECT investor_id , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id",
    "result": "context.Transactions.GroupBy(row => new { row.InvestorId }).Select(group => new { group.Key.InvestorId, AverageAmountOfTransaction = group.Select(row => (double) row.AmountOfTransaction).Average() }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id",
    "result": "context.Transactions.Join(context.TransactionsLots, T1 => T1.TransactionId, T2 => T2.TransactionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.LotId }).Select(group => new { group.Key.LotId, AverageAmountOfTransaction = group.Select(row => (double) row.T1.AmountOfTransaction).Average() }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)",
    "result": "context.Transactions.Join(context.TransactionsLots, T1 => T1.TransactionId, T2 => T2.TransactionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.LotId }).Select(group => new { group.Key.LotId, AverageAmountOfTransaction = group.Select(row => (double) row.T1.AmountOfTransaction).Average() }).OrderBy(group => group.Average(row => (double) row.T1.AmountOfTransaction)).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,338): error CS1061: '<anonymous type: int LotId, double AverageAmountOfTransaction>' does not contain a definition for 'Average' and no accessible extension method 'Average' accepting a first argument of type '<anonymous type: int LotId, double AverageAmountOfTransaction>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.93"
  },
  {
    "query": "SELECT investor_id , COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\" GROUP BY investor_id",
    "result": "context.Transactions.Where(row => row.TransactionTypeCode == \"SALE\").GroupBy(row => new { row.InvestorId }).Select(group => new { group.Key.InvestorId, Count = group.Count() }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT investor_id , COUNT(*) FROM TRANSACTIONS GROUP BY investor_id",
    "result": "context.Transactions.GroupBy(row => new { row.InvestorId }).Select(group => new { group.Key.InvestorId, Count = group.Count() }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1",
    "result": "context.Transactions.GroupBy(row => new { row.TransactionTypeCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.TransactionTypeCode }).Take(1).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Transactions.GroupBy(row => new { row.TransactionTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.TransactionTypeCode }).Take(1).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.RefTransactionTypes.Join(context.Transactions, T1 => T1.TransactionTypeCode, T2 => T2.TransactionTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TransactionTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.TransactionTypeDescription }).Take(1).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.InvestorId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.InvestorId, group.First().T1.InvestorDetails }).Take(1).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
    "result": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.InvestorId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.InvestorId, group.First().T1.InvestorDetails }).Take(3).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*) >= 2",
    "result": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.InvestorId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.InvestorId }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*) >= 2",
    "result": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TransactionTypeCode == \"SALE\").GroupBy(row => new { row.T2.InvestorId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.InvestorId, group.First().T1.InvestorDetails }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100",
    "result": "context.Transactions.Where(row => row.ShareCount >= \"100\" || row.AmountOfTransaction >= 100).Select(row => new { row.DateOfTransaction }).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,46): error CS0019: Operator '>=' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.72"
  },
  {
    "query": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases",
    "result": "context.Sales.Select(row => row.SalesDetails).Union(context.Purchases.Select(row => row.PurchaseDetails)).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id = T2.lot_id",
    "result": "context.Lots.Select(row => row.LotDetails).Except(context.Lots.Join(context.TransactionsLots, T1 => T1.LotId, T2 => T2.LotId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.LotDetails)).ToList();",
    "db_name": "tracking_share_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Video_games",
    "result": "context.VideoGames.Count();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT gtype) FROM Video_games",
    "result": "context.VideoGames.Select(row => row.Gtype).Distinct().Count();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT gtype FROM Video_games",
    "result": "context.VideoGames.Select(row => new { row.Gtype }).Distinct().ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT gname , gtype FROM Video_games ORDER BY gname",
    "result": "context.VideoGames.OrderBy(row => row.Gname).Select(row => new { row.Gname, row.Gtype }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT gname FROM Video_games WHERE gtype = \"Collectible card game\"",
    "result": "context.VideoGames.Where(row => row.Gtype == \"Collectible card game\").Select(row => new { row.Gname }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT gtype FROM Video_games WHERE gname = \"Call of Destiny\"",
    "result": "context.VideoGames.Where(row => row.Gname == \"Call of Destiny\").Select(row => new { row.Gtype }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Video_games WHERE gtype = \"Massively multiplayer online game\"",
    "result": "context.VideoGames.Where(row => row.Gtype == \"Massively multiplayer online game\").Count();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT gtype , count(*) FROM Video_games GROUP BY gtype",
    "result": "context.VideoGames.GroupBy(row => new { row.Gtype }).Select(group => new { group.Key.Gtype, Count = group.Count() }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1",
    "result": "context.VideoGames.GroupBy(row => new { row.Gtype }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Gtype }).Take(1).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1",
    "result": "context.VideoGames.GroupBy(row => new { row.Gtype }).OrderBy(group => group.Count()).Select(group => new { group.Key.Gtype }).Take(1).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Student WHERE city_code = \"CHI\"",
    "result": "context.Students.Where(row => row.CityCode == \"CHI\").Select(row => new { row.StuId }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Student WHERE Advisor = 1121",
    "result": "context.Students.Where(row => row.Advisor == 1121).Select(row => new { row.StuId }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Fname FROM Student WHERE Major = 600",
    "result": "context.Students.Where(row => row.Major == 600).Select(row => new { row.Fname }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT major , avg(age) , min(age) , max(age) FROM Student GROUP BY major",
    "result": "context.Students.GroupBy(row => new { row.Major }).Select(group => new { group.Key.Major, AverageAge = group.Select(row => row.Age).Average(), MinAge = group.Select(row => row.Age).Min(), MaxAge = group.Select(row => row.Age).Max() }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*) >= 2",
    "result": "context.Students.GroupBy(row => new { row.Advisor }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Advisor }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT sportname) FROM Sportsinfo",
    "result": "context.SportsInfos.Select(row => row.SportName).Distinct().Count();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT StuID) FROM Sportsinfo",
    "result": "context.SportsInfos.Select(row => row.StuId).Distinct().Count();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'",
    "result": "context.SportsInfos.Where(row => row.OnScholarship == \"Y\").Select(row => new { row.StuId }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y'",
    "result": "context.SportsInfos.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.OnScholarship == \"Y\").Select(row => new { row.T2.Lname }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(gamesplayed) FROM Sportsinfo",
    "result": "context.SportsInfos.Select(row => row.GamesPlayed).Sum();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname = \"Football\" AND onscholarship = 'Y'",
    "result": "context.SportsInfos.Where(row => row.SportName == \"Football\" && row.OnScholarship == \"Y\").Select(row => row.GamesPlayed).Sum();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sportname , count(*) FROM Sportsinfo GROUP BY sportname",
    "result": "context.SportsInfos.GroupBy(row => new { row.SportName }).Select(group => new { group.Key.SportName, Count = group.Count() }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID , count(*) , sum(gamesplayed) FROM Sportsinfo GROUP BY StuID",
    "result": "context.SportsInfos.GroupBy(row => new { row.StuId }).Select(group => new { group.Key.StuId, Count = group.Count(), SumGamesPlayed = group.Select(row => row.GamesPlayed).Sum() }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek) > 10",
    "result": "context.SportsInfos.GroupBy(row => new { row.StuId }).Where(group => group.Sum(row => row.HoursPerWeek) > 10).Select(group => new { group.Key.StuId }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Fname , T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
    "result": "context.SportsInfos.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StuId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Fname, group.First().T2.Lname }).Take(1).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sportname FROM Sportsinfo WHERE onscholarship = 'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1",
    "result": "context.SportsInfos.Where(row => row.OnScholarship == \"Y\").GroupBy(row => new { row.SportName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.SportName }).Take(1).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo",
    "result": "context.Students.Select(row => row.StuId).Except(context.SportsInfos.Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Student WHERE major = 600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'",
    "result": "context.Students.Where(row => row.Major == 600).Select(row => row.StuId).Intersect(context.SportsInfos.Where(row => row.OnScholarship == \"Y\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Student WHERE sex = 'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname = \"Football\"",
    "result": "context.Students.Where(row => row.Sex == \"F\").Select(row => row.StuId).Intersect(context.SportsInfos.Where(row => row.SportName == \"Football\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Student WHERE sex = 'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname = \"Football\"",
    "result": "context.Students.Where(row => row.Sex == \"M\").Select(row => row.StuId).Except(context.SportsInfos.Where(row => row.SportName == \"Football\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(hoursperweek) , sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = \"David\" AND T2.Lname = \"Shieber\"",
    "result": "context.SportsInfos.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Fname == \"David\" && row.T2.Lname == \"Shieber\").GroupBy(row => 1).Select(group => new { SumHoursPerWeek = group.Select(row => row.T1.HoursPerWeek).Sum(), SumGamesPlayed = group.Select(row => row.T1.GamesPlayed).Sum() }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(hoursperweek) , sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.age < 20",
    "result": "context.SportsInfos.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Age < 20).GroupBy(row => 1).Select(group => new { SumHoursPerWeek = group.Select(row => row.T1.HoursPerWeek).Sum(), SumGamesPlayed = group.Select(row => row.T1.GamesPlayed).Sum() }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT StuID) FROM Plays_games",
    "result": "context.PlaysGames.Select(row => row.StuId).Distinct().Count();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
    "result": "context.Students.Select(row => row.StuId).Except(context.PlaysGames.Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
    "result": "context.SportsInfos.Where(row => row.StuId.HasValue).Select(row => row.StuId.Value).Intersect(context.PlaysGames.Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT gameid , sum(hours_played) FROM Plays_games GROUP BY gameid",
    "result": "context.PlaysGames.GroupBy(row => new { row.GameId }).Select(group => new { group.Key.GameId, SumHoursPlayed = group.Select(row => row.HoursPlayed).Sum() }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Stuid , sum(hours_played) FROM Plays_games GROUP BY Stuid",
    "result": "context.PlaysGames.GroupBy(row => new { row.StuId }).Select(group => new { group.Key.StuId, SumHoursPlayed = group.Select(row => row.HoursPlayed).Sum() }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1",
    "result": "context.PlaysGames.Join(context.VideoGames, T1 => T1.GameId, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.GameId }).OrderByDescending(group => group.Sum(row => row.T1.HoursPlayed)).Select(group => new { group.First().T2.Gname }).Take(1).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid HAVING sum(hours_played) >= 1000",
    "result": "context.PlaysGames.Join(context.VideoGames, T1 => T1.GameId, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.GameId }).Where(group => group.Sum(row => row.T1.HoursPlayed) >= 1000).Select(group => new { group.First().T2.Gname }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid WHERE T3.Lname = \"Smith\" AND T3.Fname = \"Linda\"",
    "result": "context.PlaysGames.Join(context.VideoGames, T1 => T1.GameId, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Lname == \"Smith\" && row.T3.Fname == \"Linda\").Select(row => new { row.T2.Gname }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.lname , T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.SportName = \"Football\" OR T1.SportName = \"Lacrosse\"",
    "result": "context.SportsInfos.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.SportName == \"Football\" || row.T1.SportName == \"Lacrosse\").Select(row => new { row.T2.Lname, row.T2.Fname }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT fname , age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName = \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName = \"Lacrosse\")",
    "result": "context.Students.Where(row => context.SportsInfos.Where(row => row.SportName == \"Football\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value).Intersect(context.SportsInfos.Where(row => row.SportName == \"Lacrosse\").Where(row => row.StuId.HasValue).Select(row => row.StuId.Value)).Contains(row.StuId)).Select(row => new { row.Fname, row.Age }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lname , sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = \"Works of Widenius\")",
    "result": "context.Students.Where(row => context.PlaysGames.Join(context.VideoGames, T1 => T1.GameId, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Gname == \"Call of Destiny\").Where(row => row.T1.StuId.HasValue).Select(row => row.T1.StuId.Value).Intersect(context.PlaysGames.Join(context.VideoGames, T1 => T1.GameId, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Gname == \"Works of Widenius\").Where(row => row.T1.StuId.HasValue).Select(row => row.T1.StuId.Value)).Contains(row.StuId)).Select(row => new { row.Lname, row.Sex }).ToList();",
    "db_name": "game_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM county",
    "result": "context.Counties.Count();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT County_name , Population FROM county",
    "result": "context.Counties.Select(row => new { row.CountyName, row.Population }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Population) FROM county",
    "result": "context.Counties.Select(row => (double) row.Population).Average();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Population) , min(Population) FROM county",
    "result": "context.Counties.GroupBy(row => 1).Select(group => new { MaxPopulation = group.Select(row => row.Population).Max(), MinPopulation = group.Select(row => row.Population).Min() }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT District FROM election",
    "result": "context.Elections.Select(row => new { row.District }).Distinct().ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Zip_code FROM county WHERE County_name = \"Howard\"",
    "result": "context.Counties.Where(row => row.CountyName == \"Howard\").Select(row => new { row.ZipCode }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Delegate FROM election WHERE District = 1",
    "result": "context.Elections.Where(row => row.District == 1).Select(row => new { row.Delegate }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Delegate , Committee FROM election",
    "result": "context.Elections.Select(row => new { row.Delegate, row.Committee }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT Governor) FROM party",
    "result": "context.Parties.Select(row => row.Governor).Distinct().Count();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Lieutenant_Governor , Comptroller FROM party WHERE Party = \"Democratic\"",
    "result": "context.Parties.Where(row => row.Party1 == \"Democratic\").Select(row => new { row.LieutenantGovernor, row.Comptroller }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT YEAR FROM party WHERE Governor = \"Eliot Spitzer\"",
    "result": "context.Parties.Where(row => row.Governor == \"Eliot Spitzer\").Select(row => new { row.Year }).Distinct().ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM election",
    "result": "context.Elections.Select(row => new { row..ElectionId, row..CountiesRepresented, row..District, row..Delegate, row..Party, row..FirstElected, row..Committee }).ToList();",
    "db_name": "election",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,159): error CS0103: The name 'Committee' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    21 Error(s)\n\nTime Elapsed 00:00:03.39"
  },
  {
    "query": "SELECT T2.Delegate , T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District",
    "result": "context.Counties.Join(context.Elections, T1 => T1.CountyId, T2 => T2.District, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Delegate, row.T1.CountyName }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population < 100000",
    "result": "context.Counties.Join(context.Elections, T1 => T1.CountyId, T2 => T2.District, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Population < 100000).Select(row => new { row.T2.Delegate }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000",
    "result": "context.Counties.Join(context.Elections, T1 => T1.CountyId, T2 => T2.District, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Population > 50000).Select(row => row.T2.Delegate).Distinct().Count();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T2.Committee = \"Appropriations\"",
    "result": "context.Counties.Join(context.Elections, T1 => T1.CountyId, T2 => T2.District, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Committee == \"Appropriations\").Select(row => new { row.T1.CountyName }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID",
    "result": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Delegate, row.T2.Party1 }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1",
    "result": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.District == 1).Select(row => new { row.T2.Governor }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2",
    "result": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.District == 1 || row.T1.District == 2).Select(row => new { row.T2.Comptroller }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\"",
    "result": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Party1 == \"Democratic\").Select(row => new { row.T1.Committee }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id",
    "result": "context.Counties.Join(context.Elections, T1 => T1.CountyId, T2 => T2.District, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CountyId }).Select(group => new { group.First().T1.CountyName, Count = group.Count() }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Party , COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party",
    "result": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Party }).Select(group => new { group.First().T2.Party1, Count = group.Count() }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT County_name FROM county ORDER BY Population ASC",
    "result": "context.Counties.OrderBy(row => row.Population).Select(row => new { row.CountyName }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT County_name FROM county ORDER BY County_name DESC",
    "result": "context.Counties.OrderByDescending(row => row.CountyName).Select(row => new { row.CountyName }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
    "result": "context.Counties.OrderByDescending(row => row.Population).Select(row => new { row.CountyName }).Take(1).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3",
    "result": "context.Counties.OrderBy(row => row.Population).Select(row => new { row.CountyName }).Take(3).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT(*) >= 2",
    "result": "context.Counties.Join(context.Elections, T1 => T1.CountyId, T2 => T2.District, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CountyId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.CountyName }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*) >= 2",
    "result": "context.Parties.GroupBy(row => new { row.Party1 }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Party1 }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Party }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Party1 }).Take(1).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Parties.GroupBy(row => new { row.Governor }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Governor }).Take(1).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Comptroller , COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Parties.GroupBy(row => new { row.Comptroller }).Select(group => new { group.Key.Comptroller, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)",
    "result": "context.Parties.Where(row => !context.Elections.Select(row => row.Party).Contains(row.PartyId)).Select(row => new { row.Party1 }).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Economic Matters\"",
    "result": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Committee == \"Appropriations\").Select(row => row.T2.Party1).Intersect(context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Committee == \"Economic Matters\").Select(row => row.T2.Party1)).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Liberal\"",
    "result": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Party1 == \"Democratic\").Select(row => row.T1.Committee).Intersect(context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Party1 == \"Liberal\").Select(row => row.T1.Committee)).ToList();",
    "db_name": "election",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM book",
    "result": "context.Books.Count();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Writer FROM book ORDER BY Writer ASC",
    "result": "context.Books.OrderBy(row => row.Writer).Select(row => new { row.Writer }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Title FROM book ORDER BY Issues ASC",
    "result": "context.Books.OrderBy(row => row.Issues).Select(row => new { row.Title }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\"",
    "result": "context.Books.Where(row => row.Writer != \"Elaine Lee\").Select(row => new { row.Title }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Title , Issues FROM book",
    "result": "context.Books.Select(row => new { row.Title, row.Issues }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Publication_Date FROM publication ORDER BY Price DESC",
    "result": "context.Publications.OrderByDescending(row => row.Price).Select(row => new { row.PublicationDate }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000",
    "result": "context.Publications.Where(row => row.Price > 5000000).Select(row => new { row.Publisher }).Distinct().ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
    "result": "context.Publications.OrderByDescending(row => row.Price).Select(row => new { row.Publisher }).Take(1).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
    "result": "context.Publications.OrderBy(row => row.Price).Select(row => new { row.PublicationDate }).Take(3).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Title , T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID",
    "result": "context.Books.Join(context.Publications, T1 => T1.BookId, T2 => T2.BookId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Title, row.T2.PublicationDate }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000",
    "result": "context.Books.Join(context.Publications, T1 => T1.BookId, T2 => T2.BookId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Price > 4000000).Select(row => new { row.T1.Writer }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC",
    "result": "context.Books.Join(context.Publications, T1 => T1.BookId, T2 => T2.BookId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Price).Select(row => new { row.T1.Title }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1",
    "result": "context.Publications.GroupBy(row => new { row.Publisher }).Where(group => group.Count() > 1).Select(group => new { group.Key.Publisher }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher",
    "result": "context.Publications.GroupBy(row => new { row.Publisher }).Select(group => new { group.Key.Publisher, Count = group.Count() }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Publications.GroupBy(row => new { row.PublicationDate }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PublicationDate }).Take(1).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1",
    "result": "context.Books.GroupBy(row => new { row.Writer }).Where(group => group.Count() > 1).Select(group => new { group.Key.Writer }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
    "result": "context.Books.Where(row => !context.Publications.Select(row => row.BookId).Contains(row.BookId)).Select(row => new { row.Title }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000",
    "result": "context.Publications.Where(row => row.Price > 10000000).Select(row => row.Publisher).Intersect(context.Publications.Where(row => row.Price < 5000000).Select(row => row.Publisher)).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT (DISTINCT Publication_Date) FROM publication",
    "result": "context.Publications.Select(row => row.PublicationDate).Distinct().Count();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Price FROM publication WHERE Publisher = \"Person\" OR Publisher = \"Wiley\"",
    "result": "context.Publications.Where(row => row.Publisher == \"Person\" || row.Publisher == \"Wiley\").Select(row => new { row.Price }).ToList();",
    "db_name": "book_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM artist",
    "result": "context.Artists.Count();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Age FROM artist",
    "result": "context.Artists.Select(row => new { row.Age }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Age) FROM artist",
    "result": "context.Artists.Select(row => row.Age).Average();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Famous_Title FROM artist WHERE Artist = \"Triumfall\"",
    "result": "context.Artists.Where(row => row.Artist1 == \"Triumfall\").Select(row => new { row.FamousTitle }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT distinct(Famous_Release_date) FROM artist",
    "result": "context.Artists.Select(row => new { row.FamousReleaseDate }).Distinct().ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Date_of_ceremony , RESULT FROM music_festival",
    "result": "context.MusicFestivals.Select(row => new { row.DateOfCeremony, row.Result }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Category FROM music_festival WHERE RESULT = \"Awarded\"",
    "result": "context.MusicFestivals.Where(row => row.Result == \"Awarded\").Select(row => new { row.Category }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Weeks_on_Top) , min(Weeks_on_Top) FROM volume",
    "result": "context.Volumes.GroupBy(row => 1).Select(group => new { MaxWeeksOnTop = group.Select(row => row.WeeksOnTop).Max(), MinWeeksOnTop = group.Select(row => row.WeeksOnTop).Min() }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Song FROM volume WHERE Weeks_on_Top > 1",
    "result": "context.Volumes.Where(row => row.WeeksOnTop > 1).Select(row => new { row.Song }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Song FROM volume ORDER BY Song",
    "result": "context.Volumes.OrderBy(row => row.Song).Select(row => new { row.Song }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
    "result": "context.Volumes.Select(row => row.ArtistId).Distinct().Count();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2",
    "result": "context.MusicFestivals.Join(context.Volumes, T1 => T1.Volume, T2 => T2.VolumeId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WeeksOnTop > 2).Select(row => new { row.T1.DateOfCeremony }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T1.Result = \"Nominated\"",
    "result": "context.MusicFestivals.Join(context.Volumes, T1 => T1.Volume, T2 => T2.VolumeId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Result == \"Nominated\").Select(row => new { row.T2.Song }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = \"Gorgoroth\"",
    "result": "context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Artist1 == \"Gorgoroth\").Select(row => new { row.T2.IssueDate }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age >= 32",
    "result": "context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age >= 32).Select(row => new { row.T2.Song }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 25",
    "result": "context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age <= 25).Select(row => (double) row.T2.WeeksOnTop).Average();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2",
    "result": "context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WeeksOnTop > 2).Select(row => new { row.T1.FamousTitle }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Famous_Title , Age FROM artist ORDER BY Age DESC",
    "result": "context.Artists.OrderByDescending(row => row.Age).Select(row => new { row.FamousTitle, row.Age }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1",
    "result": "context.Artists.OrderByDescending(row => row.Age).Select(row => new { row.FamousReleaseDate }).Take(1).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
    "result": "context.MusicFestivals.GroupBy(row => new { row.Category }).Select(group => new { group.Key.Category, Count = group.Count() }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.MusicFestivals.GroupBy(row => new { row.Result }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Result }).Take(1).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*) > 1",
    "result": "context.MusicFestivals.GroupBy(row => new { row.Category }).Where(group => group.Count() > 1).Select(group => new { group.Key.Category }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
    "result": "context.Volumes.OrderByDescending(row => row.WeeksOnTop).Select(row => new { row.Song }).Take(1).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
    "result": "context.Artists.Where(row => !context.Volumes.Select(row => row.ArtistId).Contains(row.ArtistId)).Select(row => new { row.FamousTitle }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < 2",
    "result": "context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WeeksOnTop > 2).Select(row => row.T1.FamousTitle).Intersect(context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WeeksOnTop < 2).Select(row => row.T1.FamousTitle)).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Date_of_ceremony FROM music_festival WHERE Category = \"Best Song\" AND RESULT = \"Awarded\"",
    "result": "context.MusicFestivals.Where(row => row.Category == \"Best Song\" && row.Result == \"Awarded\").Select(row => new { row.DateOfCeremony }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1",
    "result": "context.Volumes.OrderBy(row => row.WeeksOnTop).Select(row => new { row.IssueDate }).Take(1).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT RESULT , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
    "result": "context.MusicFestivals.GroupBy(row => new { row.Result }).Select(group => new { group.Key.Result, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 23",
    "result": "context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age <= 23).Select(row => new { row.T2.IssueDate }).ToList();",
    "db_name": "music_4",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Participant_ID , Participant_Type_Code , Participant_Details FROM Participants",
    "result": "context.Participants.Select(row => new { row.ParticipantId, row.ParticipantTypeCode, row.ParticipantDetails }).ToList();",
    "db_name": "local_govt_in_alabama",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM participants WHERE participant_type_code = 'Organizer'",
    "result": "context.Participants.Where(row => row.ParticipantTypeCode == \"Organizer\").Count();",
    "db_name": "local_govt_in_alabama",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT service_type_code FROM services ORDER BY service_type_code",
    "result": "context.Services.OrderBy(row => row.ServiceTypeCode).Select(row => new { row.ServiceTypeCode }).ToList();",
    "db_name": "local_govt_in_alabama",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Participants.GroupBy(row => new { row.ParticipantTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ParticipantTypeCode }).Take(1).ToList();",
    "db_name": "local_govt_in_alabama",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Events.GroupBy(row => new { row.EventId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.EventId }).Take(1).ToList();",
    "db_name": "local_govt_in_alabama",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 80}]\", linq_results: \"[{0: 3}]\" }"
  },
  {
    "query": "SELECT count(*) FROM device",
    "result": "context.Devices.Count();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Carrier FROM device ORDER BY Carrier ASC",
    "result": "context.Devices.OrderBy(row => row.Carrier).Select(row => new { row.Carrier }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
    "result": "context.Devices.Where(row => row.SoftwarePlatform != \"Android\").Select(row => new { row.Carrier }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC",
    "result": "context.Shops.OrderBy(row => row.OpenYear).Select(row => new { row.ShopName }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Quantity) FROM stock",
    "result": "context.Stocks.Select(row => row.Quantity).Average();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Shop_Name , LOCATION FROM shop ORDER BY Shop_Name ASC",
    "result": "context.Shops.OrderBy(row => row.ShopName).Select(row => new { row.ShopName, row.Location }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT Software_Platform) FROM device",
    "result": "context.Devices.Select(row => row.SoftwarePlatform).Distinct().Count();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Open_Date , Open_Year FROM shop WHERE Shop_Name = \"Apple\"",
    "result": "context.Shops.Where(row => row.ShopName == \"Apple\").Select(row => new { row.OpenDate, row.OpenYear }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1",
    "result": "context.Shops.OrderByDescending(row => row.OpenYear).Select(row => new { row.ShopName }).Take(1).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Shop_Name , T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID",
    "result": "context.Stocks.Join(context.Devices, T1 => T1.DeviceId, T2 => T2.DeviceId, (T1, T2) => new { T1, T2 }).Join(context.Shops, joined => joined.T1.ShopId, T3 => T3.ShopId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.ShopName, row.T2.Carrier }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*) > 1",
    "result": "context.Stocks.Join(context.Shops, T1 => T1.ShopId, T2 => T2.ShopId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ShopId }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.ShopName }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Stocks.Join(context.Shops, T1 => T1.ShopId, T2 => T2.ShopId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ShopId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.ShopName }).Take(1).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1",
    "result": "context.Stocks.Join(context.Shops, T1 => T1.ShopId, T2 => T2.ShopId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ShopId }).OrderByDescending(group => group.Sum(row => row.T1.Quantity)).Select(group => new { group.First().T2.ShopName }).Take(1).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform",
    "result": "context.Devices.GroupBy(row => new { row.SoftwarePlatform }).Select(group => new { group.Key.SoftwarePlatform, Count = group.Count() }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
    "result": "context.Devices.GroupBy(row => new { row.SoftwarePlatform }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.SoftwarePlatform }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Devices.GroupBy(row => new { row.SoftwarePlatform }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.SoftwarePlatform }).Take(1).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)",
    "result": "context.Shops.Where(row => !context.Stocks.Select(row => row.ShopId).Contains(row.ShopId)).Select(row => new { row.ShopName }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM shop WHERE Open_Year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year < 2008",
    "result": "context.Shops.Where(row => row.OpenYear > 2012).Select(row => row.Location).Intersect(context.Shops.Where(row => row.OpenYear < 2008).Select(row => row.Location)).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)",
    "result": "context.Devices.Where(row => !context.Stocks.Select(row => row.DeviceId).Contains(row.DeviceId)).Select(row => new { row.Carrier }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*) > 1",
    "result": "context.Stocks.Join(context.Devices, T1 => T1.DeviceId, T2 => T2.DeviceId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeviceId }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.Carrier }).ToList();",
    "db_name": "device",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM club",
    "result": "context.Clubs.Count();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Region FROM club ORDER BY Region ASC",
    "result": "context.Clubs.OrderBy(row => row.Region).Select(row => new { row.Region }).Distinct().ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Gold) FROM club_rank",
    "result": "context.ClubRanks.Select(row => (double) row.Gold).Average();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Competition_type , Country FROM competition",
    "result": "context.Competitions.Select(row => new { row.CompetitionType, row.Country }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"",
    "result": "context.Competitions.Where(row => row.CompetitionType != \"Tournament\").Select(row => new { row.Year }).Distinct().ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Silver) , min(Silver) FROM club_rank",
    "result": "context.ClubRanks.GroupBy(row => 1).Select(group => new { MaxSilver = group.Select(row => row.Silver).Max(), MinSilver = group.Select(row => row.Silver).Min() }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM club_rank WHERE Total < 10",
    "result": "context.ClubRanks.Where(row => row.Total < 10).Count();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM club ORDER BY Start_year ASC",
    "result": "context.Clubs.OrderBy(row => row.StartYear).Select(row => new { row.Name }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM club ORDER BY name DESC",
    "result": "context.Clubs.OrderByDescending(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
    "result": "context.Clubs.Join(context.Players, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name, row.T2.PlayerId }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = \"Right Wing\"",
    "result": "context.Clubs.Join(context.Players, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Position == \"Right Wing\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.name = \"AIB\"",
    "result": "context.Clubs.Join(context.Players, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"AIB\").Select(row => (double) row.T2.Points).Average();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT POSITION , avg(Points) FROM player GROUP BY POSITION",
    "result": "context.Players.GroupBy(row => new { row.Position }).Select(group => new { group.Key.Position, AveragePoints = group.Select(row => row.Points).Average() }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points) >= 20",
    "result": "context.Players.GroupBy(row => new { row.Name }).Where(group => group.Average(row => row.Points) >= 20).Select(group => new { group.First().Position }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type",
    "result": "context.Competitions.GroupBy(row => new { row.CompetitionType }).Select(group => new { group.Key.CompetitionType, Count = group.Count() }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Competitions.GroupBy(row => new { row.CompetitionType }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CompetitionType }).Take(1).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*) <= 5",
    "result": "context.Competitions.GroupBy(row => new { row.CompetitionType }).Where(group => group.Count() <= 5).Select(group => new { group.Key.CompetitionType }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
    "result": "context.Clubs.Where(row => !context.Players.Select(row => row.ClubId).Contains(row.ClubId)).Select(row => new { row.Name }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10",
    "result": "context.Players.Where(row => row.Points > 20).Select(row => row.Position).Intersect(context.Players.Where(row => row.Points < 10).Select(row => row.Position)).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(Points) FROM player",
    "result": "context.Players.Select(row => row.Points).Sum();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT POSITION) FROM player",
    "result": "context.Players.Select(row => row.Position).Distinct().Count();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM player WHERE points > (SELECT avg(points) FROM player)",
    "result": "context.Players.Where(row => row.Points > context.Players.Select(row => (double) row.Points).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , POSITION FROM player WHERE points < 30 GROUP BY POSITION",
    "result": "context.Players.Where(row => row.Points < 30).GroupBy(row => new { row.Position }).Select(group => new { Count = group.Count(), group.Key.Position }).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT country FROM competition WHERE competition_type = 'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Competitions.Where(row => row.CompetitionType == \"Tournament\").GroupBy(row => new { row.Country }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Country }).Take(1).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT country FROM competition WHERE competition_type = 'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type = 'Tournament'",
    "result": "context.Competitions.Where(row => row.CompetitionType == \"Friendly\").Select(row => row.Country).Intersect(context.Competitions.Where(row => row.CompetitionType == \"Tournament\").Select(row => row.Country)).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type = 'Friendly'",
    "result": "context.Competitions.Select(row => row.Country).Except(context.Competitions.Where(row => row.CompetitionType == \"Friendly\").Select(row => row.Country)).ToList();",
    "db_name": "sports_competition",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM submission",
    "result": "context.Submissions.Count();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Author FROM submission ORDER BY Scores ASC",
    "result": "context.Submissions.OrderBy(row => row.Scores).Select(row => new { row.Author }).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Author , College FROM submission",
    "result": "context.Submissions.Select(row => new { row.Author, row.College }).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Author FROM submission WHERE College = \"Florida\" OR College = \"Temple\"",
    "result": "context.Submissions.Where(row => row.College == \"Florida\" || row.College == \"Temple\").Select(row => new { row.Author }).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Scores) FROM submission",
    "result": "context.Submissions.Select(row => (double) row.Scores).Average();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
    "result": "context.Submissions.OrderByDescending(row => row.Scores).Select(row => new { row.Author }).Take(1).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT College , COUNT(*) FROM submission GROUP BY College",
    "result": "context.Submissions.GroupBy(row => new { row.College }).Select(group => new { group.Key.College, Count = group.Count() }).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Submissions.GroupBy(row => new { row.College }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.College }).Take(1).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT College FROM submission WHERE Scores > 90 INTERSECT SELECT College FROM submission WHERE Scores < 80",
    "result": "context.Submissions.Where(row => row.Scores > 90).Select(row => row.College).Intersect(context.Submissions.Where(row => row.Scores < 80).Select(row => row.College)).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Author , T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
    "result": "context.Acceptances.Join(context.Submissions, T1 => T1.SubmissionId, T2 => T2.SubmissionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Author, row.T1.Result }).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1",
    "result": "context.Acceptances.Join(context.Submissions, T1 => T1.SubmissionId, T2 => T2.SubmissionId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Scores).Select(row => new { row.T1.Result }).Take(1).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author",
    "result": "context.Acceptances.Join(context.Submissions, T1 => T1.SubmissionId, T2 => T2.SubmissionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Author }).Select(group => new { group.Key.Author, CountDistinctWorkshopId = group.Select(row => row.T1.WorkshopId).Distinct().Count() }).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id) > 1",
    "result": "context.Acceptances.Join(context.Submissions, T1 => T1.SubmissionId, T2 => T2.SubmissionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Author }).Where(group => group.Count(row => row.T1.WorkshopId) > 1).Select(group => new { group.Key.Author }).ToList();",
    "db_name": "workshop_paper",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,204): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:02.43"
  },
  {
    "query": "SELECT Date , Venue FROM workshop ORDER BY Venue",
    "result": "context.Workshops.OrderBy(row => row.Venue).Select(row => new { row.Date, row.Venue }).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
    "result": "context.Submissions.Where(row => !context.Acceptances.Select(row => row.SubmissionId).Contains(row.SubmissionId)).Select(row => new { row.Author }).ToList();",
    "db_name": "workshop_paper",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
    "result": "context.Orders.OrderByDescending(row => row.DateOrderPlaced).Select(row => new { row.OrderId }).Take(1).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT order_id , customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
    "result": "context.Orders.OrderBy(row => row.DateOrderPlaced).Select(row => new { row.OrderId, row.CustomerId }).Take(1).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"",
    "result": "context.Shipments.Where(row => row.ShipmentTrackingNumber == \"3452\").Select(row => new { row.OrderId }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT order_item_id FROM order_items WHERE product_id = 11",
    "result": "context.OrderItems.Where(row => row.ProductId == 11).Select(row => new { row.OrderItemId }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"",
    "result": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatus == \"Packing\").Select(row => new { row.T1.CustomerName }).Distinct().ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"",
    "result": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatus == \"On Road\").Select(row => new { row.T1.CustomerDetails }).Distinct().ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.CustomerName }).Take(1).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CustomerId }).Take(1).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.order_id , T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
    "result": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CustomerName == \"Jeramie\").Select(row => new { row.T2.OrderId, row.T2.OrderStatus }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
    "result": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CustomerName == \"Jeramie\").Select(row => new { row.T2.DateOrderPlaced }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
    "result": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DateOrderPlaced >= \"2009-01-01\" && row.T2.DateOrderPlaced <= \"2010-01-01\").Select(row => new { row.T1.CustomerName }).ToList();",
    "db_name": "tracking_orders",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,176): error CS0019: Operator '<=' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.59"
  },
  {
    "query": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
    "result": "context.Orders.Join(context.OrderItems, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DateOrderPlaced >= \"1975-01-01\" && row.T1.DateOrderPlaced <= \"1976-01-01\").Select(row => new { row.T2.ProductId }).Distinct().ToList();",
    "db_name": "tracking_orders",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,171): error CS0019: Operator '<=' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.60"
  },
  {
    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
    "result": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatus == \"On Road\").Select(row => row.T1.CustomerName).Intersect(context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatus == \"Shipped\").Select(row => row.T1.CustomerName)).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
    "result": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatus == \"On Road\").Select(row => row.T1.CustomerId).Intersect(context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatus == \"Shipped\").Select(row => row.T1.CustomerId)).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
    "result": "context.Orders.Join(context.Shipments, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ShipmentTrackingNumber == \"3452\").Select(row => new { row.T1.DateOrderPlaced }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
    "result": "context.Orders.Join(context.Shipments, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.InvoiceNumber == 10).Select(row => new { row.T1.DateOrderPlaced }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
    "result": "context.Orders.Join(context.OrderItems, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Join(context.Products, joined => joined.T2.ProductId, T3 => T3.ProductId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.ProductId }).Select(group => new { Count = group.Count(), group.Key.ProductId }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.product_name , count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
    "result": "context.Orders.Join(context.OrderItems, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Join(context.Products, joined => joined.T2.ProductId, T3 => T3.ProductId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.ProductId }).Select(group => new { group.First().T3.ProductName, Count = group.Count() }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
    "result": "context.Shipments.Where(row => row.ShipmentDate > \"2000-01-01\").Select(row => new { row.OrderId }).ToList();",
    "db_name": "tracking_orders",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.56"
  },
  {
    "query": "SELECT order_id FROM shipments WHERE shipment_date = (SELECT max(shipment_date) FROM shipments)",
    "result": "context.Shipments.Where(row => row.ShipmentDate == context.Shipments.Select(row => row.ShipmentDate).Max()).Select(row => new { row.OrderId }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT product_name FROM products ORDER BY product_name",
    "result": "context.Products.OrderBy(row => row.ProductName).Select(row => new { row.ProductName }).Distinct().ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
    "result": "context.Orders.OrderBy(row => row.DateOrderPlaced).Select(row => new { row.OrderId }).Distinct().ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Orders.Join(context.OrderItems, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.OrderId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.OrderId }).Take(1).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
    "result": "context.Invoices.Where(row => row.InvoiceDate < \"1989-09-03\" || row.InvoiceDate > \"2007-12-25\").Select(row => new { row.InvoiceNumber }).ToList();",
    "db_name": "tracking_orders",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,76): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.53"
  },
  {
    "query": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
    "result": "context.Invoices.Where(row => row.InvoiceDate < \"1989-09-03\" || row.InvoiceDate > \"2007-12-25\").Select(row => new { row.InvoiceDetails }).Distinct().ToList();",
    "db_name": "tracking_orders",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,76): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.50"
  },
  {
    "query": "SELECT T2.customer_name , count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*) >= 2",
    "result": "context.Orders.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CustomerId }).Select(group => new { group.First().T2.CustomerName, Count = group.Count() }).Where(group => group.Count >= 2).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*) <= 2",
    "result": "context.Orders.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CustomerId }).Where(group => group.Count() <= 2).Select(group => new { group.First().T2.CustomerName }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*) >= 1",
    "result": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.OrderItems, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Products, joined => joined.T3.ProductId, T4 => T4.ProductId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.ProductName == \"food\").GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 1).Select(group => new { group.First().T1.CustomerName }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*) >= 1",
    "result": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.OrderItems, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Products, joined => joined.T3.ProductId, T4 => T4.ProductId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T3.OrderItemStatus == \"Cancel\" && row.T4.ProductName == \"food\").GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 1).Select(group => new { group.First().T1.CustomerName }).ToList();",
    "db_name": "tracking_orders",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM building",
    "result": "context.Buildings.Count();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , street_address , floors FROM building ORDER BY floors",
    "result": "context.Buildings.OrderBy(row => row.Floors).Select(row => new { row.Name, row.StreetAddress, row.Floors }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1",
    "result": "context.Buildings.OrderByDescending(row => row.HeightFeet).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(floors) , max(floors) , min(floors) FROM building",
    "result": "context.Buildings.GroupBy(row => 1).Select(group => new { AverageFloors = group.Select(row => row.Floors).Average(), MaxFloors = group.Select(row => row.Floors).Max(), MinFloors = group.Select(row => row.Floors).Min() }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM building WHERE height_feet > (SELECT avg(height_feet) FROM building) OR floors > (SELECT avg(floors) FROM building)",
    "result": "context.Buildings.Where(row => row.HeightFeet > context.Buildings.Select(row => row.HeightFeet).Average() || row.Floors > context.Buildings.Select(row => row.Floors).Average()).Count();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM building WHERE height_feet >= 200 AND floors >= 20",
    "result": "context.Buildings.Where(row => row.HeightFeet >= 200 && row.Floors >= 20).Select(row => new { row.Name }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT institution , LOCATION FROM institution WHERE founded > 1990 AND TYPE = 'Private'",
    "result": "context.Institutions.Where(row => row.Founded > 1990 && row.Type == \"Private\").Select(row => new { row.Institution1, row.Location }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE , count(*) , sum(enrollment) FROM institution GROUP BY TYPE",
    "result": "context.Institutions.GroupBy(row => new { row.Type }).Select(group => new { group.Key.Type, Count = group.Count(), SumEnrollment = group.Select(row => row.Enrollment).Sum() }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Institutions.GroupBy(row => new { row.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE FROM institution WHERE founded > 1990 AND enrollment >= 1000",
    "result": "context.Institutions.Where(row => row.Founded > 1990 && row.Enrollment >= 1000).Select(row => new { row.Type }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)",
    "result": "context.Buildings.Where(row => !context.Institutions.Select(row => row.BuildingId).Contains(row.BuildingId)).Select(row => new { row.Name }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded = 2003",
    "result": "context.Buildings.Select(row => row.Name).Except(context.Buildings.Join(context.Institutions, T1 => T1.BuildingId, T2 => T2.BuildingId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Founded == 2003).Select(row => row.T1.Name)).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id",
    "result": "context.Buildings.Join(context.Institutions, T1 => T1.BuildingId, T2 => T2.BuildingId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.BuildingId }).Select(group => new { group.First().T1.Name, Count = group.Count() }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded > 1880 GROUP BY T1.building_id HAVING count(*) >= 2",
    "result": "context.Buildings.Join(context.Institutions, T1 => T1.BuildingId, T2 => T2.BuildingId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Founded > 1880).GroupBy(row => new { row.T1.BuildingId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.Name, group.First().T1.HeightFeet }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT TYPE FROM institution",
    "result": "context.Institutions.Select(row => new { row.Type }).Distinct().ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.institution , count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id",
    "result": "context.Institutions.Join(context.Proteins, T1 => T1.InstitutionId, T2 => T2.InstitutionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.InstitutionId }).Select(group => new { group.First().T1.Institution1, Count = group.Count() }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id WHERE T1.founded > 1880 OR T1.type = 'Private'",
    "result": "context.Institutions.Join(context.Proteins, T1 => T1.InstitutionId, T2 => T2.InstitutionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Founded > 1880 || row.T1.Type == \"Private\").Count();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.protein_name , T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id",
    "result": "context.Institutions.Join(context.Proteins, T1 => T1.InstitutionId, T2 => T2.InstitutionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.ProteinName, row.T1.Institution1 }).ToList();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id JOIN building AS T3 ON T3.building_id = T1.building_id WHERE T3.floors >= 20",
    "result": "context.Institutions.Join(context.Proteins, T1 => T1.InstitutionId, T2 => T2.InstitutionId, (T1, T2) => new { T1, T2 }).Join(context.Buildings, joined => joined.T1.BuildingId, T3 => T3.BuildingId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Floors >= 20).Count();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)",
    "result": "context.Institutions.Where(row => !context.Proteins.Select(row => row.InstitutionId).Contains(row.InstitutionId)).Count();",
    "db_name": "protein_institute",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Faculty",
    "result": "context.Faculties.Count();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT rank FROM Faculty",
    "result": "context.Faculties.Select(row => new { row.Rank }).Distinct().ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT building FROM Faculty",
    "result": "context.Faculties.Select(row => new { row.Building }).Distinct().ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT rank , Fname , Lname FROM Faculty",
    "result": "context.Faculties.Select(row => new { row.Rank, row.Fname, row.Lname }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Fname , Lname , phone FROM Faculty WHERE Sex = 'F'",
    "result": "context.Faculties.Where(row => row.Sex == \"F\").Select(row => new { row.Fname, row.Lname, row.Phone }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT FacID FROM Faculty WHERE Sex = 'M'",
    "result": "context.Faculties.Where(row => row.Sex == \"M\").Select(row => new { row.FacId }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Faculty WHERE Sex = 'F' AND Rank = \"Professor\"",
    "result": "context.Faculties.Where(row => row.Sex == \"F\" && row.Rank == \"Professor\").Count();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT phone , room , building FROM Faculty WHERE Fname = \"Jerry\" AND Lname = \"Prince\"",
    "result": "context.Faculties.Where(row => row.Fname == \"Jerry\" && row.Lname == \"Prince\").Select(row => new { row.Phone, row.Room, row.Building }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Faculty WHERE Rank = \"Professor\" AND building = \"NEB\"",
    "result": "context.Faculties.Where(row => row.Rank == \"Professor\" && row.Building == \"NEB\").Count();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT fname , lname FROM Faculty WHERE Rank = \"Instructor\"",
    "result": "context.Faculties.Where(row => row.Rank == \"Instructor\").Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT building , count(*) FROM Faculty GROUP BY building",
    "result": "context.Faculties.GroupBy(row => new { row.Building }).Select(group => new { group.Key.Building, Count = group.Count() }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Faculties.GroupBy(row => new { row.Building }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Building }).Take(1).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT building FROM Faculty WHERE rank = \"Professor\" GROUP BY building HAVING count(*) >= 10",
    "result": "context.Faculties.Where(row => row.Rank == \"Professor\").GroupBy(row => new { row.Building }).Where(group => group.Count() >= 10).Select(group => new { group.Key.Building }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT rank , count(*) FROM Faculty GROUP BY rank",
    "result": "context.Faculties.GroupBy(row => new { row.Rank }).Select(group => new { group.Key.Rank, Count = group.Count() }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT rank , sex , count(*) FROM Faculty GROUP BY rank , sex",
    "result": "context.Faculties.GroupBy(row => new { row.Rank, row.Sex }).Select(group => new { group.Key.Rank, group.Key.Sex, Count = group.Count() }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Faculties.GroupBy(row => new { row.Rank }).OrderBy(group => group.Count()).Select(group => new { group.Key.Rank }).Take(1).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex",
    "result": "context.Faculties.Where(row => row.Rank == \"AsstProf\").GroupBy(row => new { row.Sex }).Select(group => new { group.Key.Sex, Count = group.Count() }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T2.fname = \"Linda\" AND T2.lname = \"Smith\"",
    "result": "context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Fname == \"Linda\" && row.T2.Lname == \"Smith\").Select(row => new { row.T1.Fname, row.T1.Lname }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.rank = \"Professor\"",
    "result": "context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Rank == \"Professor\").Select(row => new { row.T2.StuId }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.fname , T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.fname = \"Michael\" AND T1.lname = \"Goodrich\"",
    "result": "context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Fname == \"Michael\" && row.T1.Lname == \"Goodrich\").Select(row => new { row.T2.Fname, row.T2.Lname }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.FacID , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID",
    "result": "context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).Select(group => new { group.Key.FacId, Count = group.Count() }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank",
    "result": "context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Rank }).Select(group => new { group.Key.Rank, Count = group.Count() }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Fname, group.First().T1.Lname }).Take(1).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID HAVING count(*) >= 2",
    "result": "context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.FacId }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student",
    "result": "context.Faculties.Select(row => row.FacId).Except(context.Students.Where(row => row.Advisor.HasValue).Select(row => row.Advisor.Value)).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT activity_name FROM Activity",
    "result": "context.Activities.Select(row => new { row.ActivityName }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Activity",
    "result": "context.Activities.Count();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in",
    "result": "context.FacultyParticipatesIns.Select(row => row.FacId).Distinct().Count();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in",
    "result": "context.Faculties.Select(row => row.FacId).Except(context.FacultyParticipatesIns.Where(row => row.FacId.HasValue).Select(row => row.FacId.Value)).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
    "result": "context.FacultyParticipatesIns.Where(row => row.FacId.HasValue).Select(row => row.FacId.Value).Intersect(context.Students.Where(row => row.Advisor.HasValue).Select(row => row.Advisor.Value)).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID WHERE T1.fname = \"Mark\" AND T1.lname = \"Giuliano\"",
    "result": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Fname == \"Mark\" && row.T1.Lname == \"Giuliano\").Count();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = \"Mark\" AND T1.lname = \"Giuliano\"",
    "result": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Join(context.Activities, joined => joined.T2.Actid, T3 => T3.Actid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Fname == \"Mark\" && row.T1.Lname == \"Giuliano\").Select(row => new { row.T3.ActivityName }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.fname , T1.lname , count(*) , T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID",
    "result": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).Select(group => new { group.First().T1.Fname, group.First().T1.Lname, Count = group.Count(), group.Key.FacId }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID",
    "result": "context.Activities.Join(context.FacultyParticipatesIns, T1 => T1.Actid, T2 => T2.Actid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Actid }).Select(group => new { group.First().T1.ActivityName, Count = group.Count() }).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Fname, group.First().T1.Lname }).Take(1).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Activities.Join(context.FacultyParticipatesIns, T1 => T1.Actid, T2 => T2.Actid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Actid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.ActivityName }).Take(1).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
    "result": "context.Students.Select(row => row.StuId).Except(context.ParticipatesIns.Where(row => row.Stuid.HasValue).Select(row => row.Stuid.Value)).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age < 20",
    "result": "context.ParticipatesIns.Where(row => row.Stuid.HasValue).Select(row => row.Stuid.Value).Intersect(context.Students.Where(row => row.Age < 20).Select(row => row.StuId)).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.fname , T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Students.Join(context.ParticipatesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StuId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Fname, group.First().T1.Lname }).Take(1).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Activities.Join(context.ParticipatesIns, T1 => T1.Actid, T2 => T2.Actid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Actid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.ActivityName }).Take(1).ToList();",
    "db_name": "activity_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'",
    "result": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => new { Pair1 = T1.FacId, Pair2 = T2.Actid }, T2 => new { Pair1 = T2.FacId, Pair2 = T2.Actid }, (T1, T2) => new { T1, T2 }).SelectMany(s => context.Activities, (joined, T3) => new { joined.T2, T3 }).Where(row => row.T3.ActivityName == \"Canoeing\" || row.T3.ActivityName == \"Kayaking\").Select(row => new { row.T1.Lname }).Distinct().ToList();",
    "db_name": "activity_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,105): error CS0103: The name 'T2' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.08"
  },
  {
    "query": "SELECT lname FROM faculty WHERE rank = 'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'",
    "result": "context.Faculties.Where(row => row.Rank == \"Professor\").Select(row => row.Lname).Except(context.Faculties.Join(context.FacultyParticipatesIns, T1 => new { Pair1 = T1.FacId, Pair2 = T2.Actid }, T2 => new { Pair1 = T2.FacId, Pair2 = T2.Actid }, (T1, T2) => new { T1, T2 }).SelectMany(s => context.Activities, (joined, T3) => new { joined.T2, T3 }).Where(row => row.T3.ActivityName == \"Canoeing\" || row.T3.ActivityName == \"Kayaking\").Select(row => row.T1.Lname).Distinct()).ToList();",
    "db_name": "activity_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,193): error CS0103: The name 'T2' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.28"
  },
  {
    "query": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'",
    "result": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => new { Pair1 = T1.FacId, Pair2 = T2.Actid }, T2 => new { Pair1 = T2.FacId, Pair2 = T2.Actid }, (T1, T2) => new { T1, T2 }).SelectMany(s => context.Activities, (joined, T3) => new { joined.T2, T3 }).Where(row => row.T3.ActivityName == \"Canoeing\").Select(row => row.T1.Lname).Intersect(context.Faculties.Join(context.FacultyParticipatesIns, T1 => new { Pair1 = T1.FacId, Pair2 = T2.Actid }, T2 => new { Pair1 = T2.FacId, Pair2 = T2.Actid }, (T1, T2) => new { T1, T2 }).SelectMany(s => context.Activities, (joined, T3) => new { joined.T2, T3 }).Where(row => row.T3.ActivityName == \"Kayaking\").Select(row => row.T1.Lname)).ToList();",
    "db_name": "activity_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,449): error CS0103: The name 'T2' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:02.24"
  },
  {
    "query": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Kayaking'",
    "result": "context.ParticipatesIns.Join(context.Activities, T2 => T2.Actid, T2 => T2.Actid, (T2, T2) => new { T2, T2 }).Where(row => row.T2.ActivityName == \"Canoeing\").Select(row => row.T1.Stuid).Intersect(context.ParticipatesIns.Join(context.Activities, T2 => T2.Actid, T2 => T2.Actid, (T2, T2) => new { T2, T2 }).Where(row => row.T2.ActivityName == \"Kayaking\").Select(row => row.T1.Stuid)).ToList();",
    "db_name": "activity_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,310): error CS0833: An anonymous type cannot have multiple properties with the same name [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    8 Error(s)\n\nTime Elapsed 00:00:01.91"
  },
  {
    "query": "SELECT count(*) FROM entrepreneur",
    "result": "context.Entrepreneurs.Count();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC",
    "result": "context.Entrepreneurs.OrderByDescending(row => row.MoneyRequested).Select(row => new { row.Company }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Company , Investor FROM entrepreneur",
    "result": "context.Entrepreneurs.Select(row => new { row.Company, row.Investor }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Money_Requested) FROM entrepreneur",
    "result": "context.Entrepreneurs.Select(row => (double) row.MoneyRequested).Average();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM People ORDER BY Weight ASC",
    "result": "context.People.OrderBy(row => row.Weight).Select(row => new { row.Name }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
    "result": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
    "result": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Investor != \"Rachel Elnaugh\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
    "result": "context.People.OrderBy(row => row.Height).Select(row => new { row.Weight }).Take(1).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
    "result": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Weight).Select(row => new { row.T2.Name }).Take(1).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85",
    "result": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Height > 1.85).Select(row => row.T1.MoneyRequested).Sum();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"",
    "result": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Investor == \"Simon Woodroffe\" || row.T1.Investor == \"Peter Jones\").Select(row => new { row.T2.DateOfBirth }).ToList();",
    "db_name": "entrepreneur",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 1972-02-06}, {0: 1981-11-21}]\", linq_results: \"[{0: 06.02.1972}, {0: 21.11.1981}]\" }"
  },
  {
    "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested DESC",
    "result": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.MoneyRequested).Select(row => new { row.T2.Weight }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "result": "context.Entrepreneurs.GroupBy(row => new { row.Investor }).Select(group => new { group.Key.Investor, Count = group.Count() }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Entrepreneurs.GroupBy(row => new { row.Investor }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Investor }).Take(1).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*) >= 2",
    "result": "context.Entrepreneurs.GroupBy(row => new { row.Investor }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Investor }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name , T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested",
    "result": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T1.MoneyRequested).Select(row => new { row.T2.Name, row.T1.Company }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
    "result": "context.People.Where(row => !context.Entrepreneurs.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000",
    "result": "context.Entrepreneurs.Where(row => row.MoneyRequested > 140000).Select(row => row.Investor).Intersect(context.Entrepreneurs.Where(row => row.MoneyRequested < 120000).Select(row => row.Investor)).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT Company) FROM entrepreneur",
    "result": "context.Entrepreneurs.Select(row => row.Company).Distinct().Count();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
    "result": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Height).Select(row => new { row.T1.Company }).Take(1).ToList();",
    "db_name": "entrepreneur",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Apartment_Bookings",
    "result": "context.ApartmentBookings.Count();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT booking_start_date , booking_end_date FROM Apartment_Bookings",
    "result": "context.ApartmentBookings.Select(row => new { row.BookingStartDate, row.BookingEndDate }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT building_description FROM Apartment_Buildings",
    "result": "context.ApartmentBuildings.Select(row => new { row.BuildingDescription }).Distinct().ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = \"Emma\"",
    "result": "context.ApartmentBuildings.Where(row => row.BuildingManager == \"Emma\").Select(row => new { row.BuildingShortName }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT building_address , building_phone FROM Apartment_Buildings WHERE building_manager = \"Brenden\"",
    "result": "context.ApartmentBuildings.Where(row => row.BuildingManager == \"Brenden\").Select(row => new { row.BuildingAddress, row.BuildingPhone }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"",
    "result": "context.ApartmentBuildings.Where(row => EF.Functions.Like(row.BuildingFullName, \"%court%\")).Select(row => new { row.BuildingFullName }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(bathroom_count) , max(bathroom_count) FROM Apartments",
    "result": "context.Apartments.GroupBy(row => 1).Select(group => new { MinBathroomCount = group.Select(row => row.BathroomCount).Min(), MaxBathroomCount = group.Select(row => row.BathroomCount).Max() }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(bedroom_count) FROM Apartments",
    "result": "context.Apartments.Select(row => row.BedroomCount).Average();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT apt_number , room_count FROM Apartments",
    "result": "context.Apartments.Select(row => new { row.AptNumber, row.RoomCount }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code = \"Studio\"",
    "result": "context.Apartments.Where(row => row.AptTypeCode == \"Studio\").Select(row => row.RoomCount).ToList().Select(value => double.Parse(value)).ToList().Average();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT apt_number FROM Apartments WHERE apt_type_code = \"Flat\"",
    "result": "context.Apartments.Where(row => row.AptTypeCode == \"Flat\").Select(row => new { row.AptNumber }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT guest_first_name , guest_last_name FROM Guests",
    "result": "context.Guests.Select(row => new { row.GuestFirstName, row.GuestLastName }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_of_birth FROM Guests WHERE gender_code = \"Male\"",
    "result": "context.Guests.Where(row => row.GenderCode == \"Male\").Select(row => new { row.DateOfBirth }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.apt_number , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id",
    "result": "context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.AptNumber, T1BookingStartDate = row.T1.BookingStartDate, T1BookingStartDate = row.T1.BookingStartDate }).ToList();",
    "db_name": "apartment_rentals",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,207): error CS0833: An anonymous type cannot have multiple properties with the same name [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.29"
  },
  {
    "query": "SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"",
    "result": "context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AptTypeCode == \"Duplex\").Select(row => new { T1BookingStartDate = row.T1.BookingStartDate, T1BookingStartDate = row.T1.BookingStartDate }).ToList();",
    "db_name": "apartment_rentals",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,234): error CS0833: An anonymous type cannot have multiple properties with the same name [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.69"
  },
  {
    "query": "SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2",
    "result": "context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BedroomCount > 2).Select(row => new { T1BookingStartDate = row.T1.BookingStartDate, T1BookingStartDate = row.T1.BookingStartDate }).ToList();",
    "db_name": "apartment_rentals",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,227): error CS0833: An anonymous type cannot have multiple properties with the same name [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.38"
  },
  {
    "query": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = \"Suite 634\"",
    "result": "context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AptNumber == \"Suite 634\").Select(row => new { row.T1.BookingStatusCode }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\"",
    "result": "context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Confirmed\").Select(row => new { row.T2.AptNumber }).Distinct().ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\"",
    "result": "context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Provisional\").Select(row => row.T2.RoomCount).ToList().Select(value => double.Parse(value)).ToList().Average();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.guest_first_name , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id",
    "result": "context.ApartmentBookings.Join(context.Guests, T1 => T1.GuestId, T2 => T2.GuestId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.GuestFirstName, T1BookingStartDate = row.T1.BookingStartDate, T1BookingStartDate = row.T1.BookingStartDate }).ToList();",
    "db_name": "apartment_rentals",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,212): error CS0833: An anonymous type cannot have multiple properties with the same name [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.42"
  },
  {
    "query": "SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"",
    "result": "context.ApartmentBookings.Join(context.Guests, T1 => T1.GuestId, T2 => T2.GuestId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.GenderCode == \"Female\").Select(row => new { T1BookingStartDate = row.T1.BookingStartDate, T1BookingStartDate = row.T1.BookingStartDate }).ToList();",
    "db_name": "apartment_rentals",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,233): error CS0833: An anonymous type cannot have multiple properties with the same name [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.65"
  },
  {
    "query": "SELECT T2.guest_first_name , T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T1.booking_status_code = \"Confirmed\"",
    "result": "context.ApartmentBookings.Join(context.Guests, T1 => T1.GuestId, T2 => T2.GuestId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Confirmed\").Select(row => new { row.T2.GuestFirstName, row.T2.GuestLastName }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4",
    "result": "context.ApartmentFacilities.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BedroomCount > 4).Select(row => new { row.T1.FacilityCode }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.facility_code = \"Gym\"",
    "result": "context.ApartmentFacilities.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FacilityCode == \"Gym\").Select(row => row.T2.RoomCount).Sum();",
    "db_name": "apartment_rentals",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,12): error CS1929: 'IQueryable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.36"
  },
  {
    "query": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = \"Columbus Square\"",
    "result": "context.ApartmentBuildings.Join(context.Apartments, T1 => T1.BuildingId, T2 => T2.BuildingId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BuildingShortName == \"Columbus Square\").Select(row => row.T2.RoomCount).Sum();",
    "db_name": "apartment_rentals",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,12): error CS1929: 'IQueryable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.42"
  },
  {
    "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2",
    "result": "context.ApartmentBuildings.Join(context.Apartments, T1 => T1.BuildingId, T2 => T2.BuildingId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BathroomCount > 2).Select(row => new { row.T1.BuildingAddress }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.apt_type_code , T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\"",
    "result": "context.ApartmentBuildings.Join(context.Apartments, T1 => T1.BuildingId, T2 => T2.BuildingId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BuildingManager == \"Kyle\").Select(row => new { row.T2.AptTypeCode, row.T2.AptNumber }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
    "result": "context.ApartmentBookings.GroupBy(row => new { row.BookingStatusCode }).Select(group => new { group.Key.BookingStatusCode, Count = group.Count() }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
    "result": "context.Apartments.OrderBy(row => row.RoomCount).Select(row => new { row.AptNumber }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1",
    "result": "context.Apartments.OrderByDescending(row => row.BedroomCount).Select(row => new { row.AptNumber }).Take(1).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
    "result": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).Select(group => new { group.Key.AptTypeCode, Count = group.Count() }).OrderBy(group => group.Count).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
    "result": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Average(row => row.RoomCount)).Select(group => new { group.Key.AptTypeCode }).Take(3).ToList();",
    "db_name": "apartment_rentals",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,119): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:02.79"
  },
  {
    "query": "SELECT apt_type_code , bathroom_count , bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
    "result": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Sum(row => row.RoomCount)).Select(group => new { group.Key.AptTypeCode, group.First().BathroomCount, group.First().BedroomCount }).Take(1).ToList();",
    "db_name": "apartment_rentals",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,115): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:02.70"
  },
  {
    "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AptTypeCode }).Take(1).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Apartments.Where(row => row.BathroomCount > 1).GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AptTypeCode }).Take(1).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT apt_type_code , max(room_count) , min(room_count) FROM Apartments GROUP BY apt_type_code",
    "result": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).Select(group => new { group.Key.AptTypeCode, MaxRoomCount = group.Select(row => row.RoomCount).Max(), MinRoomCount = group.Select(row => row.RoomCount).Min() }).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT gender_code , COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
    "result": "context.Guests.GroupBy(row => new { row.GenderCode }).Select(group => new { group.Key.GenderCode, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
    "result": "context.Apartments.Where(row => !context.ApartmentFacilities.Select(row => row.AptId).Contains(row.AptId)).Count();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\"",
    "result": "context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Confirmed\").Select(row => row.T2.AptNumber).Intersect(context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Provisional\").Select(row => row.T2.AptNumber)).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 1",
    "result": "context.Apartments.Join(context.ViewUnitStatuses, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AvailableYn == false).Select(row => row.T1.AptNumber).Intersect(context.Apartments.Join(context.ViewUnitStatuses, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AvailableYn == true).Select(row => row.T1.AptNumber)).ToList();",
    "db_name": "apartment_rentals",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM enzyme",
    "result": "context.Enzymes.Count();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM enzyme ORDER BY name DESC",
    "result": "context.Enzymes.OrderByDescending(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , LOCATION FROM enzyme",
    "result": "context.Enzymes.Select(row => new { row.Name, row.Location }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(OMIM) FROM enzyme",
    "result": "context.Enzymes.Select(row => row.Omim).Max();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product , chromosome , porphyria FROM enzyme WHERE LOCATION = 'Cytosol'",
    "result": "context.Enzymes.Where(row => row.Location == \"Cytosol\").Select(row => new { row.Product, row.Chromosome, row.Porphyria }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
    "result": "context.Enzymes.Where(row => row.Product != \"Heme\").Select(row => new { row.Name }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , trade_name FROM medicine WHERE FDA_approved = 'Yes'",
    "result": "context.Medicines.Where(row => row.FdaApproved == \"Yes\").Select(row => new { row.Name, row.TradeName }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'",
    "result": "context.Enzymes.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.EnzymeId, (T1, T2) => new { T1, T2 }).Join(context.Medicines, joined => joined.T2.MedicineId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Amisulpride\" && row.T2.InteractionType == \"inhibitor\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count(*) >= 2",
    "result": "context.Medicines.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.MedicineId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T1.Name , T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id ORDER BY count(*) DESC",
    "result": "context.Medicines.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.MedicineId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name, group.First().T1.FdaApproved }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Enzymes.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.EnzymeId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.InteractionType == \"activitor\").GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name }).Take(1).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'",
    "result": "context.MedicineEnzymeInteractions.Join(context.Medicines, T1 => T1.MedicineId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Enzymes, joined => joined.T1.EnzymeId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"ALA synthase\" && row.T2.Name == \"Aripiprazole\").Select(row => new { row.T1.InteractionType }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT interaction_type , count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
    "result": "context.MedicineEnzymeInteractions.GroupBy(row => new { row.InteractionType }).Select(group => new { group.Key.InteractionType, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM medicine WHERE FDA_approved = 'No'",
    "result": "context.Medicines.Where(row => row.FdaApproved == \"No\").Count();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
    "result": "context.Enzymes.Where(row => !context.MedicineEnzymeInteractions.Select(row => row.EnzymeId).Contains(row.Id)).Count();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 3",
    "result": "context.Medicines.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.MedicineId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 3).Select(group => new { group.Key.Id, group.First().T1.TradeName }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.name , T1.location , T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'",
    "result": "context.Enzymes.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.EnzymeId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.InteractionType == \"inhibitor\").Select(row => new { row.T1.Name, row.T1.Location, row.T1.Product }).Distinct().ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'activitor'",
    "result": "context.Medicines.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.MedicineId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.InteractionType == \"inhibitor\").Select(row => new { row.T1.Name, row.T1.TradeName }).Intersect(context.Medicines.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.MedicineId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.InteractionType == \"activitor\").Select(row => new { row.T1.Name, row.T1.TradeName })).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , trade_name FROM medicine EXCEPT SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id WHERE T3.product = 'Protoporphyrinogen IX'",
    "result": "context.Medicines.Select(row => new { row.Name, row.TradeName }).Except(context.Medicines.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.MedicineId, (T1, T2) => new { T1, T2 }).Join(context.Enzymes, joined => joined.T2.EnzymeId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Product == \"Protoporphyrinogen IX\").Select(row => new { row.T1.Name, row.T1.TradeName })).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT FDA_approved) FROM medicine",
    "result": "context.Medicines.Select(row => row.FdaApproved).Distinct().Count();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
    "result": "context.Enzymes.Where(row => EF.Functions.Like(row.Name, \"%ALA%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT trade_name , count(*) FROM medicine GROUP BY trade_name",
    "result": "context.Medicines.GroupBy(row => new { row.TradeName }).Select(group => new { group.Key.TradeName, Count = group.Count() }).ToList();",
    "db_name": "medicine_enzyme_interaction",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM gymnast",
    "result": "context.Gymnasts.Count();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
    "result": "context.Gymnasts.OrderByDescending(row => row.TotalPoints).Select(row => new { row.TotalPoints }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
    "result": "context.Gymnasts.OrderByDescending(row => row.FloorExercisePoints).Select(row => new { row.TotalPoints }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Horizontal_Bar_Points) FROM gymnast",
    "result": "context.Gymnasts.Select(row => (double) row.HorizontalBarPoints).Average();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM People ORDER BY Name ASC",
    "result": "context.People.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID",
    "result": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"",
    "result": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Hometown != \"Santo Domingo\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1",
    "result": "context.People.OrderByDescending(row => row.Height).Select(row => new { row.Age }).Take(1).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5",
    "result": "context.People.OrderByDescending(row => row.Age).Select(row => new { row.Name }).Take(5).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
    "result": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Age).Select(row => new { row.T1.TotalPoints }).Take(1).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID",
    "result": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => (double) row.T2.Age).Average();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5",
    "result": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.TotalPoints > 57.5).Select(row => new { row.T2.Hometown }).Distinct().ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown",
    "result": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Hometown }).Select(group => new { group.Key.Hometown, Count = group.Count() }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Hometown }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Hometown }).Take(1).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2",
    "result": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Hometown }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Hometown }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height ASC",
    "result": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Height).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID",
    "result": "context.People.Select(row => row.Hometown).Distinct().Except(context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => row.T2.Hometown).Distinct()).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20",
    "result": "context.People.Where(row => row.Age > 23).Select(row => row.Hometown).Intersect(context.People.Where(row => row.Age < 20).Select(row => row.Hometown)).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT Hometown) FROM people",
    "result": "context.People.Select(row => row.Hometown).Distinct().Count();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T1.Total_Points DESC",
    "result": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.TotalPoints).Select(row => new { row.T2.Age }).ToList();",
    "db_name": "gymnast",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM list",
    "result": "context.Lists.Count();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lastname FROM list WHERE classroom = 111",
    "result": "context.Lists.Where(row => row.Classroom == 111).Select(row => new { row.LastName }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT firstname FROM list WHERE classroom = 108",
    "result": "context.Lists.Where(row => row.Classroom == 108).Select(row => new { row.FirstName }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT firstname FROM list WHERE classroom = 107",
    "result": "context.Lists.Where(row => row.Classroom == 107).Select(row => new { row.FirstName }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT classroom , grade FROM list",
    "result": "context.Lists.Select(row => new { row.Classroom, row.Grade }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT grade FROM list WHERE classroom = 103",
    "result": "context.Lists.Where(row => row.Classroom == 103).Select(row => new { row.Grade }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT grade FROM list WHERE classroom = 105",
    "result": "context.Lists.Where(row => row.Classroom == 105).Select(row => new { row.Grade }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT classroom FROM list WHERE grade = 4",
    "result": "context.Lists.Where(row => row.Grade == 4).Select(row => new { row.Classroom }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT classroom FROM list WHERE grade = 5",
    "result": "context.Lists.Where(row => row.Grade == 5).Select(row => new { row.Classroom }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 5",
    "result": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Grade == 5).Select(row => new { row.T2.LastName }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 1",
    "result": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Grade == 1).Select(row => new { row.T2.FirstName }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT firstname FROM teachers WHERE classroom = 110",
    "result": "context.Teachers.Where(row => row.Classroom == 110).Select(row => new { row.FirstName }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lastname FROM teachers WHERE classroom = 109",
    "result": "context.Teachers.Where(row => row.Classroom == 109).Select(row => new { row.LastName }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT firstname , lastname FROM teachers",
    "result": "context.Teachers.Select(row => new { row.FirstName, row.LastName }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT firstname , lastname FROM list",
    "result": "context.Lists.Select(row => new { row.FirstName, row.LastName }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"OTHA\" AND T2.lastname = \"MOYER\"",
    "result": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"OTHA\" && row.T2.LastName == \"MOYER\").Select(row => new { row.T1.FirstName, row.T1.LastName }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"MARROTTE\" AND T2.lastname = \"KIRK\"",
    "result": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"MARROTTE\" && row.T2.LastName == \"KIRK\").Select(row => new { row.T1.FirstName, row.T1.LastName }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.firstname , T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = \"EVELINA\" AND T1.lastname = \"BROMLEY\"",
    "result": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"EVELINA\" && row.T1.LastName == \"BROMLEY\").Select(row => new { row.T2.FirstName, row.T2.LastName }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = \"GELL\" AND T1.lastname = \"TAMI\"",
    "result": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"GELL\" && row.T1.LastName == \"TAMI\").Select(row => new { row.T2.LastName }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"LORIA\" AND T2.lastname = \"ONDERSMA\"",
    "result": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"LORIA\" && row.T2.LastName == \"ONDERSMA\").Count();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"KAWA\" AND T2.lastname = \"GORDON\"",
    "result": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"KAWA\" && row.T2.LastName == \"GORDON\").Count();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"TARRING\" AND T2.lastname = \"LEIA\"",
    "result": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"TARRING\" && row.T2.LastName == \"LEIA\").Count();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = \"CHRISSY\" AND T1.lastname = \"NABOZNY\"",
    "result": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"CHRISSY\" && row.T1.LastName == \"NABOZNY\").Count();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = \"MADLOCK\" AND T1.lastname = \"RAY\"",
    "result": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"MADLOCK\" && row.T1.LastName == \"RAY\").Count();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 1 EXCEPT SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"OTHA\" AND T2.lastname = \"MOYER\"",
    "result": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Grade == 1).Select(row => new { row.T1.FirstName, row.T1.LastName }).Distinct().Except(context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"OTHA\" && row.T2.LastName == \"MOYER\").Select(row => new { row.T1.FirstName, row.T1.LastName })).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
    "result": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Grade == 3 && row.T2.FirstName != \"COVIN\" && row.T2.LastName != \"JEROME\").Select(row => new { row.T1.LastName }).Distinct().ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT grade , count(DISTINCT classroom) , count(*) FROM list GROUP BY grade",
    "result": "context.Lists.GroupBy(row => new { row.Grade }).Select(group => new { group.Key.Grade, CountDistinctClassroom = group.Select(row => row.Classroom).Distinct().Count(), Count = group.Count() }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT classroom , count(DISTINCT grade) FROM list GROUP BY classroom",
    "result": "context.Lists.GroupBy(row => new { row.Classroom }).Select(group => new { group.Key.Classroom, CountDistinctGrade = group.Select(row => row.Grade).Distinct().Count() }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Lists.GroupBy(row => new { row.Classroom }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Classroom }).Take(1).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT classroom , count(*) FROM list GROUP BY classroom",
    "result": "context.Lists.GroupBy(row => new { row.Classroom }).Select(group => new { group.Key.Classroom, Count = group.Count() }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT classroom , count(*) FROM list WHERE grade = \"0\" GROUP BY classroom",
    "result": "context.Lists.Where(row => row.Grade == \"0\").GroupBy(row => new { row.Classroom }).Select(group => new { group.Key.Classroom, Count = group.Count() }).ToList();",
    "db_name": "student_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,39): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.26"
  },
  {
    "query": "SELECT classroom , count(*) FROM list WHERE grade = \"4\" GROUP BY classroom",
    "result": "context.Lists.Where(row => row.Grade == \"4\").GroupBy(row => new { row.Classroom }).Select(group => new { group.Key.Classroom, Count = group.Count() }).ToList();",
    "db_name": "student_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,39): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.58"
  },
  {
    "query": "SELECT T2.firstname , T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom GROUP BY T2.firstname , T2.lastname ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.FirstName, row.T2.LastName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.FirstName, group.Key.LastName }).Take(1).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , classroom FROM list GROUP BY classroom",
    "result": "context.Lists.GroupBy(row => new { row.Classroom }).Select(group => new { Count = group.Count(), group.Key.Classroom }).ToList();",
    "db_name": "student_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = \"Accounting\"",
    "result": "context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DeptName == \"Accounting\").Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE = \"ACCT-211\"",
    "result": "context.Classes.Where(row => row.CrsCode == \"ACCT-211\").Select(row => row.ProfNum).Distinct().Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.EMP_FNAME , T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE DEPT_NAME = \"Biology\"",
    "result": "context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Join(context.Employees, joined => joined.T1.EmpNum, T3 => T3.EmpNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.DeptName == \"Biology\").Select(row => new { row.T3.EmpFname, row.T3.EmpLname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.EMP_FNAME , T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"",
    "result": "context.Employees.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CrsCode == \"ACCT-211\").Select(row => new { row.T1.EmpFname, row.T1.EmpDob }).Distinct().ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'",
    "result": "context.Employees.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Where(row => row.T1.EmpLname == \"Graztevski\").Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT school_code FROM department WHERE dept_name = \"Accounting\"",
    "result": "context.Departments.Where(row => row.DeptName == \"Accounting\").Select(row => new { row.SchoolCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT crs_credit , crs_description FROM course WHERE crs_code = 'CIS-220'",
    "result": "context.Courses.Where(row => row.CrsCode == \"CIS-220\").Select(row => new { row.CrsCredit, row.CrsDescription }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT dept_address FROM department WHERE dept_name = 'History'",
    "result": "context.Departments.Where(row => row.DeptName == \"History\").Select(row => new { row.DeptAddress }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code = 'BUS'",
    "result": "context.Departments.Where(row => row.SchoolCode == \"BUS\").Select(row => row.DeptAddress).Distinct().Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT dept_address) , school_code FROM department GROUP BY school_code",
    "result": "context.Departments.GroupBy(row => new { row.SchoolCode }).Select(group => new { CountDistinctDeptAddress = group.Select(row => row.DeptAddress).Distinct().Count(), group.Key.SchoolCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT crs_credit , crs_description FROM course WHERE crs_code = 'QM-261'",
    "result": "context.Courses.Where(row => row.CrsCode == \"QM-261\").Select(row => new { row.CrsCredit, row.CrsDescription }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT dept_name) , school_code FROM department GROUP BY school_code",
    "result": "context.Departments.GroupBy(row => new { row.SchoolCode }).Select(group => new { CountDistinctDeptName = group.Select(row => row.DeptName).Distinct().Count(), group.Key.SchoolCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT dept_name) , school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name) < 5",
    "result": "context.Departments.GroupBy(row => new { row.SchoolCode }).Select(group => new { CountDistinctDeptName = group.Select(row => row.DeptName).Distinct().Count(), group.Key.SchoolCode }).Where(group => group.CountDistinctDeptName < 5).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , crs_code FROM CLASS GROUP BY crs_code",
    "result": "context.Classes.GroupBy(row => new { row.CrsCode }).Select(group => new { Count = group.Count(), group.Key.CrsCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(crs_credit) , dept_code FROM course GROUP BY dept_code",
    "result": "context.Courses.GroupBy(row => new { row.DeptCode }).Select(group => new { SumCrsCredit = group.Select(row => row.CrsCredit).Sum(), group.Key.DeptCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , class_room FROM CLASS GROUP BY class_room HAVING count(*) >= 2",
    "result": "context.Classes.GroupBy(row => new { row.ClassRoom }).Select(group => new { Count = group.Count(), group.Key.ClassRoom }).Where(group => group.Count >= 2).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
    "result": "context.Classes.Join(context.Courses, T1 => T1.CrsCode, T2 => T2.CrsCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DeptCode }).Select(group => new { Count = group.Count(), group.Key.DeptCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code GROUP BY T3.school_code",
    "result": "context.Classes.Join(context.Courses, T1 => T1.CrsCode, T2 => T2.CrsCode, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.SchoolCode }).Select(group => new { Count = group.Count(), group.Key.SchoolCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
    "result": "context.Departments.Join(context.Professors, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SchoolCode }).Select(group => new { Count = group.Count(), group.Key.SchoolCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT emp_jobcode , count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Employees.GroupBy(row => new { row.EmpJobcode }).Select(group => new { group.Key.EmpJobcode, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
    "result": "context.Departments.Join(context.Professors, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SchoolCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.SchoolCode }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code",
    "result": "context.Professors.Where(row => row.ProfHighDegree == \"Ph.D.\").GroupBy(row => new { row.DeptCode }).Select(group => new { Count = group.Count(), group.Key.DeptCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , dept_code FROM student GROUP BY dept_code",
    "result": "context.Students.GroupBy(row => new { row.DeptCode }).Select(group => new { Count = group.Count(), group.Key.DeptCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(stu_hrs) , dept_code FROM student GROUP BY dept_code",
    "result": "context.Students.GroupBy(row => new { row.DeptCode }).Select(group => new { SumStuHrs = group.Select(row => row.StuHrs).Sum(), group.Key.DeptCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(stu_gpa) , avg(stu_gpa) , min(stu_gpa) , dept_code FROM student GROUP BY dept_code",
    "result": "context.Students.GroupBy(row => new { row.DeptCode }).Select(group => new { MaxStuGpa = group.Select(row => row.StuGpa).Max(), AverageStuGpa = group.Select(row => row.StuGpa).Average(), MinStuGpa = group.Select(row => row.StuGpa).Min(), group.Key.DeptCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.dept_name , avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1",
    "result": "context.Students.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).Select(group => new { group.First().T2.DeptName, AverageStuGpa = group.Select(row => row.T1.StuGpa).Average() }).OrderByDescending(group => group.AverageStuGpa).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT school_code) FROM department",
    "result": "context.Departments.Select(row => row.SchoolCode).Distinct().Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT class_code) FROM CLASS",
    "result": "context.Classes.Select(row => row.ClassCode).Distinct().Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT crs_code) FROM CLASS",
    "result": "context.Classes.Select(row => row.CrsCode).Distinct().Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT dept_name) FROM department",
    "result": "context.Departments.Select(row => row.DeptName).Distinct().Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = \"Computer Info. Systems\"",
    "result": "context.Departments.Join(context.Courses, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DeptName == \"Computer Info. Systems\").Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code = 'ACCT-211'",
    "result": "context.Classes.Where(row => row.CrsCode == \"ACCT-211\").Select(row => row.ClassSection).Distinct().Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(T1.crs_credit) , T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code",
    "result": "context.Courses.Join(context.Classes, T1 => T1.CrsCode, T2 => T2.CrsCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).Select(group => new { SumCrsCredit = group.Select(row => row.T1.CrsCredit).Sum(), group.Key.DeptCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
    "result": "context.Courses.Join(context.Classes, T1 => T1.CrsCode, T2 => T2.CrsCode, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T1.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.DeptCode }).OrderByDescending(group => group.Sum(row => row.T1.CrsCredit)).Select(group => new { group.First().T3.DeptName }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'",
    "result": "context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CrsCode == \"ACCT-211\").Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211'",
    "result": "context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuNum, T3 => T3.StuNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.CrsCode == \"ACCT-211\").Select(row => new { row.T3.StuFname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'",
    "result": "context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuNum, T3 => T3.StuNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.CrsCode == \"ACCT-211\" && row.T2.EnrollGrade == \"C\").Select(row => new { row.T3.StuFname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM employee",
    "result": "context.Employees.Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM professor WHERE prof_high_degree = 'Ph.D.'",
    "result": "context.Professors.Where(row => row.ProfHighDegree == \"Ph.D.\").Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting'",
    "result": "context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Departments, joined => joined.T3.DeptCode, T4 => T4.DeptCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.DeptName == \"Accounting\").Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Departments, joined => joined.T3.DeptCode, T4 => T4.DeptCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).GroupBy(row => new { row.T3.DeptCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T4.DeptName }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT dept_name FROM department ORDER BY dept_name",
    "result": "context.Departments.OrderBy(row => row.DeptName).Select(row => new { row.DeptName }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT class_code FROM CLASS WHERE class_room = 'KLR209'",
    "result": "context.Classes.Where(row => row.ClassRoom == \"KLR209\").Select(row => new { row.ClassCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob",
    "result": "context.Employees.Where(row => row.EmpJobcode == \"PROF\").OrderBy(row => row.EmpDob).Select(row => new { row.EmpFname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num ORDER BY T2.emp_fname",
    "result": "context.Professors.Join(context.Employees, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.EmpFname).Select(row => new { row.T2.EmpFname, row.T1.ProfOffice }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT emp_fname , emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
    "result": "context.Employees.OrderBy(row => row.EmpDob).Select(row => new { row.EmpFname, row.EmpLname }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT stu_fname , stu_lname , stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1",
    "result": "context.Students.Where(row => row.StuGpa > 3).OrderByDescending(row => row.StuDob).Select(row => new { row.StuFname, row.StuLname, row.StuGpa }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll_grade = 'C'",
    "result": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EnrollGrade == \"C\").Select(row => new { row.T1.StuFname }).Distinct().ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1",
    "result": "context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).OrderBy(group => group.Count()).Select(group => new { group.First().T2.DeptName }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.dept_name , T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ProfHighDegree == \"Ph.D.\").GroupBy(row => new { row.T1.DeptCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.DeptName, group.Key.DeptCode }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num",
    "result": "context.Employees.Where(row => row.EmpJobcode == \"PROF\").Select(row => row.EmpFname).Except(context.Employees.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Select(row => row.T1.EmpFname)).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num",
    "result": "context.Employees.Join(context.Professors, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\").Select(row => row.T1.EmpFname).Except(context.Employees.Join(context.Classes, T4 => T4.EmpNum, T5 => T5.ProfNum, (T4, T5) => new { T4, T5 }).Select(row => row.T4.EmpFname)).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.emp_lname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History'",
    "result": "context.Employees.Join(context.Professors, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\").Select(row => new { row.T1.EmpLname, row.T2.ProfOffice }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.dept_name , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'",
    "result": "context.Employees.Join(context.Professors, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.EmpLname == \"Heffington\").Select(row => new { row.T3.DeptName, row.T2.ProfOffice }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.emp_lname , T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'",
    "result": "context.Employees.Join(context.Professors, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ProfOffice == \"DRE 102\").Select(row => new { row.T1.EmpLname, row.T1.EmpHiredate }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'",
    "result": "context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuNum, T3 => T3.StuNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.StuLname == \"Smithson\").Select(row => new { row.T1.CrsCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T4.crs_description , T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code WHERE T3.stu_lname = 'Smithson'",
    "result": "context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuNum, T3 => T3.StuNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Courses, joined => joined.T1.CrsCode, T4 => T4.CrsCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T3.StuLname == \"Smithson\").Select(row => new { row.T4.CrsDescription, row.T4.CrsCredit }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'",
    "result": "context.Professors.Where(row => row.ProfHighDegree == \"Ph.D.\" || row.ProfHighDegree == \"MA\").Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting' OR T2.dept_name = 'Biology'",
    "result": "context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DeptName == \"Accounting\" || row.T2.DeptName == \"Biology\").Count();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'",
    "result": "context.Employees.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CrsCode == \"CIS-220\").Select(row => row.T1.EmpFname).Intersect(context.Employees.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CrsCode == \"QM-261\").Select(row => row.T1.EmpFname)).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Computer Info. Systems'",
    "result": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T2.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Courses, joined => joined.T3.CrsCode, T4 => T4.CrsCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Join(context.Departments, joined => joined.T4.DeptCode, T5 => T5.DeptCode, (joined, T5) => new { joined.T1, joined.T2, joined.T3, joined.T4, T5 }).Where(row => row.T5.DeptName == \"Accounting\").Select(row => row.T1.StuFname).Intersect(context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T2.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Courses, joined => joined.T3.CrsCode, T4 => T4.CrsCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Join(context.Departments, joined => joined.T4.DeptCode, T5 => T5.DeptCode, (joined, T5) => new { joined.T1, joined.T2, joined.T3, joined.T4, T5 }).Where(row => row.T5.DeptName == \"Computer Info. Systems\").Select(row => row.T1.StuFname)).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211'",
    "result": "context.Enrolls.Join(context.Students, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T1.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CrsCode == \"ACCT-211\").Select(row => (double) row.T2.StuGpa).Average();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT stu_gpa , stu_phone , stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
    "result": "context.Students.OrderByDescending(row => row.StuGpa).Select(row => new { row.StuGpa, row.StuPhone, row.StuFname }).Take(5).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY stu_gpa LIMIT 1",
    "result": "context.Students.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T1.StuGpa).Select(row => new { row.T2.DeptName }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT stu_fname , stu_gpa FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student)",
    "result": "context.Students.Where(row => row.StuGpa < context.Students.Select(row => (double) row.StuGpa).Average()).Select(row => new { row.StuFname, row.StuGpa }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.dept_name , T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Students.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.DeptName, group.First().T2.DeptAddress }).Take(1).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.dept_name , T2.dept_address , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
    "result": "context.Students.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).Select(group => new { group.First().T2.DeptName, group.First().T2.DeptAddress, Count = group.Count() }).OrderByDescending(group => group.Count).Take(3).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.emp_fname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T3.dept_code = T2.dept_code WHERE T3.dept_name = 'History' AND T2.prof_high_degree = 'Ph.D.'",
    "result": "context.Employees.Join(context.Professors, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\" && row.T2.ProfHighDegree == \"Ph.D.\").Select(row => new { row.T1.EmpFname, row.T2.ProfOffice }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
    "result": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.EmpFname, row.T1.CrsCode }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.emp_fname , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code",
    "result": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.EmpFname, row.T3.CrsDescription }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.emp_fname , T4.prof_office , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num",
    "result": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Professors, joined => joined.T2.EmpNum, T4 => T4.EmpNum, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Select(row => new { row.T2.EmpFname, row.T4.ProfOffice, row.T3.CrsDescription }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.emp_fname , T4.prof_office , T3.crs_description , T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num JOIN department AS T5 ON T4.dept_code = T5.dept_code",
    "result": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Professors, joined => joined.T2.EmpNum, T4 => T4.EmpNum, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Join(context.Departments, joined => joined.T4.DeptCode, T5 => T5.DeptCode, (joined, T5) => new { joined.T1, joined.T2, joined.T3, joined.T4, T5 }).Select(row => new { row.T2.EmpFname, row.T4.ProfOffice, row.T3.CrsDescription, row.T5.DeptName }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.stu_fname , T1.stu_lname , T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code",
    "result": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T2.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Courses, joined => joined.T3.CrsCode, T4 => T4.CrsCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Select(row => new { row.T1.StuFname, row.T1.StuLname, row.T4.CrsDescription }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.stu_fname , T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'",
    "result": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EnrollGrade == \"C\" || row.T2.EnrollGrade == \"A\").Select(row => new { row.T1.StuFname, row.T1.StuLname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.emp_fname , T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Accounting'",
    "result": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Professors, joined => joined.T2.EmpNum, T3 => T3.EmpNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Departments, joined => joined.T3.DeptCode, T4 => T4.DeptCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.DeptName == \"Accounting\").Select(row => new { row.T2.EmpFname, row.T1.ClassRoom }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.emp_fname , T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Computer Info. Systems'",
    "result": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Professors, joined => joined.T2.EmpNum, T3 => T3.EmpNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Departments, joined => joined.T3.DeptCode, T4 => T4.DeptCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.DeptName == \"Computer Info. Systems\").Select(row => new { row.T2.EmpFname, row.T3.ProfHighDegree }).Distinct().ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A' AND T2.class_code = 10018",
    "result": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EnrollGrade == \"A\" && row.T2.ClassCode == \"10018\").Select(row => new { row.T1.StuLname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree != 'Ph.D.'",
    "result": "context.Professors.Join(context.Employees, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T1.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\" && row.T1.ProfHighDegree != \"Ph.D.\").Select(row => new { row.T2.EmpFname, row.T1.ProfOffice }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING count(*) > 1",
    "result": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProfNum }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.EmpFname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num GROUP BY T2.stu_num HAVING count(*) = 1",
    "result": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StuNum }).Where(group => group.Count() == 1).Select(group => new { group.First().T1.StuFname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'",
    "result": "context.Courses.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.CrsDescription, \"%Statistics%\")).Select(row => new { row.T2.DeptName }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%'",
    "result": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T2.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CrsCode == \"ACCT-211\" && EF.Functions.Like(row.T1.StuLname, \"S%\")).Select(row => new { row.T1.StuFname }).ToList();",
    "db_name": "college_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax'",
    "result": "context.CustomerMasterIndices.Join(context.CmiCrossReferences, T1 => T1.MasterCustomerId, T2 => T2.MasterCustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SourceSystemCode == \"Tax\").Select(row => new { row.T1.CmiDetails }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.cmi_cross_ref_id , T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*) >= 1",
    "result": "context.CmiCrossReferences.Join(context.CouncilTaxes, T1 => T1.CmiCrossRefId, T2 => T2.CmiCrossRefId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CmiCrossRefId }).Where(group => group.Count() >= 1).Select(group => new { group.Key.CmiCrossRefId, group.First().T1.SourceSystemCode }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.cmi_cross_ref_id , T2.master_customer_id , count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id",
    "result": "context.BusinessRates.Join(context.CmiCrossReferences, T1 => T1.CmiCrossRefId, T2 => T2.CmiCrossRefId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CmiCrossRefId }).Select(group => new { group.Key.CmiCrossRefId, group.First().T2.MasterCustomerId, Count = group.Count() }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.source_system_code , T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id ORDER BY T2.council_tax_id",
    "result": "context.CmiCrossReferences.Join(context.BenefitsOverpayments, T1 => T1.CmiCrossRefId, T2 => T2.CmiCrossRefId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.CouncilTaxId).Select(row => new { row.T1.SourceSystemCode, row.T2.CouncilTaxId }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.source_system_code , T1.master_customer_id , T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id",
    "result": "context.CmiCrossReferences.Join(context.ParkingFines, T1 => T1.CmiCrossRefId, T2 => T2.CmiCrossRefId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.SourceSystemCode, row.T1.MasterCustomerId, row.T2.CouncilTaxId }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id = T2.master_customer_id WHERE T3.cmi_details != 'Schmidt , Kertzmann and Lubowitz'",
    "result": "context.RentArrears.Join(context.CmiCrossReferences, T1 => T1.CmiCrossRefId, T2 => T2.CmiCrossRefId, (T1, T2) => new { T1, T2 }).Join(context.CustomerMasterIndices, joined => joined.T2.MasterCustomerId, T3 => T3.MasterCustomerId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CmiDetails != \"Schmidt , Kertzmann and Lubowitz\").Select(row => new { row.T1.CouncilTaxId }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T2.source_system_code = 'Electoral' OR T2.source_system_code = 'Tax'",
    "result": "context.ElectoralRegisters.Join(context.CmiCrossReferences, T1 => T1.CmiCrossRefId, T2 => T2.CmiCrossRefId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SourceSystemCode == \"Electoral\" || row.T2.SourceSystemCode == \"Tax\").Select(row => new { row.T1.ElectoralRegisterId }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references",
    "result": "context.CmiCrossReferences.Select(row => row.SourceSystemCode).Distinct().Count();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM customer_master_index ORDER BY cmi_details DESC",
    "result": "context.CustomerMasterIndices.OrderByDescending(row => row.CmiDetails).Select(row => new { row..MasterCustomerId, row..CmiDetails }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,131): error CS0103: The name 'CmiDetails' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    6 Error(s)\n\nTime Elapsed 00:00:01.67"
  },
  {
    "query": "SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines",
    "result": "context.ParkingFines.Select(row => new { row.CouncilTaxId, row.CmiCrossRefId }).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM rent_arrears",
    "result": "context.RentArrears.Count();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T1.cmi_details = 'Gottlieb , Becker and Wyman'",
    "result": "context.CustomerMasterIndices.Join(context.CmiCrossReferences, T1 => T1.MasterCustomerId, T2 => T2.MasterCustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CmiDetails == \"Gottlieb , Becker and Wyman\").Select(row => new { row.T2.SourceSystemCode }).Distinct().ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
    "result": "context.CmiCrossReferences.Select(row => row.CmiCrossRefId).Except(context.ParkingFines.Select(row => row.CmiCrossRefId)).ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'",
    "result": "context.CmiCrossReferences.Where(row => EF.Functions.Like(row.SourceSystemCode, \"%en%\")).Select(row => new { row.SourceSystemCode }).Distinct().ToList();",
    "db_name": "local_govt_mdm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Companies",
    "result": "context.Companies.Count();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC",
    "result": "context.Companies.OrderByDescending(row => (double) row.MarketValueBillion).Select(row => new { row.Name }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Companies WHERE Headquarters != 'USA'",
    "result": "context.Companies.Where(row => row.Headquarters != \"USA\").Select(row => new { row.Name }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , Assets_billion FROM Companies ORDER BY name ASC",
    "result": "context.Companies.OrderBy(row => row.Name).Select(row => new { row.Name, row.AssetsBillion }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Profits_billion) FROM Companies",
    "result": "context.Companies.Select(row => (double) row.ProfitsBillion).Average();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Sales_billion) , min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
    "result": "context.Companies.Where(row => row.Industry != \"Banking\").GroupBy(row => 1).Select(group => new { MaxSalesBillion = group.Select(row => row.SalesBillion).Max(), MinSalesBillion = group.Select(row => row.SalesBillion).Min() }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT Industry) FROM Companies",
    "result": "context.Companies.Select(row => row.Industry).Distinct().Count();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM buildings ORDER BY Height DESC",
    "result": "context.Buildings.OrderByDescending(row => row.Height).Select(row => new { row.Name }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
    "result": "context.Buildings.OrderByDescending(row => row.Height).Select(row => new { row.Stories }).Take(1).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.name , T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id",
    "result": "context.OfficeLocations.Join(context.Buildings, T1 => T1.BuildingId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Companies, joined => joined.T1.CompanyId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { T3Name = row.T3.Name, T2Name = row.T2.Name }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id HAVING COUNT(*) > 1",
    "result": "context.OfficeLocations.Join(context.Buildings, T1 => T1.BuildingId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Companies, joined => joined.T1.CompanyId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.BuildingId }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.OfficeLocations.Join(context.Buildings, T1 => T1.BuildingId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Companies, joined => joined.T1.CompanyId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.BuildingId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name }).Take(1).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM buildings WHERE Status = \"on-hold\" ORDER BY Stories ASC",
    "result": "context.Buildings.Where(row => row.Status == \"on-hold\").OrderBy(row => row.Stories).Select(row => new { row.Name }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry",
    "result": "context.Companies.GroupBy(row => new { row.Industry }).Select(group => new { group.Key.Industry, Count = group.Count() }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
    "result": "context.Companies.GroupBy(row => new { row.Industry }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Industry }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Companies.GroupBy(row => new { row.Industry }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Industry }).Take(1).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)",
    "result": "context.Buildings.Where(row => !context.OfficeLocations.Select(row => row.BuildingId).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Industry FROM Companies WHERE Headquarters = \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters = \"China\"",
    "result": "context.Companies.Where(row => row.Headquarters == \"USA\").Select(row => row.Industry).Intersect(context.Companies.Where(row => row.Headquarters == \"China\").Select(row => row.Industry)).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Companies WHERE Industry = \"Banking\" OR Industry = \"Conglomerate\"",
    "result": "context.Companies.Where(row => row.Industry == \"Banking\" || row.Industry == \"Conglomerate\").Count();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*) > 2",
    "result": "context.Companies.GroupBy(row => new { row.Headquarters }).Where(group => group.Count() > 2).Select(group => new { group.Key.Headquarters }).ToList();",
    "db_name": "company_office",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT dorm_name FROM dorm WHERE gender = 'F'",
    "result": "context.Dorms.Where(row => row.Gender == \"F\").Select(row => new { row.DormName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT dorm_name FROM dorm WHERE student_capacity > 300",
    "result": "context.Dorms.Where(row => row.StudentCapacity > 300).Select(row => new { row.DormName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM student WHERE sex = 'F' AND age < 25",
    "result": "context.Students.Where(row => row.Sex == \"F\" && row.Age < 25).Count();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT fname FROM student WHERE age > 20",
    "result": "context.Students.Where(row => row.Age > 20).Select(row => new { row.Fname }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT fname FROM student WHERE city_code = 'PHL' AND age BETWEEN 20 AND 25",
    "result": "context.Students.Where(row => row.CityCode == \"PHL\" && row.Age >= 20 && row.Age <= 25).Select(row => new { row.Fname }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM dorm",
    "result": "context.Dorms.Count();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM dorm_amenity",
    "result": "context.DormAmenities.Count();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(student_capacity) FROM dorm",
    "result": "context.Dorms.Select(row => row.StudentCapacity).Sum();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM student",
    "result": "context.Students.Count();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(age) , city_code FROM student GROUP BY city_code",
    "result": "context.Students.GroupBy(row => new { row.CityCode }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), group.Key.CityCode }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(student_capacity) , sum(student_capacity) FROM dorm WHERE gender = 'X'",
    "result": "context.Dorms.Where(row => row.Gender == \"X\").GroupBy(row => 1).Select(group => new { AverageStudentCapacity = group.Select(row => row.StudentCapacity).Average(), SumStudentCapacity = group.Select(row => row.StudentCapacity).Sum() }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT dormid) FROM has_amenity",
    "result": "context.HasAmenities.Select(row => row.Dormid).Distinct().Count();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)",
    "result": "context.Dorms.Where(row => !context.HasAmenities.Select(row => row.Dormid).Contains(row.Dormid)).Select(row => new { row.DormName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT gender) FROM dorm",
    "result": "context.Dorms.Select(row => row.Gender).Distinct().Count();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT student_capacity , gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
    "result": "context.Dorms.Where(row => EF.Functions.Like(row.DormName, \"%Donor%\")).Select(row => new { row.StudentCapacity, row.Gender }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT dorm_name , gender FROM dorm WHERE student_capacity > 300 OR student_capacity < 100",
    "result": "context.Dorms.Where(row => row.StudentCapacity > 300 || row.StudentCapacity < 100).Select(row => new { row.DormName, row.Gender }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT major) , count(DISTINCT city_code) FROM student",
    "result": "context.Students.GroupBy(row => 1).Select(group => new { CountDistinctMajor = group.Select(row => row.Major).Distinct().Count(), CountDistinctCityCode = group.Select(row => row.CityCode).Distinct().Count() }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'",
    "result": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.AmenityName == \"TV Lounge\").Select(row => row.T1.DormName).Intersect(context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.AmenityName == \"Study Room\").Select(row => row.T1.DormName)).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'",
    "result": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.AmenityName == \"TV Lounge\").Select(row => row.T1.DormName).Except(context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.AmenityName == \"Study Room\").Select(row => row.T1.DormName)).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lname FROM student WHERE sex = 'F' AND city_code = 'BAL' UNION SELECT lname FROM student WHERE sex = 'M' AND age < 20",
    "result": "context.Students.Where(row => row.Sex == \"F\" && row.CityCode == \"BAL\").Select(row => row.Lname).Union(context.Students.Where(row => row.Sex == \"M\" && row.Age < 20).Select(row => row.Lname)).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1",
    "result": "context.Dorms.OrderByDescending(row => row.StudentCapacity).Select(row => new { row.DormName }).Take(1).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
    "result": "context.DormAmenities.OrderBy(row => row.AmenityName).Select(row => new { row.AmenityName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Students.GroupBy(row => new { row.CityCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CityCode }).Take(1).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT fname , lname FROM student WHERE age < (SELECT avg(age) FROM student)",
    "result": "context.Students.Where(row => row.Age < context.Students.Select(row => row.Age).Average()).Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT fname , lname FROM student WHERE city_code != 'HKG' ORDER BY age",
    "result": "context.Students.Where(row => row.CityCode != \"HKG\").OrderBy(row => row.Age).Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid = T1.amenid JOIN dorm AS T3 ON T2.dormid = T3.dormid WHERE T3.dorm_name = 'Anonymous Donor Hall' ORDER BY T1.amenity_name",
    "result": "context.DormAmenities.Join(context.HasAmenities, T1 => T1.Amenid, T2 => T2.Amenid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DormName == \"Anonymous Donor Hall\").OrderBy(row => row.T1.AmenityName).Select(row => new { row.T1.AmenityName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , sum(student_capacity) , gender FROM dorm GROUP BY gender",
    "result": "context.Dorms.GroupBy(row => new { row.Gender }).Select(group => new { Count = group.Count(), SumStudentCapacity = group.Select(row => row.StudentCapacity).Sum(), group.Key.Gender }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(age) , max(age) , sex FROM student GROUP BY sex",
    "result": "context.Students.GroupBy(row => new { row.Sex }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), MaxAge = group.Select(row => row.Age).Max(), group.Key.Sex }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , major FROM student GROUP BY major",
    "result": "context.Students.GroupBy(row => new { row.Major }).Select(group => new { Count = group.Count(), group.Key.Major }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , avg(age) , city_code FROM student GROUP BY city_code",
    "result": "context.Students.GroupBy(row => new { row.CityCode }).Select(group => new { Count = group.Count(), AverageAge = group.Select(row => row.Age).Average(), group.Key.CityCode }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , avg(age) , city_code FROM student WHERE sex = 'M' GROUP BY city_code",
    "result": "context.Students.Where(row => row.Sex == \"M\").GroupBy(row => new { row.CityCode }).Select(group => new { Count = group.Count(), AverageAge = group.Select(row => row.Age).Average(), group.Key.CityCode }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , city_code FROM student GROUP BY city_code HAVING count(*) > 1",
    "result": "context.Students.GroupBy(row => new { row.CityCode }).Select(group => new { Count = group.Count(), group.Key.CityCode }).Where(group => group.Count > 1).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT fname , lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
    "result": "context.Students.Where(row => row.Major != context.Students.GroupBy(row => new { row.Major }).OrderByDescending(group => group.Count()).Select(group => group.Key.Major).Take(1).First()).Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , sex FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY sex",
    "result": "context.Students.Where(row => row.Age > context.Students.Select(row => row.Age).Average()).GroupBy(row => new { row.Sex }).Select(group => new { Count = group.Count(), group.Key.Sex }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.age) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name",
    "result": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.DormName }).Select(group => new { AverageAge = group.Select(row => row.T1.Age).Average(), group.Key.DormName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid WHERE T1.student_capacity > 100 GROUP BY T1.dormid",
    "result": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StudentCapacity > 100).GroupBy(row => new { row.T1.Dormid }).Select(group => new { Count = group.Count(), group.Key.Dormid }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name",
    "result": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Age > 20).GroupBy(row => new { row.T3.DormName }).Select(group => new { Count = group.Count(), group.Key.DormName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall'",
    "result": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DormName == \"Smith Hall\").Select(row => new { row.T1.Fname }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.student_capacity = (SELECT max(student_capacity) FROM dorm)",
    "result": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.StudentCapacity == context.Dorms.Select(row => row.StudentCapacity).Max()).Select(row => row.T1.Age).Average();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.gender = 'M'",
    "result": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Gender == \"M\").Count();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' AND T1.sex = 'F'",
    "result": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DormName == \"Smith Hall\" && row.T1.Sex == \"F\").Count();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall'",
    "result": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.DormName == \"Smith Hall\").Select(row => new { row.T3.AmenityName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall' ORDER BY T3.amenity_name",
    "result": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.DormName == \"Smith Hall\").OrderBy(row => row.T3.AmenityName).Select(row => new { row.T3.AmenityName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid = T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1",
    "result": "context.DormAmenities.Join(context.HasAmenities, T1 => T1.Amenid, T2 => T2.Amenid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Amenid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.AmenityName }).Take(1).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.dorm_name , T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
    "result": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T2.Dormid }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.DormName, group.First().T1.StudentCapacity }).Take(1).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'",
    "result": "context.Dorms.Select(row => row.DormName).Except(context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.AmenityName == \"TV Lounge\").Select(row => row.T1.DormName)).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.fname , T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')",
    "result": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Dormid.HasValue && context.HasAmenities.Join(context.DormAmenities, T3 => T3.Amenid, T4 => T4.Amenid, (T3, T4) => new { T3, T4 }).Where(row => row.T4.AmenityName == \"TV Lounge\").Select(row => row.T3.Dormid).Contains(row.T2.Dormid.Value)).Select(row => new { row.T1.Fname, row.T1.Lname }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')",
    "result": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Dormid.HasValue && !context.HasAmenities.Join(context.DormAmenities, T3 => T3.Amenid, T4 => T4.Amenid, (T3, T4) => new { T3, T4 }).Where(row => row.T4.AmenityName == \"TV Lounge\").Select(row => row.T3.Dormid).Contains(row.T2.Dormid.Value)).Select(row => new { row.T1.Fname, row.T1.Age }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid WHERE T5.lname = 'Smith'",
    "result": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.LivesIns, joined => joined.T1.Dormid, T4 => T4.Dormid, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Join(context.Students, joined => joined.T4.Stuid, T5 => T5.StuId, (joined, T5) => new { joined.T1, joined.T2, joined.T3, joined.T4, T5 }).Where(row => row.T5.Lname == \"Smith\").Select(row => new { row.T3.AmenityName }).ToList();",
    "db_name": "dorm_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.coupon_amount = 500",
    "result": "context.Customers.Join(context.DiscountCoupons, T1 => T1.CouponId, T2 => T2.CouponId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CouponAmount == 500).Select(row => new { row.T1.GoodOrBadCustomer }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_id , T1.first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
    "result": "context.Customers.Join(context.Bookings, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Select(group => new { group.Key.CustomerId, group.First().T1.FirstName, Count = group.Count() }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_id , sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1",
    "result": "context.Payments.GroupBy(row => new { row.CustomerId }).Select(group => new { group.Key.CustomerId, SumAmountPaid = group.Select(row => (double) row.AmountPaid).Sum() }).OrderByDescending(group => group.SumAmountPaid).Take(1).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.booking_id , T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Bookings.Join(context.Payments, T1 => T1.BookingId, T2 => T2.BookingId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.BookingId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BookingId, group.First().T1.AmountOfRefund }).Take(1).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*) = 3",
    "result": "context.ProductsBookeds.GroupBy(row => new { row.ProductId }).Where(group => group.Count() == 3).Select(group => new { group.Key.ProductId }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.booked_amount = 102.76",
    "result": "context.ProductsBookeds.Join(context.ProductsForHires, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookedAmount == 102.76).Select(row => new { row.T2.ProductDescription }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.booking_start_date , T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id = T2.product_id JOIN bookings AS T3 ON T2.booking_id = T3.booking_id WHERE T1.product_name = 'Book collection A'",
    "result": "context.ProductsForHires.Join(context.ProductsBookeds, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Bookings, joined => joined.T2.BookingId, T3 => T3.BookingId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.ProductName == \"Book collection A\").Select(row => new { row.T3.BookingStartDate, row.T3.BookingEndDate }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.available_yn = 1",
    "result": "context.ViewProductAvailabilities.Join(context.ProductsForHires, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.AvailableYn == \"1\").Select(row => new { row.T2.ProductName }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT product_type_code) FROM products_for_hire",
    "result": "context.ProductsForHires.Select(row => row.ProductTypeCode).Distinct().Count();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT first_name , last_name , gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY last_name",
    "result": "context.Customers.Where(row => row.GoodOrBadCustomer == \"good\").OrderBy(row => row.LastName).Select(row => new { row.FirstName, row.LastName, row.GenderMf }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(amount_due) FROM payments",
    "result": "context.Payments.Select(row => (double) row.AmountDue).Average();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(booked_count) , min(booked_count) , avg(booked_count) FROM products_booked",
    "result": "context.ProductsBookeds.GroupBy(row => 1).Select(group => new { MaxBookedCount = group.Select(row => row.BookedCount).Max(), MinBookedCount = group.Select(row => row.BookedCount).Min(), AverageBookedCount = group.Select(row => row.BookedCount).Average() }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT payment_type_code FROM payments",
    "result": "context.Payments.Select(row => new { row.PaymentTypeCode }).Distinct().ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'",
    "result": "context.ProductsForHires.Where(row => EF.Functions.Like(row.ProductName, \"%Book%\")).Select(row => new { row.DailyHireCost }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount > 200 )",
    "result": "context.ProductsForHires.Where(row => !context.ProductsBookeds.Where(row => row.BookedAmount > 200).Select(row => row.ProductId).Contains(row.ProductId)).Count();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'bad'",
    "result": "context.DiscountCoupons.Join(context.Customers, T1 => T1.CouponId, T2 => T2.CouponId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.GoodOrBadCustomer == \"good\").Select(row => row.T1.CouponAmount).Intersect(context.DiscountCoupons.Join(context.Customers, T1 => T1.CouponId, T2 => T2.CouponId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.GoodOrBadCustomer == \"bad\").Select(row => row.T1.CouponAmount)).ToList();",
    "db_name": "products_for_hire",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 523,78}, {0: 547,39}]\", linq_results: \"[{0: 2}, {0: 2}]\" }"
  },
  {
    "query": "SELECT payment_date FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'",
    "result": "context.Payments.Where(row => row.AmountPaid > 300 || row.PaymentTypeCode == \"Check\").Select(row => new { row.PaymentDate }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_name , product_description FROM products_for_hire WHERE product_type_code = 'Cutlery' AND daily_hire_cost < 20",
    "result": "context.ProductsForHires.Where(row => row.ProductTypeCode == \"Cutlery\" && row.DailyHireCost < 20).Select(row => new { row.ProductName, row.ProductDescription }).ToList();",
    "db_name": "products_for_hire",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM member WHERE Membership_card = 'Black'",
    "result": "context.Members.Where(row => row.MembershipCard == \"Black\").Count();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , address FROM member GROUP BY address",
    "result": "context.Members.GroupBy(row => new { row.Address }).Select(group => new { Count = group.Count(), group.Key.Address }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'",
    "result": "context.Members.Where(row => row.Address == \"Harford\" || row.Address == \"Waterbury\").Select(row => new { row.Name }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , member_id FROM member WHERE Membership_card = 'Black' OR age < 30",
    "result": "context.Members.Where(row => row.MembershipCard == \"Black\" || row.Age < 30).Select(row => new { row.Name, row.MemberId }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Time_of_purchase , age , address FROM member ORDER BY Time_of_purchase",
    "result": "context.Members.OrderBy(row => row.TimeOfPurchase).Select(row => new { row.TimeOfPurchase, row.Age, row.Address }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*) > 5",
    "result": "context.Members.GroupBy(row => new { row.MembershipCard }).Where(group => group.Count() > 5).Select(group => new { group.Key.MembershipCard }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40",
    "result": "context.Members.Where(row => row.Age < 30).Select(row => row.Address).Intersect(context.Members.Where(row => row.Age > 40).Select(row => row.Address)).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'",
    "result": "context.Members.Where(row => row.Address == \"Hartford\").Select(row => row.MembershipCard).Intersect(context.Members.Where(row => row.Address == \"Waterbury\").Select(row => row.MembershipCard)).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM member WHERE address != 'Hartford'",
    "result": "context.Members.Where(row => row.Address != \"Hartford\").Count();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card = 'Black'",
    "result": "context.Members.Select(row => row.Address).Except(context.Members.Where(row => row.MembershipCard == \"Black\").Select(row => row.Address)).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT address FROM shop ORDER BY open_year",
    "result": "context.Shops.OrderBy(row => row.OpenYear).Select(row => new { row.Address }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(num_of_staff) , avg(score) FROM shop",
    "result": "context.Shops.GroupBy(row => 1).Select(group => new { AverageNumOfStaff = group.Select(row => row.NumOfStaff).Average(), AverageScore = group.Select(row => row.Score).Average() }).ToList();",
    "db_name": "coffee_shop",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,86): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.00"
  },
  {
    "query": "SELECT shop_id , address FROM shop WHERE score < (SELECT avg(score) FROM shop)",
    "result": "context.Shops.Where(row => row.Score < context.Shops.Select(row => (double) row.Score).Average()).Select(row => new { row.ShopId, row.Address }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT address , num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)",
    "result": "context.Shops.Where(row => !context.HappyHours.Select(row => row.ShopId).Contains(row.ShopId)).Select(row => new { row.Address, row.NumOfStaff }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.address , t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'",
    "result": "context.Shops.Join(context.HappyHours, t1 => t1.ShopId, t2 => t2.ShopId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Month == \"May\").Select(row => new { row.t1.Address, row.t1.ShopId }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT shop_id , count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.HappyHours.GroupBy(row => new { row.ShopId }).Select(group => new { group.Key.ShopId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1",
    "result": "context.HappyHours.GroupBy(row => new { row.Month }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Month }).Take(1).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*) > 2",
    "result": "context.HappyHours.GroupBy(row => new { row.Month }).Where(group => group.Count() > 2).Select(group => new { group.Key.Month }).ToList();",
    "db_name": "coffee_shop",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM ALBUM",
    "result": "context.Albums.Count();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM GENRE",
    "result": "context.Genres.Select(row => new { row.Name }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM CUSTOMER WHERE State = \"NY\"",
    "result": "context.Customers.Where(row => row.State == \"NY\").Select(row => new { row..CustomerId, row..FirstName, row..LastName, row..Company, row..Address, row..City, row..State, row..Country, row..PostalCode, row..Phone, row..Fax, row..Email, row..SupportRepId }).ToList();",
    "db_name": "chinook_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,251): error CS0103: The name 'SupportRepId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    39 Error(s)\n\nTime Elapsed 00:00:02.00"
  },
  {
    "query": "SELECT FirstName , LastName FROM EMPLOYEE WHERE City = \"Calgary\"",
    "result": "context.Employees.Where(row => row.City == \"Calgary\").Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT distinct(BillingCountry) FROM INVOICE",
    "result": "context.Invoices.Select(row => new { row.BillingCountry }).Distinct().ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
    "result": "context.Artists.Where(row => EF.Functions.Like(row.Name, \"%a%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"AC/DC\"",
    "result": "context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"AC/DC\").Select(row => new { row.T1.Title }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"Metallica\"",
    "result": "context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Metallica\").Count();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = \"Balls to the Wall\"",
    "result": "context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Title == \"Balls to the Wall\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Name }).Take(1).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
    "result": "context.Tracks.Where(row => EF.Functions.Like(row.Name, \"%you%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT AVG(UnitPrice) FROM TRACK",
    "result": "context.Tracks.Select(row => (double) row.UnitPrice).Average();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Milliseconds) , min(Milliseconds) FROM TRACK",
    "result": "context.Tracks.GroupBy(row => 1).Select(group => new { MaxMilliseconds = group.Select(row => row.Milliseconds).Max(), MinMilliseconds = group.Select(row => row.Milliseconds).Min() }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Title , T2.AlbumID , COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID",
    "result": "context.Albums.Join(context.Tracks, T1 => T1.AlbumId, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AlbumId }).Select(group => new { group.First().T1.Title, group.Key.AlbumId, Count = group.Count() }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.GenreId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name }).Take(1).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
    "result": "context.MediaTypes.Join(context.Tracks, T1 => T1.MediaTypeId, T2 => T2.MediaTypeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.MediaTypeId }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.Name }).Take(1).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Title , T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID",
    "result": "context.Albums.Join(context.Tracks, T1 => T1.AlbumId, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.UnitPrice > 1).GroupBy(row => new { row.T2.AlbumId }).Select(group => new { group.First().T1.Title, group.Key.AlbumId }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\"",
    "result": "context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Rock\").Count();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Jazz\"",
    "result": "context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Jazz\").Select(row => (double) row.T2.UnitPrice).Average();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT FirstName , LastName FROM CUSTOMER WHERE Email = \"luisg@embraer.com.br\"",
    "result": "context.Customers.Where(row => row.Email == \"luisg@embraer.com.br\").Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
    "result": "context.Customers.Where(row => EF.Functions.Like(row.Email, \"%gmail.com%\")).Count();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.FirstName , T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = \"Leonie\"",
    "result": "context.Customers.Join(context.Employees, T1 => T1.SupportRepId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"Leonie\").Select(row => new { row.T2.FirstName, row.T2.LastName }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = \"70174\"",
    "result": "context.Customers.Join(context.Employees, T1 => T1.SupportRepId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PostalCode == \"70174\").Select(row => new { row.T2.City }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
    "result": "context.Employees.Select(row => row.City).Distinct().Count();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"",
    "result": "context.Customers.Join(context.Invoices, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"Astrid\" && row.T1.LastName == \"Gruber\").Select(row => new { row.T2.InvoiceDate }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20",
    "result": "context.Customers.Select(row => row.LastName).Except(context.Customers.Join(context.Invoices, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Total > 20).Select(row => row.T1.LastName)).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Brazil\"",
    "result": "context.Customers.Join(context.Invoices, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Country == \"Brazil\").Select(row => new { row.T1.FirstName }).Distinct().ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Germany\"",
    "result": "context.Customers.Join(context.Invoices, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Country == \"Germany\").Select(row => new { row.T1.Address }).Distinct().ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Phone FROM EMPLOYEE",
    "result": "context.Employees.Select(row => new { row.Phone }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = \"AAC audio file\"",
    "result": "context.MediaTypes.Join(context.Tracks, T1 => T1.MediaTypeId, T2 => T2.MediaTypeId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"AAC audio file\").Count();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Latin\" OR T1.Name = \"Pop\"",
    "result": "context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Latin\" || row.T1.Name == \"Pop\").Select(row => row.T2.Milliseconds).Average();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) >= 10",
    "result": "context.Customers.Join(context.Employees, T1 => T1.SupportRepId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SupportRepId }).Where(group => group.Count() >= 10).Select(group => new { group.First().T1.FirstName, group.Key.SupportRepId }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) <= 20",
    "result": "context.Customers.Join(context.Employees, T1 => T1.SupportRepId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SupportRepId }).Where(group => group.Count() <= 20).Select(group => new { group.First().T1.LastName }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Title FROM ALBUM ORDER BY Title",
    "result": "context.Albums.OrderBy(row => row.Title).Select(row => new { row.Title }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name , T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*) >= 3 ORDER BY T2.Name",
    "result": "context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ArtistId }).Where(group => group.Count() >= 3).OrderBy(group => group.First().T2.Name).Select(group => new { group.First().T2.Name, group.Key.ArtistId }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId",
    "result": "context.Artists.Select(row => row.Name).Except(context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Select(row => row.T2.Name)).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\"",
    "result": "context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Rock\").Select(row => (double) row.T2.UnitPrice).Average();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Milliseconds) , min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Pop\"",
    "result": "context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Pop\").GroupBy(row => 1).Select(group => new { MaxMillisecondsT2 = group.Select(row => row.T2.Milliseconds).Max(), MinMillisecondsT2 = group.Select(row => row.T2.Milliseconds).Min() }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT BirthDate FROM EMPLOYEE WHERE City = \"Edmonton\"",
    "result": "context.Employees.Where(row => row.City == \"Edmonton\").Select(row => new { row.BirthDate }).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT distinct(UnitPrice) FROM TRACK",
    "result": "context.Tracks.Select(row => new { row.UnitPrice }).Distinct().ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
    "result": "context.Artists.Where(row => !context.Albums.Select(row => row.ArtistId).Contains(row.ArtistId)).Count();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'",
    "result": "context.Albums.Join(context.Tracks, T1 => T1.AlbumId, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Genres, joined => joined.T2.GenreId, T3 => T3.GenreId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Reggae\").Select(row => row.T1.Title).Intersect(context.Albums.Join(context.Tracks, T1 => T1.AlbumId, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Genres, joined => joined.T2.GenreId, T3 => T3.GenreId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Rock\").Select(row => row.T1.Title)).ToList();",
    "db_name": "chinook_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM ASSESSMENT_NOTES",
    "result": "context.AssessmentNotes.Count();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_of_notes FROM Assessment_Notes",
    "result": "context.AssessmentNotes.Select(row => new { row.DateOfNotes }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM ADDRESSES WHERE zip_postcode = \"197\"",
    "result": "context.Addresses.Where(row => row.ZipPostcode == \"197\").Count();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident",
    "result": "context.BehaviorIncidents.Select(row => row.IncidentTypeCode).Distinct().Count();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT detention_type_code FROM Detention",
    "result": "context.Detentions.Select(row => new { row.DetentionTypeCode }).Distinct().ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_incident_start , date_incident_end FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"",
    "result": "context.BehaviorIncidents.Where(row => row.IncidentTypeCode == \"NOISE\").Select(row => new { row.DateIncidentStart, row.DateIncidentEnd }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT detention_summary FROM Detention",
    "result": "context.Detentions.Select(row => new { row.DetentionSummary }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cell_mobile_number , email_address FROM STUDENTS",
    "result": "context.Students.Select(row => new { row.CellMobileNumber, row.EmailAddress }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT email_address FROM Students WHERE first_name = \"Emma\" AND last_name = \"Rohan\"",
    "result": "context.Students.Where(row => row.FirstName == \"Emma\" && row.LastName == \"Rohan\").Select(row => new { row.EmailAddress }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT student_id) FROM Students_in_Detention",
    "result": "context.StudentsInDetentions.Select(row => row.StudentId).Distinct().Count();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT gender FROM TEACHERS WHERE last_name = \"Medhurst\"",
    "result": "context.Teachers.Where(row => row.LastName == \"Medhurst\").Select(row => new { row.Gender }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = \"VIOLENCE\"",
    "result": "context.RefIncidentTypes.Where(row => row.IncidentTypeCode == \"VIOLENCE\").Select(row => new { row.IncidentTypeDescription }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(monthly_rental) , min(monthly_rental) FROM Student_Addresses",
    "result": "context.StudentAddresses.GroupBy(row => 1).Select(group => new { MaxMonthlyRental = group.Select(row => (double) row.MonthlyRental).Max(), MinMonthlyRental = group.Select(row => (double) row.MonthlyRental).Min() }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'",
    "result": "context.Teachers.Where(row => EF.Functions.Like(row.EmailAddress, \"%man%\")).Select(row => new { row.FirstName }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC",
    "result": "context.AssessmentNotes.OrderBy(row => row.DateOfNotes).Select(row => new { row..NotesId, row..StudentId, row..TeacherId, row..DateOfNotes, row..TextOfNotes, row..OtherDetails }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,175): error CS0103: The name 'OtherDetails' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    18 Error(s)\n\nTime Elapsed 00:00:03.89"
  },
  {
    "query": "SELECT city FROM Addresses ORDER BY city",
    "result": "context.Addresses.OrderBy(row => row.City).Select(row => new { row.City }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT first_name , last_name FROM Teachers ORDER BY last_name",
    "result": "context.Teachers.OrderBy(row => row.LastName).Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC",
    "result": "context.StudentAddresses.OrderByDescending(row => (double) row.MonthlyRental).Select(row => new { row..StudentId, row..AddressId, row..DateAddressFrom, row..DateAddressTo, row..MonthlyRental, row..OtherDetails }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,209): error CS0103: The name 'OtherDetails' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    18 Error(s)\n\nTime Elapsed 00:00:07.69"
  },
  {
    "query": "SELECT T1.student_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.AssessmentNotes.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StudentId, group.First().T2.FirstName }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.teacher_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3",
    "result": "context.AssessmentNotes.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TeacherId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.TeacherId, group.First().T2.FirstName }).Take(3).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.student_id , T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.BehaviorIncidents.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StudentId, group.First().T2.LastName }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.teacher_id , T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.detention_type_code = \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Detentions.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DetentionTypeCode == \"AFTER\").GroupBy(row => new { row.T1.TeacherId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.TeacherId, group.First().T2.LastName }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.student_id , T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
    "result": "context.StudentAddresses.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).OrderByDescending(group => group.Average(row => (double) row.T1.MonthlyRental)).Select(group => new { group.Key.StudentId, group.First().T2.FirstName }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.address_id , T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
    "result": "context.Addresses.Join(context.StudentAddresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AddressId }).OrderByDescending(group => group.Average(row => (double) row.T2.MonthlyRental)).Select(group => new { group.Key.AddressId, group.First().T1.City }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.incident_type_code , T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.BehaviorIncidents.Join(context.RefIncidentTypes, T1 => T1.IncidentTypeCode, T2 => T2.IncidentTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.IncidentTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.IncidentTypeCode, group.First().T2.IncidentTypeDescription }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.detention_type_code , T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Detentions.Join(context.RefDetentionTypes, T1 => T1.DetentionTypeCode, T2 => T2.DetentionTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DetentionTypeCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.DetentionTypeCode, group.First().T2.DetentionTypeDescription }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"",
    "result": "context.AssessmentNotes.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Fanny\").Select(row => new { row.T1.DateOfNotes }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = \"Schuster\"",
    "result": "context.AssessmentNotes.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.LastName == \"Schuster\").Select(row => new { row.T1.TextOfNotes }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.date_incident_start , date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.last_name = \"Fahey\"",
    "result": "context.BehaviorIncidents.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.LastName == \"Fahey\").Select(row => new { row.T1.DateIncidentStart, row.T1.DateIncidentEnd }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.datetime_detention_start , datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = \"Schultz\"",
    "result": "context.Detentions.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.LastName == \"Schultz\").Select(row => new { row.T1.DatetimeDetentionStart, row.T1.DatetimeDetentionEnd }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.address_id , T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY monthly_rental DESC LIMIT 1",
    "result": "context.Addresses.Join(context.StudentAddresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => (double) row.T2.MonthlyRental).Select(row => new { row.T2.AddressId, row.T1.ZipPostcode }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1",
    "result": "context.StudentAddresses.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).OrderBy(row => (double) row.T1.MonthlyRental).Select(row => new { row.T2.CellMobileNumber }).Take(1).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Texas\"",
    "result": "context.Addresses.Join(context.StudentAddresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StateProvinceCounty == \"Texas\").Select(row => new { row.T2.MonthlyRental }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Wisconsin\"",
    "result": "context.Addresses.Join(context.Students, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StateProvinceCounty == \"Wisconsin\").Select(row => new { row.T2.FirstName, row.T2.LastName }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.line_1 , avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id",
    "result": "context.Addresses.Join(context.StudentAddresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AddressId }).Select(group => new { group.First().T1.Line1, AverageMonthlyRental = group.Select(row => (double) row.T2.MonthlyRental).Average() }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = \"Lyla\"",
    "result": "context.Addresses.Join(context.Teachers, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Lyla\").Select(row => new { row.T1.ZipPostcode }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T1.zip_postcode = \"918\"",
    "result": "context.Addresses.Join(context.Teachers, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ZipPostcode == \"918\").Select(row => new { row.T2.EmailAddress }).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )",
    "result": "context.Students.Where(row => !context.BehaviorIncidents.Select(row => row.StudentId).Contains(row.StudentId)).Count();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id",
    "result": "context.Teachers.Select(row => row.LastName).Except(context.Teachers.Join(context.Detentions, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.LastName)).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id",
    "result": "context.Addresses.Join(context.Students, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Line1).Intersect(context.Addresses.Join(context.Teachers, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Line1)).ToList();",
    "db_name": "behavior_monitoring",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT school , nickname FROM university ORDER BY founded",
    "result": "context.Universities.OrderBy(row => row.Founded).Select(row => new { row.School, row.Nickname }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT school , LOCATION FROM university WHERE affiliation = 'Public'",
    "result": "context.Universities.Where(row => row.Affiliation == \"Public\").Select(row => new { row.School, row.Location }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
    "result": "context.Universities.OrderByDescending(row => row.Enrollment).Select(row => new { row.Founded }).Take(1).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
    "result": "context.Universities.Where(row => row.Affiliation != \"Public\").OrderByDescending(row => row.Founded).Select(row => new { row.Founded }).Take(1).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT school_id) FROM basketball_match",
    "result": "context.BasketballMatches.Select(row => row.SchoolId).Distinct().Count();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
    "result": "context.BasketballMatches.OrderByDescending(row => row.AccPercent).Select(row => new { row.AccPercent }).Take(1).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1",
    "result": "context.Universities.Join(context.BasketballMatches, t1 => t1.SchoolId, t2 => t2.SchoolId, (t1, t2) => new { t1, t2 }).OrderBy(row => row.t2.AccPercent).Select(row => new { row.t1.PrimaryConference }).Take(1).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.team_name , t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1",
    "result": "context.Universities.Join(context.BasketballMatches, t1 => t1.SchoolId, t2 => t2.SchoolId, (t1, t2) => new { t1, t2 }).OrderBy(row => row.t1.Founded).Select(row => new { row.t2.TeamName, row.t2.AccRegularSeason }).Take(1).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.All_Games , t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'",
    "result": "context.Universities.Join(context.BasketballMatches, t1 => t1.SchoolId, t2 => t2.SchoolId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TeamName == \"Clemson\").Select(row => new { row.t2.AllGames, row.t1.Location }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(enrollment) FROM university WHERE founded < 1850",
    "result": "context.Universities.Where(row => row.Founded < 1850).Select(row => (double) row.Enrollment).Average();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT enrollment , primary_conference FROM university ORDER BY founded LIMIT 1",
    "result": "context.Universities.OrderBy(row => row.Founded).Select(row => new { row.Enrollment, row.PrimaryConference }).Take(1).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(enrollment) , min(enrollment) FROM university",
    "result": "context.Universities.GroupBy(row => 1).Select(group => new { SumEnrollment = group.Select(row => row.Enrollment).Sum(), MinEnrollment = group.Select(row => row.Enrollment).Min() }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(enrollment) , affiliation FROM university GROUP BY affiliation",
    "result": "context.Universities.GroupBy(row => new { row.Affiliation }).Select(group => new { SumEnrollment = group.Select(row => row.Enrollment).Sum(), group.Key.Affiliation }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
    "result": "context.Universities.Where(row => !context.BasketballMatches.Select(row => row.SchoolId).Contains(row.SchoolId)).Count();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public'",
    "result": "context.Universities.Where(row => row.Founded > 1850 || row.Affiliation == \"Public\").Select(row => new { row.School }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT affiliation) FROM university",
    "result": "context.Universities.Select(row => row.Affiliation).Distinct().Count();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
    "result": "context.Universities.Where(row => EF.Functions.Like(row.Location, \"%NY%\")).Count();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < (SELECT avg(enrollment) FROM university)",
    "result": "context.Universities.Join(context.BasketballMatches, t1 => t1.SchoolId, t2 => t2.SchoolId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Enrollment < context.Universities.Select(row => (double) row.Enrollment).Average()).Select(row => new { row.t2.TeamName }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation",
    "result": "context.Universities.Where(row => row.Enrollment > 20000).GroupBy(row => new { row.Affiliation }).Select(group => new { Count = group.Count(), group.Key.Affiliation }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(Enrollment) , affiliation FROM university WHERE founded > 1850 GROUP BY affiliation",
    "result": "context.Universities.Where(row => row.Founded > 1850).GroupBy(row => new { row.Affiliation }).Select(group => new { SumEnrollment = group.Select(row => row.Enrollment).Sum(), group.Key.Affiliation }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Enrollment) FROM university",
    "result": "context.Universities.Select(row => row.Enrollment).Max();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM basketball_match",
    "result": "context.BasketballMatches.Select(row => new { row..TeamId, row..SchoolId, row..TeamName, row..AccRegularSeason, row..AccPercent, row..AccHome, row..AccRoad, row..AllGames, row..AllGamesPercent, row..AllHome, row..AllRoad, row..AllNeutral }).ToList();",
    "db_name": "university_basketball",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,239): error CS0103: The name 'AllNeutral' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    36 Error(s)\n\nTime Elapsed 00:00:03.60"
  },
  {
    "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
    "result": "context.BasketballMatches.OrderByDescending(row => row.AllHome).Select(row => new { row.TeamName }).ToList();",
    "db_name": "university_basketball",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM camera_lens WHERE focal_length_mm > 15",
    "result": "context.CameraLens.Where(row => row.FocalLengthMm > 15).Count();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT brand , name FROM camera_lens ORDER BY max_aperture DESC",
    "result": "context.CameraLens.OrderByDescending(row => row.MaxAperture).Select(row => new { row.Brand, row.Name }).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT id , color , name FROM photos",
    "result": "context.Photos.Select(row => new { row.Id, row.Color, row.Name }).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(height) , avg(height) FROM mountain",
    "result": "context.Mountains.GroupBy(row => 1).Select(group => new { MaxHeight = group.Select(row => row.Height).Max(), AverageHeight = group.Select(row => row.Height).Average() }).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(prominence) FROM mountain WHERE country = 'Morocco'",
    "result": "context.Mountains.Where(row => row.Country == \"Morocco\").Select(row => (double) row.Prominence).Average();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , height , prominence FROM mountain WHERE range != 'Aberdare Range'",
    "result": "context.Mountains.Where(row => row.Range != \"Aberdare Range\").Select(row => new { row.Name, row.Height, row.Prominence }).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.height > 4000",
    "result": "context.Mountains.Join(context.Photos, T1 => T1.Id, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Height > 4000).Select(row => new { row.T1.Id, row.T1.Name }).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING count(*) >= 2",
    "result": "context.Mountains.Join(context.Photos, T1 => T1.Id, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Photos.Join(context.CameraLens, T1 => T1.CameraLensId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name }).Take(1).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus'",
    "result": "context.CameraLens.Join(context.Photos, T1 => T1.Id, T2 => T2.CameraLensId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Brand == \"Sigma\" || row.T1.Brand == \"Olympus\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT brand) FROM camera_lens",
    "result": "context.CameraLens.Select(row => row.Brand).Distinct().Count();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
    "result": "context.CameraLens.Where(row => !context.Photos.Select(row => row.CameraLensId).Contains(row.Id)).Count();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.country = 'Ethiopia'",
    "result": "context.Mountains.Join(context.Photos, T1 => T1.Id, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Country == \"Ethiopia\").Select(row => row.T2.CameraLensId).Distinct().Count();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Lasta Massif'",
    "result": "context.Mountains.Join(context.Photos, T1 => T1.Id, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Join(context.CameraLens, joined => joined.T2.CameraLensId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Range == \"Toubkal Atlas\").Select(row => row.T3.Brand).Intersect(context.Mountains.Join(context.Photos, T1 => T1.Id, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Join(context.CameraLens, joined => joined.T2.CameraLensId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Range == \"Lasta Massif\").Select(row => row.T3.Brand)).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , prominence FROM mountain EXCEPT SELECT T1.name , T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T3.brand = 'Sigma'",
    "result": "context.Mountains.Where(row => row.Prominence.HasValue).Select(row => new { row.Name, row.Prominence.Value }).Except(context.Mountains.Join(context.Photos, T1 => T1.Id, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Join(context.CameraLens, joined => joined.T2.CameraLensId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Brand == \"Sigma\").Where(row => row.T1.Prominence.HasValue).Select(row => new { row.T1.Name, row.T1.Prominence.Value })).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"",
    "result": "context.CameraLens.Where(row => EF.Functions.Like(row.Name, \"%Digital%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id = T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)",
    "result": "context.CameraLens.Join(context.Photos, T1 => T1.Id, T2 => T2.CameraLensId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Select(group => new { group.First().T1.Name, Count = group.Count() }).OrderBy(group => group.Count).ToList();",
    "db_name": "mountain_photos",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"chi\";",
    "result": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.VenueName == \"chi\").Select(row => new { row.t1.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT paperid FROM paper WHERE title = \"machine networks for one shot learning\";",
    "result": "context.Papers.Where(row => row.Title == \"machine networks for one shot learning\").Select(row => new { row.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.datasetname = \"RGB-D Object Dataset\" AND t3.title = \"Class consistent multi-modal fusion with binary features\" AND t3.year = 2016 AND t4.venuename = \"CVPR\";",
    "result": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Venues, joined => joined.t3.VenueId, t4 => t4.VenueId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.DatasetName == \"RGB-D Object Dataset\" && row.t3.Title == \"Class consistent multi-modal fusion with binary features\" && row.t3.Year == 2016 && row.t4.VenueName == \"CVPR\").Select(row => new { row.t3.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;",
    "result": "context.Papers.Select(row => row.PaperId).Distinct().Count().Distinct();",
    "db_name": "scholar",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,73): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.32"
  },
  {
    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
    "result": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => EF.Functions.Like(row.t1.DatasetName, \"ImageNet\")).Select(row => row.t3.PaperId).Distinct().Count().Distinct();",
    "db_name": "scholar",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,356): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.50"
  },
  {
    "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"nature communications\";",
    "result": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Year == 2015 && row.t2.VenueName == \"nature communications\").Select(row => row.t1.PaperId).Count().Distinct();",
    "db_name": "scholar",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,231): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.54"
  },
  {
    "query": "SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t4.venuename = \"ACL\";",
    "result": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Venues, joined => joined.t3.VenueId, t4 => t4.VenueId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t4.VenueName == \"ACL\").Select(row => new { row.t1.DatasetId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT COUNT ( t1.paperid ) , t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
    "result": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.VenueName == \"NIPS\").GroupBy(row => new { row.t1.Year }).Select(group => new { CountPaperId = group.Select(row => row.t1.PaperId).Count(), group.Key.Year }).OrderByDescending(group => group.CountPaperId).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"ACL\";",
    "result": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Year == 2015 && row.t2.VenueName == \"ACL\").Select(row => row.t1.PaperId).Distinct().Count().Distinct();",
    "db_name": "scholar",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,224): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.41"
  },
  {
    "query": "SELECT DISTINCT paperid FROM paper WHERE YEAR = 2014;",
    "result": "context.Papers.Where(row => row.Year == 2014).Select(row => new { row.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"WebKB\";",
    "result": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.DatasetName == \"WebKB\").Select(row => new { row.t3.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT venueid FROM paper WHERE YEAR = 2013;",
    "result": "context.Papers.Where(row => row.Year == 2013).Select(row => new { row.VenueId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT paperid FROM paper WHERE YEAR = ( SELECT MAX ( YEAR ) FROM paper );",
    "result": "context.Papers.Where(row => row.Year == context.Papers.Select(row => row.Year).Max()).Select(row => new { row.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"sigir\";",
    "result": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.VenueName == \"sigir\").Select(row => row.t1.PaperId).Count().Distinct();",
    "db_name": "scholar",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,192): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.58"
  },
  {
    "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";",
    "result": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Year == 2015 && row.t2.VenueName == \"pldi\").Select(row => new { row.t1.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT journalid FROM paper WHERE YEAR = 2011 GROUP BY journalid;",
    "result": "context.Papers.Where(row => row.Year == 2011).GroupBy(row => new { row.JournalId }).Select(group => new { group.Key.JournalId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.title LIKE \"neural attention\" AND t1.year = 2016 AND t2.venuename = \"ACL\";",
    "result": "context.Venues.Join(context.Papers, t2 => t2.VenueId, t1 => t1.VenueId, (t2, t1) => new { t2, t1 }).Where(row => EF.Functions.Like(row.t1.Title, \"neural attention\") && row.t1.Year == 2016 && row.t2.VenueName == \"ACL\").Select(row => new { row.t1.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"ImageNet\" AND t3.year = 2014;",
    "result": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.DatasetName == \"ImageNet\" && row.t3.Year == 2014).Select(row => new { row.t3.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t3.venueid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"ImageNet\";",
    "result": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.DatasetName == \"ImageNet\").Select(row => new { row.t3.VenueId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t2.paperid FROM paper AS t2 JOIN journal AS t1 ON t2.journalid = t1.journalid WHERE t1.journalname = \"Academic radiology\" AND t2.year = 1995;",
    "result": "context.Papers.Join(context.Journals, t2 => t2.JournalId, t1 => t1.JournalId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.JournalName == \"Academic radiology\" && row.t2.Year == 1995).Select(row => new { row.t2.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT paperid FROM paper WHERE YEAR != 2015;",
    "result": "context.Papers.Where(row => row.Year != 2015).Select(row => new { row.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT paperid , title FROM paper WHERE title LIKE \"the effects of juicing for cancer patients\" AND YEAR > 2006;",
    "result": "context.Papers.Where(row => EF.Functions.Like(row.Title, \"the effects of juicing for cancer patients\") && row.Year > 2006).Select(row => new { row.PaperId, row.Title }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.datasetname = \"ImageNet\" AND t3.year = 2014 AND t4.venuename = \"eccv\";",
    "result": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Venues, joined => joined.t3.VenueId, t4 => t4.VenueId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.DatasetName == \"ImageNet\" && row.t3.Year == 2014 && row.t4.VenueName == \"eccv\").Select(row => new { row.t3.PaperId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.datasetname = \"ImageNet\" AND t4.venuename = \"cvpr\";",
    "result": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Venues, joined => joined.t3.VenueId, t4 => t4.VenueId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.DatasetName == \"ImageNet\" && row.t4.VenueName == \"cvpr\").Select(row => row.t3.PaperId).Count().Distinct();",
    "db_name": "scholar",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,487): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.88"
  },
  {
    "query": "SELECT DISTINCT venueid FROM venue WHERE venuename = \"Neuroscience\";",
    "result": "context.Venues.Where(row => row.VenueName == \"Neuroscience\").Select(row => new { row.VenueId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT venueid FROM paper WHERE title = \"Fracture of acrylic bone cement\";",
    "result": "context.Papers.Where(row => row.Title == \"Fracture of acrylic bone cement\").Select(row => new { row.VenueId }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT title , YEAR FROM paper WHERE title = \"A Switching Architecture For ISDN\";",
    "result": "context.Papers.Where(row => row.Title == \"A Switching Architecture For ISDN\").Select(row => new { row.Title, row.Year }).Distinct().ToList();",
    "db_name": "scholar",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM film",
    "result": "context.Films.Count();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Director FROM film",
    "result": "context.Films.Select(row => new { row.Director }).Distinct().ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Gross_in_dollar) FROM film",
    "result": "context.Films.Select(row => row.GrossInDollar).Average();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
    "result": "context.FilmMarketEstimations.Select(row => new { row.LowEstimate, row.HighEstimate }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE FROM film_market_estimation WHERE YEAR = 1995",
    "result": "context.FilmMarketEstimations.Where(row => row.Year == 1995).Select(row => new { row.Type }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Number_cities) , min(Number_cities) FROM market",
    "result": "context.Markets.GroupBy(row => 1).Select(group => new { MaxNumberCities = group.Select(row => row.NumberCities).Max(), MinNumberCities = group.Select(row => row.NumberCities).Min() }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM market WHERE Number_cities < 300",
    "result": "context.Markets.Where(row => row.NumberCities < 300).Count();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country FROM market ORDER BY Country ASC",
    "result": "context.Markets.OrderBy(row => row.Country).Select(row => new { row.Country }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country FROM market ORDER BY Number_cities DESC",
    "result": "context.Markets.OrderByDescending(row => row.NumberCities).Select(row => new { row.Country }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Title , T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID",
    "result": "context.Films.Join(context.FilmMarketEstimations, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Title, row.T2.Type }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Year = 1995",
    "result": "context.Films.Join(context.FilmMarketEstimations, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 1995).Select(row => new { row.T1.Director }).Distinct().ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000",
    "result": "context.FilmMarketEstimations.Join(context.Markets, T1 => T1.MarketId, T2 => T2.MarketId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.LowEstimate > 10000).Select(row => row.T2.NumberCities).Average();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Country , T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID",
    "result": "context.FilmMarketEstimations.Join(context.Markets, T1 => T1.MarketId, T2 => T2.MarketId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Country, row.T1.Year }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country = \"Japan\" ORDER BY T1.Year DESC",
    "result": "context.FilmMarketEstimations.Join(context.Markets, T1 => T1.MarketId, T2 => T2.MarketId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country == \"Japan\").OrderByDescending(row => row.T1.Year).Select(row => new { row.T1.Year }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Studio , COUNT(*) FROM film GROUP BY Studio",
    "result": "context.Films.GroupBy(row => new { row.Studio }).Select(group => new { group.Key.Studio, Count = group.Count() }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Films.GroupBy(row => new { row.Studio }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Studio }).Take(1).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*) >= 2",
    "result": "context.Films.GroupBy(row => new { row.Studio }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Studio }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)",
    "result": "context.Films.Where(row => !context.FilmMarketEstimations.Select(row => row.FilmId).Contains(row.FilmId)).Select(row => new { row.Title }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Studio FROM film WHERE Director = \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director = \"Walter Hill\"",
    "result": "context.Films.Where(row => row.Director == \"Nicholas Meyer\").Select(row => row.Studio).Intersect(context.Films.Where(row => row.Director == \"Walter Hill\").Select(row => row.Studio)).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title , Studio FROM film WHERE Studio LIKE \"%Universal%\"",
    "result": "context.Films.Where(row => EF.Functions.Like(row.Studio, \"%Universal%\")).Select(row => new { row.Title, row.Studio }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director = \"Walter Hill\"",
    "result": "context.Films.Select(row => row.Studio).Except(context.Films.Where(row => row.Director == \"Walter Hill\").Select(row => row.Studio)).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar) >= 4500000",
    "result": "context.Films.GroupBy(row => new { row.Studio }).Where(group => group.Average(row => row.GrossInDollar) >= 4500000).Select(group => new { group.Key.Studio }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID ORDER BY high_estimate DESC LIMIT 1",
    "result": "context.Films.Join(context.FilmMarketEstimations, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.HighEstimate).Select(row => new { row.T1.Title }).Take(1).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title , director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id = T2.Market_ID WHERE country = 'China')",
    "result": "context.Films.Where(row => !context.FilmMarketEstimations.Join(context.Markets, T1 => T1.MarketId, T2 => T2.MarketId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country == \"China\").Select(row => row.T1.FilmId).Contains(row.FilmId)).Select(row => new { row.Title, row.Director }).ToList();",
    "db_name": "film_rank",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM artist",
    "result": "context.Artists.Count();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , age , country FROM artist ORDER BY Year_Join",
    "result": "context.Artists.OrderBy(row => row.YearJoin).Select(row => new { row.Name, row.Age, row.Country }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT country FROM artist",
    "result": "context.Artists.Select(row => new { row.Country }).Distinct().ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , year_join FROM artist WHERE country != 'United States'",
    "result": "context.Artists.Where(row => row.Country != \"United States\").Select(row => new { row.Name, row.YearJoin }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM artist WHERE age > 46 AND year_join > 1990",
    "result": "context.Artists.Where(row => row.Age > 46 && row.YearJoin > 1990).Count();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(age) , min(age) FROM artist WHERE country = 'United States'",
    "result": "context.Artists.Where(row => row.Country == \"United States\").GroupBy(row => 1).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), MinAge = group.Select(row => row.Age).Min() }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1",
    "result": "context.Artists.OrderByDescending(row => row.YearJoin).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM exhibition WHERE YEAR >= 2005",
    "result": "context.Exhibitions.Where(row => row.Year >= 2005).Count();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT theme , YEAR FROM exhibition WHERE ticket_price < 15",
    "result": "context.Exhibitions.Where(row => row.TicketPrice < 15).Select(row => new { row.Theme, row.Year }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id",
    "result": "context.Exhibitions.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ArtistId }).Select(group => new { group.First().T2.Name, Count = group.Count() }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Exhibitions.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ArtistId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name, group.First().T2.Country }).Take(1).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
    "result": "context.Artists.Where(row => !context.Exhibitions.Select(row => row.ArtistId).Contains(row.ArtistId)).Select(row => new { row.Name }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.theme , T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.ticket_price > (SELECT avg(ticket_price) FROM exhibition)",
    "result": "context.Exhibitions.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.TicketPrice > context.Exhibitions.Select(row => (double) row.TicketPrice).Average()).Select(row => new { row.T1.Theme, row.T2.Name }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(ticket_price) , min(ticket_price) , max(ticket_price) FROM exhibition WHERE YEAR < 2009",
    "result": "context.Exhibitions.Where(row => row.Year < 2009).GroupBy(row => 1).Select(group => new { AverageTicketPrice = group.Select(row => row.TicketPrice).Average(), MinTicketPrice = group.Select(row => row.TicketPrice).Min(), MaxTicketPrice = group.Select(row => row.TicketPrice).Max() }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT theme , YEAR FROM exhibition ORDER BY ticket_price DESC",
    "result": "context.Exhibitions.OrderByDescending(row => row.TicketPrice).Select(row => new { row.Theme, row.Year }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.theme , T1.date , T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004",
    "result": "context.ExhibitionRecords.Join(context.Exhibitions, T1 => T1.ExhibitionId, T2 => T2.ExhibitionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2004).Select(row => new { row.T2.Theme, row.T1.Date, row.T1.Attendance }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year = 2004",
    "result": "context.Artists.Select(row => row.Name).Except(context.Exhibitions.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2004).Select(row => row.T2.Name)).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500",
    "result": "context.ExhibitionRecords.Join(context.Exhibitions, T1 => T1.ExhibitionId, T2 => T2.ExhibitionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Attendance < 100).Select(row => row.T2.Theme).Intersect(context.ExhibitionRecords.Join(context.Exhibitions, T1 => T1.ExhibitionId, T2 => T2.ExhibitionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Attendance > 500).Select(row => row.T2.Theme)).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100 OR T2.ticket_price < 10",
    "result": "context.ExhibitionRecords.Join(context.Exhibitions, T1 => T1.ExhibitionId, T2 => T2.ExhibitionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Attendance > 100 || row.T2.TicketPrice < 10).Count();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id JOIN artist AS T3 ON T3.artist_id = T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance) > 200",
    "result": "context.ExhibitionRecords.Join(context.Exhibitions, T1 => T1.ExhibitionId, T2 => T2.ExhibitionId, (T1, T2) => new { T1, T2 }).Join(context.Artists, joined => joined.T2.ArtistId, T3 => T3.ArtistId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.ArtistId }).Where(group => group.Average(row => row.T1.Attendance) > 200).Select(group => new { group.First().T3.Name }).ToList();",
    "db_name": "theme_gallery",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT individual_first_name , individual_middle_name , individual_last_name FROM individuals ORDER BY individual_last_name",
    "result": "context.Individuals.OrderBy(row => row.IndividualLastName).Select(row => new { row.IndividualFirstName, row.IndividualMiddleName, row.IndividualLastName }).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT form_type_code FROM forms",
    "result": "context.Forms.Select(row => new { row.FormTypeCode }).Distinct().ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Forms.Join(context.PartyForms, t1 => t1.FormId, t2 => t2.FormId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.FormId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.FormName }).Take(1).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT payment_method_code , party_phone FROM parties WHERE party_email = \"enrico09@example.com\"",
    "result": "context.Parties.Where(row => row.PartyEmail == \"enrico09@example.com\").Select(row => new { row.PaymentMethodCode, row.PartyPhone }).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id WHERE t2.form_id = (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
    "result": "context.Parties.Join(context.PartyForms, t1 => t1.PartyId, t2 => t2.PartyId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.FormId == context.PartyForms.GroupBy(row => new { row.FormId }).OrderByDescending(group => group.Count()).Select(group => group.Key.FormId).Take(1).First()).Select(row => new { row.t1.PartyEmail }).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
    "result": "context.Organizations.OrderBy(row => row.DateFormed).Select(row => new { row.OrganizationName }).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
    "result": "context.Organizations.OrderByDescending(row => row.DateFormed).Select(row => new { row.OrganizationName }).Take(1).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
    "result": "context.Organizations.Join(context.OrganizationContactIndividuals, t1 => t1.OrganizationId, t2 => t2.OrganizationId, (t1, t2) => new { t1, t2 }).Join(context.Individuals, joined => joined.t2.IndividualId, t3 => t3.IndividualId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.OrganizationName == \"Labour Party\").OrderByDescending(row => row.t2.DateContactTo).Select(row => new { row.t3.IndividualLastName }).Take(1).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.uk_vat_number = (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1",
    "result": "context.Organizations.Join(context.OrganizationContactIndividuals, t1 => t1.OrganizationId, t2 => t2.OrganizationId, (t1, t2) => new { t1, t2 }).Join(context.Individuals, joined => joined.t2.IndividualId, t3 => t3.IndividualId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.UkVatNumber == context.Organizations.Select(row => row.UkVatNumber).Max()).OrderBy(row => row.t2.DateContactTo).Select(row => new { row.t3.IndividualLastName }).Take(1).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM services",
    "result": "context.Services.Count();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id",
    "result": "context.Services.Select(row => row.ServiceName).Except(context.Services.Join(context.PartyServices, t1 => t1.ServiceId, t2 => t2.ServiceId, (t1, t2) => new { t1, t2 }).Select(row => row.t1.ServiceName)).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
    "result": "context.Addresses.Select(row => row.TownCity).Union(context.Addresses.Select(row => row.StateProvinceCounty)).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM addresses WHERE state_province_county = \"Colorado\"",
    "result": "context.Addresses.Where(row => row.StateProvinceCounty == \"Colorado\").Count();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*) > 3",
    "result": "context.Parties.GroupBy(row => new { row.PaymentMethodCode }).Where(group => group.Count() > 3).Select(group => new { group.Key.PaymentMethodCode }).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"",
    "result": "context.Organizations.Where(row => EF.Functions.Like(row.OrganizationName, \"%Party%\")).Select(row => new { row.OrganizationName }).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT payment_method_code) FROM parties",
    "result": "context.Parties.Select(row => row.PaymentMethodCode).Distinct().Count();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Parties.Join(context.PartyServices, t1 => t1.PartyId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.PartyEmail }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PartyEmail }).Take(1).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
    "result": "context.Addresses.Where(row => EF.Functions.Like(row.Line1NumberBuilding, \"%6862 Kaitlyn Knolls%\")).Select(row => new { row.StateProvinceCounty }).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Organizations.Join(context.OrganizationContactIndividuals, t1 => t1.OrganizationId, t2 => t2.OrganizationId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.OrganizationName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.OrganizationName }).Take(1).ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id",
    "result": "context.Individuals.Join(context.OrganizationContactIndividuals, t1 => t1.IndividualId, t2 => t2.IndividualId, (t1, t2) => new { t1, t2 }).Select(row => new { row.t1.IndividualLastName }).Distinct().ToList();",
    "db_name": "e_government",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT roomName FROM Rooms WHERE basePrice < 160 AND beds = 2 AND decor = 'modern';",
    "result": "context.Rooms.Where(row => row.BasePrice < 160 && row.Beds == 2 && row.Decor == \"modern\").Select(row => new { row.RoomName }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT roomName , RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2;",
    "result": "context.Rooms.Where(row => row.BasePrice > 160 && row.MaxOccupancy > 2).Select(row => new { row.RoomName, row.RoomId }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
    "result": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Room }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.RoomName }).Take(1).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\";",
    "result": "context.Reservations.Where(row => row.FirstName == \"ROY\" && row.LastName == \"SWEAZY\").Select(row => new { row.Kids }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\";",
    "result": "context.Reservations.Where(row => row.FirstName == \"ROY\" && row.LastName == \"SWEAZY\").Count();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.roomName , T1.Rate , T1.CheckIn , T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;",
    "result": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Room }).OrderByDescending(group => group.First().T1.Rate).Select(group => new { group.First().T2.RoomName, group.First().T1.Rate, group.First().T1.CheckIn, group.First().T1.CheckOut }).Take(1).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Adults FROM Reservations WHERE CheckIn = \"2010-10-23\" AND FirstName = \"CONRAD\" AND LastName = \"SELBIG\";",
    "result": "context.Reservations.Where(row => row.CheckIn == \"2010-10-23\" && row.FirstName == \"CONRAD\" && row.LastName == \"SELBIG\").Select(row => new { row.Adults }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Kids FROM Reservations WHERE CheckIn = \"2010-09-21\" AND FirstName = \"DAMIEN\" AND LastName = \"TRACHSEL\";",
    "result": "context.Reservations.Where(row => row.CheckIn == \"2010-09-21\" && row.FirstName == \"DAMIEN\" && row.LastName == \"TRACHSEL\").Select(row => new { row.Kids }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(beds) FROM Rooms WHERE bedtype = 'King';",
    "result": "context.Rooms.Where(row => row.BedType == \"King\").Select(row => row.Beds).Sum();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT roomName , decor FROM Rooms WHERE bedtype = 'King' ORDER BY basePrice;",
    "result": "context.Rooms.Where(row => row.BedType == \"King\").OrderBy(row => row.BasePrice).Select(row => new { row.RoomName, row.Decor }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT roomName , basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;",
    "result": "context.Rooms.OrderBy(row => row.BasePrice).Select(row => new { row.RoomName, row.BasePrice }).Take(1).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT decor FROM Rooms WHERE roomName = \"Recluse and defiance\";",
    "result": "context.Rooms.Where(row => row.RoomName == \"Recluse and defiance\").Select(row => new { row.Decor }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType;",
    "result": "context.Rooms.GroupBy(row => new { row.BedType }).Select(group => new { group.Key.BedType, AverageBasePrice = group.Select(row => row.BasePrice).Average() }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor = 'modern';",
    "result": "context.Rooms.Where(row => row.Decor == \"modern\").Select(row => row.MaxOccupancy).Sum();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;",
    "result": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Decor }).OrderBy(group => group.Count(row => row.T2.Decor != null)).Select(group => new { group.Key.Decor }).Take(1).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Rooms;",
    "result": "context.Rooms.Count();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Rooms WHERE bedType = \"King\";",
    "result": "context.Rooms.Where(row => row.BedType == \"King\").Count();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT bedType , count(*) FROM Rooms GROUP BY bedType;",
    "result": "context.Rooms.GroupBy(row => new { row.BedType }).Select(group => new { group.Key.BedType, Count = group.Count() }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;",
    "result": "context.Rooms.OrderByDescending(row => row.MaxOccupancy).Select(row => new { row.RoomName }).Take(1).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT RoomId , roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;",
    "result": "context.Rooms.OrderByDescending(row => row.BasePrice).Select(row => new { row.RoomId, row.RoomName }).Take(1).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT roomName , bedType FROM Rooms WHERE decor = \"traditional\";",
    "result": "context.Rooms.Where(row => row.Decor == \"traditional\").Select(row => new { row.RoomName, row.BedType }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;",
    "result": "context.Rooms.Where(row => row.BedType == \"King\").GroupBy(row => new { row.Decor }).Select(group => new { group.Key.Decor, Count = group.Count() }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT decor , avg(basePrice) , min(basePrice) FROM Rooms GROUP BY decor;",
    "result": "context.Rooms.GroupBy(row => new { row.Decor }).Select(group => new { group.Key.Decor, AverageBasePrice = group.Select(row => row.BasePrice).Average(), MinBasePrice = group.Select(row => row.BasePrice).Min() }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT roomName FROM Rooms ORDER BY basePrice;",
    "result": "context.Rooms.OrderBy(row => row.BasePrice).Select(row => new { row.RoomName }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor;",
    "result": "context.Rooms.Where(row => row.BasePrice > 120).GroupBy(row => new { row.Decor }).Select(group => new { group.Key.Decor, Count = group.Count() }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT roomName FROM Rooms WHERE bedType = \"King\" OR bedType = \"Queen\";",
    "result": "context.Rooms.Where(row => row.BedType == \"King\" || row.BedType == \"Queen\").Select(row => new { row.RoomName }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT bedType) FROM Rooms;",
    "result": "context.Rooms.Select(row => row.BedType).Distinct().Count();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT RoomId , roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
    "result": "context.Rooms.OrderByDescending(row => row.BasePrice).Select(row => new { row.RoomId, row.RoomName }).Take(3).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT roomName FROM Rooms WHERE basePrice > ( SELECT avg(basePrice) FROM Rooms );",
    "result": "context.Rooms.Where(row => row.BasePrice > context.Rooms.Select(row => row.BasePrice).Average()).Select(row => new { row.RoomName }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
    "result": "context.Rooms.Where(row => !context.Reservations.Select(row => row.Room).Distinct().Contains(row.RoomId)).Count();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.roomName , count(*) , T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room",
    "result": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Room }).Select(group => new { group.First().T2.RoomName, Count = group.Count(), group.Key.Room }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING count(*) > 60",
    "result": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Room }).Where(group => group.Count() > 60).Select(group => new { group.First().T2.RoomName }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150",
    "result": "context.Rooms.Where(row => row.BasePrice >= 120 && row.BasePrice <= 150).Select(row => new { row.RoomName }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%'",
    "result": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.FirstName, \"%ROY%\")).Select(row => new { row.T2.RoomName }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1",
    "result": "context.ProblemLogs.OrderByDescending(row => row.LogEntryDate).Select(row => new { row.ProblemLogId }).Take(1).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT problem_log_id , problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
    "result": "context.ProblemLogs.OrderBy(row => row.LogEntryDate).Select(row => new { row.ProblemLogId, row.ProblemId }).Take(1).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT problem_log_id , log_entry_date FROM problem_log WHERE problem_id = 10",
    "result": "context.ProblemLogs.Where(row => row.ProblemId == 10).Select(row => new { row.ProblemLogId, row.LogEntryDate }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT problem_log_id , log_entry_description FROM problem_log",
    "result": "context.ProblemLogs.Select(row => new { row.ProblemLogId, row.LogEntryDescription }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT staff_first_name , staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1",
    "result": "context.Staff.Join(context.ProblemLogs, T1 => T1.StaffId, T2 => T2.AssignedToStaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ProblemId == 1).Select(row => new { row.T1.StaffFirstName, row.T1.StaffLastName }).Distinct().ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.problem_id , T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"",
    "result": "context.Staff.Join(context.ProblemLogs, T1 => T1.StaffId, T2 => T2.AssignedToStaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StaffFirstName == \"Rylan\" && row.T1.StaffLastName == \"Homenick\").Select(row => new { row.T2.ProblemId, row.T2.ProblemLogId }).Distinct().ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"",
    "result": "context.Products.Join(context.Problems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ProductName == \"voluptatem\").Count();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Products.Join(context.Problems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductName }).Select(group => new { Count = group.Count(), group.Key.ProductName }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"",
    "result": "context.Problems.Join(context.Staff, T1 => T1.ReportedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.StaffFirstName == \"Christop\").Select(row => new { row.T1.ProblemDescription }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"",
    "result": "context.Problems.Join(context.Staff, T1 => T1.ReportedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.StaffLastName == \"Bosco\").Select(row => new { row.T1.ProblemId }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"",
    "result": "context.Problems.Where(row => row.DateProblemReported > \"1978-06-26\").Select(row => new { row.ProblemId }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.73"
  },
  {
    "query": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"",
    "result": "context.Problems.Where(row => row.DateProblemReported < \"1978-06-26\").Select(row => new { row.ProblemId }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '<' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.23"
  },
  {
    "query": "SELECT count(*) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
    "result": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ProductId }).Select(group => new { Count = group.Count(), group.Key.ProductId }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
    "result": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DateProblemReported > \"1986-11-13\").GroupBy(row => new { row.T2.ProductId }).Select(group => new { Count = group.Count(), group.Key.ProductId }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,133): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.10"
  },
  {
    "query": "SELECT DISTINCT product_name FROM product ORDER BY product_name",
    "result": "context.Products.OrderBy(row => row.ProductName).Select(row => new { row.ProductName }).Distinct().ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT product_name FROM product ORDER BY product_id",
    "result": "context.Products.OrderBy(row => row.ProductId).Select(row => new { row.ProductName }).Distinct().ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"",
    "result": "context.Problems.Join(context.Staff, T1 => T1.ReportedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.StaffFirstName == \"Dameon\" && row.T2.StaffLastName == \"Frami\").Select(row => row.T1.ProductId).Union(context.Problems.Join(context.Staff, T1 => T1.ReportedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.StaffFirstName == \"Jolie\" && row.T2.StaffLastName == \"Weber\").Select(row => row.T1.ProductId)).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"",
    "result": "context.Problems.Join(context.Staff, T1 => T1.ReportedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.StaffFirstName == \"Christop\" && row.T2.StaffLastName == \"Berge\").Select(row => row.T1.ProductId).Intersect(context.Problems.Join(context.Staff, T1 => T1.ClosureAuthorisedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.StaffFirstName == \"Ashley\" && row.T2.StaffLastName == \"Medhurst\").Select(row => row.T1.ProductId)).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported < ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )",
    "result": "context.Problems.Join(context.Staff, T1 => T1.ReportedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DateProblemReported < context.Problems.Join(context.Staff, T3 => T3.ReportedByStaffId, T4 => T4.StaffId, (T3, T4) => new { T3, T4 }).Where(row => row.T4.StaffFirstName == \"Lysanne\" && row.T4.StaffLastName == \"Turcotte\").Select(row => row.T3.DateProblemReported).Min()).Select(row => new { row.T1.ProblemId }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported > ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )",
    "result": "context.Problems.Join(context.Staff, T1 => T1.ReportedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DateProblemReported > context.Problems.Join(context.Staff, T3 => T3.ReportedByStaffId, T4 => T4.StaffId, (T3, T4) => new { T3, T4 }).Where(row => row.T4.StaffFirstName == \"Rylan\" && row.T4.StaffLastName == \"Homenick\").Select(row => row.T3.DateProblemReported).Max()).Select(row => new { row.T1.ProblemId }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3",
    "result": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ProductName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ProductName }).Take(3).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"",
    "result": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ProductName == \"voluptatem\" && row.T1.DateProblemReported > \"1995\").Select(row => new { row.T1.ProblemId }).ToList();",
    "db_name": "tracking_software_problems",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,171): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.91"
  },
  {
    "query": "SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
    "result": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Staff, joined => joined.T1.ReportedByStaffId, T3 => T3.StaffId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.ProductName == \"rem\").Select(row => new { row.T3.StaffFirstName, row.T3.StaffLastName }).Except(context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Staff, joined => joined.T1.ReportedByStaffId, T3 => T3.StaffId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.ProductName == \"aut\").Select(row => new { row.T3.StaffFirstName, row.T3.StaffLastName })).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"",
    "result": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Staff, joined => joined.T1.ReportedByStaffId, T3 => T3.StaffId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.StaffFirstName == \"Lacey\" && row.T3.StaffLastName == \"Bosco\").Select(row => row.T2.ProductName).Intersect(context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Staff, joined => joined.T1.ReportedByStaffId, T3 => T3.StaffId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.StaffFirstName == \"Kenton\" && row.T3.StaffLastName == \"Champlin\").Select(row => row.T2.ProductName)).ToList();",
    "db_name": "tracking_software_problems",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM player",
    "result": "context.Players.Count();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Player_name FROM player ORDER BY Votes ASC",
    "result": "context.Players.OrderBy(row => row.Votes).Select(row => new { row.PlayerName }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Gender , Occupation FROM player",
    "result": "context.Players.Select(row => new { row.Gender, row.Occupation }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Player_name , residence FROM player WHERE Occupation != \"Researcher\"",
    "result": "context.Players.Where(row => row.Occupation != \"Researcher\").Select(row => new { row.PlayerName, row.Residence }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Sponsor_name FROM player WHERE Residence = \"Brandon\" OR Residence = \"Birtle\"",
    "result": "context.Players.Where(row => row.Residence == \"Brandon\" || row.Residence == \"Birtle\").Select(row => new { row.SponsorName }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1",
    "result": "context.Players.OrderByDescending(row => row.Votes).Select(row => new { row.PlayerName }).Take(1).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Occupation , COUNT(*) FROM player GROUP BY Occupation",
    "result": "context.Players.GroupBy(row => new { row.Occupation }).Select(group => new { group.Key.Occupation, Count = group.Count() }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Players.GroupBy(row => new { row.Occupation }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Occupation }).Take(1).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*) >= 2",
    "result": "context.Players.GroupBy(row => new { row.Residence }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Residence }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID",
    "result": "context.PlayerCoaches.Join(context.Coaches, T1 => T1.CoachId, T2 => T2.CoachId, (T1, T2) => new { T1, T2 }).Join(context.Players, joined => joined.T1.PlayerId, T3 => T3.PlayerId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.PlayerName, row.T2.CoachName }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T2.Rank = 1",
    "result": "context.PlayerCoaches.Join(context.Coaches, T1 => T1.CoachId, T2 => T2.CoachId, (T1, T2) => new { T1, T2 }).Join(context.Players, joined => joined.T1.PlayerId, T3 => T3.PlayerId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Rank == 1).Select(row => new { row.T3.PlayerName }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Player_name , T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T1.Starting_year > 2011",
    "result": "context.PlayerCoaches.Join(context.Coaches, T1 => T1.CoachId, T2 => T2.CoachId, (T1, T2) => new { T1, T2 }).Join(context.Players, joined => joined.T1.PlayerId, T3 => T3.PlayerId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.StartingYear > 2011).Select(row => new { row.T3.PlayerName, row.T3.Gender }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID ORDER BY T3.Votes DESC",
    "result": "context.PlayerCoaches.Join(context.Coaches, T1 => T1.CoachId, T2 => T2.CoachId, (T1, T2) => new { T1, T2 }).Join(context.Players, joined => joined.T1.PlayerId, T3 => T3.PlayerId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T3.Votes).Select(row => new { row.T3.PlayerName, row.T2.CoachName }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)",
    "result": "context.Players.Where(row => !context.PlayerCoaches.Select(row => row.PlayerId).Contains(row.PlayerId)).Select(row => new { row.PlayerName }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Residence FROM player WHERE gender = \"M\" INTERSECT SELECT Residence FROM player WHERE gender = \"F\"",
    "result": "context.Players.Where(row => row.Gender == \"M\").Select(row => row.Residence).Intersect(context.Players.Where(row => row.Gender == \"F\").Select(row => row.Residence)).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.club_id , T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id",
    "result": "context.Clubs.Join(context.Coaches, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClubId }).Select(group => new { group.Key.ClubId, group.First().T1.ClubName, Count = group.Count() }).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.club_id , T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.MatchResults.Join(context.Coaches, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClubId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ClubId, group.First().T1.Gold }).Take(1).ToList();",
    "db_name": "riding_club",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM ship",
    "result": "context.Ships.Count();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM ship ORDER BY Tonnage ASC",
    "result": "context.Ships.OrderBy(row => row.Tonnage).Select(row => new { row.Name }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE , Nationality FROM ship",
    "result": "context.Ships.Select(row => new { row.Type, row.Nationality }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM ship WHERE Nationality != \"United States\"",
    "result": "context.Ships.Where(row => row.Nationality != \"United States\").Select(row => new { row.Name }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM ship WHERE Nationality = \"United States\" OR Nationality = \"United Kingdom\"",
    "result": "context.Ships.Where(row => row.Nationality == \"United States\" || row.Nationality == \"United Kingdom\").Select(row => new { row.Name }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1",
    "result": "context.Ships.OrderByDescending(row => row.Tonnage).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE , COUNT(*) FROM ship GROUP BY TYPE",
    "result": "context.Ships.GroupBy(row => new { row.Type }).Select(group => new { group.Key.Type, Count = group.Count() }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Ships.GroupBy(row => new { row.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*) > 2",
    "result": "context.Ships.GroupBy(row => new { row.Nationality }).Where(group => group.Count() > 2).Select(group => new { group.Key.Nationality }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE , avg(Tonnage) FROM ship GROUP BY TYPE",
    "result": "context.Ships.GroupBy(row => new { row.Type }).Select(group => new { group.Key.Type, AverageTonnage = group.Select(row => row.Tonnage).Average() }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Code , T1.Fate , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID",
    "result": "context.Missions.Join(context.Ships, T1 => T1.ShipId, T2 => T2.ShipId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Code, row.T1.Fate, row.T2.Name }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928",
    "result": "context.Missions.Join(context.Ships, T1 => T1.ShipId, T2 => T2.ShipId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.LaunchedYear > 1928).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Nationality = \"United States\"",
    "result": "context.Missions.Join(context.Ships, T1 => T1.ShipId, T2 => T2.ShipId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Nationality == \"United States\").Select(row => new { row.T1.Fate }).Distinct().ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)",
    "result": "context.Ships.Where(row => !context.Missions.Select(row => row.ShipId).Contains(row.ShipId)).Select(row => new { row.Name }).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000",
    "result": "context.Ships.Where(row => row.Tonnage > 6000).Select(row => row.Type).Intersect(context.Ships.Where(row => row.Tonnage < 4000).Select(row => row.Type)).ToList();",
    "db_name": "ship_mission",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.asset_id , T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING count(*) = 2 INTERSECT SELECT T1.asset_id , T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING count(*) < 2",
    "result": "context.Assets.Join(context.AssetParts, T1 => T1.AssetId, T2 => T2.AssetId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AssetId }).Where(group => group.Count() == 2).Select(group => new { group.Key.AssetId, group.First().T1.AssetDetails }).Intersect(context.Assets.Join(context.FaultLogs, T1 => T1.AssetId, T2 => T2.AssetId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AssetId }).Where(group => group.Count() < 2).Select(group => new { group.Key.AssetId, group.First().T1.AssetDetails })).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
    "result": "context.MaintenanceContracts.Join(context.Assets, T1 => T1.MaintenanceContractId, T2 => T2.MaintenanceContractId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MaintenanceContractId }).Select(group => new { Count = group.Count(), group.Key.MaintenanceContractId }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id GROUP BY T1.company_id",
    "result": "context.ThirdPartyCompanies.Join(context.Assets, T1 => T1.CompanyId, T2 => T2.SupplierCompanyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CompanyId }).Select(group => new { Count = group.Count(), group.Key.CompanyId }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.company_id , T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING count(*) >= 2 UNION SELECT T3.company_id , T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id = T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*) >= 2",
    "result": "context.ThirdPartyCompanies.Join(context.MaintenanceEngineers, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CompanyId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.CompanyId, group.First().T1.CompanyName }).Union(context.ThirdPartyCompanies.Join(context.MaintenanceContracts, T3 => T3.CompanyId, T4 => T4.MaintenanceContractCompanyId, (T3, T4) => new { T3, T4 }).GroupBy(row => new { row.T3.CompanyId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.CompanyId, group.First().T3.CompanyName })).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.staff_name , T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name , T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id = T4.contact_staff_id",
    "result": "context.Staff.Join(context.FaultLogs, T1 => T1.StaffId, T2 => T2.RecordedByStaffId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.StaffName, row.T1.StaffId }).Except(context.Staff.Join(context.EngineerVisits, T3 => T3.StaffId, T4 => T4.ContactStaffId, (T3, T4) => new { T3, T4 }).Select(row => new { row.T3.StaffName, row.T3.StaffId })).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.MaintenanceEngineers.SelectMany(s => context.EngineerVisits, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EngineerId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.EngineerId, group.First().T1.FirstName, group.First().T1.LastName }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING count(*) > 2",
    "result": "context.Parts.Join(context.PartFaults, T1 => T1.PartId, T2 => T2.PartId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PartId }).Where(group => group.Count() > 2).Select(group => new { group.First().T1.PartName, group.Key.PartId }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.first_name , T1.last_name , T1.other_details , T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id",
    "result": "context.MaintenanceEngineers.Join(context.EngineerSkills, T1 => T1.EngineerId, T2 => T2.EngineerId, (T1, T2) => new { T1, T2 }).Join(context.Skills, joined => joined.T2.SkillId, T3 => T3.SkillId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.FirstName, row.T1.LastName, row.T1.OtherDetails, row.T3.SkillDescription }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.fault_short_name , T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id",
    "result": "context.PartFaults.Join(context.SkillsRequiredToFixes, T1 => T1.PartFaultId, T2 => T2.PartFaultId, (T1, T2) => new { T1, T2 }).Join(context.Skills, joined => joined.T2.SkillId, T3 => T3.SkillId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.FaultShortName, row.T3.SkillDescription }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name",
    "result": "context.Parts.Join(context.AssetParts, T1 => T1.PartId, T2 => T2.PartId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PartName }).Select(group => new { group.Key.PartName, Count = group.Count() }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.fault_description , T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id",
    "result": "context.FaultLogs.Join(context.FaultLogParts, T1 => T1.FaultLogEntryId, T2 => T2.FaultLogEntryId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.FaultDescription, row.T2.FaultStatus }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.FaultLogs.Join(context.EngineerVisits, T1 => T1.FaultLogEntryId, T2 => T2.FaultLogEntryId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FaultLogEntryId }).Select(group => new { Count = group.Count(), group.Key.FaultLogEntryId }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT last_name FROM Maintenance_Engineers",
    "result": "context.MaintenanceEngineers.Select(row => new { row.LastName }).Distinct().ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT fault_status FROM Fault_Log_Parts",
    "result": "context.FaultLogParts.Select(row => new { row.FaultStatus }).Distinct().ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT first_name , last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",
    "result": "context.MaintenanceEngineers.Where(row => !context.EngineerVisits.Select(row => row.EngineerId).Contains(row.EngineerId)).Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT asset_id , asset_details , asset_make , asset_model FROM Assets",
    "result": "context.Assets.Select(row => new { row.AssetId, row.AssetDetails, row.AssetMake, row.AssetModel }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1",
    "result": "context.Assets.OrderBy(row => row.AssetAcquiredDate).Select(row => new { row.AssetAcquiredDate }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.part_id , T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Parts.Join(context.PartFaults, T1 => T1.PartId, T2 => T2.PartId, (T1, T2) => new { T1, T2 }).Join(context.SkillsRequiredToFixes, joined => joined.T2.PartFaultId, T3 => T3.PartFaultId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.PartId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PartId, group.First().T1.PartName }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Parts.Join(context.PartFaults, T1 => T1.PartId, T2 => T2.PartId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PartName }).OrderBy(group => group.Count()).Select(group => new { group.Key.PartName }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1",
    "result": "context.MaintenanceEngineers.Join(context.EngineerVisits, T1 => T1.EngineerId, T2 => T2.EngineerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EngineerId }).OrderBy(group => group.Count()).Select(group => new { group.Key.EngineerId, group.First().T1.FirstName, group.First().T1.LastName }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.staff_name , T3.first_name , T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id",
    "result": "context.Staff.Join(context.EngineerVisits, T1 => T1.StaffId, T2 => T2.ContactStaffId, (T1, T2) => new { T1, T2 }).Join(context.MaintenanceEngineers, joined => joined.T2.EngineerId, T3 => T3.EngineerId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.StaffName, row.T3.FirstName, row.T3.LastName }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.fault_log_entry_id , T1.fault_description , T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.FaultLogs.Join(context.FaultLogParts, T1 => T1.FaultLogEntryId, T2 => T2.FaultLogEntryId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FaultLogEntryId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.FaultLogEntryId, group.First().T1.FaultDescription, group.First().T1.FaultLogEntryDatetime }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.skill_id , T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Skills.Join(context.SkillsRequiredToFixes, T1 => T1.SkillId, T2 => T2.SkillId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SkillId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.SkillId, group.First().T1.SkillDescription }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT asset_model FROM Assets",
    "result": "context.Assets.Select(row => new { row.AssetModel }).Distinct().ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT asset_make , asset_model , asset_details FROM Assets ORDER BY asset_disposed_date ASC",
    "result": "context.Assets.OrderBy(row => row.AssetDisposedDate).Select(row => new { row.AssetMake, row.AssetModel, row.AssetDetails }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT part_id , chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
    "result": "context.Parts.OrderBy(row => row.ChargeableAmount).Select(row => new { row.PartId, row.ChargeableAmount }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1",
    "result": "context.ThirdPartyCompanies.Join(context.MaintenanceContracts, T1 => T1.CompanyId, T2 => T2.MaintenanceContractCompanyId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.ContractStartDate).Select(row => new { row.T1.CompanyName }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Staff.GroupBy(row => new { row.Gender }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Gender }).Take(1).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name",
    "result": "context.Staff.Join(context.EngineerVisits, T1 => T1.StaffId, T2 => T2.ContactStaffId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StaffName }).Select(group => new { group.Key.StaffName, Count = group.Count() }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)",
    "result": "context.Assets.Where(row => !context.FaultLogs.Select(row => row.AssetId).Contains(row.AssetId)).Select(row => new { row.AssetModel }).ToList();",
    "db_name": "assets_maintenance",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM body_builder",
    "result": "context.BodyBuilders.Count();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Total FROM body_builder ORDER BY Total ASC",
    "result": "context.BodyBuilders.OrderBy(row => row.Total).Select(row => new { row.Total }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Snatch , Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
    "result": "context.BodyBuilders.OrderBy(row => row.Snatch).Select(row => new { row.Snatch, row.CleanJerk }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Snatch) FROM body_builder",
    "result": "context.BodyBuilders.Select(row => (double) row.Snatch).Average();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
    "result": "context.BodyBuilders.OrderByDescending(row => row.Total).Select(row => new { row.CleanJerk }).Take(1).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Birth_Date FROM People ORDER BY Height ASC",
    "result": "context.People.OrderBy(row => row.Height).Select(row => new { row.BirthDate }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
    "result": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300",
    "result": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Total > 300).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
    "result": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Weight).Select(row => new { row.T2.Name }).Take(1).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Birth_Date , T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 1",
    "result": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Total).Select(row => new { row.T2.BirthDate, row.T2.BirthPlace }).Take(1).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total < 315",
    "result": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Total < 315).Select(row => new { row.T2.Height }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200",
    "result": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Height > 200).Select(row => (double) row.T1.Total).Average();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC",
    "result": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Total).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Birth_Place , COUNT(*) FROM people GROUP BY Birth_Place",
    "result": "context.People.GroupBy(row => new { row.BirthPlace }).Select(group => new { group.Key.BirthPlace, Count = group.Count() }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.People.GroupBy(row => new { row.BirthPlace }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BirthPlace }).Take(1).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*) >= 2",
    "result": "context.People.GroupBy(row => new { row.BirthPlace }).Where(group => group.Count() >= 2).Select(group => new { group.Key.BirthPlace }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Height , Weight FROM people ORDER BY Height DESC",
    "result": "context.People.OrderByDescending(row => row.Height).Select(row => new { row.Height, row.Weight }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM body_builder",
    "result": "context.BodyBuilders.Select(row => new { row..BodyBuilderId, row..PeopleId, row..Snatch, row..CleanJerk, row..Total }).ToList();",
    "db_name": "body_builder",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,122): error CS0103: The name 'Total' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    15 Error(s)\n\nTime Elapsed 00:00:01.91"
  },
  {
    "query": "SELECT Name , birth_place FROM people EXCEPT SELECT T1.Name , T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id",
    "result": "context.People.Select(row => new { row.Name, row.BirthPlace }).Except(context.People.Join(context.BodyBuilders, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name, row.T1.BirthPlace })).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT Birth_Place) FROM people",
    "result": "context.People.Select(row => row.BirthPlace).Distinct().Count();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)",
    "result": "context.People.Where(row => !context.BodyBuilders.Select(row => row.PeopleId).Contains(row.PeopleId)).Count();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.snatch > 140 OR T2.height > 200;",
    "result": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Snatch > 140 || row.T2.Height > 200).Select(row => new { row.T2.Weight }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";",
    "result": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.BirthDate, \"%January%\")).Select(row => new { row.T1.Total }).ToList();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(snatch) FROM body_builder",
    "result": "context.BodyBuilders.Select(row => row.Snatch).Min();",
    "db_name": "body_builder",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM school",
    "result": "context.Schools.Count();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
    "result": "context.Schools.OrderBy(row => row.Enrollment).Select(row => new { row.Location }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM school ORDER BY Founded DESC",
    "result": "context.Schools.OrderByDescending(row => row.Founded).Select(row => new { row.Location }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"",
    "result": "context.Schools.Where(row => row.Denomination != \"Catholic\").Select(row => new { row.Enrollment }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Enrollment) FROM school",
    "result": "context.Schools.Select(row => (double) row.Enrollment).Average();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Team FROM player ORDER BY Team ASC",
    "result": "context.Players.OrderBy(row => row.Team).Select(row => new { row.Team }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT POSITION) FROM player",
    "result": "context.Players.Select(row => row.Position).Distinct().Count();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1",
    "result": "context.Players.OrderByDescending(row => row.Age).Select(row => new { row.Team }).Take(1).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
    "result": "context.Players.OrderByDescending(row => row.Age).Select(row => new { row.Team }).Take(5).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Team , T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID",
    "result": "context.Players.Join(context.Schools, T1 => T1.SchoolId, T2 => T2.SchoolId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Team, row.T2.Location }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*) > 1",
    "result": "context.Players.Join(context.Schools, T1 => T1.SchoolId, T2 => T2.SchoolId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SchoolId }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.Location }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Players.Join(context.Schools, T1 => T1.SchoolId, T2 => T2.SchoolId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SchoolId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Denomination }).Take(1).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
    "result": "context.Schools.Join(context.SchoolDetails, T1 => T1.SchoolId, T2 => T2.SchoolId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Location, row.T2.Nickname }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination",
    "result": "context.Schools.GroupBy(row => new { row.Denomination }).Select(group => new { group.Key.Denomination, Count = group.Count() }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC",
    "result": "context.Schools.GroupBy(row => new { row.Denomination }).Select(group => new { group.Key.Denomination, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
    "result": "context.Schools.OrderByDescending(row => row.Enrollment).Select(row => new { row.SchoolColors }).Take(1).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)",
    "result": "context.Schools.Where(row => !context.Players.Select(row => row.SchoolId).Contains(row.SchoolId)).Select(row => new { row.Location }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Denomination FROM school WHERE Founded < 1890 INTERSECT SELECT Denomination FROM school WHERE Founded > 1900",
    "result": "context.Schools.Where(row => row.Founded < 1890).Select(row => row.Denomination).Intersect(context.Schools.Where(row => row.Founded > 1900).Select(row => row.Denomination)).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
    "result": "context.SchoolDetails.Where(row => row.Division != \"Division 1\").Select(row => new { row.Nickname }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*) > 1",
    "result": "context.Schools.GroupBy(row => new { row.Denomination }).Where(group => group.Count() > 1).Select(group => new { group.Key.Denomination }).ToList();",
    "db_name": "school_player",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Aircraft",
    "result": "context.Aircraft.Count();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , distance FROM Aircraft",
    "result": "context.Aircraft.Select(row => new { row.Name, row.Distance }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT aid FROM Aircraft WHERE distance > 1000",
    "result": "context.Aircraft.Where(row => row.Distance > 1000).Select(row => new { row.Aid }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
    "result": "context.Aircraft.Where(row => row.Distance >= 1000 && row.Distance <= 5000).Count();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , distance FROM Aircraft WHERE aid = 12",
    "result": "context.Aircraft.Where(row => row.Aid == 12).Select(row => new { row.Name, row.Distance }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(distance) , avg(distance) , max(distance) FROM Aircraft",
    "result": "context.Aircraft.GroupBy(row => 1).Select(group => new { MinDistance = group.Select(row => row.Distance).Min(), AverageDistance = group.Select(row => row.Distance).Average(), MaxDistance = group.Select(row => row.Distance).Max() }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1",
    "result": "context.Aircraft.OrderByDescending(row => row.Distance).Select(row => new { row.Aid, row.Name }).Take(1).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
    "result": "context.Aircraft.OrderBy(row => row.Distance).Select(row => new { row.Name }).Take(3).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Aircraft WHERE distance > (SELECT avg(distance) FROM Aircraft)",
    "result": "context.Aircraft.Where(row => row.Distance > context.Aircraft.Select(row => row.Distance).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Employee",
    "result": "context.Employees.Count();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , salary FROM Employee ORDER BY salary",
    "result": "context.Employees.OrderBy(row => row.Salary).Select(row => new { row.Name, row.Salary }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT eid FROM Employee WHERE salary > 100000",
    "result": "context.Employees.Where(row => row.Salary > 100000).Select(row => new { row.Eid }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000",
    "result": "context.Employees.Where(row => row.Salary >= 100000 && row.Salary <= 200000).Count();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , salary FROM Employee WHERE eid = 242518965",
    "result": "context.Employees.Where(row => row.Eid == 242518965).Select(row => new { row.Name, row.Salary }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(salary) , max(salary) FROM Employee",
    "result": "context.Employees.GroupBy(row => 1).Select(group => new { AverageSalary = group.Select(row => row.Salary).Average(), MaxSalary = group.Select(row => row.Salary).Max() }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT eid , name FROM Employee ORDER BY salary DESC LIMIT 1",
    "result": "context.Employees.OrderByDescending(row => row.Salary).Select(row => new { row.Eid, row.Name }).Take(1).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
    "result": "context.Employees.OrderBy(row => row.Salary).Select(row => new { row.Name }).Take(3).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Employee WHERE salary > (SELECT avg(salary) FROM Employee)",
    "result": "context.Employees.Where(row => row.Salary > context.Employees.Select(row => row.Salary).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT eid , salary FROM Employee WHERE name = 'Mark Young'",
    "result": "context.Employees.Where(row => row.Name == \"Mark Young\").Select(row => new { row.Eid, row.Salary }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Flight",
    "result": "context.Flights.Count();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT flno , origin , destination FROM Flight ORDER BY origin",
    "result": "context.Flights.OrderBy(row => row.Origin).Select(row => new { row.Flno, row.Origin, row.Destination }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT flno FROM Flight WHERE origin = \"Los Angeles\"",
    "result": "context.Flights.Where(row => row.Origin == \"Los Angeles\").Select(row => new { row.Flno }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT origin FROM Flight WHERE destination = \"Honolulu\"",
    "result": "context.Flights.Where(row => row.Destination == \"Honolulu\").Select(row => new { row.Origin }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT departure_date , arrival_date FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
    "result": "context.Flights.Where(row => row.Origin == \"Los Angeles\" && row.Destination == \"Honolulu\").Select(row => new { row.DepartureDate, row.ArrivalDate }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT flno FROM Flight WHERE distance > 2000",
    "result": "context.Flights.Where(row => row.Distance > 2000).Select(row => new { row.Flno }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(price) FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
    "result": "context.Flights.Where(row => row.Origin == \"Los Angeles\" && row.Destination == \"Honolulu\").Select(row => (double) row.Price).Average();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT origin , destination FROM Flight WHERE price > 300",
    "result": "context.Flights.Where(row => row.Price > 300).Select(row => new { row.Origin, row.Destination }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT flno , distance FROM Flight ORDER BY price DESC LIMIT 1",
    "result": "context.Flights.OrderByDescending(row => row.Price).Select(row => new { row.Flno, row.Distance }).Take(1).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
    "result": "context.Flights.OrderBy(row => row.Distance).Select(row => new { row.Flno }).Take(3).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(distance) , avg(price) FROM Flight WHERE origin = \"Los Angeles\"",
    "result": "context.Flights.Where(row => row.Origin == \"Los Angeles\").GroupBy(row => 1).Select(group => new { AverageDistance = group.Select(row => row.Distance).Average(), AveragePrice = group.Select(row => row.Price).Average() }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT origin , count(*) FROM Flight GROUP BY origin",
    "result": "context.Flights.GroupBy(row => new { row.Origin }).Select(group => new { group.Key.Origin, Count = group.Count() }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT destination , count(*) FROM Flight GROUP BY destination",
    "result": "context.Flights.GroupBy(row => new { row.Destination }).Select(group => new { group.Key.Destination, Count = group.Count() }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Flights.GroupBy(row => new { row.Origin }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Origin }).Take(1).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
    "result": "context.Flights.GroupBy(row => new { row.Destination }).OrderBy(group => group.Count()).Select(group => new { group.Key.Destination }).Take(1).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99",
    "result": "context.Flights.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Flno == 99).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = \"Airbus A340-300\"",
    "result": "context.Flights.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Airbus A340-300\").Select(row => new { row.T1.Flno }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid",
    "result": "context.Flights.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Aid }).Select(group => new { group.First().T2.Name, Count = group.Count() }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count(*) >= 2",
    "result": "context.Flights.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Aid }).Where(group => group.Count() >= 2).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "flight_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT eid) FROM Certificate",
    "result": "context.Certificate.Select(row => row.Eid).Distinct().Count();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.21"
  },
  {
    "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
    "result": "context.Employees.Select(row => row.Eid).Except(context.Certificate.Select(row => row.Eid)).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,68): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.30"
  },
  {
    "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = \"John Williams\"",
    "result": "context.Employees.Join(context.Certificate, T1 => T1.Eid, T2 => T2.Eid, (T1, T2) => new { T1, T2 }).Join(context.Aircraft, joined => joined.T2.Aid, T3 => T3.Aid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Williams\").Select(row => new { row.T3.Name }).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.42"
  },
  {
    "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\"",
    "result": "context.Employees.Join(context.Certificate, T1 => T1.Eid, T2 => T2.Eid, (T1, T2) => new { T1, T2 }).Join(context.Aircraft, joined => joined.T2.Aid, T3 => T3.Aid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Boeing 737-800\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.65"
  },
  {
    "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Airbus A340-300\"",
    "result": "context.Employees.Join(context.Certificate, T1 => T1.Eid, T2 => T2.Eid, (T1, T2) => new { T1, T2 }).Join(context.Aircraft, joined => joined.T2.Aid, T3 => T3.Aid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Boeing 737-800\").Select(row => row.T1.Name).Intersect(context.Employees.Join(context.Certificate, T1 => T1.Eid, T2 => T2.Eid, (T1, T2) => new { T1, T2 }).Join(context.Aircraft, joined => joined.T2.Aid, T3 => T3.Aid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Airbus A340-300\").Select(row => row.T1.Name)).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,338): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.57"
  },
  {
    "query": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\"",
    "result": "context.Employees.Select(row => row.Name).Except(context.Employees.Join(context.Certificate, T1 => T1.Eid, T2 => T2.Eid, (T1, T2) => new { T1, T2 }).Join(context.Aircraft, joined => joined.T2.Aid, T3 => T3.Aid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Boeing 737-800\").Select(row => row.T1.Name)).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,92): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.56"
  },
  {
    "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Certificate.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Aid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name }).Take(1).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.72"
  },
  {
    "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY count(*) >= 5",
    "result": "context.Certificate.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Distance > 5000).GroupBy(row => new { row.T1.Aid }).OrderBy(group => row.Count() >= 5).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,200): error CS0103: The name 'row' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.56"
  },
  {
    "query": "SELECT T1.name , T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Employees.Join(context.Certificate, T1 => T1.Eid, T2 => T2.Eid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Eid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name, group.First().T1.Salary }).Take(1).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.47"
  },
  {
    "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Employees.Join(context.Certificate, T1 => T1.Eid, T2 => T2.Eid, (T1, T2) => new { T1, T2 }).Join(context.Aircraft, joined => joined.T2.Aid, T3 => T3.Aid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Distance > 5000).GroupBy(row => new { row.T1.Eid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name }).Take(1).ToList();",
    "db_name": "flight_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS1061: 'Flight1Context' does not contain a definition for 'Certificate' and no accessible extension method 'Certificate' accepting a first argument of type 'Flight1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.68"
  },
  {
    "query": "SELECT song_name , releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
    "result": "context.Songs.OrderByDescending(row => row.Releasedate).Select(row => new { row.SongName, row.Releasedate }).Take(1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
    "result": "context.Files.OrderByDescending(row => row.Duration).Select(row => new { row.FId }).Take(1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT song_name FROM song WHERE languages = \"english\"",
    "result": "context.Songs.Where(row => row.Languages == \"english\").Select(row => new { row.SongName }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT f_id FROM files WHERE formats = \"mp3\"",
    "result": "context.Files.Where(row => row.Formats == \"mp3\").Select(row => new { row.FId }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 9",
    "result": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Rating > 9).Select(row => new { row.T1.ArtistName, row.T1.Country }).Distinct().ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 800",
    "result": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Resolution < 800).Select(row => new { row.T1.FileSize, row.T1.Formats }).Distinct().ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id ORDER BY T2.duration LIMIT 1",
    "result": "context.Songs.Join(context.Files, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Duration).Select(row => new { row.T1.ArtistName }).Take(1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
    "result": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Rating).Select(row => new { row.T1.ArtistName, row.T1.Country }).Take(3).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
    "result": "context.Files.Where(row => EF.Functions.Like(row.Duration, \"4:%\")).Count();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM artist WHERE country = \"Bangladesh\"",
    "result": "context.Artists.Where(row => row.Country == \"Bangladesh\").Count();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = \"Female\"",
    "result": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Gender == \"Female\").Select(row => row.T2.Rating).Average();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1",
    "result": "context.Files.GroupBy(row => new { row.Formats }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Formats }).Take(1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT artist_name FROM artist WHERE country = \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages = \"english\"",
    "result": "context.Artists.Where(row => row.Country == \"UK\").Select(row => row.ArtistName).Intersect(context.Songs.Where(row => row.Languages == \"english\").Select(row => row.ArtistName)).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT f_id FROM files WHERE formats = \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution < 1000",
    "result": "context.Files.Where(row => row.Formats == \"mp4\").Select(row => row.FId).Intersect(context.Songs.Where(row => row.Resolution < 1000).Where(row => row.FId.HasValue).Select(row => row.FId.Value)).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = \"Female\" AND T2.languages = \"bangla\"",
    "result": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Gender == \"Female\" && row.T2.Languages == \"bangla\").Select(row => new { row.T1.Country }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = \"mp3\" AND T2.resolution < 800",
    "result": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Formats == \"mp3\" && row.T2.Resolution < 800).Select(row => row.T1.Duration).ToList().Select(value => double.Parse(value)).ToList().Average();",
    "db_name": "music_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT count(*) , gender FROM artist GROUP BY gender",
    "result": "context.Artists.GroupBy(row => new { row.Gender }).Select(group => new { Count = group.Count(), group.Key.Gender }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(rating) , languages FROM song GROUP BY languages",
    "result": "context.Songs.GroupBy(row => new { row.Languages }).Select(group => new { AverageRating = group.Select(row => row.Rating).Average(), group.Key.Languages }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.gender , T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.resolution LIMIT 1",
    "result": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Resolution).Select(row => new { row.T1.Gender, row.T1.ArtistName }).Take(1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , formats FROM files GROUP BY formats",
    "result": "context.Files.GroupBy(row => new { row.Formats }).Select(group => new { Count = group.Count(), group.Key.Formats }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT song_name FROM song WHERE resolution > (SELECT min(resolution) FROM song WHERE languages = \"english\")",
    "result": "context.Songs.Where(row => row.Resolution > context.Songs.Where(row => row.Languages == \"english\").Select(row => row.Resolution).Min()).Select(row => new { row.SongName }).Distinct().ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT song_name FROM song WHERE rating < (SELECT max(rating) FROM song WHERE genre_is = \"blues\")",
    "result": "context.Songs.Where(row => row.Rating < context.Songs.Where(row => row.GenreIs == \"blues\").Select(row => row.Rating).Max()).Select(row => new { row.SongName }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
    "result": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.SongName, \"%love%\")).Select(row => new { row.T1.ArtistName, row.T1.Country }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.artist_name , T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
    "result": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.Releasedate, \"%Mar%\")).Select(row => new { row.T1.ArtistName, row.T1.Gender }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT g_name , rating FROM genre ORDER BY g_name",
    "result": "context.Genres.OrderBy(row => row.GName).Select(row => new { row.GName, row.Rating }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT song_name FROM song ORDER BY resolution",
    "result": "context.Songs.OrderBy(row => row.Resolution).Select(row => new { row.SongName }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT f_id FROM files WHERE formats = \"mp4\" UNION SELECT f_id FROM song WHERE resolution > 720",
    "result": "context.Files.Where(row => row.Formats == \"mp4\").Select(row => row.FId).Union(context.Songs.Where(row => row.Resolution > 720).Where(row => row.FId.HasValue).Select(row => row.FId.Value)).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages = \"english\"",
    "result": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.Duration, \"4:%\")).Select(row => row.T2.SongName).Union(context.Songs.Where(row => row.Languages == \"english\").Select(row => row.SongName)).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Songs.GroupBy(row => new { row.Languages }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Languages }).Take(1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT artist_name FROM song WHERE resolution > 500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Songs.Where(row => row.Resolution > 500).GroupBy(row => new { row.Languages }).OrderByDescending(group => group.Count()).Select(group => new { group.First().ArtistName }).Take(1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT artist_name FROM artist WHERE country = \"UK\" AND gender = \"Male\"",
    "result": "context.Artists.Where(row => row.Country == \"UK\" && row.Gender == \"Male\").Select(row => new { row.ArtistName }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT song_name FROM song WHERE genre_is = \"modern\" OR languages = \"english\"",
    "result": "context.Songs.Where(row => row.GenreIs == \"modern\" || row.Languages == \"english\").Select(row => new { row.SongName }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution < 1000",
    "result": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Formats == \"mp3\").Select(row => row.T2.SongName).Intersect(context.Songs.Where(row => row.Resolution < 1000).Select(row => row.SongName)).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT artist_name FROM artist WHERE country = \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = \"english\"",
    "result": "context.Artists.Where(row => row.Country == \"UK\").Select(row => row.ArtistName).Intersect(context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Languages == \"english\").Select(row => row.T1.ArtistName)).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(rating) , avg(resolution) FROM song WHERE languages = \"bangla\"",
    "result": "context.Songs.Where(row => row.Languages == \"bangla\").GroupBy(row => 1).Select(group => new { AverageRating = group.Select(row => row.Rating).Average(), AverageResolution = group.Select(row => row.Resolution).Average() }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(T2.resolution) , min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE \"3:%\"",
    "result": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.Duration, \"3:%\")).GroupBy(row => 1).Select(group => new { MaxResolutionT2 = group.Select(row => row.T2.Resolution).Max(), MinResolutionT2 = group.Select(row => row.T2.Resolution).Min() }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(T1.duration) , max(T2.resolution) , T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
    "result": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Languages }).Select(group => new { MaxDuration = group.Select(row => row.T1.Duration).Max(), MaxResolution = group.Select(row => row.T2.Resolution).Max(), group.Key.Languages }).OrderBy(group => group.First().T2.Languages).ToList();",
    "db_name": "music_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,331): error CS1061: '<anonymous type: string MaxDuration, int MaxResolution, string Languages>' does not contain a definition for 'First' and no accessible extension method 'First' accepting a first argument of type '<anonymous type: string MaxDuration, int MaxResolution, string Languages>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.63"
  },
  {
    "query": "SELECT min(T1.duration) , min(T2.rating) , T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
    "result": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.GenreIs }).Select(group => new { MinDuration = group.Select(row => row.T1.Duration).Min(), MinRating = group.Select(row => row.T2.Rating).Min(), group.Key.GenreIs }).OrderBy(group => group.First().T2.GenreIs).ToList();",
    "db_name": "music_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,319): error CS1061: '<anonymous type: string MinDuration, int? MinRating, string GenreIs>' does not contain a definition for 'First' and no accessible extension method 'First' accepting a first argument of type '<anonymous type: string MinDuration, int? MinRating, string GenreIs>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.79"
  },
  {
    "query": "SELECT T1.artist_name , count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = \"english\" GROUP BY T2.artist_name HAVING count(*) >= 1",
    "result": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Languages == \"english\").GroupBy(row => new { row.T2.ArtistName }).Select(group => new { group.Key.ArtistName, Count = group.Count() }).Where(group => group.Count >= 1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.resolution > 900 GROUP BY T2.artist_name HAVING count(*) >= 1",
    "result": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Resolution > 900).GroupBy(row => new { row.T2.ArtistName }).Where(group => group.Count() >= 1).Select(group => new { group.Key.ArtistName, group.First().T1.Country }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.artist_name , count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
    "result": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ArtistName }).Select(group => new { group.Key.ArtistName, Count = group.Count() }).OrderByDescending(group => group.Count).Take(3).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1",
    "result": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ArtistName }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.Country }).Take(1).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT song_name FROM song WHERE rating < (SELECT min(rating) FROM song WHERE languages = 'english')",
    "result": "context.Songs.Where(row => row.Rating < context.Songs.Where(row => row.Languages == \"english\").Select(row => row.Rating).Min()).Select(row => new { row.SongName }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT f_id FROM song WHERE resolution > (SELECT max(resolution) FROM song WHERE rating < 8)",
    "result": "context.Songs.Where(row => row.Resolution > context.Songs.Where(row => row.Rating < 8).Select(row => row.Resolution).Max()).Select(row => new { row.FId }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT f_id FROM song WHERE resolution > (SELECT avg(resolution) FROM song WHERE genre_is = \"modern\")",
    "result": "context.Songs.Where(row => row.Resolution > context.Songs.Where(row => row.GenreIs == \"modern\").Select(row => row.Resolution).Average()).Select(row => new { row.FId }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
    "result": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Languages == \"bangla\").GroupBy(row => new { row.T2.ArtistName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ArtistName }).Take(3).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT f_id , genre_is , artist_name FROM song WHERE languages = \"english\" ORDER BY rating",
    "result": "context.Songs.Where(row => row.Languages == \"english\").OrderBy(row => row.Rating).Select(row => new { row.FId, row.GenreIs, row.ArtistName }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.duration , T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.genre_is = \"pop\" ORDER BY T2.song_name",
    "result": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.GenreIs == \"pop\").OrderBy(row => row.T2.SongName).Select(row => new { row.T1.Duration, row.T1.FileSize, row.T1.Formats }).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT artist_name FROM song WHERE languages = \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 8",
    "result": "context.Songs.Where(row => row.Languages == \"english\").Select(row => row.ArtistName).Distinct().Except(context.Songs.Where(row => row.Rating > 8).Select(row => row.ArtistName).Distinct()).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT artist_name FROM artist WHERE country = \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 7",
    "result": "context.Artists.Where(row => row.Country == \"Bangladesh\").Select(row => row.ArtistName).Distinct().Except(context.Songs.Where(row => row.Rating > 7).Select(row => row.ArtistName).Distinct()).ToList();",
    "db_name": "music_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id WHERE T2.sent_date < '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date > '1989-03-16 18:27:16'",
    "result": "context.Grants.Join(context.Documents, T1 => T1.GrantId, T2 => T2.GrantId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SentDate < \"1986-08-26 20:49:27\").Select(row => row.T1.GrantAmount).Intersect(context.Grants.Where(row => row.GrantEndDate > \"1989-03-16 18:27:16\").Select(row => row.GrantAmount)).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,241): error CS0019: Operator '>' cannot be applied to operands of type 'DateTime' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.69"
  },
  {
    "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Patent'",
    "result": "context.Projects.Join(context.ProjectOutcomes, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OutcomeCode == \"Paper\").Select(row => row.T1.ProjectDetails).Intersect(context.Projects.Join(context.ProjectOutcomes, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OutcomeCode == \"Patent\").Select(row => row.T1.ProjectDetails)).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type = T3.organisation_type WHERE T3.organisation_type_description = 'Research'",
    "result": "context.Grants.Join(context.Organisations, T1 => T1.OrganisationId, T2 => T2.OrganisationId, (T1, T2) => new { T1, T2 }).Join(context.OrganisationTypes, joined => joined.T2.OrganisationType, T3 => T3.OrganisationType1, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.OrganisationTypeDescription == \"Research\").Select(row => (double) row.T1.GrantAmount).Sum();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_from , date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from , date_to FROM Project_Staff WHERE role_code = 'leader'",
    "result": "context.ProjectStaffs.Where(row => context.ProjectStaffs.GroupBy(row => new { row.ProjectId }).OrderByDescending(group => group.Count()).Select(group => group.Key.ProjectId).Take(1).Contains(row.ProjectId)).Select(row => new { row.DateFrom, row.DateTo }).Union(context.ProjectStaffs.Where(row => row.RoleCode == \"leader\").Select(row => new { row.DateFrom, row.DateTo })).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.organisation_id , T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount) > 6000",
    "result": "context.Grants.Join(context.Organisations, T1 => T1.OrganisationId, T2 => T2.OrganisationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.OrganisationId }).Where(group => group.Sum(row => row.T1.GrantAmount) > 6000).Select(group => new { group.Key.OrganisationId, group.First().T2.OrganisationDetails }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT T1.organisation_type , T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Organisations.Join(context.ResearchStaffs, T1 => T1.OrganisationId, T2 => T2.EmployerOrganisationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.OrganisationId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.OrganisationType, group.Key.OrganisationId }).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Organisations.Join(context.ResearchStaffs, T1 => T1.OrganisationId, T2 => T2.EmployerOrganisationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.OrganisationType }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.OrganisationType }).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id = T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type = T4.organisation_type WHERE T2.grant_amount > 5000 AND T4.organisation_type_description = 'Research'",
    "result": "context.Documents.Join(context.Grants, T1 => T1.GrantId, T2 => T2.GrantId, (T1, T2) => new { T1, T2 }).Join(context.Organisations, joined => joined.T2.OrganisationId, T3 => T3.OrganisationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.OrganisationTypes, joined => joined.T3.OrganisationType, T4 => T4.OrganisationType1, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T2.GrantAmount > 5000 && row.T4.OrganisationTypeDescription == \"Research\").Select(row => new { row.T1.SentDate }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T1.grant_id = T3.grant_id WHERE T2.document_description = 'Regular' OR T3.grant_amount > 100",
    "result": "context.Documents.Join(context.DocumentTypes, T1 => T1.DocumentTypeCode, T2 => T2.DocumentTypeCode, (T1, T2) => new { T1, T2 }).Join(context.Grants, joined => joined.T1.GrantId, T3 => T3.GrantId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.DocumentDescription == \"Regular\" || row.T3.GrantAmount > 100).Select(row => new { row.T1.ResponseReceivedDate }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code = 'researcher' )",
    "result": "context.Projects.Where(row => !context.ProjectStaffs.Where(row => row.RoleCode == \"researcher\").Select(row => row.ProjectId).Contains(row.ProjectId)).Select(row => new { row.ProjectDetails }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.task_details , T1.task_id , T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'omnis' UNION SELECT T1.task_details , T1.task_id , T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.project_id HAVING count(*) > 2",
    "result": "context.Tasks.Join(context.Projects, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ProjectDetails == \"omnis\").Select(row => new { row.T1.TaskDetails, row.T1.TaskId, row.T2.ProjectId }).Union(context.Tasks.Join(context.Projects, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Join(context.ProjectOutcomes, joined => joined.T2.ProjectId, T3 => T3.ProjectId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T2.ProjectId }).Where(group => group.Count() > 2).Select(group => new { group.First().T1.TaskDetails, group.First().T1.TaskId, group.Key.ProjectId })).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_from , date_to FROM Project_Staff WHERE role_code = 'researcher'",
    "result": "context.ProjectStaffs.Where(row => row.RoleCode == \"researcher\").Select(row => new { row.DateFrom, row.DateTo }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT role_code) FROM Project_Staff",
    "result": "context.ProjectStaffs.Select(row => row.RoleCode).Distinct().Count();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
    "result": "context.Grants.GroupBy(row => new { row.OrganisationId }).Select(group => new { SumGrantAmount = group.Select(row => (double) row.GrantAmount).Sum(), group.Key.OrganisationId }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code = T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'",
    "result": "context.Projects.Join(context.ProjectOutcomes, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Join(context.ResearchOutcomes, joined => joined.T2.OutcomeCode, T3 => T3.OutcomeCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => EF.Functions.Like(row.T3.OutcomeDescription, \"%Published%\")).Select(row => new { row.T1.ProjectDetails }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.project_id , count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC",
    "result": "context.ProjectStaffs.Join(context.Projects, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProjectId }).Select(group => new { group.Key.ProjectId, Count = group.Count() }).OrderBy(group => group.Count).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT role_description FROM Staff_Roles WHERE role_code = 'researcher'",
    "result": "context.StaffRoles.Where(row => row.RoleCode == \"researcher\").Select(row => new { row.RoleDescription }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1",
    "result": "context.ProjectStaffs.OrderBy(row => row.DateFrom).Select(row => new { row.DateFrom }).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.project_details , T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Projects.Join(context.ProjectOutcomes, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProjectId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.ProjectDetails, group.Key.ProjectId }).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
    "result": "context.Projects.Where(row => !context.ProjectOutcomes.Select(row => row.ProjectId).Contains(row.ProjectId)).Select(row => new { row.ProjectDetails }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Organisations.Join(context.ResearchStaffs, T1 => T1.OrganisationId, T2 => T2.EmployerOrganisationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.OrganisationId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.OrganisationId, group.First().T1.OrganisationType, group.First().T1.OrganisationDetails }).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.StaffRoles.Join(context.ProjectStaffs, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Join(context.ProjectOutcomes, joined => joined.T2.ProjectId, T3 => T3.ProjectId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T2.StaffId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.RoleDescription, group.Key.StaffId }).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'",
    "result": "context.DocumentTypes.Where(row => EF.Functions.Like(row.DocumentDescription, \"Initial%\")).Select(row => new { row.DocumentTypeCode }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'",
    "result": "context.Grants.Join(context.Documents, T1 => T1.GrantId, T2 => T2.GrantId, (T1, T2) => new { T1, T2 }).Join(context.DocumentTypes, joined => joined.T2.DocumentTypeCode, T3 => T3.DocumentTypeCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DocumentDescription == \"Regular\").Select(row => row.T1.GrantStartDate).Intersect(context.Grants.Join(context.Documents, T1 => T1.GrantId, T2 => T2.GrantId, (T1, T2) => new { T1, T2 }).Join(context.DocumentTypes, joined => joined.T2.DocumentTypeCode, T3 => T3.DocumentTypeCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DocumentDescription == \"Initial Application\").Select(row => row.T1.GrantStartDate)).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 1979-10-29 07:44:22}, {0: 1982-04-07 00:07:43}, {0: 2004-11-10 02:26:01}]\", linq_results: \"[{0: 1979-10-29 00:00:00, 1: 29, 2: Monday, 3: 302, 4: 7, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 44, 10: 10, 11: 2024-08-05 16:07:36, 12: 22, 13: 624456278620000000, 14: 07:44:22, 15: 2024-08-05 00:00:00, 16: 1979, 17: 2024-08-05 13:07:36}, {0: 1982-04-07 00:00:00, 1: 7, 2: Wednesday, 3: 97, 4: 0, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 7, 10: 4, 11: 2024-08-05 16:07:36, 12: 43, 13: 625225828630000000, 14: 00:07:43, 15: 2024-08-05 00:00:00, 16: 1982, 17: 2024-08-05 13:07:36}, {0: 2004-11-10 00:00:00, 1: 10, 2: Wednesday, 3: 315, 4: 2, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 26, 10: 11, 11: 2024-08-05 16:07:36, 12: 1, 13: 632356503610000000, 14: 02:26:01, 15: 2024-08-05 00:00:00, 16: 2004, 17: 2024-08-05 13:07:36}]\" }"
  },
  {
    "query": "SELECT grant_id , count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Documents.GroupBy(row => new { row.GrantId }).Select(group => new { group.Key.GrantId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_details = 'quo'",
    "result": "context.OrganisationTypes.Join(context.Organisations, T1 => T1.OrganisationType1, T2 => T2.OrganisationType, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrganisationDetails == \"quo\").Select(row => new { row.T1.OrganisationTypeDescription }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_type_description = 'Sponsor' ORDER BY organisation_details",
    "result": "context.Organisations.Join(context.OrganisationTypes, T1 => T1.OrganisationType, T2 => T2.OrganisationType1, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrganisationTypeDescription == \"Sponsor\").OrderBy(row => row.T1.OrganisationDetails).Select(row => new { row.T1.OrganisationDetails }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Project_outcomes WHERE outcome_code = 'Patent'",
    "result": "context.ProjectOutcomes.Where(row => row.OutcomeCode == \"Patent\").Count();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Project_Staff WHERE role_code = 'leader' OR date_from < '1989-04-24 23:51:54'",
    "result": "context.ProjectStaffs.Where(row => row.RoleCode == \"leader\" || row.DateFrom < \"1989-04-24 23:51:54\").Count();",
    "db_name": "tracking_grants_for_research",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,75): error CS0019: Operator '<' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:03.18"
  },
  {
    "query": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1",
    "result": "context.ProjectStaffs.OrderByDescending(row => row.DateTo).Select(row => new { row.DateTo }).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sint'",
    "result": "context.ResearchOutcomes.Join(context.ProjectOutcomes, T1 => T1.OutcomeCode, T2 => T2.OutcomeCode, (T1, T2) => new { T1, T2 }).Join(context.Projects, joined => joined.T2.ProjectId, T3 => T3.ProjectId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.ProjectDetails == \"sint\").Select(row => new { row.T1.OutcomeDescription }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.organisation_id , count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Projects.Join(context.ProjectOutcomes, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.OrganisationId }).Select(group => new { group.Key.OrganisationId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )",
    "result": "context.Projects.Where(row => context.Projects.GroupBy(row => new { row.OrganisationId }).OrderByDescending(group => group.Count()).Select(group => group.Key.OrganisationId).Take(1).Contains(row.OrganisationId)).Select(row => new { row.ProjectDetails }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC",
    "result": "context.ResearchStaffs.OrderBy(row => row.StaffDetails).Select(row => new { row.StaffDetails }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Tasks",
    "result": "context.Tasks.Count();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id",
    "result": "context.Projects.Join(context.Tasks, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProjectId }).Select(group => new { Count = group.Count(), group.First().T1.ProjectDetails }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT role_code FROM Project_Staff WHERE date_from > '2003-04-19 15:06:20' AND date_to < '2016-03-15 00:33:18'",
    "result": "context.ProjectStaffs.Where(row => row.DateFrom > \"2003-04-19 15:06:20\" && row.DateTo < \"2016-03-15 00:33:18\").Select(row => new { row.RoleCode }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,87): error CS0019: Operator '<' cannot be applied to operands of type 'DateTime?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.70"
  },
  {
    "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code",
    "result": "context.ResearchOutcomes.Join(context.ProjectOutcomes, T1 => T1.OutcomeCode, T2 => T2.OutcomeCode, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.OutcomeDescription }).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.ProjectStaffs.GroupBy(row => new { row.RoleCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.RoleCode }).Take(1).ToList();",
    "db_name": "tracking_grants_for_research",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
    "result": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.FirstName, row.T2.DepartmentName }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT first_name , last_name , salary FROM employees WHERE salary < 6000",
    "result": "context.Employees.Where(row => row.Salary < 6000).Select(row => new { row.FirstName, row.LastName, row.Salary }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT first_name , department_id FROM employees WHERE last_name = 'McEwen'",
    "result": "context.Employees.Where(row => row.LastName == \"McEwen\").Select(row => new { row.FirstName, row.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM employees WHERE department_id = \"null\"",
    "result": "context.Employees.Where(row => row.DepartmentId == \"null\").Select(row => new { row..EmployeeId, row..FirstName, row..LastName, row..Email, row..PhoneNumber, row..HireDate, row..JobId, row..Salary, row..CommissionPct, row..ManagerId, row..DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,250): error CS0103: The name 'DepartmentId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    23 Error(s)\n\nTime Elapsed 00:00:01.50"
  },
  {
    "query": "SELECT * FROM departments WHERE department_name = 'Marketing'",
    "result": "context.Departments.Where(row => row.DepartmentName == \"Marketing\").Select(row => new { row..DepartmentId, row..DepartmentName, row..ManagerId, row..LocationId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,161): error CS0103: The name 'LocationId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    12 Error(s)\n\nTime Elapsed 00:00:01.79"
  },
  {
    "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
    "result": "context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%M%\")).Select(row => new { row.HireDate }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 1987-06-17}, {0: 1987-06-18}, {0: 1987-06-19}, {0: 1987-06-20}, {0: 1987-06-21}, {0: 1987-06-22}, {0: 1987-06-23}, {0: 1987-06-24}, {0: 1987-06-25}, {0: 1987-06-26}, {0: 1987-06-27}, {0: 1987-06-30}, {0: 1987-07-01}, {0: 1987-07-02}, {0: 1987-07-03}, {0: 1987-07-04}, {0: 1987-07-05}, {0: 1987-07-06}, {0: 1987-07-10}, {0: 1987-07-11}, {0: 1987-07-12}, {0: 1987-07-13}, {0: 1987-07-15}, {0: 1987-07-16}, {0: 1987-07-19}, {0: 1987-07-20}, {0: 1987-07-22}, {0: 1987-07-23}, {0: 1987-07-24}, {0: 1987-07-25}, {0: 1987-07-26}, {0: 1987-07-27}, {0: 1987-07-28}, {0: 1987-07-29}, {0: 1987-07-30}, {0: 1987-07-31}, {0: 1987-08-01}, {0: 1987-08-02}, {0: 1987-08-03}, {0: 1987-08-04}, {0: 1987-08-05}, {0: 1987-08-06}, {0: 1987-08-07}, {0: 1987-08-08}, {0: 1987-08-09}, {0: 1987-08-10}, {0: 1987-08-11}, {0: 1987-08-12}, {0: 1987-08-13}, {0: 1987-08-14}, {0: 1987-08-15}, {0: 1987-08-16}, {0: 1987-08-17}, {0: 1987-08-18}, {0: 1987-08-19}, {0: 1987-08-21}, {0: 1987-08-22}, {0: 1987-08-24}, {0: 1987-08-25}, {0: 1987-08-26}, {0: 1987-08-28}, {0: 1987-08-29}, {0: 1987-08-30}, {0: 1987-08-31}, {0: 1987-09-01}, {0: 1987-09-02}, {0: 1987-09-04}, {0: 1987-09-05}, {0: 1987-09-06}, {0: 1987-09-08}, {0: 1987-09-09}, {0: 1987-09-10}, {0: 1987-09-11}, {0: 1987-09-12}, {0: 1987-09-13}, {0: 1987-09-14}, {0: 1987-09-16}, {0: 1987-09-17}, {0: 1987-09-18}, {0: 1987-09-20}, {0: 1987-09-21}, {0: 1987-09-22}, {0: 1987-09-23}, {0: 1987-09-24}, {0: 1987-09-25}, {0: 1987-09-27}, {0: 1987-09-28}, {0: 1987-09-30}]\", linq_results: \"[{0: 28.06.1987}, {0: 29.06.1987}, {0: 07.07.1987}, {0: 08.07.1987}, {0: 09.07.1987}, {0: 14.07.1987}, {0: 17.07.1987}, {0: 18.07.1987}, {0: 21.07.1987}, {0: 20.08.1987}, {0: 23.08.1987}, {0: 27.08.1987}, {0: 03.09.1987}, {0: 07.09.1987}, {0: 15.09.1987}, {0: 19.09.1987}, {0: 26.09.1987}, {0: 29.09.1987}, {0: 01.10.1987}]\" }"
  },
  {
    "query": "SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%'",
    "result": "context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%M%\")).Select(row => new { row.FirstName, row.LastName, row.HireDate, row.Salary, row.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: Steven, 1: King, 2: 1987-06-17, 3: 24000, 4: 90}, {0: Neena, 1: Kochhar, 2: 1987-06-18, 3: 17000, 4: 90}, {0: Lex, 1: De Haan, 2: 1987-06-19, 3: 17000, 4: 90}, {0: Alexander, 1: Hunold, 2: 1987-06-20, 3: 9000, 4: 60}, {0: Bruce, 1: Ernst, 2: 1987-06-21, 3: 6000, 4: 60}, {0: David, 1: Austin, 2: 1987-06-22, 3: 4800, 4: 60}, {0: Valli, 1: Pataballa, 2: 1987-06-23, 3: 4800, 4: 60}, {0: Diana, 1: Lorentz, 2: 1987-06-24, 3: 4200, 4: 60}, {0: Nancy, 1: Greenberg, 2: 1987-06-25, 3: 12000, 4: 100}, {0: Daniel, 1: Faviet, 2: 1987-06-26, 3: 9000, 4: 100}, {0: John, 1: Chen, 2: 1987-06-27, 3: 8200, 4: 100}, {0: Luis, 1: Popp, 2: 1987-06-30, 3: 6900, 4: 100}, {0: Den, 1: Raphaely, 2: 1987-07-01, 3: 11000, 4: 30}, {0: Alexander, 1: Khoo, 2: 1987-07-02, 3: 3100, 4: 30}, {0: Shelli, 1: Baida, 2: 1987-07-03, 3: 2900, 4: 30}, {0: Sigal, 1: Tobias, 2: 1987-07-04, 3: 2800, 4: 30}, {0: Guy, 1: Himuro, 2: 1987-07-05, 3: 2600, 4: 30}, {0: Karen, 1: Colmenares, 2: 1987-07-06, 3: 2500, 4: 30}, {0: Shanta, 1: Vollman, 2: 1987-07-10, 3: 6500, 4: 50}, {0: Kevin, 1: Mourgos, 2: 1987-07-11, 3: 5800, 4: 50}, {0: Julia, 1: Nayer, 2: 1987-07-12, 3: 3200, 4: 50}, {0: Irene, 1: Mikkilineni, 2: 1987-07-13, 3: 2700, 4: 50}, {0: Steven, 1: Markle, 2: 1987-07-15, 3: 2200, 4: 50}, {0: Laura, 1: Bissot, 2: 1987-07-16, 3: 3300, 4: 50}, {0: TJ, 1: Olson, 2: 1987-07-19, 3: 2100, 4: 50}, {0: Jason, 1: Mallin, 2: 1987-07-20, 3: 3300, 4: 50}, {0: Ki, 1: Gee, 2: 1987-07-22, 3: 2400, 4: 50}, {0: Hazel, 1: Philtanker, 2: 1987-07-23, 3: 2200, 4: 50}, {0: Renske, 1: Ladwig, 2: 1987-07-24, 3: 3600, 4: 50}, {0: Stephen, 1: Stiles, 2: 1987-07-25, 3: 3200, 4: 50}, {0: John, 1: Seo, 2: 1987-07-26, 3: 2700, 4: 50}, {0: Joshua, 1: Patel, 2: 1987-07-27, 3: 2500, 4: 50}, {0: Trenna, 1: Rajs, 2: 1987-07-28, 3: 3500, 4: 50}, {0: Curtis, 1: Davies, 2: 1987-07-29, 3: 3100, 4: 50}, {0: Randall, 1: Matos, 2: 1987-07-30, 3: 2600, 4: 50}, {0: Peter, 1: Vargas, 2: 1987-07-31, 3: 2500, 4: 50}, {0: John, 1: Russell, 2: 1987-08-01, 3: 14000, 4: 80}, {0: Karen, 1: Partners, 2: 1987-08-02, 3: 13500, 4: 80}, {0: Alberto, 1: Errazuriz, 2: 1987-08-03, 3: 12000, 4: 80}, {0: Gerald, 1: Cambrault, 2: 1987-08-04, 3: 11000, 4: 80}, {0: Eleni, 1: Zlotkey, 2: 1987-08-05, 3: 10500, 4: 80}, {0: Peter, 1: Tucker, 2: 1987-08-06, 3: 10000, 4: 80}, {0: David, 1: Bernstein, 2: 1987-08-07, 3: 9500, 4: 80}, {0: Peter, 1: Hall, 2: 1987-08-08, 3: 9000, 4: 80}, {0: Christopher, 1: Olsen, 2: 1987-08-09, 3: 8000, 4: 80}, {0: Nanette, 1: Cambrault, 2: 1987-08-10, 3: 7500, 4: 80}, {0: Oliver, 1: Tuvault, 2: 1987-08-11, 3: 7000, 4: 80}, {0: Janette, 1: King, 2: 1987-08-12, 3: 10000, 4: 80}, {0: Patrick, 1: Sully, 2: 1987-08-13, 3: 9500, 4: 80}, {0: Allan, 1: McEwen, 2: 1987-08-14, 3: 9000, 4: 80}, {0: Lindsey, 1: Smith, 2: 1987-08-15, 3: 8000, 4: 80}, {0: Louise, 1: Doran, 2: 1987-08-16, 3: 7500, 4: 80}, {0: Sarath, 1: Sewall, 2: 1987-08-17, 3: 7000, 4: 80}, {0: Clara, 1: Vishney, 2: 1987-08-18, 3: 10500, 4: 80}, {0: Danielle, 1: Greene, 2: 1987-08-19, 3: 9500, 4: 80}, {0: David, 1: Lee, 2: 1987-08-21, 3: 6800, 4: 80}, {0: Sundar, 1: Ande, 2: 1987-08-22, 3: 6400, 4: 80}, {0: Lisa, 1: Ozer, 2: 1987-08-24, 3: 11500, 4: 80}, {0: Harrison, 1: Bloom, 2: 1987-08-25, 3: 10000, 4: 80}, {0: Tayler, 1: Fox, 2: 1987-08-26, 3: 9600, 4: 80}, {0: Elizabeth, 1: Bates, 2: 1987-08-28, 3: 7300, 4: 80}, {0: Sundita, 1: Kumar, 2: 1987-08-29, 3: 6100, 4: 80}, {0: Ellen, 1: Abel, 2: 1987-08-30, 3: 11000, 4: 80}, {0: Alyssa, 1: Hutton, 2: 1987-08-31, 3: 8800, 4: 80}, {0: Jonathon, 1: Taylor, 2: 1987-09-01, 3: 8600, 4: 80}, {0: Jack, 1: Livingston, 2: 1987-09-02, 3: 8400, 4: 80}, {0: Charles, 1: Johnson, 2: 1987-09-04, 3: 6200, 4: 80}, {0: Winston, 1: Taylor, 2: 1987-09-05, 3: 3200, 4: 50}, {0: Jean, 1: Fleaur, 2: 1987-09-06, 3: 3100, 4: 50}, {0: Girard, 1: Geoni, 2: 1987-09-08, 3: 2800, 4: 50}, {0: Nandita, 1: Sarchand, 2: 1987-09-09, 3: 4200, 4: 50}, {0: Alexis, 1: Bull, 2: 1987-09-10, 3: 4100, 4: 50}, {0: Julia, 1: Dellinger, 2: 1987-09-11, 3: 3400, 4: 50}, {0: Anthony, 1: Cabrio, 2: 1987-09-12, 3: 3000, 4: 50}, {0: Kelly, 1: Chung, 2: 1987-09-13, 3: 3800, 4: 50}, {0: Jennifer, 1: Dilly, 2: 1987-09-14, 3: 3600, 4: 50}, {0: Randall, 1: Perkins, 2: 1987-09-16, 3: 2500, 4: 50}, {0: Sarah, 1: Bell, 2: 1987-09-17, 3: 4000, 4: 50}, {0: Britney, 1: Everett, 2: 1987-09-18, 3: 3900, 4: 50}, {0: Vance, 1: Jones, 2: 1987-09-20, 3: 2800, 4: 50}, {0: Alana, 1: Walsh, 2: 1987-09-21, 3: 3100, 4: 50}, {0: Kevin, 1: Feeney, 2: 1987-09-22, 3: 3000, 4: 50}, {0: Donald, 1: OConnell, 2: 1987-09-23, 3: 2600, 4: 50}, {0: Douglas, 1: Grant, 2: 1987-09-24, 3: 2600, 4: 50}, {0: Jennifer, 1: Whalen, 2: 1987-09-25, 3: 4400, 4: 10}, {0: Pat, 1: Fay, 2: 1987-09-27, 3: 6000, 4: 20}, {0: Susan, 1: Mavris, 2: 1987-09-28, 3: 6500, 4: 40}, {0: Shelley, 1: Higgins, 2: 1987-09-30, 3: 12000, 4: 110}]\", linq_results: \"[{0: Ismael, 1: Sciarra, 2: 28.06.1987, 3: 7700, 4: 100}, {0: Jose Manuel, 1: Urman, 2: 29.06.1987, 3: 7800, 4: 100}, {0: Matthew, 1: Weiss, 2: 07.07.1987, 3: 8000, 4: 50}, {0: Adam, 1: Fripp, 2: 08.07.1987, 3: 8200, 4: 50}, {0: Payam, 1: Kaufling, 2: 09.07.1987, 3: 7900, 4: 50}, {0: James, 1: Landry, 2: 14.07.1987, 3: 2400, 4: 50}, {0: Mozhe, 1: Atkinson, 2: 17.07.1987, 3: 2800, 4: 50}, {0: James, 1: Marlow, 2: 18.07.1987, 3: 2500, 4: 50}, {0: Michael, 1: Rogers, 2: 21.07.1987, 3: 2900, 4: 50}, {0: Mattea, 1: Marvins, 2: 20.08.1987, 3: 7200, 4: 80}, {0: Amit, 1: Banda, 2: 23.08.1987, 3: 6200, 4: 80}, {0: William, 1: Smith, 2: 27.08.1987, 3: 7400, 4: 80}, {0: Kimberely, 1: Grant, 2: 03.09.1987, 3: 7000, 4: 0}, {0: Martha, 1: Sullivan, 2: 07.09.1987, 3: 2500, 4: 50}, {0: Timothy, 1: Gates, 2: 15.09.1987, 3: 2900, 4: 50}, {0: Samuel, 1: McCain, 2: 19.09.1987, 3: 3200, 4: 50}, {0: Michael, 1: Hartstein, 2: 26.09.1987, 3: 13000, 4: 20}, {0: Hermann, 1: Baer, 2: 29.09.1987, 3: 10000, 4: 70}, {0: William, 1: Gietz, 2: 01.10.1987, 3: 8300, 4: 110}]\" }"
  },
  {
    "query": "SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
    "result": "context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%M%\")).OrderBy(row => row.DepartmentId).Select(row => new { row.FirstName, row.LastName, row.HireDate, row.Salary, row.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: Jennifer, 1: Whalen, 2: 1987-09-25, 3: 4400, 4: 10}, {0: Pat, 1: Fay, 2: 1987-09-27, 3: 6000, 4: 20}, {0: Den, 1: Raphaely, 2: 1987-07-01, 3: 11000, 4: 30}, {0: Alexander, 1: Khoo, 2: 1987-07-02, 3: 3100, 4: 30}, {0: Shelli, 1: Baida, 2: 1987-07-03, 3: 2900, 4: 30}, {0: Sigal, 1: Tobias, 2: 1987-07-04, 3: 2800, 4: 30}, {0: Guy, 1: Himuro, 2: 1987-07-05, 3: 2600, 4: 30}, {0: Karen, 1: Colmenares, 2: 1987-07-06, 3: 2500, 4: 30}, {0: Susan, 1: Mavris, 2: 1987-09-28, 3: 6500, 4: 40}, {0: Shanta, 1: Vollman, 2: 1987-07-10, 3: 6500, 4: 50}, {0: Kevin, 1: Mourgos, 2: 1987-07-11, 3: 5800, 4: 50}, {0: Julia, 1: Nayer, 2: 1987-07-12, 3: 3200, 4: 50}, {0: Irene, 1: Mikkilineni, 2: 1987-07-13, 3: 2700, 4: 50}, {0: Steven, 1: Markle, 2: 1987-07-15, 3: 2200, 4: 50}, {0: Laura, 1: Bissot, 2: 1987-07-16, 3: 3300, 4: 50}, {0: TJ, 1: Olson, 2: 1987-07-19, 3: 2100, 4: 50}, {0: Jason, 1: Mallin, 2: 1987-07-20, 3: 3300, 4: 50}, {0: Ki, 1: Gee, 2: 1987-07-22, 3: 2400, 4: 50}, {0: Hazel, 1: Philtanker, 2: 1987-07-23, 3: 2200, 4: 50}, {0: Renske, 1: Ladwig, 2: 1987-07-24, 3: 3600, 4: 50}, {0: Stephen, 1: Stiles, 2: 1987-07-25, 3: 3200, 4: 50}, {0: John, 1: Seo, 2: 1987-07-26, 3: 2700, 4: 50}, {0: Joshua, 1: Patel, 2: 1987-07-27, 3: 2500, 4: 50}, {0: Trenna, 1: Rajs, 2: 1987-07-28, 3: 3500, 4: 50}, {0: Curtis, 1: Davies, 2: 1987-07-29, 3: 3100, 4: 50}, {0: Randall, 1: Matos, 2: 1987-07-30, 3: 2600, 4: 50}, {0: Peter, 1: Vargas, 2: 1987-07-31, 3: 2500, 4: 50}, {0: Winston, 1: Taylor, 2: 1987-09-05, 3: 3200, 4: 50}, {0: Jean, 1: Fleaur, 2: 1987-09-06, 3: 3100, 4: 50}, {0: Girard, 1: Geoni, 2: 1987-09-08, 3: 2800, 4: 50}, {0: Nandita, 1: Sarchand, 2: 1987-09-09, 3: 4200, 4: 50}, {0: Alexis, 1: Bull, 2: 1987-09-10, 3: 4100, 4: 50}, {0: Julia, 1: Dellinger, 2: 1987-09-11, 3: 3400, 4: 50}, {0: Anthony, 1: Cabrio, 2: 1987-09-12, 3: 3000, 4: 50}, {0: Kelly, 1: Chung, 2: 1987-09-13, 3: 3800, 4: 50}, {0: Jennifer, 1: Dilly, 2: 1987-09-14, 3: 3600, 4: 50}, {0: Randall, 1: Perkins, 2: 1987-09-16, 3: 2500, 4: 50}, {0: Sarah, 1: Bell, 2: 1987-09-17, 3: 4000, 4: 50}, {0: Britney, 1: Everett, 2: 1987-09-18, 3: 3900, 4: 50}, {0: Vance, 1: Jones, 2: 1987-09-20, 3: 2800, 4: 50}, {0: Alana, 1: Walsh, 2: 1987-09-21, 3: 3100, 4: 50}, {0: Kevin, 1: Feeney, 2: 1987-09-22, 3: 3000, 4: 50}, {0: Donald, 1: OConnell, 2: 1987-09-23, 3: 2600, 4: 50}, {0: Douglas, 1: Grant, 2: 1987-09-24, 3: 2600, 4: 50}, {0: Alexander, 1: Hunold, 2: 1987-06-20, 3: 9000, 4: 60}, {0: Bruce, 1: Ernst, 2: 1987-06-21, 3: 6000, 4: 60}, {0: David, 1: Austin, 2: 1987-06-22, 3: 4800, 4: 60}, {0: Valli, 1: Pataballa, 2: 1987-06-23, 3: 4800, 4: 60}, {0: Diana, 1: Lorentz, 2: 1987-06-24, 3: 4200, 4: 60}, {0: John, 1: Russell, 2: 1987-08-01, 3: 14000, 4: 80}, {0: Karen, 1: Partners, 2: 1987-08-02, 3: 13500, 4: 80}, {0: Alberto, 1: Errazuriz, 2: 1987-08-03, 3: 12000, 4: 80}, {0: Gerald, 1: Cambrault, 2: 1987-08-04, 3: 11000, 4: 80}, {0: Eleni, 1: Zlotkey, 2: 1987-08-05, 3: 10500, 4: 80}, {0: Peter, 1: Tucker, 2: 1987-08-06, 3: 10000, 4: 80}, {0: David, 1: Bernstein, 2: 1987-08-07, 3: 9500, 4: 80}, {0: Peter, 1: Hall, 2: 1987-08-08, 3: 9000, 4: 80}, {0: Christopher, 1: Olsen, 2: 1987-08-09, 3: 8000, 4: 80}, {0: Nanette, 1: Cambrault, 2: 1987-08-10, 3: 7500, 4: 80}, {0: Oliver, 1: Tuvault, 2: 1987-08-11, 3: 7000, 4: 80}, {0: Janette, 1: King, 2: 1987-08-12, 3: 10000, 4: 80}, {0: Patrick, 1: Sully, 2: 1987-08-13, 3: 9500, 4: 80}, {0: Allan, 1: McEwen, 2: 1987-08-14, 3: 9000, 4: 80}, {0: Lindsey, 1: Smith, 2: 1987-08-15, 3: 8000, 4: 80}, {0: Louise, 1: Doran, 2: 1987-08-16, 3: 7500, 4: 80}, {0: Sarath, 1: Sewall, 2: 1987-08-17, 3: 7000, 4: 80}, {0: Clara, 1: Vishney, 2: 1987-08-18, 3: 10500, 4: 80}, {0: Danielle, 1: Greene, 2: 1987-08-19, 3: 9500, 4: 80}, {0: David, 1: Lee, 2: 1987-08-21, 3: 6800, 4: 80}, {0: Sundar, 1: Ande, 2: 1987-08-22, 3: 6400, 4: 80}, {0: Lisa, 1: Ozer, 2: 1987-08-24, 3: 11500, 4: 80}, {0: Harrison, 1: Bloom, 2: 1987-08-25, 3: 10000, 4: 80}, {0: Tayler, 1: Fox, 2: 1987-08-26, 3: 9600, 4: 80}, {0: Elizabeth, 1: Bates, 2: 1987-08-28, 3: 7300, 4: 80}, {0: Sundita, 1: Kumar, 2: 1987-08-29, 3: 6100, 4: 80}, {0: Ellen, 1: Abel, 2: 1987-08-30, 3: 11000, 4: 80}, {0: Alyssa, 1: Hutton, 2: 1987-08-31, 3: 8800, 4: 80}, {0: Jonathon, 1: Taylor, 2: 1987-09-01, 3: 8600, 4: 80}, {0: Jack, 1: Livingston, 2: 1987-09-02, 3: 8400, 4: 80}, {0: Charles, 1: Johnson, 2: 1987-09-04, 3: 6200, 4: 80}, {0: Steven, 1: King, 2: 1987-06-17, 3: 24000, 4: 90}, {0: Neena, 1: Kochhar, 2: 1987-06-18, 3: 17000, 4: 90}, {0: Lex, 1: De Haan, 2: 1987-06-19, 3: 17000, 4: 90}, {0: Nancy, 1: Greenberg, 2: 1987-06-25, 3: 12000, 4: 100}, {0: Daniel, 1: Faviet, 2: 1987-06-26, 3: 9000, 4: 100}, {0: John, 1: Chen, 2: 1987-06-27, 3: 8200, 4: 100}, {0: Luis, 1: Popp, 2: 1987-06-30, 3: 6900, 4: 100}, {0: Shelley, 1: Higgins, 2: 1987-09-30, 3: 12000, 4: 110}]\", linq_results: \"[{0: Kimberely, 1: Grant, 2: 03.09.1987, 3: 7000, 4: 0}, {0: Michael, 1: Hartstein, 2: 26.09.1987, 3: 13000, 4: 20}, {0: Matthew, 1: Weiss, 2: 07.07.1987, 3: 8000, 4: 50}, {0: Adam, 1: Fripp, 2: 08.07.1987, 3: 8200, 4: 50}, {0: Payam, 1: Kaufling, 2: 09.07.1987, 3: 7900, 4: 50}, {0: James, 1: Landry, 2: 14.07.1987, 3: 2400, 4: 50}, {0: Mozhe, 1: Atkinson, 2: 17.07.1987, 3: 2800, 4: 50}, {0: James, 1: Marlow, 2: 18.07.1987, 3: 2500, 4: 50}, {0: Michael, 1: Rogers, 2: 21.07.1987, 3: 2900, 4: 50}, {0: Martha, 1: Sullivan, 2: 07.09.1987, 3: 2500, 4: 50}, {0: Timothy, 1: Gates, 2: 15.09.1987, 3: 2900, 4: 50}, {0: Samuel, 1: McCain, 2: 19.09.1987, 3: 3200, 4: 50}, {0: Hermann, 1: Baer, 2: 29.09.1987, 3: 10000, 4: 70}, {0: Mattea, 1: Marvins, 2: 20.08.1987, 3: 7200, 4: 80}, {0: Amit, 1: Banda, 2: 23.08.1987, 3: 6200, 4: 80}, {0: William, 1: Smith, 2: 27.08.1987, 3: 7400, 4: 80}, {0: Ismael, 1: Sciarra, 2: 28.06.1987, 3: 7700, 4: 100}, {0: Jose Manuel, 1: Urman, 2: 29.06.1987, 3: 7800, 4: 100}, {0: William, 1: Gietz, 2: 01.10.1987, 3: 8300, 4: 110}]\" }"
  },
  {
    "query": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000",
    "result": "context.Employees.Where(row => row.Salary >= 8000 && row.Salary <= 12000).Select(row => new { row.PhoneNumber }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
    "result": "context.Employees.Where(row => row.Salary >= 8000 && row.Salary <= 12000 && row.CommissionPct != \"null\" || row.DepartmentId != 40).Select(row => new { row..EmployeeId, row..FirstName, row..LastName, row..Email, row..PhoneNumber, row..HireDate, row..JobId, row..Salary, row..CommissionPct, row..ManagerId, row..DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,322): error CS0103: The name 'DepartmentId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    23 Error(s)\n\nTime Elapsed 00:00:01.41"
  },
  {
    "query": "SELECT first_name , last_name , salary FROM employees WHERE commission_pct = \"null\"",
    "result": "context.Employees.Where(row => row.CommissionPct == \"null\").Select(row => new { row.FirstName, row.LastName, row.Salary }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS0019: Operator '==' cannot be applied to operands of type 'decimal?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.62"
  },
  {
    "query": "SELECT first_name , last_name , salary FROM employees WHERE first_name LIKE '%m'",
    "result": "context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%m\")).Select(row => new { row.FirstName, row.LastName, row.Salary }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT job_id , hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
    "result": "context.Employees.Where(row => row.HireDate >= '2007-11-05' && row.HireDate <= '2009-07-05').Select(row => new { row.JobId, row.HireDate }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,91): error CS1012: Too many characters in character literal [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    143 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:00.59"
  },
  {
    "query": "SELECT first_name , last_name FROM employees WHERE department_id = 70 OR department_id = 90",
    "result": "context.Employees.Where(row => row.DepartmentId == 70 || row.DepartmentId == 90).Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT salary , manager_id FROM employees WHERE manager_id != \"null\"",
    "result": "context.Employees.Where(row => row.ManagerId != \"null\").Select(row => new { row.Salary, row.ManagerId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS0019: Operator '!=' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.56"
  },
  {
    "query": "SELECT * FROM employees WHERE hire_date < '2002-06-21'",
    "result": "context.Employees.Where(row => row.HireDate < \"2002-06-21\").Select(row => new { row..EmployeeId, row..FirstName, row..LastName, row..Email, row..PhoneNumber, row..HireDate, row..JobId, row..Salary, row..CommissionPct, row..ManagerId, row..DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,251): error CS0103: The name 'DepartmentId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    23 Error(s)\n\nTime Elapsed 00:00:01.73"
  },
  {
    "query": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
    "result": "context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%D%\") || EF.Functions.Like(row.FirstName, \"%S%\")).OrderByDescending(row => row.Salary).Select(row => new { row..EmployeeId, row..FirstName, row..LastName, row..Email, row..PhoneNumber, row..HireDate, row..JobId, row..Salary, row..CommissionPct, row..ManagerId, row..DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,343): error CS0103: The name 'DepartmentId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    33 Error(s)\n\nTime Elapsed 00:00:01.87"
  },
  {
    "query": "SELECT * FROM employees WHERE hire_date > '1987-09-07'",
    "result": "context.Employees.Where(row => row.HireDate > \"1987-09-07\").Select(row => new { row..EmployeeId, row..FirstName, row..LastName, row..Email, row..PhoneNumber, row..HireDate, row..JobId, row..Salary, row..CommissionPct, row..ManagerId, row..DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,251): error CS0103: The name 'DepartmentId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    23 Error(s)\n\nTime Elapsed 00:00:02.90"
  },
  {
    "query": "SELECT job_title FROM jobs WHERE min_salary > 9000",
    "result": "context.Jobs.Where(row => row.MinSalary > 9000).Select(row => new { row.JobTitle }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT job_title , max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
    "result": "context.Jobs.Where(row => row.MaxSalary >= 12000 && row.MaxSalary <= 18000).Select(row => new { row.JobTitle, Diff = row.MaxSalary - row.MinSalary }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT email FROM employees WHERE commission_pct = \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",
    "result": "context.Employees.Where(row => row.CommissionPct == \"null\" && row.Salary >= 7000 && row.Salary <= 12000 && row.DepartmentId == 50).Select(row => new { row.Email }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS0019: Operator '==' cannot be applied to operands of type 'decimal?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.18"
  },
  {
    "query": "SELECT employee_id , MAX(end_date) FROM job_history GROUP BY employee_id",
    "result": "context.JobHistories.GroupBy(row => new { row.EmployeeId }).Select(group => new { group.Key.EmployeeId, MaxEndDate = group.Select(row => row.EndDate).Max() }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
    "result": "context.Employees.GroupBy(row => new { row.DepartmentId }).Where(group => group.Count(row => row.CommissionPct != null) > 10).Select(group => new { group.Key.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT department_id FROM employees GROUP BY department_id , manager_id HAVING COUNT(employee_id) >= 4",
    "result": "context.Employees.GroupBy(row => new { row.DepartmentId, row.ManagerId }).Where(group => group.Count(row => row.EmployeeId != null) >= 4).Select(group => new { group.Key.DepartmentId }).Distinct().ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT department_id , AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
    "result": "context.Employees.Where(row => row.CommissionPct != \"null\").GroupBy(row => new { row.DepartmentId }).Select(group => new { group.Key.DepartmentId, AverageSalary = group.Select(row => row.Salary).Average() }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS0019: Operator '!=' cannot be applied to operands of type 'decimal?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.82"
  },
  {
    "query": "SELECT country_id , COUNT(*) FROM locations GROUP BY country_id",
    "result": "context.Locations.GroupBy(row => new { row.CountryId }).Select(group => new { group.Key.CountryId, Count = group.Count() }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2",
    "result": "context.JobHistories.GroupBy(row => new { row.EmployeeId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.EmployeeId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.employee_id , T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id",
    "result": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Locations, joined => joined.T2.LocationId, T3 => T3.LocationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Countries, joined => joined.T3.CountryId, T4 => T4.CountryId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Select(row => new { row.T1.EmployeeId, row.T4.CountryName }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.department_name , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name",
    "result": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DepartmentName }).Select(group => new { group.Key.DepartmentName, Count = group.Count() }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM job_history AS T1 JOIN employees AS T2 ON T1.employee_id = T2.employee_id WHERE T2.salary >= 12000",
    "result": "context.JobHistories.Join(context.Employees, T1 => T1.EmployeeId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Salary >= 12000).Select(row => new { T1Employeeid = row.T1.EmployeeId, row.T1.StartDate, row.T1.EndDate, T1Jobid = row.T1.JobId, T1Departmentid = row.T1.DepartmentId, T2Employeeid = row.T2.EmployeeId, row.T2.FirstName, row.T2.LastName, row.T2.Email, row.T2.PhoneNumber, row.T2.HireDate, T2Jobid = row.T2.JobId, row.T2.Salary, row.T2.CommissionPct, row.T2.ManagerId, T2Departmentid = row.T2.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 102, 1: 1993-01-13, 2: 1998-07-24, 3: IT_PROG, 4: 60, 5: 102, 6: Lex, 7: De Haan, 8: LDEHAAN, 9: 515.123.4569, 10: 1987-06-19, 11: AD_VP, 12: 17000, 13: 0, 14: 100, 15: 90}, {0: 101, 1: 1989-09-21, 2: 1993-10-27, 3: AC_ACCOUNT, 4: 110, 5: 101, 6: Neena, 7: Kochhar, 8: NKOCHHAR, 9: 515.123.4568, 10: 1987-06-18, 11: AD_VP, 12: 17000, 13: 0, 14: 100, 15: 90}, {0: 101, 1: 1993-10-28, 2: 1997-03-15, 3: AC_MGR, 4: 110, 5: 101, 6: Neena, 7: Kochhar, 8: NKOCHHAR, 9: 515.123.4568, 10: 1987-06-18, 11: AD_VP, 12: 17000, 13: 0, 14: 100, 15: 90}, {0: 201, 1: 1996-02-17, 2: 1999-12-19, 3: MK_REP, 4: 20, 5: 201, 6: Michael, 7: Hartstein, 8: MHARTSTE, 9: 515.123.5555, 10: 1987-09-26, 11: MK_MAN, 12: 13000, 13: 0, 14: 100, 15: 20}]\", linq_results: \"[{0: 102, 1: 13.01.1993, 2: 24.07.1998, 3: IT_PROG, 4: 60, 5: 102, 6: Lex, 7: De Haan, 8: LDEHAAN, 9: 515.123.4569, 10: 19.06.1987, 11: AD_VP, 12: 17000, 13: 0, 14: 100, 15: 90}, {0: 101, 1: 21.09.1989, 2: 27.10.1993, 3: AC_ACCOUNT, 4: 110, 5: 101, 6: Neena, 7: Kochhar, 8: NKOCHHAR, 9: 515.123.4568, 10: 18.06.1987, 11: AD_VP, 12: 17000, 13: 0, 14: 100, 15: 90}, {0: 101, 1: 28.10.1993, 2: 15.03.1997, 3: AC_MGR, 4: 110, 5: 101, 6: Neena, 7: Kochhar, 8: NKOCHHAR, 9: 515.123.4568, 10: 18.06.1987, 11: AD_VP, 12: 17000, 13: 0, 14: 100, 15: 90}, {0: 201, 1: 17.02.1996, 2: 19.12.1999, 3: MK_REP, 4: 20, 5: 201, 6: Michael, 7: Hartstein, 8: MHARTSTE, 9: 515.123.5555, 10: 26.09.1987, 11: MK_MAN, 12: 13000, 13: 0, 14: 100, 15: 20}]\" }"
  },
  {
    "query": "SELECT job_title , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title",
    "result": "context.Employees.Join(context.Jobs, T1 => T1.JobId, T2 => T2.JobId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.JobTitle }).Select(group => new { group.Key.JobTitle, AverageSalary = group.Select(row => row.T1.Salary).Average() }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT first_name , last_name FROM employees WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163 )",
    "result": "context.Employees.Where(row => row.Salary > context.Employees.Where(row => row.EmployeeId == 163).Select(row => row.Salary).First()).Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT MIN(salary) , department_id FROM employees GROUP BY department_id",
    "result": "context.Employees.GroupBy(row => new { row.DepartmentId }).Select(group => new { MinSalary = group.Select(row => row.Salary).Min(), group.Key.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT first_name , last_name , department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)",
    "result": "context.Employees.Where(row => context.Employees.GroupBy(row => new { row.DepartmentId }).Select(group => MinSalary = group.Select(row => row.Salary).Min()).Contains(row.Salary)).Select(row => new { row.FirstName, row.LastName, row.DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,118): error CS0103: The name 'MinSalary' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.78"
  },
  {
    "query": "SELECT employee_id FROM employees WHERE salary > (SELECT AVG(salary) FROM employees)",
    "result": "context.Employees.Where(row => row.Salary > context.Employees.Select(row => row.Salary).Average()).Select(row => new { row.EmployeeId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT employee_id , salary FROM employees WHERE manager_id = (SELECT employee_id FROM employees WHERE first_name = 'Payam' )",
    "result": "context.Employees.Where(row => row.ManagerId == context.Employees.Where(row => row.FirstName == \"Payam\").Select(row => row.EmployeeId).First()).Select(row => new { row.EmployeeId, row.Salary }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
    "result": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.DepartmentName }).Distinct().ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
    "result": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.EmployeeId == row.T2.ManagerId).Select(row => new { row.T1.EmployeeId, row.T1.FirstName, row.T1.LastName, row.T1.Email, row.T1.PhoneNumber, row.T1.HireDate, row.T1.JobId, row.T1.Salary, row.T1.CommissionPct, T1Managerid = row.T1.ManagerId, T1Departmentid = row.T1.DepartmentId, T2Departmentid = row.T2.DepartmentId, row.T2.DepartmentName, T2Managerid = row.T2.ManagerId, row.T2.LocationId }).Distinct().ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 100, 1: Steven, 2: King, 3: SKING, 4: 515.123.4567, 5: 1987-06-17, 6: AD_PRES, 7: 24000, 8: 0, 9: 0, 10: 90, 11: 90, 12: Executive, 13: 100, 14: 1700}, {0: 103, 1: Alexander, 2: Hunold, 3: AHUNOLD, 4: 590.423.4567, 5: 1987-06-20, 6: IT_PROG, 7: 9000, 8: 0, 9: 102, 10: 60, 11: 60, 12: IT, 13: 103, 14: 1400}, {0: 108, 1: Nancy, 2: Greenberg, 3: NGREENBE, 4: 515.124.4569, 5: 1987-06-25, 6: FI_MGR, 7: 12000, 8: 0, 9: 101, 10: 100, 11: 100, 12: Finance, 13: 108, 14: 1700}, {0: 114, 1: Den, 2: Raphaely, 3: DRAPHEAL, 4: 515.127.4561, 5: 1987-07-01, 6: PU_MAN, 7: 11000, 8: 0, 9: 100, 10: 30, 11: 30, 12: Purchasing, 13: 114, 14: 1700}, {0: 121, 1: Adam, 2: Fripp, 3: AFRIPP, 4: 650.123.2234, 5: 1987-07-08, 6: ST_MAN, 7: 8200, 8: 0, 9: 100, 10: 50, 11: 50, 12: Shipping, 13: 121, 14: 1500}, {0: 145, 1: John, 2: Russell, 3: JRUSSEL, 4: 011.44.1344.429268, 5: 1987-08-01, 6: SA_MAN, 7: 14000, 8: 0.4, 9: 100, 10: 80, 11: 80, 12: Sales, 13: 145, 14: 2500}, {0: 200, 1: Jennifer, 2: Whalen, 3: JWHALEN, 4: 515.123.4444, 5: 1987-09-25, 6: AD_ASST, 7: 4400, 8: 0, 9: 101, 10: 10, 11: 10, 12: Administration, 13: 200, 14: 1700}, {0: 201, 1: Michael, 2: Hartstein, 3: MHARTSTE, 4: 515.123.5555, 5: 1987-09-26, 6: MK_MAN, 7: 13000, 8: 0, 9: 100, 10: 20, 11: 20, 12: Marketing, 13: 201, 14: 1800}, {0: 203, 1: Susan, 2: Mavris, 3: SMAVRIS, 4: 515.123.7777, 5: 1987-09-28, 6: HR_REP, 7: 6500, 8: 0, 9: 101, 10: 40, 11: 40, 12: Human Resources, 13: 203, 14: 2400}, {0: 204, 1: Hermann, 2: Baer, 3: HBAER, 4: 515.123.8888, 5: 1987-09-29, 6: PR_REP, 7: 10000, 8: 0, 9: 101, 10: 70, 11: 70, 12: Public Relations, 13: 204, 14: 2700}, {0: 205, 1: Shelley, 2: Higgins, 3: SHIGGINS, 4: 515.123.8080, 5: 1987-09-30, 6: AC_MGR, 7: 12000, 8: 0, 9: 101, 10: 110, 11: 110, 12: Accounting, 13: 205, 14: 1700}]\", linq_results: \"[{0: 100, 1: Steven, 2: King, 3: SKING, 4: 515.123.4567, 5: 17.06.1987, 6: AD_PRES, 7: 24000, 8: 0, 9: 0, 10: 90, 11: 90, 12: Executive, 13: 100, 14: 1700}, {0: 103, 1: Alexander, 2: Hunold, 3: AHUNOLD, 4: 590.423.4567, 5: 20.06.1987, 6: IT_PROG, 7: 9000, 8: 0, 9: 102, 10: 60, 11: 60, 12: IT, 13: 103, 14: 1400}, {0: 108, 1: Nancy, 2: Greenberg, 3: NGREENBE, 4: 515.124.4569, 5: 25.06.1987, 6: FI_MGR, 7: 12000, 8: 0, 9: 101, 10: 100, 11: 100, 12: Finance, 13: 108, 14: 1700}, {0: 114, 1: Den, 2: Raphaely, 3: DRAPHEAL, 4: 515.127.4561, 5: 01.07.1987, 6: PU_MAN, 7: 11000, 8: 0, 9: 100, 10: 30, 11: 30, 12: Purchasing, 13: 114, 14: 1700}, {0: 121, 1: Adam, 2: Fripp, 3: AFRIPP, 4: 650.123.2234, 5: 08.07.1987, 6: ST_MAN, 7: 8200, 8: 0, 9: 100, 10: 50, 11: 50, 12: Shipping, 13: 121, 14: 1500}, {0: 145, 1: John, 2: Russell, 3: JRUSSEL, 4: 011.44.1344.429268, 5: 01.08.1987, 6: SA_MAN, 7: 14000, 8: 0.4, 9: 100, 10: 80, 11: 80, 12: Sales, 13: 145, 14: 2500}, {0: 200, 1: Jennifer, 2: Whalen, 3: JWHALEN, 4: 515.123.4444, 5: 25.09.1987, 6: AD_ASST, 7: 4400, 8: 0, 9: 101, 10: 10, 11: 10, 12: Administration, 13: 200, 14: 1700}, {0: 201, 1: Michael, 2: Hartstein, 3: MHARTSTE, 4: 515.123.5555, 5: 26.09.1987, 6: MK_MAN, 7: 13000, 8: 0, 9: 100, 10: 20, 11: 20, 12: Marketing, 13: 201, 14: 1800}, {0: 203, 1: Susan, 2: Mavris, 3: SMAVRIS, 4: 515.123.7777, 5: 28.09.1987, 6: HR_REP, 7: 6500, 8: 0, 9: 101, 10: 40, 11: 40, 12: Human Resources, 13: 203, 14: 2400}, {0: 204, 1: Hermann, 2: Baer, 3: HBAER, 4: 515.123.8888, 5: 29.09.1987, 6: PR_REP, 7: 10000, 8: 0, 9: 101, 10: 70, 11: 70, 12: Public Relations, 13: 204, 14: 2700}, {0: 205, 1: Shelley, 2: Higgins, 3: SHIGGINS, 4: 515.123.8080, 5: 30.09.1987, 6: AC_MGR, 7: 12000, 8: 0, 9: 101, 10: 110, 11: 110, 12: Accounting, 13: 205, 14: 1700}]\" }"
  },
  {
    "query": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
    "result": "context.Employees.GroupBy(row => new { row.JobId }).Where(group => group.Average(row => row.Salary) > 8000).Select(group => new { group.Key.JobId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.employee_id , T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80",
    "result": "context.Employees.Join(context.Jobs, T1 => T1.JobId, T2 => T2.JobId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DepartmentId == 80).Select(row => new { row.T1.EmployeeId, row.T2.JobTitle }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.first_name , T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance'",
    "result": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DepartmentName == \"Finance\").Select(row => new { row.T1.FirstName, row.T1.JobId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
    "result": "context.Employees.Where(row => row.Salary >= context.Employees.Select(row => row.Salary).Min() && row.Salary <= 2500).Select(row => new { row..EmployeeId, row..FirstName, row..LastName, row..Email, row..PhoneNumber, row..HireDate, row..JobId, row..Salary, row..CommissionPct, row..ManagerId, row..DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,309): error CS0103: The name 'DepartmentId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    33 Error(s)\n\nTime Elapsed 00:00:02.16"
  },
  {
    "query": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
    "result": "context.Employees.Where(row => !context.Departments.Where(row => row.ManagerId >= 100 && row.ManagerId <= 200).Select(row => row.DepartmentId).Contains(row.DepartmentId)).Select(row => new { row..EmployeeId, row..FirstName, row..LastName, row..Email, row..PhoneNumber, row..HireDate, row..JobId, row..Salary, row..CommissionPct, row..ManagerId, row..DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,362): error CS0103: The name 'DepartmentId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    23 Error(s)\n\nTime Elapsed 00:00:02.13"
  },
  {
    "query": "SELECT first_name , last_name , hire_date FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = \"Clara\")",
    "result": "context.Employees.Where(row => row.DepartmentId == context.Employees.Where(row => row.FirstName == \"Clara\").Select(row => row.DepartmentId).First()).Select(row => new { row.FirstName, row.LastName, row.HireDate }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: John, 1: Russell, 2: 1987-08-01}, {0: Karen, 1: Partners, 2: 1987-08-02}, {0: Alberto, 1: Errazuriz, 2: 1987-08-03}, {0: Gerald, 1: Cambrault, 2: 1987-08-04}, {0: Eleni, 1: Zlotkey, 2: 1987-08-05}, {0: Peter, 1: Tucker, 2: 1987-08-06}, {0: David, 1: Bernstein, 2: 1987-08-07}, {0: Peter, 1: Hall, 2: 1987-08-08}, {0: Christopher, 1: Olsen, 2: 1987-08-09}, {0: Nanette, 1: Cambrault, 2: 1987-08-10}, {0: Oliver, 1: Tuvault, 2: 1987-08-11}, {0: Janette, 1: King, 2: 1987-08-12}, {0: Patrick, 1: Sully, 2: 1987-08-13}, {0: Allan, 1: McEwen, 2: 1987-08-14}, {0: Lindsey, 1: Smith, 2: 1987-08-15}, {0: Louise, 1: Doran, 2: 1987-08-16}, {0: Sarath, 1: Sewall, 2: 1987-08-17}, {0: Clara, 1: Vishney, 2: 1987-08-18}, {0: Danielle, 1: Greene, 2: 1987-08-19}, {0: Mattea, 1: Marvins, 2: 1987-08-20}, {0: David, 1: Lee, 2: 1987-08-21}, {0: Sundar, 1: Ande, 2: 1987-08-22}, {0: Amit, 1: Banda, 2: 1987-08-23}, {0: Lisa, 1: Ozer, 2: 1987-08-24}, {0: Harrison, 1: Bloom, 2: 1987-08-25}, {0: Tayler, 1: Fox, 2: 1987-08-26}, {0: William, 1: Smith, 2: 1987-08-27}, {0: Elizabeth, 1: Bates, 2: 1987-08-28}, {0: Sundita, 1: Kumar, 2: 1987-08-29}, {0: Ellen, 1: Abel, 2: 1987-08-30}, {0: Alyssa, 1: Hutton, 2: 1987-08-31}, {0: Jonathon, 1: Taylor, 2: 1987-09-01}, {0: Jack, 1: Livingston, 2: 1987-09-02}, {0: Charles, 1: Johnson, 2: 1987-09-04}]\", linq_results: \"[{0: John, 1: Russell, 2: 01.08.1987}, {0: Karen, 1: Partners, 2: 02.08.1987}, {0: Alberto, 1: Errazuriz, 2: 03.08.1987}, {0: Gerald, 1: Cambrault, 2: 04.08.1987}, {0: Eleni, 1: Zlotkey, 2: 05.08.1987}, {0: Peter, 1: Tucker, 2: 06.08.1987}, {0: David, 1: Bernstein, 2: 07.08.1987}, {0: Peter, 1: Hall, 2: 08.08.1987}, {0: Christopher, 1: Olsen, 2: 09.08.1987}, {0: Nanette, 1: Cambrault, 2: 10.08.1987}, {0: Oliver, 1: Tuvault, 2: 11.08.1987}, {0: Janette, 1: King, 2: 12.08.1987}, {0: Patrick, 1: Sully, 2: 13.08.1987}, {0: Allan, 1: McEwen, 2: 14.08.1987}, {0: Lindsey, 1: Smith, 2: 15.08.1987}, {0: Louise, 1: Doran, 2: 16.08.1987}, {0: Sarath, 1: Sewall, 2: 17.08.1987}, {0: Clara, 1: Vishney, 2: 18.08.1987}, {0: Danielle, 1: Greene, 2: 19.08.1987}, {0: Mattea, 1: Marvins, 2: 20.08.1987}, {0: David, 1: Lee, 2: 21.08.1987}, {0: Sundar, 1: Ande, 2: 22.08.1987}, {0: Amit, 1: Banda, 2: 23.08.1987}, {0: Lisa, 1: Ozer, 2: 24.08.1987}, {0: Harrison, 1: Bloom, 2: 25.08.1987}, {0: Tayler, 1: Fox, 2: 26.08.1987}, {0: William, 1: Smith, 2: 27.08.1987}, {0: Elizabeth, 1: Bates, 2: 28.08.1987}, {0: Sundita, 1: Kumar, 2: 29.08.1987}, {0: Ellen, 1: Abel, 2: 30.08.1987}, {0: Alyssa, 1: Hutton, 2: 31.08.1987}, {0: Jonathon, 1: Taylor, 2: 01.09.1987}, {0: Jack, 1: Livingston, 2: 02.09.1987}, {0: Charles, 1: Johnson, 2: 04.09.1987}]\" }"
  },
  {
    "query": "SELECT first_name , last_name , hire_date FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\") AND first_name != \"Clara\"",
    "result": "context.Employees.Where(row => row.DepartmentId == context.Employees.Where(row => row.FirstName == \"Clara\").Select(row => row.DepartmentId).First() && row.FirstName != \"Clara\").Select(row => new { row.FirstName, row.LastName, row.HireDate }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: John, 1: Russell, 2: 1987-08-01}, {0: Karen, 1: Partners, 2: 1987-08-02}, {0: Alberto, 1: Errazuriz, 2: 1987-08-03}, {0: Gerald, 1: Cambrault, 2: 1987-08-04}, {0: Eleni, 1: Zlotkey, 2: 1987-08-05}, {0: Peter, 1: Tucker, 2: 1987-08-06}, {0: David, 1: Bernstein, 2: 1987-08-07}, {0: Peter, 1: Hall, 2: 1987-08-08}, {0: Christopher, 1: Olsen, 2: 1987-08-09}, {0: Nanette, 1: Cambrault, 2: 1987-08-10}, {0: Oliver, 1: Tuvault, 2: 1987-08-11}, {0: Janette, 1: King, 2: 1987-08-12}, {0: Patrick, 1: Sully, 2: 1987-08-13}, {0: Allan, 1: McEwen, 2: 1987-08-14}, {0: Lindsey, 1: Smith, 2: 1987-08-15}, {0: Louise, 1: Doran, 2: 1987-08-16}, {0: Sarath, 1: Sewall, 2: 1987-08-17}, {0: Danielle, 1: Greene, 2: 1987-08-19}, {0: Mattea, 1: Marvins, 2: 1987-08-20}, {0: David, 1: Lee, 2: 1987-08-21}, {0: Sundar, 1: Ande, 2: 1987-08-22}, {0: Amit, 1: Banda, 2: 1987-08-23}, {0: Lisa, 1: Ozer, 2: 1987-08-24}, {0: Harrison, 1: Bloom, 2: 1987-08-25}, {0: Tayler, 1: Fox, 2: 1987-08-26}, {0: William, 1: Smith, 2: 1987-08-27}, {0: Elizabeth, 1: Bates, 2: 1987-08-28}, {0: Sundita, 1: Kumar, 2: 1987-08-29}, {0: Ellen, 1: Abel, 2: 1987-08-30}, {0: Alyssa, 1: Hutton, 2: 1987-08-31}, {0: Jonathon, 1: Taylor, 2: 1987-09-01}, {0: Jack, 1: Livingston, 2: 1987-09-02}, {0: Charles, 1: Johnson, 2: 1987-09-04}]\", linq_results: \"[{0: John, 1: Russell, 2: 01.08.1987}, {0: Karen, 1: Partners, 2: 02.08.1987}, {0: Alberto, 1: Errazuriz, 2: 03.08.1987}, {0: Gerald, 1: Cambrault, 2: 04.08.1987}, {0: Eleni, 1: Zlotkey, 2: 05.08.1987}, {0: Peter, 1: Tucker, 2: 06.08.1987}, {0: David, 1: Bernstein, 2: 07.08.1987}, {0: Peter, 1: Hall, 2: 08.08.1987}, {0: Christopher, 1: Olsen, 2: 09.08.1987}, {0: Nanette, 1: Cambrault, 2: 10.08.1987}, {0: Oliver, 1: Tuvault, 2: 11.08.1987}, {0: Janette, 1: King, 2: 12.08.1987}, {0: Patrick, 1: Sully, 2: 13.08.1987}, {0: Allan, 1: McEwen, 2: 14.08.1987}, {0: Lindsey, 1: Smith, 2: 15.08.1987}, {0: Louise, 1: Doran, 2: 16.08.1987}, {0: Sarath, 1: Sewall, 2: 17.08.1987}, {0: Danielle, 1: Greene, 2: 19.08.1987}, {0: Mattea, 1: Marvins, 2: 20.08.1987}, {0: David, 1: Lee, 2: 21.08.1987}, {0: Sundar, 1: Ande, 2: 22.08.1987}, {0: Amit, 1: Banda, 2: 23.08.1987}, {0: Lisa, 1: Ozer, 2: 24.08.1987}, {0: Harrison, 1: Bloom, 2: 25.08.1987}, {0: Tayler, 1: Fox, 2: 26.08.1987}, {0: William, 1: Smith, 2: 27.08.1987}, {0: Elizabeth, 1: Bates, 2: 28.08.1987}, {0: Sundita, 1: Kumar, 2: 29.08.1987}, {0: Ellen, 1: Abel, 2: 30.08.1987}, {0: Alyssa, 1: Hutton, 2: 31.08.1987}, {0: Jonathon, 1: Taylor, 2: 01.09.1987}, {0: Jack, 1: Livingston, 2: 02.09.1987}, {0: Charles, 1: Johnson, 2: 04.09.1987}]\" }"
  },
  {
    "query": "SELECT employee_id , first_name , last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",
    "result": "context.Employees.Where(row => row.DepartmentId.HasValue && context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%T%\")).Select(row => row.DepartmentId).Contains(row.DepartmentId.Value)).Select(row => new { row.EmployeeId, row.FirstName, row.LastName }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT employee_id , first_name , last_name , salary FROM employees WHERE salary > ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
    "result": "context.Employees.Where(row => row.Salary > context.Employees.Select(row => row.Salary).Average() && row.DepartmentId.HasValue && context.Employees.Where(row => EF.Functions.Like(row.FirstName, \"%J%\")).Select(row => row.DepartmentId).Contains(row.DepartmentId.Value)).Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.Salary }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT employee_id , job_id FROM employees WHERE salary < ( SELECT min(salary) FROM employees WHERE job_id = 'MK_MAN' )",
    "result": "context.Employees.Where(row => row.Salary < context.Employees.Where(row => row.JobId == \"MK_MAN\").Select(row => row.Salary).Min()).Select(row => new { row.EmployeeId, row.JobId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT employee_id , first_name , last_name , job_id FROM employees WHERE salary > ( SELECT max(salary) FROM employees WHERE job_id = 'PU_MAN' )",
    "result": "context.Employees.Where(row => row.Salary > context.Employees.Where(row => row.JobId == \"PU_MAN\").Select(row => row.Salary).Max()).Select(row => new { row.EmployeeId, row.FirstName, row.LastName, row.JobId }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT department_id , SUM(salary) FROM employees GROUP BY department_id HAVING count(*) >= 2",
    "result": "context.Employees.GroupBy(row => new { row.DepartmentId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.DepartmentId, SumSalary = group.Select(row => row.Salary).Sum() }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
    "result": "context.Employees.Where(row => !context.JobHistories.Select(row => row.EmployeeId).Contains(row.EmployeeId)).Select(row => new { row..EmployeeId, row..FirstName, row..LastName, row..Email, row..PhoneNumber, row..HireDate, row..JobId, row..Salary, row..CommissionPct, row..ManagerId, row..DepartmentId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,300): error CS0103: The name 'DepartmentId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    33 Error(s)\n\nTime Elapsed 00:00:01.66"
  },
  {
    "query": "SELECT first_name , last_name , salary , department_id , MAX(salary) FROM employees GROUP BY department_id",
    "result": "context.Employees.GroupBy(row => new { row.DepartmentId }).Select(group => new { group.First().FirstName, group.First().LastName, group.First().Salary, group.Key.DepartmentId, MaxSalary = group.Select(row => row.Salary).Max() }).ToList();",
    "db_name": "hr_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: Kimberely, 1: Grant, 2: 7000, 3: 0, 4: 7000}, {0: Jennifer, 1: Whalen, 2: 4400, 3: 10, 4: 4400}, {0: Michael, 1: Hartstein, 2: 13000, 3: 20, 4: 13000}, {0: Den, 1: Raphaely, 2: 11000, 3: 30, 4: 11000}, {0: Susan, 1: Mavris, 2: 6500, 3: 40, 4: 6500}, {0: Adam, 1: Fripp, 2: 8200, 3: 50, 4: 8200}, {0: Alexander, 1: Hunold, 2: 9000, 3: 60, 4: 9000}, {0: Hermann, 1: Baer, 2: 10000, 3: 70, 4: 10000}, {0: John, 1: Russell, 2: 14000, 3: 80, 4: 14000}, {0: Steven, 1: King, 2: 24000, 3: 90, 4: 24000}, {0: Nancy, 1: Greenberg, 2: 12000, 3: 100, 4: 12000}, {0: Shelley, 1: Higgins, 2: 12000, 3: 110, 4: 12000}]\", linq_results: \"[{0: Kimberely, 1: Grant, 2: 7000, 3: 0, 4: 7000}, {0: Jennifer, 1: Whalen, 2: 4400, 3: 10, 4: 4400}, {0: Michael, 1: Hartstein, 2: 13000, 3: 20, 4: 13000}, {0: Den, 1: Raphaely, 2: 11000, 3: 30, 4: 11000}, {0: Susan, 1: Mavris, 2: 6500, 3: 40, 4: 6500}, {0: Matthew, 1: Weiss, 2: 8000, 3: 50, 4: 8200}, {0: Alexander, 1: Hunold, 2: 9000, 3: 60, 4: 9000}, {0: Hermann, 1: Baer, 2: 10000, 3: 70, 4: 10000}, {0: John, 1: Russell, 2: 14000, 3: 80, 4: 14000}, {0: Steven, 1: King, 2: 24000, 3: 90, 4: 24000}, {0: Nancy, 1: Greenberg, 2: 12000, 3: 100, 4: 12000}, {0: Shelley, 1: Higgins, 2: 12000, 3: 110, 4: 12000}]\" }"
  },
  {
    "query": "SELECT T1.first_name , T1.last_name , T2.department_name , T3.city , T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id",
    "result": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Locations, joined => joined.T2.LocationId, T3 => T3.LocationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.FirstName, row.T1.LastName, row.T2.DepartmentName, row.T3.City, row.T3.StateProvince }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.first_name , T1.last_name , T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T1.first_name LIKE '%z%'",
    "result": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Locations, joined => joined.T2.LocationId, T3 => T3.LocationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => EF.Functions.Like(row.T1.FirstName, \"%z%\")).Select(row => new { row.T1.FirstName, row.T1.LastName, row.T3.City }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.department_name , T2.city , T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id = T1.location_id",
    "result": "context.Departments.Join(context.Locations, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.DepartmentName, row.T2.City, row.T2.StateProvince }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.first_name , T1.last_name , T1.employee_id , T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id",
    "result": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Locations, joined => joined.T2.LocationId, T3 => T3.LocationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Countries, joined => joined.T3.CountryId, T4 => T4.CountryId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Select(row => new { row.T1.FirstName, row.T1.LastName, row.T1.EmployeeId, row.T4.CountryName }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT department_name , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name",
    "result": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DepartmentName }).Select(group => new { group.Key.DepartmentName, Count = group.Count() }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT first_name , last_name , salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T3.city = 'London'",
    "result": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Locations, joined => joined.T2.LocationId, T3 => T3.LocationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.City == \"London\").Select(row => new { row.T1.FirstName, row.T1.LastName, row.T1.Salary }).ToList();",
    "db_name": "hr_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"wyoming\" ) AND state_name = \"wyoming\";",
    "result": "context.Cities.Where(row => row.Population == context.Cities.Where(row => row.StateName == \"wyoming\").Select(row => row.Population).Max() && row.StateName == \"wyoming\").Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city ) );",
    "result": "context.Rivers.Where(row => context.Cities.Where(row => row.Population == context.Cities.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT area FROM state WHERE state_name = \"new mexico\";",
    "result": "context.States.Where(row => row.StateName == \"new mexico\").Select(row => new { row.Area }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT population FROM state WHERE state_name = \"california\";",
    "result": "context.States.Where(row => row.StateName == \"california\").Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM state WHERE population = ( SELECT MIN ( population ) FROM state );",
    "result": "context.States.Where(row => row.Population == context.States.Select(row => row.Population).Min()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_name FROM city WHERE state_name = \"texas\";",
    "result": "context.Cities.Where(row => row.StateName == \"texas\").Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT area FROM state WHERE capital = \"albany\";",
    "result": "context.States.Where(row => row.Capital == \"albany\").Select(row => new { row.Area }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lake_name FROM lake WHERE state_name = \"california\";",
    "result": "context.Lakes.Where(row => row.StateName == \"california\").Select(row => new { row.LakeName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lake_name FROM lake WHERE area > 750 AND state_name = \"michigan\";",
    "result": "context.Lakes.Where(row => row.Area > 750 && row.StateName == \"michigan\").Select(row => new { row.LakeName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM state;",
    "result": "context.States.Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT traverse FROM river WHERE river_name = \"ohio\";",
    "result": "context.Rivers.Where(row => row.RiverName == \"ohio\").Select(row => new { row.Traverse }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state );",
    "result": "context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lowest_elevation FROM highlow WHERE state_name = \"pennsylvania\";",
    "result": "context.Highlows.Where(row => row.StateName == \"pennsylvania\").Select(row => new { row.LowestElevation }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT highest_point , state_name FROM highlow WHERE lowest_elevation = 0;",
    "result": "context.Highlows.Where(row => row.LowestElevation == \"0\").Select(row => new { row.HighestPoint, row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LENGTH FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );",
    "result": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => new { row.Length }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = \"texas\" ) AND traverse = \"texas\";",
    "result": "context.Rivers.Where(row => row.Length == context.Rivers.Where(row => row.Traverse == \"texas\").Select(row => row.Length).Max() && row.Traverse == \"texas\").Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse = \"idaho\";",
    "result": "context.Rivers.Where(row => row.Traverse == \"idaho\").Select(row => row.RiverName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT border FROM border_info WHERE state_name = \"kentucky\";",
    "result": "context.BorderInfo.Where(row => row.StateName == \"kentucky\").Select(row => new { row.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:04.00"
  },
  {
    "query": "SELECT river_name FROM river WHERE traverse = \"illinois\";",
    "result": "context.Rivers.Where(row => row.Traverse == \"illinois\").Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM city WHERE city_name = \"springfield\";",
    "result": "context.Cities.Where(row => row.CityName == \"springfield\").Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT population FROM state WHERE area = ( SELECT MAX ( area ) FROM state );",
    "result": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT population FROM city WHERE city_name = \"boulder\";",
    "result": "context.Cities.Where(row => row.CityName == \"boulder\").Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city WHERE state_name = \"alaska\" ) AND state_name = \"alaska\";",
    "result": "context.Cities.Where(row => row.Population == context.Cities.Where(row => row.StateName == \"alaska\").Select(row => row.Population).Min() && row.StateName == \"alaska\").Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );",
    "result": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => new { row.Traverse }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT density FROM state WHERE area = ( SELECT MIN ( area ) FROM state );",
    "result": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => new { row.Density }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM highlow WHERE highest_elevation > ( SELECT highest_elevation FROM highlow WHERE state_name = \"colorado\" );",
    "result": "context.Highlows.Where(row => row.HighestElevation > context.Highlows.Where(row => row.StateName == \"colorado\").Select(row => row.HighestElevation).First()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:05.97"
  },
  {
    "query": "SELECT highest_elevation FROM highlow WHERE state_name = \"delaware\";",
    "result": "context.Highlows.Where(row => row.StateName == \"delaware\").Select(row => new { row.HighestElevation }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );",
    "result": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );",
    "result": "context.Cities.Where(row => row.Population == context.Cities.Select(row => row.Population).Max()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "result": "context.Cities.Where(row => row.Population == context.Cities.Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.StateName)).Select(row => row.Population).Min() && context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state );",
    "result": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"mississippi\" );",
    "result": "context.Highlows.Where(row => context.BorderInfo.Where(row => row.StateName == \"mississippi\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,50): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:05.03"
  },
  {
    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;",
    "result": "context.Highlows.Where(row => context.BorderInfo.Where(row => row.StateName == \"colorado\").Select(row => row.Border).Contains(row.StateName)).OrderByDescending(row => row.HighestElevation).Select(row => new { row.HighestPoint }).Take(1).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,50): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:03.29"
  },
  {
    "query": "SELECT state_name FROM state WHERE density = ( SELECT MIN ( density ) FROM state );",
    "result": "context.States.Where(row => row.Density == context.States.Select(row => row.Density).Min()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT highest_point FROM highlow WHERE state_name = \"texas\";",
    "result": "context.Highlows.Where(row => row.StateName == \"texas\").Select(row => new { row.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );",
    "result": "context.States.Where(row => !context.BorderInfo.Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,49): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:03.00"
  },
  {
    "query": "SELECT area FROM state WHERE density = ( SELECT MIN ( density ) FROM state );",
    "result": "context.States.Where(row => row.Density == context.States.Select(row => row.Density).Min()).Select(row => new { row.Area }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( state_name ) FROM highlow WHERE lowest_elevation < ( SELECT lowest_elevation FROM highlow WHERE state_name = \"alabama\" );",
    "result": "context.Highlows.Where(row => row.LowestElevation < context.Highlows.Where(row => row.StateName == \"alabama\").Select(row => row.LowestElevation).First()).Select(row => row.StateName).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:03.09"
  },
  {
    "query": "SELECT highest_elevation FROM highlow WHERE highest_point = \"guadalupe peak\";",
    "result": "context.Highlows.Where(row => row.HighestPoint == \"guadalupe peak\").Select(row => new { row.HighestElevation }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT MAX ( highest_elevation ) FROM highlow;",
    "result": "context.Highlows.Select(row => row.HighestElevation).Max();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LENGTH FROM river WHERE river_name = \"rio grande\";",
    "result": "context.Rivers.Where(row => row.RiverName == \"rio grande\").Select(row => new { row.Length }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LENGTH FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = \"texas\" ) AND traverse = \"texas\";",
    "result": "context.Rivers.Where(row => row.Length == context.Rivers.Where(row => row.Traverse == \"texas\").Select(row => row.Length).Max() && row.Traverse == \"texas\").Select(row => new { row.Length }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( capital ) FROM state WHERE state_name = \"rhode island\";",
    "result": "context.States.Where(row => row.StateName == \"rhode island\").Select(row => row.Capital).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( city_name ) FROM city;",
    "result": "context.Cities.Select(row => row.CityName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( city_name ) FROM city WHERE population > 150000;",
    "result": "context.Cities.Where(row => row.Population > 150000).Select(row => row.CityName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT population FROM city WHERE population = ( SELECT MAX ( population ) FROM city );",
    "result": "context.Cities.Where(row => row.Population == context.Cities.Select(row => row.Population).Max()).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( river_name ) FROM river WHERE river_name = \"colorado\";",
    "result": "context.Rivers.Where(row => row.RiverName == \"colorado\").Select(row => row.RiverName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT population FROM city WHERE city_name = \"seattle\" AND state_name = \"washington\";",
    "result": "context.Cities.Where(row => row.CityName == \"seattle\" && row.StateName == \"washington\").Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT population FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"alaska\" ) AND state_name = \"alaska\";",
    "result": "context.Cities.Where(row => row.Population == context.Cities.Where(row => row.StateName == \"alaska\").Select(row => row.Population).Max() && row.StateName == \"alaska\").Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE state_name = \"texas\" );",
    "result": "context.Cities.Where(row => row.CityName == context.States.Where(row => row.StateName == \"texas\").Select(row => row.Capital).First()).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT SUM ( population ) FROM state;",
    "result": "context.States.Select(row => row.Population).Sum();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( state_name ) FROM state;",
    "result": "context.States.Select(row => row.StateName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name = \"kentucky\";",
    "result": "context.BorderInfo.Where(row => row.StateName == \"kentucky\").Select(row => row.Border).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:03.45"
  },
  {
    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );",
    "result": "context.BorderInfo.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.StateName)).Select(row => row.Border).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:03.29"
  },
  {
    "query": "SELECT COUNT ( DISTINCT state_name ) FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );",
    "result": "context.States.Where(row => !context.Rivers.Select(row => row.Traverse).Contains(row.StateName)).Select(row => row.StateName).Distinct().Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( state_name ) FROM highlow WHERE highest_elevation > ( SELECT highest_elevation FROM highlow WHERE state_name = ( SELECT state_name FROM state WHERE capital = ( SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city ) ) ) );",
    "result": "context.Highlows.Where(row => row.HighestElevation > context.Highlows.Where(row => row.StateName == context.States.Where(row => row.Capital == context.Cities.Where(row => row.Population == context.Cities.Select(row => row.Population).Max()).Select(row => row.CityName).First()).Select(row => row.StateName).First()).Select(row => row.HighestElevation).First()).Select(row => row.StateName).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:03.98"
  },
  {
    "query": "SELECT river_name FROM river WHERE LENGTH > 750 AND traverse = \"illinois\";",
    "result": "context.Rivers.Where(row => row.Length > 750 && row.Traverse == \"illinois\").Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = \"texas\" );",
    "result": "context.Rivers.Where(row => row.Length == context.Rivers.Where(row => row.Traverse == \"texas\").Select(row => row.Length).Max()).Select(row => new { row.Traverse }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT capital FROM state WHERE state_name = \"texas\";",
    "result": "context.States.Where(row => row.StateName == \"texas\").Select(row => new { row.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border WHERE t1.state_name = \"texas\";",
    "result": "context.States.Join(context.BorderInfo, t2 => t2.StateName, t1 => t1.Border, (t2, t1) => new { t2, t1 }).Where(row => row.t1.StateName == \"texas\").Select(row => new { row.t2.Capital }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,40): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.76"
  },
  {
    "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );",
    "result": "context.Cities.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow ) );",
    "result": "context.Cities.Where(row => context.Highlows.Where(row => row.HighestElevation == context.Highlows.Select(row => row.HighestElevation).Max()).Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT highest_point FROM highlow;",
    "result": "context.Highlows.Select(row => new { row.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_name FROM city WHERE population > 150000 AND state_name = \"kansas\";",
    "result": "context.Cities.Where(row => row.Population > 150000 && row.StateName == \"kansas\").Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_name FROM city WHERE population > 150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH > 750 AND river_name = \"mississippi\" );",
    "result": "context.Cities.Where(row => row.Population > 150000 && context.Rivers.Where(row => row.Length > 750 && row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_name FROM city WHERE population > 150000;",
    "result": "context.Cities.Where(row => row.Population > 150000).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT density FROM state;",
    "result": "context.States.Select(row => new { row.Density }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );",
    "result": "context.States.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.population FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border WHERE t1.state_name = \"texas\";",
    "result": "context.States.Join(context.BorderInfo, t2 => t2.StateName, t1 => t1.Border, (t2, t1) => new { t2, t1 }).Where(row => row.t1.StateName == \"texas\").Select(row => new { row.t2.Population }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,40): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.81"
  },
  {
    "query": "SELECT population FROM city WHERE population > 150000 AND state_name = \"wisconsin\";",
    "result": "context.Cities.Where(row => row.Population > 150000 && row.StateName == \"wisconsin\").Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );",
    "result": "context.Cities.Where(row => row.Population == context.Cities.Select(row => row.Population).Max()).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );",
    "result": "context.Cities.Where(row => row.Population == context.States.Join(context.Cities, t2 => t2.Capital, t1 => t1.CityName, (t2, t1) => new { t2, t1 }).Select(row => row.t1.Population).Max()).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.state_name = t1.state_name WHERE t1.city_name = \"durham\";",
    "result": "context.States.Join(context.Cities, t2 => t2.StateName, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t1.CityName == \"durham\").Select(row => new { row.t2.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT capital FROM state WHERE area = ( SELECT MIN ( area ) FROM state );",
    "result": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => new { row.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT capital FROM state WHERE density = ( SELECT MAX ( density ) FROM state );",
    "result": "context.States.Where(row => row.Density == context.States.Select(row => row.Density).Max()).Select(row => new { row.Capital }).Distinct().ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT capital FROM state WHERE population = ( SELECT MAX ( population ) FROM state );",
    "result": "context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => new { row.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT capital FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) );",
    "result": "context.States.Where(row => context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT SUM ( area ) FROM state;",
    "result": "context.States.Select(row => row.Area).Sum();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT density FROM state WHERE state_name = \"wyoming\";",
    "result": "context.States.Where(row => row.StateName == \"wyoming\").Select(row => new { row.Density }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude = ( SELECT MAX ( mountain_altitude ) FROM mountain );",
    "result": "context.Mountains.Where(row => row.MountainAltitude == context.Mountains.Select(row => row.MountainAltitude).Max()).Select(row => new { row.MountainName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital = \"des moines\" );",
    "result": "context.Highlows.Where(row => context.States.Where(row => row.Capital == \"des moines\").Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT highest_point FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );",
    "result": "context.Highlows.Where(row => row.HighestElevation == context.Highlows.Select(row => row.HighestElevation).Max()).Select(row => new { row.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density = ( SELECT MIN ( density ) FROM state ) );",
    "result": "context.Highlows.Where(row => context.States.Where(row => row.Density == context.States.Select(row => row.Density).Min()).Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) AND area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) ) ) ORDER BY population DESC LIMIT 1;",
    "result": "context.Cities.Where(row => context.States.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName) && row.Area == context.States.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => row.Area).Min()).Select(row => row.StateName).Contains(row.StateName)).OrderByDescending(row => row.Population).Select(row => new { row.CityName }).Take(1).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );",
    "result": "context.Cities.Where(row => row.Population == context.Cities.Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).Contains(row.StateName)).Select(row => row.Population).Max() && context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" );",
    "result": "context.States.Where(row => row.Area == context.States.Where(row => context.BorderInfo.Where(row => row.StateName == \"california\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.Area).Max() && context.BorderInfo.Where(row => row.StateName == \"california\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,235): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:03.43"
  },
  {
    "query": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "result": "context.Rivers.Where(row => row.Length == context.Rivers.Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => row.Length).Max() && context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name = \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name = \"tennessee\" );",
    "result": "context.Rivers.Where(row => row.Length == context.Rivers.Where(row => context.BorderInfo.Where(row => row.StateName == \"tennessee\").Select(row => row.Border).Contains(row.Traverse)).Select(row => row.Length).Max() && context.BorderInfo.Where(row => row.StateName == \"tennessee\").Select(row => row.Border).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,237): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:02.48"
  },
  {
    "query": "SELECT river_name FROM river WHERE traverse = ( SELECT state_name FROM city WHERE population > 150000 GROUP BY state_name ORDER BY COUNT ( city_name ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1;",
    "result": "context.Rivers.Where(row => row.Traverse == context.Cities.Where(row => row.Population > 150000).GroupBy(row => new { row.StateName }).OrderByDescending(group => group.Count(row => row.CityName != null)).Select(group => group.Key.StateName).Take(1).First()).OrderByDescending(row => row.Length).Select(row => new { row.RiverName }).Take(1).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lowest_point FROM highlow WHERE state_name = \"iowa\";",
    "result": "context.Highlows.Where(row => row.StateName == \"iowa\").Select(row => new { row.LowestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lowest_point FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow );",
    "result": "context.Highlows.Where(row => row.LowestElevation == context.Highlows.Select(row => row.LowestElevation).Min()).Select(row => new { row.LowestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;",
    "result": "context.Highlows.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).OrderBy(row => row.LowestElevation).Select(row => new { row.LowestPoint }).Take(1).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM state WHERE density = ( SELECT MAX ( density ) FROM state );",
    "result": "context.States.Where(row => row.Density == context.States.Select(row => row.Density).Max()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );",
    "result": "context.States.Where(row => row.Population == context.States.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => row.Population).Max() && context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT density FROM state WHERE area = ( SELECT MAX ( area ) FROM state );",
    "result": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => new { row.Density }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT population FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "result": "context.Cities.Where(row => row.Population == context.Cities.Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.StateName)).Select(row => row.Population).Max() && context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT population FROM state WHERE area = ( SELECT MIN ( area ) FROM state );",
    "result": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT population FROM state WHERE density = ( SELECT MAX ( density ) FROM state );",
    "result": "context.States.Where(row => row.Density == context.States.Select(row => row.Density).Max()).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city );",
    "result": "context.Cities.Where(row => row.Population == context.Cities.Select(row => row.Population).Min()).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" );",
    "result": "context.States.Where(row => row.Area == context.States.Where(row => context.BorderInfo.Where(row => row.StateName == \"texas\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.Area).Min() && context.BorderInfo.Where(row => row.StateName == \"texas\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,230): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.43"
  },
  {
    "query": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );",
    "result": "context.States.Where(row => row.Area == context.States.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => row.Area).Min() && context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state );",
    "result": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT SUM ( LENGTH ) FROM river;",
    "result": "context.Rivers.Select(row => row.Length).Sum();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name = \"alabama\" );",
    "result": "context.Rivers.Where(row => context.BorderInfo.Where(row => row.StateName == \"alabama\").Select(row => row.Border).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,48): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46"
  },
  {
    "query": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
    "result": "context.States.Where(row => context.BorderInfo.Where(row => row.StateName == \"oklahoma\").Select(row => row.Border).Contains(row.StateName)).OrderByDescending(row => row.Population).Select(row => new { row.StateName }).Take(1).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,48): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.44"
  },
  {
    "query": "SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"colorado\" ) );",
    "result": "context.Highlows.Where(row => row.HighestElevation == context.Highlows.Where(row => context.Rivers.Where(row => row.RiverName == \"colorado\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => row.HighestElevation).Max()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM city WHERE population = ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );",
    "result": "context.Cities.Where(row => row.Population == context.States.Join(context.Cities, t2 => t2.Capital, t1 => t1.CityName, (t2, t1) => new { t2, t1 }).Select(row => row.t1.Population).Max()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT traverse FROM river WHERE LENGTH = ( SELECT MAX ( DISTINCT LENGTH ) FROM river );",
    "result": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Distinct().Max()).Select(row => new { row.Traverse }).Distinct().ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) LIMIT 1;",
    "result": "context.Cities.GroupBy(row => new { row.StateName }).OrderBy(group => group.Sum(row => row.Population)).Select(group => new { group.Key.StateName }).Take(1).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"colorado\" );",
    "result": "context.BorderInfo.Where(row => context.BorderInfo.Where(row => row.StateName == \"colorado\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,52): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.76"
  },
  {
    "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );",
    "result": "context.BorderInfo.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.64"
  },
  {
    "query": "SELECT state_name FROM border_info WHERE border = \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH > 750 );",
    "result": "context.BorderInfo.Where(row => row.Border == \"texas\" && context.Rivers.Where(row => row.Length > 750).Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.55"
  },
  {
    "query": "SELECT border FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );",
    "result": "context.BorderInfo.Where(row => row.StateName == context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).First()).Select(row => new { row.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.40"
  },
  {
    "query": "SELECT border FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );",
    "result": "context.BorderInfo.Where(row => row.StateName == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).First()).Select(row => new { row.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.68"
  },
  {
    "query": "SELECT traverse FROM river WHERE LENGTH > 750;",
    "result": "context.Rivers.Where(row => row.Length > 750).Select(row => new { row.Traverse }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM mountain;",
    "result": "context.Mountains.Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM mountain WHERE mountain_altitude = ( SELECT MAX ( mountain_altitude ) FROM mountain );",
    "result": "context.Mountains.Where(row => row.MountainAltitude == context.Mountains.Select(row => row.MountainAltitude).Max()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city );",
    "result": "context.Cities.Where(row => row.Population == context.Cities.Select(row => row.Population).Min()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT density FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) );",
    "result": "context.States.Where(row => context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.Density }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude = ( SELECT MAX ( mountain_altitude ) FROM mountain WHERE state_name != \"alaska\" );",
    "result": "context.Mountains.Where(row => row.MountainAltitude == context.Mountains.Where(row => row.StateName != \"alaska\").Select(row => row.MountainAltitude).Max()).Select(row => new { row.MountainName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse = \"tennessee\" );",
    "result": "context.Rivers.Where(row => !context.Rivers.Where(row => row.Traverse == \"tennessee\").Select(row => row.RiverName).Contains(row.RiverName)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT river_name FROM river WHERE country_name != \"usa\";",
    "result": "context.Rivers.Where(row => row.CountryName != \"usa\").Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital = \"atlanta\" ) );",
    "result": "context.Rivers.Where(row => context.BorderInfo.Where(row => context.States.Where(row => row.Capital == \"atlanta\").Select(row => row.StateName).Contains(row.StateName)).Select(row => row.Border).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,48): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38"
  },
  {
    "query": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );",
    "result": "context.Cities.Where(row => row.Population == context.States.Join(context.Cities, t2 => t2.Capital, t1 => t1.CityName, (t2, t1) => new { t2, t1 }).Select(row => row.t1.Population).Min()).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );",
    "result": "context.Highlows.Where(row => row.HighestElevation == context.Highlows.Select(row => row.HighestElevation).Max()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow );",
    "result": "context.Highlows.Where(row => row.LowestElevation == context.Highlows.Select(row => row.LowestElevation).Min()).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"idaho\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"idaho\" );",
    "result": "context.Highlows.Where(row => row.LowestElevation == context.Highlows.Where(row => context.BorderInfo.Where(row => row.StateName == \"idaho\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.LowestElevation).Min() && context.BorderInfo.Where(row => row.StateName == \"idaho\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,256): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.68"
  },
  {
    "query": "SELECT state_name FROM city GROUP BY state_name ORDER BY AVG ( population ) LIMIT 1;",
    "result": "context.Cities.GroupBy(row => new { row.StateName }).OrderBy(group => group.Average(row => row.Population)).Select(group => new { group.Key.StateName }).Take(1).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM mountain WHERE mountain_name = \"whitney\";",
    "result": "context.Mountains.Where(row => row.MountainName == \"whitney\").Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT traverse FROM river;",
    "result": "context.Rivers.Select(row => new { row.Traverse }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM city WHERE city_name = \"austin\" AND population > 150000;",
    "result": "context.Cities.Where(row => row.CityName == \"austin\" && row.Population > 150000).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" );",
    "result": "context.Cities.Where(row => row.Population == context.Cities.Where(row => context.BorderInfo.Where(row => row.StateName == \"california\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.Population).Max() && context.BorderInfo.Where(row => row.StateName == \"california\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,247): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.53"
  },
  {
    "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital = \"albany\" );",
    "result": "context.Rivers.Where(row => !context.States.Where(row => row.Capital == \"albany\").Select(row => row.StateName).Contains(row.Traverse)).Select(row => row.RiverName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river WHERE traverse = \"texas\" ) AND traverse = \"texas\";",
    "result": "context.Rivers.Where(row => row.Length == context.Rivers.Where(row => row.Traverse == \"texas\").Select(row => row.Length).Min() && row.Traverse == \"texas\").Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_name FROM city WHERE population > 150000 AND state_name = ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );",
    "result": "context.Cities.Where(row => row.Population > 150000 && row.StateName == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).First()).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE area = ( SELECT MAX ( t1.area ) FROM state AS t1 JOIN river AS t2 ON t1.state_name = t2.traverse WHERE t2.river_name = \"mississippi\" ) );",
    "result": "context.Cities.Where(row => row.CityName == context.States.Where(row => row.Area == context.States.Join(context.Rivers, t1 => t1.StateName, t2 => t2.Traverse, (t1, t2) => new { t1, t2 }).Where(row => row.t2.RiverName == \"mississippi\").Select(row => row.t1.Area).Max()).Select(row => row.Capital).First()).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river );",
    "result": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Min()).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" ) );",
    "result": "context.States.Where(row => context.BorderInfo.Where(row => context.BorderInfo.Where(row => row.StateName == \"texas\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.Capital }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,80): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.41"
  },
  {
    "query": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );",
    "result": "context.Cities.Where(row => row.Population == context.Cities.Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).Contains(row.StateName)).Select(row => row.Population).Min() && context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT population FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" );",
    "result": "context.States.Where(row => row.Area == context.States.Where(row => context.BorderInfo.Where(row => row.StateName == \"texas\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.Area).Max() && context.BorderInfo.Where(row => row.StateName == \"texas\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,230): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.41"
  },
  {
    "query": "SELECT state_name FROM state WHERE capital = \"salem\";",
    "result": "context.States.Where(row => row.Capital == \"salem\").Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );",
    "result": "context.Rivers.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) ) );",
    "result": "context.States.Where(row => row.Area == context.States.Where(row => context.BorderInfo.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.Border)).Select(row => row.StateName).Contains(row.StateName)).Select(row => row.Area).Max() && context.BorderInfo.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.Border)).Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,356): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.50"
  },
  {
    "query": "SELECT COUNT ( river_name ) FROM river;",
    "result": "context.Rivers.Select(row => row.RiverName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT capital FROM state;",
    "result": "context.States.Select(row => new { row.Capital }).Distinct().ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( state_name ) FROM city WHERE city_name = \"springfield\";",
    "result": "context.Cities.Where(row => row.CityName == \"springfield\").Select(row => row.StateName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MIN ( population ) FROM state ) );",
    "result": "context.BorderInfo.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Min()).Select(row => row.StateName).Contains(row.StateName)).Select(row => new { row.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34"
  },
  {
    "query": "SELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" );",
    "result": "context.Lakes.Where(row => context.BorderInfo.Where(row => row.StateName == \"texas\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.LakeName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,47): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.37"
  },
  {
    "query": "SELECT COUNT ( city_name ) FROM city WHERE population > 150000 AND state_name = \"texas\";",
    "result": "context.Cities.Where(row => row.Population > 150000 && row.StateName == \"texas\").Select(row => row.CityName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT highest_elevation FROM highlow;",
    "result": "context.Highlows.Select(row => new { row.HighestElevation }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( traverse ) FROM river WHERE river_name = \"missouri\";",
    "result": "context.Rivers.Where(row => row.RiverName == \"missouri\").Select(row => row.Traverse).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );",
    "result": "context.Rivers.Where(row => row.Length == context.Rivers.Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => row.Length).Max() && context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"florida\" ) );",
    "result": "context.BorderInfo.Where(row => context.BorderInfo.Where(row => context.BorderInfo.Where(row => row.StateName == \"florida\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,84): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    3 Error(s)\n\nTime Elapsed 00:00:01.47"
  },
  {
    "query": "SELECT COUNT ( DISTINCT state_name ) FROM border_info;",
    "result": "context.BorderInfo.Select(row => row.StateName).Distinct().Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46"
  },
  {
    "query": "SELECT MAX ( DISTINCT highest_elevation ) FROM highlow WHERE state_name = \"texas\";",
    "result": "context.Highlows.Where(row => row.StateName == \"texas\").Select(row => row.HighestElevation).Distinct().Max();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name = \"new mexico\" ) AND state_name = \"colorado\";",
    "result": "context.BorderInfo.Where(row => context.BorderInfo.Where(row => row.StateName == \"new mexico\").Select(row => row.Border).Contains(row.Border) && row.StateName == \"colorado\").Select(row => row.Border).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,52): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.35"
  },
  {
    "query": "SELECT COUNT ( city_name ) FROM city WHERE population > 150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"nebraska\" );",
    "result": "context.Cities.Where(row => row.Population > 150000 && context.BorderInfo.Where(row => row.StateName == \"nebraska\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.CityName).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,75): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.33"
  },
  {
    "query": "SELECT SUM ( t2.population ) FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border WHERE t1.state_name = \"texas\";",
    "result": "context.States.Join(context.BorderInfo, t2 => t2.StateName, t1 => t1.Border, (t2, t1) => new { t2, t1 }).Where(row => row.t1.StateName == \"texas\").Select(row => row.t2.Population).Sum();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,40): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.27"
  },
  {
    "query": "SELECT lake_name FROM lake WHERE area > 750;",
    "result": "context.Lakes.Where(row => row.Area > 750).Select(row => new { row.LakeName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lake_name FROM lake;",
    "result": "context.Lakes.Select(row => new { row.LakeName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( river_name ) FROM river WHERE LENGTH > 750 AND traverse = \"ohio\";",
    "result": "context.Rivers.Where(row => row.Length > 750 && row.Traverse == \"ohio\").Select(row => row.RiverName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT traverse FROM river WHERE LENGTH = ( SELECT MIN ( DISTINCT LENGTH ) FROM river );",
    "result": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Distinct().Min()).Select(row => new { row.Traverse }).Distinct().ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH > 750;",
    "result": "context.Rivers.Where(row => row.Length > 750).Select(row => row.Traverse).Distinct().Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT mountain_altitude FROM mountain WHERE mountain_name = \"mckinley\";",
    "result": "context.Mountains.Where(row => row.MountainName == \"mckinley\").Select(row => new { row.MountainAltitude }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT traverse FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river );",
    "result": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Min()).Select(row => new { row.Traverse }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name = t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MIN ( population ) FROM state ) );",
    "result": "context.States.Join(context.Highlows, t1 => t1.StateName, t2 => t2.StateName, (t1, t2) => new { t1, t2 }).Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Min()).Select(row => row.StateName).Contains(row.t1.StateName)).Select(row => new { row.t2.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow ) );",
    "result": "context.Rivers.Where(row => context.Highlows.Where(row => row.LowestElevation == context.Highlows.Select(row => row.LowestElevation).Min()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT mountain_name FROM mountain WHERE state_name = \"alaska\";",
    "result": "context.Mountains.Where(row => row.StateName == \"alaska\").Select(row => new { row.MountainName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( traverse ) FROM river WHERE LENGTH > 750;",
    "result": "context.Rivers.Where(row => row.Length > 750).Select(row => row.Traverse).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) ) ) AND state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) );",
    "result": "context.States.Where(row => row.Area == context.States.Where(row => context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => row.Traverse).Contains(row.StateName)).Select(row => row.Area).Min() && context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name = \"rio grande\" );",
    "result": "context.States.Where(row => row.Area == context.States.Where(row => context.Rivers.Where(row => row.RiverName == \"rio grande\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => row.Area).Max() && context.Rivers.Where(row => row.RiverName == \"rio grande\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name = \"colorado\" );",
    "result": "context.Rivers.Where(row => context.BorderInfo.Where(row => row.StateName == \"colorado\").Select(row => row.Border).Contains(row.Traverse)).Select(row => row.RiverName).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,48): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.48"
  },
  {
    "query": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );",
    "result": "context.States.Where(row => !context.Rivers.Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT capital FROM state WHERE area = ( SELECT MAX ( area ) FROM state );",
    "result": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => new { row.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( city_name ) FROM city WHERE state_name = \"texas\";",
    "result": "context.Cities.Where(row => row.StateName == \"texas\").Select(row => row.CityName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT area FROM state;",
    "result": "context.States.Select(row => new { row.Area }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH = ( SELECT MIN ( DISTINCT LENGTH ) FROM river );",
    "result": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Distinct().Min()).Select(row => row.Traverse).Distinct().Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) ) );",
    "result": "context.Rivers.Where(row => context.BorderInfo.Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.StateName)).Select(row => row.Border).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,48): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34"
  },
  {
    "query": "SELECT city_name FROM city WHERE population > 150000 AND state_name = ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "result": "context.Cities.Where(row => row.Population > 150000 && row.StateName == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).First()).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT area FROM state WHERE area = ( SELECT MIN ( area ) FROM state );",
    "result": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => new { row.Area }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) );",
    "result": "context.BorderInfo.Where(row => context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Max()).Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.56"
  },
  {
    "query": "SELECT density FROM state WHERE population = ( SELECT MIN ( population ) FROM state );",
    "result": "context.States.Where(row => row.Population == context.States.Select(row => row.Population).Min()).Select(row => new { row.Density }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );",
    "result": "context.BorderInfo.Where(row => context.Rivers.Where(row => row.RiverName == \"mississippi\").Select(row => row.Traverse).Contains(row.StateName)).Select(row => row.Border).Distinct().Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.47"
  },
  {
    "query": "SELECT t1.state_name FROM state AS t1 JOIN highlow AS t2 ON t1.capital = t2.highest_point;",
    "result": "context.States.Join(context.Highlows, t1 => t1.Capital, t2 => t2.HighestPoint, (t1, t2) => new { t1, t2 }).Select(row => new { row.t1.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );",
    "result": "context.Cities.Where(row => row.CityName == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.Capital).First()).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "result": "context.Cities.Where(row => row.CityName == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.Capital).First()).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name = t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "result": "context.States.Join(context.Highlows, t1 => t1.StateName, t2 => t2.StateName, (t1, t2) => new { t1, t2 }).Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.t1.StateName)).Select(row => new { row.t2.LowestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border = t1.state_name WHERE t2.state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );",
    "result": "context.BorderInfo.Join(context.BorderInfo, t2 => t2.Border, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).Contains(row.t2.StateName)).Select(row => new { row.t1.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,44): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.46"
  },
  {
    "query": "SELECT MAX ( area ) FROM state;",
    "result": "context.States.Select(row => row.Area).Max();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name WHERE t1.population <= 150000;",
    "result": "context.States.Join(context.Cities, t2 => t2.Capital, t1 => t1.CityName, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Population <= 150000).Select(row => new { row.t2.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city_name FROM city;",
    "result": "context.Cities.Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name = t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "result": "context.States.Join(context.Highlows, t1 => t1.StateName, t2 => t2.StateName, (t1, t2) => new { t1, t2 }).Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.t1.StateName)).Select(row => new { row.t2.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT country_name FROM state WHERE state_name = \"massachusetts\";",
    "result": "context.States.Where(row => row.StateName == \"massachusetts\").Select(row => new { row.CountryName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) DESC LIMIT 1;",
    "result": "context.Cities.GroupBy(row => new { row.StateName }).OrderByDescending(group => group.Sum(row => row.Population)).Select(group => new { group.Key.StateName }).Take(1).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT river_name FROM river;",
    "result": "context.Rivers.Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( city_name ) FROM city WHERE city_name = \"austin\";",
    "result": "context.Cities.Where(row => row.CityName == \"austin\").Select(row => row.CityName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT population FROM state WHERE population = ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"wyoming\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"wyoming\" );",
    "result": "context.States.Where(row => row.Population == context.States.Where(row => context.BorderInfo.Where(row => row.StateName == \"wyoming\").Select(row => row.Border).Contains(row.StateName)).Select(row => row.Population).Max() && context.BorderInfo.Where(row => row.StateName == \"wyoming\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.Population }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,244): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.52"
  },
  {
    "query": "SELECT LENGTH FROM river WHERE river_name = \"colorado\" AND traverse = \"texas\";",
    "result": "context.Rivers.Where(row => row.RiverName == \"colorado\" && row.Traverse == \"texas\").Select(row => new { row.Length }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT density FROM state WHERE capital = \"austin\";",
    "result": "context.States.Where(row => row.Capital == \"austin\").Select(row => new { row.Density }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LENGTH FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river );",
    "result": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Min()).Select(row => new { row.Length }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT lowest_elevation FROM highlow WHERE lowest_point = \"death valley\";",
    "result": "context.Highlows.Where(row => row.LowestPoint == \"death valley\").Select(row => new { row.LowestElevation }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT AVG ( population ) FROM state;",
    "result": "context.States.Select(row => row.Population).Average();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "result": "context.Rivers.Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border = t1.state_name JOIN border_info AS t3 ON t3.border = t2.state_name JOIN border_info AS t4 ON t4.border = t3.state_name WHERE t4.state_name = \"texas\";",
    "result": "context.BorderInfo.Join(context.BorderInfo, t2 => t2.Border, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Join(context.BorderInfo, joined => joined.t2.StateName, t3 => t3.Border, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.BorderInfo, joined => joined.t3.StateName, t4 => t4.Border, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t4.StateName == \"texas\").Select(row => new { row.t1.Border }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,257): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    4 Error(s)\n\nTime Elapsed 00:00:01.47"
  },
  {
    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE capital = \"boston\" );",
    "result": "context.BorderInfo.Where(row => row.StateName == context.States.Where(row => row.Capital == \"boston\").Select(row => row.StateName).First()).Select(row => row.Border).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.48"
  },
  {
    "query": "SELECT city_name FROM city WHERE population > 150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH > 750 AND traverse = \"virginia\" ) );",
    "result": "context.Cities.Where(row => row.Population > 150000 && context.Rivers.Where(row => context.Rivers.Where(row => row.Length > 750 && row.Traverse == \"virginia\").Select(row => row.RiverName).Contains(row.RiverName)).Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name = \"texas\" );",
    "result": "context.States.Where(row => !context.BorderInfo.Where(row => row.StateName == \"texas\").Select(row => row.Border).Contains(row.StateName)).Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,49): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.59"
  },
  {
    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );",
    "result": "context.BorderInfo.Where(row => row.StateName == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).First()).Select(row => row.Border).Count();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49"
  },
  {
    "query": "SELECT state_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"montana\" ) AND state_name = \"montana\";",
    "result": "context.Cities.Where(row => row.Population == context.Cities.Where(row => row.StateName == \"montana\").Select(row => row.Population).Max() && row.StateName == \"montana\").Select(row => new { row.StateName }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t2.lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow ) ;",
    "result": "context.Highlows.Join(context.States, t2 => t2.StateName, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t2.LowestElevation == context.Highlows.Select(row => row.LowestElevation).Min()).Select(row => new { row.t1.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t1.city_name FROM city AS t1 JOIN river AS t2 ON t2.traverse = t1.state_name WHERE t1.population = ( SELECT MAX ( t1.population ) FROM river AS t2 JOIN city AS t1 ON t2.traverse = t1.state_name );",
    "result": "context.Cities.Join(context.Rivers, t1 => t1.StateName, t2 => t2.Traverse, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Population == context.Rivers.Join(context.Cities, t2 => t2.Traverse, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Select(row => row.t1.Population).Max()).Select(row => new { row.t1.CityName }).Distinct().ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name = t2.traverse WHERE t1.state_name = ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );",
    "result": "context.Rivers.Join(context.States, t2 => t2.Traverse, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t1.StateName == context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).First()).Select(row => row.t2.RiverName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.state_name FROM highlow AS t3 JOIN border_info AS t1 ON t3.state_name = t1.border JOIN state AS t2 ON t2.state_name = t1.border WHERE t3.lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow ) ORDER BY t2.area DESC LIMIT 1;",
    "result": "context.Highlows.Join(context.BorderInfo, t3 => t3.StateName, t1 => t1.Border, (t3, t1) => new { t3, t1 }).Join(context.States, joined => joined.t1.Border, t2 => t2.StateName, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t3.LowestElevation == context.Highlows.Select(row => row.LowestElevation).Min()).OrderByDescending(row => row.t2.Area).Select(row => new { row.t1.StateName }).Take(1).ToList();",
    "db_name": "geo",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS1061: 'GeoContext' does not contain a definition for 'BorderInfo' and no accessible extension method 'BorderInfo' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.44"
  },
  {
    "query": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t2.highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );",
    "result": "context.Highlows.Join(context.States, t2 => t2.StateName, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t2.HighestElevation == context.Highlows.Select(row => row.HighestElevation).Max()).Select(row => new { row.t1.Capital }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t1.area = ( SELECT MIN ( area ) FROM state );",
    "result": "context.Highlows.Join(context.States, t2 => t2.StateName, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Area == context.States.Select(row => row.Area).Min()).Select(row => new { row.t2.HighestPoint }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse = t2.state_name WHERE t2.highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );",
    "result": "context.Highlows.Join(context.Rivers, t2 => t2.StateName, t1 => t1.Traverse, (t2, t1) => new { t2, t1 }).Where(row => row.t2.HighestElevation == context.Highlows.Select(row => row.HighestElevation).Max()).Select(row => row.t1.RiverName).Count();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t1.area = ( SELECT MAX ( area ) FROM state );",
    "result": "context.Highlows.Join(context.States, t2 => t2.StateName, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Area == context.States.Select(row => row.Area).Max()).Select(row => new { row.t2.HighestElevation }).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.river_name FROM highlow AS t2 JOIN river AS t1 ON t1.traverse = t2.state_name WHERE t2.highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow ) ORDER BY t1.length DESC LIMIT 1;",
    "result": "context.Highlows.Join(context.Rivers, t2 => t2.StateName, t1 => t1.Traverse, (t2, t1) => new { t2, t1 }).Where(row => row.t2.HighestElevation == context.Highlows.Select(row => row.HighestElevation).Max()).OrderByDescending(row => row.t1.Length).Select(row => new { row.t1.RiverName }).Take(1).ToList();",
    "db_name": "geo",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
    "result": "context.Movies.Where(row => row.Director == \"Steven Spielberg\").Select(row => new { row.Title }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR > 2000",
    "result": "context.Movies.Where(row => row.Director == \"James Cameron\" && row.Year > 2000).Select(row => new { row.Title }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Movie WHERE YEAR < 2000",
    "result": "context.Movies.Where(row => row.Year < 2000).Count();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT director FROM Movie WHERE title = 'Avatar'",
    "result": "context.Movies.Where(row => row.Title == \"Avatar\").Select(row => new { row.Director }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Reviewer",
    "result": "context.Reviewers.Count();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"",
    "result": "context.Reviewers.Where(row => EF.Functions.Like(row.Name, \"%Mike%\")).Select(row => new { row.RId }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT rID FROM Reviewer WHERE name = \"Daniel Lewis\"",
    "result": "context.Reviewers.Where(row => row.Name == \"Daniel Lewis\").Select(row => new { row.RId }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Rating WHERE stars > 3",
    "result": "context.Ratings.Where(row => row.Stars > 3).Count();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(stars) , min(stars) FROM Rating",
    "result": "context.Ratings.GroupBy(row => 1).Select(group => new { MaxStars = group.Select(row => row.Stars).Max(), MinStars = group.Select(row => row.Stars).Min() }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4 ORDER BY T1.year",
    "result": "context.Movies.Join(context.Ratings, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Stars >= 4).OrderBy(row => row.T1.Year).Select(row => new { row.T1.Year }).Distinct().ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.director , T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 5",
    "result": "context.Movies.Join(context.Ratings, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Stars == 5).Select(row => new { row.T1.Director, row.T1.Title }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name",
    "result": "context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { group.Key.Name, AverageStars = group.Select(row => row.T1.Stars).Average() }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)",
    "result": "context.Movies.Where(row => !context.Ratings.Select(row => row.MId).Contains(row.MId)).Select(row => new { row.Title }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE ratingDate = \"null\"",
    "result": "context.Reviewers.Join(context.Ratings, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.RatingDate == \"null\").Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "movie_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,121): error CS0019: Operator '==' cannot be applied to operands of type 'DateOnly?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:04.09"
  },
  {
    "query": "SELECT avg(T1.stars) , T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT min(YEAR) FROM Movie)",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == context.Movies.Select(row => row.Year).Min()).Select(row => new { AverageStars = row.Select(row => row.T1.Stars).Average(), row.T2.Title }).ToList();",
    "db_name": "movie_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,218): error CS1061: '<anonymous type: Rating T1, Movie T2>' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type '<anonymous type: Rating T1, Movie T2>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:03.46"
  },
  {
    "query": "SELECT title FROM Movie WHERE YEAR = (SELECT max(YEAR) FROM Movie)",
    "result": "context.Movies.Where(row => row.Year == context.Movies.Select(row => row.Year).Max()).Select(row => new { row.Title }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(T1.stars) , T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT max(YEAR) FROM Movie)",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == context.Movies.Select(row => row.Year).Max()).Select(row => new { MaxStars = row.Select(row => row.T1.Stars).Max(), row.T2.Year }).ToList();",
    "db_name": "movie_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,214): error CS1061: '<anonymous type: Rating T1, Movie T2>' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type '<anonymous type: Rating T1, Movie T2>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.92"
  },
  {
    "query": "SELECT title FROM Movie WHERE YEAR > (SELECT max(YEAR) FROM Movie WHERE director = \"Steven Spielberg\")",
    "result": "context.Movies.Where(row => row.Year > context.Movies.Where(row => row.Director == \"Steven Spielberg\").Select(row => row.Year).Max()).Select(row => new { row.Title }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.title , T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars > (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = \"James Cameron\")",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars > context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Director == \"James Cameron\").Select(row => row.T1.Stars).Average()).Select(row => new { row.T2.Title, row.T2.Director }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.name , T2.title , T1.stars , T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID ORDER BY T3.name , T2.title , T1.stars",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Join(context.Reviewers, joined => joined.T1.RId, T3 => T3.RId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T3.Name).ThenBy(row => row.T2.Title).ThenBy(row => row.T1.Stars).Select(row => new { row.T3.Name, row.T2.Title, row.T1.Stars, row.T1.RatingDate }).ToList();",
    "db_name": "movie_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: Ashley White, 1: E.T., 2: 3, 3: 2011-01-02}, {0: Brittany Harris, 1: Raiders of the Lost Ark, 2: 2, 3: 2011-01-30}, {0: Brittany Harris, 1: Raiders of the Lost Ark, 2: 4, 3: 2011-01-12}, {0: Brittany Harris, 1: The Sound of Music, 2: 2, 3: 2011-01-20}, {0: Chris Jackson, 1: E.T., 2: 2, 3: 2011-01-22}, {0: Chris Jackson, 1: Raiders of the Lost Ark, 2: 4}, {0: Chris Jackson, 1: The Sound of Music, 2: 3, 3: 2011-01-27}, {0: Daniel Lewis, 1: Snow White, 2: 4}, {0: Elizabeth Thomas, 1: Avatar, 2: 3, 3: 2011-01-15}, {0: Elizabeth Thomas, 1: Snow White, 2: 5, 3: 2011-01-19}, {0: James Cameron, 1: Avatar, 2: 5, 3: 2011-01-20}, {0: Mike Anderson, 1: Gone with the Wind, 2: 3, 3: 2011-01-09}, {0: Sarah Martinez, 1: Gone with the Wind, 2: 2, 3: 2011-01-22}, {0: Sarah Martinez, 1: Gone with the Wind, 2: 4, 3: 2011-01-27}]\", linq_results: \"[{0: Ashley White, 1: E.T., 2: 3, 3: 02.01.2011}, {0: Brittany Harris, 1: Raiders of the Lost Ark, 2: 2, 3: 30.01.2011}, {0: Brittany Harris, 1: Raiders of the Lost Ark, 2: 4, 3: 12.01.2011}, {0: Brittany Harris, 1: The Sound of Music, 2: 2, 3: 20.01.2011}, {0: Chris Jackson, 1: E.T., 2: 2, 3: 22.01.2011}, {0: Chris Jackson, 1: Raiders of the Lost Ark, 2: 4}, {0: Chris Jackson, 1: The Sound of Music, 2: 3, 3: 27.01.2011}, {0: Daniel Lewis, 1: Snow White, 2: 4}, {0: Elizabeth Thomas, 1: Avatar, 2: 3, 3: 15.01.2011}, {0: Elizabeth Thomas, 1: Snow White, 2: 5, 3: 19.01.2011}, {0: James Cameron, 1: Avatar, 2: 5, 3: 20.01.2011}, {0: Mike Anderson, 1: Gone with the Wind, 2: 3, 3: 09.01.2011}, {0: Sarah Martinez, 1: Gone with the Wind, 2: 2, 3: 22.01.2011}, {0: Sarah Martinez, 1: Gone with the Wind, 2: 4, 3: 27.01.2011}]\" }"
  },
  {
    "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T1.rID HAVING COUNT(*) >= 3",
    "result": "context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.RId }).Where(group => group.Count() >= 3).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.title = 'Gone with the Wind'",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Join(context.Reviewers, joined => joined.T1.RId, T3 => T3.RId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Title == \"Gone with the Wind\").Select(row => new { row.T3.Name }).Distinct().ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Sarah Martinez'",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Join(context.Reviewers, joined => joined.T1.RId, T3 => T3.RId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Sarah Martinez\").Select(row => new { row.T2.Director }).Distinct().ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T3.name , T2.title , T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Join(context.Reviewers, joined => joined.T1.RId, T3 => T3.RId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Director == row.T3.Name).Select(row => new { row.T3.Name, row.T2.Title, row.T1.Stars }).Distinct().ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
    "result": "context.Reviewers.Select(row => row.Name).Union(context.Movies.Select(row => row.Title)).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson'",
    "result": "context.Movies.Select(row => row.Title).Distinct().Except(context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Join(context.Reviewers, joined => joined.T1.RId, T3 => T3.RId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Chris Jackson\").Select(row => row.T2.Title)).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.title , T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title ORDER BY T1.director , T1.title",
    "result": "context.Movies.Join(context.Movies, T1 => T1.Director, T2 => T2.Director, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Title != row.T2.Title).OrderBy(row => row.T1.Director).ThenBy(row => row.T1.Title).Select(row => new { row.T1.Title, row.T1.Director }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.title , T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title",
    "result": "context.Movies.Join(context.Movies, T1 => T1.Director, T2 => T2.Director, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Title != row.T2.Title).Select(row => new { row.T1.Title, row.T1.Year }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT director FROM Movie GROUP BY director HAVING count(*) = 1",
    "result": "context.Movies.GroupBy(row => new { row.Director }).Where(group => group.Count() == 1).Select(group => new { group.Key.Director }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*) = 1",
    "result": "context.Movies.Where(row => row.Director != \"null\").GroupBy(row => new { row.Director }).Where(group => group.Count() == 1).Select(group => new { group.Key.Director }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director",
    "result": "context.Movies.Join(context.Ratings, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Director }).Select(group => new { Count = group.Count(), group.Key.Director }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.title , avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MId }).Select(group => new { group.First().T2.Title, AverageStars = group.Select(row => row.T1.Stars).Average() }).OrderByDescending(group => group.AverageStars).Take(1).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.title , avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MId }).Select(group => new { group.First().T2.Title, AverageStars = group.Select(row => row.T1.Stars).Average() }).OrderBy(group => group.AverageStars).Take(1).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.title , T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY T1.stars DESC LIMIT 3",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Stars).Select(row => new { row.T2.Title, row.T2.Year }).Take(3).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.title , T1.stars , T2.director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Director != \"null\").GroupBy(row => new { row.T2.Director }).Select(group => new { group.OrderByDescending(row => row.T1.Stars).First().T2.Title, group.OrderByDescending(row => row.T1.Stars).First().T1.Stars, group.Key.Director, MaxStarsT1 = group.Select(row => row.T1.Stars).Max() }).ToList();",
    "db_name": "movie_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: Avatar, 1: 5, 2: James Cameron, 3: 5}, {0: The Sound of Music, 1: 3, 2: Robert Wise, 3: 3}, {0: Raiders of the Lost Ark, 1: 4, 2: Steven Spielberg, 3: 4}, {0: Gone with the Wind, 1: 4, 2: Victor Fleming, 3: 4}]\", linq_results: \"[{0: Snow White, 1: 5, 3: 5}, {0: Avatar, 1: 5, 2: James Cameron, 3: 5}, {0: The Sound of Music, 1: 3, 2: Robert Wise, 3: 3}, {0: Raiders of the Lost Ark, 1: 4, 2: Steven Spielberg, 3: 4}, {0: Gone with the Wind, 1: 4, 2: Victor Fleming, 3: 4}]\" }"
  },
  {
    "query": "SELECT T2.title , T1.rID , T1.stars , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.rID",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.RId }).Select(group => new { group.OrderBy(row => row.T1.Stars).First().T2.Title, group.Key.RId, group.OrderBy(row => row.T1.Stars).First().T1.Stars, MinStarsT1 = group.Select(row => row.T1.Stars).Min() }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.title , T1.stars , T2.director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.director",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Director }).Select(group => new { group.OrderBy(row => row.T1.Stars).First().T2.Title, group.OrderBy(row => row.T1.Stars).First().T1.Stars, group.Key.Director, MinStarsT1 = group.Select(row => row.T1.Stars).Min() }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.title , T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Title, group.Key.MId }).Take(1).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars >= 3 && row.T1.Stars <= 5).Select(row => new { row.T2.Title }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars > 3",
    "result": "context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars > 3).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT mID , avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = \"Brittany Harris\") GROUP BY mID",
    "result": "context.Ratings.Where(row => row.MId.HasValue && !context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Brittany Harris\").Select(row => row.T1.MId).Contains(row.MId.Value)).GroupBy(row => new { row.MId }).Select(group => new { group.Key.MId, AverageStars = group.Select(row => row.Stars).Average() }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = \"Brittany Harris\"",
    "result": "context.Ratings.Where(row => row.MId.HasValue).Select(row => row.MId.Value).Except(context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Brittany Harris\").Where(row => row.T1.MId.HasValue).Select(row => row.T1.MId.Value)).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT mID , avg(stars) FROM Rating GROUP BY mID HAVING count(*) >= 2",
    "result": "context.Ratings.GroupBy(row => new { row.MId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.MId, AverageStars = group.Select(row => row.Stars).Average() }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = 4",
    "result": "context.Ratings.Where(row => row.RId.HasValue).Select(row => row.RId.Value).Except(context.Ratings.Where(row => row.Stars == 4).Where(row => row.RId.HasValue).Select(row => row.RId.Value)).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT rID FROM Rating WHERE stars != 4",
    "result": "context.Ratings.Where(row => row.Stars != 4).Select(row => new { row.RId }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris' OR T2.year > 2000",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Join(context.Reviewers, joined => joined.T1.RId, T3 => T3.RId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Brittany Harris\" || row.T2.Year > 2000).Select(row => new { row.T2.Title }).Distinct().ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title FROM Movie WHERE director = \"James Cameron\" OR YEAR < 1980",
    "result": "context.Movies.Where(row => row.Director == \"James Cameron\" || row.Year < 1980).Select(row => new { row.Title }).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 4",
    "result": "context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars == 3).Select(row => row.T2.Name).Intersect(context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars == 4).Select(row => row.T2.Name)).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 4",
    "result": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars == 3).Select(row => row.T2.Title).Intersect(context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars == 4).Select(row => row.T2.Title)).ToList();",
    "db_name": "movie_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Accounts",
    "result": "context.Accounts.Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT account_id , customer_id , account_name FROM Accounts",
    "result": "context.Accounts.Select(row => new { row.AccountId, row.CustomerId, row.AccountName }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT other_account_details FROM Accounts WHERE account_name = \"338\"",
    "result": "context.Accounts.Where(row => row.AccountName == \"338\").Select(row => new { row.OtherAccountDetails }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"162\"",
    "result": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.AccountName == \"162\").Select(row => new { row.T2.CustomerFirstName, row.T2.CustomerLastName, row.T2.CustomerPhone }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\"",
    "result": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CustomerFirstName == \"Art\" && row.T2.CustomerLastName == \"Turcotte\").Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_id , count(*) FROM Accounts GROUP BY customer_id",
    "result": "context.Accounts.GroupBy(row => new { row.CustomerId }).Select(group => new { group.Key.CustomerId, Count = group.Count() }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_id , count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Accounts.GroupBy(row => new { row.CustomerId }).Select(group => new { group.Key.CustomerId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.customer_first_name , T2.customer_last_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderBy(group => group.Count()).Select(group => new { group.First().T2.CustomerFirstName, group.First().T2.CustomerLastName, group.Key.CustomerId }).Take(1).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
    "result": "context.Customers.Where(row => !context.Accounts.Select(row => row.CustomerId).Contains(row.CustomerId)).Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_first_name , customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
    "result": "context.Customers.Select(row => new { row.CustomerFirstName, row.CustomerLastName }).Except(context.Customers.Join(context.Accounts, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.CustomerFirstName, row.T1.CustomerLastName })).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
    "result": "context.Customers.Join(context.Accounts, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.CustomerFirstName, row.T1.CustomerLastName }).Distinct().ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
    "result": "context.Accounts.Select(row => row.CustomerId).Distinct().Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Customers",
    "result": "context.Customers.Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_id , customer_first_name , customer_last_name , customer_phone FROM Customers",
    "result": "context.Customers.Select(row => new { row.CustomerId, row.CustomerFirstName, row.CustomerLastName, row.CustomerPhone }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_phone , customer_email FROM Customers WHERE customer_first_name = \"Aniyah\" AND customer_last_name = \"Feest\"",
    "result": "context.Customers.Where(row => row.CustomerFirstName == \"Aniyah\" && row.CustomerLastName == \"Feest\").Select(row => new { row.CustomerPhone, row.CustomerEmail }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Customers_cards",
    "result": "context.CustomersCards.Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT card_id , customer_id , card_type_code , card_number FROM Customers_cards",
    "result": "context.CustomersCards.Select(row => new { row.CardId, row.CustomerId, row.CardTypeCode, row.CardNumber }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_valid_from , date_valid_to FROM Customers_cards WHERE card_number = \"4560596484842\"",
    "result": "context.CustomersCards.Where(row => row.CardNumber == \"4560596484842\").Select(row => new { row.DateValidFrom, row.DateValidTo }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = \"4560596484842\"",
    "result": "context.CustomersCards.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CardNumber == \"4560596484842\").Select(row => new { row.T2.CustomerFirstName, row.T2.CustomerLastName, row.T2.CustomerPhone }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\"",
    "result": "context.CustomersCards.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CustomerFirstName == \"Art\" && row.T2.CustomerLastName == \"Turcotte\").Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Customers_cards WHERE card_type_code = \"Debit\"",
    "result": "context.CustomersCards.Where(row => row.CardTypeCode == \"Debit\").Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Blanche\" AND T2.customer_last_name = \"Huels\" AND T1.card_type_code = \"Credit\"",
    "result": "context.CustomersCards.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CustomerFirstName == \"Blanche\" && row.T2.CustomerLastName == \"Huels\" && row.T1.CardTypeCode == \"Credit\").Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_id , count(*) FROM Customers_cards GROUP BY customer_id",
    "result": "context.CustomersCards.GroupBy(row => new { row.CustomerId }).Select(group => new { group.Key.CustomerId, Count = group.Count() }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_id , count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.CustomersCards.GroupBy(row => new { row.CustomerId }).Select(group => new { group.Key.CustomerId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2",
    "result": "context.CustomersCards.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.CustomerId, group.First().T2.CustomerFirstName, group.First().T2.CustomerLastName }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
    "result": "context.CustomersCards.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderBy(group => group.Count()).Select(group => new { group.Key.CustomerId, group.First().T2.CustomerFirstName, group.First().T2.CustomerLastName }).Take(1).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code",
    "result": "context.CustomersCards.GroupBy(row => new { row.CardTypeCode }).Select(group => new { group.Key.CardTypeCode, Count = group.Count() }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.CustomersCards.GroupBy(row => new { row.CardTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CardTypeCode }).Take(1).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*) >= 5",
    "result": "context.CustomersCards.GroupBy(row => new { row.CardTypeCode }).Where(group => group.Count() >= 5).Select(group => new { group.Key.CardTypeCode }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT card_type_code , count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
    "result": "context.CustomersCards.GroupBy(row => new { row.CardTypeCode }).Select(group => new { group.Key.CardTypeCode, CountDistinctCustomerId = group.Select(row => row.CustomerId).Distinct().Count() }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_id , customer_first_name FROM Customers EXCEPT SELECT T1.customer_id , T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE card_type_code = \"Credit\"",
    "result": "context.Customers.Select(row => new { row.CustomerId, row.CustomerFirstName }).Except(context.CustomersCards.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CardTypeCode == \"Credit\").Select(row => new { row.T1.CustomerId, row.T2.CustomerFirstName })).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
    "result": "context.CustomersCards.Select(row => new { row.CardTypeCode }).Distinct().ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
    "result": "context.CustomersCards.Select(row => row.CardTypeCode).Distinct().Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT transaction_type FROM Financial_Transactions",
    "result": "context.FinancialTransactions.Select(row => new { row.TransactionType }).Distinct().ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
    "result": "context.FinancialTransactions.Select(row => row.TransactionType).Distinct().Count();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(transaction_amount) , sum(transaction_amount) FROM Financial_transactions",
    "result": "context.FinancialTransactions.GroupBy(row => 1).Select(group => new { AverageTransactionAmount = group.Select(row => row.TransactionAmount).Average(), SumTransactionAmount = group.Select(row => row.TransactionAmount).Sum() }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code",
    "result": "context.FinancialTransactions.Join(context.CustomersCards, T1 => T1.CardId, T2 => T2.CardId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CardTypeCode }).Select(group => new { group.Key.CardTypeCode, Count = group.Count() }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type",
    "result": "context.FinancialTransactions.GroupBy(row => new { row.TransactionType }).Select(group => new { group.Key.TransactionType, Count = group.Count() }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
    "result": "context.FinancialTransactions.GroupBy(row => new { row.TransactionType }).OrderByDescending(group => group.Sum(row => row.TransactionAmount)).Select(group => new { group.Key.TransactionType }).Take(1).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT account_id , count(*) FROM Financial_transactions GROUP BY account_id",
    "result": "context.FinancialTransactions.GroupBy(row => new { row.AccountId }).Select(group => new { group.Key.AccountId, Count = group.Count() }).ToList();",
    "db_name": "customers_card_transactions",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM addresses WHERE country = 'USA'",
    "result": "context.Addresses.Where(row => row.Country == \"USA\").Count();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT city FROM addresses",
    "result": "context.Addresses.Select(row => new { row.City }).Distinct().ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
    "result": "context.Addresses.GroupBy(row => new { row.StateProvinceCounty }).Select(group => new { group.Key.StateProvinceCounty, Count = group.Count() }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_name , customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)",
    "result": "context.Customers.Where(row => !context.CustomerAddressHistories.Select(row => row.CustomerId).Contains(row.CustomerId)).Select(row => new { row.CustomerName, row.CustomerPhone }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.CustomerName }).Take(1).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*) >= 2",
    "result": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProductTypeCode }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Part'",
    "result": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatusCode == \"Completed\").Select(row => row.T1.CustomerName).Intersect(context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatusCode == \"Part\").Select(row => row.T1.CustomerName)).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_name , customer_phone , payment_method_code FROM customers ORDER BY customer_number DESC",
    "result": "context.Customers.OrderByDescending(row => row.CustomerNumber).Select(row => new { row.CustomerName, row.CustomerPhone, row.PaymentMethodCode }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.product_name , sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id",
    "result": "context.Products.Join(context.OrderItems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductId }).Select(group => new { group.First().T1.ProductName, SumOrderQuantity = group.Select(row => row.T2.OrderQuantity).Sum() }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,234): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34"
  },
  {
    "query": "SELECT min(product_price) , max(product_price) , avg(product_price) FROM products",
    "result": "context.Products.GroupBy(row => 1).Select(group => new { MinProductPrice = group.Select(row => row.ProductPrice).Min(), MaxProductPrice = group.Select(row => row.ProductPrice).Max(), AverageProductPrice = group.Select(row => row.ProductPrice).Average() }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products WHERE product_price > (SELECT avg(product_price) FROM products)",
    "result": "context.Products.Where(row => row.ProductPrice > context.Products.Select(row => (double) row.ProductPrice).Average()).Count();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.customer_name , T3.city , T1.date_from , T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id",
    "result": "context.CustomerAddressHistories.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.Addresses, joined => joined.T1.AddressId, T3 => T3.AddressId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.CustomerName, row.T3.City, row.T1.DateFrom, row.T1.DateTo }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_method_code = 'Credit Card' GROUP BY T1.customer_id HAVING count(*) > 2",
    "result": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PaymentMethodCode == \"Credit Card\").GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() > 2).Select(group => new { group.First().T1.CustomerName }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_name , T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1",
    "result": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.OrderItems, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Sum(row => row.T3.OrderQuantity)).Select(group => new { group.First().T1.CustomerName, group.First().T1.CustomerPhone }).Take(1).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,337): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.38"
  },
  {
    "query": "SELECT product_type_code , product_name FROM products WHERE product_price > 1000 OR product_price < 500",
    "result": "context.Products.Where(row => row.ProductPrice > 1000 || row.ProductPrice < 500).Select(row => new { row.ProductTypeCode, row.ProductName }).ToList();",
    "db_name": "customers_and_products_contacts",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT vehicle_id FROM Vehicles;",
    "result": "context.Vehicles.Select(row => new { row.VehicleId }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Vehicles;",
    "result": "context.Vehicles.Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;",
    "result": "context.Vehicles.Where(row => row.VehicleId == 1).Select(row => new { row.VehicleDetails }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT first_name , middle_name , last_name FROM Staff;",
    "result": "context.Staff.Select(row => new { row.FirstName, row.MiddleName, row.LastName }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
    "result": "context.Staff.Where(row => row.FirstName == \"Janessa\" && row.LastName == \"Sawayn\").Select(row => new { row.DateOfBirth }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
    "result": "context.Staff.Where(row => row.FirstName == \"Janessa\" && row.LastName == \"Sawayn\").Select(row => new { row.DateJoinedStaff }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
    "result": "context.Staff.Where(row => row.FirstName == \"Janessa\" && row.LastName == \"Sawayn\").Select(row => new { row.DateLeftStaff }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";",
    "result": "context.Staff.Where(row => row.FirstName == \"Ludie\").Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
    "result": "context.Staff.Where(row => row.FirstName == \"Janessa\" && row.LastName == \"Sawayn\").Select(row => new { row.Nickname }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Staff;",
    "result": "context.Staff.Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
    "result": "context.Addresses.Join(context.Staff, T1 => T1.AddressId, T2 => T2.StaffAddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Janessa\" && row.T2.LastName == \"Sawayn\").Select(row => new { row.T1.City }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.country , T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
    "result": "context.Addresses.Join(context.Staff, T1 => T1.AddressId, T2 => T2.StaffAddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Janessa\" && row.T2.LastName == \"Sawayn\").Select(row => new { row.T1.Country, row.T1.StateProvinceCounty }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";",
    "result": "context.Lessons.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Rylan\" && row.T2.LastName == \"Goodwin\").Select(row => row.T1.LessonTime).Sum();",
    "db_name": "driving_school",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,12): error CS1929: 'IQueryable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.18"
  },
  {
    "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
    "result": "context.Addresses.Join(context.Staff, T1 => T1.AddressId, T2 => T2.StaffAddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Janessa\" && row.T2.LastName == \"Sawayn\").Select(row => new { row.T1.ZipPostcode }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";",
    "result": "context.Addresses.Where(row => row.StateProvinceCounty == \"Georgia\").Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";",
    "result": "context.Addresses.Join(context.Staff, T1 => T1.AddressId, T2 => T2.StaffAddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.City == \"Damianfort\").Select(row => new { row.T2.FirstName, row.T2.LastName }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.city , count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;",
    "result": "context.Addresses.Join(context.Staff, T1 => T1.AddressId, T2 => T2.StaffAddressId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.City }).Select(group => new { group.Key.City, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
    "result": "context.Addresses.Join(context.Staff, T1 => T1.AddressId, T2 => T2.StaffAddressId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StateProvinceCounty }).Where(group => group.Count() >= 2 && group.Count() <= 4).Select(group => new { group.Key.StateProvinceCounty }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT first_name , last_name FROM Customers;",
    "result": "context.Customers.Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT email_address , date_of_birth FROM Customers WHERE first_name = \"Carole\"",
    "result": "context.Customers.Where(row => row.FirstName == \"Carole\").Select(row => new { row.EmailAddress, row.DateOfBirth }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT phone_number , email_address FROM Customers WHERE amount_outstanding > 2000;",
    "result": "context.Customers.Where(row => row.AmountOutstanding > 2000).Select(row => new { row.PhoneNumber, row.EmailAddress }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_status_code , cell_mobile_phone_number , email_address FROM Customers WHERE first_name = \"Marina\" OR last_name = \"Kohler\"",
    "result": "context.Customers.Where(row => row.FirstName == \"Marina\" || row.LastName == \"Kohler\").Select(row => new { row.CustomerStatusCode, row.CellMobilePhoneNumber, row.EmailAddress }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer'",
    "result": "context.Customers.Where(row => row.CustomerStatusCode == \"Good Customer\").Select(row => new { row.DateOfBirth }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";",
    "result": "context.Customers.Where(row => row.FirstName == \"Carole\" && row.LastName == \"Bernhard\").Select(row => new { row.DateBecameCustomer }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Customers;",
    "result": "context.Customers.Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;",
    "result": "context.Customers.GroupBy(row => new { row.CustomerStatusCode }).Select(group => new { group.Key.CustomerStatusCode, Count = group.Count() }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;",
    "result": "context.Customers.GroupBy(row => new { row.CustomerStatusCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.CustomerStatusCode }).Take(1).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";",
    "result": "context.Lessons.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Rylan\" && row.T2.LastName == \"Goodwin\" && row.T1.LessonStatusCode == \"Completed\").Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(amount_outstanding) , min(amount_outstanding) , avg(amount_outstanding) FROM Customers;",
    "result": "context.Customers.GroupBy(row => 1).Select(group => new { MaxAmountOutstanding = group.Select(row => row.AmountOutstanding).Max(), MinAmountOutstanding = group.Select(row => row.AmountOutstanding).Min(), AverageAmountOutstanding = group.Select(row => row.AmountOutstanding).Average() }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT first_name , last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;",
    "result": "context.Customers.Where(row => row.AmountOutstanding >= 1000 && row.AmountOutstanding <= 3000).Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.first_name , T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";",
    "result": "context.Customers.Join(context.Addresses, T1 => T1.CustomerAddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City == \"Lockmanfurt\").Select(row => new { row.T1.FirstName, row.T1.LastName }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
    "result": "context.Customers.Join(context.Addresses, T1 => T1.CustomerAddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"Carole\" && row.T1.LastName == \"Bernhard\").Select(row => new { row.T2.Country }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
    "result": "context.Customers.Join(context.Addresses, T1 => T1.CustomerAddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"Carole\" && row.T1.LastName == \"Bernhard\").Select(row => new { row.T2.ZipPostcode }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;",
    "result": "context.Customers.Join(context.Addresses, T1 => T1.CustomerAddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.City }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.City }).Take(1).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"",
    "result": "context.CustomerPayments.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Carole\" && row.T2.LastName == \"Bernhard\").Select(row => row.T1.AmountPayment).Sum();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );",
    "result": "context.Customers.Where(row => !context.CustomerPayments.Select(row => row.CustomerId).Contains(row.CustomerId)).Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) > 2;",
    "result": "context.CustomerPayments.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() > 2).Select(group => new { group.First().T2.FirstName, group.First().T2.LastName }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code;",
    "result": "context.CustomerPayments.GroupBy(row => new { row.PaymentMethodCode }).Select(group => new { group.Key.PaymentMethodCode, Count = group.Count() }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";",
    "result": "context.Lessons.Where(row => row.LessonStatusCode == \"Cancelled\").Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
    "result": "context.Lessons.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Janessa\" && row.T2.LastName == \"Sawayn\" && EF.Functions.Like(row.T2.Nickname, \"%s%\")).Select(row => new { row.T1.LessonId }).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"",
    "result": "context.Lessons.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.FirstName, \"%a%\")).Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
    "result": "context.Lessons.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Janessa\" && row.T2.LastName == \"Sawayn\").Select(row => row.T1.LessonTime).Sum();",
    "db_name": "driving_school",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,12): error CS1929: 'IQueryable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.30"
  },
  {
    "query": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
    "result": "context.Lessons.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Janessa\" && row.T2.LastName == \"Sawayn\").Select(row => (double) row.T1.Price).Average();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Ray\"",
    "result": "context.Lessons.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Ray\").Count();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
    "result": "context.Customers.Select(row => row.LastName).Intersect(context.Staff.Select(row => row.LastName)).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id",
    "result": "context.Staff.Select(row => row.FirstName).Except(context.Lessons.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Select(row => row.T2.FirstName)).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.vehicle_id , T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id = T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Vehicles.Join(context.Lessons, T1 => T1.VehicleId, T2 => T2.VehicleId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.VehicleId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.VehicleId, group.First().T1.VehicleDetails }).Take(1).ToList();",
    "db_name": "driving_school",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Date_Claim_Made , T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.Claim_id HAVING count(*) > 2 UNION SELECT T1.Date_Claim_Made , T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id WHERE T1.Amount_Claimed = ( SELECT max(Amount_Claimed) FROM Claims )",
    "result": "context.Claims.Join(context.Settlements, T1 => T1.ClaimId, T2 => T2.ClaimId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClaimId }).Where(group => group.Count() > 2).Select(group => new { group.First().T1.DateClaimMade, group.Key.ClaimId }).Union(context.Claims.Join(context.Settlements, T1 => T1.ClaimId, T2 => T2.ClaimId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.AmountClaimed == context.Claims.Select(row => row.AmountClaimed).Max()).Select(row => new { row.T1.DateClaimMade, row.T1.ClaimId })).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 2017-08-03, 1: 571}, {0: 2017-10-21, 1: 801}]\", linq_results: \"[{0: 03.08.2017, 1: 571}, {0: 21.10.2017, 1: 801}]\" }"
  },
  {
    "query": "SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2 EXCEPT SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3 ON T2.policy_id = T3.policy_id",
    "result": "context.Customers.Join(context.CustomerPolicies, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.CustomerDetails, group.Key.CustomerId }).Except(context.Customers.Join(context.CustomerPolicies, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.Claims, joined => joined.T2.PolicyId, T3 => T3.PolicyId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.CustomerDetails, row.T1.CustomerId })).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Payment_Method_Code , Date_Payment_Made , Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
    "result": "context.Payments.OrderBy(row => row.DatePaymentMade).Select(row => new { row.PaymentMethodCode, row.DatePaymentMade, row.AmountPayment }).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: Visa, 1: 2017-05-03, 2: 172309}, {0: Discover Card, 1: 2017-05-04, 2: 123255}, {0: MasterCard, 1: 2017-05-28, 2: 448613}, {0: Visa, 1: 2017-05-28, 2: 155654}, {0: MasterCard, 1: 2017-06-24, 2: 456098}, {0: MasterCard, 1: 2017-07-31, 2: 423154}, {0: Discover Card, 1: 2017-08-06, 2: 38324}, {0: Discover Card, 1: 2017-10-07, 2: 71246}, {0: Visa, 1: 2017-12-16, 2: 459407}, {0: MasterCard, 1: 2018-01-10, 2: 407235}, {0: American Express, 1: 2018-01-19, 2: 177130}, {0: MasterCard, 1: 2018-01-28, 2: 319142}, {0: MasterCard, 1: 2018-02-16, 2: 241730}, {0: MasterCard, 1: 2018-02-18, 2: 235893}, {0: Visa, 1: 2018-02-24, 2: 7343}]\", linq_results: \"[{0: Visa, 1: 03.05.2017, 2: 172309}, {0: Discover Card, 1: 04.05.2017, 2: 123255}, {0: MasterCard, 1: 28.05.2017, 2: 448613}, {0: Visa, 1: 28.05.2017, 2: 155654}, {0: MasterCard, 1: 24.06.2017, 2: 456098}, {0: MasterCard, 1: 31.07.2017, 2: 423154}, {0: Discover Card, 1: 06.08.2017, 2: 38324}, {0: Discover Card, 1: 07.10.2017, 2: 71246}, {0: Visa, 1: 16.12.2017, 2: 459407}, {0: MasterCard, 1: 10.01.2018, 2: 407235}, {0: American Express, 1: 19.01.2018, 2: 177130}, {0: MasterCard, 1: 28.01.2018, 2: 319142}, {0: MasterCard, 1: 16.02.2018, 2: 241730}, {0: MasterCard, 1: 18.02.2018, 2: 235893}, {0: Visa, 1: 24.02.2018, 2: 7343}]\" }"
  },
  {
    "query": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1",
    "result": "context.Claims.OrderByDescending(row => row.AmountClaimed).Select(row => new { row.AmountSettled, row.AmountClaimed }).Take(1).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
    "result": "context.Claims.OrderBy(row => row.AmountSettled).Select(row => new { row.AmountSettled, row.AmountClaimed }).Take(1).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Date_Claim_Made , Date_Claim_Settled FROM Claims WHERE Amount_Claimed > ( SELECT avg(Amount_Claimed) FROM Claims )",
    "result": "context.Claims.Where(row => row.AmountClaimed > context.Claims.Select(row => row.AmountClaimed).Average()).Select(row => new { row.DateClaimMade, row.DateClaimSettled }).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 2016-08-12, 1: 2018-01-27}, {0: 2017-02-24, 1: 2018-01-21}, {0: 2018-06-14, 1: 2017-12-20}, {0: 2017-08-03, 1: 2018-02-18}, {0: 2016-08-26, 1: 2017-09-04}, {0: 2018-07-13, 1: 2017-11-22}]\", linq_results: \"[{0: 12.08.2016, 1: 27.01.2018}, {0: 24.02.2017, 1: 21.01.2018}, {0: 14.06.2018, 1: 20.12.2017}, {0: 03.08.2017, 1: 18.02.2018}, {0: 26.08.2016, 1: 04.09.2017}, {0: 13.07.2018, 1: 22.11.2017}]\" }"
  },
  {
    "query": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled <= ( SELECT avg(Amount_Settled) FROM Claims )",
    "result": "context.Claims.Where(row => row.AmountSettled <= context.Claims.Select(row => row.AmountSettled).Average()).Select(row => new { row.DateClaimMade }).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 2017-03-11}, {0: 2017-02-24}, {0: 2017-05-03}, {0: 2018-07-15}, {0: 2016-08-26}, {0: 2017-10-21}, {0: 2018-11-08}]\", linq_results: \"[{0: 11.03.2017}, {0: 24.02.2017}, {0: 03.05.2017}, {0: 15.07.2018}, {0: 26.08.2016}, {0: 21.10.2017}, {0: 08.11.2018}]\" }"
  },
  {
    "query": "SELECT T1.Claim_id , count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id",
    "result": "context.Claims.Join(context.Settlements, T1 => T1.ClaimId, T2 => T2.ClaimId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClaimId }).Select(group => new { group.Key.ClaimId, Count = group.Count() }).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.claim_id , T1.date_claim_made , count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Claims.Join(context.Settlements, T1 => T1.ClaimId, T2 => T2.ClaimId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClaimId }).Select(group => new { group.Key.ClaimId, group.First().T1.DateClaimMade, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 801, 1: 2017-10-21, 2: 4}]\", linq_results: \"[{0: 801, 1: 21.10.2017, 2: 4}]\" }"
  },
  {
    "query": "SELECT count(*) , T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1",
    "result": "context.Claims.Join(context.Settlements, T1 => T1.ClaimId, T2 => T2.ClaimId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClaimId }).Select(group => new { Count = group.Count(), group.Key.ClaimId }).OrderByDescending(group => group.First().T1.DateClaimSettled).Take(1).ToList();",
    "db_name": "insurance_policies",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,255): error CS1061: '<anonymous type: int Count, int ClaimId>' does not contain a definition for 'First' and no accessible extension method 'First' accepting a first argument of type '<anonymous type: int Count, int ClaimId>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.24"
  },
  {
    "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
    "result": "context.Claims.OrderBy(row => row.DateClaimMade).Select(row => new { row.DateClaimMade }).Take(1).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 2016-08-02}]\", linq_results: \"[{0: 02.08.2016}]\" }"
  },
  {
    "query": "SELECT sum(Amount_Settled) FROM Settlements",
    "result": "context.Settlements.Select(row => row.AmountSettled).Sum();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING count(*) > 1",
    "result": "context.Customers.Join(context.CustomerPolicies, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.CustomerDetails, group.Key.CustomerId }).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Date_Claim_Made , Date_Claim_Settled FROM Settlements",
    "result": "context.Settlements.Select(row => new { row.DateClaimMade, row.DateClaimSettled }).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 2018-08-07, 1: 2018-01-16}, {0: 2017-08-27, 1: 2018-02-04}, {0: 2016-09-05, 1: 2018-03-02}, {0: 2016-05-18, 1: 2018-02-11}, {0: 2017-05-19, 1: 2017-10-06}, {0: 2018-11-10, 1: 2018-02-15}, {0: 2018-05-12, 1: 2017-11-30}, {0: 2016-07-04, 1: 2018-02-20}, {0: 2017-04-18, 1: 2017-12-24}, {0: 2017-07-31, 1: 2018-01-27}, {0: 2017-09-22, 1: 2018-02-14}, {0: 2017-03-04, 1: 2018-02-20}, {0: 2017-04-14, 1: 2017-11-15}, {0: 2017-03-29, 1: 2018-02-20}, {0: 2016-07-19, 1: 2017-11-04}]\", linq_results: \"[{0: 07.08.2018, 1: 16.01.2018}, {0: 27.08.2017, 1: 04.02.2018}, {0: 05.09.2016, 1: 02.03.2018}, {0: 18.05.2016, 1: 11.02.2018}, {0: 19.05.2017, 1: 06.10.2017}, {0: 10.11.2018, 1: 15.02.2018}, {0: 12.05.2018, 1: 30.11.2017}, {0: 04.07.2016, 1: 20.02.2018}, {0: 18.04.2017, 1: 24.12.2017}, {0: 31.07.2017, 1: 27.01.2018}, {0: 22.09.2017, 1: 14.02.2018}, {0: 04.03.2017, 1: 20.02.2018}, {0: 14.04.2017, 1: 15.11.2017}, {0: 29.03.2017, 1: 20.02.2018}, {0: 19.07.2016, 1: 04.11.2017}]\" }"
  },
  {
    "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Payments.GroupBy(row => new { row.PaymentMethodCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PaymentMethodCode }).Take(1).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Payments.GroupBy(row => new { row.PaymentMethodCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.PaymentMethodCode }).Take(1).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(Amount_Payment) FROM Payments",
    "result": "context.Payments.Select(row => row.AmountPayment).Sum();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT customer_details FROM Customers",
    "result": "context.Customers.Select(row => new { row.CustomerDetails }).Distinct().ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.CustomerPolicies.GroupBy(row => new { row.PolicyTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PolicyTypeCode }).Take(1).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Settlements",
    "result": "context.Settlements.Count();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Payment_ID , Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "result": "context.Payments.Where(row => row.PaymentMethodCode == \"Visa\").Select(row => new { row.PaymentId, row.DatePaymentMade, row.AmountPayment }).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 678, 1: 2017-12-16, 2: 459407}, {0: 754, 1: 2018-02-24, 2: 7343}, {0: 779, 1: 2017-05-28, 2: 155654}, {0: 791, 1: 2017-05-03, 2: 172309}]\", linq_results: \"[{0: 678, 1: 16.12.2017, 2: 459407}, {0: 754, 1: 24.02.2018, 2: 7343}, {0: 779, 1: 28.05.2017, 2: 155654}, {0: 791, 1: 03.05.2017, 2: 172309}]\" }"
  },
  {
    "query": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id",
    "result": "context.Customers.Select(row => row.CustomerDetails).Except(context.Customers.Join(context.CustomerPolicies, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.CustomerDetails)).ToList();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.claim_id , T1.date_claim_made , T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.claim_id HAVING count(*) = 1",
    "result": "context.Claims.Join(context.Settlements, T1 => T1.ClaimId, T2 => T2.ClaimId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClaimId }).Where(group => group.Count() == 1).Select(group => new { group.Key.ClaimId, group.First().T1.DateClaimMade, group.First().T1.DateClaimSettled }).ToList();",
    "db_name": "insurance_policies",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 563, 1: 2016-08-02, 2: 2017-09-04}, {0: 569, 1: 2018-07-15, 2: 2017-11-19}, {0: 571, 1: 2017-08-03, 2: 2018-02-18}, {0: 843, 1: 2017-10-14, 2: 2018-02-20}, {0: 957, 1: 2018-11-08, 2: 2017-09-15}]\", linq_results: \"[{0: 563, 1: 02.08.2016, 2: 04.09.2017}, {0: 569, 1: 15.07.2018, 2: 19.11.2017}, {0: 571, 1: 03.08.2017, 2: 18.02.2018}, {0: 843, 1: 14.10.2017, 2: 20.02.2018}, {0: 957, 1: 08.11.2018, 2: 15.09.2017}]\" }"
  },
  {
    "query": "SELECT sum(Amount_Claimed) FROM Claims",
    "result": "context.Claims.Select(row => row.AmountClaimed).Sum();",
    "db_name": "insurance_policies",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
    "result": "context.CatalogContents.Select(row => new { row.CatalogEntryName }).Distinct().ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3",
    "result": "context.AttributeDefinitions.GroupBy(row => new { row.AttributeDataType }).Where(group => group.Count() > 3).Select(group => new { group.Key.AttributeDataType }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = \"Green\"",
    "result": "context.AttributeDefinitions.Where(row => row.AttributeName == \"Green\").Select(row => new { row.AttributeDataType }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "result": "context.CatalogStructures.Where(row => row.CatalogLevelNumber >= 5 && row.CatalogLevelNumber <= 10).Select(row => new { row.CatalogLevelName, row.CatalogLevelNumber }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
    "result": "context.Catalogs.Where(row => EF.Functions.Like(row.CatalogPublisher, \"%Murray%\")).Select(row => new { row.CatalogPublisher }).Distinct().ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Catalogs.GroupBy(row => new { row.CatalogPublisher }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CatalogPublisher }).Take(1).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.catalog_name , t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5",
    "result": "context.Catalogs.Join(context.CatalogStructures, t1 => t1.CatalogId, t2 => t2.CatalogId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CatalogLevelNumber > 5).Select(row => new { row.t1.CatalogName, row.t1.DateOfPublication }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
    "result": "context.CatalogContents.Join(context.CatalogContentsAdditionalAttributes, t1 => t1.CatalogEntryId, t2 => t2.CatalogEntryId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.AttributeValue == context.CatalogContentsAdditionalAttributes.GroupBy(row => new { row.AttributeValue }).OrderByDescending(group => group.Count()).Select(group => group.Key.AttributeValue).Take(1).First()).Select(row => new { row.t1.CatalogEntryName }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
    "result": "context.CatalogContents.OrderByDescending(row => row.PriceInDollars).Select(row => new { row.CatalogEntryName }).Take(1).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
    "result": "context.CatalogContents.Join(context.CatalogStructures, t1 => t1.CatalogLevelNumber, t2 => t2.CatalogLevelNumber, (t1, t2) => new { t1, t2 }).OrderBy(row => row.t1.PriceInDollars).Select(row => new { row.t2.CatalogLevelName }).Take(1).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(price_in_euros) , min(price_in_euros) FROM catalog_contents",
    "result": "context.CatalogContents.GroupBy(row => 1).Select(group => new { AveragePriceInEuros = group.Select(row => row.PriceInEuros).Average(), MinPriceInEuros = group.Select(row => row.PriceInEuros).Min() }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
    "result": "context.CatalogContents.OrderByDescending(row => row.Height).Select(row => new { row.CatalogEntryName }).Take(1).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
    "result": "context.CatalogContents.OrderBy(row => row.Capacity).Select(row => new { row.CatalogEntryName }).Take(1).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
    "result": "context.CatalogContents.Where(row => EF.Functions.Like(row.ProductStockNumber, \"2%\")).Select(row => new { row.CatalogEntryName }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\"",
    "result": "context.CatalogContents.Join(context.CatalogContentsAdditionalAttributes, t1 => t1.CatalogEntryId, t2 => t2.CatalogEntryId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CatalogLevelNumber == \"8\").Select(row => new { row.t1.CatalogEntryName }).ToList();",
    "db_name": "product_catalog",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,177): error CS0019: Operator '==' cannot be applied to operands of type 'int' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.70"
  },
  {
    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5",
    "result": "context.CatalogContents.Where(row => row.Length < \"3\" || row.Width > \"5\").Select(row => new { row.CatalogEntryName }).ToList();",
    "db_name": "product_catalog",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,69): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.61"
  },
  {
    "query": "SELECT t1.attribute_name , t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0",
    "result": "context.AttributeDefinitions.Join(context.CatalogContentsAdditionalAttributes, t1 => t1.AttributeId, t2 => t2.AttributeId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.AttributeValue == \"0\").Select(row => new { row.t1.AttributeName, row.t1.AttributeId }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "result": "context.CatalogContents.Where(row => row.PriceInDollars > 700).Select(row => new { row.CatalogEntryName, row.Capacity }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*) > 1",
    "result": "context.Catalogs.GroupBy(row => new { row.DateOfLatestRevision }).Where(group => group.Count() > 1).Select(group => new { group.Key.DateOfLatestRevision }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM catalog_contents",
    "result": "context.CatalogContents.Count();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8",
    "result": "context.CatalogContents.Where(row => row.NextEntryId > 8).Select(row => new { row.CatalogEntryName }).ToList();",
    "db_name": "product_catalog",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_phone FROM available_policies",
    "result": "context.AvailablePolicies.Select(row => new { row.CustomerPhone }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code = \"Life Insurance\"",
    "result": "context.AvailablePolicies.Where(row => row.PolicyTypeCode == \"Life Insurance\").Select(row => new { row.CustomerPhone }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.AvailablePolicies.GroupBy(row => new { row.PolicyTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PolicyTypeCode }).Take(1).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)",
    "result": "context.AvailablePolicies.Where(row => row.PolicyTypeCode == context.AvailablePolicies.GroupBy(row => new { row.PolicyTypeCode }).OrderByDescending(group => group.Count()).Select(group => group.Key.PolicyTypeCode).Take(1).First()).Select(row => new { row.CustomerPhone }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*) > 4",
    "result": "context.AvailablePolicies.GroupBy(row => new { row.PolicyTypeCode }).Where(group => group.Count() > 4).Select(group => new { group.Key.PolicyTypeCode }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(settlement_amount) , avg(settlement_amount) FROM settlements",
    "result": "context.Settlements.GroupBy(row => 1).Select(group => new { SumSettlementAmount = group.Select(row => row.SettlementAmount).Sum(), AverageSettlementAmount = group.Select(row => row.SettlementAmount).Average() }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING count(*) > 2",
    "result": "context.FirstNotificationOfLosses.Join(context.Services, t1 => t1.ServiceId, t2 => t2.ServiceId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ServiceId }).Where(group => group.Count() > 2).Select(group => new { group.First().t2.ServiceName }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
    "result": "context.Claims.Join(context.Settlements, t1 => t1.ClaimId, t2 => t2.ClaimId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ClaimId }).OrderByDescending(group => group.Sum(row => row.t2.SettlementAmount)).Select(group => new { group.First().t1.EffectiveDate }).Take(1).ToList();",
    "db_name": "insurance_fnol",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 2009-02-11}]\", linq_results: \"[{0: 11.02.2009}]\" }"
  },
  {
    "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Dayana Robel\"",
    "result": "context.Customers.Join(context.CustomersPolicies, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.CustomerName == \"Dayana Robel\").Count();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Customers.Join(context.CustomersPolicies, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.CustomerName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CustomerName }).Take(1).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = \"Dayana Robel\"",
    "result": "context.Customers.Join(context.CustomersPolicies, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.AvailablePolicies, joined => joined.t2.PolicyId, t3 => t3.PolicyId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.CustomerName == \"Dayana Robel\").Select(row => new { row.t3.PolicyTypeCode }).Distinct().ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
    "result": "context.Customers.Join(context.CustomersPolicies, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.AvailablePolicies, joined => joined.t2.PolicyId, t3 => t3.PolicyId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.CustomerName == context.Customers.Join(context.CustomersPolicies, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.CustomerName }).OrderByDescending(group => group.Count()).Select(group => group.Key.CustomerName).Take(1).First()).Select(row => new { row.t3.PolicyTypeCode }).Distinct().ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT service_name FROM services ORDER BY service_name",
    "result": "context.Services.OrderBy(row => row.ServiceName).Select(row => new { row.ServiceName }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM services",
    "result": "context.Services.Count();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id",
    "result": "context.Customers.Select(row => row.CustomerName).Except(context.Customers.Join(context.FirstNotificationOfLosses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Select(row => row.t1.CustomerName)).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" OR t3.service_name = \"Upgrade a policy\"",
    "result": "context.Customers.Join(context.FirstNotificationOfLosses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Services, joined => joined.t2.ServiceId, t3 => t3.ServiceId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.ServiceName == \"Close a policy\" || row.t3.ServiceName == \"Upgrade a policy\").Select(row => new { row.t1.CustomerName }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"New policy application\"",
    "result": "context.Customers.Join(context.FirstNotificationOfLosses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Services, joined => joined.t2.ServiceId, t3 => t3.ServiceId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.ServiceName == \"Close a policy\").Select(row => row.t1.CustomerName).Intersect(context.Customers.Join(context.FirstNotificationOfLosses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Services, joined => joined.t2.ServiceId, t3 => t3.ServiceId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.ServiceName == \"New policy application\").Select(row => row.t1.CustomerName)).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
    "result": "context.Customers.Where(row => EF.Functions.Like(row.CustomerName, \"%Diana%\")).Select(row => new { row.CustomerId }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(settlement_amount) , min(settlement_amount) FROM settlements",
    "result": "context.Settlements.GroupBy(row => 1).Select(group => new { MaxSettlementAmount = group.Select(row => row.SettlementAmount).Max(), MinSettlementAmount = group.Select(row => row.SettlementAmount).Min() }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_id , customer_name FROM customers ORDER BY customer_id ASC",
    "result": "context.Customers.OrderBy(row => row.CustomerId).Select(row => new { row.CustomerId, row.CustomerName }).ToList();",
    "db_name": "insurance_fnol",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.date_opened , t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
    "result": "context.Customers.Join(context.CustomersPolicies, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => EF.Functions.Like(row.t1.CustomerName, \"%Diana%\")).Select(row => new { row.t2.DateOpened, row.t2.DateClosed }).ToList();",
    "db_name": "insurance_fnol",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 2017-01-09, 1: 2018-03-08}, {0: 2016-06-24, 1: 2018-02-22}]\", linq_results: \"[{0: 09.01.2017, 1: 08.03.2018}, {0: 24.06.2016, 1: 22.02.2018}]\" }"
  },
  {
    "query": "SELECT job_id FROM job_history WHERE end_date - start_date > 300 GROUP BY job_id HAVING COUNT(*) >= 2",
    "result": "context.JobHistories.Where(row => row.EndDate - row.StartDate > 300).GroupBy(row => new { row.JobId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.JobId }).ToList();",
    "db_name": "hr_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,46): error CS0019: Operator '-' cannot be applied to operands of type 'DateOnly' and 'DateOnly' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.33"
  },
  {
    "query": "SELECT T1.firstname , T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.Rate - T2.basePrice > 0",
    "result": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Rate - row.T2.BasePrice > 0).Select(row => new { row.T1.FirstName, row.T1.LastName }).ToList();",
    "db_name": "inn_1",
    "status": "Passed",
    "error": null
  }
]