[
  {
    "query": "SELECT count(*) FROM browser WHERE market_share >= 5",
    "result": "context.Browsers.Where(row => row.MarketShare >= 5).Count();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT name FROM browser ORDER BY market_share DESC",
    "result": "context.Browsers.OrderByDescending(row => row.MarketShare).Select(row => new { row.Name }).ToList();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT id , name , market_share FROM browser",
    "result": "context.Browsers.Select(row => new { row.Id, row.Name, row.MarketShare }).ToList();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT max(market_share) , min(market_share) , avg(market_share) FROM browser",
    "result": "context.Browsers.GroupBy(row => 1).Select(group => new { MaxMarketShare = group.Select(row => row.MarketShare).Max(), MinMarketShare = group.Select(row => row.MarketShare).Min(), AverageMarketShare = group.Select(row => row.MarketShare).Average() }).ToList();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT id , market_share FROM browser WHERE name = 'Safari'",
    "result": "context.Browsers.Where(row => row.Name == \"Safari\").Select(row => new { row.Id, row.MarketShare }).ToList();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT name , operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
    "result": "context.WebClientAccelerators.Where(row => row.Connection != \"Broadband\").Select(row => new { row.Name, row.OperatingSystem }).ToList();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998",
    "result": "context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T2.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"CProxy\" && row.T2.CompatibleSinceYear > 1998).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count(*) >= 2",
    "result": "context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT T1.id , T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name }).Take(1).ToList();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'",
    "result": "context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"CACHEbox\" && row.T2.Name == \"Internet Explorer\").Select(row => new { row.T1.CompatibleSinceYear }).ToList();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT count(DISTINCT client) FROM web_client_accelerator",
    "result": "context.WebClientAccelerators.Select(row => row.Client).Distinct().Count();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );",
    "result": "context.WebClientAccelerators.Where(row => !context.AcceleratorCompatibleBrowsers.Select(row => row.AcceleratorId).Contains(row.Id)).Count();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15;",
    "result": "context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.MarketShare > 15).Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'",
    "result": "context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"CACHEbox\").Select(row => row.T3.Name).Intersect(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Fasterfox\").Select(row => row.T3.Name)).ToList();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT name , operating_system FROM web_client_accelerator EXCEPT SELECT T1.name , T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'",
    "result": "context.WebClientAccelerators.Select(row => new { row.Name, row.OperatingSystem }).Except(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Opera\").Select(row => new { row.T1.Name, row.T1.OperatingSystem })).ToList();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
    "result": "context.WebClientAccelerators.Where(row => EF.Functions.Like(row.Name, \"%Opera%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system",
    "result": "context.WebClientAccelerators.GroupBy(row => new { row.OperatingSystem }).Select(group => new { group.Key.OperatingSystem, Count = group.Count() }).ToList();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT T2.name , T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id ORDER BY T1.compatible_since_year DESC",
    "result": "context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T1.CompatibleSinceYear).Select(row => new { T2Name = row.T2.Name, T3Name = row.T3.Name }).ToList();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT count(*) FROM HOTELS",
    "result": "context.Hotels.Count();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT price_range FROM HOTELS",
    "result": "context.Hotels.Select(row => new { row.PriceRange }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT DISTINCT Location_Name FROM LOCATIONS",
    "result": "context.Locations.Select(row => new { row.LocationName }).Distinct().ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT Name , Other_Details FROM Staff",
    "result": "context.Staff.Select(row => new { row.Name, row.OtherDetails }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT Tourist_Details FROM VISITORS",
    "result": "context.Visitors.Select(row => new { row.TouristDetails }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT price_range FROM HOTELS WHERE star_rating_code = \"5\"",
    "result": "context.Hotels.Where(row => row.StarRatingCode == \"5\").Select(row => new { row.PriceRange }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code = \"5\" AND pets_allowed_yn = 1",
    "result": "context.Hotels.Where(row => row.StarRatingCode == \"5\" && row.PetsAllowedYn == true).Select(row => row.PriceRange).Average();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT Address FROM LOCATIONS WHERE Location_Name = \"UK Gallery\"",
    "result": "context.Locations.Where(row => row.LocationName == \"UK Gallery\").Select(row => new { row.Address }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name = \"UK Gallery\"",
    "result": "context.Locations.Where(row => row.LocationName == \"UK Gallery\").Select(row => new { row.OtherDetails }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"",
    "result": "context.Locations.Where(row => EF.Functions.Like(row.LocationName, \"%film%\")).Select(row => new { row.LocationName }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT count(DISTINCT Name) FROM PHOTOS",
    "result": "context.Photos.Select(row => row.Name).Distinct().Count();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT DISTINCT Visit_Date FROM VISITS",
    "result": "context.Visits.Select(row => new { row.VisitDate }).Distinct().ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\"",
    "result": "context.TouristAttractions.Where(row => row.HowToGetThere == \"bus\").Select(row => new { row.Name }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT Name , Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\" OR How_to_Get_There = \"walk\"",
    "result": "context.TouristAttractions.Where(row => row.HowToGetThere == \"bus\" || row.HowToGetThere == \"walk\").Select(row => new { row.Name, row.OpeningHours }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.price_range > 10000",
    "result": "context.Hotels.Join(context.RefHotelStarRatings, T1 => T1.StarRatingCode, T2 => T2.StarRatingCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PriceRange > 10000).Select(row => new { row.T2.StarRatingDescription }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID",
    "result": "context.Museums.Join(context.TouristAttractions, T1 => T1.MuseumId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.MuseumDetails, row.T2.OpeningHours }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = \"game1\"",
    "result": "context.Photos.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"game1\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T1.Name , T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"film festival\"",
    "result": "context.Photos.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"film festival\").Select(row => new { row.T1.Name, row.T1.Description }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T1.Royal_Family_Details , T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID",
    "result": "context.RoyalFamilies.Join(context.TouristAttractions, T1 => T1.RoyalFamilyId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.RoyalFamilyDetails, row.T2.HowToGetThere }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\"",
    "result": "context.Shops.Join(context.TouristAttractions, T1 => T1.ShopId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.HowToGetThere == \"walk\").Select(row => new { row.T1.ShopDetails }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"US museum\"",
    "result": "context.Staff.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"US museum\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\" OR T2.How_to_Get_There = \"bus\"",
    "result": "context.StreetMarkets.Join(context.TouristAttractions, T1 => T1.MarketId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.HowToGetThere == \"walk\" || row.T2.HowToGetThere == \"bus\").Select(row => new { row.T1.MarketDetails }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T2.Visit_Date , T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE T1.Tourist_Details = \"Vincent\"",
    "result": "context.Visitors.Join(context.Visits, T1 => T1.TouristId, T2 => T2.TouristId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.TouristDetails == \"Vincent\").Select(row => new { row.T2.VisitDate, row.T2.VisitDetails }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = \"Vincent\"",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Join(context.Visitors, joined => joined.T2.TouristId, T3 => T3.TouristId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.TouristDetails == \"Vincent\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T1.Name , T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" OR T2.Tourist_Details = \"Vivian\"",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Vincent\" || row.T2.TouristDetails == \"Vivian\").Select(row => new { row.T1.Name, row.T3.VisitDate }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code",
    "result": "context.Hotels.GroupBy(row => new { row.StarRatingCode }).Select(group => new { group.Key.StarRatingCode, AveragePriceRange = group.Select(row => row.PriceRange).Average() }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT pets_allowed_yn , avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
    "result": "context.Hotels.GroupBy(row => new { row.PetsAllowedYn }).Select(group => new { group.Key.PetsAllowedYn, AveragePriceRange = group.Select(row => row.PriceRange).Average() }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT hotel_id , star_rating_code FROM HOTELS ORDER BY price_range ASC",
    "result": "context.Hotels.OrderBy(row => row.PriceRange).Select(row => new { row.HotelId, row.StarRatingCode }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3",
    "result": "context.Hotels.OrderByDescending(row => row.PriceRange).Select(row => new { row.OtherHotelDetails }).Take(3).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT other_hotel_details , star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
    "result": "context.Hotels.OrderBy(row => row.PriceRange).Select(row => new { row.OtherHotelDetails, row.StarRatingCode }).Take(3).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.TouristAttractions.GroupBy(row => new { row.HowToGetThere }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.HowToGetThere }).Take(1).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T1.Attraction_Type_Description , T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.RefAttractionTypes.Join(context.TouristAttractions, T1 => T1.AttractionTypeCode, T2 => T2.AttractionTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AttractionTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.AttractionTypeDescription, group.Key.AttractionTypeCode }).Take(1).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
    "result": "context.TouristAttractions.GroupBy(row => new { row.HowToGetThere }).Select(group => new { group.Key.HowToGetThere, Count = group.Count() }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T1.Name , T2.Tourist_Attraction_ID , COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId, Count = group.Count() }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) >= 2",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) <= 1",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Where(group => group.Count() <= 1).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"660 Shea Crescent\" OR T2.How_to_Get_There = \"walk\"",
    "result": "context.Locations.Join(context.TouristAttractions, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Address == \"660 Shea Crescent\" || row.T2.HowToGetThere == \"walk\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"254 Ottilie Junction\" OR T2.How_to_Get_There = \"bus\"",
    "result": "context.Locations.Join(context.TouristAttractions, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Address == \"254 Ottilie Junction\" || row.T2.HowToGetThere == \"bus\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Marcelle\"",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Vincent\").Select(row => row.T1.Name).Intersect(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Marcelle\").Select(row => row.T1.Name)).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Rosalind\"",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Alison\").Select(row => row.T1.Name).Except(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Rosalind\").Select(row => row.T1.Name)).ToList();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
    "result": "context.Visitors.Where(row => !context.Visits.Select(row => row.TouristId).Contains(row.TouristId)).Count();",
    "db_name": "cre_Theme_park"
  },
  {
    "query": "SELECT date FROM weather WHERE max_temperature_f > 85",
    "result": "context.Weathers.Where(row => row.MaxTemperatureF > 85).Select(row => new { row.Date }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT name FROM station WHERE lat < 37.5",
    "result": "context.Stations.Where(row => row.Lat < 37.5).Select(row => new { row.Name }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT city , max(lat) FROM station GROUP BY city",
    "result": "context.Stations.GroupBy(row => new { row.City }).Select(group => new { group.Key.City, MaxLat = group.Select(row => row.Lat).Max() }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3",
    "result": "context.Trips.OrderBy(row => row.Id).Select(row => new { row.StartStationName, row.EndStationName }).Take(3).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT avg(lat) , avg(long) FROM station WHERE city = \"San Jose\"",
    "result": "context.Stations.Where(row => row.City == \"San Jose\").GroupBy(row => 1).Select(group => new { AverageLat = group.Select(row => row.Lat).Average(), AverageLong = group.Select(row => row.Long).Average() }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
    "result": "context.Trips.OrderBy(row => row.Duration).Select(row => new { row.Id }).Take(1).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT sum(duration) , max(duration) FROM trip WHERE bike_id = 636",
    "result": "context.Trips.Where(row => row.BikeId == 636).GroupBy(row => 1).Select(group => new { SumDuration = group.Select(row => row.Duration).Sum(), MaxDuration = group.Select(row => row.Duration).Max() }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT zip_code , avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
    "result": "context.Weathers.Where(row => EF.Functions.Like(row.Date, \"8/%\")).GroupBy(row => new { row.ZipCode }).Select(group => new { group.Key.ZipCode, AverageMeanTemperatureF = group.Select(row => row.MeanTemperatureF).Average() }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT count(DISTINCT bike_id) FROM trip",
    "result": "context.Trips.Select(row => row.BikeId).Distinct().Count();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT count(DISTINCT city) FROM station",
    "result": "context.Stations.Select(row => row.City).Distinct().Count();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT COUNT(*) FROM station WHERE city = \"Mountain View\"",
    "result": "context.Stations.Where(row => row.City == \"Mountain View\").Count();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7",
    "result": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BikesAvailable == 7).Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Trips.Where(row => EF.Functions.Like(row.StartDate, \"8/%\")).GroupBy(row => new { row.StartStationName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StartStationName, group.First().StartStationId }).Take(1).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Trips.Where(row => row.ZipCode == 94002).GroupBy(row => new { row.BikeId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BikeId }).Take(1).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8",
    "result": "context.Weathers.Where(row => row.MeanHumidity > 50 && row.MeanVisibilityMiles > 8).Count();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1",
    "result": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Duration).Select(row => new { row.T1.Lat, row.T1.Long, row.T1.City }).Take(1).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10",
    "result": "context.Stations.Where(row => row.City == \"San Francisco\").Select(row => row.Id).Intersect(context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Average(row => row.BikesAvailable) > 10).Select(group => group.Key.StationId)).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available) > 14 UNION SELECT name , id FROM station WHERE installation_date LIKE \"12/%\"",
    "result": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StationId }).Where(group => group.Average(row => row.T2.BikesAvailable) > 14).Select(group => new { group.First().T1.Name, group.First().T1.Id }).Union(context.Stations.Where(row => EF.Functions.Like(row.InstallationDate, \"12/%\")).Select(row => new { row.Name, row.Id })).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
    "result": "context.Weathers.Where(row => row.ZipCode == 94107).GroupBy(row => new { row.CloudCover }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CloudCover }).Take(3).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
    "result": "context.Weathers.GroupBy(row => new { row.ZipCode }).OrderBy(group => group.Average(row => row.MeanSeaLevelPressureInches)).Select(group => new { group.Key.ZipCode }).Take(1).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city = \"Palo Alto\")",
    "result": "context.Statuses.Where(row => !context.Stations.Where(row => row.City == \"Palo Alto\").Select(row => row.Id).Contains(row.StationId)).Select(row => row.BikesAvailable).Average();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available) > 10)",
    "result": "context.Stations.Where(row => !context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Max(row => row.BikesAvailable) > 10).Select(group => group.Key.StationId).Contains(row.Id)).Select(row => row.Long).Average();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT date , zip_code FROM weather WHERE max_temperature_f >= 80",
    "result": "context.Weathers.Where(row => row.MaxTemperatureF >= 80).Select(row => new { row.Date, row.ZipCode }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f) > 60",
    "result": "context.Trips.Join(context.Weathers, T1 => T1.ZipCode, T2 => T2.ZipCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ZipCode }).Where(group => group.Average(row => row.T2.MeanTemperatureF) > 60).Select(group => new { group.First().T1.Id }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code",
    "result": "context.Weathers.Where(row => row.MaxWindSpeedMph >= 25).GroupBy(row => new { row.ZipCode }).Select(group => new { group.Key.ZipCode, Count = group.Count() }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT date , zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)",
    "result": "context.Weathers.Where(row => row.MinDewPointF < context.Weathers.Where(row => row.ZipCode == 94107).Select(row => row.MinDewPointF).Min()).Select(row => new { row.Date, row.ZipCode }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT T1.id , T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id",
    "result": "context.Trips.Join(context.Stations, T1 => T1.EndStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Id, row.T2.InstallationDate }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1",
    "result": "context.Trips.Join(context.Stations, T1 => T1.StartStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.DockCount).Select(row => new { row.T1.Id }).Take(1).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != \"San Francisco\"",
    "result": "context.Trips.Join(context.Stations, T1 => T1.EndStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City != \"San Francisco\").Count();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
    "result": "context.Weathers.Where(row => row.ZipCode == 94107 && row.Events != \"Fog\" && row.Events != \"Rain\").Select(row => new { row.Date }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available) < 7",
    "result": "context.Stations.Where(row => row.Lat > 37.4).Select(row => row.Id).Except(context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Min(row => row.BikesAvailable) < 7).Select(group => group.Key.StationId)).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\"",
    "result": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StationId }).Where(group => group.Average(row => row.T2.BikesAvailable) > 10).Select(group => group.First().T1.Name).Except(context.Stations.Where(row => row.City == \"San Jose\").Select(row => row.Name)).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT name , lat , city FROM station ORDER BY lat LIMIT 1",
    "result": "context.Stations.OrderBy(row => row.Lat).Select(row => new { row.Name, row.Lat, row.City }).Take(1).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
    "result": "context.Weathers.OrderByDescending(row => row.MaxGustSpeedMph).Select(row => new { row.Date, row.MeanTemperatureF, row.MeanHumidity }).Take(3).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT city , COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15",
    "result": "context.Stations.GroupBy(row => new { row.City }).Where(group => group.Count() >= 15).Select(group => new { group.Key.City, Count = group.Count() }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200",
    "result": "context.Trips.GroupBy(row => new { row.StartStationName }).Where(group => group.Count() >= 200).Select(group => new { group.First().StartStationId, group.Key.StartStationName }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles) < 10",
    "result": "context.Weathers.GroupBy(row => new { row.ZipCode }).Where(group => group.Average(row => row.MeanVisibilityMiles) < 10).Select(group => new { group.Key.ZipCode }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
    "result": "context.Stations.GroupBy(row => new { row.City }).OrderByDescending(group => group.Max(row => row.Lat)).Select(group => new { group.Key.City }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT date , cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
    "result": "context.Weathers.OrderByDescending(row => row.CloudCover).Select(row => new { row.Date, row.CloudCover }).Take(5).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
    "result": "context.Trips.OrderByDescending(row => row.Duration).Select(row => new { row.Id, row.Duration }).Take(3).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT T1.name , T1.long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
    "result": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StartStationId }).Select(group => new { group.First().T1.Name, group.First().T1.Long, AverageDuration = group.Select(row => row.T2.Duration).Average() }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT T1.name , T1.lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id",
    "result": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.EndStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.EndStationId }).Select(group => new { group.OrderBy(row => row.T2.Duration).First().T1.Name, group.OrderBy(row => row.T2.Duration).First().T1.Lat, MinDuration = group.Select(row => row.T2.Duration).Min() }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100",
    "result": "context.Trips.Where(row => row.Duration < 100).Select(row => new { row.StartStationName }).Distinct().ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70",
    "result": "context.Weathers.Select(row => row.ZipCode).Distinct().Except(context.Weathers.Where(row => row.MaxDewPointF >= 70).Select(row => row.ZipCode).Distinct()).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = 94103)",
    "result": "context.Trips.Where(row => row.Duration >= context.Trips.Where(row => row.ZipCode == 94103).Select(row => row.Duration).Average()).Select(row => new { row.Id }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
    "result": "context.Weathers.Where(row => row.MeanSeaLevelPressureInches >= 30.3 && row.MeanSeaLevelPressureInches <= 31).Select(row => new { row.Date }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT date , max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
    "result": "context.Weathers.Select(row => new { row.Date, Diff = row.MaxTemperatureF - row.MinTemperatureF }).OrderBy(row => row.Diff).Take(1).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT DISTINCT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12",
    "result": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BikesAvailable > 12).Select(row => new { row.T1.Id, row.T1.Name }).Distinct().ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*) >= 100",
    "result": "context.Weathers.GroupBy(row => new { row.ZipCode }).Where(group => group.Average(row => row.MeanHumidity) < 70).Select(group => group.Key.ZipCode).Intersect(context.Trips.GroupBy(row => new { row.ZipCode }).Where(group => group.Count() >= 100).Select(group => group.Key.ZipCode)).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 100",
    "result": "context.Stations.Where(row => row.City == \"Palo Alto\").Select(row => row.Name).Except(context.Trips.GroupBy(row => new { row.EndStationName }).Where(group => group.Count() > 100).Select(group => group.Key.EndStationName)).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = \"Mountain View\" AND T3.city = \"Palo Alto\"",
    "result": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).Join(context.Trips, joined => joined.T2.Id, T4 => T4.Id, (joined, T4) => new { joined.T1, joined.T2, T4 }).Join(context.Stations, joined => joined.T4.EndStationId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, joined.T4, T3 }).Where(row => row.T1.City == \"Mountain View\" && row.T3.City == \"Palo Alto\").Count();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT avg(T1.lat) , avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id",
    "result": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => 1).Select(group => new { AverageLat = group.Select(row => row.T1.Lat).Average(), AverageLong = group.Select(row => row.T1.Long).Average() }).ToList();",
    "db_name": "bike_1"
  },
  {
    "query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800",
    "result": "context.Cinemas.Select(row => row.Location).Except(context.Cinemas.Where(row => row.Capacity > 800).Select(row => row.Location)).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011",
    "result": "context.Cinemas.Where(row => row.OpenningYear == 2010).Select(row => row.Location).Intersect(context.Cinemas.Where(row => row.OpenningYear == 2011).Select(row => row.Location)).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT count(*) FROM cinema",
    "result": "context.Cinemas.Count();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT name , openning_year , capacity FROM cinema",
    "result": "context.Cinemas.Select(row => new { row.Name, row.OpenningYear, row.Capacity }).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT name , LOCATION FROM cinema WHERE capacity > (SELECT avg(capacity) FROM cinema)",
    "result": "context.Cinemas.Where(row => row.Capacity > context.Cinemas.Select(row => row.Capacity).Average()).Select(row => new { row.Name, row.Location }).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT DISTINCT LOCATION FROM cinema",
    "result": "context.Cinemas.Select(row => new { row.Location }).Distinct().ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT name , openning_year FROM cinema ORDER BY openning_year DESC",
    "result": "context.Cinemas.OrderByDescending(row => row.OpenningYear).Select(row => new { row.Name, row.OpenningYear }).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT name , LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
    "result": "context.Cinemas.OrderByDescending(row => row.Capacity).Select(row => new { row.Name, row.Location }).Take(1).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT avg(capacity) , min(capacity) , max(capacity) FROM cinema WHERE openning_year >= 2011",
    "result": "context.Cinemas.Where(row => row.OpenningYear >= 2011).GroupBy(row => 1).Select(group => new { AverageCapacity = group.Select(row => row.Capacity).Average(), MinCapacity = group.Select(row => row.Capacity).Min(), MaxCapacity = group.Select(row => row.Capacity).Max() }).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT LOCATION , count(*) FROM cinema GROUP BY LOCATION",
    "result": "context.Cinemas.GroupBy(row => new { row.Location }).Select(group => new { group.Key.Location, Count = group.Count() }).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Cinemas.Where(row => row.OpenningYear >= 2010).GroupBy(row => new { row.Location }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Location }).Take(1).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) >= 2",
    "result": "context.Cinemas.Where(row => row.Capacity > 300).GroupBy(row => new { row.Location }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Location }).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT title , directed_by FROM film",
    "result": "context.Films.Select(row => new { row.Title, row.DirectedBy }).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT DISTINCT directed_by FROM film",
    "result": "context.Films.Select(row => new { row.DirectedBy }).Distinct().ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT directed_by , count(*) FROM film GROUP BY directed_by",
    "result": "context.Films.GroupBy(row => new { row.DirectedBy }).Select(group => new { group.Key.DirectedBy, Count = group.Count() }).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT T2.name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id",
    "result": "context.Schedules.Join(context.Cinemas, T1 => T1.CinemaId, T2 => T2.CinemaId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CinemaId }).Select(group => new { group.First().T2.Name, SumShowTimesPerDay = group.Select(row => row.T1.ShowTimesPerDay).Sum() }).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT T2.title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id",
    "result": "context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FilmId }).Select(group => new { group.OrderByDescending(row => row.T1.Price).First().T2.Title, MaxPrice = group.Select(row => row.T1.Price).Max() }).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT T3.name , T2.title , T1.date , T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id",
    "result": "context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).Join(context.Cinemas, joined => joined.T1.CinemaId, T3 => T3.CinemaId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Name, row.T2.Title, row.T1.Date, row.T1.Price }).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT title , directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
    "result": "context.Films.Where(row => !context.Schedules.Select(row => row.FilmId).Contains(row.FilmId)).Select(row => new { row.Title, row.DirectedBy }).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
    "result": "context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DirectedBy }).OrderByDescending(group => group.Sum(row => row.T1.ShowTimesPerDay)).Select(group => new { group.Key.DirectedBy }).Take(1).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) > 1",
    "result": "context.Cinemas.Where(row => row.Capacity > 300).GroupBy(row => new { row.Location }).Where(group => group.Count() > 1).Select(group => new { group.Key.Location }).ToList();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
    "result": "context.Films.Where(row => EF.Functions.Like(row.Title, \"%Dummy%\")).Count();",
    "db_name": "cinema"
  },
  {
    "query": "SELECT count(*) FROM COURSE",
    "result": "context.Courses.Count();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT count(*) FROM COURSE WHERE Credits > 2",
    "result": "context.Courses.Where(row => row.Credits > 2).Count();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT CName FROM COURSE WHERE Credits = 1",
    "result": "context.Courses.Where(row => row.Credits == 1).Select(row => new { row.Cname }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT CName FROM COURSE WHERE Days = \"MTW\"",
    "result": "context.Courses.Where(row => row.Days == \"MTW\").Select(row => new { row.Cname }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT count(*) FROM DEPARTMENT WHERE Division = \"AS\"",
    "result": "context.Departments.Where(row => row.Division == \"AS\").Count();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT DPhone FROM DEPARTMENT WHERE Room = 268",
    "result": "context.Departments.Where(row => row.Room == 268).Select(row => new { row.Dphone }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade = \"B\"",
    "result": "context.EnrolledIns.Where(row => row.Grade == \"B\").Select(row => row.StuId).Distinct().Count();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT max(gradepoint) , min(gradepoint) FROM GRADECONVERSION",
    "result": "context.Gradeconversions.GroupBy(row => 1).Select(group => new { MaxGradepoint = group.Select(row => row.Gradepoint).Max(), MinGradepoint = group.Select(row => row.Gradepoint).Min() }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
    "result": "context.Students.Where(row => EF.Functions.Like(row.Fname, \"%a%\")).Select(row => new { row.Fname }).Distinct().ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT Fname , Lname FROM FACULTY WHERE sex = \"M\" AND Building = \"NEB\"",
    "result": "context.Faculties.Where(row => row.Sex == \"M\" && row.Building == \"NEB\").Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT Room FROM FACULTY WHERE Rank = \"Professor\" AND Building = \"NEB\"",
    "result": "context.Faculties.Where(row => row.Rank == \"Professor\" && row.Building == \"NEB\").Select(row => new { row.Room }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT DName FROM DEPARTMENT WHERE Building = \"Mergenthaler\"",
    "result": "context.Departments.Where(row => row.Building == \"Mergenthaler\").Select(row => new { row.Dname }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT * FROM COURSE ORDER BY Credits",
    "result": "context.Courses.OrderBy(row => row.Credits).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT CName FROM COURSE ORDER BY Credits",
    "result": "context.Courses.OrderBy(row => row.Credits).Select(row => new { row.Cname }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT Fname FROM STUDENT ORDER BY Age DESC",
    "result": "context.Students.OrderByDescending(row => row.Age).Select(row => new { row.Fname }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT LName FROM STUDENT WHERE Sex = \"F\" ORDER BY Age DESC",
    "result": "context.Students.Where(row => row.Sex == \"F\").OrderByDescending(row => row.Age).Select(row => new { row.Lname }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT Lname FROM FACULTY WHERE Building = \"Barton\" ORDER BY Lname",
    "result": "context.Faculties.Where(row => row.Building == \"Barton\").OrderBy(row => row.Lname).Select(row => new { row.Lname }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT Fname FROM FACULTY WHERE Rank = \"Professor\" ORDER BY Fname",
    "result": "context.Faculties.Where(row => row.Rank == \"Professor\").OrderBy(row => row.Fname).Select(row => new { row.Fname }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Departments.Join(context.MinorIns, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Dno }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Dname }).Take(1).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO",
    "result": "context.Departments.Select(row => row.Dname).Except(context.Departments.Join(context.MinorIns, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Dname)).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Departments.Join(context.MemberOfs, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Dno }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.Dname }).Take(1).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Faculties.GroupBy(row => new { row.Rank }).OrderBy(group => group.Count()).Select(group => new { group.Key.Rank }).Take(1).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
    "result": "context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Instructor }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Fname, group.First().T2.Lname }).Take(3).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Instructor }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Building }).Take(1).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT(*) >= 5",
    "result": "context.Courses.Join(context.EnrolledIns, T1 => T1.Cid, T2 => T2.Cid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Cid }).Where(group => group.Count() >= 5).Select(group => new { group.First().T1.Cname }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE T1.CName = \"COMPUTER LITERACY\"",
    "result": "context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Cname == \"COMPUTER LITERACY\").Select(row => new { row.T2.Fname, row.T2.Lname }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT T2.Dname , T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = \"INTRODUCTION TO COMPUTER SCIENCE\"",
    "result": "context.Courses.Join(context.Departments, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Cname == \"INTRODUCTION TO COMPUTER SCIENCE\").Select(row => new { row.T2.Dname, row.T2.Room }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT T3.Fname , T3.LName , T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID",
    "result": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Fname, row.T3.Lname, row.T2.Gradepoint }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T2.gradepoint >= 3.8",
    "result": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Gradepoint >= 3.8).Select(row => new { row.T3.Fname }).Distinct().ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT T1.Fname , T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520",
    "result": "context.Faculties.Join(context.MemberOfs, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Dno == 520).Select(row => new { row.T1.Fname, row.T1.Lname }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT T2.Fname , T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE T1.DNO = 140",
    "result": "context.MinorIns.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Dno == 140).Select(row => new { row.T2.Fname, row.T2.Lname }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = \"Computer Science\"",
    "result": "context.Departments.Join(context.MemberOfs, T1 => T1.Dno, T3 => T3.Dno, (T1, T3) => new { T1, T3 }).Join(context.Faculties, joined => joined.T3.FacId, T2 => T2.FacId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T1.Dname == \"Computer Science\").Select(row => new { row.T2.Lname }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = \"Smith\"",
    "result": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Lname == \"Smith\").Select(row => row.T2.Gradepoint).Average();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT max(T2.gradepoint) , min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = \"NYC\"",
    "result": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CityCode == \"NYC\").GroupBy(row => 1).Select(group => new { MaxGradepointT2 = group.Select(row => row.T2.Gradepoint).Max(), MinGradepointT2 = group.Select(row => row.T2.Gradepoint).Min() }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT CName FROM COURSE WHERE Credits = 3 UNION SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4",
    "result": "context.Courses.Where(row => row.Credits == 3).Select(row => row.Cname).Union(context.Courses.Where(row => row.Credits == 1 && row.Hours == \"4\").Select(row => row.Cname)).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT DName FROM DEPARTMENT WHERE Division = \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division = \"EN\" AND Building = \"NEB\"",
    "result": "context.Departments.Where(row => row.Division == \"AS\").Select(row => row.Dname).Union(context.Departments.Where(row => row.Division == \"EN\" && row.Building == \"NEB\").Select(row => row.Dname)).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
    "result": "context.Students.Where(row => !context.EnrolledIns.Select(row => row.StuId).Contains(row.StuId)).Select(row => new { row.Fname }).ToList();",
    "db_name": "college_3"
  },
  {
    "query": "SELECT count(*) FROM candidate",
    "result": "context.Candidates.Count();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Candidates.GroupBy(row => new { row.PollSource }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PollSource }).Take(1).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
    "result": "context.Candidates.OrderByDescending(row => row.SupportRate).Select(row => new { row.SupportRate }).Take(3).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
    "result": "context.Candidates.OrderBy(row => row.OpposeRate).Select(row => new { row.CandidateId }).Take(1).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT Support_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY unsure_rate",
    "result": "context.Candidates.OrderBy(row => row.UnsureRate).Select(row => new { row.SupportRate, row.ConsiderRate, row.OpposeRate }).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
    "result": "context.Candidates.OrderByDescending(row => row.OpposeRate).Select(row => new { row.PollSource }).Take(1).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT name FROM people ORDER BY date_of_birth",
    "result": "context.People.OrderBy(row => row.DateOfBirth).Select(row => new { row.Name }).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT avg(height) , avg(weight) FROM people WHERE sex = 'M'",
    "result": "context.People.Where(row => row.Sex == \"M\").GroupBy(row => 1).Select(group => new { AverageHeight = group.Select(row => row.Height).Average(), AverageWeight = group.Select(row => row.Weight).Average() }).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT name FROM people WHERE height > 200 OR height < 190",
    "result": "context.People.Where(row => row.Height > 200 || row.Height < 190).Select(row => new { row.Name }).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT avg(weight) , min(weight) , sex FROM people GROUP BY sex",
    "result": "context.People.GroupBy(row => new { row.Sex }).Select(group => new { AverageWeight = group.Select(row => row.Weight).Average(), MinWeight = group.Select(row => row.Weight).Min(), group.Key.Sex }).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT t1.name , t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
    "result": "context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t2.SupportRate).Select(row => new { row.t1.Name, row.t1.Sex }).Take(1).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT t1.name , t1.sex , min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex",
    "result": "context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.Sex }).Select(group => new { group.OrderBy(row => row.t2.OpposeRate).First().t1.Name, group.Key.Sex, MinOpposeRate = group.Select(row => row.t2.OpposeRate).Min() }).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
    "result": "context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.Sex }).OrderByDescending(group => group.Average(row => row.t2.UnsureRate)).Select(group => new { group.Key.Sex }).Take(1).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)",
    "result": "context.People.Where(row => !context.Candidates.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate < t2.oppose_rate",
    "result": "context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.SupportRate < row.t2.OpposeRate).Select(row => new { row.t1.Name }).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT count(*) , sex FROM people WHERE weight > 85 GROUP BY sex",
    "result": "context.People.Where(row => row.Weight > 85).GroupBy(row => new { row.Sex }).Select(group => new { Count = group.Count(), group.Key.Sex }).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT max(support_rate) , min(consider_rate) , min(oppose_rate) FROM candidate",
    "result": "context.Candidates.GroupBy(row => 1).Select(group => new { MaxSupportRate = group.Select(row => row.SupportRate).Max(), MinConsiderRate = group.Select(row => row.ConsiderRate).Min(), MinOpposeRate = group.Select(row => row.OpposeRate).Min() }).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name",
    "result": "context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Sex == \"F\").OrderBy(row => row.t1.Name).Select(row => new { row.t1.Name }).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT name FROM people WHERE height < (SELECT avg(height) FROM people)",
    "result": "context.People.Where(row => row.Height < context.People.Select(row => row.Height).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT * FROM people",
    "result": "context.People.ToList();",
    "db_name": "candidate_poll"
  },
  {
    "query": "SELECT document_status_code FROM Ref_Document_Status;",
    "result": "context.RefDocumentStatuses.Select(row => new { row.DocumentStatusCode }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";",
    "result": "context.RefDocumentStatuses.Where(row => row.DocumentStatusCode == \"working\").Select(row => new { row.DocumentStatusDescription }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT document_type_code FROM Ref_Document_Types;",
    "result": "context.RefDocumentTypes.Select(row => new { row.DocumentTypeCode }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";",
    "result": "context.RefDocumentTypes.Where(row => row.DocumentTypeCode == \"Paper\").Select(row => new { row.DocumentTypeDescription }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;",
    "result": "context.RefShippingAgents.Select(row => new { row.ShippingAgentName }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";",
    "result": "context.RefShippingAgents.Where(row => row.ShippingAgentName == \"UPS\").Select(row => new { row.ShippingAgentCode }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT role_code FROM ROLES;",
    "result": "context.Roles.Select(row => new { row.RoleCode }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";",
    "result": "context.Roles.Where(row => row.RoleCode == \"ED\").Select(row => new { row.RoleDescription }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT count(*) FROM Employees;",
    "result": "context.Employees.Count();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";",
    "result": "context.Roles.Join(context.Employees, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EmployeeName == \"Koby\").Select(row => new { row.T1.RoleDescription }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT document_id , receipt_date FROM Documents;",
    "result": "context.Documents.Select(row => new { row.DocumentId, row.ReceiptDate }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT T1.role_description , T2.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;",
    "result": "context.Roles.Join(context.Employees, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.RoleCode }).Select(group => new { group.First().T1.RoleDescription, group.Key.RoleCode, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id) > 1;",
    "result": "context.Roles.Join(context.Employees, Roles => Roles.RoleCode, Employees => Employees.RoleCode, (Roles, Employees) => new { Roles, Employees }).GroupBy(row => new { row.Employees.RoleCode }).Select(group => new { group.First().Roles.RoleDescription, CountEmployeeId = group.Select(row => row.Employees.EmployeeId).Count() }).Where(group => group.CountEmployeeId > 1).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;",
    "result": "context.RefDocumentStatuses.Join(context.Documents, RefDocumentStatuses => RefDocumentStatuses.DocumentStatusCode, Documents => Documents.DocumentStatusCode, (RefDocumentStatuses, Documents) => new { RefDocumentStatuses, Documents }).Where(row => row.Documents.DocumentId == 1).Select(row => new { row.RefDocumentStatuses.DocumentStatusDescription }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT count(*) FROM Documents WHERE document_status_code = \"done\";",
    "result": "context.Documents.Where(row => row.DocumentStatusCode == \"done\").Count();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT document_type_code FROM Documents WHERE document_id = 2;",
    "result": "context.Documents.Where(row => row.DocumentId == 2).Select(row => new { row.DocumentTypeCode }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";",
    "result": "context.Documents.Where(row => row.DocumentStatusCode == \"done\" && row.DocumentTypeCode == \"Paper\").Select(row => new { row.DocumentId }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;",
    "result": "context.RefShippingAgents.Join(context.Documents, RefShippingAgents => RefShippingAgents.ShippingAgentCode, Documents => Documents.ShippingAgentCode, (RefShippingAgents, Documents) => new { RefShippingAgents, Documents }).Where(row => row.Documents.DocumentId == 2).Select(row => new { row.RefShippingAgents.ShippingAgentName }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
    "result": "context.RefShippingAgents.Join(context.Documents, RefShippingAgents => RefShippingAgents.ShippingAgentCode, Documents => Documents.ShippingAgentCode, (RefShippingAgents, Documents) => new { RefShippingAgents, Documents }).Where(row => row.RefShippingAgents.ShippingAgentName == \"USPS\").Count();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
    "result": "context.RefShippingAgents.Join(context.Documents, RefShippingAgents => RefShippingAgents.ShippingAgentCode, Documents => Documents.ShippingAgentCode, (RefShippingAgents, Documents) => new { RefShippingAgents, Documents }).GroupBy(row => new { row.RefShippingAgents.ShippingAgentCode }).Select(group => new { group.First().RefShippingAgents.ShippingAgentName, CountDocumentId = group.Select(row => row.Documents.DocumentId).Count() }).OrderByDescending(group => group.CountDocumentId).Take(1).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT receipt_date FROM Documents WHERE document_id = 3;",
    "result": "context.Documents.Where(row => row.DocumentId == 3).Select(row => new { row.ReceiptDate }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;",
    "result": "context.Addresses.Join(context.DocumentsMaileds, Addresses => Addresses.AddressId, DocumentsMaileds => DocumentsMaileds.MailedToAddressId, (Addresses, DocumentsMaileds) => new { Addresses, DocumentsMaileds }).Where(row => row.DocumentsMaileds.DocumentId == 4).Select(row => new { row.Addresses.AddressDetails }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;",
    "result": "context.DocumentsMaileds.Where(row => row.DocumentId == 7).Select(row => new { row.MailingDate }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
    "result": "context.Documents.Where(row => row.DocumentStatusCode == \"done\" && row.DocumentTypeCode == \"Paper\").Select(row => row.DocumentId).Except(context.Documents.Join(context.RefShippingAgents, Documents => Documents.ShippingAgentCode, RefShippingAgents => RefShippingAgents.ShippingAgentCode, (Documents, RefShippingAgents) => new { Documents, RefShippingAgents }).Where(row => row.RefShippingAgents.ShippingAgentName == \"USPS\").Select(row => row.Documents.DocumentId)).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
    "result": "context.Documents.Where(row => row.DocumentStatusCode == \"done\" && row.DocumentTypeCode == \"Paper\").Select(row => row.DocumentId).Intersect(context.Documents.Join(context.RefShippingAgents, Documents => Documents.ShippingAgentCode, RefShippingAgents => RefShippingAgents.ShippingAgentCode, (Documents, RefShippingAgents) => new { Documents, RefShippingAgents }).Where(row => row.RefShippingAgents.ShippingAgentName == \"USPS\").Select(row => row.Documents.DocumentId)).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;",
    "result": "context.DocumentDrafts.Where(row => row.DocumentId == 7).Select(row => new { row.DraftDetails }).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;",
    "result": "context.DraftCopies.Where(row => row.DocumentId == 2).Count();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
    "result": "context.DraftCopies.GroupBy(row => new { row.DocumentId }).Select(group => new { group.Key.DocumentId, CountCopyNumber = group.Select(row => row.CopyNumber).Count() }).OrderByDescending(group => group.CountCopyNumber).Take(1).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*) > 1;",
    "result": "context.DraftCopies.GroupBy(row => new { row.DocumentId }).Select(group => new { group.Key.DocumentId, Count = group.Count() }).Where(group => group.Count > 1).ToList();",
    "db_name": "cre_Doc_Control_Systems"
  },
  {
    "query": "SELECT count(*) FROM browser WHERE market_share >= 5",
    "result": "context.Browsers.Where(row => row.MarketShare >= 5).Count();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT count(*) FROM browser WHERE market_share >= 5",
    "result": "context.Browsers.Where(row => row.MarketShare >= 5).Count();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT count(*) FROM browser WHERE market_share >= 5",
    "result": "context.Browsers.Where(row => row.MarketShare >= 5).Count();",
    "db_name": "browser_web"
  },
  {
    "query": "SELECT campus FROM campuses WHERE county = \"Los Angeles\"",
    "result": "context.Campuses.Where(row => row.County == \"Los Angeles\").Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT campus FROM campuses WHERE LOCATION = \"Chico\"",
    "result": "context.Campuses.Where(row => row.Location == \"Chico\").Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT campus FROM campuses WHERE YEAR = 1958",
    "result": "context.Campuses.Where(row => row.Year == 1958).Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT campus FROM campuses WHERE YEAR < 1800",
    "result": "context.Campuses.Where(row => row.Year < 1800).Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939",
    "result": "context.Campuses.Where(row => row.Year >= 1935 && row.Year <= 1939).Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT campus FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION = \"San Francisco\" AND county = \"San Francisco\"",
    "result": "context.Campuses.Where(row => row.Location == \"Northridge\" && row.County == \"Los Angeles\").Select(row => row.Campus1).Union(context.Campuses.Where(row => row.Location == \"San Francisco\" && row.County == \"San Francisco\").Select(row => row.Campus1)).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND T2.year = 1996",
    "result": "context.Campuses.Join(context.CsuFees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Jose State University\" && row.T2.Year == 1996).Select(row => new { row.T2.CampusFee }).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND T2.year = 1996",
    "result": "context.Campuses.Join(context.CsuFees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Francisco State University\" && row.T2.Year == 1996).Select(row => new { row.T2.CampusFee }).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)",
    "result": "context.CsuFees.Where(row => row.CampusFee > context.CsuFees.Select(row => row.CampusFee).Average()).Count();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT campus FROM campuses WHERE county = \"Los Angeles\" AND YEAR > 1950",
    "result": "context.Campuses.Where(row => row.County == \"Los Angeles\" && row.Year > 1950).Select(row => new { row.Campus1 }).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
    "result": "context.Degrees.GroupBy(row => new { row.Year }).OrderByDescending(group => group.Sum(row => row.Degrees)).Select(group => new { group.Key.Year }).Take(1).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
    "result": "context.Degrees.GroupBy(row => new { row.Campus }).OrderByDescending(group => group.Sum(row => row.Degrees)).Select(group => new { group.Key.Campus }).Take(1).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 ORDER BY T2.faculty DESC LIMIT 1",
    "result": "context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2003).OrderByDescending(row => row.T2.Faculty1).Select(row => new { row.T1.Campus1 }).Take(1).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 1996",
    "result": "context.CsuFees.Where(row => row.Year == 1996).Select(row => row.CampusFee).Average();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 2005",
    "result": "context.CsuFees.Where(row => row.Year == 2005).Select(row => row.CampusFee).Average();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT T1.campus , sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T2.year >= 1998 AND T2.year <= 2002 GROUP BY T1.campus",
    "result": "context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year >= 1998 && row.T2.Year <= 2002).GroupBy(row => new { row.T1.Campus1 }).Select(group => new { group.Key.Campus1, SumDegrees = group.Select(row => row.T2.Degrees).Sum() }).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT T1.campus , sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T1.county = \"Orange\" AND T2.year >= 2000 GROUP BY T1.campus",
    "result": "context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.County == \"Orange\" && row.T2.Year >= 2000).GroupBy(row => new { row.T1.Campus1 }).Select(group => new { group.Key.Campus1, SumDegrees = group.Select(row => row.T2.Degrees).Sum() }).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND faculty > (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = \"Orange\")",
    "result": "context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2002 && row.T2.Faculty1 > context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2002 && row.T1.County == \"Orange\").Select(row => row.T2.Faculty1).Max()).Select(row => new { row.T1.Campus1 }).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200",
    "result": "context.Campuses.Join(context.Enrollments, t1 => t1.Id, t2 => t2.Campus, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Year == 1956 && row.t2.TotalEnrollmentAy > 400 && row.t2.FteAy > 200).Select(row => new { row.t1.Campus1 }).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT count(*) FROM campuses WHERE county = \"Los Angeles\"",
    "result": "context.Campuses.Where(row => row.County == \"Los Angeles\").Count();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 2000",
    "result": "context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Jose State University\" && row.T2.Year == 2000).Select(row => new { row.T2.Degrees }).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND t2.year = 2001",
    "result": "context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Francisco State University\" && row.T2.Year == 2001).Select(row => new { row.T2.Degrees }).ToList();",
    "db_name": "csu_1"
  },
  {
    "query": "SELECT sum(faculty) FROM faculty WHERE YEAR = 2002",
    "result": "context.Faculties.Where(row => row.Year == 2002).Select(row => row.Faculty1).Sum();",
    "db_name": "csu_1"
  }
]
