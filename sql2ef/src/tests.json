[
  {
    "query": "SELECT count(*) FROM browser WHERE market_share >= 5",
    "result": "context.Browsers.Where(row => row.MarketShare >= 5).Count();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM browser ORDER BY market_share DESC",
    "result": "context.Browsers.OrderByDescending(row => row.MarketShare).Select(row => new { row.Name }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT id , name , market_share FROM browser",
    "result": "context.Browsers.Select(row => new { row.Id, row.Name, row.MarketShare }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(market_share) , min(market_share) , avg(market_share) FROM browser",
    "result": "context.Browsers.GroupBy(row => 1).Select(group => new { MaxMarketShare = group.Select(row => row.MarketShare).Max(), MinMarketShare = group.Select(row => row.MarketShare).Min(), AverageMarketShare = group.Select(row => row.MarketShare).Average() }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT id , market_share FROM browser WHERE name = 'Safari'",
    "result": "context.Browsers.Where(row => row.Name == \"Safari\").Select(row => new { row.Id, row.MarketShare }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
    "result": "context.WebClientAccelerators.Where(row => row.Connection != \"Broadband\").Select(row => new { row.Name, row.OperatingSystem }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998",
    "result": "context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T2.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"CProxy\" && row.T2.CompatibleSinceYear > 1998).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count(*) >= 2",
    "result": "context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name }).Take(1).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'",
    "result": "context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"CACHEbox\" && row.T2.Name == \"Internet Explorer\").Select(row => new { row.T1.CompatibleSinceYear }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT client) FROM web_client_accelerator",
    "result": "context.WebClientAccelerators.Select(row => row.Client).Distinct().Count();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );",
    "result": "context.WebClientAccelerators.Where(row => !context.AcceleratorCompatibleBrowsers.Select(row => row.AcceleratorId).Contains(row.Id)).Count();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15;",
    "result": "context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.MarketShare > 15).Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'",
    "result": "context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"CACHEbox\").Select(row => row.T3.Name).Intersect(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Fasterfox\").Select(row => row.T3.Name)).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , operating_system FROM web_client_accelerator EXCEPT SELECT T1.name , T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'",
    "result": "context.WebClientAccelerators.Select(row => new { row.Name, row.OperatingSystem }).Except(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Opera\").Select(row => new { row.T1.Name, row.T1.OperatingSystem })).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
    "result": "context.WebClientAccelerators.Where(row => EF.Functions.Like(row.Name, \"%Opera%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system",
    "result": "context.WebClientAccelerators.GroupBy(row => new { row.OperatingSystem }).Select(group => new { group.Key.OperatingSystem, Count = group.Count() }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name , T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id ORDER BY T1.compatible_since_year DESC",
    "result": "context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T1.CompatibleSinceYear).Select(row => new { T2Name = row.T2.Name, T3Name = row.T3.Name }).ToList();",
    "db_name": "browser_web",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM actor",
    "result": "context.Actors.Count();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM actor ORDER BY Name ASC",
    "result": "context.Actors.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Character , Duration FROM actor",
    "result": "context.Actors.Select(row => new { row.Character, row.Duration }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM actor WHERE Age != 20",
    "result": "context.Actors.Where(row => row.Age != 20).Select(row => new { row.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Character FROM actor ORDER BY age DESC",
    "result": "context.Actors.OrderByDescending(row => row.Age).Select(row => new { row.Character }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
    "result": "context.Actors.OrderByDescending(row => row.Age).Select(row => new { row.Duration }).Take(1).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM musical WHERE Nominee = \"Bob Fosse\"",
    "result": "context.Musicals.Where(row => row.Nominee == \"Bob Fosse\").Select(row => new { row.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"",
    "result": "context.Musicals.Where(row => row.Award != \"Tony Award\").Select(row => new { row.Nominee }).Distinct().ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID",
    "result": "context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).Select(row => new { T1Name = row.T1.Name, T2Name = row.T2.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = \"The Phantom of the Opera\"",
    "result": "context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"The Phantom of the Opera\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC",
    "result": "context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Year).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID",
    "result": "context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MusicalId }).Select(group => new { group.First().T2.Name, Count = group.Count() }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3",
    "result": "context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MusicalId }).Where(group => group.Count() >= 3).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee",
    "result": "context.Musicals.GroupBy(row => new { row.Nominee }).Select(group => new { group.Key.Nominee, Count = group.Count() }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Musicals.GroupBy(row => new { row.Nominee }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Nominee }).Take(1).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Musicals.GroupBy(row => new { row.Result }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Result }).Take(1).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2",
    "result": "context.Musicals.GroupBy(row => new { row.Nominee }).Where(group => group.Count() > 2).Select(group => new { group.Key.Nominee }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
    "result": "context.Musicals.Where(row => !context.Actors.Select(row => row.MusicalId).Contains(row.MusicalId)).Select(row => new { row.Name }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award = \"Drama Desk Award\"",
    "result": "context.Musicals.Where(row => row.Award == \"Tony Award\").Select(row => row.Nominee).Intersect(context.Musicals.Where(row => row.Award == \"Drama Desk Award\").Select(row => row.Nominee)).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\"",
    "result": "context.Musicals.Where(row => row.Award == \"Tony Award\" || row.Award == \"Cleavant Derricks\").Select(row => new { row.Nominee }).ToList();",
    "db_name": "musical",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM farm",
    "result": "context.Farms.Count();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
    "result": "context.Farms.OrderBy(row => row.TotalHorses).Select(row => new { row.TotalHorses }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens'",
    "result": "context.FarmCompetitions.Where(row => row.Theme != \"Aliens\").Select(row => new { row.Hosts }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
    "result": "context.FarmCompetitions.OrderBy(row => row.Year).Select(row => new { row.Theme }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses > 5000",
    "result": "context.Farms.Where(row => row.TotalHorses > 5000).Select(row => (double) row.WorkingHorses).Average();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Cows) , min(Cows) FROM farm",
    "result": "context.Farms.GroupBy(row => 1).Select(group => new { MaxCows = group.Select(row => row.Cows).Max(), MinCows = group.Select(row => row.Cows).Min() }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT Status) FROM city",
    "result": "context.Cities.Select(row => row.Status).Distinct().Count();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
    "result": "context.Cities.OrderByDescending(row => row.Population).Select(row => new { row.OfficialName }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1",
    "result": "context.Cities.OrderByDescending(row => row.Population).Select(row => new { row.OfficialName, row.Status }).Take(1).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Year , T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID",
    "result": "context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Year, row.T1.OfficialName }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1",
    "result": "context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.HostCityId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.OfficialName }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.HostCityId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Status }).Take(1).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000",
    "result": "context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Population > 1000).Select(row => new { row.T2.Theme }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Status , avg(Population) FROM city GROUP BY Status",
    "result": "context.Cities.GroupBy(row => new { row.Status }).Select(group => new { group.Key.Status, AveragePopulation = group.Select(row => row.Population).Average() }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
    "result": "context.Cities.GroupBy(row => new { row.Status }).OrderBy(group => group.Count()).Select(group => new { group.Key.Status }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Cities.GroupBy(row => new { row.Status }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Status }).Take(1).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
    "result": "context.Cities.Where(row => !context.FarmCompetitions.Select(row => row.HostCityId).Contains(row.CityId)).Select(row => new { row.OfficialName }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500",
    "result": "context.Cities.Where(row => row.Population > 1500).Select(row => row.Status).Intersect(context.Cities.Where(row => row.Population < 500).Select(row => row.Status)).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500",
    "result": "context.Cities.Where(row => row.Population > 1500 || row.Population < 500).Select(row => new { row.OfficialName }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Census_Ranking FROM city WHERE Status != \"Village\"",
    "result": "context.Cities.Where(row => row.Status != \"Village\").Select(row => new { row.CensusRanking }).ToList();",
    "db_name": "farm",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM game WHERE season > 2007",
    "result": "context.Games.Where(row => row.Season > 2007).Count();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Date FROM game ORDER BY home_team DESC",
    "result": "context.Games.OrderByDescending(row => row.HomeTeam).Select(row => new { row.Date }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT season , home_team , away_team FROM game",
    "result": "context.Games.Select(row => new { row.Season, row.HomeTeam, row.AwayTeam }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(home_games) , min(home_games) , avg(home_games) FROM stadium",
    "result": "context.Stadia.GroupBy(row => 1).Select(group => new { MaxHomeGames = group.Select(row => row.HomeGames).Max(), MinHomeGames = group.Select(row => row.HomeGames).Min(), AverageHomeGames = group.Select(row => row.HomeGames).Average() }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT average_attendance FROM stadium WHERE capacity_percentage > 100",
    "result": "context.Stadia.Where(row => row.CapacityPercentage > 100).Select(row => new { row.AverageAttendance }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT player , number_of_matches , SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
    "result": "context.InjuryAccidents.Where(row => row.Injury != \"Knee problem\").Select(row => new { row.Player, row.NumberOfMatches, row.Source }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'",
    "result": "context.Games.Join(context.InjuryAccidents, T1 => T1.Id, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Player == \"Walter Samuel\").Select(row => new { row.T1.Season }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T1.score , T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING count(*) >= 2",
    "result": "context.Games.Join(context.InjuryAccidents, T1 => T1.Id, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Score, group.First().T1.Date }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Stadia.Join(context.Games, T1 => T1.Id, T2 => T2.StadiumId, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T2.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name }).Take(1).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.season , T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'",
    "result": "context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Injury == \"Foot injury\" || row.T3.Injury == \"Knee problem\").Select(row => new { row.T1.Season, row.T2.Name }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT SOURCE) FROM injury_accident",
    "result": "context.InjuryAccidents.Select(row => row.Source).Distinct().Count();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
    "result": "context.Games.Where(row => !context.InjuryAccidents.Select(row => row.GameId).Contains(row.Id)).Count();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010",
    "result": "context.InjuryAccidents.Join(context.Games, T1 => T1.GameId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Season > 2010).Select(row => row.T1.Injury).Distinct().Count();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'",
    "result": "context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Player == \"Walter Samuel\").Select(row => row.T2.Name).Intersect(context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Player == \"Thiago Motta\").Select(row => row.T2.Name)).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , average_attendance , total_attendance FROM stadium EXCEPT SELECT T2.name , T2.average_attendance , T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id",
    "result": "context.Stadia.Select(row => new { row.Name, row.AverageAttendance, row.TotalAttendance }).Except(context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.Name, row.T2.AverageAttendance, row.T2.TotalAttendance })).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"",
    "result": "context.Stadia.Where(row => EF.Functions.Like(row.Name, \"%Bank%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id",
    "result": "context.Stadia.Join(context.Games, T1 => T1.Id, T2 => T2.StadiumId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Select(group => new { group.Key.Id, Count = group.Count() }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.date , T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.season DESC",
    "result": "context.Games.Join(context.InjuryAccidents, T1 => T1.Id, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Season).Select(row => new { row.T1.Date, row.T2.Player }).ToList();",
    "db_name": "game_injury",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;",
    "result": "context.Departments.GroupBy(row => new { row.DepartmentId }).OrderByDescending(group => group.Count(row => row.DepartmentId != null)).Select(group => new { group.First().Name }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
    "result": "context.Departments.GroupBy(row => new { row.DepartmentId }).OrderBy(group => group.Count(row => row.DepartmentId != null)).Select(group => new { group.First().Head }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name , T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
    "result": "context.Departments.Join(context.Physicians, T1 => T1.Head, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DepartmentId }).OrderBy(group => group.Count(row => row.T1.DepartmentId != null)).Select(group => new { group.First().T2.Name, group.First().T2.Position }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn",
    "result": "context.Appointments.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count(*) > 1",
    "result": "context.Appointments.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Patient }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.Name, group.First().T2.Phone }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1",
    "result": "context.Appointments.OrderByDescending(row => row.Start).Select(row => new { row.AppointmentId }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID",
    "result": "context.Appointments.Join(context.Physicians, T1 => T1.Physician, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID",
    "result": "context.Physicians.Select(row => row.Name).Except(context.Appointments.Join(context.Physicians, T1 => T1.Physician, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Select(row => row.T2.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1",
    "result": "context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.PrimaryAffiliation == true).Select(row => new { T1Name = row.T1.Name, T3Name = row.T3.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1",
    "result": "context.Patients.Join(context.Appointments, T1 => T1.Ssn, T2 => T2.Patient, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Start).Select(row => new { row.T1.Name }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(patient) FROM stay WHERE room = 112",
    "result": "context.Stays.Where(row => row.Room == 112).Select(row => row.Patient).Count();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid WHERE T3.name = \"John Dorian\"",
    "result": "context.Patients.Join(context.Prescribes, T1 => T1.Ssn, T2 => T2.Patient, (T1, T2) => new { T1, T2 }).Join(context.Physicians, joined => joined.T2.Physician, T3 => T3.EmployeeId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"John Dorian\").Select(row => row.T1.Ssn).Count();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code WHERE room = 111",
    "result": "context.Stays.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).Join(context.Prescribes, joined => joined.T2.Ssn, T3 => T3.Patient, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Medications, joined => joined.T3.Medication, T4 => T4.Code, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T1.Room == 111).Select(row => new { row.T4.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT patient FROM stay WHERE room = 111 ORDER BY staystart DESC LIMIT 1",
    "result": "context.Stays.Where(row => row.Room == 111).OrderByDescending(row => row.StayStart).Select(row => new { row.Patient }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Nurses.Join(context.Appointments, T1 => T1.EmployeeId, T2 => T2.PrepNurse, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EmployeeId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
    "result": "context.Physicians.Join(context.Patients, T1 => T1.EmployeeId, T2 => T2.Pcp, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EmployeeId }).Select(group => new { group.First().T1.Name, Count = group.Count() }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count(*) > 1",
    "result": "context.Physicians.Join(context.Patients, T1 => T1.EmployeeId, T2 => T2.Pcp, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EmployeeId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockfloor",
    "result": "context.Blocks.Join(context.Rooms, T1 => new { Pair1 = T1.BlockFloor, Pair2 = T1.BlockCode }, T2 => new { Pair1 = T2.BlockFloor, Pair2 = T2.BlockCode }, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.BlockFloor }).Select(group => new { Count = group.Count(), group.Key.BlockFloor }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockcode",
    "result": "context.Blocks.Join(context.Rooms, T1 => new { Pair1 = T1.BlockFloor, Pair2 = T1.BlockCode }, T2 => new { Pair1 = T2.BlockFloor, Pair2 = T2.BlockCode }, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.BlockCode }).Select(group => new { Count = group.Count(), group.Key.BlockCode }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT blockcode FROM room WHERE unavailable = 0",
    "result": "context.Rooms.Where(row => row.Unavailable == false).Select(row => new { row.BlockCode }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT roomtype) FROM room",
    "result": "context.Rooms.Select(row => row.RoomType).Distinct().Count();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name = \"Thesisin\"",
    "result": "context.Physicians.Join(context.Prescribes, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Medications, joined => joined.T2.Medication, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Thesisin\").Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.name , T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand = \"X\"",
    "result": "context.Physicians.Join(context.Prescribes, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Medications, joined => joined.T2.Medication, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Brand == \"X\").Select(row => new { row.T1.Name, row.T1.Position }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
    "result": "context.Medications.Join(context.Prescribes, T1 => T1.Code, T2 => T2.Medication, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Brand }).Select(group => new { Count = group.Count(), group.First().T1.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
    "result": "context.Physicians.Where(row => EF.Functions.Like(row.Position, \"%senior%\")).Select(row => new { row.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
    "result": "context.Undergoes.OrderBy(row => row.DateUndergoes).Select(row => new { row.Patient }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID WHERE T3.room = 111",
    "result": "context.Undergoes.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).Join(context.Stays, joined => joined.T1.Stay, T3 => T3.StayId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Room == 111).Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT name FROM nurse ORDER BY name",
    "result": "context.Nurses.OrderBy(row => row.Name).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID",
    "result": "context.Undergoes.Join(context.Nurses, T1 => T1.AssistingNurse, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT name FROM medication ORDER BY name",
    "result": "context.Medications.OrderBy(row => row.Name).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
    "result": "context.Physicians.Join(context.Prescribes, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Dose).Select(row => new { row.T1.Name }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT physician , department FROM affiliated_with WHERE primaryaffiliation = 1",
    "result": "context.AffiliatedWiths.Where(row => row.PrimaryAffiliation == true).Select(row => new { row.Physician, row.Department }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation = 1",
    "result": "context.AffiliatedWiths.Join(context.Departments, T1 => T1.Department, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PrimaryAffiliation == true).Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT nurse FROM on_call WHERE blockfloor = 1 AND blockcode = 1",
    "result": "context.OnCalls.Where(row => row.BlockFloor == 1 && row.BlockCode == 1).Select(row => new { row.Nurse }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT MAX(cost) , MIN(cost) , AVG(cost) FROM procedures",
    "result": "context.Procedures.GroupBy(row => 1).Select(group => new { MaxCost = group.Select(row => row.Cost).Max(), MinCost = group.Select(row => row.Cost).Min(), AverageCost = group.Select(row => row.Cost).Average() }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , cost FROM procedures ORDER BY cost DESC",
    "result": "context.Procedures.OrderByDescending(row => row.Cost).Select(row => new { row.Name, row.Cost }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
    "result": "context.Procedures.OrderBy(row => row.Cost).Select(row => new { row.Name }).Take(3).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000",
    "result": "context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Cost > 5000).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment ORDER BY T3.cost DESC LIMIT 1",
    "result": "context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T3.Cost).Select(row => new { row.T1.Name }).Take(1).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
    "result": "context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => (double) row.T3.Cost).Average();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
    "result": "context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => new { row.T3.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM procedures WHERE cost > 1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
    "result": "context.Procedures.Where(row => row.Cost > 1000).Select(row => row.Name).Union(context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => row.T3.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM procedures WHERE cost > 1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
    "result": "context.Procedures.Where(row => row.Cost > 1000).Select(row => row.Name).Except(context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => row.T3.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM procedures WHERE cost < 5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
    "result": "context.Procedures.Where(row => row.Cost < 5000).Select(row => row.Name).Intersect(context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => row.T3.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Psychiatry'",
    "result": "context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Surgery\").Select(row => row.T1.Name).Intersect(context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Psychiatry\").Select(row => row.T1.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'",
    "result": "context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Surgery\" || row.T3.Name == \"Psychiatry\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code WHERE T3.name = 'Procrastin-X'",
    "result": "context.Patients.Select(row => row.Name).Except(context.Patients.Join(context.Prescribes, T1 => T1.Ssn, T2 => T2.Patient, (T1, T2) => new { T1, T2 }).Join(context.Medications, joined => joined.T2.Medication, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Procrastin-X\").Select(row => row.T1.Name)).ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication = T2.Code WHERE T2.name = 'Procrastin-X' )",
    "result": "context.Patients.Where(row => !context.Prescribes.Join(context.Medications, T1 => T1.Medication, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Procrastin-X\").Select(row => row.T1.Patient).Contains(row.Ssn)).Count();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM appointment",
    "result": "context.Appointments.Count();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse",
    "result": "context.Nurses.Join(context.OnCalls, T1 => T1.EmployeeId, T2 => T2.Nurse, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "hospital_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(num_of_component) FROM furniture",
    "result": "context.Furnitures.Select(row => row.NumOfComponent).Sum();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1",
    "result": "context.Furnitures.OrderByDescending(row => row.MarketRate).Select(row => new { row.Name, row.FurnitureId }).Take(1).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2",
    "result": "context.Furnitures.OrderByDescending(row => row.MarketRate).Select(row => row.MarketRate).Sum();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Num_of_Component , name FROM furniture WHERE Num_of_Component > 10",
    "result": "context.Furnitures.Where(row => row.NumOfComponent > 10).Select(row => new { row.NumOfComponent, row.Name }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1",
    "result": "context.Furnitures.OrderBy(row => row.MarketRate).Select(row => new { row.Name, row.NumOfComponent }).Take(1).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID WHERE t2.Price_in_Dollar < (SELECT max(Price_in_Dollar) FROM furniture_manufacte)",
    "result": "context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.PriceInDollar < context.FurnitureManufactes.Select(row => row.PriceInDollar).Max()).Select(row => new { row.t1.Name }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT open_year , name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",
    "result": "context.Manufacturers.OrderByDescending(row => row.NumOfShops).Select(row => new { row.OpenYear, row.Name }).Take(1).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops > 20",
    "result": "context.Manufacturers.Where(row => row.NumOfShops > 20).Select(row => row.NumOfFactories).Average();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , manufacturer_id FROM manufacturer ORDER BY open_year",
    "result": "context.Manufacturers.OrderBy(row => row.OpenYear).Select(row => new { row.Name, row.ManufacturerId }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , open_year FROM manufacturer WHERE num_of_shops > 10 OR Num_of_Factories < 10",
    "result": "context.Manufacturers.Where(row => row.NumOfShops > 10 || row.NumOfFactories < 10).Select(row => new { row.Name, row.OpenYear }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(num_of_shops) , avg(Num_of_Factories) FROM manufacturer WHERE open_year < 1990",
    "result": "context.Manufacturers.Where(row => row.OpenYear < 1990).GroupBy(row => 1).Select(group => new { MaxNumOfShops = group.Select(row => row.NumOfShops).Max(), AverageNumOfFactories = group.Select(row => row.NumOfFactories).Average() }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.manufacturer_id , t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1",
    "result": "context.Manufacturers.Join(context.FurnitureManufactes, t1 => t1.ManufacturerId, t2 => t2.ManufacturerId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t2.PriceInDollar).Select(row => new { row.t1.ManufacturerId, row.t1.NumOfShops }).Take(1).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id",
    "result": "context.Manufacturers.Join(context.FurnitureManufactes, t1 => t1.ManufacturerId, t2 => t2.ManufacturerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ManufacturerId }).Select(group => new { Count = group.Count(), group.First().t1.Name }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name , t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID",
    "result": "context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Select(row => new { row.t1.Name, row.t2.PriceInDollar }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Market_Rate , name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)",
    "result": "context.Furnitures.Where(row => !context.FurnitureManufactes.Select(row => row.FurnitureId).Contains(row.FurnitureId)).Select(row => new { row.MarketRate, row.Name }).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component < 6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component > 10",
    "result": "context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Join(context.Manufacturers, joined => joined.t2.ManufacturerId, t3 => t3.ManufacturerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.NumOfComponent < 6).Select(row => row.t3.Name).Intersect(context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Join(context.Manufacturers, joined => joined.t2.ManufacturerId, t3 => t3.ManufacturerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.NumOfComponent > 10).Select(row => row.t3.Name)).ToList();",
    "db_name": "manufacturer",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT local_authority , services FROM station",
    "result": "context.Stations.Select(row => new { row.LocalAuthority, row.Services }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT train_number , name FROM train ORDER BY TIME",
    "result": "context.Trains.OrderBy(row => row.Time).Select(row => new { row.TrainNumber, row.Name }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TIME , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME",
    "result": "context.Trains.Where(row => row.Destination == \"Chennai\").OrderBy(row => row.Time).Select(row => new { row.Time, row.TrainNumber }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"",
    "result": "context.Trains.Where(row => EF.Functions.Like(row.Name, \"%Express%\")).Count();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT train_number , TIME FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur'",
    "result": "context.Trains.Where(row => row.Origin == \"Chennai\" && row.Destination == \"Guruvayur\").Select(row => new { row.TrainNumber, row.Time }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT origin , count(*) FROM train GROUP BY origin",
    "result": "context.Trains.GroupBy(row => new { row.Origin }).Select(group => new { group.Key.Origin, Count = group.Count() }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(high_temperature) , day_of_week FROM weekly_weather GROUP BY day_of_week",
    "result": "context.WeeklyWeathers.GroupBy(row => new { row.DayOfWeek }).Select(group => new { AverageHighTemperature = group.Select(row => row.HighTemperature).Average(), group.Key.DayOfWeek }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(t1.low_temperature) , avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = \"Amersham\"",
    "result": "context.WeeklyWeathers.Join(context.Stations, t1 => t1.StationId, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t2.NetworkName == \"Amersham\").GroupBy(row => 1).Select(group => new { MaxLowTemperature = group.Select(row => row.t1.LowTemperature).Max(), AveragePrecipitation = group.Select(row => row.t1.Precipitation).Average() }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT services) FROM station",
    "result": "context.Stations.Select(row => row.Services).Distinct().Count();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1",
    "result": "context.WeeklyWeathers.Join(context.Stations, t1 => t1.StationId, t2 => t2.Id, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.StationId }).OrderByDescending(group => group.Average(row => row.t1.HighTemperature)).Select(group => new { group.First().t2.Id, group.First().t2.LocalAuthority }).Take(1).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id HAVING max(t1.precipitation) > 50",
    "result": "context.WeeklyWeathers.Join(context.Stations, t1 => t1.StationId, t2 => t2.Id, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.StationId }).Where(group => group.Max(row => row.t1.Precipitation) > 50).Select(group => new { group.First().t2.Id, group.First().t2.LocalAuthority }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(low_temperature) , max(wind_speed_mph) FROM weekly_weather",
    "result": "context.WeeklyWeathers.GroupBy(row => 1).Select(group => new { MinLowTemperature = group.Select(row => row.LowTemperature).Min(), MaxWindSpeedMph = group.Select(row => row.WindSpeedMph).Max() }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT origin FROM train GROUP BY origin HAVING count(*) > 1",
    "result": "context.Trains.GroupBy(row => new { row.Origin }).Where(group => group.Count() > 1).Select(group => new { group.Key.Origin }).ToList();",
    "db_name": "station_weather",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM perpetrator",
    "result": "context.Perpetrators.Count();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Date FROM perpetrator ORDER BY Killed DESC",
    "result": "context.Perpetrators.OrderByDescending(row => row.Killed).Select(row => new { row.Date }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Injured FROM perpetrator ORDER BY Injured ASC",
    "result": "context.Perpetrators.OrderBy(row => row.Injured).Select(row => new { row.Injured }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Injured) FROM perpetrator",
    "result": "context.Perpetrators.Select(row => row.Injured).Average();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1",
    "result": "context.Perpetrators.OrderByDescending(row => row.Killed).Select(row => new { row.Location }).Take(1).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM People ORDER BY Height ASC",
    "result": "context.People.OrderBy(row => row.Height).Select(row => new { row.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID",
    "result": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country != \"China\"",
    "result": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country != \"China\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1",
    "result": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Weight).Select(row => new { row.T1.Name }).Take(1).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84",
    "result": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Height > 1.84).Select(row => row.T2.Killed).Sum();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = \"China\" OR T2.Country = \"Japan\"",
    "result": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country == \"China\" || row.T2.Country == \"Japan\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Injured DESC",
    "result": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Injured).Select(row => new { row.T1.Height }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country",
    "result": "context.Perpetrators.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Perpetrators.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*) >= 2",
    "result": "context.Perpetrators.GroupBy(row => new { row.Country }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Year DESC",
    "result": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Year).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)",
    "result": "context.People.Where(row => !context.Perpetrators.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country FROM perpetrator WHERE Injured > 50 INTERSECT SELECT Country FROM perpetrator WHERE Injured < 20",
    "result": "context.Perpetrators.Where(row => row.Injured > 50).Select(row => row.Country).Intersect(context.Perpetrators.Where(row => row.Injured < 20).Select(row => row.Country)).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT LOCATION) FROM perpetrator",
    "result": "context.Perpetrators.Select(row => row.Location).Distinct().Count();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "result": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Height).Select(row => new { row.T2.Date }).Take(1).ToList();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(YEAR) FROM perpetrator;",
    "result": "context.Perpetrators.Select(row => row.Year).Max();",
    "db_name": "perpetrator",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM region",
    "result": "context.Regions.Count();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT region_code , region_name FROM region ORDER BY region_code",
    "result": "context.Regions.OrderBy(row => row.RegionCode).Select(row => new { row.RegionCode, row.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT region_name FROM region ORDER BY region_name",
    "result": "context.Regions.OrderBy(row => row.RegionName).Select(row => new { row.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
    "result": "context.Regions.Where(row => row.RegionName != \"Denmark\").Select(row => new { row.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM storm WHERE Number_Deaths > 0",
    "result": "context.Storms.Where(row => row.NumberDeaths > 0).Count();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , dates_active , number_deaths FROM storm WHERE number_deaths >= 1",
    "result": "context.Storms.Where(row => row.NumberDeaths >= 1).Select(row => new { row.Name, row.DatesActive, row.NumberDeaths }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(damage_millions_USD) , max(damage_millions_USD) FROM storm WHERE max_speed > 1000",
    "result": "context.Storms.Where(row => row.MaxSpeed > 1000).GroupBy(row => 1).Select(group => new { AverageDamageMillionsUsd = group.Select(row => row.DamageMillionsUsd).Average(), MaxDamageMillionsUsd = group.Select(row => row.DamageMillionsUsd).Max() }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(number_deaths) , sum(damage_millions_USD) FROM storm WHERE max_speed > (SELECT avg(max_speed) FROM storm)",
    "result": "context.Storms.Where(row => row.MaxSpeed > context.Storms.Select(row => row.MaxSpeed).Average()).GroupBy(row => 1).Select(group => new { SumNumberDeaths = group.Select(row => row.NumberDeaths).Sum(), SumDamageMillionsUsd = group.Select(row => row.DamageMillionsUsd).Sum() }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , damage_millions_USD FROM storm ORDER BY max_speed DESC",
    "result": "context.Storms.OrderByDescending(row => row.MaxSpeed).Select(row => new { row.Name, row.DamageMillionsUsd }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT region_id) FROM affected_region",
    "result": "context.AffectedRegions.Select(row => row.RegionId).Distinct().Count();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
    "result": "context.Regions.Where(row => !context.AffectedRegions.Select(row => row.RegionId).Contains(row.RegionId)).Select(row => new { row.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
    "result": "context.Regions.Join(context.AffectedRegions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.RegionId }).Select(group => new { group.First().T1.RegionName, Count = group.Count() }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id",
    "result": "context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).Select(group => new { group.First().T1.Name, Count = group.Count() }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name, group.First().T1.MaxSpeed }).Take(1).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)",
    "result": "context.Storms.Where(row => !context.AffectedRegions.Select(row => row.StormId).Contains(row.StormId)).Select(row => new { row.Name }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected) >= 10",
    "result": "context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).Where(group => group.Count() >= 2).Select(group => group.First().T1.Name).Intersect(context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).Where(group => group.Sum(row => row.T2.NumberCityAffected) >= 10).Select(group => group.First().T1.Name)).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2",
    "result": "context.Storms.Select(row => row.Name).Except(context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StormId }).Where(group => group.Count() >= 2).Select(group => group.First().T1.Name)).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10",
    "result": "context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.NumberDeaths >= 10).Select(row => new { row.T2.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark'",
    "result": "context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.RegionName == \"Denmark\").Select(row => new { row.T3.Name }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*) >= 2",
    "result": "context.Regions.Join(context.AffectedRegions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.RegionId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.RegionName }).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1",
    "result": "context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T3.NumberDeaths).Select(row => new { row.T2.RegionName }).Take(1).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'",
    "result": "context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.RegionName == \"Afghanistan\").Select(row => row.T3.Name).Intersect(context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.RegionName == \"Albania\").Select(row => row.T3.Name)).ToList();",
    "db_name": "storm_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT founder FROM manufacturers WHERE name = 'Sony'",
    "result": "context.Manufacturers.Where(row => row.Name == \"Sony\").Select(row => new { row.Founder }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT headquarter FROM manufacturers WHERE founder = 'James'",
    "result": "context.Manufacturers.Where(row => row.Founder == \"James\").Select(row => new { row.Headquarter }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , headquarter FROM manufacturers ORDER BY revenue DESC",
    "result": "context.Manufacturers.OrderByDescending(row => row.Revenue).Select(row => new { row.Name, row.Headquarter }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(revenue) , max(revenue) , sum(revenue) FROM manufacturers",
    "result": "context.Manufacturers.GroupBy(row => 1).Select(group => new { AverageRevenue = group.Select(row => row.Revenue).Average(), MaxRevenue = group.Select(row => row.Revenue).Max(), SumRevenue = group.Select(row => row.Revenue).Sum() }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM manufacturers WHERE founder = 'Andy'",
    "result": "context.Manufacturers.Where(row => row.Founder == \"Andy\").Count();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(revenue) FROM manufacturers WHERE headquarter = 'Austin'",
    "result": "context.Manufacturers.Where(row => row.Headquarter == \"Austin\").Select(row => row.Revenue).Sum();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT headquarter FROM manufacturers",
    "result": "context.Manufacturers.Select(row => new { row.Headquarter }).Distinct().ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM manufacturers WHERE headquarter = 'Tokyo' OR headquarter = 'Beijing'",
    "result": "context.Manufacturers.Where(row => row.Headquarter == \"Tokyo\" || row.Headquarter == \"Beijing\").Count();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'",
    "result": "context.Manufacturers.Where(row => EF.Functions.Like(row.Name, \"S%\")).Select(row => new { row.Founder }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150",
    "result": "context.Manufacturers.Where(row => row.Revenue >= 100 && row.Revenue <= 150).Select(row => new { row.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter = 'Tokyo' OR Headquarter = 'Taiwan'",
    "result": "context.Manufacturers.Where(row => row.Headquarter == \"Tokyo\" || row.Headquarter == \"Taiwan\").Select(row => row.Revenue).Sum();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony'",
    "result": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Creative Labs\").Select(row => row.T1.Name).Intersect(context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Sony\").Select(row => row.T1.Name)).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , headquarter , founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",
    "result": "context.Manufacturers.OrderByDescending(row => row.Revenue).Select(row => new { row.Name, row.Headquarter, row.Founder }).Take(1).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , headquarter , revenue FROM manufacturers ORDER BY revenue DESC",
    "result": "context.Manufacturers.OrderByDescending(row => row.Revenue).Select(row => new { row.Name, row.Headquarter, row.Revenue }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM manufacturers WHERE revenue > (SELECT avg(revenue) FROM manufacturers)",
    "result": "context.Manufacturers.Where(row => row.Revenue > context.Manufacturers.Select(row => (double) row.Revenue).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM manufacturers WHERE revenue < (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')",
    "result": "context.Manufacturers.Where(row => row.Revenue < context.Manufacturers.Where(row => row.Headquarter == \"Austin\").Select(row => row.Revenue).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(revenue) FROM manufacturers WHERE revenue > (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')",
    "result": "context.Manufacturers.Where(row => row.Revenue > context.Manufacturers.Where(row => row.Headquarter == \"Austin\").Select(row => row.Revenue).Min()).Select(row => row.Revenue).Sum();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(revenue) , founder FROM manufacturers GROUP BY founder",
    "result": "context.Manufacturers.GroupBy(row => new { row.Founder }).Select(group => new { SumRevenue = group.Select(row => row.Revenue).Sum(), group.Key.Founder }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , max(revenue) , Headquarter FROM manufacturers GROUP BY Headquarter",
    "result": "context.Manufacturers.GroupBy(row => new { row.Headquarter }).Select(group => new { group.First().Name, MaxRevenue = group.Select(row => row.Revenue).Max(), group.Key.Headquarter }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(revenue) , name FROM manufacturers GROUP BY name",
    "result": "context.Manufacturers.GroupBy(row => new { row.Name }).Select(group => new { SumRevenue = group.Select(row => row.Revenue).Sum(), group.Key.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.price) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
    "result": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { AveragePrice = group.Select(row => row.T1.Price).Average(), group.Key.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT T1.name) , T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.Headquarter",
    "result": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Headquarter }).Select(group => new { CountDistinctName = group.Select(row => row.T1.Name).Distinct().Count(), group.Key.Headquarter }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony')",
    "result": "context.Products.Where(row => !context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Sony\").Select(row => row.T1.Name).Contains(row.Name)).Select(row => row.Name).Distinct().Count();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T1.name = 'DVD drive'",
    "result": "context.Manufacturers.Select(row => row.Name).Except(context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"DVD drive\").Select(row => row.T2.Name)).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
    "result": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { Count = group.Count(), group.Key.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM Products",
    "result": "context.Products.Select(row => new { row.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , price FROM products",
    "result": "context.Products.Select(row => new { row.Name, row.Price }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM products WHERE price <= 200",
    "result": "context.Products.Where(row => row.Price <= 200).Select(row => new { row.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM products WHERE price BETWEEN 60 AND 120",
    "result": "context.Products.Where(row => row.Price >= 60 && row.Price <= 120).Select(row => new { row..Code, row..Name, row..Price, row..Manufacturer }).ToList();",
    "db_name": "manufactory_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,138): error CS0119: 'Manufacturer' is a type, which is not valid in the given context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    12 Error(s)\n\nTime Elapsed 00:00:01.54"
  },
  {
    "query": "SELECT avg(price) FROM products",
    "result": "context.Products.Select(row => row.Price).Average();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(price) FROM products WHERE Manufacturer = 2",
    "result": "context.Products.Where(row => row.Manufacturer == 2).Select(row => row.Price).Average();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products WHERE price >= 180",
    "result": "context.Products.Where(row => row.Price >= 180).Count();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , price FROM products WHERE price >= 180 ORDER BY price DESC , name ASC",
    "result": "context.Products.Where(row => row.Price >= 180).OrderByDescending(row => row.Price).ThenBy(row => row.Name).Select(row => new { row.Name, row.Price }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT AVG(Price) , Manufacturer FROM Products GROUP BY Manufacturer",
    "result": "context.Products.GroupBy(row => new { row.Manufacturer }).Select(group => new { AveragePrice = group.Select(row => row.Price).Average(), group.Key.Manufacturer }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.Price) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name",
    "result": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { AveragePrice = group.Select(row => row.T1.Price).Average(), group.Key.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.Price) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
    "result": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { AveragePrice = group.Select(row => row.T1.Price).Average(), group.Key.Name }).Where(group => group.AveragePrice >= 150).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , price FROM Products ORDER BY price ASC LIMIT 1",
    "result": "context.Products.OrderBy(row => row.Price).Select(row => new { row.Name, row.Price }).Take(1).ToList();",
    "db_name": "manufactory_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM HOTELS",
    "result": "context.Hotels.Count();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT price_range FROM HOTELS",
    "result": "context.Hotels.Select(row => new { row.PriceRange }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Location_Name FROM LOCATIONS",
    "result": "context.Locations.Select(row => new { row.LocationName }).Distinct().ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name , Other_Details FROM Staff",
    "result": "context.Staff.Select(row => new { row.Name, row.OtherDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Tourist_Details FROM VISITORS",
    "result": "context.Visitors.Select(row => new { row.TouristDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT price_range FROM HOTELS WHERE star_rating_code = \"5\"",
    "result": "context.Hotels.Where(row => row.StarRatingCode == \"5\").Select(row => new { row.PriceRange }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code = \"5\" AND pets_allowed_yn = 1",
    "result": "context.Hotels.Where(row => row.StarRatingCode == \"5\" && row.PetsAllowedYn == \"1\").Select(row => (double) row.PriceRange).Average();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Address FROM LOCATIONS WHERE Location_Name = \"UK Gallery\"",
    "result": "context.Locations.Where(row => row.LocationName == \"UK Gallery\").Select(row => new { row.Address }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name = \"UK Gallery\"",
    "result": "context.Locations.Where(row => row.LocationName == \"UK Gallery\").Select(row => new { row.OtherDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"",
    "result": "context.Locations.Where(row => EF.Functions.Like(row.LocationName, \"%film%\")).Select(row => new { row.LocationName }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT Name) FROM PHOTOS",
    "result": "context.Photos.Select(row => row.Name).Distinct().Count();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Visit_Date FROM VISITS",
    "result": "context.Visits.Select(row => new { row.VisitDate }).Distinct().ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\"",
    "result": "context.TouristAttractions.Where(row => row.HowToGetThere == \"bus\").Select(row => new { row.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name , Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\" OR How_to_Get_There = \"walk\"",
    "result": "context.TouristAttractions.Where(row => row.HowToGetThere == \"bus\" || row.HowToGetThere == \"walk\").Select(row => new { row.Name, row.OpeningHours }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.price_range > 10000",
    "result": "context.Hotels.Join(context.RefHotelStarRatings, T1 => T1.StarRatingCode, T2 => T2.StarRatingCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PriceRange > 10000).Select(row => new { row.T2.StarRatingDescription }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID",
    "result": "context.Museums.Join(context.TouristAttractions, T1 => T1.MuseumId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.MuseumDetails, row.T2.OpeningHours }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = \"game1\"",
    "result": "context.Photos.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"game1\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"film festival\"",
    "result": "context.Photos.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"film festival\").Select(row => new { row.T1.Name, row.T1.Description }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Royal_Family_Details , T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID",
    "result": "context.RoyalFamilies.Join(context.TouristAttractions, T1 => T1.RoyalFamilyId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.RoyalFamilyDetails, row.T2.HowToGetThere }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\"",
    "result": "context.Shops.Join(context.TouristAttractions, T1 => T1.ShopId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.HowToGetThere == \"walk\").Select(row => new { row.T1.ShopDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"US museum\"",
    "result": "context.Staff.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"US museum\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\" OR T2.How_to_Get_There = \"bus\"",
    "result": "context.StreetMarkets.Join(context.TouristAttractions, T1 => T1.MarketId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.HowToGetThere == \"walk\" || row.T2.HowToGetThere == \"bus\").Select(row => new { row.T1.MarketDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Visit_Date , T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE T1.Tourist_Details = \"Vincent\"",
    "result": "context.Visitors.Join(context.Visits, T1 => T1.TouristId, T2 => T2.TouristId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.TouristDetails == \"Vincent\").Select(row => new { row.T2.VisitDate, row.T2.VisitDetails }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = \"Vincent\"",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Join(context.Visitors, joined => joined.T2.TouristId, T3 => T3.TouristId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.TouristDetails == \"Vincent\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" OR T2.Tourist_Details = \"Vivian\"",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Vincent\" || row.T2.TouristDetails == \"Vivian\").Select(row => new { row.T1.Name, row.T3.VisitDate }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code",
    "result": "context.Hotels.GroupBy(row => new { row.StarRatingCode }).Select(group => new { group.Key.StarRatingCode, AveragePriceRange = group.Select(row => row.PriceRange).Average() }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT pets_allowed_yn , avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
    "result": "context.Hotels.GroupBy(row => new { row.PetsAllowedYn }).Select(group => new { group.Key.PetsAllowedYn, AveragePriceRange = group.Select(row => row.PriceRange).Average() }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT hotel_id , star_rating_code FROM HOTELS ORDER BY price_range ASC",
    "result": "context.Hotels.OrderBy(row => row.PriceRange).Select(row => new { row.HotelId, row.StarRatingCode }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3",
    "result": "context.Hotels.OrderByDescending(row => row.PriceRange).Select(row => new { row.OtherHotelDetails }).Take(3).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT other_hotel_details , star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
    "result": "context.Hotels.OrderBy(row => row.PriceRange).Select(row => new { row.OtherHotelDetails, row.StarRatingCode }).Take(3).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.TouristAttractions.GroupBy(row => new { row.HowToGetThere }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.HowToGetThere }).Take(1).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Attraction_Type_Description , T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.RefAttractionTypes.Join(context.TouristAttractions, T1 => T1.AttractionTypeCode, T2 => T2.AttractionTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AttractionTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.AttractionTypeDescription, group.Key.AttractionTypeCode }).Take(1).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
    "result": "context.TouristAttractions.GroupBy(row => new { row.HowToGetThere }).Select(group => new { group.Key.HowToGetThere, Count = group.Count() }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T2.Tourist_Attraction_ID , COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId, Count = group.Count() }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) >= 2",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) <= 1",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Where(group => group.Count() <= 1).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"660 Shea Crescent\" OR T2.How_to_Get_There = \"walk\"",
    "result": "context.Locations.Join(context.TouristAttractions, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Address == \"660 Shea Crescent\" || row.T2.HowToGetThere == \"walk\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"254 Ottilie Junction\" OR T2.How_to_Get_There = \"bus\"",
    "result": "context.Locations.Join(context.TouristAttractions, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Address == \"254 Ottilie Junction\" || row.T2.HowToGetThere == \"bus\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Marcelle\"",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Vincent\").Select(row => row.T1.Name).Intersect(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Marcelle\").Select(row => row.T1.Name)).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Rosalind\"",
    "result": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Alison\").Select(row => row.T1.Name).Except(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Rosalind\").Select(row => row.T1.Name)).ToList();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
    "result": "context.Visitors.Where(row => !context.Visits.Select(row => row.TouristId).Contains(row.TouristId)).Count();",
    "db_name": "cre_Theme_park",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(enr) FROM College",
    "result": "context.Colleges.Select(row => row.Enr).Sum();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(enr) FROM College",
    "result": "context.Colleges.Select(row => row.Enr).Average();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM College",
    "result": "context.Colleges.Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Player WHERE HS > 1000",
    "result": "context.Players.Where(row => row.Hs > 1000).Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM College WHERE enr > 15000",
    "result": "context.Colleges.Where(row => row.Enr > 15000).Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(HS) FROM Player",
    "result": "context.Players.Select(row => row.Hs).Average();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT pName , HS FROM Player WHERE HS < 1500",
    "result": "context.Players.Where(row => row.Hs < 1500).Select(row => new { row.PName, row.Hs }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT cName) FROM tryout",
    "result": "context.Tryouts.Select(row => row.CName).Distinct().Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT pPos) FROM tryout",
    "result": "context.Tryouts.Select(row => row.PPos).Distinct().Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM tryout WHERE decision = 'yes'",
    "result": "context.Tryouts.Where(row => row.Decision == \"yes\").Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM tryout WHERE pPos = 'goalie'",
    "result": "context.Tryouts.Where(row => row.PPos == \"goalie\").Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(HS) , max(HS) , min(HS) FROM Player",
    "result": "context.Players.GroupBy(row => 1).Select(group => new { AverageHs = group.Select(row => row.Hs).Average(), MaxHs = group.Select(row => row.Hs).Max(), MinHs = group.Select(row => row.Hs).Min() }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(enr) FROM College WHERE state = 'FL'",
    "result": "context.Colleges.Where(row => row.State == \"FL\").Select(row => row.Enr).Average();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500",
    "result": "context.Players.Where(row => row.Hs >= 500 && row.Hs <= 1500).Select(row => new { row.PName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'",
    "result": "context.Players.Where(row => EF.Functions.Like(row.PName, \"%a%\")).Select(row => new { row.PName }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName , enr FROM College WHERE enr > 10000 AND state = \"LA\"",
    "result": "context.Colleges.Where(row => row.Enr > 10000 && row.State == \"LA\").Select(row => new { row.CName, row.Enr }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT * FROM College ORDER BY enr",
    "result": "context.Colleges.OrderBy(row => row.Enr).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName FROM College WHERE enr > 18000 ORDER BY cName",
    "result": "context.Colleges.Where(row => row.Enr > 18000).OrderBy(row => row.CName).Select(row => new { row.CName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT pName FROM Player WHERE yCard = 'yes' ORDER BY HS DESC",
    "result": "context.Players.Where(row => row.YCard == \"yes\").OrderByDescending(row => row.Hs).Select(row => new { row.PName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
    "result": "context.Tryouts.OrderBy(row => row.CName).Select(row => new { row.CName }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Tryouts.GroupBy(row => new { row.PPos }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PPos }).Take(1).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "result": "context.Tryouts.GroupBy(row => new { row.CName }).Select(group => new { Count = group.Count(), group.Key.CName }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(T2.HS) , T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY T1.pPos",
    "result": "context.Tryouts.Join(context.Players, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PPos }).Select(group => new { MinHs = group.Select(row => row.T2.Hs).Min(), group.Key.PPos }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
    "result": "context.Colleges.OrderByDescending(row => row.Enr).Select(row => new { row.CName }).Take(3).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName , state , min(enr) FROM college GROUP BY state",
    "result": "context.Colleges.GroupBy(row => new { row.State }).Select(group => new { group.First().CName, group.Key.State, MinEnr = group.Select(row => row.Enr).Min() }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName",
    "result": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.State }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'",
    "result": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\").Select(row => new { row.T1.State }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.pName , T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
    "result": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\").Select(row => new { row.T1.PName, row.T2.CName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID ORDER BY T1.pName",
    "result": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T1.PName).Select(row => new { row.T1.PName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.pName , T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
    "result": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\").Select(row => new { row.T1.PName, row.T1.Hs }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'striker'",
    "result": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"striker\").Select(row => new { row.T1.State }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' AND T2.pPos = 'striker'",
    "result": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\" && row.T2.PPos == \"striker\").Select(row => new { row.T1.PName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID WHERE T3.pName = 'Charles'",
    "result": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Join(context.Players, joined => joined.T2.PId, T3 => T3.PId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PName == \"Charles\").Select(row => new { row.T1.State }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.HS) , max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
    "result": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\").GroupBy(row => 1).Select(group => new { AverageHsT1 = group.Select(row => row.T1.Hs).Average(), MaxHsT1 = group.Select(row => row.T1.Hs).Max() }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'no'",
    "result": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"no\").Select(row => row.T1.Hs).Average();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(T1.HS) , pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS > 1000 GROUP BY T2.pPos",
    "result": "context.Players.Join(context.Tryouts, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Hs > 1000).GroupBy(row => new { row.T2.PPos }).Select(group => new { MaxHs = group.Select(row => row.T1.Hs).Max(), group.Key.PPos }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.cName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T2.pName LIKE 'D%'",
    "result": "context.Tryouts.Join(context.Players, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.PName, \"D%\")).Select(row => new { row.T1.CName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName FROM tryout WHERE decision = 'yes' AND pPos = 'goalie'",
    "result": "context.Tryouts.Where(row => row.Decision == \"yes\" && row.PPos == \"goalie\").Select(row => new { row.CName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T1.cName = (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)",
    "result": "context.Tryouts.Join(context.Players, T1 => T1.PId, T2 => T2.PId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CName == context.Colleges.OrderByDescending(row => row.Enr).Select(row => row.CName).Take(1).First()).Select(row => new { row.T2.PName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.state , T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'",
    "result": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"yes\").Select(row => new { row.T1.State, row.T1.Enr }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName FROM College WHERE enr < 13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr > 15000 AND state = \"LA\"",
    "result": "context.Colleges.Where(row => row.Enr < 13000 && row.State == \"AZ\").Select(row => row.CName).Union(context.Colleges.Where(row => row.Enr > 15000 && row.State == \"LA\").Select(row => row.CName)).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid'",
    "result": "context.Tryouts.Where(row => row.PPos == \"goalie\").Select(row => row.CName).Intersect(context.Tryouts.Where(row => row.PPos == \"mid\").Select(row => row.CName)).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid'",
    "result": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"goalie\").Select(row => row.T1.State).Intersect(context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"mid\").Select(row => row.T1.State)).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT(*) FROM (SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid')",
    "result": "context.Tryouts.Where(row => row.PPos == \"goalie\").Select(row => row.CName).Intersect(context.Tryouts.Where(row => row.PPos == \"mid\").Select(row => row.CName)).Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName FROM tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM tryout WHERE pPos = 'goalie'",
    "result": "context.Tryouts.Where(row => row.PPos == \"mid\").Select(row => row.CName).Except(context.Tryouts.Where(row => row.PPos == \"goalie\").Select(row => row.CName)).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'",
    "result": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"mid\").Select(row => row.T1.State).Except(context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"goalie\").Select(row => row.T1.State)).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie')",
    "result": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"mid\").Select(row => row.T1.State).Except(context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"goalie\").Select(row => row.T1.State)).Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT state FROM college WHERE enr < (SELECT max(enr) FROM college)",
    "result": "context.Colleges.Where(row => row.Enr < context.Colleges.Select(row => row.Enr).Max()).Select(row => new { row.State }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT cName FROM college WHERE enr > (SELECT min(enr) FROM college WHERE state = 'FL')",
    "result": "context.Colleges.Where(row => row.Enr > context.Colleges.Where(row => row.State == \"FL\").Select(row => row.Enr).Min()).Select(row => new { row.CName }).Distinct().ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cName FROM college WHERE enr > (SELECT max(enr) FROM college WHERE state = 'FL')",
    "result": "context.Colleges.Where(row => row.Enr > context.Colleges.Where(row => row.State == \"FL\").Select(row => row.Enr).Max()).Select(row => new { row.CName }).ToList();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos = \"goalie\")",
    "result": "context.Colleges.Where(row => !context.Tryouts.Where(row => row.PPos == \"goalie\").Select(row => row.CName).Contains(row.CName)).Select(row => row.Enr).Sum();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT state) FROM college WHERE enr > (SELECT avg(enr) FROM college)",
    "result": "context.Colleges.Where(row => row.Enr > context.Colleges.Select(row => row.Enr).Average()).Select(row => row.State).Distinct().Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT state) FROM college WHERE enr < (SELECT avg(enr) FROM college)",
    "result": "context.Colleges.Where(row => row.Enr < context.Colleges.Select(row => row.Enr).Average()).Select(row => row.State).Distinct().Count();",
    "db_name": "soccer_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM station WHERE lat < 37.5",
    "result": "context.Stations.Where(row => row.Lat < 37.5).Select(row => new { row.Name }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city , max(lat) FROM station GROUP BY city",
    "result": "context.Stations.GroupBy(row => new { row.City }).Select(group => new { group.Key.City, MaxLat = group.Select(row => row.Lat).Max() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3",
    "result": "context.Trips.OrderBy(row => row.Id).Select(row => new { row.StartStationName, row.EndStationName }).Take(3).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(lat) , avg(long) FROM station WHERE city = \"San Jose\"",
    "result": "context.Stations.Where(row => row.City == \"San Jose\").GroupBy(row => 1).Select(group => new { AverageLat = group.Select(row => row.Lat).Average(), AverageLong = group.Select(row => row.Long).Average() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
    "result": "context.Trips.OrderBy(row => row.Duration).Select(row => new { row.Id }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(duration) , max(duration) FROM trip WHERE bike_id = 636",
    "result": "context.Trips.Where(row => row.BikeId == 636).GroupBy(row => 1).Select(group => new { SumDuration = group.Select(row => row.Duration).Sum(), MaxDuration = group.Select(row => row.Duration).Max() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT bike_id) FROM trip",
    "result": "context.Trips.Select(row => row.BikeId).Distinct().Count();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT city) FROM station",
    "result": "context.Stations.Select(row => row.City).Distinct().Count();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT(*) FROM station WHERE city = \"Mountain View\"",
    "result": "context.Stations.Where(row => row.City == \"Mountain View\").Count();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7",
    "result": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BikesAvailable == 7).Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Trips.Where(row => EF.Functions.Like(row.StartDate, \"8/%\")).GroupBy(row => new { row.StartStationName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StartStationName, group.First().StartStationId }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Trips.Where(row => row.ZipCode == \"94002\").GroupBy(row => new { row.BikeId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BikeId }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1",
    "result": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Duration).Select(row => new { row.T1.Lat, row.T1.Long, row.T1.City }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available) > 14 UNION SELECT name , id FROM station WHERE installation_date LIKE \"12/%\"",
    "result": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StationId }).Where(group => group.Average(row => row.T2.BikesAvailable) > 14).Select(group => new { group.First().T1.Name, group.First().T1.Id }).Union(context.Stations.Where(row => EF.Functions.Like(row.InstallationDate, \"12/%\")).Select(row => new { row.Name, row.Id })).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
    "result": "context.Weathers.Where(row => row.ZipCode == 94107).GroupBy(row => new { row.CloudCover }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CloudCover }).Take(3).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available) > 10)",
    "result": "context.Stations.Where(row => !context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Max(row => row.BikesAvailable) > 10).Select(group => group.Key.StationId).Contains(row.Id)).Select(row => (double) row.Long).Average();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id , T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id",
    "result": "context.Trips.Join(context.Stations, T1 => T1.EndStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Id, row.T2.InstallationDate }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1",
    "result": "context.Trips.Join(context.Stations, T1 => T1.StartStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.DockCount).Select(row => new { row.T1.Id }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != \"San Francisco\"",
    "result": "context.Trips.Join(context.Stations, T1 => T1.EndStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City != \"San Francisco\").Count();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
    "result": "context.Weathers.Where(row => row.ZipCode == 94107 && row.Events != \"Fog\" && row.Events != \"Rain\").Select(row => new { row.Date }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\"",
    "result": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StationId }).Where(group => group.Average(row => row.T2.BikesAvailable) > 10).Select(group => group.First().T1.Name).Except(context.Stations.Where(row => row.City == \"San Jose\").Select(row => row.Name)).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , lat , city FROM station ORDER BY lat LIMIT 1",
    "result": "context.Stations.OrderBy(row => row.Lat).Select(row => new { row.Name, row.Lat, row.City }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
    "result": "context.Weathers.OrderByDescending(row => row.MaxGustSpeedMph).Select(row => new { row.Date, row.MeanTemperatureF, row.MeanHumidity }).Take(3).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city , COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15",
    "result": "context.Stations.GroupBy(row => new { row.City }).Where(group => group.Count() >= 15).Select(group => new { group.Key.City, Count = group.Count() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200",
    "result": "context.Trips.GroupBy(row => new { row.StartStationName }).Where(group => group.Count() >= 200).Select(group => new { group.First().StartStationId, group.Key.StartStationName }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
    "result": "context.Stations.GroupBy(row => new { row.City }).OrderByDescending(group => group.Max(row => row.Lat)).Select(group => new { group.Key.City }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT date , cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
    "result": "context.Weathers.OrderByDescending(row => row.CloudCover).Select(row => new { row.Date, row.CloudCover }).Take(5).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
    "result": "context.Trips.OrderByDescending(row => row.Duration).Select(row => new { row.Id, row.Duration }).Take(3).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
    "result": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StartStationId }).Select(group => new { group.First().T1.Name, group.First().T1.Long, AverageDuration = group.Select(row => row.T2.Duration).Average() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id",
    "result": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.EndStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.EndStationId }).Select(group => new { group.OrderBy(row => row.T2.Duration).First().T1.Name, group.OrderBy(row => row.T2.Duration).First().T1.Lat, MinDuration = group.Select(row => row.T2.Duration).Min() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100",
    "result": "context.Trips.Where(row => row.Duration < 100).Select(row => new { row.StartStationName }).Distinct().ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = 94103)",
    "result": "context.Trips.Where(row => row.Duration >= context.Trips.Where(row => row.ZipCode == \"94103\").Select(row => row.Duration).Average()).Select(row => new { row.Id }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12",
    "result": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BikesAvailable > 12).Select(row => new { row.T1.Id, row.T1.Name }).Distinct().ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 100",
    "result": "context.Stations.Where(row => row.City == \"Palo Alto\").Select(row => row.Name).Except(context.Trips.GroupBy(row => new { row.EndStationName }).Where(group => group.Count() > 100).Select(group => group.Key.EndStationName)).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = \"Mountain View\" AND T3.city = \"Palo Alto\"",
    "result": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).Join(context.Trips, joined => joined.T2.Id, T4 => T4.Id, (joined, T4) => new { joined.T1, joined.T2, T4 }).Join(context.Stations, joined => joined.T4.EndStationId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, joined.T4, T3 }).Where(row => row.T1.City == \"Mountain View\" && row.T3.City == \"Palo Alto\").Count();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T1.lat) , avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id",
    "result": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => 1).Select(group => new { AverageLat = group.Select(row => row.T1.Lat).Average(), AverageLong = group.Select(row => row.T1.Long).Average() }).ToList();",
    "db_name": "bike_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM pilot",
    "result": "context.Pilots.Count();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
    "result": "context.Pilots.OrderBy(row => row.Rank).Select(row => new { row.PilotName }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT POSITION , Team FROM pilot",
    "result": "context.Pilots.Select(row => new { row.Position, row.Team }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT POSITION FROM pilot WHERE Age > 30",
    "result": "context.Pilots.Where(row => row.Age > 30).Select(row => new { row.Position }).Distinct().ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Pilot_name FROM pilot WHERE Team = \"Bradley\" OR Team = \"Fordham\"",
    "result": "context.Pilots.Where(row => row.Team == \"Bradley\" || row.Team == \"Fordham\").Select(row => new { row.PilotName }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1",
    "result": "context.Pilots.OrderBy(row => row.Rank).Select(row => new { row.JoinYear }).Take(1).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "result": "context.Pilots.GroupBy(row => new { row.Nationality }).Select(group => new { group.Key.Nationality, Count = group.Count() }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Pilots.GroupBy(row => new { row.Nationality }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Nationality }).Take(1).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT POSITION FROM pilot WHERE Join_Year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year > 2005",
    "result": "context.Pilots.Where(row => row.JoinYear < 2000).Select(row => row.Position).Intersect(context.Pilots.Where(row => row.JoinYear > 2005).Select(row => row.Position)).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Pilot_name , T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID",
    "result": "context.PilotRecords.Join(context.Aircraft, T1 => T1.AircraftId, T2 => T2.AircraftId, (T1, T2) => new { T1, T2 }).Join(context.Pilots, joined => joined.T1.PilotId, T3 => T3.PilotId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.PilotName, row.T2.Model }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Pilot_name , T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID ORDER BY T3.Rank",
    "result": "context.PilotRecords.Join(context.Aircraft, T1 => T1.AircraftId, T2 => T2.AircraftId, (T1, T2) => new { T1, T2 }).Join(context.Pilots, joined => joined.T1.PilotId, T3 => T3.PilotId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T3.Rank).Select(row => new { row.T3.PilotName, row.T2.FleetSeries }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID WHERE T3.Age < 34",
    "result": "context.PilotRecords.Join(context.Aircraft, T1 => T1.AircraftId, T2 => T2.AircraftId, (T1, T2) => new { T1, T2 }).Join(context.Pilots, joined => joined.T1.PilotId, T3 => T3.PilotId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Age < 34).Select(row => new { row.T2.FleetSeries }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Pilot_name , COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name",
    "result": "context.PilotRecords.Join(context.Pilots, T1 => T1.PilotId, T2 => T2.PilotId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.PilotName }).Select(group => new { group.Key.PilotName, Count = group.Count() }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Pilot_name , COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*) > 1",
    "result": "context.PilotRecords.Join(context.Pilots, T1 => T1.PilotId, T2 => T2.PilotId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.PilotName }).Where(group => group.Count() > 1).Select(group => new { group.Key.PilotName, Count = group.Count() }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)",
    "result": "context.Pilots.Where(row => !context.PilotRecords.Select(row => row.PilotId).Contains(row.PilotId)).Select(row => new { row.PilotName }).ToList();",
    "db_name": "pilot_record",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Accounts",
    "result": "context.Accounts.Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
    "result": "context.Accounts.Select(row => row.CustomerId).Distinct().Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT account_id , date_account_opened , account_name , other_account_details FROM Accounts",
    "result": "context.Accounts.Select(row => new { row.AccountId, row.DateAccountOpened, row.AccountName, row.OtherAccountDetails }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.account_id , T1.date_account_opened , T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'",
    "result": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CustomerFirstName == \"Meaghan\").Select(row => new { row.T1.AccountId, row.T1.DateAccountOpened, row.T1.AccountName, row.T1.OtherAccountDetails }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Meaghan\" AND T2.customer_last_name = \"Keeling\"",
    "result": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CustomerFirstName == \"Meaghan\" && row.T2.CustomerLastName == \"Keeling\").Select(row => new { row.T1.AccountName, row.T1.OtherAccountDetails }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"900\"",
    "result": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.AccountName == \"900\").Select(row => new { row.T2.CustomerFirstName, row.T2.CustomerLastName }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
    "result": "context.Customers.Where(row => !context.Accounts.Select(row => row.CustomerId).Contains(row.CustomerId)).Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.customer_first_name , T1.customer_last_name , T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
    "result": "context.Customers.Join(context.Accounts, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.CustomerFirstName, row.T1.CustomerLastName, row.T1.PhoneNumber }).Distinct().ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts",
    "result": "context.Customers.Select(row => row.CustomerId).Except(context.Accounts.Select(row => row.CustomerId)).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , customer_id FROM Accounts GROUP BY customer_id",
    "result": "context.Accounts.GroupBy(row => new { row.CustomerId }).Select(group => new { Count = group.Count(), group.Key.CustomerId }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CustomerId, group.First().T2.CustomerFirstName, group.First().T2.CustomerLastName }).Take(1).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
    "result": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Select(group => new { group.Key.CustomerId, group.First().T2.CustomerFirstName, group.First().T2.CustomerLastName, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2",
    "result": "context.Accounts.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T2.CustomerFirstName, group.Key.CustomerId }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Customers",
    "result": "context.Customers.Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT gender , count(*) FROM Customers GROUP BY gender",
    "result": "context.Customers.GroupBy(row => new { row.Gender }).Select(group => new { group.Key.Gender, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Financial_transactions",
    "result": "context.FinancialTransactions.Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = \"337\"",
    "result": "context.FinancialTransactions.Join(context.Accounts, T1 => T1.AccountId, T2 => T2.AccountId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AccountName == \"337\").Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(transaction_amount) , min(transaction_amount) , max(transaction_amount) , sum(transaction_amount) FROM Financial_transactions",
    "result": "context.FinancialTransactions.GroupBy(row => 1).Select(group => new { AverageTransactionAmount = group.Select(row => (double) row.TransactionAmount).Average(), MinTransactionAmount = group.Select(row => (double) row.TransactionAmount).Min(), MaxTransactionAmount = group.Select(row => (double) row.TransactionAmount).Max(), SumTransactionAmount = group.Select(row => (double) row.TransactionAmount).Sum() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
    "result": "context.FinancialTransactions.GroupBy(row => new { row.TransactionType }).Select(group => new { group.Key.TransactionType, SumTransactionAmount = group.Select(row => (double) row.TransactionAmount).Sum() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.account_name , T1.account_id , count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id",
    "result": "context.FinancialTransactions.Join(context.Accounts, T1 => T1.AccountId, T2 => T2.AccountId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AccountId }).Select(group => new { group.First().T2.AccountName, group.Key.AccountId, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.FinancialTransactions.GroupBy(row => new { row.AccountId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AccountId }).Take(1).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count(*) >= 4",
    "result": "context.FinancialTransactions.Join(context.Accounts, T1 => T1.AccountId, T2 => T2.AccountId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AccountId }).Where(group => group.Count() >= 4).Select(group => new { group.Key.AccountId, group.First().T2.AccountName }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT product_size FROM Products",
    "result": "context.Products.Select(row => new { row.ProductSize }).Distinct().ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT product_color FROM Products",
    "result": "context.Products.Select(row => new { row.ProductColor }).Distinct().ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT invoice_number , count(*) FROM Financial_transactions GROUP BY invoice_number",
    "result": "context.FinancialTransactions.GroupBy(row => new { row.InvoiceNumber }).Select(group => new { group.Key.InvoiceNumber, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.invoice_number , T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
    "result": "context.FinancialTransactions.Join(context.Invoices, T1 => T1.InvoiceNumber, T2 => T2.InvoiceNumber, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.InvoiceNumber }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.InvoiceNumber, group.First().T2.InvoiceDate }).Take(1).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Invoices",
    "result": "context.Invoices.Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.invoice_date , T1.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id",
    "result": "context.Invoices.Join(context.Orders, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.InvoiceDate, row.T1.OrderId, row.T2.OrderDetails }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT order_id , count(*) FROM Invoices GROUP BY order_id",
    "result": "context.Invoices.GroupBy(row => new { row.OrderId }).Select(group => new { group.Key.OrderId, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count(*) > 2",
    "result": "context.Invoices.Join(context.Orders, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.OrderId }).Where(group => group.Count() > 2).Select(group => new { group.Key.OrderId, group.First().T2.OrderDetails }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.customer_last_name , T1.customer_id , T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Orders.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.CustomerLastName, group.Key.CustomerId, group.First().T2.PhoneNumber }).Take(1).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id",
    "result": "context.Products.Select(row => row.ProductName).Except(context.Products.Join(context.OrderItems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.ProductName)).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT order_id , count(*) FROM Order_items GROUP BY order_id",
    "result": "context.OrderItems.GroupBy(row => new { row.OrderId }).Select(group => new { group.Key.OrderId, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_id , count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
    "result": "context.OrderItems.GroupBy(row => new { row.ProductId }).Select(group => new { group.Key.ProductId, CountDistinctOrderId = group.Select(row => row.OrderId).Distinct().Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.product_name , count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name",
    "result": "context.OrderItems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Orders, joined => joined.T1.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T2.ProductName }).Select(group => new { group.Key.ProductName, Count = group.Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT order_id , count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
    "result": "context.OrderItems.GroupBy(row => new { row.OrderId }).Select(group => new { group.Key.OrderId, CountDistinctProductId = group.Select(row => row.ProductId).Distinct().Count() }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
    "result": "context.Products.Where(row => !context.OrderItems.Select(row => row.ProductId).Contains(row.ProductId)).Count();",
    "db_name": "customers_and_invoices",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM head WHERE age > 56",
    "result": "context.Heads.Where(row => row.Age > 56).Count();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , born_state , age FROM head ORDER BY age",
    "result": "context.Heads.OrderBy(row => row.Age).Select(row => new { row.Name, row.BornState, row.Age }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT creation , name , budget_in_billions FROM department",
    "result": "context.Departments.Select(row => new { row.Creation, row.Name, row.BudgetInBillions }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(budget_in_billions) , min(budget_in_billions) FROM department",
    "result": "context.Departments.GroupBy(row => 1).Select(group => new { MaxBudgetInBillions = group.Select(row => row.BudgetInBillions).Max(), MinBudgetInBillions = group.Select(row => row.BudgetInBillions).Min() }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
    "result": "context.Departments.Where(row => row.Ranking >= 10 && row.Ranking <= 15).Select(row => (double) row.NumEmployees).Average();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM head WHERE born_state != 'California'",
    "result": "context.Heads.Where(row => row.BornState != \"California\").Select(row => new { row.Name }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'",
    "result": "context.Departments.Join(context.Managements, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Heads, joined => joined.T2.HeadId, T3 => T3.HeadId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.BornState == \"Alabama\").Select(row => new { row.T1.Creation }).Distinct().ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*) >= 3",
    "result": "context.Heads.GroupBy(row => new { row.BornState }).Where(group => group.Count() >= 3).Select(group => new { group.Key.BornState }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Departments.GroupBy(row => new { row.Creation }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Creation }).Take(1).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'",
    "result": "context.Departments.Join(context.Managements, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TemporaryActing == \"Yes\").Select(row => new { row.T1.Name, row.T1.NumEmployees }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
    "result": "context.Managements.Select(row => row.TemporaryActing).Distinct().Count();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
    "result": "context.Departments.Where(row => !context.Managements.Select(row => row.DepartmentId).Contains(row.DepartmentId)).Count();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'",
    "result": "context.Managements.Join(context.Heads, T2 => T2.HeadId, T1 => T1.HeadId, (T2, T1) => new { T2, T1 }).Where(row => row.T2.TemporaryActing == \"Yes\").Select(row => new { row.T1.Age }).Distinct().ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'",
    "result": "context.Departments.Join(context.Managements, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Heads, joined => joined.T2.HeadId, T3 => T3.HeadId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Treasury\").Select(row => row.T3.BornState).Intersect(context.Departments.Join(context.Managements, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Heads, joined => joined.T2.HeadId, T3 => T3.HeadId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Homeland Security\").Select(row => row.T3.BornState)).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.department_id , T1.name , count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING count(*) > 1",
    "result": "context.Managements.Join(context.Departments, T2 => T2.DepartmentId, T1 => T1.DepartmentId, (T2, T1) => new { T2, T1 }).GroupBy(row => new { row.T1.DepartmentId }).Select(group => new { group.Key.DepartmentId, group.First().T1.Name, Count = group.Count() }).Where(group => group.Count > 1).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT head_id , name FROM head WHERE name LIKE '%Ha%'",
    "result": "context.Heads.Where(row => EF.Functions.Like(row.Name, \"%Ha%\")).Select(row => new { row.HeadId, row.Name }).ToList();",
    "db_name": "department_management",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM journalist",
    "result": "context.Journalists.Count();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM journalist ORDER BY Years_working ASC",
    "result": "context.Journalists.OrderBy(row => row.YearsWorking).Select(row => new { row.Name }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nationality , Age FROM journalist",
    "result": "context.Journalists.Select(row => new { row.Nationality, row.Age }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM journalist WHERE Nationality = \"England\" OR Nationality = \"Wales\"",
    "result": "context.Journalists.Where(row => row.Nationality == \"England\" || row.Nationality == \"Wales\").Select(row => new { row.Name }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Years_working) FROM journalist",
    "result": "context.Journalists.Select(row => row.YearsWorking).Average();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1",
    "result": "context.Journalists.OrderByDescending(row => row.YearsWorking).Select(row => new { row.Nationality }).Take(1).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
    "result": "context.Journalists.GroupBy(row => new { row.Nationality }).Select(group => new { group.Key.Nationality, Count = group.Count() }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Journalists.GroupBy(row => new { row.Nationality }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Nationality }).Take(1).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3",
    "result": "context.Journalists.Where(row => row.YearsWorking > 10).Select(row => row.Nationality).Intersect(context.Journalists.Where(row => row.YearsWorking < 3).Select(row => row.Nationality)).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Date , Name , venue FROM event ORDER BY Event_Attendance DESC",
    "result": "context.Events.OrderByDescending(row => row.EventAttendance).Select(row => new { row.Date, row.Name, row.Venue }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Name , T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID",
    "result": "context.NewsReports.Join(context.Events, T1 => T1.EventId, T2 => T2.EventId, (T1, T2) => new { T1, T2 }).Join(context.Journalists, joined => joined.T1.JournalistId, T3 => T3.JournalistId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Name, row.T2.Date }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Name , T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID ORDER BY T2.Event_Attendance ASC",
    "result": "context.NewsReports.Join(context.Events, T1 => T1.EventId, T2 => T2.EventId, (T1, T2) => new { T1, T2 }).Join(context.Journalists, joined => joined.T1.JournalistId, T3 => T3.JournalistId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T2.EventAttendance).Select(row => new { T3Name = row.T3.Name, T2Name = row.T2.Name }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Name , COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name",
    "result": "context.NewsReports.Join(context.Events, T1 => T1.EventId, T2 => T2.EventId, (T1, T2) => new { T1, T2 }).Join(context.Journalists, joined => joined.T1.JournalistId, T3 => T3.JournalistId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.Name }).Select(group => new { group.Key.Name, Count = group.Count() }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*) > 1",
    "result": "context.NewsReports.Join(context.Events, T1 => T1.EventId, T2 => T2.EventId, (T1, T2) => new { T1, T2 }).Join(context.Journalists, joined => joined.T1.JournalistId, T3 => T3.JournalistId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.Name }).Where(group => group.Count() > 1).Select(group => new { group.Key.Name }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)",
    "result": "context.Journalists.Where(row => !context.NewsReports.Select(row => row.JournalistId).Contains(row.JournalistId)).Select(row => new { row.Name }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Event_Attendance) , max(Event_Attendance) FROM event",
    "result": "context.Events.GroupBy(row => 1).Select(group => new { AverageEventAttendance = group.Select(row => row.EventAttendance).Average(), MaxEventAttendance = group.Select(row => row.EventAttendance).Max() }).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT venue , name FROM event ORDER BY Event_Attendance DESC LIMIT 2",
    "result": "context.Events.OrderByDescending(row => row.EventAttendance).Select(row => new { row.Venue, row.Name }).Take(2).ToList();",
    "db_name": "news_report",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC",
    "result": "context.Districts.OrderByDescending(row => row.CityArea).Select(row => new { row.DistrictName }).Distinct().ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*) > 3",
    "result": "context.Products.GroupBy(row => new { row.MaxPageSize }).Where(group => group.Count() > 3).Select(group => new { group.Key.MaxPageSize }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT District_name , City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",
    "result": "context.Districts.Where(row => row.CityPopulation >= 200000 && row.CityPopulation <= 2000000).Select(row => new { row.DistrictName, row.CityPopulation }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000",
    "result": "context.Districts.Where(row => row.CityArea > 10 || row.CityPopulation > 100000).Select(row => new { row.DistrictName }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
    "result": "context.Districts.OrderByDescending(row => row.CityPopulation).Select(row => new { row.DistrictName }).Take(1).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
    "result": "context.Districts.OrderBy(row => row.CityArea).Select(row => new { row.DistrictName }).Take(1).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3",
    "result": "context.Districts.OrderByDescending(row => row.CityArea).Select(row => row.CityPopulation).Sum();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE , count(*) FROM store GROUP BY TYPE",
    "result": "context.Stores.GroupBy(row => new { row.Type }).Select(group => new { group.Key.Type, Count = group.Count() }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_name = \"Khanewal District\"",
    "result": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.DistrictName == \"Khanewal District\").Select(row => new { row.t1.StoreName }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district_id = (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
    "result": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.DistrictId == context.Districts.OrderByDescending(row => row.CityPopulation).Select(row => row.DistrictId).Take(1).First()).Select(row => new { row.t1.StoreName }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.store_name = \"Blackville\"",
    "result": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.StoreName == \"Blackville\").Select(row => new { row.t3.HeadquarteredCity }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.headquartered_city , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city",
    "result": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.HeadquarteredCity }).Select(group => new { group.Key.HeadquarteredCity, Count = group.Count() }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.HeadquarteredCity }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.HeadquarteredCity }).Take(1).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(pages_per_minute_color) FROM product",
    "result": "context.Products.Select(row => (double) row.PagesPerMinuteColor).Average();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product FROM product WHERE max_page_size = \"A4\" AND pages_per_minute_color < 5",
    "result": "context.Products.Where(row => row.MaxPageSize == \"A4\" && row.PagesPerMinuteColor < 5).Select(row => new { row.Product1 }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product FROM product WHERE max_page_size = \"A4\" OR pages_per_minute_color < 5",
    "result": "context.Products.Where(row => row.MaxPageSize == \"A4\" || row.PagesPerMinuteColor < 5).Select(row => new { row.Product1 }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"",
    "result": "context.Products.Where(row => EF.Functions.Like(row.Product1, \"%Scanner%\")).Select(row => new { row.Product1 }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Products.GroupBy(row => new { row.MaxPageSize }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.MaxPageSize }).Take(1).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
    "result": "context.Products.Where(row => row.Product1 != context.Products.GroupBy(row => new { row.MaxPageSize }).OrderByDescending(group => group.Count()).Select(group => group.Key.MaxPageSize).Take(1).First()).Select(row => new { row.Product1 }).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(city_population) FROM district WHERE city_area > (SELECT avg(city_area) FROM district)",
    "result": "context.Districts.Where(row => row.CityArea > context.Districts.Select(row => (double) row.CityArea).Average()).Select(row => row.CityPopulation).Sum();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = \"Village Store\"",
    "result": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Type == \"City Mall\").Select(row => row.t3.DistrictName).Intersect(context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Type == \"Village Store\").Select(row => row.t3.DistrictName)).ToList();",
    "db_name": "store_product",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT rank) FROM captain",
    "result": "context.Captains.Select(row => row.Rank).Distinct().Count();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , rank FROM captain GROUP BY rank",
    "result": "context.Captains.GroupBy(row => new { row.Rank }).Select(group => new { Count = group.Count(), group.Key.Rank }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM captain ORDER BY age DESC",
    "result": "context.Captains.OrderByDescending(row => row.Age).Select(row => new { row.Name }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , CLASS , rank FROM captain",
    "result": "context.Captains.Select(row => new { row.Name, row.Class, row.Rank }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Captains.GroupBy(row => new { row.Rank }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Rank }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*) > 2",
    "result": "context.Captains.GroupBy(row => new { row.Class }).Where(group => group.Count() > 2).Select(group => new { group.Key.Class }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM captain WHERE rank = 'Midshipman' OR rank = 'Lieutenant'",
    "result": "context.Captains.Where(row => row.Rank == \"Midshipman\" || row.Rank == \"Lieutenant\").Select(row => new { row.Name }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT rank FROM captain WHERE CLASS = 'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS = 'Armed schooner'",
    "result": "context.Captains.Where(row => row.Class == \"Cutter\").Select(row => row.Rank).Intersect(context.Captains.Where(row => row.Class == \"Armed schooner\").Select(row => row.Rank)).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS = 'Third-rate ship of the line'",
    "result": "context.Captains.Select(row => row.Rank).Except(context.Captains.Where(row => row.Class == \"Third-rate ship of the line\").Select(row => row.Rank)).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM captain ORDER BY age LIMIT 1",
    "result": "context.Captains.OrderBy(row => row.Age).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM ship",
    "result": "context.Ships.Count();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , TYPE , flag FROM ship ORDER BY built_year DESC LIMIT 1",
    "result": "context.Ships.OrderByDescending(row => row.BuiltYear).Select(row => new { row.Name, row.Type, row.Flag }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , flag FROM ship GROUP BY flag",
    "result": "context.Ships.GroupBy(row => new { row.Flag }).Select(group => new { Count = group.Count(), group.Key.Flag }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Ships.GroupBy(row => new { row.Flag }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Flag }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM ship ORDER BY built_year , CLASS",
    "result": "context.Ships.OrderBy(row => row.BuiltYear).ThenBy(row => row.Class).Select(row => new { row.Name }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT TYPE FROM ship WHERE flag = 'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag = 'Malta'",
    "result": "context.Ships.Where(row => row.Flag == \"Panama\").Select(row => row.Type).Intersect(context.Ships.Where(row => row.Flag == \"Malta\").Select(row => row.Type)).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Ships.GroupBy(row => new { row.BuiltYear }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BuiltYear }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING count(*) > 1",
    "result": "context.Ships.Join(context.Captains, t1 => t1.ShipId, t2 => t2.ShipId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ShipId }).Where(group => group.Count() > 1).Select(group => new { group.First().t1.Name }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",
    "result": "context.Ships.Where(row => !context.Captains.Select(row => row.ShipId).Contains(row.ShipId)).Select(row => new { row.Name, row.Class }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id ORDER BY t2.age LIMIT 1",
    "result": "context.Ships.Join(context.Captains, t1 => t1.ShipId, t2 => t2.ShipId, (t1, t2) => new { t1, t2 }).OrderBy(row => row.t2.Age).Select(row => new { row.t1.Name }).Take(1).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman')",
    "result": "context.Ships.Where(row => !context.Captains.Where(row => row.Rank == \"Midshipman\").Select(row => row.ShipId).Contains(row.ShipId)).Select(row => new { row.Name, row.Flag }).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Lieutenant'",
    "result": "context.Ships.Join(context.Captains, t1 => t1.ShipId, t2 => t2.ShipId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Rank == \"Midshipman\").Select(row => row.t1.Name).Intersect(context.Ships.Join(context.Captains, t1 => t1.ShipId, t2 => t2.ShipId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Rank == \"Lieutenant\").Select(row => row.t1.Name)).ToList();",
    "db_name": "ship_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Products",
    "result": "context.Products.Count();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
    "result": "context.Products.OrderBy(row => (double) row.ProductPrice).Select(row => new { row.ProductName }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Name , Product_Type_Code FROM Products",
    "result": "context.Products.Select(row => new { row.ProductName, row.ProductTypeCode }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Price FROM Products WHERE Product_Name = \"Dining\" OR Product_Name = \"Trading Policy\"",
    "result": "context.Products.Where(row => row.ProductName == \"Dining\" || row.ProductName == \"Trading Policy\").Select(row => new { row.ProductPrice }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Product_Price) FROM Products",
    "result": "context.Products.Select(row => (double) row.ProductPrice).Average();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1",
    "result": "context.Products.OrderByDescending(row => (double) row.ProductPrice).Select(row => new { row.ProductName }).Take(1).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code",
    "result": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Select(group => new { group.Key.ProductTypeCode, Count = group.Count() }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Products.GroupBy(row => new { row.ProductTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ProductTypeCode }).Take(1).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*) >= 2",
    "result": "context.Products.GroupBy(row => new { row.ProductTypeCode }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProductTypeCode }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price < 3000",
    "result": "context.Products.Where(row => row.ProductPrice > 4500).Select(row => row.ProductTypeCode).Intersect(context.Products.Where(row => row.ProductPrice < 3000).Select(row => row.ProductTypeCode)).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Product_Name , COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name",
    "result": "context.Products.Join(context.ProductsInEvents, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductName }).Select(group => new { group.Key.ProductName, Count = group.Count() }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Product_Name , COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC",
    "result": "context.Products.Join(context.ProductsInEvents, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductName }).Select(group => new { group.Key.ProductName, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*) >= 2",
    "result": "context.Products.Join(context.ProductsInEvents, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductName }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProductName }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*) >= 2 ORDER BY T1.Product_Name",
    "result": "context.Products.Join(context.ProductsInEvents, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductName }).Where(group => group.Count() >= 2).OrderBy(group => group.First().T1.ProductName).Select(group => new { group.Key.ProductName }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)",
    "result": "context.Products.Where(row => !context.ProductsInEvents.Select(row => row.ProductId).Contains(row.ProductId)).Select(row => new { row.ProductName }).ToList();",
    "db_name": "solvency_ii",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products",
    "result": "context.Products.Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM ref_colors",
    "result": "context.RefColors.Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM CHARACTERISTICS",
    "result": "context.Characteristics.Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT color_description FROM ref_colors",
    "result": "context.RefColors.Select(row => new { row.ColorDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS",
    "result": "context.Characteristics.Select(row => new { row.CharacteristicName }).Distinct().ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_name FROM products WHERE product_category_code = \"Spices\"",
    "result": "context.Products.Where(row => row.ProductCategoryCode == \"Spices\").Select(row => new { row.ProductName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.product_name , T2.color_description , T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code = T2.color_code WHERE product_category_code = \"Herbs\"",
    "result": "context.Products.Join(context.RefColors, T1 => T1.ColorCode, T2 => T2.ColorCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ProductCategoryCode == \"Herbs\").Select(row => new { row.T1.ProductName, row.T2.ColorDescription, row.T1.ProductDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products WHERE product_category_code = \"Seeds\"",
    "result": "context.Products.Where(row => row.ProductCategoryCode == \"Seeds\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_category_code FROM products WHERE product_name = \"flax\"",
    "result": "context.Products.Where(row => row.ProductName == \"flax\").Select(row => new { row.ProductCategoryCode }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description = 'yellow'",
    "result": "context.Products.Join(context.RefColors, T1 => T1.ColorCode, T2 => T2.ColorCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ColorDescription == \"yellow\").Select(row => new { row.T1.ProductName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%'",
    "result": "context.RefProductCategories.Join(context.Products, T1 => T1.ProductCategoryCode, T2 => T2.ProductCategoryCode, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.ProductDescription, \"%t%\")).Select(row => new { row.T1.ProductCategoryDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"catnip\"",
    "result": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ProductName == \"catnip\").Select(row => new { row.t2.ColorDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.color_code , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"chervil\"",
    "result": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ProductName == \"chervil\").Select(row => new { row.t1.ColorCode, row.t2.ColorDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.product_id , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id HAVING count(*) >= 2",
    "result": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).Join(context.ProductCharacteristics, joined => joined.t1.ProductId, t3 => t3.ProductId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.ProductId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProductId, group.First().t2.ColorDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"white\"",
    "result": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).Where(row => row.t2.ColorDescription == \"white\").Select(row => new { row.t1.ProductName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"sesame\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ProductName == \"sesame\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"sesame\").Select(row => row.t3.CharacteristicName).Distinct().Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"sesame\").Select(row => new { row.t3.CharacteristicName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.characteristic_name , t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"cumin\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"cumin\").Select(row => new { row.t3.CharacteristicName, row.t3.CharacteristicDataType }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\" AND t3.characteristic_type_code = \"Grade\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"sesame\" && row.t3.CharacteristicTypeCode == \"Grade\").Select(row => new { row.t3.CharacteristicName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"laurel\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"laurel\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"flax\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ProductName == \"flax\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"red\" AND t3.characteristic_name = \"fast\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.RefColors, joined => joined.t1.ColorCode, t4 => t4.ColorCode, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ColorDescription == \"red\" && row.t3.CharacteristicName == \"fast\").Select(row => new { row.t1.ProductName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"hot\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.CharacteristicName == \"hot\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"warm\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.CharacteristicName == \"warm\").Select(row => new { row.t1.ProductName }).Distinct().ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"red\" AND t3.characteristic_name = \"slow\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.RefColors, joined => joined.t1.ColorCode, t4 => t4.ColorCode, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ColorDescription == \"red\" && row.t3.CharacteristicName == \"slow\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"white\" OR t3.characteristic_name = \"hot\"",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.RefColors, joined => joined.t1.ColorCode, t4 => t4.ColorCode, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ColorDescription == \"white\" || row.t3.CharacteristicName == \"hot\").Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code = \"Herbs\"",
    "result": "context.RefProductCategories.Where(row => row.ProductCategoryCode == \"Herbs\").Select(row => new { row.UnitOfMeasure }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code = \"Spices\"",
    "result": "context.RefProductCategories.Where(row => row.ProductCategoryCode == \"Spices\").Select(row => new { row.ProductCategoryDescription }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT product_category_description , unit_of_measure FROM ref_product_categories WHERE product_category_code = \"Herbs\"",
    "result": "context.RefProductCategories.Where(row => row.ProductCategoryCode == \"Herbs\").Select(row => new { row.ProductCategoryDescription, row.UnitOfMeasure }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"cumin\"",
    "result": "context.Products.Join(context.RefProductCategories, t1 => t1.ProductCategoryCode, t2 => t2.ProductCategoryCode, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ProductName == \"cumin\").Select(row => new { row.t2.UnitOfMeasure }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.unit_of_measure , t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"chervil\"",
    "result": "context.Products.Join(context.RefProductCategories, t1 => t1.ProductCategoryCode, t2 => t2.ProductCategoryCode, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ProductName == \"chervil\").Select(row => new { row.t2.UnitOfMeasure, row.t2.ProductCategoryCode }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code WHERE t3.color_description = \"white\" AND t2.unit_of_measure != \"Handful\"",
    "result": "context.Products.Join(context.RefProductCategories, t1 => t1.ProductCategoryCode, t2 => t2.ProductCategoryCode, (t1, t2) => new { t1, t2 }).Join(context.RefColors, joined => joined.t1.ColorCode, t3 => t3.ColorCode, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.ColorDescription == \"white\" && row.t2.UnitOfMeasure != \"Handful\").Select(row => new { row.t1.ProductName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ColorDescription }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ColorDescription }).Take(1).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ColorDescription }).OrderBy(group => group.Count()).Select(group => new { group.Key.ColorDescription }).Take(1).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.CharacteristicName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CharacteristicName }).Take(1).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name , t1.other_characteristic_details , t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id",
    "result": "context.Characteristics.Select(row => new { row.CharacteristicName, row.OtherCharacteristicDetails, row.CharacteristicDataType }).Except(context.Characteristics.Join(context.ProductCharacteristics, t1 => t1.CharacteristicId, t2 => t2.CharacteristicId, (t1, t2) => new { t1, t2 }).Select(row => new { row.t1.CharacteristicName, row.t1.OtherCharacteristicDetails, row.t1.CharacteristicDataType })).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*) >= 2",
    "result": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.CharacteristicName }).Where(group => group.Count() >= 2).Select(group => new { group.Key.CharacteristicName }).ToList();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
    "result": "context.RefColors.Where(row => !context.Products.Select(row => row.ColorCode).Contains(row.ColorCode)).Count();",
    "db_name": "products_gen_characteristics",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.property_id , count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id",
    "result": "context.Properties.Join(context.Residents, T1 => T1.PropertyId, T2 => T2.PropertyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PropertyId }).Select(group => new { group.Key.PropertyId, Count = group.Count() }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id = T2.organization_id WHERE T2.organization_details = 'Denesik and Sons Party'",
    "result": "context.Services.Join(context.Organizations, T1 => T1.OrganizationId, T2 => T2.OrganizationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrganizationDetails == \"Denesik and Sons Party\").Select(row => new { row.T1.ServiceTypeCode }).Distinct().ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.resident_id , T1.other_details , count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id = T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC",
    "result": "context.Residents.Join(context.ResidentsServices, T1 => T1.ResidentId, T2 => T2.ResidentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ResidentId }).Select(group => new { group.Key.ResidentId, group.First().T1.OtherDetails, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.service_id , T1.service_details , count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id = T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Services.Join(context.ResidentsServices, T1 => T1.ServiceId, T2 => T2.ServiceId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ServiceId }).Select(group => new { group.Key.ServiceId, group.First().T1.ServiceDetails, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.thing_id , T1.type_of_Thing_Code , T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id",
    "result": "context.Things.Join(context.Organizations, T1 => T1.OrganizationId, T2 => T2.OrganizationId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.ThingId, row.T1.TypeOfThingCode, row.T2.OrganizationDetails }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 3",
    "result": "context.Customers.Join(context.CustomerEvents, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 3).Select(group => new { group.Key.CustomerId, group.First().T1.CustomerDetails }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.date_moved_in , T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id",
    "result": "context.Customers.Join(context.CustomerEvents, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.DateMovedIn, row.T1.CustomerId, row.T1.CustomerDetails }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Customer_Event_ID , T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID = T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3",
    "result": "context.CustomerEvents.Join(context.CustomerEventNotes, T1 => T1.CustomerEventId, T2 => T2.CustomerEventId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerEventId }).Where(group => group.Count() >= 1 && group.Count() <= 3).Select(group => new { group.Key.CustomerEventId, group.First().T1.PropertyId }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.service_details = 'Unsatisfied'",
    "result": "context.Things.Join(context.TimedLocationsOfThings, T1 => T1.ThingId, T2 => T2.ThingId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ServiceDetails == \"Unsatisfied\").Select(row => row.T2.LocationCode).Distinct().Count();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things",
    "result": "context.TimedStatusOfThings.Select(row => row.StatusOfThingCode).Distinct().Count();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(date_moved_in) FROM Residents",
    "result": "context.Residents.Select(row => row.DateMovedIn).Max();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'",
    "result": "context.Residents.Where(row => EF.Functions.Like(row.OtherDetails, \"%Miss%\")).Select(row => new { row.OtherDetails }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT customer_event_id , date_moved_in , property_id FROM customer_events",
    "result": "context.CustomerEvents.Select(row => new { row.CustomerEventId, row.DateMovedIn, row.PropertyId }).ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )",
    "result": "context.Customers.Where(row => !context.CustomerEvents.Select(row => row.CustomerId).Contains(row.CustomerId)).Count();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT date_moved_in FROM residents",
    "result": "context.Residents.Select(row => new { row.DateMovedIn }).Distinct().ToList();",
    "db_name": "local_govt_and_lot",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800",
    "result": "context.Cinemas.Select(row => row.Location).Except(context.Cinemas.Where(row => row.Capacity > 800).Select(row => row.Location)).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011",
    "result": "context.Cinemas.Where(row => row.OpenningYear == 2010).Select(row => row.Location).Intersect(context.Cinemas.Where(row => row.OpenningYear == 2011).Select(row => row.Location)).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM cinema",
    "result": "context.Cinemas.Count();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , openning_year , capacity FROM cinema",
    "result": "context.Cinemas.Select(row => new { row.Name, row.OpenningYear, row.Capacity }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , LOCATION FROM cinema WHERE capacity > (SELECT avg(capacity) FROM cinema)",
    "result": "context.Cinemas.Where(row => row.Capacity > context.Cinemas.Select(row => row.Capacity).Average()).Select(row => new { row.Name, row.Location }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT LOCATION FROM cinema",
    "result": "context.Cinemas.Select(row => new { row.Location }).Distinct().ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , openning_year FROM cinema ORDER BY openning_year DESC",
    "result": "context.Cinemas.OrderByDescending(row => row.OpenningYear).Select(row => new { row.Name, row.OpenningYear }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
    "result": "context.Cinemas.OrderByDescending(row => row.Capacity).Select(row => new { row.Name, row.Location }).Take(1).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(capacity) , min(capacity) , max(capacity) FROM cinema WHERE openning_year >= 2011",
    "result": "context.Cinemas.Where(row => row.OpenningYear >= 2011).GroupBy(row => 1).Select(group => new { AverageCapacity = group.Select(row => row.Capacity).Average(), MinCapacity = group.Select(row => row.Capacity).Min(), MaxCapacity = group.Select(row => row.Capacity).Max() }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION , count(*) FROM cinema GROUP BY LOCATION",
    "result": "context.Cinemas.GroupBy(row => new { row.Location }).Select(group => new { group.Key.Location, Count = group.Count() }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Cinemas.Where(row => row.OpenningYear >= 2010).GroupBy(row => new { row.Location }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Location }).Take(1).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) >= 2",
    "result": "context.Cinemas.Where(row => row.Capacity > 300).GroupBy(row => new { row.Location }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Location }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title , directed_by FROM film",
    "result": "context.Films.Select(row => new { row.Title, row.DirectedBy }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT directed_by FROM film",
    "result": "context.Films.Select(row => new { row.DirectedBy }).Distinct().ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT directed_by , count(*) FROM film GROUP BY directed_by",
    "result": "context.Films.GroupBy(row => new { row.DirectedBy }).Select(group => new { group.Key.DirectedBy, Count = group.Count() }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id",
    "result": "context.Schedules.Join(context.Cinemas, T1 => T1.CinemaId, T2 => T2.CinemaId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CinemaId }).Select(group => new { group.First().T2.Name, SumShowTimesPerDay = group.Select(row => row.T1.ShowTimesPerDay).Sum() }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id",
    "result": "context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FilmId }).Select(group => new { group.OrderByDescending(row => row.T1.Price).First().T2.Title, MaxPrice = group.Select(row => row.T1.Price).Max() }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.name , T2.title , T1.date , T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id",
    "result": "context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).Join(context.Cinemas, joined => joined.T1.CinemaId, T3 => T3.CinemaId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Name, row.T2.Title, row.T1.Date, row.T1.Price }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT title , directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
    "result": "context.Films.Where(row => !context.Schedules.Select(row => row.FilmId).Contains(row.FilmId)).Select(row => new { row.Title, row.DirectedBy }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
    "result": "context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DirectedBy }).OrderByDescending(group => group.Sum(row => row.T1.ShowTimesPerDay)).Select(group => new { group.Key.DirectedBy }).Take(1).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) > 1",
    "result": "context.Cinemas.Where(row => row.Capacity > 300).GroupBy(row => new { row.Location }).Where(group => group.Count() > 1).Select(group => new { group.Key.Location }).ToList();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
    "result": "context.Films.Where(row => EF.Functions.Like(row.Title, \"%Dummy%\")).Count();",
    "db_name": "cinema",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM WINE ORDER BY Score LIMIT 1",
    "result": "context.Wines.OrderBy(row => row.Score).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1",
    "result": "context.Wines.OrderBy(row => row.Score).Select(row => new { row.Winery }).Take(1).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Grape , Appelation FROM WINE",
    "result": "context.Wines.Select(row => new { row.Grape, row.Appelation }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name , Score FROM WINE",
    "result": "context.Wines.Select(row => new { row.Name, row.Score }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Area , County FROM APPELLATIONS",
    "result": "context.Appellations.Select(row => new { row.Area, row.County }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Price FROM WINE WHERE YEAR < 2010",
    "result": "context.Wines.Where(row => row.Year < 2010).Select(row => new { row.Price }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM WINE WHERE score > 90",
    "result": "context.Wines.Where(row => row.Score > 90).Select(row => new { row.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"Red\"",
    "result": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Color == \"Red\").Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = \"North Coast\"",
    "result": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Area == \"North Coast\").Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM WINE WHERE Winery = \"Robert Biale\"",
    "result": "context.Wines.Where(row => row.Winery == \"Robert Biale\").Count();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM APPELLATIONS WHERE County = \"Napa\"",
    "result": "context.Appellations.Where(row => row.County == \"Napa\").Count();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Sonoma\"",
    "result": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T1.County == \"Sonoma\").Select(row => row.T2.Price).Average();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name , T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"White\"",
    "result": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Color == \"White\").Select(row => new { row.T2.Name, row.T2.Score }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = \"Central Coast\" AND T2.year < 2005",
    "result": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Area == \"Central Coast\" && row.T2.Year < 2005).Select(row => row.T2.Price).Max();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"White\" AND T2.score > 90",
    "result": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Color == \"White\" && row.T2.Score > 90).Select(row => new { row.T1.Grape1 }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"Red\" AND T2.price > 50",
    "result": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Color == \"Red\" && row.T2.Price > 50).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50",
    "result": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T1.County == \"Monterey\" && row.T2.Price < 50).Select(row => new { row.T2.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , Grape FROM WINE GROUP BY Grape",
    "result": "context.Wines.GroupBy(row => new { row.Grape }).Select(group => new { Count = group.Count(), group.Key.Grape }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Price) , YEAR FROM WINE GROUP BY YEAR",
    "result": "context.Wines.GroupBy(row => new { row.Year }).Select(group => new { AveragePrice = group.Select(row => row.Price).Average(), group.Key.Year }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Name FROM WINE WHERE Price > (SELECT min(Price) FROM wine WHERE Winery = \"John Anthony\")",
    "result": "context.Wines.Where(row => row.Price > context.Wines.Where(row => row.Winery == \"John Anthony\").Select(row => row.Price).Min()).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Name FROM WINE ORDER BY Name",
    "result": "context.Wines.OrderBy(row => row.Name).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Name FROM WINE ORDER BY price",
    "result": "context.Wines.OrderBy(row => row.Price).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1",
    "result": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Grape }).OrderByDescending(group => group.Average(row => row.T2.Price)).Select(group => new { group.First().T1.Color }).Take(1).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Name FROM WINE WHERE YEAR < 2000 OR YEAR > 2010",
    "result": "context.Wines.Where(row => row.Year < 2000 || row.Year > 2010).Select(row => new { row.Name }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100",
    "result": "context.Wines.Where(row => row.Price >= 50 && row.Price <= 100).Select(row => new { row.Winery }).Distinct().ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Price) , max(Score) FROM WINE WHERE Appelation = \"St. Helena\"",
    "result": "context.Wines.Where(row => row.Appelation == \"St. Helena\").GroupBy(row => 1).Select(group => new { MaxPrice = group.Select(row => row.Price).Max(), MaxScore = group.Select(row => row.Score).Max() }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(Price) , max(Score) , YEAR FROM WINE GROUP BY YEAR",
    "result": "context.Wines.GroupBy(row => new { row.Year }).Select(group => new { MaxPrice = group.Select(row => row.Price).Max(), MaxScore = group.Select(row => row.Score).Max(), group.Key.Year }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(Price) , avg(Score) , Appelation FROM WINE GROUP BY Appelation",
    "result": "context.Wines.GroupBy(row => new { row.Appelation }).Select(group => new { AveragePrice = group.Select(row => row.Price).Average(), AverageScore = group.Select(row => row.Score).Average(), group.Key.Appelation }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*) >= 4",
    "result": "context.Wines.GroupBy(row => new { row.Winery }).Where(group => group.Count() >= 4).Select(group => new { group.Key.Winery }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING count(*) <= 3",
    "result": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Appelation }).Where(group => group.Count() <= 3).Select(group => new { group.First().T1.County }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM WINE WHERE YEAR < (SELECT min(YEAR) FROM WINE WHERE Winery = \"Brander\")",
    "result": "context.Wines.Where(row => row.Year < context.Wines.Where(row => row.Winery == \"Brander\").Select(row => row.Year).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM WINE WHERE Price > (SELECT max(Price) FROM WINE WHERE YEAR = 2006)",
    "result": "context.Wines.Where(row => row.Price > context.Wines.Where(row => row.Year == 2006).Select(row => row.Price).Max()).Select(row => new { row.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE WHERE T1.Color = \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
    "result": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Color == \"White\").GroupBy(row => new { row.T2.Winery }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Winery }).Take(3).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Grape , Winery , YEAR FROM WINE WHERE Price > 100 ORDER BY YEAR",
    "result": "context.Wines.Where(row => row.Price > 100).OrderBy(row => row.Year).Select(row => new { row.Grape, row.Winery, row.Year }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Grape , Appelation , Name FROM WINE WHERE Score > 93 ORDER BY Name",
    "result": "context.Wines.Where(row => row.Score > 93).OrderBy(row => row.Name).Select(row => new { row.Grape, row.Appelation, row.Name }).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Appelation FROM WINE WHERE YEAR > 2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area = \"Central Coast\"",
    "result": "context.Wines.Where(row => row.Year > 2008).Select(row => row.Appelation).Except(context.Appellations.Where(row => row.Area == \"Central Coast\").Select(row => row.Appelation)).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma')",
    "result": "context.Wines.Where(row => !context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T1.County == \"Sonoma\").Select(row => row.T1.Appelation).Contains(row.Appelation)).Select(row => row.Price).Average();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Score > 90).GroupBy(row => new { row.T1.County }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.County }).Take(1).ToList();",
    "db_name": "wine_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM company",
    "result": "context.Companies.Count();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT company , rank FROM company ORDER BY Sales_billion DESC",
    "result": "context.Companies.OrderByDescending(row => row.SalesBillion).Select(row => new { row.Company1, row.Rank }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT company , main_industry FROM company WHERE headquarters != 'USA'",
    "result": "context.Companies.Where(row => row.Headquarters != \"USA\").Select(row => new { row.Company1, row.MainIndustry }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT company , headquarters FROM company ORDER BY market_value DESC",
    "result": "context.Companies.OrderByDescending(row => row.MarketValue).Select(row => new { row.Company1, row.Headquarters }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(market_value) , max(market_value) , avg(market_value) FROM company",
    "result": "context.Companies.GroupBy(row => 1).Select(group => new { MinMarketValue = group.Select(row => row.MarketValue).Min(), MaxMarketValue = group.Select(row => row.MarketValue).Max(), AverageMarketValue = group.Select(row => row.MarketValue).Average() }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT main_industry FROM company",
    "result": "context.Companies.Select(row => new { row.MainIndustry }).Distinct().ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT headquarters , count(*) FROM company GROUP BY headquarters",
    "result": "context.Companies.GroupBy(row => new { row.Headquarters }).Select(group => new { group.Key.Headquarters, Count = group.Count() }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT main_industry , sum(market_value) FROM company GROUP BY main_industry",
    "result": "context.Companies.GroupBy(row => new { row.MainIndustry }).Select(group => new { group.Key.MainIndustry, SumMarketValue = group.Select(row => row.MarketValue).Sum() }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING count(*) >= 2",
    "result": "context.Companies.Where(row => row.MainIndustry == \"Banking\").GroupBy(row => new { row.Headquarters }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Headquarters }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT station_id , LOCATION , manager_name FROM gas_station ORDER BY open_year",
    "result": "context.GasStations.OrderBy(row => row.OpenYear).Select(row => new { row.StationId, row.Location, row.ManagerName }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005",
    "result": "context.GasStations.Where(row => row.OpenYear >= 2000 && row.OpenYear <= 2005).Count();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION , count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
    "result": "context.GasStations.GroupBy(row => new { row.Location }).Select(group => new { group.Key.Location, Count = group.Count() }).OrderBy(group => group.Count).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'",
    "result": "context.Companies.Where(row => row.MainIndustry == \"Banking\").Select(row => row.Headquarters).Intersect(context.Companies.Where(row => row.MainIndustry == \"Oil and gas\").Select(row => row.Headquarters)).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry = 'Banking'",
    "result": "context.Companies.Select(row => row.Headquarters).Except(context.Companies.Where(row => row.MainIndustry == \"Banking\").Select(row => row.Headquarters)).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id",
    "result": "context.StationCompanies.Join(context.Companies, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CompanyId }).Select(group => new { group.First().T2.Company1, Count = group.Count() }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT company , main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
    "result": "context.Companies.Where(row => !context.StationCompanies.Select(row => row.CompanyId).Contains(row.CompanyId)).Select(row => new { row.Company1, row.MainIndustry }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.company = 'ExxonMobil'",
    "result": "context.StationCompanies.Join(context.Companies, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).Join(context.GasStations, joined => joined.T1.StationId, T3 => T3.StationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Company1 == \"ExxonMobil\").Select(row => new { row.T3.ManagerName }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.market_value > 100",
    "result": "context.StationCompanies.Join(context.Companies, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).Join(context.GasStations, joined => joined.T1.StationId, T3 => T3.StationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.MarketValue > 100).Select(row => new { row.T3.Location }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
    "result": "context.GasStations.Where(row => row.OpenYear > 2000).GroupBy(row => new { row.ManagerName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ManagerName }).Take(1).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LOCATION FROM gas_station ORDER BY open_year",
    "result": "context.GasStations.OrderBy(row => row.OpenYear).Select(row => new { row.Location }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT rank , company , market_value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion",
    "result": "context.Companies.Where(row => row.MainIndustry == \"Banking\").OrderBy(row => row.SalesBillion).ThenBy(row => row.ProfitsBillion).Select(row => new { row.Rank, row.Company1, row.MarketValue }).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.location , T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
    "result": "context.StationCompanies.Join(context.Companies, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).Join(context.GasStations, joined => joined.T1.StationId, T3 => T3.StationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T2.AssetsBillion).Select(row => new { row.T3.Location, row.T3.RepresentativeName }).Take(3).ToList();",
    "db_name": "gas_company",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Dan'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Dan\").Select(row => row.T2.Friend).Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Person WHERE gender = 'female'",
    "result": "context.People.Where(row => row.Gender == \"female\").Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(age) FROM Person",
    "result": "context.People.Select(row => row.Age).Average();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT city) FROM Person",
    "result": "context.People.Select(row => row.City).Distinct().Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT job) FROM Person",
    "result": "context.People.Select(row => row.Job).Distinct().Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Person WHERE age = (SELECT max(age) FROM person)",
    "result": "context.People.Where(row => row.Age == context.People.Select(row => row.Age).Max()).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Person WHERE job = 'student' AND age = (SELECT max(age) FROM person WHERE job = 'student' )",
    "result": "context.People.Where(row => row.Job == \"student\" && row.Age == context.People.Where(row => row.Job == \"student\").Select(row => row.Age).Max()).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Person WHERE gender = 'male' AND age = (SELECT min(age) FROM person WHERE gender = 'male' )",
    "result": "context.People.Where(row => row.Gender == \"male\" && row.Age == context.People.Where(row => row.Gender == \"male\").Select(row => row.Age).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT age FROM Person WHERE job = 'doctor' AND name = 'Zach'",
    "result": "context.People.Where(row => row.Job == \"doctor\" && row.Name == \"Zach\").Select(row => new { row.Age }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Person WHERE age < 30",
    "result": "context.People.Where(row => row.Age < 30).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Person WHERE age > 30 AND job = 'engineer'",
    "result": "context.People.Where(row => row.Age > 30 && row.Job == \"engineer\").Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(age) , gender FROM Person GROUP BY gender",
    "result": "context.People.GroupBy(row => new { row.Gender }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), group.Key.Gender }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(age) , job FROM Person GROUP BY job",
    "result": "context.People.GroupBy(row => new { row.Job }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), group.Key.Job }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(age) , job FROM Person WHERE gender = 'male' GROUP BY job",
    "result": "context.People.Where(row => row.Gender == \"male\").GroupBy(row => new { row.Job }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), group.Key.Job }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT min(age) , job FROM Person GROUP BY job",
    "result": "context.People.GroupBy(row => new { row.Job }).Select(group => new { MinAge = group.Select(row => row.Age).Min(), group.Key.Job }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , gender FROM Person WHERE age < 40 GROUP BY gender",
    "result": "context.People.Where(row => row.Age < 40).GroupBy(row => new { row.Gender }).Select(group => new { Count = group.Count(), group.Key.Gender }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Person WHERE age > (SELECT min(age) FROM person WHERE job = 'engineer') ORDER BY age",
    "result": "context.People.Where(row => row.Age > context.People.Where(row => row.Job == \"engineer\").Select(row => row.Age).Min()).OrderBy(row => row.Age).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM Person WHERE age > (SELECT max(age) FROM person WHERE job = 'engineer')",
    "result": "context.People.Where(row => row.Age > context.People.Where(row => row.Job == \"engineer\").Select(row => row.Age).Max()).Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , job FROM Person ORDER BY name",
    "result": "context.People.OrderBy(row => row.Name).Select(row => new { row.Name, row.Job }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Person ORDER BY age DESC",
    "result": "context.People.OrderByDescending(row => row.Age).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM Person WHERE gender = 'male' ORDER BY age",
    "result": "context.People.Where(row => row.Gender == \"male\").OrderBy(row => row.Age).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' INTERSECT SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Dan\").Select(row => new { row.T1.Name, row.T1.Age }).Intersect(context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Alice\").Select(row => new { row.T1.Name, row.T1.Age })).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' OR T2.friend = 'Alice'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Dan\" || row.T2.Friend == \"Alice\").Select(row => new { row.T1.Name, row.T1.Age }).Distinct().ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => context.People.Where(row => row.Age > 40).Select(row => row.Name).Contains(row.T2.Friend)).Select(row => row.T1.Name).Intersect(context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => context.People.Where(row => row.Age < 30).Select(row => row.Name).Contains(row.T2.Friend)).Select(row => row.T1.Name)).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => context.People.Where(row => row.Age > 40).Select(row => row.Name).Contains(row.T2.Friend)).Select(row => row.T1.Name).Except(context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => context.People.Where(row => row.Age < 30).Select(row => row.Name).Contains(row.T2.Friend)).Select(row => row.T1.Name)).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.job = 'student'",
    "result": "context.People.Select(row => row.Name).Except(context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Job == \"student\").Select(row => row.T2.Name)).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*) = 1",
    "result": "context.PersonFriends.GroupBy(row => new { row.Name }).Where(group => group.Count() == 1).Select(group => new { group.Key.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Bob'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Bob\").Select(row => new { row.T2.Friend }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Bob'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Bob\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Zach' AND T1.gender = 'female'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Zach\" && row.T1.Gender == \"female\").Select(row => new { row.T1.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'female'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Alice\" && row.T1.Gender == \"female\").Select(row => new { row.T2.Friend }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'male' AND T1.job = 'doctor'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Alice\" && row.T1.Gender == \"male\" && row.T1.Job == \"doctor\").Select(row => new { row.T2.Friend }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.city = 'new york city'",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T1.City == \"new york city\").Select(row => new { row.T2.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age < (SELECT avg(age) FROM person)",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age < context.People.Select(row => row.Age).Average()).Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.name , T2.friend , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person)",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age > context.People.Select(row => row.Age).Average()).Select(row => new { row.T2.Name, row.T2.Friend, row.T1.Age }).Distinct().ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT friend FROM PersonFriend WHERE name = 'Zach' AND YEAR = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')",
    "result": "context.PersonFriends.Where(row => row.Name == \"Zach\" && row.Year == context.PersonFriends.Where(row => row.Name == \"Zach\").Select(row => row.Year).Max()).Select(row => new { row.Friend }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Zach' AND T2.year = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Zach\" && row.T2.Year == context.PersonFriends.Where(row => row.Name == \"Zach\").Select(row => row.Year).Max()).Select(row => new { row.T1.Age }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM PersonFriend WHERE friend = 'Alice' AND YEAR = (SELECT min(YEAR) FROM PersonFriend WHERE friend = 'Alice')",
    "result": "context.PersonFriends.Where(row => row.Friend == \"Alice\" && row.Year == context.PersonFriends.Where(row => row.Friend == \"Alice\").Select(row => row.Year).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.name , T1.age , T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice' AND T2.year = (SELECT max(YEAR) FROM PersonFriend WHERE friend = 'Alice')",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Alice\" && row.T2.Year == context.PersonFriends.Where(row => row.Friend == \"Alice\").Select(row => row.Year).Max()).Select(row => new { row.T1.Name, row.T1.Age, row.T1.Job }).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
    "result": "context.People.Select(row => row.Name).Except(context.PersonFriends.Select(row => row.Name)).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.name , avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1",
    "result": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { group.Key.Name, AverageAge = group.Select(row => row.T1.Age).Average() }).OrderByDescending(group => group.AverageAge).Take(1).ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city = 'Austin')",
    "result": "context.PersonFriends.Where(row => !context.People.Where(row => row.City == \"Austin\").Select(row => row.Name).Contains(row.Friend)).Select(row => row.Name).Distinct().Count();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name = T2.name JOIN PersonFriend AS T3 ON T1.friend = T3.name JOIN PersonFriend AS T4 ON T3.friend = T4.name WHERE T2.name = 'Alice' AND T4.name != 'Alice'",
    "result": "context.PersonFriends.Join(context.People, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Join(context.PersonFriends, joined => joined.T1.Friend, T3 => T3.Name, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.PersonFriends, joined => joined.T3.Friend, T4 => T4.Name, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T2.Name == \"Alice\" && row.T4.Name != \"Alice\").Select(row => new { row.T4.Name }).Distinct().ToList();",
    "db_name": "network_2",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM country",
    "result": "context.Countries.Count();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country_name , Capital FROM country",
    "result": "context.Countries.Select(row => new { row.CountryName, row.Capital }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
    "result": "context.Countries.Where(row => EF.Functions.Like(row.OfficialNativeLanguage, \"%English%\")).Select(row => new { row.OfficialNativeLanguage }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT POSITION FROM match_season",
    "result": "context.MatchSeasons.Select(row => new { row.Position }).Distinct().ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Player FROM match_season WHERE College = \"UCLA\"",
    "result": "context.MatchSeasons.Where(row => row.College == \"UCLA\").Select(row => new { row.Player }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT POSITION FROM match_season WHERE College = \"UCLA\" OR College = \"Duke\"",
    "result": "context.MatchSeasons.Where(row => row.College == \"UCLA\" || row.College == \"Duke\").Select(row => new { row.Position }).Distinct().ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Draft_Pick_Number , Draft_Class FROM match_season WHERE POSITION = \"Defender\"",
    "result": "context.MatchSeasons.Where(row => row.Position == \"Defender\").Select(row => new { row.DraftPickNumber, row.DraftClass }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT Team) FROM match_season",
    "result": "context.MatchSeasons.Select(row => row.Team).Distinct().Count();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Player , Years_Played FROM player",
    "result": "context.Players.Select(row => new { row.Player1, row.YearsPlayed }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM Team",
    "result": "context.Teams.Select(row => new { row.Name }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Season , T2.Player , T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country",
    "result": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Season, row.T2.Player, row.T1.CountryName }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Country_name = \"Indonesia\"",
    "result": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CountryName == \"Indonesia\").Select(row => new { row.T2.Player }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = \"Dublin\"",
    "result": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Capital == \"Dublin\").Select(row => new { row.T2.Position }).Distinct().ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = \"Maryland\" OR T2.College = \"Duke\"",
    "result": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T2.College == \"Maryland\" || row.T2.College == \"Duke\").Select(row => new { row.T1.OfficialNativeLanguage }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\"",
    "result": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Position == \"Defender\").Select(row => row.T1.OfficialNativeLanguage).Distinct().Count();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Season , T1.Player , T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id",
    "result": "context.MatchSeasons.Join(context.Teams, T1 => T1.Team, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Season, row.T1.Player, row.T2.Name }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Ryley Goldner\"",
    "result": "context.MatchSeasons.Join(context.Teams, T1 => T1.Team, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Ryley Goldner\").Select(row => new { row.T1.Position }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\"",
    "result": "context.MatchSeasons.Join(context.Teams, T1 => T1.Team, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Columbus Crew\").Select(row => row.T1.College).Distinct().Count();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\"",
    "result": "context.Players.Join(context.Teams, T1 => T1.Team, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Columbus Crew\").Select(row => new { row.T1.Player1, row.T1.YearsPlayed }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT POSITION , COUNT(*) FROM match_season GROUP BY POSITION",
    "result": "context.MatchSeasons.GroupBy(row => new { row.Position }).Select(group => new { group.Key.Position, Count = group.Count() }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name",
    "result": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CountryName }).Select(group => new { group.Key.CountryName, Count = group.Count() }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT player FROM match_season ORDER BY College ASC",
    "result": "context.MatchSeasons.OrderBy(row => row.College).Select(row => new { row.Player }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1",
    "result": "context.MatchSeasons.GroupBy(row => new { row.Position }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Position }).Take(1).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
    "result": "context.MatchSeasons.GroupBy(row => new { row.College }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.College }).Take(3).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT College FROM match_season GROUP BY College HAVING count(*) >= 2",
    "result": "context.MatchSeasons.GroupBy(row => new { row.College }).Where(group => group.Count() >= 2).Select(group => new { group.Key.College }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
    "result": "context.Teams.Where(row => !context.MatchSeasons.Select(row => row.Team).Contains(row.TeamId)).Select(row => new { row.Name }).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\"",
    "result": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Position == \"Forward\").Select(row => row.T1.CountryName).Intersect(context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Position == \"Defender\").Select(row => row.T1.CountryName)).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT College FROM match_season WHERE POSITION = \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION = \"Defender\"",
    "result": "context.MatchSeasons.Where(row => row.Position == \"Midfielder\").Select(row => row.College).Intersect(context.MatchSeasons.Where(row => row.Position == \"Defender\").Select(row => row.College)).ToList();",
    "db_name": "match_season",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(hours) FROM projects",
    "result": "context.Projects.Select(row => row.Hours).Sum();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT name) FROM projects",
    "result": "context.Projects.Select(row => row.Name).Distinct().Count();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(hours) FROM projects",
    "result": "context.Projects.Select(row => row.Hours).Average();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
    "result": "context.Projects.OrderByDescending(row => row.Hours).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM projects WHERE hours > (SELECT avg(hours) FROM projects)",
    "result": "context.Projects.Where(row => row.Hours > context.Projects.Select(row => row.Hours).Average()).Select(row => new { row.Name }).ToList();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300",
    "result": "context.Projects.Where(row => row.Hours >= 100 && row.Hours <= 300).Select(row => new { row.Name }).ToList();",
    "db_name": "scientist_1",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM COURSE",
    "result": "context.Courses.Count();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM COURSE WHERE Credits > 2",
    "result": "context.Courses.Where(row => row.Credits > 2).Count();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT CName FROM COURSE WHERE Credits = 1",
    "result": "context.Courses.Where(row => row.Credits == 1).Select(row => new { row.Cname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT CName FROM COURSE WHERE Days = \"MTW\"",
    "result": "context.Courses.Where(row => row.Days == \"MTW\").Select(row => new { row.Cname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM DEPARTMENT WHERE Division = \"AS\"",
    "result": "context.Departments.Where(row => row.Division == \"AS\").Count();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DPhone FROM DEPARTMENT WHERE Room = 268",
    "result": "context.Departments.Where(row => row.Room == \"268\").Select(row => new { row.Dphone }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade = \"B\"",
    "result": "context.EnrolledIns.Where(row => row.Grade == \"B\").Select(row => row.StuId).Distinct().Count();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(gradepoint) , min(gradepoint) FROM GRADECONVERSION",
    "result": "context.Gradeconversions.GroupBy(row => 1).Select(group => new { MaxGradepoint = group.Select(row => row.Gradepoint).Max(), MinGradepoint = group.Select(row => row.Gradepoint).Min() }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
    "result": "context.Students.Where(row => EF.Functions.Like(row.Fname, \"%a%\")).Select(row => new { row.Fname }).Distinct().ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Fname , Lname FROM FACULTY WHERE sex = \"M\" AND Building = \"NEB\"",
    "result": "context.Faculties.Where(row => row.Sex == \"M\" && row.Building == \"NEB\").Select(row => new { row.Fname, row.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Room FROM FACULTY WHERE Rank = \"Professor\" AND Building = \"NEB\"",
    "result": "context.Faculties.Where(row => row.Rank == \"Professor\" && row.Building == \"NEB\").Select(row => new { row.Room }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DName FROM DEPARTMENT WHERE Building = \"Mergenthaler\"",
    "result": "context.Departments.Where(row => row.Building == \"Mergenthaler\").Select(row => new { row.Dname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT CName FROM COURSE ORDER BY Credits",
    "result": "context.Courses.OrderBy(row => row.Credits).Select(row => new { row.Cname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Fname FROM STUDENT ORDER BY Age DESC",
    "result": "context.Students.OrderByDescending(row => row.Age).Select(row => new { row.Fname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT LName FROM STUDENT WHERE Sex = \"F\" ORDER BY Age DESC",
    "result": "context.Students.Where(row => row.Sex == \"F\").OrderByDescending(row => row.Age).Select(row => new { row.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Lname FROM FACULTY WHERE Building = \"Barton\" ORDER BY Lname",
    "result": "context.Faculties.Where(row => row.Building == \"Barton\").OrderBy(row => row.Lname).Select(row => new { row.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Fname FROM FACULTY WHERE Rank = \"Professor\" ORDER BY Fname",
    "result": "context.Faculties.Where(row => row.Rank == \"Professor\").OrderBy(row => row.Fname).Select(row => new { row.Fname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Departments.Join(context.MinorIns, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Dno }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Dname }).Take(1).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO",
    "result": "context.Departments.Select(row => row.Dname).Except(context.Departments.Join(context.MinorIns, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Dname)).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Departments.Join(context.MemberOfs, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Dno }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.Dname }).Take(1).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Faculties.GroupBy(row => new { row.Rank }).OrderBy(group => group.Count()).Select(group => new { group.Key.Rank }).Take(1).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
    "result": "context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Instructor }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Fname, group.First().T2.Lname }).Take(3).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Instructor }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Building }).Take(1).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT(*) >= 5",
    "result": "context.Courses.Join(context.EnrolledIns, T1 => T1.Cid, T2 => T2.Cid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Cid }).Where(group => group.Count() >= 5).Select(group => new { group.First().T1.Cname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE T1.CName = \"COMPUTER LITERACY\"",
    "result": "context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Cname == \"COMPUTER LITERACY\").Select(row => new { row.T2.Fname, row.T2.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Dname , T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = \"INTRODUCTION TO COMPUTER SCIENCE\"",
    "result": "context.Courses.Join(context.Departments, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Cname == \"INTRODUCTION TO COMPUTER SCIENCE\").Select(row => new { row.T2.Dname, row.T2.Room }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T3.Fname , T3.LName , T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID",
    "result": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Fname, row.T3.Lname, row.T2.Gradepoint }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T2.gradepoint >= 3.8",
    "result": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Gradepoint >= 3.8).Select(row => new { row.T3.Fname }).Distinct().ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T1.Fname , T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520",
    "result": "context.Faculties.Join(context.MemberOfs, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Dno == 520).Select(row => new { row.T1.Fname, row.T1.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Fname , T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE T1.DNO = 140",
    "result": "context.MinorIns.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Dno == 140).Select(row => new { row.T2.Fname, row.T2.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = \"Computer Science\"",
    "result": "context.Departments.Join(context.MemberOfs, T1 => T1.Dno, T3 => T3.Dno, (T1, T3) => new { T1, T3 }).Join(context.Faculties, joined => joined.T3.FacId, T2 => T2.FacId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T1.Dname == \"Computer Science\").Select(row => new { row.T2.Lname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = \"Smith\"",
    "result": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Lname == \"Smith\").Select(row => (double) row.T2.Gradepoint).Average();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT max(T2.gradepoint) , min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = \"NYC\"",
    "result": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CityCode == \"NYC\").GroupBy(row => 1).Select(group => new { MaxGradepointT2 = group.Select(row => row.T2.Gradepoint).Max(), MinGradepointT2 = group.Select(row => row.T2.Gradepoint).Min() }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT CName FROM COURSE WHERE Credits = 3 UNION SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4",
    "result": "context.Courses.Where(row => row.Credits == 3).Select(row => row.Cname).Union(context.Courses.Where(row => row.Credits == 1 && row.Hours == \"4\").Select(row => row.Cname)).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT DName FROM DEPARTMENT WHERE Division = \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division = \"EN\" AND Building = \"NEB\"",
    "result": "context.Departments.Where(row => row.Division == \"AS\").Select(row => row.Dname).Union(context.Departments.Where(row => row.Division == \"EN\" && row.Building == \"NEB\").Select(row => row.Dname)).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
    "result": "context.Students.Where(row => !context.EnrolledIns.Select(row => row.StuId).Contains(row.StuId)).Select(row => new { row.Fname }).ToList();",
    "db_name": "college_3",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.name = \"buttercup kitchen\";",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"san francisco\" && row.t1.Name == \"buttercup kitchen\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"chinese\";",
    "result": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Region == \"bay area\" && row.t1.FoodType == \"chinese\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.county = \"santa cruz county\" AND t1.name = \"jamerican cuisine\";",
    "result": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Where(row => row.t2.County == \"santa cruz county\" && row.t1.Name == \"jamerican cuisine\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t1.name = \"jamerican cuisine\";",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Name == \"jamerican cuisine\").Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" );",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"san francisco\" && row.t1.FoodType == \"french\" && row.t1.Rating == context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"san francisco\" && row.t1.FoodType == \"french\").Select(row => row.t1.Rating).Max()).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.name = \"denny\";",
    "result": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Join(context.Locations, joined => joined.t1.Id, t3 => t3.RestaurantId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.Region == \"bay area\" && row.t1.Name == \"denny\").Select(row => new { row.t3.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"bethel island\" AND t2.street_name = \"bethel island rd\" AND t1.rating > 2.5;",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"bethel island\" && row.t2.StreetName == \"bethel island rd\" && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"alameda\";",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"alameda\").Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t1.food_type = \"french\" AND t1.rating > 2.5;",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.FoodType == \"french\" && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"palo alto\" AND t1.food_type = \"french\";",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"palo alto\" && row.t1.FoodType == \"french\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.county = \"yolo county\" AND t1.food_type = \"italian\";",
    "result": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Where(row => row.t2.County == \"yolo county\" && row.t1.FoodType == \"italian\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"french\";",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"mountain view\" && row.t1.FoodType == \"french\").Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.name = \"denny\";",
    "result": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Region == \"bay area\" && row.t1.Name == \"denny\").Count();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"alameda\" AND t1.rating > 2.5;",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"alameda\" && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"san francisco\" && row.t2.StreetName == \"buchanan\" && row.t1.FoodType == \"arabic\" && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"french\";",
    "result": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Join(context.Locations, joined => joined.t1.Id, t3 => t3.RestaurantId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.Region == \"bay area\" && row.t1.FoodType == \"french\").Select(row => new { row.t3.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"bethel island\" AND t2.street_name = \"bethel island rd\";",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"bethel island\" && row.t2.StreetName == \"bethel island rd\").Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" );",
    "result": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Join(context.Locations, joined => joined.t1.Id, t3 => t3.RestaurantId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.Region == \"bay area\" && row.t1.FoodType == \"american\" && row.t1.Rating == context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Region == \"bay area\" && row.t1.FoodType == \"american\").Select(row => row.t1.Rating).Max()).Select(row => new { row.t3.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"yosemite and mono lake area\" AND t1.food_type = \"french\" AND t1.rating > 2.5;",
    "result": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Join(context.Locations, joined => joined.t1.Id, t3 => t3.RestaurantId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.Region == \"yosemite and mono lake area\" && row.t1.FoodType == \"french\" && row.t1.Rating > 2.5).Select(row => new { row.t3.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"mountain view\" && row.t1.FoodType == \"arabic\" && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.name = \"jamerican cuisine\";",
    "result": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"san francisco\" && row.t1.Name == \"jamerican cuisine\").Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region = \"bay area\" );",
    "result": "context.Locations.Join(context.Restaurants, t2 => t2.RestaurantId, t1 => t1.Id, (t2, t1) => new { t2, t1 }).Where(row => context.Geographics.Where(row => row.Region == \"bay area\").Select(row => row.CityName).Contains(row.t1.CityName)).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t2.house_number , t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region = \"region0\" ) AND t1.rating > 2.5;",
    "result": "context.Locations.Join(context.Restaurants, t2 => t2.RestaurantId, t1 => t1.Id, (t2, t1) => new { t2, t1 }).Where(row => context.Geographics.Where(row => row.Region == \"region0\").Select(row => row.CityName).Contains(row.t1.CityName) && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
    "db_name": "restaurants",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
    "result": "context.Channels.Where(row => row.Owner != \"CCTV\").Select(row => new { row.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
    "result": "context.Channels.OrderByDescending(row => row.RatingInPercent).Select(row => new { row.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1",
    "result": "context.Channels.OrderByDescending(row => row.RatingInPercent).Select(row => new { row.Owner }).Take(1).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) FROM program",
    "result": "context.Programs.Count();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM program ORDER BY launch",
    "result": "context.Programs.OrderBy(row => row.Launch).Select(row => new { row.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name , origin , OWNER FROM program",
    "result": "context.Programs.Select(row => new { row.Name, row.Origin, row.Owner }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
    "result": "context.Programs.OrderByDescending(row => row.Launch).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER = 'CCTV'",
    "result": "context.Channels.Where(row => row.Owner == \"CCTV\").Select(row => row.ShareInPercent).Sum();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning'",
    "result": "context.Channels.Join(context.Broadcasts, t1 => t1.ChannelId, t2 => t2.ChannelId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Morning\").Select(row => new { row.t1.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Night'",
    "result": "context.Channels.Join(context.Broadcasts, t1 => t1.ChannelId, t2 => t2.ChannelId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Morning\").Select(row => row.t1.Name).Intersect(context.Channels.Join(context.Broadcasts, t1 => t1.ChannelId, t2 => t2.ChannelId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Night\").Select(row => row.t1.Name)).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(*) , time_of_day FROM broadcast GROUP BY time_of_day",
    "result": "context.Broadcasts.GroupBy(row => new { row.TimeOfDay }).Select(group => new { Count = group.Count(), group.Key.TimeOfDay }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day = 'Night'",
    "result": "context.Broadcasts.Where(row => row.TimeOfDay == \"Night\").Select(row => row.ProgramId).Distinct().Count();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Morning\"",
    "result": "context.Programs.Select(row => row.Name).Except(context.Programs.Join(context.Broadcasts, t1 => t1.ProgramId, t2 => t2.ProgramId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Morning\").Select(row => row.t1.Name)).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Night\"",
    "result": "context.Programs.Join(context.Broadcasts, t1 => t1.ProgramId, t2 => t2.ProgramId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Morning\").Select(row => row.t1.Owner).Intersect(context.Programs.Join(context.Broadcasts, t1 => t1.ProgramId, t2 => t2.ProgramId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.TimeOfDay == \"Night\").Select(row => row.t1.Owner)).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT origin FROM program ORDER BY origin",
    "result": "context.Programs.OrderBy(row => row.Origin).Select(row => new { row.Origin }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT count(DISTINCT OWNER) FROM channel",
    "result": "context.Channels.Select(row => row.Owner).Distinct().Count();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM program WHERE origin != 'Beijing'",
    "result": "context.Programs.Where(row => row.Origin != \"Beijing\").Select(row => new { row.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'",
    "result": "context.Channels.Where(row => row.Owner == \"CCTV\" || row.Owner == \"HBS\").Select(row => new { row.Name }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT sum(Rating_in_percent) , OWNER FROM channel GROUP BY OWNER",
    "result": "context.Channels.GroupBy(row => new { row.Owner }).Select(group => new { SumRatingInPercent = group.Select(row => row.RatingInPercent).Sum(), group.Key.Owner }).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Programs.Join(context.Broadcasts, t1 => t1.ProgramId, t2 => t2.ProgramId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ProgramId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.Name }).Take(1).ToList();",
    "db_name": "program_share",
    "status": "Passed",
    "error": null
  },
  {
    "query": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Trains.Join(context.Route, t1 => t1.Id, t2 => t2.TrainId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.TrainId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.Name }).Take(1).ToList();",
    "db_name": "station_weather",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,40): error CS1061: 'StationWeatherContext' does not contain a definition for 'Route' and no accessible extension method 'Route' accepting a first argument of type 'StationWeatherContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.23"
  },
  {
    "query": "SELECT count(*) , t1.network_name , t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id",
    "result": "context.Stations.Join(context.Route, t1 => t1.Id, t2 => t2.StationId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.StationId }).Select(group => new { Count = group.Count(), group.First().t1.NetworkName, group.First().t1.Services }).ToList();",
    "db_name": "station_weather",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS1061: 'StationWeatherContext' does not contain a definition for 'Route' and no accessible extension method 'Route' accepting a first argument of type 'StationWeatherContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.24"
  },
  {
    "query": "SELECT t3.name , t3.time FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\"",
    "result": "context.Stations.Join(context.Route, t1 => t1.Id, t2 => t2.StationId, (t1, t2) => new { t1, t2 }).Join(context.Trains, joined => joined.t2.TrainId, t3 => t3.Id, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.LocalAuthority == \"Chiltern\").Select(row => new { row.t3.Name, row.t3.Time }).ToList();",
    "db_name": "station_weather",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS1061: 'StationWeatherContext' does not contain a definition for 'Route' and no accessible extension method 'Route' accepting a first argument of type 'StationWeatherContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.28"
  },
  {
    "query": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code",
    "result": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).ToList();",
    "db_name": "manufactory_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }"
  },
  {
    "query": "SELECT T1.Name , max(T1.Price) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name",
    "result": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { group.Key.Name, MaxPrice = group.Select(row => row.T1.Price).Max(), group.Key.Name }).ToList();",
    "db_name": "manufactory_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,249): error CS0833: An anonymous type cannot have multiple properties with the same name [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.18"
  },
  {
    "query": "SELECT code , name , min(price) FROM products GROUP BY name",
    "result": "context.Products.GroupBy(row => new { row.Name }).Select(group => new { group.First().Code, group.Key.Name, MinPrice = group.Select(row => row.Price).Min() }).ToList();",
    "db_name": "manufactory_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: 7, 1: CD drive, 2: 90}, {0: 10, 1: DVD burner, 2: 180}, {0: 11, 1: DVD drive, 2: 150}, {0: 4, 1: Floppy disk, 2: 5}, {0: 1, 1: Hard drive, 2: 240}, {0: 2, 1: Memory, 2: 120}, {0: 5, 1: Monitor, 2: 240}, {0: 8, 1: Printer, 2: 270}, {0: 9, 1: Toner cartridge, 2: 66}, {0: 3, 1: ZIP drive, 2: 150}]\", linq_results: \"[{0: 7, 1: CD drive, 2: 90}, {0: 10, 1: DVD burner, 2: 180}, {0: 6, 1: DVD drive, 2: 150}, {0: 4, 1: Floppy disk, 2: 5}, {0: 1, 1: Hard drive, 2: 240}, {0: 2, 1: Memory, 2: 120}, {0: 5, 1: Monitor, 2: 240}, {0: 8, 1: Printer, 2: 270}, {0: 9, 1: Toner cartridge, 2: 66}, {0: 3, 1: ZIP drive, 2: 150}]\" }"
  },
  {
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'shopping'",
    "result": "context.TouristAttractions.Join(context.TouristAttractionFeature, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Join(context.Features, joined => joined.T2.FeatureId, T3 => T3.FeatureId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.FeatureDetails == \"park\").Select(row => row.T1.Name).Union(context.TouristAttractions.Join(context.TouristAttractionFeature, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Join(context.Features, joined => joined.T2.FeatureId, T3 => T3.FeatureId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.FeatureDetails == \"shopping\").Select(row => row.T1.Name)).ToList();",
    "db_name": "cre_Theme_park",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,409): error CS1061: 'CreThemeParkContext' does not contain a definition for 'TouristAttractionFeature' and no accessible extension method 'TouristAttractionFeature' accepting a first argument of type 'CreThemeParkContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.51"
  },
  {
    "query": "SELECT date FROM weather WHERE max_temperature_f > 85",
    "result": "context.Weathers.Where(row => row.MaxTemperatureF > \"85\").Select(row => new { row.Date }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.35"
  },
  {
    "query": "SELECT zip_code , avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
    "result": "context.Weathers.Where(row => EF.Functions.Like(row.Date, \"8/%\")).GroupBy(row => new { row.ZipCode }).Select(group => new { group.Key.ZipCode, AverageMeanTemperatureF = group.Select(row => row.MeanTemperatureF).Average() }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,181): error CS1929: 'IEnumerable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.30"
  },
  {
    "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8",
    "result": "context.Weathers.Where(row => row.MeanHumidity > \"50\" && row.MeanVisibilityMiles > \"8\").Count();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,69): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.31"
  },
  {
    "query": "SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10",
    "result": "context.Stations.Where(row => row.City == \"San Francisco\").Select(row => row.Id).Intersect(context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Average(row => row.BikesAvailable) > 10).Select(group => group.Key.StationId)).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,12): error CS1929: 'IQueryable<int>' does not contain a definition for 'Intersect' and the best extension method overload 'ParallelEnumerable.Intersect<int?>(ParallelQuery<int?>, IEnumerable<int?>)' requires a receiver of type 'System.Linq.ParallelQuery<int?>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.22"
  },
  {
    "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
    "result": "context.Weathers.GroupBy(row => new { row.ZipCode }).OrderBy(group => group.Average(row => row.MeanSeaLevelPressureInches)).Select(group => new { group.Key.ZipCode }).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,103): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.28"
  },
  {
    "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city = \"Palo Alto\")",
    "result": "context.Statuses.Where(row => !context.Stations.Where(row => row.City == \"Palo Alto\").Select(row => row.Id).Contains(row.StationId)).Select(row => row.BikesAvailable).Average();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,43): error CS1929: 'IQueryable<int>' does not contain a definition for 'Contains' and the best extension method overload 'MemoryExtensions.Contains<int?>(ReadOnlySpan<int?>, int?)' requires a receiver of type 'System.ReadOnlySpan<int?>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.51"
  },
  {
    "query": "SELECT date , zip_code FROM weather WHERE max_temperature_f >= 80",
    "result": "context.Weathers.Where(row => row.MaxTemperatureF >= \"80\").Select(row => new { row.Date, row.ZipCode }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '>=' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.24"
  },
  {
    "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f) > 60",
    "result": "context.Trips.Join(context.Weathers, T1 => T1.ZipCode, T2 => T2.ZipCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ZipCode }).Where(group => group.Average(row => row.T2.MeanTemperatureF) > 60).Select(group => new { group.First().T1.Id }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,26): error CS0411: The type arguments for method 'Enumerable.Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)' cannot be inferred from the usage. Try specifying the type arguments explicitly. [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.36"
  },
  {
    "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code",
    "result": "context.Weathers.Where(row => row.MaxWindSpeedMph >= \"25\").GroupBy(row => new { row.ZipCode }).Select(group => new { group.Key.ZipCode, Count = group.Count() }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '>=' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.48"
  },
  {
    "query": "SELECT date , zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)",
    "result": "context.Weathers.Where(row => row.MinDewPointF < context.Weathers.Where(row => row.ZipCode == 94107).Select(row => row.MinDewPointF).Min()).Select(row => new { row.Date, row.ZipCode }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,42): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46"
  },
  {
    "query": "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available) < 7",
    "result": "context.Stations.Where(row => row.Lat > 37.4).Select(row => row.Id).Except(context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Min(row => row.BikesAvailable) < 7).Select(group => group.Key.StationId)).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,12): error CS1929: 'IQueryable<int>' does not contain a definition for 'Except' and the best extension method overload 'ParallelEnumerable.Except<int?>(ParallelQuery<int?>, IEnumerable<int?>)' requires a receiver of type 'System.Linq.ParallelQuery<int?>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.39"
  },
  {
    "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles) < 10",
    "result": "context.Weathers.GroupBy(row => new { row.ZipCode }).Where(group => group.Average(row => row.MeanVisibilityMiles) < 10).Select(group => new { group.Key.ZipCode }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,101): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.34"
  },
  {
    "query": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70",
    "result": "context.Weathers.Select(row => row.ZipCode).Distinct().Except(context.Weathers.Where(row => row.MaxDewPointF >= \"70\").Select(row => row.ZipCode).Distinct()).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,104): error CS0019: Operator '>=' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.44"
  },
  {
    "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
    "result": "context.Weathers.Where(row => row.MeanSeaLevelPressureInches >= 30.3 && row.MeanSeaLevelPressureInches <= 31).Select(row => new { row.Date }).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,84): error CS0019: Operator '<=' cannot be applied to operands of type 'string' and 'int' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.60"
  },
  {
    "query": "SELECT date , max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
    "result": "context.Weathers.Select(row => new { row.Date, Diff = row.MaxTemperatureF - row.MinTemperatureF }).OrderBy(row => row.Diff).Take(1).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,66): error CS0019: Operator '-' cannot be applied to operands of type 'string' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46"
  },
  {
    "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*) >= 100",
    "result": "context.Weathers.GroupBy(row => new { row.ZipCode }).Where(group => group.Average(row => row.MeanHumidity) < 70).Select(group => group.Key.ZipCode).Intersect(context.Trips.GroupBy(row => new { row.ZipCode }).Where(group => group.Count() >= 100).Select(group => group.Key.ZipCode)).ToList();",
    "db_name": "bike_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,101): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.41"
  },
  {
    "query": "SELECT count(*) , account_id FROM Financial_transactions",
    "result": "context.FinancialTransactions.Select(row => new { Count = row.Count(), row.AccountId }).ToList();",
    "db_name": "customers_and_invoices",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,74): error CS1061: 'FinancialTransaction' does not contain a definition for 'Count' and no accessible extension method 'Count' accepting a first argument of type 'FinancialTransaction' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46"
  }
]