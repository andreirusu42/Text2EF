[{"query":"SELECT count(*) FROM browser WHERE market_share >= 5","result":"context.Browsers.Where(row => row.MarketShare >= 5).Count();","db_name":"browser_web"},{"query":"SELECT name FROM browser ORDER BY market_share DESC","result":"context.Browsers.OrderByDescending(row => row.MarketShare).Select(row => new { row.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT id , name , market_share FROM browser","result":"context.Browsers.Select(row => new { row.Id, row.Name, row.MarketShare }).ToList();","db_name":"browser_web"},{"query":"SELECT max(market_share) , min(market_share) , avg(market_share) FROM browser","result":"context.Browsers.GroupBy(row => 1).Select(group => new { MaxMarketShare = group.Select(row => row.MarketShare).Max(), MinMarketShare = group.Select(row => row.MarketShare).Min(), AverageMarketShare = group.Select(row => row.MarketShare).Average() }).ToList();","db_name":"browser_web"},{"query":"SELECT id , market_share FROM browser WHERE name = 'Safari'","result":"context.Browsers.Where(row => row.Name == \"Safari\").Select(row => new { row.Id, row.MarketShare }).ToList();","db_name":"browser_web"},{"query":"SELECT name , operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'","result":"context.WebClientAccelerators.Where(row => row.Connection != \"Broadband\").Select(row => new { row.Name, row.OperatingSystem }).ToList();","db_name":"browser_web"},{"query":"SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998","result":"context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T2.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"CProxy\" && row.T2.CompatibleSinceYear > 1998).Select(row => new { row.T1.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count(*) >= 2","result":"context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT T1.id , T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1","result":"context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name }).Take(1).ToList();","db_name":"browser_web"},{"query":"SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'","result":"context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"CACHEbox\" && row.T2.Name == \"Internet Explorer\").Select(row => new { row.T1.CompatibleSinceYear }).ToList();","db_name":"browser_web"},{"query":"SELECT count(DISTINCT client) FROM web_client_accelerator","result":"context.WebClientAccelerators.Select(row => row.Client).Distinct().Count();","db_name":"browser_web"},{"query":"SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );","result":"context.WebClientAccelerators.Where(row => !context.AcceleratorCompatibleBrowsers.Select(row => row.AcceleratorId).Contains(row.Id)).Count();","db_name":"browser_web"}]