[{"query":"SELECT count(*) FROM browser WHERE market_share >= 5","result":"context.Browsers.Where(row => row.MarketShare >= 5).Count();","db_name":"browser_web"},{"query":"SELECT name FROM browser ORDER BY market_share DESC","result":"context.Browsers.OrderByDescending(row => row.MarketShare).Select(row => new { row.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT id , name , market_share FROM browser","result":"context.Browsers.Select(row => new { row.Id, row.Name, row.MarketShare }).ToList();","db_name":"browser_web"},{"query":"SELECT max(market_share) , min(market_share) , avg(market_share) FROM browser","result":"context.Browsers.GroupBy(row => 1).Select(group => new { MaxMarketShare = group.Select(row => row.MarketShare).Max(), MinMarketShare = group.Select(row => row.MarketShare).Min(), AverageMarketShare = group.Select(row => row.MarketShare).Average() }).ToList();","db_name":"browser_web"},{"query":"SELECT id , market_share FROM browser WHERE name = 'Safari'","result":"context.Browsers.Where(row => row.Name == \"Safari\").Select(row => new { row.Id, row.MarketShare }).ToList();","db_name":"browser_web"},{"query":"SELECT name , operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'","result":"context.WebClientAccelerators.Where(row => row.Connection != \"Broadband\").Select(row => new { row.Name, row.OperatingSystem }).ToList();","db_name":"browser_web"},{"query":"SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998","result":"context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T2.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"CProxy\" && row.T2.CompatibleSinceYear > 1998).Select(row => new { row.T1.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count(*) >= 2","result":"context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT T1.id , T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1","result":"context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name }).Take(1).ToList();","db_name":"browser_web"},{"query":"SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'","result":"context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"CACHEbox\" && row.T2.Name == \"Internet Explorer\").Select(row => new { row.T1.CompatibleSinceYear }).ToList();","db_name":"browser_web"},{"query":"SELECT count(DISTINCT client) FROM web_client_accelerator","result":"context.WebClientAccelerators.Select(row => row.Client).Distinct().Count();","db_name":"browser_web"},{"query":"SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );","result":"context.WebClientAccelerators.Where(row => !context.AcceleratorCompatibleBrowsers.Select(row => row.AcceleratorId).Contains(row.Id)).Count();","db_name":"browser_web"},{"query":"SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15;","result":"context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.MarketShare > 15).Select(row => new { row.T1.Name }).Distinct().ToList();","db_name":"browser_web"},{"query":"SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'","result":"context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"CACHEbox\").Select(row => row.T3.Name).Intersect(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Fasterfox\").Select(row => row.T3.Name)).ToList();","db_name":"browser_web"},{"query":"SELECT name , operating_system FROM web_client_accelerator EXCEPT SELECT T1.name , T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'","result":"context.WebClientAccelerators.Select(row => new { row.Name, row.OperatingSystem }).Except(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Opera\").Select(row => new { row.T1.Name, row.T1.OperatingSystem })).ToList();","db_name":"browser_web"},{"query":"SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"","result":"context.WebClientAccelerators.Where(row => EF.Functions.Like(row.Name, \"%Opera%\")).Select(row => new { row.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system","result":"context.WebClientAccelerators.GroupBy(row => new { row.OperatingSystem }).Select(group => new { group.Key.OperatingSystem, Count = group.Count() }).ToList();","db_name":"browser_web"},{"query":"SELECT T2.name , T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id ORDER BY T1.compatible_since_year DESC","result":"context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T1.CompatibleSinceYear).Select(row => new { T2Name = row.T2.Name, T3Name = row.T3.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT count(*) FROM actor","result":"context.Actors.Count();","db_name":"musical"},{"query":"SELECT Name FROM actor ORDER BY Name ASC","result":"context.Actors.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();","db_name":"musical"},{"query":"SELECT Character , Duration FROM actor","result":"context.Actors.Select(row => new { row.Character, row.Duration }).ToList();","db_name":"musical"},{"query":"SELECT Name FROM actor WHERE Age != 20","result":"context.Actors.Where(row => row.Age != 20).Select(row => new { row.Name }).ToList();","db_name":"musical"},{"query":"SELECT Character FROM actor ORDER BY age DESC","result":"context.Actors.OrderByDescending(row => row.Age).Select(row => new { row.Character }).ToList();","db_name":"musical"},{"query":"SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1","result":"context.Actors.OrderByDescending(row => row.Age).Select(row => new { row.Duration }).Take(1).ToList();","db_name":"musical"},{"query":"SELECT Name FROM musical WHERE Nominee = \"Bob Fosse\"","result":"context.Musicals.Where(row => row.Nominee == \"Bob Fosse\").Select(row => new { row.Name }).ToList();","db_name":"musical"},{"query":"SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"","result":"context.Musicals.Where(row => row.Award != \"Tony Award\").Select(row => new { row.Nominee }).Distinct().ToList();","db_name":"musical"},{"query":"SELECT T1.Name , T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID","result":"context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).Select(row => new { T1Name = row.T1.Name, T2Name = row.T2.Name }).ToList();","db_name":"musical"},{"query":"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = \"The Phantom of the Opera\"","result":"context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"The Phantom of the Opera\").Select(row => new { row.T1.Name }).ToList();","db_name":"musical"},{"query":"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC","result":"context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Year).Select(row => new { row.T1.Name }).ToList();","db_name":"musical"},{"query":"SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID","result":"context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MusicalId }).Select(group => new { group.First().T2.Name, Count = group.Count() }).ToList();","db_name":"musical"},{"query":"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3","result":"context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MusicalId }).Where(group => group.Count() >= 3).Select(group => new { group.First().T2.Name }).ToList();","db_name":"musical"},{"query":"SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee","result":"context.Musicals.GroupBy(row => new { row.Nominee }).Select(group => new { group.Key.Nominee, Count = group.Count() }).ToList();","db_name":"musical"},{"query":"SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1","result":"context.Musicals.GroupBy(row => new { row.Nominee }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Nominee }).Take(1).ToList();","db_name":"musical"},{"query":"SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1","result":"context.Musicals.GroupBy(row => new { row.Result }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Result }).Take(1).ToList();","db_name":"musical"},{"query":"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2","result":"context.Musicals.GroupBy(row => new { row.Nominee }).Where(group => group.Count() > 2).Select(group => new { group.Key.Nominee }).ToList();","db_name":"musical"},{"query":"SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)","result":"context.Musicals.Where(row => !context.Actors.Select(row => row.MusicalId).Contains(row.MusicalId)).Select(row => new { row.Name }).ToList();","db_name":"musical"},{"query":"SELECT Nominee FROM musical WHERE Award = \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award = \"Drama Desk Award\"","result":"context.Musicals.Where(row => row.Award == \"Tony Award\").Select(row => row.Nominee).Intersect(context.Musicals.Where(row => row.Award == \"Drama Desk Award\").Select(row => row.Nominee)).ToList();","db_name":"musical"},{"query":"SELECT Nominee FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\"","result":"context.Musicals.Where(row => row.Award == \"Tony Award\" || row.Award == \"Cleavant Derricks\").Select(row => new { row.Nominee }).ToList();","db_name":"musical"},{"query":"SELECT count(*) FROM farm","result":"context.Farms.Count();","db_name":"farm"},{"query":"SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC","result":"context.Farms.OrderBy(row => row.TotalHorses).Select(row => new { row.TotalHorses }).ToList();","db_name":"farm"},{"query":"SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens'","result":"context.FarmCompetitions.Where(row => row.Theme != \"Aliens\").Select(row => new { row.Hosts }).ToList();","db_name":"farm"},{"query":"SELECT Theme FROM farm_competition ORDER BY YEAR ASC","result":"context.FarmCompetitions.OrderBy(row => row.Year).Select(row => new { row.Theme }).ToList();","db_name":"farm"},{"query":"SELECT avg(Working_Horses) FROM farm WHERE Total_Horses > 5000","result":"context.Farms.Where(row => row.TotalHorses > 5000).Select(row => (double) row.WorkingHorses).Average();","db_name":"farm"},{"query":"SELECT max(Cows) , min(Cows) FROM farm","result":"context.Farms.GroupBy(row => 1).Select(group => new { MaxCows = group.Select(row => row.Cows).Max(), MinCows = group.Select(row => row.Cows).Min() }).ToList();","db_name":"farm"},{"query":"SELECT count(DISTINCT Status) FROM city","result":"context.Cities.Select(row => row.Status).Distinct().Count();","db_name":"farm"},{"query":"SELECT Official_Name FROM city ORDER BY Population DESC","result":"context.Cities.OrderByDescending(row => row.Population).Select(row => new { row.OfficialName }).ToList();","db_name":"farm"},{"query":"SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1","result":"context.Cities.OrderByDescending(row => row.Population).Select(row => new { row.OfficialName, row.Status }).Take(1).ToList();","db_name":"farm"},{"query":"SELECT T2.Year , T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID","result":"context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Year, row.T1.OfficialName }).ToList();","db_name":"farm"},{"query":"SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1","result":"context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.HostCityId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.OfficialName }).ToList();","db_name":"farm"},{"query":"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1","result":"context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.HostCityId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Status }).Take(1).ToList();","db_name":"farm"},{"query":"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000","result":"context.Cities.Join(context.FarmCompetitions, T1 => T1.CityId, T2 => T2.HostCityId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Population > 1000).Select(row => new { row.T2.Theme }).ToList();","db_name":"farm"},{"query":"SELECT Status , avg(Population) FROM city GROUP BY Status","result":"context.Cities.GroupBy(row => new { row.Status }).Select(group => new { group.Key.Status, AveragePopulation = group.Select(row => row.Population).Average() }).ToList();","db_name":"farm"},{"query":"SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC","result":"context.Cities.GroupBy(row => new { row.Status }).OrderBy(group => group.Count()).Select(group => new { group.Key.Status }).ToList();","db_name":"farm"},{"query":"SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1","result":"context.Cities.GroupBy(row => new { row.Status }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Status }).Take(1).ToList();","db_name":"farm"},{"query":"SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)","result":"context.Cities.Where(row => !context.FarmCompetitions.Select(row => row.HostCityId).Contains(row.CityId)).Select(row => new { row.OfficialName }).ToList();","db_name":"farm"},{"query":"SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500","result":"context.Cities.Where(row => row.Population > 1500).Select(row => row.Status).Intersect(context.Cities.Where(row => row.Population < 500).Select(row => row.Status)).ToList();","db_name":"farm"},{"query":"SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500","result":"context.Cities.Where(row => row.Population > 1500 || row.Population < 500).Select(row => new { row.OfficialName }).ToList();","db_name":"farm"},{"query":"SELECT Census_Ranking FROM city WHERE Status != \"Village\"","result":"context.Cities.Where(row => row.Status != \"Village\").Select(row => new { row.CensusRanking }).ToList();","db_name":"farm"},{"query":"SELECT count(*) FROM game WHERE season > 2007","result":"context.Games.Where(row => row.Season > 2007).Count();","db_name":"game_injury"},{"query":"SELECT Date FROM game ORDER BY home_team DESC","result":"context.Games.OrderByDescending(row => row.HomeTeam).Select(row => new { row.Date }).ToList();","db_name":"game_injury"},{"query":"SELECT season , home_team , away_team FROM game","result":"context.Games.Select(row => new { row.Season, row.HomeTeam, row.AwayTeam }).ToList();","db_name":"game_injury"},{"query":"SELECT max(home_games) , min(home_games) , avg(home_games) FROM stadium","result":"context.Stadia.GroupBy(row => 1).Select(group => new { MaxHomeGames = group.Select(row => row.HomeGames).Max(), MinHomeGames = group.Select(row => row.HomeGames).Min(), AverageHomeGames = group.Select(row => row.HomeGames).Average() }).ToList();","db_name":"game_injury"},{"query":"SELECT average_attendance FROM stadium WHERE capacity_percentage > 100","result":"context.Stadia.Where(row => row.CapacityPercentage > 100).Select(row => new { row.AverageAttendance }).ToList();","db_name":"game_injury"},{"query":"SELECT player , number_of_matches , SOURCE FROM injury_accident WHERE injury != 'Knee problem'","result":"context.InjuryAccidents.Where(row => row.Injury != \"Knee problem\").Select(row => new { row.Player, row.NumberOfMatches, row.Source }).ToList();","db_name":"game_injury"},{"query":"SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'","result":"context.Games.Join(context.InjuryAccidents, T1 => T1.Id, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Player == \"Walter Samuel\").Select(row => new { row.T1.Season }).ToList();","db_name":"game_injury"},{"query":"SELECT T1.id , T1.score , T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING count(*) >= 2","result":"context.Games.Join(context.InjuryAccidents, T1 => T1.Id, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Score, group.First().T1.Date }).ToList();","db_name":"game_injury"},{"query":"SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1","result":"context.Stadia.Join(context.Games, T1 => T1.Id, T2 => T2.StadiumId, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T2.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name }).Take(1).ToList();","db_name":"game_injury"},{"query":"SELECT T1.season , T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'","result":"context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Injury == \"Foot injury\" || row.T3.Injury == \"Knee problem\").Select(row => new { row.T1.Season, row.T2.Name }).ToList();","db_name":"game_injury"},{"query":"SELECT count(DISTINCT SOURCE) FROM injury_accident","result":"context.InjuryAccidents.Select(row => row.Source).Distinct().Count();","db_name":"game_injury"},{"query":"SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )","result":"context.Games.Where(row => !context.InjuryAccidents.Select(row => row.GameId).Contains(row.Id)).Count();","db_name":"game_injury"},{"query":"SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010","result":"context.InjuryAccidents.Join(context.Games, T1 => T1.GameId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Season > 2010).Select(row => row.T1.Injury).Distinct().Count();","db_name":"game_injury"},{"query":"SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'","result":"context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Player == \"Walter Samuel\").Select(row => row.T2.Name).Intersect(context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Player == \"Thiago Motta\").Select(row => row.T2.Name)).ToList();","db_name":"game_injury"},{"query":"SELECT name , average_attendance , total_attendance FROM stadium EXCEPT SELECT T2.name , T2.average_attendance , T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id","result":"context.Stadia.Select(row => new { row.Name, row.AverageAttendance, row.TotalAttendance }).Except(context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.Name, row.T2.AverageAttendance, row.T2.TotalAttendance })).ToList();","db_name":"game_injury"},{"query":"SELECT name FROM stadium WHERE name LIKE \"%Bank%\"","result":"context.Stadia.Where(row => EF.Functions.Like(row.Name, \"%Bank%\")).Select(row => new { row.Name }).ToList();","db_name":"game_injury"},{"query":"SELECT T1.id , count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id","result":"context.Stadia.Join(context.Games, T1 => T1.Id, T2 => T2.StadiumId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Select(group => new { group.Key.Id, Count = group.Count() }).ToList();","db_name":"game_injury"},{"query":"SELECT T1.date , T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.season DESC","result":"context.Games.Join(context.InjuryAccidents, T1 => T1.Id, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Season).Select(row => new { row.T1.Date, row.T2.Player }).ToList();","db_name":"game_injury"},{"query":"SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;","result":"context.Departments.GroupBy(row => new { row.DepartmentId }).OrderByDescending(group => group.Count(row => row.DepartmentId != null)).Select(group => new { group.First().Name }).Take(1).ToList();","db_name":"hospital_1"},{"query":"SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;","result":"context.Departments.GroupBy(row => new { row.DepartmentId }).OrderBy(group => group.Count(row => row.DepartmentId != null)).Select(group => new { group.First().Head }).Take(1).ToList();","db_name":"hospital_1"},{"query":"SELECT T2.name , T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;","result":"context.Departments.Join(context.Physicians, T1 => T1.Head, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DepartmentId }).OrderBy(group => group.Count(row => row.T1.DepartmentId != null)).Select(group => new { group.First().T2.Name, group.First().T2.Position }).Take(1).ToList();","db_name":"hospital_1"},{"query":"SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn","result":"context.Appointments.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).ToList();","db_name":"hospital_1"},{"query":"SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count(*) > 1","result":"context.Appointments.Join(context.Patients, T1 => T1.Patient, T2 => T2.Ssn, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Patient }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.Name, group.First().T2.Phone }).ToList();","db_name":"hospital_1"}]