[{"query":"SELECT count(*) FROM browser WHERE market_share >= 5","result":"context.Browsers.Where(row => row.MarketShare >= 5).Count();","db_name":"browser_web"},{"query":"SELECT name FROM browser ORDER BY market_share DESC","result":"context.Browsers.OrderByDescending(row => row.MarketShare).Select(row => new { row.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT id , name , market_share FROM browser","result":"context.Browsers.Select(row => new { row.Id, row.Name, row.MarketShare }).ToList();","db_name":"browser_web"},{"query":"SELECT max(market_share) , min(market_share) , avg(market_share) FROM browser","result":"context.Browsers.GroupBy(row => 1).Select(group => new { MaxMarketShare = group.Select(row => row.MarketShare).Max(), MinMarketShare = group.Select(row => row.MarketShare).Min(), AverageMarketShare = group.Select(row => row.MarketShare).Average() }).ToList();","db_name":"browser_web"},{"query":"SELECT id , market_share FROM browser WHERE name = 'Safari'","result":"context.Browsers.Where(row => row.Name == \"Safari\").Select(row => new { row.Id, row.MarketShare }).ToList();","db_name":"browser_web"},{"query":"SELECT name , operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'","result":"context.WebClientAccelerators.Where(row => row.Connection != \"Broadband\").Select(row => new { row.Name, row.OperatingSystem }).ToList();","db_name":"browser_web"},{"query":"SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998","result":"context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T2.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"CProxy\" && row.T2.CompatibleSinceYear > 1998).Select(row => new { row.T1.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count(*) >= 2","result":"context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT T1.id , T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1","result":"context.Browsers.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.BrowserId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().T1.Name }).Take(1).ToList();","db_name":"browser_web"},{"query":"SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'","result":"context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"CACHEbox\" && row.T2.Name == \"Internet Explorer\").Select(row => new { row.T1.CompatibleSinceYear }).ToList();","db_name":"browser_web"},{"query":"SELECT count(DISTINCT client) FROM web_client_accelerator","result":"context.WebClientAccelerators.Select(row => row.Client).Distinct().Count();","db_name":"browser_web"},{"query":"SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );","result":"context.WebClientAccelerators.Where(row => !context.AcceleratorCompatibleBrowsers.Select(row => row.AcceleratorId).Contains(row.Id)).Count();","db_name":"browser_web"},{"query":"SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15;","result":"context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.MarketShare > 15).Select(row => new { row.T1.Name }).Distinct().ToList();","db_name":"browser_web"},{"query":"SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'","result":"context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"CACHEbox\").Select(row => row.T3.Name).Intersect(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Fasterfox\").Select(row => row.T3.Name)).ToList();","db_name":"browser_web"},{"query":"SELECT name , operating_system FROM web_client_accelerator EXCEPT SELECT T1.name , T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'","result":"context.WebClientAccelerators.Select(row => new { row.Name, row.OperatingSystem }).Except(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Opera\").Select(row => new { row.T1.Name, row.T1.OperatingSystem })).ToList();","db_name":"browser_web"},{"query":"SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"","result":"context.WebClientAccelerators.Where(row => EF.Functions.Like(row.Name, \"%Opera%\")).Select(row => new { row.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system","result":"context.WebClientAccelerators.GroupBy(row => new { row.OperatingSystem }).Select(group => new { group.Key.OperatingSystem, Count = group.Count() }).ToList();","db_name":"browser_web"},{"query":"SELECT T2.name , T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id ORDER BY T1.compatible_since_year DESC","result":"context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T1.CompatibleSinceYear).Select(row => new { T2Name = row.T2.Name, T3Name = row.T3.Name }).ToList();","db_name":"browser_web"},{"query":"SELECT count(*) FROM HOTELS","result":"context.Hotels.Count();","db_name":"cre_Theme_park"},{"query":"SELECT price_range FROM HOTELS","result":"context.Hotels.Select(row => new { row.PriceRange }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT DISTINCT Location_Name FROM LOCATIONS","result":"context.Locations.Select(row => new { row.LocationName }).Distinct().ToList();","db_name":"cre_Theme_park"},{"query":"SELECT Name , Other_Details FROM Staff","result":"context.Staff.Select(row => new { row.Name, row.OtherDetails }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT Tourist_Details FROM VISITORS","result":"context.Visitors.Select(row => new { row.TouristDetails }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT price_range FROM HOTELS WHERE star_rating_code = \"5\"","result":"context.Hotels.Where(row => row.StarRatingCode == \"5\").Select(row => new { row.PriceRange }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT avg(price_range) FROM HOTELS WHERE star_rating_code = \"5\" AND pets_allowed_yn = 1","result":"context.Hotels.Where(row => row.StarRatingCode == \"5\" && row.PetsAllowedYn == true).Select(row => (double) row.PriceRange).Average();","db_name":"cre_Theme_park"},{"query":"SELECT Address FROM LOCATIONS WHERE Location_Name = \"UK Gallery\"","result":"context.Locations.Where(row => row.LocationName == \"UK Gallery\").Select(row => new { row.Address }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT Other_Details FROM LOCATIONS WHERE Location_Name = \"UK Gallery\"","result":"context.Locations.Where(row => row.LocationName == \"UK Gallery\").Select(row => new { row.OtherDetails }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"","result":"context.Locations.Where(row => EF.Functions.Like(row.LocationName, \"%film%\")).Select(row => new { row.LocationName }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT count(DISTINCT Name) FROM PHOTOS","result":"context.Photos.Select(row => row.Name).Distinct().Count();","db_name":"cre_Theme_park"},{"query":"SELECT DISTINCT Visit_Date FROM VISITS","result":"context.Visits.Select(row => new { row.VisitDate }).Distinct().ToList();","db_name":"cre_Theme_park"},{"query":"SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\"","result":"context.TouristAttractions.Where(row => row.HowToGetThere == \"bus\").Select(row => new { row.Name }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT Name , Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\" OR How_to_Get_There = \"walk\"","result":"context.TouristAttractions.Where(row => row.HowToGetThere == \"bus\" || row.HowToGetThere == \"walk\").Select(row => new { row.Name, row.OpeningHours }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.price_range > 10000","result":"context.Hotels.Join(context.RefHotelStarRatings, T1 => T1.StarRatingCode, T2 => T2.StarRatingCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PriceRange > 10000).Select(row => new { row.T2.StarRatingDescription }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID","result":"context.Museums.Join(context.TouristAttractions, T1 => T1.MuseumId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.MuseumDetails, row.T2.OpeningHours }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = \"game1\"","result":"context.Photos.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"game1\").Select(row => new { row.T2.Name }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T1.Name , T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"film festival\"","result":"context.Photos.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"film festival\").Select(row => new { row.T1.Name, row.T1.Description }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T1.Royal_Family_Details , T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID","result":"context.RoyalFamilies.Join(context.TouristAttractions, T1 => T1.RoyalFamilyId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.RoyalFamilyDetails, row.T2.HowToGetThere }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\"","result":"context.Shops.Join(context.TouristAttractions, T1 => T1.ShopId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.HowToGetThere == \"walk\").Select(row => new { row.T1.ShopDetails }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"US museum\"","result":"context.Staff.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"US museum\").Select(row => new { row.T1.Name }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\" OR T2.How_to_Get_There = \"bus\"","result":"context.StreetMarkets.Join(context.TouristAttractions, T1 => T1.MarketId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.HowToGetThere == \"walk\" || row.T2.HowToGetThere == \"bus\").Select(row => new { row.T1.MarketDetails }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T2.Visit_Date , T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE T1.Tourist_Details = \"Vincent\"","result":"context.Visitors.Join(context.Visits, T1 => T1.TouristId, T2 => T2.TouristId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.TouristDetails == \"Vincent\").Select(row => new { row.T2.VisitDate, row.T2.VisitDetails }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = \"Vincent\"","result":"context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Join(context.Visitors, joined => joined.T2.TouristId, T3 => T3.TouristId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.TouristDetails == \"Vincent\").Select(row => new { row.T1.Name }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T1.Name , T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" OR T2.Tourist_Details = \"Vivian\"","result":"context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Vincent\" || row.T2.TouristDetails == \"Vivian\").Select(row => new { row.T1.Name, row.T3.VisitDate }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code","result":"context.Hotels.GroupBy(row => new { row.StarRatingCode }).Select(group => new { group.Key.StarRatingCode, AveragePriceRange = group.Select(row => row.PriceRange).Average() }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT pets_allowed_yn , avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn","result":"context.Hotels.GroupBy(row => new { row.PetsAllowedYn }).Select(group => new { group.Key.PetsAllowedYn, AveragePriceRange = group.Select(row => row.PriceRange).Average() }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT hotel_id , star_rating_code FROM HOTELS ORDER BY price_range ASC","result":"context.Hotels.OrderBy(row => row.PriceRange).Select(row => new { row.HotelId, row.StarRatingCode }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3","result":"context.Hotels.OrderByDescending(row => row.PriceRange).Select(row => new { row.OtherHotelDetails }).Take(3).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT other_hotel_details , star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3","result":"context.Hotels.OrderBy(row => row.PriceRange).Select(row => new { row.OtherHotelDetails, row.StarRatingCode }).Take(3).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1","result":"context.TouristAttractions.GroupBy(row => new { row.HowToGetThere }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.HowToGetThere }).Take(1).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T1.Attraction_Type_Description , T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1","result":"context.RefAttractionTypes.Join(context.TouristAttractions, T1 => T1.AttractionTypeCode, T2 => T2.AttractionTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AttractionTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.AttractionTypeDescription, group.Key.AttractionTypeCode }).Take(1).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There","result":"context.TouristAttractions.GroupBy(row => new { row.HowToGetThere }).Select(group => new { group.Key.HowToGetThere, Count = group.Count() }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T1.Name , T2.Tourist_Attraction_ID , COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID","result":"context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId, Count = group.Count() }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) >= 2","result":"context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) <= 1","result":"context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Where(group => group.Count() <= 1).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"660 Shea Crescent\" OR T2.How_to_Get_There = \"walk\"","result":"context.Locations.Join(context.TouristAttractions, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Address == \"660 Shea Crescent\" || row.T2.HowToGetThere == \"walk\").Select(row => new { row.T2.Name }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"254 Ottilie Junction\" OR T2.How_to_Get_There = \"bus\"","result":"context.Locations.Join(context.TouristAttractions, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Address == \"254 Ottilie Junction\" || row.T2.HowToGetThere == \"bus\").Select(row => new { row.T2.Name }).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Marcelle\"","result":"context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Vincent\").Select(row => row.T1.Name).Intersect(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Marcelle\").Select(row => row.T1.Name)).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Rosalind\"","result":"context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Alison\").Select(row => row.T1.Name).Except(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Rosalind\").Select(row => row.T1.Name)).ToList();","db_name":"cre_Theme_park"},{"query":"SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )","result":"context.Visitors.Where(row => !context.Visits.Select(row => row.TouristId).Contains(row.TouristId)).Count();","db_name":"cre_Theme_park"},{"query":"SELECT date FROM weather WHERE max_temperature_f > 85","result":"context.Weathers.Where(row => row.MaxTemperatureF > 85).Select(row => new { row.Date }).ToList();","db_name":"bike_1"},{"query":"SELECT name FROM station WHERE lat < 37.5","result":"context.Stations.Where(row => row.Lat < 37.5).Select(row => new { row.Name }).ToList();","db_name":"bike_1"},{"query":"SELECT city , max(lat) FROM station GROUP BY city","result":"context.Stations.GroupBy(row => new { row.City }).Select(group => new { group.Key.City, MaxLat = group.Select(row => row.Lat).Max() }).ToList();","db_name":"bike_1"},{"query":"SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3","result":"context.Trips.OrderBy(row => row.Id).Select(row => new { row.StartStationName, row.EndStationName }).Take(3).ToList();","db_name":"bike_1"},{"query":"SELECT avg(lat) , avg(long) FROM station WHERE city = \"San Jose\"","result":"context.Stations.Where(row => row.City == \"San Jose\").GroupBy(row => 1).Select(group => new { AverageLat = group.Select(row => row.Lat).Average(), AverageLong = group.Select(row => row.Long).Average() }).ToList();","db_name":"bike_1"},{"query":"SELECT id FROM trip ORDER BY duration LIMIT 1","result":"context.Trips.OrderBy(row => row.Duration).Select(row => new { row.Id }).Take(1).ToList();","db_name":"bike_1"},{"query":"SELECT sum(duration) , max(duration) FROM trip WHERE bike_id = 636","result":"context.Trips.Where(row => row.BikeId == 636).GroupBy(row => 1).Select(group => new { SumDuration = group.Select(row => row.Duration).Sum(), MaxDuration = group.Select(row => row.Duration).Max() }).ToList();","db_name":"bike_1"},{"query":"SELECT zip_code , avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code","result":"context.Weathers.Where(row => EF.Functions.Like(row.Date, \"8/%\")).GroupBy(row => new { row.ZipCode }).Select(group => new { group.Key.ZipCode, AverageMeanTemperatureF = group.Select(row => row.MeanTemperatureF).Average() }).ToList();","db_name":"bike_1"},{"query":"SELECT count(DISTINCT bike_id) FROM trip","result":"context.Trips.Select(row => row.BikeId).Distinct().Count();","db_name":"bike_1"},{"query":"SELECT count(DISTINCT city) FROM station","result":"context.Stations.Select(row => row.City).Distinct().Count();","db_name":"bike_1"},{"query":"SELECT COUNT(*) FROM station WHERE city = \"Mountain View\"","result":"context.Stations.Where(row => row.City == \"Mountain View\").Count();","db_name":"bike_1"},{"query":"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7","result":"context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BikesAvailable == 7).Select(row => new { row.T1.Name }).Distinct().ToList();","db_name":"bike_1"},{"query":"SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1","result":"context.Trips.Where(row => EF.Functions.Like(row.StartDate, \"8/%\")).GroupBy(row => new { row.StartStationName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StartStationName, group.First().StartStationId }).Take(1).ToList();","db_name":"bike_1"},{"query":"SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1","result":"context.Trips.Where(row => row.ZipCode == 94002).GroupBy(row => new { row.BikeId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BikeId }).Take(1).ToList();","db_name":"bike_1"},{"query":"SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8","result":"context.Weathers.Where(row => row.MeanHumidity > 50 && row.MeanVisibilityMiles > 8).Count();","db_name":"bike_1"},{"query":"SELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1","result":"context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Duration).Select(row => new { row.T1.Lat, row.T1.Long, row.T1.City }).Take(1).ToList();","db_name":"bike_1"},{"query":"SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10","result":"context.Stations.Where(row => row.City == \"San Francisco\").Select(row => row.Id).Intersect(context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Average(row => row.BikesAvailable) > 10).Select(group => group.Key.StationId)).ToList();","db_name":"bike_1"},{"query":"SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available) > 14 UNION SELECT name , id FROM station WHERE installation_date LIKE \"12/%\"","result":"context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StationId }).Where(group => group.Average(row => row.T2.BikesAvailable) > 14).Select(group => new { group.First().T1.Name, group.First().T1.Id }).Union(context.Stations.Where(row => EF.Functions.Like(row.InstallationDate, \"12/%\")).Select(row => new { row.Name, row.Id })).ToList();","db_name":"bike_1"},{"query":"SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3","result":"context.Weathers.Where(row => row.ZipCode == 94107).GroupBy(row => new { row.CloudCover }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CloudCover }).Take(3).ToList();","db_name":"bike_1"},{"query":"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1","result":"context.Weathers.GroupBy(row => new { row.ZipCode }).OrderBy(group => group.Average(row => row.MeanSeaLevelPressureInches)).Select(group => new { group.Key.ZipCode }).Take(1).ToList();","db_name":"bike_1"},{"query":"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city = \"Palo Alto\")","result":"context.Statuses.Where(row => !context.Stations.Where(row => row.City == \"Palo Alto\").Select(row => row.Id).Contains(row.StationId)).Select(row => row.BikesAvailable).Average();","db_name":"bike_1"},{"query":"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available) > 10)","result":"context.Stations.Where(row => !context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Max(row => row.BikesAvailable) > 10).Select(group => group.Key.StationId).Contains(row.Id)).Select(row => (double) row.Long).Average();","db_name":"bike_1"},{"query":"SELECT date , zip_code FROM weather WHERE max_temperature_f >= 80","result":"context.Weathers.Where(row => row.MaxTemperatureF >= 80).Select(row => new { row.Date, row.ZipCode }).ToList();","db_name":"bike_1"},{"query":"SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f) > 60","result":"context.Trips.Join(context.Weathers, T1 => T1.ZipCode, T2 => T2.ZipCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ZipCode }).Where(group => group.Average(row => row.T2.MeanTemperatureF) > 60).Select(group => new { group.First().T1.Id }).ToList();","db_name":"bike_1"},{"query":"SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code","result":"context.Weathers.Where(row => row.MaxWindSpeedMph >= 25).GroupBy(row => new { row.ZipCode }).Select(group => new { group.Key.ZipCode, Count = group.Count() }).ToList();","db_name":"bike_1"},{"query":"SELECT date , zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)","result":"context.Weathers.Where(row => row.MinDewPointF < context.Weathers.Where(row => row.ZipCode == 94107).Select(row => row.MinDewPointF).Min()).Select(row => new { row.Date, row.ZipCode }).ToList();","db_name":"bike_1"},{"query":"SELECT T1.id , T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id","result":"context.Trips.Join(context.Stations, T1 => T1.EndStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Id, row.T2.InstallationDate }).ToList();","db_name":"bike_1"},{"query":"SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1","result":"context.Trips.Join(context.Stations, T1 => T1.StartStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.DockCount).Select(row => new { row.T1.Id }).Take(1).ToList();","db_name":"bike_1"},{"query":"SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != \"San Francisco\"","result":"context.Trips.Join(context.Stations, T1 => T1.EndStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City != \"San Francisco\").Count();","db_name":"bike_1"},{"query":"SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"","result":"context.Weathers.Where(row => row.ZipCode == 94107 && row.Events != \"Fog\" && row.Events != \"Rain\").Select(row => new { row.Date }).ToList();","db_name":"bike_1"},{"query":"SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available) < 7","result":"context.Stations.Where(row => row.Lat > 37.4).Select(row => row.Id).Except(context.Statuses.GroupBy(row => new { row.StationId }).Where(group => group.Min(row => row.BikesAvailable) < 7).Select(group => group.Key.StationId)).ToList();","db_name":"bike_1"},{"query":"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\"","result":"context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StationId }).Where(group => group.Average(row => row.T2.BikesAvailable) > 10).Select(group => group.First().T1.Name).Except(context.Stations.Where(row => row.City == \"San Jose\").Select(row => row.Name)).ToList();","db_name":"bike_1"},{"query":"SELECT name , lat , city FROM station ORDER BY lat LIMIT 1","result":"context.Stations.OrderBy(row => row.Lat).Select(row => new { row.Name, row.Lat, row.City }).Take(1).ToList();","db_name":"bike_1"},{"query":"SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3","result":"context.Weathers.OrderByDescending(row => row.MaxGustSpeedMph).Select(row => new { row.Date, row.MeanTemperatureF, row.MeanHumidity }).Take(3).ToList();","db_name":"bike_1"},{"query":"SELECT city , COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15","result":"context.Stations.GroupBy(row => new { row.City }).Where(group => group.Count() >= 15).Select(group => new { group.Key.City, Count = group.Count() }).ToList();","db_name":"bike_1"},{"query":"SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200","result":"context.Trips.GroupBy(row => new { row.StartStationName }).Where(group => group.Count() >= 200).Select(group => new { group.First().StartStationId, group.Key.StartStationName }).ToList();","db_name":"bike_1"},{"query":"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles) < 10","result":"context.Weathers.GroupBy(row => new { row.ZipCode }).Where(group => group.Average(row => row.MeanVisibilityMiles) < 10).Select(group => new { group.Key.ZipCode }).ToList();","db_name":"bike_1"},{"query":"SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC","result":"context.Stations.GroupBy(row => new { row.City }).OrderByDescending(group => group.Max(row => row.Lat)).Select(group => new { group.Key.City }).ToList();","db_name":"bike_1"},{"query":"SELECT date , cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5","result":"context.Weathers.OrderByDescending(row => row.CloudCover).Select(row => new { row.Date, row.CloudCover }).Take(5).ToList();","db_name":"bike_1"},{"query":"SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3","result":"context.Trips.OrderByDescending(row => row.Duration).Select(row => new { row.Id, row.Duration }).Take(3).ToList();","db_name":"bike_1"},{"query":"SELECT T1.name , T1.long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id","result":"context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StartStationId }).Select(group => new { group.First().T1.Name, group.First().T1.Long, AverageDuration = group.Select(row => row.T2.Duration).Average() }).ToList();","db_name":"bike_1"},{"query":"SELECT T1.name , T1.lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id","result":"context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.EndStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.EndStationId }).Select(group => new { group.OrderBy(row => row.T2.Duration).First().T1.Name, group.OrderBy(row => row.T2.Duration).First().T1.Lat, MinDuration = group.Select(row => row.T2.Duration).Min() }).ToList();","db_name":"bike_1"},{"query":"SELECT DISTINCT start_station_name FROM trip WHERE duration < 100","result":"context.Trips.Where(row => row.Duration < 100).Select(row => new { row.StartStationName }).Distinct().ToList();","db_name":"bike_1"},{"query":"SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70","result":"context.Weathers.Select(row => row.ZipCode).Distinct().Except(context.Weathers.Where(row => row.MaxDewPointF >= 70).Select(row => row.ZipCode).Distinct()).ToList();","db_name":"bike_1"},{"query":"SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = 94103)","result":"context.Trips.Where(row => row.Duration >= context.Trips.Where(row => row.ZipCode == 94103).Select(row => row.Duration).Average()).Select(row => new { row.Id }).ToList();","db_name":"bike_1"},{"query":"SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31","result":"context.Weathers.Where(row => row.MeanSeaLevelPressureInches >= 30.3 && row.MeanSeaLevelPressureInches <= 31).Select(row => new { row.Date }).ToList();","db_name":"bike_1"},{"query":"SELECT date , max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1","result":"context.Weathers.Select(row => new { row.Date, Diff = row.MaxTemperatureF - row.MinTemperatureF }).OrderBy(row => row.Diff).Take(1).ToList();","db_name":"bike_1"},{"query":"SELECT DISTINCT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12","result":"context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BikesAvailable > 12).Select(row => new { row.T1.Id, row.T1.Name }).Distinct().ToList();","db_name":"bike_1"},{"query":"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*) >= 100","result":"context.Weathers.GroupBy(row => new { row.ZipCode }).Where(group => group.Average(row => row.MeanHumidity) < 70).Select(group => group.Key.ZipCode).Intersect(context.Trips.GroupBy(row => new { row.ZipCode }).Where(group => group.Count() >= 100).Select(group => group.Key.ZipCode)).ToList();","db_name":"bike_1"},{"query":"SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 100","result":"context.Stations.Where(row => row.City == \"Palo Alto\").Select(row => row.Name).Except(context.Trips.GroupBy(row => new { row.EndStationName }).Where(group => group.Count() > 100).Select(group => group.Key.EndStationName)).ToList();","db_name":"bike_1"},{"query":"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = \"Mountain View\" AND T3.city = \"Palo Alto\"","result":"context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).Join(context.Trips, joined => joined.T2.Id, T4 => T4.Id, (joined, T4) => new { joined.T1, joined.T2, T4 }).Join(context.Stations, joined => joined.T4.EndStationId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, joined.T4, T3 }).Where(row => row.T1.City == \"Mountain View\" && row.T3.City == \"Palo Alto\").Count();","db_name":"bike_1"},{"query":"SELECT avg(T1.lat) , avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id","result":"context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => 1).Select(group => new { AverageLat = group.Select(row => row.T1.Lat).Average(), AverageLong = group.Select(row => row.T1.Long).Average() }).ToList();","db_name":"bike_1"},{"query":"SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800","result":"context.Cinemas.Select(row => row.Location).Except(context.Cinemas.Where(row => row.Capacity > 800).Select(row => row.Location)).ToList();","db_name":"cinema"},{"query":"SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011","result":"context.Cinemas.Where(row => row.OpenningYear == 2010).Select(row => row.Location).Intersect(context.Cinemas.Where(row => row.OpenningYear == 2011).Select(row => row.Location)).ToList();","db_name":"cinema"},{"query":"SELECT count(*) FROM cinema","result":"context.Cinemas.Count();","db_name":"cinema"},{"query":"SELECT name , openning_year , capacity FROM cinema","result":"context.Cinemas.Select(row => new { row.Name, row.OpenningYear, row.Capacity }).ToList();","db_name":"cinema"},{"query":"SELECT name , LOCATION FROM cinema WHERE capacity > (SELECT avg(capacity) FROM cinema)","result":"context.Cinemas.Where(row => row.Capacity > context.Cinemas.Select(row => row.Capacity).Average()).Select(row => new { row.Name, row.Location }).ToList();","db_name":"cinema"},{"query":"SELECT DISTINCT LOCATION FROM cinema","result":"context.Cinemas.Select(row => new { row.Location }).Distinct().ToList();","db_name":"cinema"},{"query":"SELECT name , openning_year FROM cinema ORDER BY openning_year DESC","result":"context.Cinemas.OrderByDescending(row => row.OpenningYear).Select(row => new { row.Name, row.OpenningYear }).ToList();","db_name":"cinema"},{"query":"SELECT name , LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1","result":"context.Cinemas.OrderByDescending(row => row.Capacity).Select(row => new { row.Name, row.Location }).Take(1).ToList();","db_name":"cinema"},{"query":"SELECT avg(capacity) , min(capacity) , max(capacity) FROM cinema WHERE openning_year >= 2011","result":"context.Cinemas.Where(row => row.OpenningYear >= 2011).GroupBy(row => 1).Select(group => new { AverageCapacity = group.Select(row => row.Capacity).Average(), MinCapacity = group.Select(row => row.Capacity).Min(), MaxCapacity = group.Select(row => row.Capacity).Max() }).ToList();","db_name":"cinema"},{"query":"SELECT LOCATION , count(*) FROM cinema GROUP BY LOCATION","result":"context.Cinemas.GroupBy(row => new { row.Location }).Select(group => new { group.Key.Location, Count = group.Count() }).ToList();","db_name":"cinema"},{"query":"SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1","result":"context.Cinemas.Where(row => row.OpenningYear >= 2010).GroupBy(row => new { row.Location }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Location }).Take(1).ToList();","db_name":"cinema"},{"query":"SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) >= 2","result":"context.Cinemas.Where(row => row.Capacity > 300).GroupBy(row => new { row.Location }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Location }).ToList();","db_name":"cinema"},{"query":"SELECT title , directed_by FROM film","result":"context.Films.Select(row => new { row.Title, row.DirectedBy }).ToList();","db_name":"cinema"},{"query":"SELECT DISTINCT directed_by FROM film","result":"context.Films.Select(row => new { row.DirectedBy }).Distinct().ToList();","db_name":"cinema"},{"query":"SELECT directed_by , count(*) FROM film GROUP BY directed_by","result":"context.Films.GroupBy(row => new { row.DirectedBy }).Select(group => new { group.Key.DirectedBy, Count = group.Count() }).ToList();","db_name":"cinema"},{"query":"SELECT T2.name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id","result":"context.Schedules.Join(context.Cinemas, T1 => T1.CinemaId, T2 => T2.CinemaId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CinemaId }).Select(group => new { group.First().T2.Name, SumShowTimesPerDay = group.Select(row => row.T1.ShowTimesPerDay).Sum() }).ToList();","db_name":"cinema"},{"query":"SELECT T2.title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id","result":"context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FilmId }).Select(group => new { group.OrderByDescending(row => row.T1.Price).First().T2.Title, MaxPrice = group.Select(row => row.T1.Price).Max() }).ToList();","db_name":"cinema"},{"query":"SELECT T3.name , T2.title , T1.date , T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id","result":"context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).Join(context.Cinemas, joined => joined.T1.CinemaId, T3 => T3.CinemaId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Name, row.T2.Title, row.T1.Date, row.T1.Price }).ToList();","db_name":"cinema"},{"query":"SELECT title , directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)","result":"context.Films.Where(row => !context.Schedules.Select(row => row.FilmId).Contains(row.FilmId)).Select(row => new { row.Title, row.DirectedBy }).ToList();","db_name":"cinema"},{"query":"SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1","result":"context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DirectedBy }).OrderByDescending(group => group.Sum(row => row.T1.ShowTimesPerDay)).Select(group => new { group.Key.DirectedBy }).Take(1).ToList();","db_name":"cinema"},{"query":"SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) > 1","result":"context.Cinemas.Where(row => row.Capacity > 300).GroupBy(row => new { row.Location }).Where(group => group.Count() > 1).Select(group => new { group.Key.Location }).ToList();","db_name":"cinema"},{"query":"SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"","result":"context.Films.Where(row => EF.Functions.Like(row.Title, \"%Dummy%\")).Count();","db_name":"cinema"},{"query":"SELECT count(*) FROM COURSE","result":"context.Courses.Count();","db_name":"college_3"},{"query":"SELECT count(*) FROM COURSE WHERE Credits > 2","result":"context.Courses.Where(row => row.Credits > 2).Count();","db_name":"college_3"},{"query":"SELECT CName FROM COURSE WHERE Credits = 1","result":"context.Courses.Where(row => row.Credits == 1).Select(row => new { row.Cname }).ToList();","db_name":"college_3"},{"query":"SELECT CName FROM COURSE WHERE Days = \"MTW\"","result":"context.Courses.Where(row => row.Days == \"MTW\").Select(row => new { row.Cname }).ToList();","db_name":"college_3"},{"query":"SELECT count(*) FROM DEPARTMENT WHERE Division = \"AS\"","result":"context.Departments.Where(row => row.Division == \"AS\").Count();","db_name":"college_3"},{"query":"SELECT DPhone FROM DEPARTMENT WHERE Room = 268","result":"context.Departments.Where(row => row.Room == 268).Select(row => new { row.Dphone }).ToList();","db_name":"college_3"},{"query":"SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade = \"B\"","result":"context.EnrolledIns.Where(row => row.Grade == \"B\").Select(row => row.StuId).Distinct().Count();","db_name":"college_3"},{"query":"SELECT max(gradepoint) , min(gradepoint) FROM GRADECONVERSION","result":"context.Gradeconversions.GroupBy(row => 1).Select(group => new { MaxGradepoint = group.Select(row => row.Gradepoint).Max(), MinGradepoint = group.Select(row => row.Gradepoint).Min() }).ToList();","db_name":"college_3"},{"query":"SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'","result":"context.Students.Where(row => EF.Functions.Like(row.Fname, \"%a%\")).Select(row => new { row.Fname }).Distinct().ToList();","db_name":"college_3"},{"query":"SELECT Fname , Lname FROM FACULTY WHERE sex = \"M\" AND Building = \"NEB\"","result":"context.Faculties.Where(row => row.Sex == \"M\" && row.Building == \"NEB\").Select(row => new { row.Fname, row.Lname }).ToList();","db_name":"college_3"},{"query":"SELECT Room FROM FACULTY WHERE Rank = \"Professor\" AND Building = \"NEB\"","result":"context.Faculties.Where(row => row.Rank == \"Professor\" && row.Building == \"NEB\").Select(row => new { row.Room }).ToList();","db_name":"college_3"},{"query":"SELECT DName FROM DEPARTMENT WHERE Building = \"Mergenthaler\"","result":"context.Departments.Where(row => row.Building == \"Mergenthaler\").Select(row => new { row.Dname }).ToList();","db_name":"college_3"},{"query":"SELECT * FROM COURSE ORDER BY Credits","result":"context.Courses.OrderBy(row => row.Credits).ToList();","db_name":"college_3"},{"query":"SELECT CName FROM COURSE ORDER BY Credits","result":"context.Courses.OrderBy(row => row.Credits).Select(row => new { row.Cname }).ToList();","db_name":"college_3"},{"query":"SELECT Fname FROM STUDENT ORDER BY Age DESC","result":"context.Students.OrderByDescending(row => row.Age).Select(row => new { row.Fname }).ToList();","db_name":"college_3"},{"query":"SELECT LName FROM STUDENT WHERE Sex = \"F\" ORDER BY Age DESC","result":"context.Students.Where(row => row.Sex == \"F\").OrderByDescending(row => row.Age).Select(row => new { row.Lname }).ToList();","db_name":"college_3"},{"query":"SELECT Lname FROM FACULTY WHERE Building = \"Barton\" ORDER BY Lname","result":"context.Faculties.Where(row => row.Building == \"Barton\").OrderBy(row => row.Lname).Select(row => new { row.Lname }).ToList();","db_name":"college_3"},{"query":"SELECT Fname FROM FACULTY WHERE Rank = \"Professor\" ORDER BY Fname","result":"context.Faculties.Where(row => row.Rank == \"Professor\").OrderBy(row => row.Fname).Select(row => new { row.Fname }).ToList();","db_name":"college_3"},{"query":"SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1","result":"context.Departments.Join(context.MinorIns, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Dno }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Dname }).Take(1).ToList();","db_name":"college_3"},{"query":"SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO","result":"context.Departments.Select(row => row.Dname).Except(context.Departments.Join(context.MinorIns, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Dname)).ToList();","db_name":"college_3"},{"query":"SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1","result":"context.Departments.Join(context.MemberOfs, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Dno }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.Dname }).Take(1).ToList();","db_name":"college_3"},{"query":"SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1","result":"context.Faculties.GroupBy(row => new { row.Rank }).OrderBy(group => group.Count()).Select(group => new { group.Key.Rank }).Take(1).ToList();","db_name":"college_3"},{"query":"SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3","result":"context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Instructor }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Fname, group.First().T2.Lname }).Take(3).ToList();","db_name":"college_3"},{"query":"SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1","result":"context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Instructor }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Building }).Take(1).ToList();","db_name":"college_3"},{"query":"SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT(*) >= 5","result":"context.Courses.Join(context.EnrolledIns, T1 => T1.Cid, T2 => T2.Cid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Cid }).Where(group => group.Count() >= 5).Select(group => new { group.First().T1.Cname }).ToList();","db_name":"college_3"},{"query":"SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE T1.CName = \"COMPUTER LITERACY\"","result":"context.Courses.Join(context.Faculties, T1 => T1.Instructor, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Cname == \"COMPUTER LITERACY\").Select(row => new { row.T2.Fname, row.T2.Lname }).ToList();","db_name":"college_3"},{"query":"SELECT T2.Dname , T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = \"INTRODUCTION TO COMPUTER SCIENCE\"","result":"context.Courses.Join(context.Departments, T1 => T1.Dno, T2 => T2.Dno, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Cname == \"INTRODUCTION TO COMPUTER SCIENCE\").Select(row => new { row.T2.Dname, row.T2.Room }).ToList();","db_name":"college_3"},{"query":"SELECT T3.Fname , T3.LName , T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID","result":"context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Fname, row.T3.Lname, row.T2.Gradepoint }).ToList();","db_name":"college_3"},{"query":"SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T2.gradepoint >= 3.8","result":"context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Gradepoint >= 3.8).Select(row => new { row.T3.Fname }).Distinct().ToList();","db_name":"college_3"},{"query":"SELECT T1.Fname , T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520","result":"context.Faculties.Join(context.MemberOfs, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Dno == 520).Select(row => new { row.T1.Fname, row.T1.Lname }).ToList();","db_name":"college_3"},{"query":"SELECT T2.Fname , T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE T1.DNO = 140","result":"context.MinorIns.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Dno == 140).Select(row => new { row.T2.Fname, row.T2.Lname }).ToList();","db_name":"college_3"},{"query":"SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = \"Computer Science\"","result":"context.Departments.Join(context.MemberOfs, T1 => T1.Dno, T3 => T3.Dno, (T1, T3) => new { T1, T3 }).Join(context.Faculties, joined => joined.T3.FacId, T2 => T2.FacId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T1.Dname == \"Computer Science\").Select(row => new { row.T2.Lname }).ToList();","db_name":"college_3"},{"query":"SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = \"Smith\"","result":"context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Lname == \"Smith\").Select(row => (double) row.T2.Gradepoint).Average();","db_name":"college_3"},{"query":"SELECT max(T2.gradepoint) , min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = \"NYC\"","result":"context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CityCode == \"NYC\").GroupBy(row => 1).Select(group => new { MaxGradepointT2 = group.Select(row => row.T2.Gradepoint).Max(), MinGradepointT2 = group.Select(row => row.T2.Gradepoint).Min() }).ToList();","db_name":"college_3"},{"query":"SELECT CName FROM COURSE WHERE Credits = 3 UNION SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4","result":"context.Courses.Where(row => row.Credits == 3).Select(row => row.Cname).Union(context.Courses.Where(row => row.Credits == 1 && row.Hours == \"4\").Select(row => row.Cname)).ToList();","db_name":"college_3"},{"query":"SELECT DName FROM DEPARTMENT WHERE Division = \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division = \"EN\" AND Building = \"NEB\"","result":"context.Departments.Where(row => row.Division == \"AS\").Select(row => row.Dname).Union(context.Departments.Where(row => row.Division == \"EN\" && row.Building == \"NEB\").Select(row => row.Dname)).ToList();","db_name":"college_3"},{"query":"SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)","result":"context.Students.Where(row => !context.EnrolledIns.Select(row => row.StuId).Contains(row.StuId)).Select(row => new { row.Fname }).ToList();","db_name":"college_3"},{"query":"SELECT count(*) FROM candidate","result":"context.Candidates.Count();","db_name":"candidate_poll"},{"query":"SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1","result":"context.Candidates.GroupBy(row => new { row.PollSource }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PollSource }).Take(1).ToList();","db_name":"candidate_poll"},{"query":"SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3","result":"context.Candidates.OrderByDescending(row => row.SupportRate).Select(row => new { row.SupportRate }).Take(3).ToList();","db_name":"candidate_poll"},{"query":"SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1","result":"context.Candidates.OrderBy(row => row.OpposeRate).Select(row => new { row.CandidateId }).Take(1).ToList();","db_name":"candidate_poll"},{"query":"SELECT Support_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY unsure_rate","result":"context.Candidates.OrderBy(row => row.UnsureRate).Select(row => new { row.SupportRate, row.ConsiderRate, row.OpposeRate }).ToList();","db_name":"candidate_poll"},{"query":"SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1","result":"context.Candidates.OrderByDescending(row => row.OpposeRate).Select(row => new { row.PollSource }).Take(1).ToList();","db_name":"candidate_poll"},{"query":"SELECT name FROM people ORDER BY date_of_birth","result":"context.People.OrderBy(row => row.DateOfBirth).Select(row => new { row.Name }).ToList();","db_name":"candidate_poll"},{"query":"SELECT avg(height) , avg(weight) FROM people WHERE sex = 'M'","result":"context.People.Where(row => row.Sex == \"M\").GroupBy(row => 1).Select(group => new { AverageHeight = group.Select(row => row.Height).Average(), AverageWeight = group.Select(row => row.Weight).Average() }).ToList();","db_name":"candidate_poll"},{"query":"SELECT name FROM people WHERE height > 200 OR height < 190","result":"context.People.Where(row => row.Height > 200 || row.Height < 190).Select(row => new { row.Name }).ToList();","db_name":"candidate_poll"},{"query":"SELECT avg(weight) , min(weight) , sex FROM people GROUP BY sex","result":"context.People.GroupBy(row => new { row.Sex }).Select(group => new { AverageWeight = group.Select(row => row.Weight).Average(), MinWeight = group.Select(row => row.Weight).Min(), group.Key.Sex }).ToList();","db_name":"candidate_poll"},{"query":"SELECT t1.name , t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1","result":"context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t2.SupportRate).Select(row => new { row.t1.Name, row.t1.Sex }).Take(1).ToList();","db_name":"candidate_poll"},{"query":"SELECT t1.name , t1.sex , min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex","result":"context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.Sex }).Select(group => new { group.OrderBy(row => row.t2.OpposeRate).First().t1.Name, group.Key.Sex, MinOpposeRate = group.Select(row => row.t2.OpposeRate).Min() }).ToList();","db_name":"candidate_poll"},{"query":"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1","result":"context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.Sex }).OrderByDescending(group => group.Average(row => row.t2.UnsureRate)).Select(group => new { group.Key.Sex }).Take(1).ToList();","db_name":"candidate_poll"},{"query":"SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)","result":"context.People.Where(row => !context.Candidates.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();","db_name":"candidate_poll"},{"query":"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate < t2.oppose_rate","result":"context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.SupportRate < row.t2.OpposeRate).Select(row => new { row.t1.Name }).ToList();","db_name":"candidate_poll"},{"query":"SELECT count(*) , sex FROM people WHERE weight > 85 GROUP BY sex","result":"context.People.Where(row => row.Weight > 85).GroupBy(row => new { row.Sex }).Select(group => new { Count = group.Count(), group.Key.Sex }).ToList();","db_name":"candidate_poll"},{"query":"SELECT max(support_rate) , min(consider_rate) , min(oppose_rate) FROM candidate","result":"context.Candidates.GroupBy(row => 1).Select(group => new { MaxSupportRate = group.Select(row => row.SupportRate).Max(), MinConsiderRate = group.Select(row => row.ConsiderRate).Min(), MinOpposeRate = group.Select(row => row.OpposeRate).Min() }).ToList();","db_name":"candidate_poll"},{"query":"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name","result":"context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Sex == \"F\").OrderBy(row => row.t1.Name).Select(row => new { row.t1.Name }).ToList();","db_name":"candidate_poll"},{"query":"SELECT name FROM people WHERE height < (SELECT avg(height) FROM people)","result":"context.People.Where(row => row.Height < context.People.Select(row => (double) row.Height).Average()).Select(row => new { row.Name }).ToList();","db_name":"candidate_poll"},{"query":"SELECT * FROM people","result":"context.People.ToList();","db_name":"candidate_poll"},{"query":"SELECT document_status_code FROM Ref_Document_Status;","result":"context.RefDocumentStatuses.Select(row => new { row.DocumentStatusCode }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";","result":"context.RefDocumentStatuses.Where(row => row.DocumentStatusCode == \"working\").Select(row => new { row.DocumentStatusDescription }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT document_type_code FROM Ref_Document_Types;","result":"context.RefDocumentTypes.Select(row => new { row.DocumentTypeCode }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";","result":"context.RefDocumentTypes.Where(row => row.DocumentTypeCode == \"Paper\").Select(row => new { row.DocumentTypeDescription }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT shipping_agent_name FROM Ref_Shipping_Agents;","result":"context.RefShippingAgents.Select(row => new { row.ShippingAgentName }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";","result":"context.RefShippingAgents.Where(row => row.ShippingAgentName == \"UPS\").Select(row => new { row.ShippingAgentCode }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT role_code FROM ROLES;","result":"context.Roles.Select(row => new { row.RoleCode }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT role_description FROM ROLES WHERE role_code = \"ED\";","result":"context.Roles.Where(row => row.RoleCode == \"ED\").Select(row => new { row.RoleDescription }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT count(*) FROM Employees;","result":"context.Employees.Count();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";","result":"context.Roles.Join(context.Employees, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EmployeeName == \"Koby\").Select(row => new { row.T1.RoleDescription }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT document_id , receipt_date FROM Documents;","result":"context.Documents.Select(row => new { row.DocumentId, row.ReceiptDate }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT T1.role_description , T2.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;","result":"context.Roles.Join(context.Employees, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.RoleCode }).Select(group => new { group.First().T1.RoleDescription, group.Key.RoleCode, Count = group.Count() }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id) > 1;","result":"context.Roles.Join(context.Employees, Roles => Roles.RoleCode, Employees => Employees.RoleCode, (Roles, Employees) => new { Roles, Employees }).GroupBy(row => new { row.Employees.RoleCode }).Select(group => new { group.First().Roles.RoleDescription, CountEmployeeId = group.Select(row => row.Employees.EmployeeId).Count() }).Where(group => group.CountEmployeeId > 1).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;","result":"context.RefDocumentStatuses.Join(context.Documents, RefDocumentStatuses => RefDocumentStatuses.DocumentStatusCode, Documents => Documents.DocumentStatusCode, (RefDocumentStatuses, Documents) => new { RefDocumentStatuses, Documents }).Where(row => row.Documents.DocumentId == 1).Select(row => new { row.RefDocumentStatuses.DocumentStatusDescription }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT count(*) FROM Documents WHERE document_status_code = \"done\";","result":"context.Documents.Where(row => row.DocumentStatusCode == \"done\").Count();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT document_type_code FROM Documents WHERE document_id = 2;","result":"context.Documents.Where(row => row.DocumentId == 2).Select(row => new { row.DocumentTypeCode }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";","result":"context.Documents.Where(row => row.DocumentStatusCode == \"done\" && row.DocumentTypeCode == \"Paper\").Select(row => new { row.DocumentId }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;","result":"context.RefShippingAgents.Join(context.Documents, RefShippingAgents => RefShippingAgents.ShippingAgentCode, Documents => Documents.ShippingAgentCode, (RefShippingAgents, Documents) => new { RefShippingAgents, Documents }).Where(row => row.Documents.DocumentId == 2).Select(row => new { row.RefShippingAgents.ShippingAgentName }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";","result":"context.RefShippingAgents.Join(context.Documents, RefShippingAgents => RefShippingAgents.ShippingAgentCode, Documents => Documents.ShippingAgentCode, (RefShippingAgents, Documents) => new { RefShippingAgents, Documents }).Where(row => row.RefShippingAgents.ShippingAgentName == \"USPS\").Count();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;","result":"context.RefShippingAgents.Join(context.Documents, RefShippingAgents => RefShippingAgents.ShippingAgentCode, Documents => Documents.ShippingAgentCode, (RefShippingAgents, Documents) => new { RefShippingAgents, Documents }).GroupBy(row => new { row.RefShippingAgents.ShippingAgentCode }).Select(group => new { group.First().RefShippingAgents.ShippingAgentName, CountDocumentId = group.Select(row => row.Documents.DocumentId).Count() }).OrderByDescending(group => group.CountDocumentId).Take(1).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT receipt_date FROM Documents WHERE document_id = 3;","result":"context.Documents.Where(row => row.DocumentId == 3).Select(row => new { row.ReceiptDate }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;","result":"context.Addresses.Join(context.DocumentsMaileds, Addresses => Addresses.AddressId, DocumentsMaileds => DocumentsMaileds.MailedToAddressId, (Addresses, DocumentsMaileds) => new { Addresses, DocumentsMaileds }).Where(row => row.DocumentsMaileds.DocumentId == 4).Select(row => new { row.Addresses.AddressDetails }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;","result":"context.DocumentsMaileds.Where(row => row.DocumentId == 7).Select(row => new { row.MailingDate }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";","result":"context.Documents.Where(row => row.DocumentStatusCode == \"done\" && row.DocumentTypeCode == \"Paper\").Select(row => row.DocumentId).Except(context.Documents.Join(context.RefShippingAgents, Documents => Documents.ShippingAgentCode, RefShippingAgents => RefShippingAgents.ShippingAgentCode, (Documents, RefShippingAgents) => new { Documents, RefShippingAgents }).Where(row => row.RefShippingAgents.ShippingAgentName == \"USPS\").Select(row => row.Documents.DocumentId)).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";","result":"context.Documents.Where(row => row.DocumentStatusCode == \"done\" && row.DocumentTypeCode == \"Paper\").Select(row => row.DocumentId).Intersect(context.Documents.Join(context.RefShippingAgents, Documents => Documents.ShippingAgentCode, RefShippingAgents => RefShippingAgents.ShippingAgentCode, (Documents, RefShippingAgents) => new { Documents, RefShippingAgents }).Where(row => row.RefShippingAgents.ShippingAgentName == \"USPS\").Select(row => row.Documents.DocumentId)).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT draft_details FROM Document_Drafts WHERE document_id = 7;","result":"context.DocumentDrafts.Where(row => row.DocumentId == 7).Select(row => new { row.DraftDetails }).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT count(*) FROM Draft_Copies WHERE document_id = 2;","result":"context.DraftCopies.Where(row => row.DocumentId == 2).Count();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;","result":"context.DraftCopies.GroupBy(row => new { row.DocumentId }).Select(group => new { group.Key.DocumentId, CountCopyNumber = group.Select(row => row.CopyNumber).Count() }).OrderByDescending(group => group.CountCopyNumber).Take(1).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*) > 1;","result":"context.DraftCopies.GroupBy(row => new { row.DocumentId }).Select(group => new { group.Key.DocumentId, Count = group.Count() }).Where(group => group.Count > 1).ToList();","db_name":"cre_Doc_Control_Systems"},{"query":"SELECT campus FROM campuses WHERE county = \"Los Angeles\"","result":"context.Campuses.Where(row => row.County == \"Los Angeles\").Select(row => new { row.Campus1 }).ToList();","db_name":"csu_1"},{"query":"SELECT campus FROM campuses WHERE LOCATION = \"Chico\"","result":"context.Campuses.Where(row => row.Location == \"Chico\").Select(row => new { row.Campus1 }).ToList();","db_name":"csu_1"},{"query":"SELECT campus FROM campuses WHERE YEAR = 1958","result":"context.Campuses.Where(row => row.Year == 1958).Select(row => new { row.Campus1 }).ToList();","db_name":"csu_1"},{"query":"SELECT campus FROM campuses WHERE YEAR < 1800","result":"context.Campuses.Where(row => row.Year < 1800).Select(row => new { row.Campus1 }).ToList();","db_name":"csu_1"},{"query":"SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939","result":"context.Campuses.Where(row => row.Year >= 1935 && row.Year <= 1939).Select(row => new { row.Campus1 }).ToList();","db_name":"csu_1"},{"query":"SELECT campus FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION = \"San Francisco\" AND county = \"San Francisco\"","result":"context.Campuses.Where(row => row.Location == \"Northridge\" && row.County == \"Los Angeles\").Select(row => row.Campus1).Union(context.Campuses.Where(row => row.Location == \"San Francisco\" && row.County == \"San Francisco\").Select(row => row.Campus1)).ToList();","db_name":"csu_1"},{"query":"SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND T2.year = 1996","result":"context.Campuses.Join(context.CsuFees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Jose State University\" && row.T2.Year == 1996).Select(row => new { row.T2.CampusFee }).ToList();","db_name":"csu_1"},{"query":"SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND T2.year = 1996","result":"context.Campuses.Join(context.CsuFees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Francisco State University\" && row.T2.Year == 1996).Select(row => new { row.T2.CampusFee }).ToList();","db_name":"csu_1"},{"query":"SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)","result":"context.CsuFees.Where(row => row.CampusFee > context.CsuFees.Select(row => row.CampusFee).Average()).Count();","db_name":"csu_1"},{"query":"SELECT campus FROM campuses WHERE county = \"Los Angeles\" AND YEAR > 1950","result":"context.Campuses.Where(row => row.County == \"Los Angeles\" && row.Year > 1950).Select(row => new { row.Campus1 }).ToList();","db_name":"csu_1"},{"query":"SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1","result":"context.Degrees.GroupBy(row => new { row.Year }).OrderByDescending(group => group.Sum(row => row.Degrees)).Select(group => new { group.Key.Year }).Take(1).ToList();","db_name":"csu_1"},{"query":"SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1","result":"context.Degrees.GroupBy(row => new { row.Campus }).OrderByDescending(group => group.Sum(row => row.Degrees)).Select(group => new { group.Key.Campus }).Take(1).ToList();","db_name":"csu_1"},{"query":"SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 ORDER BY T2.faculty DESC LIMIT 1","result":"context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2003).OrderByDescending(row => row.T2.Faculty1).Select(row => new { row.T1.Campus1 }).Take(1).ToList();","db_name":"csu_1"},{"query":"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city = \"Palo Alto\")","result":"context.Statuses.Where(row => !context.Stations.Where(row => row.City == \"Palo Alto\").Select(row => row.Id).Contains(row.StationId)).Select(row => row.BikesAvailable).Average();","db_name":"bike_1"},{"query":"SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = 94103)","result":"context.Trips.Where(row => row.Duration >= context.Trips.Where(row => row.ZipCode == 94103).Select(row => row.Duration).Average()).Select(row => new { row.Id }).ToList();","db_name":"bike_1"},{"query":"SELECT name , LOCATION FROM cinema WHERE capacity > (SELECT avg(capacity) FROM cinema)","result":"context.Cinemas.Where(row => row.Capacity > context.Cinemas.Select(row => row.Capacity).Average()).Select(row => new { row.Name, row.Location }).ToList();","db_name":"cinema"},{"query":"SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)","result":"context.CsuFees.Where(row => row.CampusFee > context.CsuFees.Select(row => row.CampusFee).Average()).Count();","db_name":"csu_1"},{"query":"SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 1996","result":"context.CsuFees.Where(row => row.Year == 1996).Select(row => row.CampusFee).Average();","db_name":"csu_1"},{"query":"SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 2005","result":"context.CsuFees.Where(row => row.Year == 2005).Select(row => row.CampusFee).Average();","db_name":"csu_1"},{"query":"SELECT T1.campus , sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T2.year >= 1998 AND T2.year <= 2002 GROUP BY T1.campus","result":"context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year >= 1998 && row.T2.Year <= 2002).GroupBy(row => new { row.T1.Campus1 }).Select(group => new { group.Key.Campus1, SumDegrees = group.Select(row => row.T2.Degrees).Sum() }).ToList();","db_name":"csu_1"},{"query":"SELECT T1.campus , sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T1.county = \"Orange\" AND T2.year >= 2000 GROUP BY T1.campus","result":"context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.County == \"Orange\" && row.T2.Year >= 2000).GroupBy(row => new { row.T1.Campus1 }).Select(group => new { group.Key.Campus1, SumDegrees = group.Select(row => row.T2.Degrees).Sum() }).ToList();","db_name":"csu_1"},{"query":"SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND faculty > (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = \"Orange\")","result":"context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2002 && row.T2.Faculty1 > context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2002 && row.T1.County == \"Orange\").Select(row => row.T2.Faculty1).Max()).Select(row => new { row.T1.Campus1 }).ToList();","db_name":"csu_1"},{"query":"SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200","result":"context.Campuses.Join(context.Enrollments, t1 => t1.Id, t2 => t2.Campus, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Year == 1956 && row.t2.TotalEnrollmentAy > 400 && row.t2.FteAy > 200).Select(row => new { row.t1.Campus1 }).ToList();","db_name":"csu_1"},{"query":"SELECT count(*) FROM campuses WHERE county = \"Los Angeles\"","result":"context.Campuses.Where(row => row.County == \"Los Angeles\").Count();","db_name":"csu_1"},{"query":"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 2000","result":"context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Jose State University\" && row.T2.Year == 2000).Select(row => new { row.T2.Degrees }).ToList();","db_name":"csu_1"},{"query":"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND t2.year = 2001","result":"context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Francisco State University\" && row.T2.Year == 2001).Select(row => new { row.T2.Degrees }).ToList();","db_name":"csu_1"},{"query":"SELECT sum(faculty) FROM faculty WHERE YEAR = 2002","result":"context.Faculties.Where(row => row.Year == 2002).Select(row => row.Faculty1).Sum();","db_name":"csu_1"},{"query":"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2002 AND T2.campus = \"Long Beach State University\"","result":"context.Faculties.Join(context.Campuses, T1 => T1.Campus, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2002 && row.T2.Campus1 == \"Long Beach State University\").Select(row => new { row.T1.Faculty1 }).ToList();","db_name":"csu_1"},{"query":"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2004 AND T2.campus = \"San Francisco State University\"","result":"context.Faculties.Join(context.Campuses, T1 => T1.Campus, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2004 && row.T2.Campus1 == \"San Francisco State University\").Select(row => new { row.T1.Faculty1 }).ToList();","db_name":"csu_1"},{"query":"SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T1.year = 2004","result":"context.Campuses.Join(context.Faculties, t1 => t1.Id, t2 => t2.Campus, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Faculty1 >= 600 && row.t2.Faculty1 <= 1000 && row.t1.Year == 2004).Select(row => new { row.t1.Campus1 }).ToList();","db_name":"csu_1"},{"query":"SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1","result":"context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Join(context.Degrees, joined => new { Pair1 = joined.T1.Id, Pair2 = joined.T2.Year }, T3 => new { Pair1 = T3.Campus, Pair2 = T3.Year }, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Year == 2002).OrderByDescending(row => row.T3.Degrees).Select(row => new { row.T2.Faculty1 }).Take(1).ToList();","db_name":"csu_1"},{"query":"SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2001 ORDER BY t3.degrees LIMIT 1","result":"context.Campuses.Join(context.Faculties, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Join(context.Degrees, joined => new { Pair1 = joined.T1.Id, Pair2 = joined.T2.Year }, T3 => new { Pair1 = T3.Campus, Pair2 = T3.Year }, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Year == 2001).OrderBy(row => row.T3.Degrees).Select(row => new { row.T2.Faculty1 }).Take(1).ToList();","db_name":"csu_1"},{"query":"SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Jose State University\"","result":"context.DisciplineEnrollments.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Year == 2004 && row.t2.Campus1 == \"San Jose State University\").Select(row => row.t1.Undergraduate).Sum();","db_name":"csu_1"},{"query":"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Francisco State University\"","result":"context.DisciplineEnrollments.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Year == 2004 && row.t2.Campus1 == \"San Francisco State University\").Select(row => row.t1.Graduate).Sum();","db_name":"csu_1"},{"query":"SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Francisco State University\" AND t1.year = 2000","result":"context.CsuFees.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Campus1 == \"San Francisco State University\" && row.t1.Year == 2000).Select(row => new { row.t1.CampusFee }).ToList();","db_name":"csu_1"},{"query":"SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Jose State University\" AND t1.year = 2000","result":"context.CsuFees.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Campus1 == \"San Jose State University\" && row.t1.Year == 2000).Select(row => new { row.t1.CampusFee }).ToList();","db_name":"csu_1"},{"query":"SELECT count(*) FROM campuses","result":"context.Campuses.Count();","db_name":"csu_1"},{"query":"SELECT actual_order_id FROM actual_orders WHERE order_status_code = 'Success'","result":"context.ActualOrders.Where(row => row.OrderStatusCode == \"Success\").Select(row => new { row.ActualOrderId }).ToList();","db_name":"customer_deliveries"},{"query":"SELECT t1.product_name , t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1","result":"context.Products.Join(context.RegularOrderProducts, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ProductId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.ProductName, group.First().t1.ProductPrice }).Take(1).ToList();","db_name":"customer_deliveries"},{"query":"SELECT count(*) FROM customers","result":"context.Customers.Count();","db_name":"customer_deliveries"},{"query":"SELECT count(DISTINCT payment_method) FROM customers","result":"context.Customers.Select(row => row.PaymentMethod).Distinct().Count();","db_name":"customer_deliveries"},{"query":"SELECT truck_details FROM trucks ORDER BY truck_licence_number","result":"context.Trucks.OrderBy(row => row.TruckLicenceNumber).Select(row => new { row.TruckDetails }).ToList();","db_name":"customer_deliveries"},{"query":"SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1","result":"context.Products.OrderByDescending(row => (double) row.ProductPrice).Select(row => new { row.ProductName }).Take(1).ToList();","db_name":"customer_deliveries"},{"query":"SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'","result":"context.Customers.Select(row => row.CustomerName).Except(context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.StateProvinceCounty == \"California\").Select(row => row.t1.CustomerName)).ToList();","db_name":"customer_deliveries"},{"query":"SELECT customer_email , customer_name FROM customers WHERE payment_method = 'Visa'","result":"context.Customers.Where(row => row.PaymentMethod == \"Visa\").Select(row => new { row.CustomerEmail, row.CustomerName }).ToList();","db_name":"customer_deliveries"},{"query":"SELECT t1.customer_name , t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'","result":"context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.StateProvinceCounty == \"California\").Select(row => new { row.t1.CustomerName, row.t1.CustomerPhone }).ToList();","db_name":"customer_deliveries"},{"query":"SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)","result":"context.Addresses.Where(row => !context.Employees.Select(row => row.EmployeeAddressId).Contains(row.AddressId)).Select(row => new { row.StateProvinceCounty }).ToList();","db_name":"customer_deliveries"},{"query":"SELECT customer_name , customer_phone , customer_email FROM Customers ORDER BY date_became_customer","result":"context.Customers.OrderBy(row => row.DateBecameCustomer).Select(row => new { row.CustomerName, row.CustomerPhone, row.CustomerEmail }).ToList();","db_name":"customer_deliveries"},{"query":"SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5","result":"context.Customers.OrderBy(row => row.DateBecameCustomer).Select(row => new { row.CustomerName }).Take(5).ToList();","db_name":"customer_deliveries"},{"query":"SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1","result":"context.Customers.GroupBy(row => new { row.PaymentMethod }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PaymentMethod }).Take(1).ToList();","db_name":"customer_deliveries"},{"query":"SELECT route_name FROM Delivery_Routes ORDER BY route_name","result":"context.DeliveryRoutes.OrderBy(row => row.RouteName).Select(row => new { row.RouteName }).ToList();","db_name":"customer_deliveries"},{"query":"SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id = t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1","result":"context.DeliveryRoutes.Join(context.DeliveryRouteLocations, t1 => t1.RouteId, t2 => t2.RouteId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.RouteId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.RouteName }).Take(1).ToList();","db_name":"customer_deliveries"},{"query":"SELECT t2.state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county","result":"context.CustomerAddresses.Join(context.Addresses, t1 => t1.AddressId, t2 => t2.AddressId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.StateProvinceCounty }).Select(group => new { group.Key.StateProvinceCounty, Count = group.Count() }).ToList();","db_name":"customer_deliveries"},{"query":"SELECT count(*) FROM Ref_calendar","result":"context.RefCalendars.Count();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT calendar_date , day_Number FROM Ref_calendar","result":"context.RefCalendars.Select(row => new { row.CalendarDate, row.DayNumber }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT count(*) FROM Ref_document_types","result":"context.RefDocumentTypes.Count();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT document_type_code , document_type_name FROM Ref_document_types","result":"context.RefDocumentTypes.Select(row => new { row.DocumentTypeCode, row.DocumentTypeName }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT document_type_name , document_type_description FROM Ref_document_types WHERE document_type_code = \"RV\"","result":"context.RefDocumentTypes.Where(row => row.DocumentTypeCode == \"RV\").Select(row => new { row.DocumentTypeName, row.DocumentTypeDescription }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT document_type_code FROM Ref_document_types WHERE document_type_name = \"Paper\"","result":"context.RefDocumentTypes.Where(row => row.DocumentTypeName == \"Paper\").Select(row => new { row.DocumentTypeCode }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT count(*) FROM All_documents WHERE document_type_code = \"CV\" OR document_type_code = \"BK\"","result":"context.AllDocuments.Where(row => row.DocumentTypeCode == \"CV\" || row.DocumentTypeCode == \"BK\").Count();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT date_stored FROM All_documents WHERE Document_name = \"Marry CV\"","result":"context.AllDocuments.Where(row => row.DocumentName == \"Marry CV\").Select(row => new { row.DateStored }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date","result":"context.AllDocuments.Join(context.RefCalendars, T1 => T1.DateStored, T2 => T2.CalendarDate, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.DayNumber, row.T1.DateStored }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code WHERE T1.document_name = \"How to read a book\"","result":"context.AllDocuments.Join(context.RefDocumentTypes, T1 => T1.DocumentTypeCode, T2 => T2.DocumentTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DocumentName == \"How to read a book\").Select(row => new { row.T2.DocumentTypeName }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT count(*) FROM Ref_locations","result":"context.RefLocations.Count();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT location_code , location_name FROM Ref_locations","result":"context.RefLocations.Select(row => new { row.LocationCode, row.LocationName }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT location_name , location_description FROM Ref_locations WHERE location_code = \"x\"","result":"context.RefLocations.Where(row => row.LocationCode == \"x\").Select(row => new { row.LocationName, row.LocationDescription }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT location_code FROM Ref_locations WHERE location_name = \"Canada\"","result":"context.RefLocations.Where(row => row.LocationName == \"Canada\").Select(row => new { row.LocationCode }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT count(*) FROM ROLES","result":"context.Roles.Count();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT role_code , role_name , role_description FROM ROLES","result":"context.Roles.Select(row => new { row.RoleCode, row.RoleName, row.RoleDescription }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT role_name , role_description FROM ROLES WHERE role_code = \"MG\"","result":"context.Roles.Where(row => row.RoleCode == \"MG\").Select(row => new { row.RoleName, row.RoleDescription }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT role_description FROM ROLES WHERE role_name = \"Proof Reader\"","result":"context.Roles.Where(row => row.RoleName == \"Proof Reader\").Select(row => new { row.RoleDescription }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT count(*) FROM Employees","result":"context.Employees.Count();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT employee_name , role_code , date_of_birth FROM Employees WHERE employee_Name = 'Armani'","result":"context.Employees.Where(row => row.EmployeeName == \"Armani\").Select(row => new { row.EmployeeName, row.RoleCode, row.DateOfBirth }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT employee_ID FROM Employees WHERE employee_name = \"Ebba\"","result":"context.Employees.Where(row => row.EmployeeName == \"Ebba\").Select(row => new { row.EmployeeId }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT employee_name FROM Employees WHERE role_code = \"HR\"","result":"context.Employees.Where(row => row.RoleCode == \"HR\").Select(row => new { row.EmployeeName }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT role_code , count(*) FROM Employees GROUP BY role_code","result":"context.Employees.GroupBy(row => new { row.RoleCode }).Select(group => new { group.Key.RoleCode, Count = group.Count() }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1","result":"context.Employees.GroupBy(row => new { row.RoleCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.RoleCode }).Take(1).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT role_code FROM Employees GROUP BY role_code HAVING count(*) >= 3","result":"context.Employees.GroupBy(row => new { row.RoleCode }).Where(group => group.Count() >= 3).Select(group => new { group.Key.RoleCode }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1","result":"context.Employees.GroupBy(row => new { row.RoleCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.RoleCode }).Take(1).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT T2.role_name , T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T1.employee_name = \"Ebba\"","result":"context.Employees.Join(context.Roles, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.EmployeeName == \"Ebba\").Select(row => new { row.T2.RoleName, row.T2.RoleDescription }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = \"Editor\"","result":"context.Employees.Join(context.Roles, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.RoleName == \"Editor\").Select(row => new { row.T1.EmployeeName }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = \"Human Resource\" OR T2.role_name = \"Manager\"","result":"context.Employees.Join(context.Roles, T1 => T1.RoleCode, T2 => T2.RoleCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.RoleName == \"Human Resource\" || row.T2.RoleName == \"Manager\").Select(row => new { row.T1.EmployeeId }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT DISTINCT location_code FROM Document_locations","result":"context.DocumentLocations.Select(row => new { row.LocationCode }).Distinct().ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = \"Robin CV\"","result":"context.AllDocuments.Join(context.DocumentLocations, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Join(context.RefLocations, joined => joined.T2.LocationCode, T3 => T3.LocationCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.DocumentName == \"Robin CV\").Select(row => new { row.T3.LocationName }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT location_code , date_in_location_from , date_in_locaton_to FROM Document_locations","result":"context.DocumentLocations.Select(row => new { row.LocationCode, row.DateInLocationFrom, row.DateInLocatonTo }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT T1.date_in_location_from , T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Robin CV\"","result":"context.DocumentLocations.Join(context.AllDocuments, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == \"Robin CV\").Select(row => new { row.T1.DateInLocationFrom, row.T1.DateInLocatonTo }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT location_code , count(*) FROM Document_locations GROUP BY location_code","result":"context.DocumentLocations.GroupBy(row => new { row.LocationCode }).Select(group => new { group.Key.LocationCode, Count = group.Count() }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1","result":"context.DocumentLocations.GroupBy(row => new { row.LocationCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.LocationCode }).Take(1).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*) >= 3","result":"context.DocumentLocations.GroupBy(row => new { row.LocationCode }).Where(group => group.Count() >= 3).Select(group => new { group.Key.LocationCode }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT T2.location_name , T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1","result":"context.DocumentLocations.Join(context.RefLocations, T1 => T1.LocationCode, T2 => T2.LocationCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.LocationCode }).OrderBy(group => group.Count()).Select(group => new { group.First().T2.LocationName, group.Key.LocationCode }).Take(1).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT T2.employee_name , T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;","result":"context.DocumentsToBeDestroyeds.Join(context.Employees, T1 => T1.DestructionAuthorisedByEmployeeId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Join(context.Employees, joined => joined.T1.DestroyedByEmployeeId, T3 => T3.EmployeeId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { T2EmployeeName = row.T2.EmployeeName, T3EmployeeName = row.T3.EmployeeName }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT Destruction_Authorised_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID","result":"context.DocumentsToBeDestroyeds.GroupBy(row => new { row.DestructionAuthorisedByEmployeeId }).Select(group => new { group.Key.DestructionAuthorisedByEmployeeId, Count = group.Count() }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT Destroyed_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID","result":"context.DocumentsToBeDestroyeds.GroupBy(row => new { row.DestroyedByEmployeeId }).Select(group => new { group.Key.DestroyedByEmployeeId, Count = group.Count() }).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed","result":"context.Employees.Select(row => row.EmployeeId).Except(context.DocumentsToBeDestroyeds.Select(row => row.DestructionAuthorisedByEmployeeId)).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed","result":"context.DocumentsToBeDestroyeds.Select(row => new { row.DestructionAuthorisedByEmployeeId }).Distinct().ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed","result":"context.DocumentsToBeDestroyeds.Select(row => new { row.DestroyedByEmployeeId }).Distinct().ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed","result":"context.Employees.Select(row => row.EmployeeId).Except(context.DocumentsToBeDestroyeds.Select(row => row.DestroyedByEmployeeId)).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed","result":"context.DocumentsToBeDestroyeds.Select(row => row.DestroyedByEmployeeId).Union(context.DocumentsToBeDestroyeds.Select(row => row.DestructionAuthorisedByEmployeeId)).ToList();","db_name":"cre_Doc_Tracking_DB"},{"query":"SELECT count(*) FROM club","result":"context.Clubs.Count();","db_name":"club_1"},{"query":"SELECT clubname FROM club","result":"context.Clubs.Select(row => new { row.ClubName }).ToList();","db_name":"club_1"},{"query":"SELECT count(*) FROM student","result":"context.Students.Count();","db_name":"club_1"},{"query":"SELECT DISTINCT fname FROM student","result":"context.Students.Select(row => new { row.Fname }).Distinct().ToList();","db_name":"club_1"},{"query":"SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\").Select(row => new { row.t3.Lname }).ToList();","db_name":"club_1"},{"query":"SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Hopkins Student Enterprises\").Select(row => new { row.t3.Lname }).ToList();","db_name":"club_1"},{"query":"SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Tennis Club\").Count();","db_name":"club_1"},{"query":"SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Pen and Paper Gaming\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Pen and Paper Gaming\").Count();","db_name":"club_1"},{"query":"SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Linda\" AND t3.lname = \"Smith\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == \"Linda\" && row.t3.Lname == \"Smith\").Count();","db_name":"club_1"},{"query":"SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Tracy\" AND t3.lname = \"Kim\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == \"Tracy\" && row.t3.Lname == \"Kim\").Count();","db_name":"club_1"},{"query":"SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.sex = \"F\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\" && row.t3.Sex == \"F\").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList();","db_name":"club_1"},{"query":"SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t3.sex = \"M\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Hopkins Student Enterprises\" && row.t3.Sex == \"M\").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList();","db_name":"club_1"},{"query":"SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.major = \"600\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\" && row.t3.Major == \"600\").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList();","db_name":"club_1"},{"query":"SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.major = \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Major == \"600\").GroupBy(row => new { row.t1.ClubName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ClubName }).Take(1).ToList();","db_name":"club_1"},{"query":"SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.sex = \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Sex == \"F\").GroupBy(row => new { row.t1.ClubName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ClubName }).Take(1).ToList();","db_name":"club_1"},{"query":"SELECT clubdesc FROM club WHERE clubname = \"Tennis Club\"","result":"context.Clubs.Where(row => row.ClubName == \"Tennis Club\").Select(row => new { row.ClubDesc }).ToList();","db_name":"club_1"},{"query":"SELECT clubdesc FROM club WHERE clubname = \"Pen and Paper Gaming\"","result":"context.Clubs.Where(row => row.ClubName == \"Pen and Paper Gaming\").Select(row => new { row.ClubDesc }).ToList();","db_name":"club_1"},{"query":"SELECT clublocation FROM club WHERE clubname = \"Tennis Club\"","result":"context.Clubs.Where(row => row.ClubName == \"Tennis Club\").Select(row => new { row.ClubLocation }).ToList();","db_name":"club_1"},{"query":"SELECT clublocation FROM club WHERE clubname = \"Pen and Paper Gaming\"","result":"context.Clubs.Where(row => row.ClubName == \"Pen and Paper Gaming\").Select(row => new { row.ClubLocation }).ToList();","db_name":"club_1"},{"query":"SELECT clublocation FROM club WHERE clubname = \"Hopkins Student Enterprises\"","result":"context.Clubs.Where(row => row.ClubName == \"Hopkins Student Enterprises\").Select(row => new { row.ClubLocation }).ToList();","db_name":"club_1"},{"query":"SELECT clubname FROM club WHERE clublocation = \"AKW\"","result":"context.Clubs.Where(row => row.ClubLocation == \"AKW\").Select(row => new { row.ClubName }).ToList();","db_name":"club_1"},{"query":"SELECT count(*) FROM club WHERE clublocation = \"HHH\"","result":"context.Clubs.Where(row => row.ClubLocation == \"HHH\").Count();","db_name":"club_1"},{"query":"SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t2.position = \"President\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\" && row.t2.Position == \"President\").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList();","db_name":"club_1"},{"query":"SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t2.position = \"CTO\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Hopkins Student Enterprises\" && row.t2.Position == \"CTO\").Select(row => new { row.t3.Fname, row.t3.Lname }).ToList();","db_name":"club_1"},{"query":"SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE t1.clubname = \"Bootup Baltimore\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\").Select(row => row.t2.Position).Distinct().Count();","db_name":"club_1"},{"query":"SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.age > 18","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\" && row.t3.Age > 18).Count();","db_name":"club_1"},{"query":"SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.age < 18","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\" && row.t3.Age < 18).Count();","db_name":"club_1"},{"query":"SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = \"BAL\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.CityCode == \"BAL\").Select(row => new { row.t1.ClubName }).Distinct().ToList();","db_name":"club_1"},{"query":"SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = \"HOU\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.CityCode == \"HOU\").Select(row => new { row.t1.ClubName }).Distinct().ToList();","db_name":"club_1"},{"query":"SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Eric\" AND t3.lname = \"Tai\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == \"Eric\" && row.t3.Lname == \"Tai\").Select(row => row.t1.ClubName).Distinct().Count();","db_name":"club_1"},{"query":"SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Davis\" AND t3.lname = \"Steven\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == \"Davis\" && row.t3.Lname == \"Steven\").Select(row => new { row.t1.ClubName }).Distinct().ToList();","db_name":"club_1"},{"query":"SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.advisor = 1121","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Advisor == 1121).Select(row => new { row.t1.ClubName }).Distinct().ToList();","db_name":"club_1"},{"query":"SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\").Select(row => row.t3.Age).Average();","db_name":"club_1"},{"query":"SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Hopkins Student Enterprises\").Select(row => row.t3.Age).Average();","db_name":"club_1"},{"query":"SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"","result":"context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Tennis Club\").Select(row => row.t3.Age).Average();","db_name":"club_1"},{"query":"SELECT count(DISTINCT allergy) FROM Allergy_type","result":"context.AllergyTypes.Select(row => row.Allergy).Distinct().Count();","db_name":"allergy_1"},{"query":"SELECT count(DISTINCT allergytype) FROM Allergy_type","result":"context.AllergyTypes.Select(row => row.AllergyType1).Distinct().Count();","db_name":"allergy_1"},{"query":"SELECT DISTINCT allergytype FROM Allergy_type","result":"context.AllergyTypes.Select(row => new { row.AllergyType1 }).Distinct().ToList();","db_name":"allergy_1"},{"query":"SELECT allergy , allergytype FROM Allergy_type","result":"context.AllergyTypes.Select(row => new { row.Allergy, row.AllergyType1 }).ToList();","db_name":"allergy_1"},{"query":"SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = \"food\"","result":"context.AllergyTypes.Where(row => row.AllergyType1 == \"food\").Select(row => new { row.Allergy }).Distinct().ToList();","db_name":"allergy_1"},{"query":"SELECT allergytype FROM Allergy_type WHERE allergy = \"Cat\"","result":"context.AllergyTypes.Where(row => row.Allergy == \"Cat\").Select(row => new { row.AllergyType1 }).ToList();","db_name":"allergy_1"},{"query":"SELECT count(*) FROM Allergy_type WHERE allergytype = \"animal\"","result":"context.AllergyTypes.Where(row => row.AllergyType1 == \"animal\").Count();","db_name":"allergy_1"},{"query":"SELECT allergytype , count(*) FROM Allergy_type GROUP BY allergytype","result":"context.AllergyTypes.GroupBy(row => new { row.AllergyType1 }).Select(group => new { group.Key.AllergyType1, Count = group.Count() }).ToList();","db_name":"allergy_1"},{"query":"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1","result":"context.AllergyTypes.GroupBy(row => new { row.AllergyType1 }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AllergyType1 }).Take(1).ToList();","db_name":"allergy_1"},{"query":"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1","result":"context.AllergyTypes.GroupBy(row => new { row.AllergyType1 }).OrderBy(group => group.Count()).Select(group => new { group.Key.AllergyType1 }).Take(1).ToList();","db_name":"allergy_1"},{"query":"SELECT count(*) FROM Student","result":"context.Students.Count();","db_name":"allergy_1"},{"query":"SELECT Fname , Lname FROM Student","result":"context.Students.Select(row => new { row.Fname, row.Lname }).ToList();","db_name":"allergy_1"},{"query":"SELECT count(DISTINCT advisor) FROM Student","result":"context.Students.Select(row => row.Advisor).Distinct().Count();","db_name":"allergy_1"},{"query":"SELECT DISTINCT Major FROM Student","result":"context.Students.Select(row => new { row.Major }).Distinct().ToList();","db_name":"allergy_1"},{"query":"SELECT DISTINCT city_code FROM Student","result":"context.Students.Select(row => new { row.CityCode }).Distinct().ToList();","db_name":"allergy_1"},{"query":"SELECT Fname , Lname , Age FROM Student WHERE Sex = 'F'","result":"context.Students.Where(row => row.Sex == \"F\").Select(row => new { row.Fname, row.Lname, row.Age }).ToList();","db_name":"allergy_1"},{"query":"SELECT StuID FROM Student WHERE Sex = 'M'","result":"context.Students.Where(row => row.Sex == \"M\").Select(row => new { row.StuId }).ToList();","db_name":"allergy_1"},{"query":"SELECT count(*) FROM Student WHERE age = 18","result":"context.Students.Where(row => row.Age == 18).Count();","db_name":"allergy_1"},{"query":"SELECT StuID FROM Student WHERE age > 20","result":"context.Students.Where(row => row.Age > 20).Select(row => new { row.StuId }).ToList();","db_name":"allergy_1"},{"query":"SELECT city_code FROM Student WHERE LName = \"Kim\"","result":"context.Students.Where(row => row.Lname == \"Kim\").Select(row => new { row.CityCode }).ToList();","db_name":"allergy_1"},{"query":"SELECT Advisor FROM Student WHERE StuID = 1004","result":"context.Students.Where(row => row.StuId == 1004).Select(row => new { row.Advisor }).ToList();","db_name":"allergy_1"},{"query":"SELECT count(*) FROM Student WHERE city_code = \"HKG\" OR city_code = \"CHI\"","result":"context.Students.Where(row => row.CityCode == \"HKG\" || row.CityCode == \"CHI\").Count();","db_name":"allergy_1"},{"query":"SELECT min(age) , avg(age) , max(age) FROM Student","result":"context.Students.GroupBy(row => 1).Select(group => new { MinAge = group.Select(row => row.Age).Min(), AverageAge = group.Select(row => row.Age).Average(), MaxAge = group.Select(row => row.Age).Max() }).ToList();","db_name":"allergy_1"},{"query":"SELECT LName FROM Student WHERE age = (SELECT min(age) FROM Student)","result":"context.Students.Where(row => row.Age == context.Students.Select(row => row.Age).Min()).Select(row => new { row.Lname }).ToList();","db_name":"allergy_1"},{"query":"SELECT StuID FROM Student WHERE age = (SELECT max(age) FROM Student)","result":"context.Students.Where(row => row.Age == context.Students.Select(row => row.Age).Max()).Select(row => new { row.StuId }).ToList();","db_name":"allergy_1"},{"query":"SELECT major , count(*) FROM Student GROUP BY major","result":"context.Students.GroupBy(row => new { row.Major }).Select(group => new { group.Key.Major, Count = group.Count() }).ToList();","db_name":"allergy_1"},{"query":"SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1","result":"context.Students.GroupBy(row => new { row.Major }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Major }).Take(1).ToList();","db_name":"allergy_1"},{"query":"SELECT age , count(*) FROM Student GROUP BY age","result":"context.Students.GroupBy(row => new { row.Age }).Select(group => new { group.Key.Age, Count = group.Count() }).ToList();","db_name":"allergy_1"},{"query":"SELECT avg(age) , sex FROM Student GROUP BY sex","result":"context.Students.GroupBy(row => new { row.Sex }).Select(group => new { AverageAge = group.Select(row => row.Age).Average(), group.Key.Sex }).ToList();","db_name":"allergy_1"},{"query":"SELECT city_code , count(*) FROM Student GROUP BY city_code","result":"context.Students.GroupBy(row => new { row.CityCode }).Select(group => new { group.Key.CityCode, Count = group.Count() }).ToList();","db_name":"allergy_1"},{"query":"SELECT advisor , count(*) FROM Student GROUP BY advisor","result":"context.Students.GroupBy(row => new { row.Advisor }).Select(group => new { group.Key.Advisor, Count = group.Count() }).ToList();","db_name":"allergy_1"},{"query":"SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1","result":"context.Students.GroupBy(row => new { row.Advisor }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Advisor }).Take(1).ToList();","db_name":"allergy_1"},{"query":"SELECT count(*) FROM Has_allergy WHERE Allergy = \"Cat\"","result":"context.HasAllergies.Where(row => row.Allergy == \"Cat\").Count();","db_name":"allergy_1"},{"query":"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*) >= 2","result":"context.HasAllergies.GroupBy(row => new { row.StuId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.StuId }).ToList();","db_name":"allergy_1"},{"query":"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy","result":"context.Students.Select(row => row.StuId).Except(context.HasAllergies.Select(row => row.StuId)).ToList();","db_name":"allergy_1"},{"query":"SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = \"F\" AND T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\"","result":"context.HasAllergies.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Sex == \"F\" && row.T1.Allergy == \"Milk\" || row.T1.Allergy == \"Eggs\").Count();","db_name":"allergy_1"},{"query":"SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1","result":"context.HasAllergies.GroupBy(row => new { row.Allergy }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Allergy }).Take(1).ToList();","db_name":"allergy_1"},{"query":"SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy","result":"context.HasAllergies.GroupBy(row => new { row.Allergy }).Select(group => new { group.Key.Allergy, Count = group.Count() }).ToList();","db_name":"allergy_1"},{"query":"SELECT lname , age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")","result":"context.Students.Where(row => context.HasAllergies.Where(row => row.Allergy == \"Milk\").Select(row => row.StuId).Intersect(context.HasAllergies.Where(row => row.Allergy == \"Cat\").Select(row => row.StuId)).Contains(row.StuId)).Select(row => new { row.Lname, row.Age }).ToList();","db_name":"allergy_1"},{"query":"SELECT T1.Allergy , T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" ORDER BY T1.Allergy","result":"context.AllergyTypes.Join(context.HasAllergies, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Fname == \"Lisa\").OrderBy(row => row.T1.Allergy).Select(row => new { row.T1.Allergy, row.T1.AllergyType1 }).ToList();","db_name":"allergy_1"},{"query":"SELECT fname , sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")","result":"context.Students.Where(row => context.HasAllergies.Where(row => row.Allergy == \"Milk\").Select(row => row.StuId).Except(context.HasAllergies.Where(row => row.Allergy == \"Cat\").Select(row => row.StuId)).Contains(row.StuId)).Select(row => new { row.Fname, row.Sex }).ToList();","db_name":"allergy_1"},{"query":"SELECT DISTINCT T1.fname , T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = \"Milk\" OR T2.Allergy = \"Cat\"","result":"context.Students.Join(context.HasAllergies, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Allergy == \"Milk\" || row.T2.Allergy == \"Cat\").Select(row => new { row.T1.Fname, row.T1.CityCode }).Distinct().ToList();","db_name":"allergy_1"},{"query":"SELECT fname , major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Soy\")","result":"context.Students.Where(row => !context.HasAllergies.Where(row => row.Allergy == \"Soy\").Select(row => row.StuId).Contains(row.StuId)).Select(row => new { row.Fname, row.Major }).ToList();","db_name":"allergy_1"},{"query":"SELECT count(*) FROM customers","result":"context.Customers.Count();","db_name":"customer_complaints"},{"query":"SELECT email_address , phone_number FROM customers ORDER BY email_address , phone_number","result":"context.Customers.OrderBy(row => row.EmailAddress).ThenBy(row => row.PhoneNumber).Select(row => new { row.EmailAddress, row.PhoneNumber }).ToList();","db_name":"customer_complaints"},{"query":"SELECT town_city FROM customers WHERE customer_type_code = \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1","result":"context.Customers.Where(row => row.CustomerTypeCode == \"Good Credit Rating\").GroupBy(row => new { row.TownCity }).OrderBy(group => group.Count()).Select(group => new { group.Key.TownCity }).Take(1).ToList();","db_name":"customer_complaints"},{"query":"SELECT t1.product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name","result":"context.Products.Join(context.Complaints, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ProductName }).Select(group => new { group.Key.ProductName, Count = group.Count() }).ToList();","db_name":"customer_complaints"},{"query":"SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1","result":"context.Customers.Join(context.Complaints, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.CustomerId }).OrderBy(group => group.Count()).Select(group => new { group.First().t1.EmailAddress }).Take(1).ToList();","db_name":"customer_complaints"},{"query":"SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1","result":"context.Products.Join(context.Complaints, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).SelectMany(s => context.Customers, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.CustomerId }).OrderBy(group => group.Count()).Select(group => new { group.First().t1.ProductName }).Distinct().Take(1).ToList();","db_name":"customer_complaints"},{"query":"SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1","result":"context.Customers.Join(context.Complaints, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t2.DateComplaintRaised).Select(row => new { row.t1.PhoneNumber }).Take(1).ToList();","db_name":"customer_complaints"},{"query":"SELECT email_address , phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)","result":"context.Customers.Where(row => !context.Complaints.Select(row => row.CustomerId).Contains(row.CustomerId)).Select(row => new { row.EmailAddress, row.PhoneNumber }).ToList();","db_name":"customer_complaints"},{"query":"SELECT phone_number FROM customers UNION SELECT phone_number FROM staff","result":"context.Customers.Select(row => row.PhoneNumber).Union(context.Staff.Select(row => row.PhoneNumber)).ToList();","db_name":"customer_complaints"},{"query":"SELECT product_description FROM products WHERE product_name = \"Chocolate\"","result":"context.Products.Where(row => row.ProductName == \"Chocolate\").Select(row => new { row.ProductDescription }).ToList();","db_name":"customer_complaints"},{"query":"SELECT product_name , product_category_code FROM products ORDER BY product_price DESC LIMIT 1","result":"context.Products.OrderByDescending(row => (double) row.ProductPrice).Select(row => new { row.ProductName, row.ProductCategoryCode }).Take(1).ToList();","db_name":"customer_complaints"},{"query":"SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)","result":"context.Products.Where(row => !context.Complaints.Select(row => row.ProductId).Contains(row.ProductId)).Select(row => new { row.ProductPrice }).ToList();","db_name":"customer_complaints"},{"query":"SELECT avg(product_price) , product_category_code FROM products GROUP BY product_category_code","result":"context.Products.GroupBy(row => new { row.ProductCategoryCode }).Select(group => new { AverageProductPrice = group.Select(row => (double) row.ProductPrice).Average(), group.Key.ProductCategoryCode }).ToList();","db_name":"customer_complaints"},{"query":"SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id JOIN products AS t3 ON t2.product_id = t3.product_id ORDER BY t3.product_price LIMIT 1","result":"context.Staff.Join(context.Complaints, t1 => t1.StaffId, t2 => t2.StaffId, (t1, t2) => new { t1, t2 }).Join(context.Products, joined => joined.t2.ProductId, t3 => t3.ProductId, (joined, t3) => new { joined.t1, joined.t2, t3 }).OrderBy(row => (double) row.t3.ProductPrice).Select(row => new { row.t1.LastName }).Take(1).ToList();","db_name":"customer_complaints"},{"query":"SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*) > 3","result":"context.Complaints.GroupBy(row => new { row.ComplaintStatusCode }).Where(group => group.Count() > 3).Select(group => new { group.Key.ComplaintStatusCode }).ToList();","db_name":"customer_complaints"},{"query":"SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"","result":"context.Staff.Where(row => EF.Functions.Like(row.EmailAddress, \"%wrau%\")).Select(row => new { row.LastName }).ToList();","db_name":"customer_complaints"},{"query":"SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1","result":"context.Customers.GroupBy(row => new { row.CustomerTypeCode }).Select(group => new { Count = group.Count() }).OrderByDescending(group => group.Count).Take(1);","db_name":"customer_complaints"},{"query":"SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1","result":"context.Staff.Join(context.Complaints, t1 => t1.StaffId, t2 => t2.StaffId, (t1, t2) => new { t1, t2 }).OrderBy(row => row.t2.DateComplaintRaised).Select(row => new { row.t1.LastName }).Take(1).ToList();","db_name":"customer_complaints"},{"query":"SELECT count(DISTINCT complaint_type_code) FROM complaints","result":"context.Complaints.Select(row => row.ComplaintTypeCode).Distinct().Count();","db_name":"customer_complaints"},{"query":"SELECT address_line_1 , address_line_2 FROM customers WHERE email_address = \"vbogisich@example.org\"","result":"context.Customers.Where(row => row.EmailAddress == \"vbogisich@example.org\").Select(row => new { row.AddressLine1, row.AddressLine2 }).ToList();","db_name":"customer_complaints"},{"query":"SELECT complaint_status_code , count(*) FROM complaints WHERE complaint_type_code = \"Product Failure\" GROUP BY complaint_status_code","result":"context.Complaints.Where(row => row.ComplaintTypeCode == \"Product Failure\").GroupBy(row => new { row.ComplaintStatusCode }).Select(group => new { group.Key.ComplaintStatusCode, Count = group.Count() }).ToList();","db_name":"customer_complaints"},{"query":"SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5","result":"context.Staff.Join(context.Complaints, t1 => t1.StaffId, t2 => t2.StaffId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.StaffId }).OrderBy(group => group.Count()).Select(group => new { group.First().t1.FirstName }).Take(5).ToList();","db_name":"customer_complaints"},{"query":"SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1","result":"context.Customers.GroupBy(row => new { row.State }).OrderBy(group => group.Count()).Select(group => new { group.Key.State }).Take(1).ToList();","db_name":"customer_complaints"},{"query":"SELECT dname FROM department ORDER BY mgr_start_date","result":"context.Departments.OrderBy(row => row.MgrStartDate).Select(row => new { row.Dname }).ToList();","db_name":"company_1"},{"query":"SELECT Dependent_name FROM dependent WHERE relationship = 'Spouse'","result":"context.Dependents.Where(row => row.Relationship == \"Spouse\").Select(row => new { row.DependentName }).ToList();","db_name":"company_1"},{"query":"SELECT count(*) FROM dependent WHERE sex = 'F'","result":"context.Dependents.Where(row => row.Sex == \"F\").Count();","db_name":"company_1"},{"query":"SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber WHERE t2.dlocation = 'Houston'","result":"context.Departments.Join(context.DeptLocations, t1 => t1.Dnumber, t2 => t2.Dnumber, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Dlocation == \"Houston\").Select(row => new { row.t1.Dname }).ToList();","db_name":"company_1"},{"query":"SELECT fname , lname FROM employee WHERE salary > 30000","result":"context.Employees.Where(row => row.Salary > 30000).Select(row => new { row.Fname, row.Lname }).ToList();","db_name":"company_1"},{"query":"SELECT count(*) , sex FROM employee WHERE salary < 50000 GROUP BY sex","result":"context.Employees.Where(row => row.Salary < 50000).GroupBy(row => new { row.Sex }).Select(group => new { Count = group.Count(), group.Key.Sex }).ToList();","db_name":"company_1"},{"query":"SELECT fname , lname , address FROM employee ORDER BY Bdate","result":"context.Employees.OrderBy(row => row.Bdate).Select(row => new { row.Fname, row.Lname, row.Address }).ToList();","db_name":"company_1"},{"query":"SELECT count(*) FROM Accounts","result":"context.Accounts.Count();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT account_id , account_details FROM Accounts","result":"context.Accounts.Select(row => new { row.AccountId, row.AccountDetails }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT count(*) FROM Statements","result":"context.Statements.Count();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT STATEMENT_ID , statement_details FROM Statements","result":"context.Statements.Select(row => new { row.StatementId, row.StatementDetails }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT T1.statement_id , T2.statement_details , T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id","result":"context.Accounts.Join(context.Statements, T1 => T1.StatementId, T2 => T2.StatementId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.StatementId, row.T2.StatementDetails, row.T1.AccountDetails }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT STATEMENT_ID , count(*) FROM Accounts GROUP BY STATEMENT_ID","result":"context.Accounts.GroupBy(row => new { row.StatementId }).Select(group => new { group.Key.StatementId, Count = group.Count() }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT T1.statement_id , T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1","result":"context.Accounts.Join(context.Statements, T1 => T1.StatementId, T2 => T2.StatementId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StatementId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StatementId, group.First().T2.StatementDetails }).Take(1).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT count(*) FROM Documents","result":"context.Documents.Count();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT document_type_code , document_name , document_description FROM Documents WHERE document_name = 'Noel CV' OR document_name = 'King Book'","result":"context.Documents.Where(row => row.DocumentName == \"Noel CV\" || row.DocumentName == \"King Book\").Select(row => new { row.DocumentTypeCode, row.DocumentName, row.DocumentDescription }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT document_id , document_name FROM Documents","result":"context.Documents.Select(row => new { row.DocumentId, row.DocumentName }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT document_name , document_id FROM Documents WHERE document_type_code = \"BK\"","result":"context.Documents.Where(row => row.DocumentTypeCode == \"BK\").Select(row => new { row.DocumentName, row.DocumentId }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT count(*) , project_id FROM Documents WHERE document_type_code = \"BK\" GROUP BY project_id","result":"context.Documents.Where(row => row.DocumentTypeCode == \"BK\").GroupBy(row => new { row.ProjectId }).Select(group => new { Count = group.Count(), group.Key.ProjectId }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT document_name , document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'","result":"context.Documents.Join(context.Projects, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ProjectDetails == \"Graph Database project\").Select(row => new { row.T1.DocumentName, row.T1.DocumentDate }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT project_id , count(*) FROM Documents GROUP BY project_id","result":"context.Documents.GroupBy(row => new { row.ProjectId }).Select(group => new { group.Key.ProjectId, Count = group.Count() }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1","result":"context.Documents.GroupBy(row => new { row.ProjectId }).OrderBy(group => group.Count()).Select(group => new { group.Key.ProjectId }).Take(1).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT project_id FROM Documents GROUP BY project_id HAVING count(*) >= 2","result":"context.Documents.GroupBy(row => new { row.ProjectId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProjectId }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT document_type_code , count(*) FROM Documents GROUP BY document_type_code","result":"context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Select(group => new { group.Key.DocumentTypeCode, Count = group.Count() }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1","result":"context.Documents.GroupBy(row => new { row.DocumentTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DocumentTypeCode }).Take(1).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*) < 3","result":"context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Where(group => group.Count() < 3).Select(group => new { group.Key.DocumentTypeCode }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT T1.statement_details , T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id = T2.document_id WHERE T1.statement_details = 'Private Project'","result":"context.Statements.Join(context.Documents, T1 => T1.StatementId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StatementDetails == \"Private Project\").Select(row => new { row.T1.StatementDetails, row.T2.DocumentName }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT document_type_code , document_type_name , document_type_description FROM Ref_document_types","result":"context.RefDocumentTypes.Select(row => new { row.DocumentTypeCode, row.DocumentTypeName, row.DocumentTypeDescription }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT document_type_description FROM Ref_document_types WHERE document_type_name = \"Film\"","result":"context.RefDocumentTypes.Where(row => row.DocumentTypeName == \"Film\").Select(row => new { row.DocumentTypeDescription }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT T1.document_type_name , T1.document_type_description , T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code","result":"context.RefDocumentTypes.Join(context.Documents, T1 => T1.DocumentTypeCode, T2 => T2.DocumentTypeCode, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.DocumentTypeName, row.T1.DocumentTypeDescription, row.T2.DocumentDate }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT count(*) FROM Projects","result":"context.Projects.Count();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT project_id , project_details FROM Projects","result":"context.Projects.Select(row => new { row.ProjectId, row.ProjectDetails }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT T1.project_id , T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING count(*) > 2","result":"context.Projects.Join(context.Documents, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProjectId }).Where(group => group.Count() > 2).Select(group => new { group.Key.ProjectId, group.First().T1.ProjectDetails }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id WHERE T2.document_name = \"King Book\"","result":"context.Projects.Join(context.Documents, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == \"King Book\").Select(row => new { row.T1.ProjectDetails }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT count(*) FROM Ref_budget_codes","result":"context.RefBudgetCodes.Count();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT budget_type_code , budget_type_description FROM Ref_budget_codes","result":"context.RefBudgetCodes.Select(row => new { row.BudgetTypeCode, row.BudgetTypeDescription }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code = \"ORG\"","result":"context.RefBudgetCodes.Where(row => row.BudgetTypeCode == \"ORG\").Select(row => new { row.BudgetTypeDescription }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT count(*) FROM Documents_with_expenses","result":"context.DocumentsWithExpenses.Count();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT document_id FROM Documents_with_expenses WHERE budget_type_code = 'SF'","result":"context.DocumentsWithExpenses.Where(row => row.BudgetTypeCode == \"SF\").Select(row => new { row.DocumentId }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT T2.budget_type_code , T2.budget_type_description , T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code","result":"context.DocumentsWithExpenses.Join(context.RefBudgetCodes, T1 => T1.BudgetTypeCode, T2 => T2.BudgetTypeCode, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.BudgetTypeCode, row.T2.BudgetTypeDescription, row.T1.DocumentId }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE T2.budget_type_Description = \"Government\"","result":"context.DocumentsWithExpenses.Join(context.RefBudgetCodes, T1 => T1.BudgetTypeCode, T2 => T2.BudgetTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeDescription == \"Government\").Select(row => new { row.T1.DocumentId }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT budget_type_code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code","result":"context.DocumentsWithExpenses.GroupBy(row => new { row.BudgetTypeCode }).Select(group => new { group.Key.BudgetTypeCode, Count = group.Count() }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1","result":"context.DocumentsWithExpenses.GroupBy(row => new { row.BudgetTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BudgetTypeCode }).Take(1).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses","result":"context.Documents.Select(row => row.DocumentId).Except(context.DocumentsWithExpenses.Select(row => row.DocumentId)).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT document_id FROM Documents WHERE document_type_code = \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses","result":"context.Documents.Where(row => row.DocumentTypeCode == \"CV\").Select(row => row.DocumentId).Except(context.DocumentsWithExpenses.Select(row => row.DocumentId)).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name LIKE '%s%'","result":"context.Documents.Join(context.DocumentsWithExpenses, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.DocumentName, \"%s%\")).Select(row => new { row.T1.DocumentId }).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )","result":"context.Documents.Where(row => !context.DocumentsWithExpenses.Select(row => row.DocumentId).Contains(row.DocumentId)).Count();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'SF'","result":"context.Documents.Join(context.DocumentsWithExpenses, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeCode == \"GV\").Select(row => row.T1.DocumentDate).Intersect(context.Documents.Join(context.DocumentsWithExpenses, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeCode == \"SF\").Select(row => row.T1.DocumentDate)).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"","result":"new List<string> { context.Accounts.Select(row => row.AccountDetails.ToString()).Max() }.Union(context.Accounts.Where(row => EF.Functions.Like(row.AccountDetails.ToString(), \"%5%\")).Select(row => row.AccountDetails.ToString())).ToList();","db_name":"cre_Docs_and_Epenses"},{"query":"SELECT count(*) FROM county_public_safety","result":"context.CountyPublicSafeties.Count();","db_name":"county_public_safety"},{"query":"SELECT Name FROM county_public_safety ORDER BY Population DESC","result":"context.CountyPublicSafeties.OrderByDescending(row => row.Population).Select(row => new { row.Name }).ToList();","db_name":"county_public_safety"},{"query":"SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"","result":"context.CountyPublicSafeties.Where(row => row.Location != \"East\").Select(row => new { row.PoliceForce }).Distinct().ToList();","db_name":"county_public_safety"},{"query":"SELECT min(Crime_rate) , max(Crime_rate) FROM county_public_safety","result":"context.CountyPublicSafeties.GroupBy(row => 1).Select(group => new { MinCrimeRate = group.Select(row => row.CrimeRate).Min(), MaxCrimeRate = group.Select(row => row.CrimeRate).Max() }).ToList();","db_name":"county_public_safety"},{"query":"SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC","result":"context.CountyPublicSafeties.OrderBy(row => row.PoliceOfficers).Select(row => new { row.CrimeRate }).ToList();","db_name":"county_public_safety"},{"query":"SELECT Name FROM city ORDER BY Name ASC","result":"context.Cities.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();","db_name":"county_public_safety"},{"query":"SELECT Hispanic FROM city WHERE Black > 10","result":"context.Cities.Where(row => row.Black > 10).Select(row => new { row.Hispanic }).ToList();","db_name":"county_public_safety"},{"query":"SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1","result":"context.CountyPublicSafeties.OrderByDescending(row => row.Population).Select(row => new { row.Name }).Take(1).ToList();","db_name":"county_public_safety"},{"query":"SELECT Name FROM city ORDER BY White DESC LIMIT 5","result":"context.Cities.OrderByDescending(row => row.White).Select(row => new { row.Name }).Take(5).ToList();","db_name":"county_public_safety"},{"query":"SELECT T1.Name , T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID","result":"context.Cities.Join(context.CountyPublicSafeties, T1 => T1.CountyId, T2 => T2.CountyId, (T1, T2) => new { T1, T2 }).Select(row => new { T1Name = row.T1.Name, T2Name = row.T2.Name }).ToList();","db_name":"county_public_safety"},{"query":"SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID","result":"context.Cities.Join(context.CountyPublicSafeties, T1 => T1.CountyId, T2 => T2.CountyId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.White, row.T2.CrimeRate }).ToList();","db_name":"county_public_safety"},{"query":"SELECT name FROM city WHERE county_ID = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)","result":"context.Cities.Where(row => row.CountyId == context.CountyPublicSafeties.OrderByDescending(row => row.PoliceOfficers).Select(row => row.CountyId).Take(1).First()).Select(row => new { row.Name }).ToList();","db_name":"county_public_safety"},{"query":"SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)","result":"context.Cities.Where(row => context.CountyPublicSafeties.Where(row => row.Population > 20000).Select(row => row.CountyId).Contains(row.CountyId)).Count();","db_name":"county_public_safety"},{"query":"SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90","result":"context.Cities.Join(context.CountyPublicSafeties, T1 => T1.CountyId, T2 => T2.CountyId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.White > 90).Select(row => new { row.T2.CrimeRate }).ToList();","db_name":"county_public_safety"},{"query":"SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force","result":"context.CountyPublicSafeties.GroupBy(row => new { row.PoliceForce }).Select(group => new { group.Key.PoliceForce, Count = group.Count() }).ToList();","db_name":"county_public_safety"},{"query":"SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1","result":"context.CountyPublicSafeties.GroupBy(row => new { row.Location }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Location }).Take(1).ToList();","db_name":"county_public_safety"},{"query":"SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)","result":"context.CountyPublicSafeties.Where(row => !context.Cities.Select(row => row.CountyId).Contains(row.CountyId)).Select(row => new { row.Name }).ToList();","db_name":"county_public_safety"},{"query":"SELECT Police_force FROM county_public_safety WHERE LOCATION = \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION = \"West\"","result":"context.CountyPublicSafeties.Where(row => row.Location == \"East\").Select(row => row.PoliceForce).Intersect(context.CountyPublicSafeties.Where(row => row.Location == \"West\").Select(row => row.PoliceForce)).ToList();","db_name":"county_public_safety"},{"query":"SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)","result":"context.Cities.Where(row => context.CountyPublicSafeties.Where(row => row.CrimeRate < 100).Select(row => row.CountyId).Contains(row.CountyId)).Select(row => new { row.Name }).ToList();","db_name":"county_public_safety"},{"query":"SELECT Case_burden FROM county_public_safety ORDER BY Population DESC","result":"context.CountyPublicSafeties.OrderByDescending(row => row.Population).Select(row => new { row.CaseBurden }).ToList();","db_name":"county_public_safety"},{"query":"SELECT T1.name_full , T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;","result":"context.Colleges.Join(context.PlayerColleges, T1 => T1.CollegeId, T2 => T2.CollegeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CollegeId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.NameFull, group.Key.CollegeId }).Take(1).ToList();","db_name":"baseball_1"},{"query":"SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'","result":"context.Salaries.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\").Select(row => row.T1.Salary1).Average();","db_name":"baseball_1"},{"query":"SELECT name_first , name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE YEAR = 1998","result":"context.Players.Join(context.AllStars, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 1998).Select(row => new { row.T1.NameFirst, row.T1.NameLast }).ToList();","db_name":"baseball_1"},{"query":"SELECT T1.name_first , T1.name_last , T1.player_id , count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;","result":"context.Players.Join(context.AllStars, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PlayerId }).Select(group => new { group.First().T1.NameFirst, group.First().T1.NameLast, group.Key.PlayerId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();","db_name":"baseball_1"},{"query":"SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid;","result":"context.HallOfFames.GroupBy(row => new { row.Yearid }).Select(group => new { group.Key.Yearid, Count = group.Count() }).ToList();","db_name":"baseball_1"},{"query":"SELECT YEAR , avg(attendance) FROM home_game GROUP BY YEAR;","result":"context.HomeGames.GroupBy(row => new { row.Year }).Select(group => new { group.Key.Year, AverageAttendance = group.Select(row => row.Attendance).Average() }).ToList();","db_name":"baseball_1"},{"query":"SELECT T2.team_id , T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T1.year = 2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;","result":"context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2014).GroupBy(row => new { row.T1.TeamId }).OrderByDescending(group => group.Average(row => row.T1.Attendance)).Select(group => new { group.Key.TeamId, group.First().T2.Rank }).Take(1).ToList();","db_name":"baseball_1"},{"query":"SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;","result":"context.Players.Join(context.ManagerAwards, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.PlayerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.NameFirst, group.First().T1.NameLast, group.Key.PlayerId }).Take(1).ToList();","db_name":"baseball_1"},{"query":"SELECT count(*) FROM park WHERE state = 'NY';","result":"context.Parks.Where(row => row.State == \"NY\").Count();","db_name":"baseball_1"},{"query":"SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;","result":"context.Players.Join(context.PlayerAwards, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PlayerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.NameFirst, group.First().T1.NameLast, group.Key.PlayerId }).Take(3).ToList();","db_name":"baseball_1"},{"query":"SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;","result":"context.Players.GroupBy(row => new { row.BirthCountry }).OrderBy(group => group.Count()).Select(group => new { group.Key.BirthCountry }).Take(3).ToList();","db_name":"baseball_1"},{"query":"SELECT name_first , name_last FROM player WHERE death_year = '';","result":"context.Players.Where(row => row.DeathYear == \"\").Select(row => new { row.NameFirst, row.NameLast }).ToList();","db_name":"baseball_1"},{"query":"SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats = 'R';","result":"context.Players.Where(row => row.BirthCountry == \"USA\" && row.Bats == \"R\").Count();","db_name":"baseball_1"},{"query":"SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T3.college_id = T2.college_id WHERE T3.name_full = 'Yale University';","result":"context.Players.Join(context.PlayerColleges, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Join(context.Colleges, joined => joined.T2.CollegeId, T3 => T3.CollegeId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.NameFull == \"Yale University\").Select(row => row.T1.Height).Average();","db_name":"baseball_1"},{"query":"SELECT T1.name , T1.team_id , max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id;","result":"context.Teams.Join(context.Salaries, T1 => T1.TeamId, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TeamId }).Select(group => new { group.OrderByDescending(row => row.T2.Salary1).First().T1.Name, group.Key.TeamId, MaxSalary1 = group.Select(row => row.T2.Salary1).Max() }).ToList();","db_name":"baseball_1"},{"query":"SELECT T1.name , T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;","result":"context.Teams.Join(context.Salaries, T1 => T1.TeamId, T2 => T2.TeamId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TeamId }).OrderBy(group => group.Average(row => row.T2.Salary1)).Select(group => new { group.First().T1.Name, group.Key.TeamId }).Take(1).ToList();","db_name":"baseball_1"},{"query":"SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1961","result":"context.Players.SelectMany(s => context.PlayerAwards, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 1960).Select(row => new { row.T1.NameFirst, row.T1.NameLast }).Intersect(context.Players.SelectMany(s => context.PlayerAwards, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 1961).Select(row => new { row.T1.NameFirst, row.T1.NameLast })).ToList();","db_name":"baseball_1"},{"query":"SELECT name_first , name_last FROM player WHERE weight > 220 OR height < 75","result":"context.Players.Where(row => row.Weight > 220 || row.Height < 75).Select(row => new { row.NameFirst, row.NameLast }).ToList();","db_name":"baseball_1"},{"query":"SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings';","result":"context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\").Select(row => row.T1.Wins).Max();","db_name":"baseball_1"},{"query":"SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2009;","result":"context.Postseasons.Join(context.Teams, T1 => T1.TeamIdLoser, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\" && row.T1.Year == 2009).Count();","db_name":"baseball_1"},{"query":"SELECT T2.name , T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;","result":"context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2008).GroupBy(row => new { row.T1.TeamIdWinner }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name, group.Key.TeamIdWinner }).Take(1).ToList();","db_name":"baseball_1"},{"query":"SELECT count(*) , T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year","result":"context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\").GroupBy(row => new { row.T1.Year }).Select(group => new { Count = group.Count(), group.Key.Year }).ToList();","db_name":"baseball_1"},{"query":"SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' );","result":"context.Postseasons.Join(context.Teams, T1 => T1.TeamIdWinner, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\").Union(context.Postseasons.Join(context.Teams, T1 => T1.TeamIdLoser, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\")).Count();","db_name":"baseball_1"},{"query":"SELECT count(*) FROM postseason WHERE YEAR = 1885 AND ties = 1;","result":"context.Postseasons.Where(row => row.Year == 1885 && row.Ties == 1).Count();","db_name":"baseball_1"},{"query":"SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2010","result":"context.Salaries.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\" && row.T1.Year == 2010).Select(row => row.T1.Salary1).Sum();","db_name":"baseball_1"},{"query":"SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2000","result":"context.Salaries.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\" && row.T1.Year == 2000).Count();","db_name":"baseball_1"},{"query":"SELECT salary FROM salary WHERE YEAR = 2001 ORDER BY salary DESC LIMIT 3;","result":"context.Salaries.Where(row => row.Year == 2001).OrderByDescending(row => row.Salary1).Select(row => new { row.Salary1 }).Take(3).ToList();","db_name":"baseball_1"},{"query":"SELECT salary FROM salary WHERE YEAR = 2010 UNION SELECT salary FROM salary WHERE YEAR = 2001","result":"context.Salaries.Where(row => row.Year == 2010).Select(row => row.Salary1).Union(context.Salaries.Where(row => row.Year == 2001).Select(row => row.Salary1)).ToList();","db_name":"baseball_1"},{"query":"SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;","result":"context.HallOfFames.GroupBy(row => new { row.Yearid }).OrderBy(group => group.Count()).Select(group => new { group.Key.Yearid }).Take(1).ToList();","db_name":"baseball_1"},{"query":"SELECT count(*) FROM park WHERE city = 'Atlanta';","result":"context.Parks.Where(row => row.City == \"Atlanta\").Count();","db_name":"baseball_1"},{"query":"SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';","result":"context.HomeGames.Join(context.Parks, T1 => T1.ParkId, T2 => T2.ParkId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 1907 && row.T2.ParkName == \"Columbia Park\").Count();","db_name":"baseball_1"},{"query":"SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2000 AND T2.city = 'Atlanta';","result":"context.HomeGames.Join(context.Parks, T1 => T1.ParkId, T2 => T2.ParkId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2000 && row.T2.City == \"Atlanta\").Count();","db_name":"baseball_1"},{"query":"SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;","result":"context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\" && row.T1.Year >= 2000 && row.T1.Year <= 2010).Select(row => row.T1.Attendance).Sum();","db_name":"baseball_1"},{"query":"SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = 'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;","result":"context.Salaries.Join(context.Players, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.NameFirst == \"Len\" && row.T2.NameLast == \"Barker\" && row.T1.Year >= 1985 && row.T1.Year <= 1990).Select(row => row.T1.Salary1).Sum();","db_name":"baseball_1"},{"query":"SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'","result":"context.Salaries.Join(context.Players, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Join(context.Teams, joined => joined.T1.TeamId, T3 => T3.TeamIdBr, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Year == 2005 && row.T3.Name == \"Washington Nationals\").Select(row => new { row.T2.NameFirst, row.T2.NameLast }).Intersect(context.Salaries.Join(context.Players, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Join(context.Teams, joined => joined.T1.TeamId, T3 => T3.TeamIdBr, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Year == 2007 && row.T3.Name == \"Washington Nationals\").Select(row => new { row.T2.NameFirst, row.T2.NameLast })).ToList();","db_name":"baseball_1"},{"query":"SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;","result":"context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\" && row.T1.Year >= 1990 && row.T1.Year <= 2000).Select(row => row.T1.Games).Sum();","db_name":"baseball_1"},{"query":"SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;","result":"context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 1980).OrderBy(row => row.T1.Attendance).Select(row => new { row.T2.Name }).Take(1).ToList();","db_name":"baseball_1"},{"query":"SELECT state FROM park GROUP BY state HAVING count(*) > 2;","result":"context.Parks.GroupBy(row => new { row.State }).Where(group => group.Count() > 2).Select(group => new { group.Key.State }).ToList();","db_name":"baseball_1"},{"query":"SELECT count(*) FROM team_franchise WHERE active = 'Y';","result":"context.TeamFranchises.Where(row => row.Active == \"Y\").Count();","db_name":"baseball_1"},{"query":"SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;","result":"context.Parks.GroupBy(row => new { row.City }).Where(group => group.Count() >= 2 && group.Count() <= 4).Select(group => new { group.Key.City }).ToList();","db_name":"baseball_1"},{"query":"SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;","result":"context.HomeGames.Join(context.Parks, T1 => T1.ParkId, T2 => T2.ParkId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2008).OrderByDescending(row => row.T1.Attendance).Select(row => new { row.T2.ParkName }).Take(1).ToList();","db_name":"baseball_1"},{"query":"SELECT count(*) FROM climber","result":"context.Climbers.Count();","db_name":"climbing"},{"query":"SELECT Name FROM climber ORDER BY Points DESC","result":"context.Climbers.OrderByDescending(row => row.Points).Select(row => new { row.Name }).ToList();","db_name":"climbing"},{"query":"SELECT Name FROM climber WHERE Country != \"Switzerland\"","result":"context.Climbers.Where(row => row.Country != \"Switzerland\").Select(row => new { row.Name }).ToList();","db_name":"climbing"},{"query":"SELECT max(Points) FROM climber WHERE Country = \"United Kingdom\"","result":"context.Climbers.Where(row => row.Country == \"United Kingdom\").Select(row => row.Points).Max();","db_name":"climbing"},{"query":"SELECT COUNT(DISTINCT Country) FROM climber","result":"context.Climbers.Select(row => row.Country).Distinct().Count();","db_name":"climbing"},{"query":"SELECT Name FROM mountain ORDER BY Name ASC","result":"context.Mountains.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();","db_name":"climbing"},{"query":"SELECT Country FROM mountain WHERE Height > 5000","result":"context.Mountains.Where(row => row.Height > 5000).Select(row => new { row.Country }).ToList();","db_name":"climbing"},{"query":"SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1","result":"context.Mountains.OrderByDescending(row => row.Height).Select(row => new { row.Name }).Take(1).ToList();","db_name":"climbing"},{"query":"SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3","result":"context.Mountains.OrderByDescending(row => row.Prominence).Select(row => new { row.Range }).Distinct().Take(3).ToList();","db_name":"climbing"},{"query":"SELECT T1.Name , T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID","result":"context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Select(row => new { T1Name = row.T1.Name, T2Name = row.T2.Name }).ToList();","db_name":"climbing"},{"query":"SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID","result":"context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name, row.T2.Height }).ToList();","db_name":"climbing"},{"query":"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1","result":"context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Points).Select(row => new { row.T2.Height }).Take(1).ToList();","db_name":"climbing"},{"query":"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = \"West Germany\"","result":"context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Country == \"West Germany\").Select(row => new { row.T2.Name }).Distinct().ToList();","db_name":"climbing"},{"query":"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = \"Uganda\"","result":"context.Climbers.Join(context.Mountains, T1 => T1.MountainId, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country == \"Uganda\").Select(row => new { row.T1.Time }).ToList();","db_name":"climbing"},{"query":"SELECT Country , COUNT(*) FROM climber GROUP BY Country","result":"context.Climbers.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();","db_name":"climbing"},{"query":"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1","result":"context.Mountains.GroupBy(row => new { row.Country }).Where(group => group.Count() > 1).Select(group => new { group.Key.Country }).ToList();","db_name":"climbing"},{"query":"SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)","result":"context.Mountains.Where(row => !context.Climbers.Select(row => row.MountainId).Contains(row.MountainId)).Select(row => new { row.Name }).ToList();","db_name":"climbing"},{"query":"SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200","result":"context.Mountains.Where(row => row.Height > 5600).Select(row => row.Country).Intersect(context.Mountains.Where(row => row.Height < 5200).Select(row => row.Country)).ToList();","db_name":"climbing"},{"query":"SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1","result":"context.Mountains.GroupBy(row => new { row.Range }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Range }).Take(1).ToList();","db_name":"climbing"},{"query":"SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000","result":"context.Mountains.Where(row => row.Height > 5000 || row.Prominence > 1000).Select(row => new { row.Name }).ToList();","db_name":"climbing"},{"query":"SELECT customer_name FROM customers","result":"context.Customers.Select(row => new { row.CustomerName }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT count(*) FROM customers","result":"context.Customers.Count();","db_name":"customers_and_addresses"},{"query":"SELECT avg(order_quantity) FROM order_items","result":"context.OrderItems.Select(row => row.OrderQuantity).Average();","db_name":"customers_and_addresses"},{"query":"SELECT customer_name FROM customers WHERE payment_method = \"Cash\"","result":"context.Customers.Where(row => row.PaymentMethod == \"Cash\").Select(row => new { row.CustomerName }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20","result":"context.Customers.Where(row => row.CustomerId >= 10 && row.CustomerId <= 20).Select(row => new { row.DateBecameCustomer }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1","result":"context.Customers.GroupBy(row => new { row.PaymentMethod }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PaymentMethod }).Take(1).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT customer_name FROM customers WHERE payment_method = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)","result":"context.Customers.Where(row => row.PaymentMethod == context.Customers.GroupBy(row => new { row.PaymentMethod }).OrderByDescending(group => group.Count()).Select(group => group.Key.PaymentMethod).Take(1).First()).Select(row => new { row.CustomerName }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT DISTINCT payment_method FROM customers","result":"context.Customers.Select(row => new { row.PaymentMethod }).Distinct().ToList();","db_name":"customers_and_addresses"},{"query":"SELECT DISTINCT product_details FROM products","result":"context.Products.Select(row => new { row.ProductDetails }).Distinct().ToList();","db_name":"customers_and_addresses"},{"query":"SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"","result":"context.Customers.Where(row => EF.Functions.Like(row.CustomerName, \"%Alex%\")).Select(row => new { row.CustomerName }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"","result":"context.Products.Where(row => EF.Functions.Like(row.ProductDetails, \"%Latte%\") || EF.Functions.Like(row.ProductDetails, \"%Americano%\")).Select(row => new { row.ProductDetails }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.customer_name = \"Maudie Kertzmann\"","result":"context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.CustomerName == \"Maudie Kertzmann\").Select(row => new { row.t3.AddressContent }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = \"Lake Geovannyton\"","result":"context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.City == \"Lake Geovannyton\").Count();","db_name":"customers_and_addresses"},{"query":"SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = \"Colorado\"","result":"context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.StateProvinceCounty == \"Colorado\").Select(row => new { row.t1.CustomerName }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id)","result":"context.Addresses.Where(row => !context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Select(row => row.t3.City).Distinct().Contains(row.City)).Select(row => new { row.City }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1","result":"context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Addresses, joined => joined.t2.AddressId, t3 => t3.AddressId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.City }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.City }).Take(1).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT DISTINCT city FROM addresses","result":"context.Addresses.Select(row => new { row.City }).Distinct().ToList();","db_name":"customers_and_addresses"},{"query":"SELECT city FROM addresses WHERE zip_postcode = 255","result":"context.Addresses.Where(row => row.ZipPostcode == \"255\").Select(row => new { row.City }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT state_province_county , country FROM addresses WHERE zip_postcode LIKE \"4%\"","result":"context.Addresses.Where(row => EF.Functions.Like(row.ZipPostcode, \"4%\")).Select(row => new { row.StateProvinceCounty, row.Country }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT country FROM addresses GROUP BY country HAVING count(address_id) > 4","result":"context.Addresses.GroupBy(row => new { row.Country }).Where(group => group.Count(row => row.AddressId != null) > 4).Select(group => new { group.Key.Country }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id) < 5","result":"context.CustomerContactChannels.GroupBy(row => new { row.ChannelCode }).Where(group => group.Count(row => row.CustomerId != null) < 5).Select(group => new { group.Key.ChannelCode }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\"","result":"context.Customers.Join(context.CustomerContactChannels, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.CustomerName == \"Tillman Ernser\").Select(row => new { row.t2.ChannelCode }).Distinct().ToList();","db_name":"customers_and_addresses"},{"query":"SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\"","result":"context.Customers.Join(context.CustomerContactChannels, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.CustomerName == \"Tillman Ernser\").Select(row => row.t2.ActiveToDate).Max();","db_name":"customers_and_addresses"},{"query":"SELECT t1.customer_name , t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email'","result":"context.Customers.Join(context.CustomerContactChannels, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.ChannelCode == \"Email\").Select(row => new { row.t1.CustomerName, row.t2.ActiveFromDate }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t3.order_quantity = ( SELECT max(order_quantity) FROM order_items)","result":"context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.OrderQuantity == context.OrderItems.Select(row => row.OrderQuantity).Max()).Select(row => new { row.t1.CustomerName }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT avg(order_quantity) FROM order_items","result":"context.OrderItems.Select(row => row.OrderQuantity).Average();","db_name":"customers_and_addresses"},{"query":"SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1","result":"context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.CustomerName }).OrderByDescending(group => group.Sum(row => row.t3.OrderQuantity)).Select(group => new { group.Key.CustomerName }).Take(1).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1","result":"context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t1.CustomerName }).OrderBy(group => group.Sum(row => row.t3.OrderQuantity)).Select(group => new { group.First().t1.PaymentMethod }).Take(1).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\"","result":"context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.CustomerName == \"Rodrick Heaney\").Select(row => row.t3.ProductId).Distinct().Count();","db_name":"customers_and_addresses"},{"query":"SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\"","result":"context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.CustomerName == \"Rodrick Heaney\").Select(row => row.t3.OrderQuantity).Sum();","db_name":"customers_and_addresses"},{"query":"SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status = \"Cancelled\"","result":"context.CustomerOrders.Where(row => row.OrderStatus == \"Cancelled\").Select(row => row.CustomerId).Distinct().Count();","db_name":"customers_and_addresses"},{"query":"SELECT count(*) FROM customer_orders WHERE order_details = \"Second time\"","result":"context.CustomerOrders.Where(row => row.OrderDetails == \"Second time\").Count();","db_name":"customers_and_addresses"},{"query":"SELECT t1.customer_name , t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\"","result":"context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.OrderStatus == \"Delivered\").Select(row => new { row.t1.CustomerName, row.t2.OrderDate }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_status = \"Cancelled\"","result":"context.CustomerOrders.Join(context.OrderItems, t1 => t1.OrderId, t2 => t2.OrderId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.OrderStatus == \"Cancelled\").Select(row => row.t2.OrderQuantity).Sum();","db_name":"customers_and_addresses"},{"query":"SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1","result":"context.OrderItems.Join(context.Products, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ProductId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t2.ProductDetails }).Take(1).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT t2.product_details , t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1","result":"context.OrderItems.Join(context.Products, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ProductId }).OrderBy(group => group.Sum(row => row.t1.OrderQuantity)).Select(group => new { group.First().t2.ProductDetails, group.Key.ProductId }).Take(1).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT address_content FROM addresses WHERE city = \"East Julianaside\" AND state_province_county = \"Texas\" UNION SELECT address_content FROM addresses WHERE city = \"Gleasonmouth\" AND state_province_county = \"Arizona\"","result":"context.Addresses.Where(row => row.City == \"East Julianaside\" && row.StateProvinceCounty == \"Texas\").Select(row => row.AddressContent).Union(context.Addresses.Where(row => row.City == \"Gleasonmouth\" && row.StateProvinceCounty == \"Arizona\").Select(row => row.AddressContent)).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT customer_name FROM customers WHERE payment_method != 'Cash'","result":"context.Customers.Where(row => row.PaymentMethod != \"Cash\").Select(row => new { row.CustomerName }).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte'","result":"context.Customers.Select(row => row.CustomerName).Except(context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Products, joined => joined.t3.ProductId, t4 => t4.ProductId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ProductDetails == \"Latte\").Select(row => row.t1.CustomerName)).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id","result":"context.Customers.Select(row => row.CustomerName).Except(context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Select(row => row.t1.CustomerName)).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Americano'","result":"context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Products, joined => joined.t3.ProductId, t4 => t4.ProductId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ProductDetails == \"Latte\").Select(row => row.t1.CustomerName).Intersect(context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Products, joined => joined.t3.ProductId, t4 => t4.ProductId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ProductDetails == \"Americano\").Select(row => row.t1.CustomerName)).ToList();","db_name":"customers_and_addresses"},{"query":"SELECT count(*) FROM book","result":"context.Books.Count();","db_name":"book_2"},{"query":"SELECT Writer FROM book ORDER BY Writer ASC","result":"context.Books.OrderBy(row => row.Writer).Select(row => new { row.Writer }).ToList();","db_name":"book_2"},{"query":"SELECT Title FROM book ORDER BY Issues ASC","result":"context.Books.OrderBy(row => row.Issues).Select(row => new { row.Title }).ToList();","db_name":"book_2"},{"query":"SELECT Title FROM book WHERE Writer != \"Elaine Lee\"","result":"context.Books.Where(row => row.Writer != \"Elaine Lee\").Select(row => new { row.Title }).ToList();","db_name":"book_2"},{"query":"SELECT Title , Issues FROM book","result":"context.Books.Select(row => new { row.Title, row.Issues }).ToList();","db_name":"book_2"},{"query":"SELECT Publication_Date FROM publication ORDER BY Price DESC","result":"context.Publications.OrderByDescending(row => row.Price).Select(row => new { row.PublicationDate }).ToList();","db_name":"book_2"},{"query":"SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000","result":"context.Publications.Where(row => row.Price > 5000000).Select(row => new { row.Publisher }).Distinct().ToList();","db_name":"book_2"},{"query":"SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1","result":"context.Publications.OrderByDescending(row => row.Price).Select(row => new { row.Publisher }).Take(1).ToList();","db_name":"book_2"},{"query":"SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3","result":"context.Publications.OrderBy(row => row.Price).Select(row => new { row.PublicationDate }).Take(3).ToList();","db_name":"book_2"},{"query":"SELECT T1.Title , T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID","result":"context.Books.Join(context.Publications, T1 => T1.BookId, T2 => T2.BookId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Title, row.T2.PublicationDate }).ToList();","db_name":"book_2"},{"query":"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000","result":"context.Books.Join(context.Publications, T1 => T1.BookId, T2 => T2.BookId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Price > 4000000).Select(row => new { row.T1.Writer }).ToList();","db_name":"book_2"},{"query":"SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC","result":"context.Books.Join(context.Publications, T1 => T1.BookId, T2 => T2.BookId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Price).Select(row => new { row.T1.Title }).ToList();","db_name":"book_2"},{"query":"SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1","result":"context.Publications.GroupBy(row => new { row.Publisher }).Where(group => group.Count() > 1).Select(group => new { group.Key.Publisher }).ToList();","db_name":"book_2"},{"query":"SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher","result":"context.Publications.GroupBy(row => new { row.Publisher }).Select(group => new { group.Key.Publisher, Count = group.Count() }).ToList();","db_name":"book_2"},{"query":"SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1","result":"context.Publications.GroupBy(row => new { row.PublicationDate }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PublicationDate }).Take(1).ToList();","db_name":"book_2"},{"query":"SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1","result":"context.Books.GroupBy(row => new { row.Writer }).Where(group => group.Count() > 1).Select(group => new { group.Key.Writer }).ToList();","db_name":"book_2"},{"query":"SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)","result":"context.Books.Where(row => !context.Publications.Select(row => row.BookId).Contains(row.BookId)).Select(row => new { row.Title }).ToList();","db_name":"book_2"},{"query":"SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000","result":"context.Publications.Where(row => row.Price > 10000000).Select(row => row.Publisher).Intersect(context.Publications.Where(row => row.Price < 5000000).Select(row => row.Publisher)).ToList();","db_name":"book_2"},{"query":"SELECT COUNT (DISTINCT Publication_Date) FROM publication","result":"context.Publications.Select(row => row.PublicationDate).Distinct().Count();","db_name":"book_2"},{"query":"SELECT Price FROM publication WHERE Publisher = \"Person\" OR Publisher = \"Wiley\"","result":"context.Publications.Where(row => row.Publisher == \"Person\" || row.Publisher == \"Wiley\").Select(row => new { row.Price }).ToList();","db_name":"book_2"},{"query":"SELECT count(*) FROM Faculty","result":"context.Faculties.Count();","db_name":"activity_1"},{"query":"SELECT DISTINCT rank FROM Faculty","result":"context.Faculties.Select(row => new { row.Rank }).Distinct().ToList();","db_name":"activity_1"},{"query":"SELECT DISTINCT building FROM Faculty","result":"context.Faculties.Select(row => new { row.Building }).Distinct().ToList();","db_name":"activity_1"},{"query":"SELECT rank , Fname , Lname FROM Faculty","result":"context.Faculties.Select(row => new { row.Rank, row.Fname, row.Lname }).ToList();","db_name":"activity_1"},{"query":"SELECT Fname , Lname , phone FROM Faculty WHERE Sex = 'F'","result":"context.Faculties.Where(row => row.Sex == \"F\").Select(row => new { row.Fname, row.Lname, row.Phone }).ToList();","db_name":"activity_1"},{"query":"SELECT FacID FROM Faculty WHERE Sex = 'M'","result":"context.Faculties.Where(row => row.Sex == \"M\").Select(row => new { row.FacId }).ToList();","db_name":"activity_1"},{"query":"SELECT count(*) FROM Faculty WHERE Sex = 'F' AND Rank = \"Professor\"","result":"context.Faculties.Where(row => row.Sex == \"F\" && row.Rank == \"Professor\").Count();","db_name":"activity_1"},{"query":"SELECT phone , room , building FROM Faculty WHERE Fname = \"Jerry\" AND Lname = \"Prince\"","result":"context.Faculties.Where(row => row.Fname == \"Jerry\" && row.Lname == \"Prince\").Select(row => new { row.Phone, row.Room, row.Building }).ToList();","db_name":"activity_1"},{"query":"SELECT count(*) FROM Faculty WHERE Rank = \"Professor\" AND building = \"NEB\"","result":"context.Faculties.Where(row => row.Rank == \"Professor\" && row.Building == \"NEB\").Count();","db_name":"activity_1"},{"query":"SELECT fname , lname FROM Faculty WHERE Rank = \"Instructor\"","result":"context.Faculties.Where(row => row.Rank == \"Instructor\").Select(row => new { row.Fname, row.Lname }).ToList();","db_name":"activity_1"},{"query":"SELECT building , count(*) FROM Faculty GROUP BY building","result":"context.Faculties.GroupBy(row => new { row.Building }).Select(group => new { group.Key.Building, Count = group.Count() }).ToList();","db_name":"activity_1"},{"query":"SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1","result":"context.Faculties.GroupBy(row => new { row.Building }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Building }).Take(1).ToList();","db_name":"activity_1"},{"query":"SELECT building FROM Faculty WHERE rank = \"Professor\" GROUP BY building HAVING count(*) >= 10","result":"context.Faculties.Where(row => row.Rank == \"Professor\").GroupBy(row => new { row.Building }).Where(group => group.Count() >= 10).Select(group => new { group.Key.Building }).ToList();","db_name":"activity_1"},{"query":"SELECT rank , count(*) FROM Faculty GROUP BY rank","result":"context.Faculties.GroupBy(row => new { row.Rank }).Select(group => new { group.Key.Rank, Count = group.Count() }).ToList();","db_name":"activity_1"},{"query":"SELECT rank , sex , count(*) FROM Faculty GROUP BY rank , sex","result":"context.Faculties.GroupBy(row => new { row.Rank, row.Sex }).Select(group => new { group.Key.Rank, group.Key.Sex, Count = group.Count() }).ToList();","db_name":"activity_1"},{"query":"SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1","result":"context.Faculties.GroupBy(row => new { row.Rank }).OrderBy(group => group.Count()).Select(group => new { group.Key.Rank }).Take(1).ToList();","db_name":"activity_1"},{"query":"SELECT sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex","result":"context.Faculties.Where(row => row.Rank == \"AsstProf\").GroupBy(row => new { row.Sex }).Select(group => new { group.Key.Sex, Count = group.Count() }).ToList();","db_name":"activity_1"},{"query":"SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T2.fname = \"Linda\" AND T2.lname = \"Smith\"","result":"context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Fname == \"Linda\" && row.T2.Lname == \"Smith\").Select(row => new { row.T1.Fname, row.T1.Lname }).ToList();","db_name":"activity_1"},{"query":"SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.rank = \"Professor\"","result":"context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Rank == \"Professor\").Select(row => new { row.T2.StuId }).ToList();","db_name":"activity_1"},{"query":"SELECT T2.fname , T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.fname = \"Michael\" AND T1.lname = \"Goodrich\"","result":"context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Fname == \"Michael\" && row.T1.Lname == \"Goodrich\").Select(row => new { row.T2.Fname, row.T2.Lname }).ToList();","db_name":"activity_1"},{"query":"SELECT T1.FacID , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID","result":"context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).Select(group => new { group.Key.FacId, Count = group.Count() }).ToList();","db_name":"activity_1"},{"query":"SELECT T1.rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank","result":"context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Rank }).Select(group => new { group.Key.Rank, Count = group.Count() }).ToList();","db_name":"activity_1"},{"query":"SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1","result":"context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Fname, group.First().T1.Lname }).Take(1).ToList();","db_name":"activity_1"},{"query":"SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID HAVING count(*) >= 2","result":"context.Faculties.Join(context.Students, T1 => T1.FacId, T2 => T2.Advisor, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.FacId }).ToList();","db_name":"activity_1"},{"query":"SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student","result":"context.Faculties.Select(row => row.FacId).Except(context.Students.Select(row => row.Advisor)).ToList();","db_name":"activity_1"},{"query":"SELECT activity_name FROM Activity","result":"context.Activities.Select(row => new { row.ActivityName }).ToList();","db_name":"activity_1"},{"query":"SELECT count(*) FROM Activity","result":"context.Activities.Count();","db_name":"activity_1"},{"query":"SELECT count(DISTINCT FacID) FROM Faculty_participates_in","result":"context.FacultyParticipatesIns.Select(row => row.FacId).Distinct().Count();","db_name":"activity_1"},{"query":"SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in","result":"context.Faculties.Select(row => row.FacId).Except(context.FacultyParticipatesIns.Select(row => row.FacId)).ToList();","db_name":"activity_1"},{"query":"SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student","result":"context.FacultyParticipatesIns.Select(row => row.FacId).Intersect(context.Students.Select(row => row.Advisor)).ToList();","db_name":"activity_1"},{"query":"SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID WHERE T1.fname = \"Mark\" AND T1.lname = \"Giuliano\"","result":"context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Fname == \"Mark\" && row.T1.Lname == \"Giuliano\").Count();","db_name":"activity_1"},{"query":"SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = \"Mark\" AND T1.lname = \"Giuliano\"","result":"context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Join(context.Activities, joined => joined.T2.Actid, T3 => T3.Actid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Fname == \"Mark\" && row.T1.Lname == \"Giuliano\").Select(row => new { row.T3.ActivityName }).ToList();","db_name":"activity_1"},{"query":"SELECT T1.fname , T1.lname , count(*) , T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID","result":"context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).Select(group => new { group.First().T1.Fname, group.First().T1.Lname, Count = group.Count(), group.Key.FacId }).ToList();","db_name":"activity_1"},{"query":"SELECT T1.activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID","result":"context.Activities.Join(context.FacultyParticipatesIns, T1 => T1.Actid, T2 => T2.Actid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Actid }).Select(group => new { group.First().T1.ActivityName, Count = group.Count() }).ToList();","db_name":"activity_1"},{"query":"SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1","result":"context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Fname, group.First().T1.Lname }).Take(1).ToList();","db_name":"activity_1"},{"query":"SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1","result":"context.Activities.Join(context.FacultyParticipatesIns, T1 => T1.Actid, T2 => T2.Actid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Actid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.ActivityName }).Take(1).ToList();","db_name":"activity_1"},{"query":"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in","result":"context.Students.Select(row => row.StuId).Except(context.ParticipatesIns.Select(row => row.Stuid)).ToList();","db_name":"activity_1"},{"query":"SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age < 20","result":"context.ParticipatesIns.Select(row => row.Stuid).Intersect(context.Students.Where(row => row.Age < 20).Select(row => row.StuId)).ToList();","db_name":"activity_1"},{"query":"SELECT T1.fname , T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1","result":"context.Students.Join(context.ParticipatesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StuId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Fname, group.First().T1.Lname }).Take(1).ToList();","db_name":"activity_1"},{"query":"SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1","result":"context.Activities.Join(context.ParticipatesIns, T1 => T1.Actid, T2 => T2.Actid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Actid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.ActivityName }).Take(1).ToList();","db_name":"activity_1"},{"query":"SELECT count(*) FROM Apartment_Bookings","result":"context.ApartmentBookings.Count();","db_name":"apartment_rentals"},{"query":"SELECT booking_start_date , booking_end_date FROM Apartment_Bookings","result":"context.ApartmentBookings.Select(row => new { row.BookingStartDate, row.BookingEndDate }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT DISTINCT building_description FROM Apartment_Buildings","result":"context.ApartmentBuildings.Select(row => new { row.BuildingDescription }).Distinct().ToList();","db_name":"apartment_rentals"},{"query":"SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = \"Emma\"","result":"context.ApartmentBuildings.Where(row => row.BuildingManager == \"Emma\").Select(row => new { row.BuildingShortName }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT building_address , building_phone FROM Apartment_Buildings WHERE building_manager = \"Brenden\"","result":"context.ApartmentBuildings.Where(row => row.BuildingManager == \"Brenden\").Select(row => new { row.BuildingAddress, row.BuildingPhone }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"","result":"context.ApartmentBuildings.Where(row => EF.Functions.Like(row.BuildingFullName, \"%court%\")).Select(row => new { row.BuildingFullName }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT min(bathroom_count) , max(bathroom_count) FROM Apartments","result":"context.Apartments.GroupBy(row => 1).Select(group => new { MinBathroomCount = group.Select(row => row.BathroomCount).Min(), MaxBathroomCount = group.Select(row => row.BathroomCount).Max() }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT avg(bedroom_count) FROM Apartments","result":"context.Apartments.Select(row => row.BedroomCount).Average();","db_name":"apartment_rentals"},{"query":"SELECT apt_number , room_count FROM Apartments","result":"context.Apartments.Select(row => new { row.AptNumber, row.RoomCount }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT avg(room_count) FROM Apartments WHERE apt_type_code = \"Studio\"","result":"context.Apartments.Where(row => row.AptTypeCode == \"Studio\").Select(row => (double) row.RoomCount).Average();","db_name":"apartment_rentals"},{"query":"SELECT apt_number FROM Apartments WHERE apt_type_code = \"Flat\"","result":"context.Apartments.Where(row => row.AptTypeCode == \"Flat\").Select(row => new { row.AptNumber }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT guest_first_name , guest_last_name FROM Guests","result":"context.Guests.Select(row => new { row.GuestFirstName, row.GuestLastName }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT date_of_birth FROM Guests WHERE gender_code = \"Male\"","result":"context.Guests.Where(row => row.GenderCode == \"Male\").Select(row => new { row.DateOfBirth }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = \"Suite 634\"","result":"context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AptNumber == \"Suite 634\").Select(row => new { row.T1.BookingStatusCode }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\"","result":"context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Confirmed\").Select(row => new { row.T2.AptNumber }).Distinct().ToList();","db_name":"apartment_rentals"},{"query":"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\"","result":"context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Provisional\").Select(row => (double) row.T2.RoomCount).Average();","db_name":"apartment_rentals"},{"query":"SELECT T2.guest_first_name , T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T1.booking_status_code = \"Confirmed\"","result":"context.ApartmentBookings.Join(context.Guests, T1 => T1.GuestId, T2 => T2.GuestId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Confirmed\").Select(row => new { row.T2.GuestFirstName, row.T2.GuestLastName }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4","result":"context.ApartmentFacilities.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BedroomCount > 4).Select(row => new { row.T1.FacilityCode }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.facility_code = \"Gym\"","result":"context.ApartmentFacilities.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FacilityCode == \"Gym\").Select(row => row.T2.RoomCount).Sum();","db_name":"apartment_rentals"},{"query":"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = \"Columbus Square\"","result":"context.ApartmentBuildings.Join(context.Apartments, T1 => T1.BuildingId, T2 => T2.BuildingId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BuildingShortName == \"Columbus Square\").Select(row => row.T2.RoomCount).Sum();","db_name":"apartment_rentals"},{"query":"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2","result":"context.ApartmentBuildings.Join(context.Apartments, T1 => T1.BuildingId, T2 => T2.BuildingId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BathroomCount > 2).Select(row => new { row.T1.BuildingAddress }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT T2.apt_type_code , T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\"","result":"context.ApartmentBuildings.Join(context.Apartments, T1 => T1.BuildingId, T2 => T2.BuildingId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BuildingManager == \"Kyle\").Select(row => new { row.T2.AptTypeCode, row.T2.AptNumber }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code","result":"context.ApartmentBookings.GroupBy(row => new { row.BookingStatusCode }).Select(group => new { group.Key.BookingStatusCode, Count = group.Count() }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT apt_number FROM Apartments ORDER BY room_count ASC","result":"context.Apartments.OrderBy(row => row.RoomCount).Select(row => new { row.AptNumber }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1","result":"context.Apartments.OrderByDescending(row => row.BedroomCount).Select(row => new { row.AptNumber }).Take(1).ToList();","db_name":"apartment_rentals"},{"query":"SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC","result":"context.Apartments.GroupBy(row => new { row.AptTypeCode }).Select(group => new { group.Key.AptTypeCode, Count = group.Count() }).OrderBy(group => group.Count).ToList();","db_name":"apartment_rentals"},{"query":"SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3","result":"context.Apartments.GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Average(row => row.RoomCount)).Select(group => new { group.Key.AptTypeCode }).Take(3).ToList();","db_name":"apartment_rentals"},{"query":"SELECT apt_type_code , bathroom_count , bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1","result":"context.Apartments.GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Sum(row => row.RoomCount)).Select(group => new { group.Key.AptTypeCode, group.First().BathroomCount, group.First().BedroomCount }).Take(1).ToList();","db_name":"apartment_rentals"},{"query":"SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1","result":"context.Apartments.GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AptTypeCode }).Take(1).ToList();","db_name":"apartment_rentals"},{"query":"SELECT apt_type_code FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1","result":"context.Apartments.Where(row => row.BathroomCount > 1).GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AptTypeCode }).Take(1).ToList();","db_name":"apartment_rentals"},{"query":"SELECT apt_type_code , max(room_count) , min(room_count) FROM Apartments GROUP BY apt_type_code","result":"context.Apartments.GroupBy(row => new { row.AptTypeCode }).Select(group => new { group.Key.AptTypeCode, MaxRoomCount = group.Select(row => row.RoomCount).Max(), MinRoomCount = group.Select(row => row.RoomCount).Min() }).ToList();","db_name":"apartment_rentals"},{"query":"SELECT gender_code , COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC","result":"context.Guests.GroupBy(row => new { row.GenderCode }).Select(group => new { group.Key.GenderCode, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();","db_name":"apartment_rentals"},{"query":"SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)","result":"context.Apartments.Where(row => !context.ApartmentFacilities.Select(row => row.AptId).Contains(row.AptId)).Count();","db_name":"apartment_rentals"},{"query":"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\"","result":"context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Confirmed\").Select(row => row.T2.AptNumber).Intersect(context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Provisional\").Select(row => row.T2.AptNumber)).ToList();","db_name":"apartment_rentals"},{"query":"SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 1","result":"context.Apartments.Join(context.ViewUnitStatuses, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AvailableYn == false).Select(row => row.T1.AptNumber).Intersect(context.Apartments.Join(context.ViewUnitStatuses, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AvailableYn == true).Select(row => row.T1.AptNumber)).ToList();","db_name":"apartment_rentals"},{"query":"SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = \"Accounting\"","result":"context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DeptName == \"Accounting\").Count();","db_name":"college_1"},{"query":"SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE = \"ACCT-211\"","result":"context.Classes.Where(row => row.CrsCode == \"ACCT-211\").Select(row => row.ProfNum).Distinct().Count();","db_name":"college_1"},{"query":"SELECT T3.EMP_FNAME , T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE DEPT_NAME = \"Biology\"","result":"context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Join(context.Employees, joined => joined.T1.EmpNum, T3 => T3.EmpNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.DeptName == \"Biology\").Select(row => new { row.T3.EmpFname, row.T3.EmpLname }).ToList();","db_name":"college_1"},{"query":"SELECT DISTINCT T1.EMP_FNAME , T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"","result":"context.Employees.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CrsCode == \"ACCT-211\").Select(row => new { row.T1.EmpFname, row.T1.EmpDob }).Distinct().ToList();","db_name":"college_1"},{"query":"SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'","result":"context.Employees.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Where(row => row.T1.EmpLname == \"Graztevski\").Count();","db_name":"college_1"},{"query":"SELECT school_code FROM department WHERE dept_name = \"Accounting\"","result":"context.Departments.Where(row => row.DeptName == \"Accounting\").Select(row => new { row.SchoolCode }).ToList();","db_name":"college_1"},{"query":"SELECT crs_credit , crs_description FROM course WHERE crs_code = 'CIS-220'","result":"context.Courses.Where(row => row.CrsCode == \"CIS-220\").Select(row => new { row.CrsCredit, row.CrsDescription }).ToList();","db_name":"college_1"},{"query":"SELECT dept_address FROM department WHERE dept_name = 'History'","result":"context.Departments.Where(row => row.DeptName == \"History\").Select(row => new { row.DeptAddress }).ToList();","db_name":"college_1"},{"query":"SELECT count(DISTINCT dept_address) FROM department WHERE school_code = 'BUS'","result":"context.Departments.Where(row => row.SchoolCode == \"BUS\").Select(row => row.DeptAddress).Distinct().Count();","db_name":"college_1"},{"query":"SELECT count(DISTINCT dept_address) , school_code FROM department GROUP BY school_code","result":"context.Departments.GroupBy(row => new { row.SchoolCode }).Select(group => new { CountDistinctDeptAddress = group.Select(row => row.DeptAddress).Distinct().Count(), group.Key.SchoolCode }).ToList();","db_name":"college_1"},{"query":"SELECT crs_credit , crs_description FROM course WHERE crs_code = 'QM-261'","result":"context.Courses.Where(row => row.CrsCode == \"QM-261\").Select(row => new { row.CrsCredit, row.CrsDescription }).ToList();","db_name":"college_1"},{"query":"SELECT count(DISTINCT dept_name) , school_code FROM department GROUP BY school_code","result":"context.Departments.GroupBy(row => new { row.SchoolCode }).Select(group => new { CountDistinctDeptName = group.Select(row => row.DeptName).Distinct().Count(), group.Key.SchoolCode }).ToList();","db_name":"college_1"},{"query":"SELECT count(DISTINCT dept_name) , school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name) < 5","result":"context.Departments.GroupBy(row => new { row.SchoolCode }).Select(group => new { CountDistinctDeptName = group.Select(row => row.DeptName).Distinct().Count(), group.Key.SchoolCode }).Where(group => group.CountDistinctDeptName < 5).ToList();","db_name":"college_1"},{"query":"SELECT count(*) , crs_code FROM CLASS GROUP BY crs_code","result":"context.Classes.GroupBy(row => new { row.CrsCode }).Select(group => new { Count = group.Count(), group.Key.CrsCode }).ToList();","db_name":"college_1"},{"query":"SELECT sum(crs_credit) , dept_code FROM course GROUP BY dept_code","result":"context.Courses.GroupBy(row => new { row.DeptCode }).Select(group => new { SumCrsCredit = group.Select(row => row.CrsCredit).Sum(), group.Key.DeptCode }).ToList();","db_name":"college_1"},{"query":"SELECT count(*) , class_room FROM CLASS GROUP BY class_room HAVING count(*) >= 2","result":"context.Classes.GroupBy(row => new { row.ClassRoom }).Select(group => new { Count = group.Count(), group.Key.ClassRoom }).Where(group => group.Count >= 2).ToList();","db_name":"college_1"},{"query":"SELECT count(*) , dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code","result":"context.Classes.Join(context.Courses, T1 => T1.CrsCode, T2 => T2.CrsCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DeptCode }).Select(group => new { Count = group.Count(), group.Key.DeptCode }).ToList();","db_name":"college_1"},{"query":"SELECT count(*) , T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code GROUP BY T3.school_code","result":"context.Classes.Join(context.Courses, T1 => T1.CrsCode, T2 => T2.CrsCode, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.SchoolCode }).Select(group => new { Count = group.Count(), group.Key.SchoolCode }).ToList();","db_name":"college_1"},{"query":"SELECT count(*) , T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code","result":"context.Departments.Join(context.Professors, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SchoolCode }).Select(group => new { Count = group.Count(), group.Key.SchoolCode }).ToList();","db_name":"college_1"},{"query":"SELECT emp_jobcode , count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1","result":"context.Employees.GroupBy(row => new { row.EmpJobcode }).Select(group => new { group.Key.EmpJobcode, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();","db_name":"college_1"},{"query":"SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1","result":"context.Departments.Join(context.Professors, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SchoolCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.SchoolCode }).Take(1).ToList();","db_name":"college_1"},{"query":"SELECT count(*) , dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code","result":"context.Professors.Where(row => row.ProfHighDegree == \"Ph.D.\").GroupBy(row => new { row.DeptCode }).Select(group => new { Count = group.Count(), group.Key.DeptCode }).ToList();","db_name":"college_1"},{"query":"SELECT count(*) , dept_code FROM student GROUP BY dept_code","result":"context.Students.GroupBy(row => new { row.DeptCode }).Select(group => new { Count = group.Count(), group.Key.DeptCode }).ToList();","db_name":"college_1"},{"query":"SELECT sum(stu_hrs) , dept_code FROM student GROUP BY dept_code","result":"context.Students.GroupBy(row => new { row.DeptCode }).Select(group => new { SumStuHrs = group.Select(row => row.StuHrs).Sum(), group.Key.DeptCode }).ToList();","db_name":"college_1"},{"query":"SELECT max(stu_gpa) , avg(stu_gpa) , min(stu_gpa) , dept_code FROM student GROUP BY dept_code","result":"context.Students.GroupBy(row => new { row.DeptCode }).Select(group => new { MaxStuGpa = group.Select(row => row.StuGpa).Max(), AverageStuGpa = group.Select(row => row.StuGpa).Average(), MinStuGpa = group.Select(row => row.StuGpa).Min(), group.Key.DeptCode }).ToList();","db_name":"college_1"},{"query":"SELECT T2.dept_name , avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1","result":"context.Students.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).Select(group => new { group.First().T2.DeptName, AverageStuGpa = group.Select(row => row.T1.StuGpa).Average() }).OrderByDescending(group => group.AverageStuGpa).Take(1).ToList();","db_name":"college_1"},{"query":"SELECT count(DISTINCT school_code) FROM department","result":"context.Departments.Select(row => row.SchoolCode).Distinct().Count();","db_name":"college_1"},{"query":"SELECT count(DISTINCT class_code) FROM CLASS","result":"context.Classes.Select(row => row.ClassCode).Distinct().Count();","db_name":"college_1"},{"query":"SELECT count(DISTINCT crs_code) FROM CLASS","result":"context.Classes.Select(row => row.CrsCode).Distinct().Count();","db_name":"college_1"},{"query":"SELECT count(DISTINCT dept_name) FROM department","result":"context.Departments.Select(row => row.DeptName).Distinct().Count();","db_name":"college_1"},{"query":"SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = \"Computer Info. Systems\"","result":"context.Departments.Join(context.Courses, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DeptName == \"Computer Info. Systems\").Count();","db_name":"college_1"},{"query":"SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code = 'ACCT-211'","result":"context.Classes.Where(row => row.CrsCode == \"ACCT-211\").Select(row => row.ClassSection).Distinct().Count();","db_name":"college_1"},{"query":"SELECT sum(T1.crs_credit) , T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code","result":"context.Courses.Join(context.Classes, T1 => T1.CrsCode, T2 => T2.CrsCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).Select(group => new { SumCrsCredit = group.Select(row => row.T1.CrsCredit).Sum(), group.Key.DeptCode }).ToList();","db_name":"college_1"},{"query":"SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1","result":"context.Courses.Join(context.Classes, T1 => T1.CrsCode, T2 => T2.CrsCode, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T1.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.DeptCode }).OrderByDescending(group => group.Sum(row => row.T1.CrsCredit)).Select(group => new { group.First().T3.DeptName }).Take(1).ToList();","db_name":"college_1"},{"query":"SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'","result":"context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CrsCode == \"ACCT-211\").Count();","db_name":"college_1"},{"query":"SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211'","result":"context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuNum, T3 => T3.StuNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.CrsCode == \"ACCT-211\").Select(row => new { row.T3.StuFname }).ToList();","db_name":"college_1"},{"query":"SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'","result":"context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuNum, T3 => T3.StuNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.CrsCode == \"ACCT-211\" && row.T2.EnrollGrade == \"C\").Select(row => new { row.T3.StuFname }).ToList();","db_name":"college_1"},{"query":"SELECT count(*) FROM employee","result":"context.Employees.Count();","db_name":"college_1"},{"query":"SELECT count(*) FROM professor WHERE prof_high_degree = 'Ph.D.'","result":"context.Professors.Where(row => row.ProfHighDegree == \"Ph.D.\").Count();","db_name":"college_1"},{"query":"SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting'","result":"context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Departments, joined => joined.T3.DeptCode, T4 => T4.DeptCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.DeptName == \"Accounting\").Count();","db_name":"college_1"},{"query":"SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1","result":"context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Departments, joined => joined.T3.DeptCode, T4 => T4.DeptCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).GroupBy(row => new { row.T3.DeptCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T4.DeptName }).Take(1).ToList();","db_name":"college_1"},{"query":"SELECT dept_name FROM department ORDER BY dept_name","result":"context.Departments.OrderBy(row => row.DeptName).Select(row => new { row.DeptName }).ToList();","db_name":"college_1"},{"query":"SELECT class_code FROM CLASS WHERE class_room = 'KLR209'","result":"context.Classes.Where(row => row.ClassRoom == \"KLR209\").Select(row => new { row.ClassCode }).ToList();","db_name":"college_1"},{"query":"SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob","result":"context.Employees.Where(row => row.EmpJobcode == \"PROF\").OrderBy(row => row.EmpDob).Select(row => new { row.EmpFname }).ToList();","db_name":"college_1"},{"query":"SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num ORDER BY T2.emp_fname","result":"context.Professors.Join(context.Employees, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.EmpFname).Select(row => new { row.T2.EmpFname, row.T1.ProfOffice }).ToList();","db_name":"college_1"},{"query":"SELECT emp_fname , emp_lname FROM employee ORDER BY emp_dob LIMIT 1","result":"context.Employees.OrderBy(row => row.EmpDob).Select(row => new { row.EmpFname, row.EmpLname }).Take(1).ToList();","db_name":"college_1"},{"query":"SELECT stu_fname , stu_lname , stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1","result":"context.Students.Where(row => row.StuGpa > 3).OrderByDescending(row => row.StuDob).Select(row => new { row.StuFname, row.StuLname, row.StuGpa }).Take(1).ToList();","db_name":"college_1"},{"query":"SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll_grade = 'C'","result":"context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EnrollGrade == \"C\").Select(row => new { row.T1.StuFname }).Distinct().ToList();","db_name":"college_1"},{"query":"SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1","result":"context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).OrderBy(group => group.Count()).Select(group => new { group.First().T2.DeptName }).Take(1).ToList();","db_name":"college_1"},{"query":"SELECT T2.dept_name , T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1","result":"context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ProfHighDegree == \"Ph.D.\").GroupBy(row => new { row.T1.DeptCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.DeptName, group.Key.DeptCode }).Take(1).ToList();","db_name":"college_1"},{"query":"SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num","result":"context.Employees.Where(row => row.EmpJobcode == \"PROF\").Select(row => row.EmpFname).Except(context.Employees.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Select(row => row.T1.EmpFname)).ToList();","db_name":"college_1"},{"query":"SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num","result":"context.Employees.Join(context.Professors, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\").Select(row => row.T1.EmpFname).Except(context.Employees.Join(context.Classes, T4 => T4.EmpNum, T5 => T5.ProfNum, (T4, T5) => new { T4, T5 }).Select(row => row.T4.EmpFname)).ToList();","db_name":"college_1"},{"query":"SELECT T1.emp_lname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History'","result":"context.Employees.Join(context.Professors, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\").Select(row => new { row.T1.EmpLname, row.T2.ProfOffice }).ToList();","db_name":"college_1"},{"query":"SELECT T3.dept_name , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'","result":"context.Employees.Join(context.Professors, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.EmpLname == \"Heffington\").Select(row => new { row.T3.DeptName, row.T2.ProfOffice }).ToList();","db_name":"college_1"},{"query":"SELECT T1.emp_lname , T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'","result":"context.Employees.Join(context.Professors, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ProfOffice == \"DRE 102\").Select(row => new { row.T1.EmpLname, row.T1.EmpHiredate }).ToList();","db_name":"college_1"},{"query":"SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'","result":"context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuNum, T3 => T3.StuNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.StuLname == \"Smithson\").Select(row => new { row.T1.CrsCode }).ToList();","db_name":"college_1"},{"query":"SELECT T4.crs_description , T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code WHERE T3.stu_lname = 'Smithson'","result":"context.Classes.Join(context.Enrolls, T1 => T1.ClassCode, T2 => T2.ClassCode, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuNum, T3 => T3.StuNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Courses, joined => joined.T1.CrsCode, T4 => T4.CrsCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T3.StuLname == \"Smithson\").Select(row => new { row.T4.CrsDescription, row.T4.CrsCredit }).ToList();","db_name":"college_1"},{"query":"SELECT count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'","result":"context.Professors.Where(row => row.ProfHighDegree == \"Ph.D.\" || row.ProfHighDegree == \"MA\").Count();","db_name":"college_1"},{"query":"SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting' OR T2.dept_name = 'Biology'","result":"context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DeptName == \"Accounting\" || row.T2.DeptName == \"Biology\").Count();","db_name":"college_1"},{"query":"SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'","result":"context.Employees.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CrsCode == \"CIS-220\").Select(row => row.T1.EmpFname).Intersect(context.Employees.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CrsCode == \"QM-261\").Select(row => row.T1.EmpFname)).ToList();","db_name":"college_1"},{"query":"SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Computer Info. Systems'","result":"context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T2.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Courses, joined => joined.T3.CrsCode, T4 => T4.CrsCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Join(context.Departments, joined => joined.T4.DeptCode, T5 => T5.DeptCode, (joined, T5) => new { joined.T1, joined.T2, joined.T3, joined.T4, T5 }).Where(row => row.T5.DeptName == \"Accounting\").Select(row => row.T1.StuFname).Intersect(context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T2.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Courses, joined => joined.T3.CrsCode, T4 => T4.CrsCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Join(context.Departments, joined => joined.T4.DeptCode, T5 => T5.DeptCode, (joined, T5) => new { joined.T1, joined.T2, joined.T3, joined.T4, T5 }).Where(row => row.T5.DeptName == \"Computer Info. Systems\").Select(row => row.T1.StuFname)).ToList();","db_name":"college_1"},{"query":"SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211'","result":"context.Enrolls.Join(context.Students, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T1.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CrsCode == \"ACCT-211\").Select(row => (double) row.T2.StuGpa).Average();","db_name":"college_1"},{"query":"SELECT stu_gpa , stu_phone , stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5","result":"context.Students.OrderByDescending(row => row.StuGpa).Select(row => new { row.StuGpa, row.StuPhone, row.StuFname }).Take(5).ToList();","db_name":"college_1"},{"query":"SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY stu_gpa LIMIT 1","result":"context.Students.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T1.StuGpa).Select(row => new { row.T2.DeptName }).Take(1).ToList();","db_name":"college_1"},{"query":"SELECT stu_fname , stu_gpa FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student)","result":"context.Students.Where(row => row.StuGpa < context.Students.Select(row => (double) row.StuGpa).Average()).Select(row => new { row.StuFname, row.StuGpa }).ToList();","db_name":"college_1"},{"query":"SELECT T2.dept_name , T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1","result":"context.Students.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.DeptName, group.First().T2.DeptAddress }).Take(1).ToList();","db_name":"college_1"},{"query":"SELECT T2.dept_name , T2.dept_address , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3","result":"context.Students.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).Select(group => new { group.First().T2.DeptName, group.First().T2.DeptAddress, Count = group.Count() }).OrderByDescending(group => group.Count).Take(3).ToList();","db_name":"college_1"},{"query":"SELECT T1.emp_fname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T3.dept_code = T2.dept_code WHERE T3.dept_name = 'History' AND T2.prof_high_degree = 'Ph.D.'","result":"context.Employees.Join(context.Professors, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\" && row.T2.ProfHighDegree == \"Ph.D.\").Select(row => new { row.T1.EmpFname, row.T2.ProfOffice }).ToList();","db_name":"college_1"},{"query":"SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num","result":"context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.EmpFname, row.T1.CrsCode }).ToList();","db_name":"college_1"},{"query":"SELECT T2.emp_fname , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code","result":"context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.EmpFname, row.T3.CrsDescription }).ToList();","db_name":"college_1"},{"query":"SELECT T2.emp_fname , T4.prof_office , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num","result":"context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Professors, joined => joined.T2.EmpNum, T4 => T4.EmpNum, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Select(row => new { row.T2.EmpFname, row.T4.ProfOffice, row.T3.CrsDescription }).ToList();","db_name":"college_1"},{"query":"SELECT T2.emp_fname , T4.prof_office , T3.crs_description , T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num JOIN department AS T5 ON T4.dept_code = T5.dept_code","result":"context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Professors, joined => joined.T2.EmpNum, T4 => T4.EmpNum, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Join(context.Departments, joined => joined.T4.DeptCode, T5 => T5.DeptCode, (joined, T5) => new { joined.T1, joined.T2, joined.T3, joined.T4, T5 }).Select(row => new { row.T2.EmpFname, row.T4.ProfOffice, row.T3.CrsDescription, row.T5.DeptName }).ToList();","db_name":"college_1"},{"query":"SELECT T1.stu_fname , T1.stu_lname , T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code","result":"context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T2.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Courses, joined => joined.T3.CrsCode, T4 => T4.CrsCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Select(row => new { row.T1.StuFname, row.T1.StuLname, row.T4.CrsDescription }).ToList();","db_name":"college_1"},{"query":"SELECT T1.stu_fname , T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'","result":"context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EnrollGrade == \"C\" || row.T2.EnrollGrade == \"A\").Select(row => new { row.T1.StuFname, row.T1.StuLname }).ToList();","db_name":"college_1"},{"query":"SELECT T2.emp_fname , T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Accounting'","result":"context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Professors, joined => joined.T2.EmpNum, T3 => T3.EmpNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Departments, joined => joined.T3.DeptCode, T4 => T4.DeptCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.DeptName == \"Accounting\").Select(row => new { row.T2.EmpFname, row.T1.ClassRoom }).ToList();","db_name":"college_1"},{"query":"SELECT DISTINCT T2.emp_fname , T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Computer Info. Systems'","result":"context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Professors, joined => joined.T2.EmpNum, T3 => T3.EmpNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Departments, joined => joined.T3.DeptCode, T4 => T4.DeptCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.DeptName == \"Computer Info. Systems\").Select(row => new { row.T2.EmpFname, row.T3.ProfHighDegree }).Distinct().ToList();","db_name":"college_1"},{"query":"SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A' AND T2.class_code = 10018","result":"context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EnrollGrade == \"A\" && row.T2.ClassCode == 10018).Select(row => new { row.T1.StuLname }).ToList();","db_name":"college_1"},{"query":"SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree != 'Ph.D.'","result":"context.Professors.Join(context.Employees, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T1.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\" && row.T1.ProfHighDegree != \"Ph.D.\").Select(row => new { row.T2.EmpFname, row.T1.ProfOffice }).ToList();","db_name":"college_1"},{"query":"SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING count(*) > 1","result":"context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProfNum }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.EmpFname }).ToList();","db_name":"college_1"},{"query":"SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num GROUP BY T2.stu_num HAVING count(*) = 1","result":"context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StuNum }).Where(group => group.Count() == 1).Select(group => new { group.First().T1.StuFname }).ToList();","db_name":"college_1"},{"query":"SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'","result":"context.Courses.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.CrsDescription, \"%Statistics%\")).Select(row => new { row.T2.DeptName }).ToList();","db_name":"college_1"},{"query":"SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%'","result":"context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T2.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CrsCode == \"ACCT-211\" && EF.Functions.Like(row.T1.StuLname, \"S%\")).Select(row => new { row.T1.StuFname }).ToList();","db_name":"college_1"},{"query":"SELECT count(*) FROM Companies","result":"context.Companies.Count();","db_name":"company_office"},{"query":"SELECT name FROM Companies ORDER BY Market_Value_billion DESC","result":"context.Companies.OrderByDescending(row => (double) row.MarketValueBillion).Select(row => new { row.Name }).ToList();","db_name":"company_office"},{"query":"SELECT name FROM Companies WHERE Headquarters != 'USA'","result":"context.Companies.Where(row => row.Headquarters != \"USA\").Select(row => new { row.Name }).ToList();","db_name":"company_office"},{"query":"SELECT name , Assets_billion FROM Companies ORDER BY name ASC","result":"context.Companies.OrderBy(row => row.Name).Select(row => new { row.Name, row.AssetsBillion }).ToList();","db_name":"company_office"},{"query":"SELECT avg(Profits_billion) FROM Companies","result":"context.Companies.Select(row => (double) row.ProfitsBillion).Average();","db_name":"company_office"},{"query":"SELECT max(Sales_billion) , min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"","result":"context.Companies.Where(row => row.Industry != \"Banking\").GroupBy(row => 1).Select(group => new { MaxSalesBillion = group.Select(row => row.SalesBillion).Max(), MinSalesBillion = group.Select(row => row.SalesBillion).Min() }).ToList();","db_name":"company_office"},{"query":"SELECT count(DISTINCT Industry) FROM Companies","result":"context.Companies.Select(row => row.Industry).Distinct().Count();","db_name":"company_office"},{"query":"SELECT name FROM buildings ORDER BY Height DESC","result":"context.Buildings.OrderByDescending(row => row.Height).Select(row => new { row.Name }).ToList();","db_name":"company_office"},{"query":"SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1","result":"context.Buildings.OrderByDescending(row => row.Height).Select(row => new { row.Stories }).Take(1).ToList();","db_name":"company_office"},{"query":"SELECT T3.name , T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id","result":"context.OfficeLocations.Join(context.Buildings, T1 => T1.BuildingId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Companies, joined => joined.T1.CompanyId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { T3Name = row.T3.Name, T2Name = row.T2.Name }).ToList();","db_name":"company_office"},{"query":"SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id HAVING COUNT(*) > 1","result":"context.OfficeLocations.Join(context.Buildings, T1 => T1.BuildingId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Companies, joined => joined.T1.CompanyId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.BuildingId }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.Name }).ToList();","db_name":"company_office"},{"query":"SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1","result":"context.OfficeLocations.Join(context.Buildings, T1 => T1.BuildingId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Companies, joined => joined.T1.CompanyId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.BuildingId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name }).Take(1).ToList();","db_name":"company_office"},{"query":"SELECT name FROM buildings WHERE Status = \"on-hold\" ORDER BY Stories ASC","result":"context.Buildings.Where(row => row.Status == \"on-hold\").OrderBy(row => row.Stories).Select(row => new { row.Name }).ToList();","db_name":"company_office"},{"query":"SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry","result":"context.Companies.GroupBy(row => new { row.Industry }).Select(group => new { group.Key.Industry, Count = group.Count() }).ToList();","db_name":"company_office"},{"query":"SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC","result":"context.Companies.GroupBy(row => new { row.Industry }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Industry }).ToList();","db_name":"company_office"},{"query":"SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1","result":"context.Companies.GroupBy(row => new { row.Industry }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Industry }).Take(1).ToList();","db_name":"company_office"},{"query":"SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)","result":"context.Buildings.Where(row => !context.OfficeLocations.Select(row => row.BuildingId).Contains(row.Id)).Select(row => new { row.Name }).ToList();","db_name":"company_office"},{"query":"SELECT Industry FROM Companies WHERE Headquarters = \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters = \"China\"","result":"context.Companies.Where(row => row.Headquarters == \"USA\").Select(row => row.Industry).Intersect(context.Companies.Where(row => row.Headquarters == \"China\").Select(row => row.Industry)).ToList();","db_name":"company_office"},{"query":"SELECT count(*) FROM Companies WHERE Industry = \"Banking\" OR Industry = \"Conglomerate\"","result":"context.Companies.Where(row => row.Industry == \"Banking\" || row.Industry == \"Conglomerate\").Count();","db_name":"company_office"},{"query":"SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*) > 2","result":"context.Companies.GroupBy(row => new { row.Headquarters }).Where(group => group.Count() > 2).Select(group => new { group.Key.Headquarters }).ToList();","db_name":"company_office"},{"query":"SELECT count(*) FROM member WHERE Membership_card = 'Black'","result":"context.Members.Where(row => row.MembershipCard == \"Black\").Count();","db_name":"coffee_shop"},{"query":"SELECT count(*) , address FROM member GROUP BY address","result":"context.Members.GroupBy(row => new { row.Address }).Select(group => new { Count = group.Count(), group.Key.Address }).ToList();","db_name":"coffee_shop"},{"query":"SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'","result":"context.Members.Where(row => row.Address == \"Harford\" || row.Address == \"Waterbury\").Select(row => new { row.Name }).ToList();","db_name":"coffee_shop"},{"query":"SELECT name , member_id FROM member WHERE Membership_card = 'Black' OR age < 30","result":"context.Members.Where(row => row.MembershipCard == \"Black\" || row.Age < 30).Select(row => new { row.Name, row.MemberId }).ToList();","db_name":"coffee_shop"},{"query":"SELECT Time_of_purchase , age , address FROM member ORDER BY Time_of_purchase","result":"context.Members.OrderBy(row => row.TimeOfPurchase).Select(row => new { row.TimeOfPurchase, row.Age, row.Address }).ToList();","db_name":"coffee_shop"},{"query":"SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*) > 5","result":"context.Members.GroupBy(row => new { row.MembershipCard }).Where(group => group.Count() > 5).Select(group => new { group.Key.MembershipCard }).ToList();","db_name":"coffee_shop"},{"query":"SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40","result":"context.Members.Where(row => row.Age < 30).Select(row => row.Address).Intersect(context.Members.Where(row => row.Age > 40).Select(row => row.Address)).ToList();","db_name":"coffee_shop"},{"query":"SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'","result":"context.Members.Where(row => row.Address == \"Hartford\").Select(row => row.MembershipCard).Intersect(context.Members.Where(row => row.Address == \"Waterbury\").Select(row => row.MembershipCard)).ToList();","db_name":"coffee_shop"},{"query":"SELECT count(*) FROM member WHERE address != 'Hartford'","result":"context.Members.Where(row => row.Address != \"Hartford\").Count();","db_name":"coffee_shop"},{"query":"SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card = 'Black'","result":"context.Members.Select(row => row.Address).Except(context.Members.Where(row => row.MembershipCard == \"Black\").Select(row => row.Address)).ToList();","db_name":"coffee_shop"},{"query":"SELECT address FROM shop ORDER BY open_year","result":"context.Shops.OrderBy(row => row.OpenYear).Select(row => new { row.Address }).ToList();","db_name":"coffee_shop"},{"query":"SELECT avg(num_of_staff) , avg(score) FROM shop","result":"context.Shops.GroupBy(row => 1).Select(group => new { AverageNumOfStaff = group.Select(row => row.NumOfStaff).Average(), AverageScore = group.Select(row => row.Score).Average() }).ToList();","db_name":"coffee_shop"},{"query":"SELECT shop_id , address FROM shop WHERE score < (SELECT avg(score) FROM shop)","result":"context.Shops.Where(row => row.Score < context.Shops.Select(row => (double) row.Score).Average()).Select(row => new { row.ShopId, row.Address }).ToList();","db_name":"coffee_shop"},{"query":"SELECT address , num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)","result":"context.Shops.Where(row => !context.HappyHours.Select(row => row.ShopId).Contains(row.ShopId)).Select(row => new { row.Address, row.NumOfStaff }).ToList();","db_name":"coffee_shop"},{"query":"SELECT t1.address , t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'","result":"context.Shops.Join(context.HappyHours, t1 => t1.ShopId, t2 => t2.ShopId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Month == \"May\").Select(row => new { row.t1.Address, row.t1.ShopId }).ToList();","db_name":"coffee_shop"},{"query":"SELECT shop_id , count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1","result":"context.HappyHours.GroupBy(row => new { row.ShopId }).Select(group => new { group.Key.ShopId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();","db_name":"coffee_shop"},{"query":"SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1","result":"context.HappyHours.GroupBy(row => new { row.Month }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Month }).Take(1).ToList();","db_name":"coffee_shop"},{"query":"SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*) > 2","result":"context.HappyHours.GroupBy(row => new { row.Month }).Where(group => group.Count() > 2).Select(group => new { group.Key.Month }).ToList();","db_name":"coffee_shop"},{"query":"SELECT count(*) FROM ALBUM","result":"context.Albums.Count();","db_name":"chinook_1"},{"query":"SELECT Name FROM GENRE","result":"context.Genres.Select(row => new { row.Name }).ToList();","db_name":"chinook_1"},{"query":"SELECT * FROM CUSTOMER WHERE State = \"NY\"","result":"context.Customers.Where(row => row.State == \"NY\").ToList();","db_name":"chinook_1"},{"query":"SELECT FirstName , LastName FROM EMPLOYEE WHERE City = \"Calgary\"","result":"context.Employees.Where(row => row.City == \"Calgary\").Select(row => new { row.FirstName, row.LastName }).ToList();","db_name":"chinook_1"},{"query":"SELECT distinct(BillingCountry) FROM INVOICE","result":"context.Invoices.Select(row => new { row.BillingCountry }).Distinct().ToList();","db_name":"chinook_1"},{"query":"SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"","result":"context.Artists.Where(row => EF.Functions.Like(row.Name, \"%a%\")).Select(row => new { row.Name }).ToList();","db_name":"chinook_1"},{"query":"SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"AC/DC\"","result":"context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"AC/DC\").Select(row => new { row.T1.Title }).ToList();","db_name":"chinook_1"},{"query":"SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"Metallica\"","result":"context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Metallica\").Count();","db_name":"chinook_1"},{"query":"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = \"Balls to the Wall\"","result":"context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Title == \"Balls to the Wall\").Select(row => new { row.T2.Name }).ToList();","db_name":"chinook_1"},{"query":"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1","result":"context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Name }).Take(1).ToList();","db_name":"chinook_1"},{"query":"SELECT Name FROM TRACK WHERE Name LIKE '%you%'","result":"context.Tracks.Where(row => EF.Functions.Like(row.Name, \"%you%\")).Select(row => new { row.Name }).ToList();","db_name":"chinook_1"},{"query":"SELECT AVG(UnitPrice) FROM TRACK","result":"context.Tracks.Select(row => (double) row.UnitPrice).Average();","db_name":"chinook_1"},{"query":"SELECT max(Milliseconds) , min(Milliseconds) FROM TRACK","result":"context.Tracks.GroupBy(row => 1).Select(group => new { MaxMilliseconds = group.Select(row => row.Milliseconds).Max(), MinMilliseconds = group.Select(row => row.Milliseconds).Min() }).ToList();","db_name":"chinook_1"},{"query":"SELECT T1.Title , T2.AlbumID , COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID","result":"context.Albums.Join(context.Tracks, T1 => T1.AlbumId, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AlbumId }).Select(group => new { group.First().T1.Title, group.Key.AlbumId, Count = group.Count() }).ToList();","db_name":"chinook_1"},{"query":"SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1","result":"context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.GenreId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name }).Take(1).ToList();","db_name":"chinook_1"},{"query":"SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1","result":"context.MediaTypes.Join(context.Tracks, T1 => T1.MediaTypeId, T2 => T2.MediaTypeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.MediaTypeId }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.Name }).Take(1).ToList();","db_name":"chinook_1"},{"query":"SELECT T1.Title , T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID","result":"context.Albums.Join(context.Tracks, T1 => T1.AlbumId, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.UnitPrice > 1).GroupBy(row => new { row.T2.AlbumId }).Select(group => new { group.First().T1.Title, group.Key.AlbumId }).ToList();","db_name":"chinook_1"},{"query":"SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\"","result":"context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Rock\").Count();","db_name":"chinook_1"},{"query":"SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Jazz\"","result":"context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Jazz\").Select(row => (double) row.T2.UnitPrice).Average();","db_name":"chinook_1"},{"query":"SELECT FirstName , LastName FROM CUSTOMER WHERE Email = \"luisg@embraer.com.br\"","result":"context.Customers.Where(row => row.Email == \"luisg@embraer.com.br\").Select(row => new { row.FirstName, row.LastName }).ToList();","db_name":"chinook_1"},{"query":"SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"","result":"context.Customers.Where(row => EF.Functions.Like(row.Email, \"%gmail.com%\")).Count();","db_name":"chinook_1"},{"query":"SELECT T2.FirstName , T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = \"Leonie\"","result":"context.Customers.Join(context.Employees, T1 => T1.SupportRepId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"Leonie\").Select(row => new { row.T2.FirstName, row.T2.LastName }).ToList();","db_name":"chinook_1"},{"query":"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = \"70174\"","result":"context.Customers.Join(context.Employees, T1 => T1.SupportRepId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PostalCode == \"70174\").Select(row => new { row.T2.City }).ToList();","db_name":"chinook_1"},{"query":"SELECT COUNT(DISTINCT city) FROM EMPLOYEE","result":"context.Employees.Select(row => row.City).Distinct().Count();","db_name":"chinook_1"},{"query":"SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"","result":"context.Customers.Join(context.Invoices, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"Astrid\" && row.T1.LastName == \"Gruber\").Select(row => new { row.T2.InvoiceDate }).ToList();","db_name":"chinook_1"},{"query":"SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20","result":"context.Customers.Select(row => row.LastName).Except(context.Customers.Join(context.Invoices, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Total > 20).Select(row => row.T1.LastName)).ToList();","db_name":"chinook_1"},{"query":"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Brazil\"","result":"context.Customers.Join(context.Invoices, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Country == \"Brazil\").Select(row => new { row.T1.FirstName }).Distinct().ToList();","db_name":"chinook_1"},{"query":"SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Germany\"","result":"context.Customers.Join(context.Invoices, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Country == \"Germany\").Select(row => new { row.T1.Address }).Distinct().ToList();","db_name":"chinook_1"},{"query":"SELECT Phone FROM EMPLOYEE","result":"context.Employees.Select(row => new { row.Phone }).ToList();","db_name":"chinook_1"},{"query":"SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = \"AAC audio file\"","result":"context.MediaTypes.Join(context.Tracks, T1 => T1.MediaTypeId, T2 => T2.MediaTypeId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"AAC audio file\").Count();","db_name":"chinook_1"},{"query":"SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Latin\" OR T1.Name = \"Pop\"","result":"context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Latin\" || row.T1.Name == \"Pop\").Select(row => row.T2.Milliseconds).Average();","db_name":"chinook_1"},{"query":"SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) >= 10","result":"context.Customers.Join(context.Employees, T1 => T1.SupportRepId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SupportRepId }).Where(group => group.Count() >= 10).Select(group => new { group.First().T1.FirstName, group.Key.SupportRepId }).ToList();","db_name":"chinook_1"},{"query":"SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) <= 20","result":"context.Customers.Join(context.Employees, T1 => T1.SupportRepId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SupportRepId }).Where(group => group.Count() <= 20).Select(group => new { group.First().T1.LastName }).ToList();","db_name":"chinook_1"},{"query":"SELECT Title FROM ALBUM ORDER BY Title","result":"context.Albums.OrderBy(row => row.Title).Select(row => new { row.Title }).ToList();","db_name":"chinook_1"},{"query":"SELECT T2.Name , T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*) >= 3 ORDER BY T2.Name","result":"context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ArtistId }).Where(group => group.Count() >= 3).OrderBy(group => group.First().T2.Name).Select(group => new { group.First().T2.Name, group.Key.ArtistId }).ToList();","db_name":"chinook_1"},{"query":"SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId","result":"context.Artists.Select(row => row.Name).Except(context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Select(row => row.T2.Name)).ToList();","db_name":"chinook_1"},{"query":"SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\"","result":"context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Rock\").Select(row => (double) row.T2.UnitPrice).Average();","db_name":"chinook_1"},{"query":"SELECT max(Milliseconds) , min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Pop\"","result":"context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Pop\").GroupBy(row => 1).Select(group => new { MaxMillisecondsT2 = group.Select(row => row.T2.Milliseconds).Max(), MinMillisecondsT2 = group.Select(row => row.T2.Milliseconds).Min() }).ToList();","db_name":"chinook_1"},{"query":"SELECT BirthDate FROM EMPLOYEE WHERE City = \"Edmonton\"","result":"context.Employees.Where(row => row.City == \"Edmonton\").Select(row => new { row.BirthDate }).ToList();","db_name":"chinook_1"},{"query":"SELECT distinct(UnitPrice) FROM TRACK","result":"context.Tracks.Select(row => new { row.UnitPrice }).Distinct().ToList();","db_name":"chinook_1"},{"query":"SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)","result":"context.Artists.Where(row => !context.Albums.Select(row => row.ArtistId).Contains(row.ArtistId)).Count();","db_name":"chinook_1"},{"query":"SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'","result":"context.Albums.Join(context.Tracks, T1 => T1.AlbumId, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Genres, joined => joined.T2.GenreId, T3 => T3.GenreId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Reggae\").Select(row => row.T1.Title).Intersect(context.Albums.Join(context.Tracks, T1 => T1.AlbumId, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Genres, joined => joined.T2.GenreId, T3 => T3.GenreId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Rock\").Select(row => row.T1.Title)).ToList();","db_name":"chinook_1"},{"query":"SELECT count(*) FROM ASSESSMENT_NOTES","result":"context.AssessmentNotes.Count();","db_name":"behavior_monitoring"},{"query":"SELECT date_of_notes FROM Assessment_Notes","result":"context.AssessmentNotes.Select(row => new { row.DateOfNotes }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT count(*) FROM ADDRESSES WHERE zip_postcode = \"197\"","result":"context.Addresses.Where(row => row.ZipPostcode == \"197\").Count();","db_name":"behavior_monitoring"},{"query":"SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident","result":"context.BehaviorIncidents.Select(row => row.IncidentTypeCode).Distinct().Count();","db_name":"behavior_monitoring"},{"query":"SELECT DISTINCT detention_type_code FROM Detention","result":"context.Detentions.Select(row => new { row.DetentionTypeCode }).Distinct().ToList();","db_name":"behavior_monitoring"},{"query":"SELECT date_incident_start , date_incident_end FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"","result":"context.BehaviorIncidents.Where(row => row.IncidentTypeCode == \"NOISE\").Select(row => new { row.DateIncidentStart, row.DateIncidentEnd }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT detention_summary FROM Detention","result":"context.Detentions.Select(row => new { row.DetentionSummary }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT cell_mobile_number , email_address FROM STUDENTS","result":"context.Students.Select(row => new { row.CellMobileNumber, row.EmailAddress }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT email_address FROM Students WHERE first_name = \"Emma\" AND last_name = \"Rohan\"","result":"context.Students.Where(row => row.FirstName == \"Emma\" && row.LastName == \"Rohan\").Select(row => new { row.EmailAddress }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT count(DISTINCT student_id) FROM Students_in_Detention","result":"context.StudentsInDetentions.Select(row => row.StudentId).Distinct().Count();","db_name":"behavior_monitoring"},{"query":"SELECT gender FROM TEACHERS WHERE last_name = \"Medhurst\"","result":"context.Teachers.Where(row => row.LastName == \"Medhurst\").Select(row => new { row.Gender }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = \"VIOLENCE\"","result":"context.RefIncidentTypes.Where(row => row.IncidentTypeCode == \"VIOLENCE\").Select(row => new { row.IncidentTypeDescription }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT max(monthly_rental) , min(monthly_rental) FROM Student_Addresses","result":"context.StudentAddresses.GroupBy(row => 1).Select(group => new { MaxMonthlyRental = group.Select(row => (double) row.MonthlyRental).Max(), MinMonthlyRental = group.Select(row => (double) row.MonthlyRental).Min() }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'","result":"context.Teachers.Where(row => EF.Functions.Like(row.EmailAddress, \"%man%\")).Select(row => new { row.FirstName }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC","result":"context.AssessmentNotes.OrderBy(row => row.DateOfNotes).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT city FROM Addresses ORDER BY city","result":"context.Addresses.OrderBy(row => row.City).Select(row => new { row.City }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT first_name , last_name FROM Teachers ORDER BY last_name","result":"context.Teachers.OrderBy(row => row.LastName).Select(row => new { row.FirstName, row.LastName }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC","result":"context.StudentAddresses.OrderByDescending(row => (double) row.MonthlyRental).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T1.student_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","result":"context.AssessmentNotes.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StudentId, group.First().T2.FirstName }).Take(1).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T1.teacher_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3","result":"context.AssessmentNotes.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TeacherId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.TeacherId, group.First().T2.FirstName }).Take(3).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T1.student_id , T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","result":"context.BehaviorIncidents.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StudentId, group.First().T2.LastName }).Take(1).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T1.teacher_id , T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.detention_type_code = \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1","result":"context.Detentions.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DetentionTypeCode == \"AFTER\").GroupBy(row => new { row.T1.TeacherId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.TeacherId, group.First().T2.LastName }).Take(1).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T1.student_id , T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1","result":"context.StudentAddresses.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).OrderByDescending(group => group.Average(row => (double) row.T1.MonthlyRental)).Select(group => new { group.Key.StudentId, group.First().T2.FirstName }).Take(1).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T2.address_id , T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1","result":"context.Addresses.Join(context.StudentAddresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AddressId }).OrderByDescending(group => group.Average(row => (double) row.T2.MonthlyRental)).Select(group => new { group.Key.AddressId, group.First().T1.City }).Take(1).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T1.incident_type_code , T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1","result":"context.BehaviorIncidents.Join(context.RefIncidentTypes, T1 => T1.IncidentTypeCode, T2 => T2.IncidentTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.IncidentTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.IncidentTypeCode, group.First().T2.IncidentTypeDescription }).Take(1).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T1.detention_type_code , T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1","result":"context.Detentions.Join(context.RefDetentionTypes, T1 => T1.DetentionTypeCode, T2 => T2.DetentionTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DetentionTypeCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.DetentionTypeCode, group.First().T2.DetentionTypeDescription }).Take(1).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"","result":"context.AssessmentNotes.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Fanny\").Select(row => new { row.T1.DateOfNotes }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = \"Schuster\"","result":"context.AssessmentNotes.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.LastName == \"Schuster\").Select(row => new { row.T1.TextOfNotes }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T1.date_incident_start , date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.last_name = \"Fahey\"","result":"context.BehaviorIncidents.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.LastName == \"Fahey\").Select(row => new { row.T1.DateIncidentStart, row.T1.DateIncidentEnd }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T1.datetime_detention_start , datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = \"Schultz\"","result":"context.Detentions.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.LastName == \"Schultz\").Select(row => new { row.T1.DatetimeDetentionStart, row.T1.DatetimeDetentionEnd }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T2.address_id , T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY monthly_rental DESC LIMIT 1","result":"context.Addresses.Join(context.StudentAddresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => (double) row.T2.MonthlyRental).Select(row => new { row.T2.AddressId, row.T1.ZipPostcode }).Take(1).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1","result":"context.StudentAddresses.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).OrderBy(row => (double) row.T1.MonthlyRental).Select(row => new { row.T2.CellMobileNumber }).Take(1).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Texas\"","result":"context.Addresses.Join(context.StudentAddresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StateProvinceCounty == \"Texas\").Select(row => new { row.T2.MonthlyRental }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Wisconsin\"","result":"context.Addresses.Join(context.Students, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StateProvinceCounty == \"Wisconsin\").Select(row => new { row.T2.FirstName, row.T2.LastName }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T1.line_1 , avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id","result":"context.Addresses.Join(context.StudentAddresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AddressId }).Select(group => new { group.First().T1.Line1, AverageMonthlyRental = group.Select(row => (double) row.T2.MonthlyRental).Average() }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = \"Lyla\"","result":"context.Addresses.Join(context.Teachers, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Lyla\").Select(row => new { row.T1.ZipPostcode }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T1.zip_postcode = \"918\"","result":"context.Addresses.Join(context.Teachers, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ZipPostcode == \"918\").Select(row => new { row.T2.EmailAddress }).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )","result":"context.Students.Where(row => !context.BehaviorIncidents.Select(row => row.StudentId).Contains(row.StudentId)).Count();","db_name":"behavior_monitoring"},{"query":"SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id","result":"context.Teachers.Select(row => row.LastName).Except(context.Teachers.Join(context.Detentions, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.LastName)).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id","result":"context.Addresses.Join(context.Students, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Line1).Intersect(context.Addresses.Join(context.Teachers, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Line1)).ToList();","db_name":"behavior_monitoring"},{"query":"SELECT T1.asset_id , T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING count(*) = 2 INTERSECT SELECT T1.asset_id , T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING count(*) < 2","result":"context.Assets.Join(context.AssetParts, T1 => T1.AssetId, T2 => T2.AssetId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AssetId }).Where(group => group.Count() == 2).Select(group => new { group.Key.AssetId, group.First().T1.AssetDetails }).Intersect(context.Assets.Join(context.FaultLogs, T1 => T1.AssetId, T2 => T2.AssetId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AssetId }).Where(group => group.Count() < 2).Select(group => new { group.Key.AssetId, group.First().T1.AssetDetails })).ToList();","db_name":"assets_maintenance"},{"query":"SELECT count(*) , T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id","result":"context.MaintenanceContracts.Join(context.Assets, T1 => T1.MaintenanceContractId, T2 => T2.MaintenanceContractId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.MaintenanceContractId }).Select(group => new { Count = group.Count(), group.Key.MaintenanceContractId }).ToList();","db_name":"assets_maintenance"},{"query":"SELECT count(*) , T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id GROUP BY T1.company_id","result":"context.ThirdPartyCompanies.Join(context.Assets, T1 => T1.CompanyId, T2 => T2.SupplierCompanyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CompanyId }).Select(group => new { Count = group.Count(), group.Key.CompanyId }).ToList();","db_name":"assets_maintenance"},{"query":"SELECT T1.company_id , T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING count(*) >= 2 UNION SELECT T3.company_id , T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id = T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*) >= 2","result":"context.ThirdPartyCompanies.Join(context.MaintenanceEngineers, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CompanyId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.CompanyId, group.First().T1.CompanyName }).Union(context.ThirdPartyCompanies.Join(context.MaintenanceContracts, T3 => T3.CompanyId, T4 => T4.MaintenanceContractCompanyId, (T3, T4) => new { T3, T4 }).GroupBy(row => new { row.T3.CompanyId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.CompanyId, group.First().T3.CompanyName })).ToList();","db_name":"assets_maintenance"},{"query":"SELECT T1.staff_name , T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name , T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id = T4.contact_staff_id","result":"context.Staff.Join(context.FaultLogs, T1 => T1.StaffId, T2 => T2.RecordedByStaffId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.StaffName, row.T1.StaffId }).Except(context.Staff.Join(context.EngineerVisits, T3 => T3.StaffId, T4 => T4.ContactStaffId, (T3, T4) => new { T3, T4 }).Select(row => new { row.T3.StaffName, row.T3.StaffId })).ToList();","db_name":"assets_maintenance"},{"query":"SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1","result":"context.MaintenanceEngineers.SelectMany(s => context.EngineerVisits, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EngineerId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.EngineerId, group.First().T1.FirstName, group.First().T1.LastName }).Take(1).ToList();","db_name":"assets_maintenance"},{"query":"SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING count(*) > 2","result":"context.Parts.Join(context.PartFaults, T1 => T1.PartId, T2 => T2.PartId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PartId }).Where(group => group.Count() > 2).Select(group => new { group.First().T1.PartName, group.Key.PartId }).ToList();","db_name":"assets_maintenance"},{"query":"SELECT T1.first_name , T1.last_name , T1.other_details , T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id","result":"context.MaintenanceEngineers.Join(context.EngineerSkills, T1 => T1.EngineerId, T2 => T2.EngineerId, (T1, T2) => new { T1, T2 }).Join(context.Skills, joined => joined.T2.SkillId, T3 => T3.SkillId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.FirstName, row.T1.LastName, row.T1.OtherDetails, row.T3.SkillDescription }).ToList();","db_name":"assets_maintenance"},{"query":"SELECT T1.fault_short_name , T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id","result":"context.PartFaults.Join(context.SkillsRequiredToFixes, T1 => T1.PartFaultId, T2 => T2.PartFaultId, (T1, T2) => new { T1, T2 }).Join(context.Skills, joined => joined.T2.SkillId, T3 => T3.SkillId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.FaultShortName, row.T3.SkillDescription }).ToList();","db_name":"assets_maintenance"},{"query":"SELECT T1.part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name","result":"context.Parts.Join(context.AssetParts, T1 => T1.PartId, T2 => T2.PartId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PartName }).Select(group => new { group.Key.PartName, Count = group.Count() }).ToList();","db_name":"assets_maintenance"},{"query":"SELECT T1.fault_description , T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id","result":"context.FaultLogs.Join(context.FaultLogParts, T1 => T1.FaultLogEntryId, T2 => T2.FaultLogEntryId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.FaultDescription, row.T2.FaultStatus }).ToList();","db_name":"assets_maintenance"},{"query":"SELECT count(*) , T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1","result":"context.FaultLogs.Join(context.EngineerVisits, T1 => T1.FaultLogEntryId, T2 => T2.FaultLogEntryId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FaultLogEntryId }).Select(group => new { Count = group.Count(), group.Key.FaultLogEntryId }).OrderByDescending(group => group.Count).Take(1).ToList();","db_name":"assets_maintenance"},{"query":"SELECT DISTINCT last_name FROM Maintenance_Engineers","result":"context.MaintenanceEngineers.Select(row => new { row.LastName }).Distinct().ToList();","db_name":"assets_maintenance"},{"query":"SELECT DISTINCT fault_status FROM Fault_Log_Parts","result":"context.FaultLogParts.Select(row => new { row.FaultStatus }).Distinct().ToList();","db_name":"assets_maintenance"},{"query":"SELECT first_name , last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)","result":"context.MaintenanceEngineers.Where(row => !context.EngineerVisits.Select(row => row.EngineerId).Contains(row.EngineerId)).Select(row => new { row.FirstName, row.LastName }).ToList();","db_name":"assets_maintenance"},{"query":"SELECT asset_id , asset_details , asset_make , asset_model FROM Assets","result":"context.Assets.Select(row => new { row.AssetId, row.AssetDetails, row.AssetMake, row.AssetModel }).ToList();","db_name":"assets_maintenance"},{"query":"SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1","result":"context.Assets.OrderBy(row => row.AssetAcquiredDate).Select(row => new { row.AssetAcquiredDate }).Take(1).ToList();","db_name":"assets_maintenance"},{"query":"SELECT T1.part_id , T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1","result":"context.Parts.Join(context.PartFaults, T1 => T1.PartId, T2 => T2.PartId, (T1, T2) => new { T1, T2 }).Join(context.SkillsRequiredToFixes, joined => joined.T2.PartFaultId, T3 => T3.PartFaultId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.PartId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PartId, group.First().T1.PartName }).Take(1).ToList();","db_name":"assets_maintenance"},{"query":"SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1","result":"context.Parts.Join(context.PartFaults, T1 => T1.PartId, T2 => T2.PartId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PartName }).OrderBy(group => group.Count()).Select(group => new { group.Key.PartName }).Take(1).ToList();","db_name":"assets_maintenance"},{"query":"SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1","result":"context.MaintenanceEngineers.Join(context.EngineerVisits, T1 => T1.EngineerId, T2 => T2.EngineerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EngineerId }).OrderBy(group => group.Count()).Select(group => new { group.Key.EngineerId, group.First().T1.FirstName, group.First().T1.LastName }).Take(1).ToList();","db_name":"assets_maintenance"},{"query":"SELECT T1.staff_name , T3.first_name , T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id","result":"context.Staff.Join(context.EngineerVisits, T1 => T1.StaffId, T2 => T2.ContactStaffId, (T1, T2) => new { T1, T2 }).Join(context.MaintenanceEngineers, joined => joined.T2.EngineerId, T3 => T3.EngineerId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.StaffName, row.T3.FirstName, row.T3.LastName }).ToList();","db_name":"assets_maintenance"},{"query":"SELECT T1.fault_log_entry_id , T1.fault_description , T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1","result":"context.FaultLogs.Join(context.FaultLogParts, T1 => T1.FaultLogEntryId, T2 => T2.FaultLogEntryId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FaultLogEntryId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.FaultLogEntryId, group.First().T1.FaultDescription, group.First().T1.FaultLogEntryDatetime }).Take(1).ToList();","db_name":"assets_maintenance"},{"query":"SELECT T1.skill_id , T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1","result":"context.Skills.Join(context.SkillsRequiredToFixes, T1 => T1.SkillId, T2 => T2.SkillId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SkillId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.SkillId, group.First().T1.SkillDescription }).Take(1).ToList();","db_name":"assets_maintenance"},{"query":"SELECT DISTINCT asset_model FROM Assets","result":"context.Assets.Select(row => new { row.AssetModel }).Distinct().ToList();","db_name":"assets_maintenance"},{"query":"SELECT asset_make , asset_model , asset_details FROM Assets ORDER BY asset_disposed_date ASC","result":"context.Assets.OrderBy(row => row.AssetDisposedDate).Select(row => new { row.AssetMake, row.AssetModel, row.AssetDetails }).ToList();","db_name":"assets_maintenance"},{"query":"SELECT part_id , chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1","result":"context.Parts.OrderBy(row => row.ChargeableAmount).Select(row => new { row.PartId, row.ChargeableAmount }).Take(1).ToList();","db_name":"assets_maintenance"},{"query":"SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1","result":"context.ThirdPartyCompanies.Join(context.MaintenanceContracts, T1 => T1.CompanyId, T2 => T2.MaintenanceContractCompanyId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.ContractStartDate).Select(row => new { row.T1.CompanyName }).Take(1).ToList();","db_name":"assets_maintenance"},{"query":"SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1","result":"context.Staff.GroupBy(row => new { row.Gender }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Gender }).Take(1).ToList();","db_name":"assets_maintenance"},{"query":"SELECT T1.staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name","result":"context.Staff.Join(context.EngineerVisits, T1 => T1.StaffId, T2 => T2.ContactStaffId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StaffName }).Select(group => new { group.Key.StaffName, Count = group.Count() }).ToList();","db_name":"assets_maintenance"},{"query":"SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)","result":"context.Assets.Where(row => !context.FaultLogs.Select(row => row.AssetId).Contains(row.AssetId)).Select(row => new { row.AssetModel }).ToList();","db_name":"assets_maintenance"},{"query":"SELECT count(*) FROM body_builder","result":"context.BodyBuilders.Count();","db_name":"body_builder"},{"query":"SELECT Total FROM body_builder ORDER BY Total ASC","result":"context.BodyBuilders.OrderBy(row => row.Total).Select(row => new { row.Total }).ToList();","db_name":"body_builder"},{"query":"SELECT Snatch , Clean_Jerk FROM body_builder ORDER BY Snatch ASC","result":"context.BodyBuilders.OrderBy(row => row.Snatch).Select(row => new { row.Snatch, row.CleanJerk }).ToList();","db_name":"body_builder"},{"query":"SELECT avg(Snatch) FROM body_builder","result":"context.BodyBuilders.Select(row => (double) row.Snatch).Average();","db_name":"body_builder"},{"query":"SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1","result":"context.BodyBuilders.OrderByDescending(row => row.Total).Select(row => new { row.CleanJerk }).Take(1).ToList();","db_name":"body_builder"},{"query":"SELECT Birth_Date FROM People ORDER BY Height ASC","result":"context.People.OrderBy(row => row.Height).Select(row => new { row.BirthDate }).ToList();","db_name":"body_builder"},{"query":"SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID","result":"context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name }).ToList();","db_name":"body_builder"},{"query":"SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300","result":"context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Total > 300).Select(row => new { row.T2.Name }).ToList();","db_name":"body_builder"},{"query":"SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1","result":"context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Weight).Select(row => new { row.T2.Name }).Take(1).ToList();","db_name":"body_builder"},{"query":"SELECT T2.Birth_Date , T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 1","result":"context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Total).Select(row => new { row.T2.BirthDate, row.T2.BirthPlace }).Take(1).ToList();","db_name":"body_builder"},{"query":"SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total < 315","result":"context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Total < 315).Select(row => new { row.T2.Height }).ToList();","db_name":"body_builder"},{"query":"SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200","result":"context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Height > 200).Select(row => (double) row.T1.Total).Average();","db_name":"body_builder"},{"query":"SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC","result":"context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Total).Select(row => new { row.T2.Name }).ToList();","db_name":"body_builder"},{"query":"SELECT Birth_Place , COUNT(*) FROM people GROUP BY Birth_Place","result":"context.People.GroupBy(row => new { row.BirthPlace }).Select(group => new { group.Key.BirthPlace, Count = group.Count() }).ToList();","db_name":"body_builder"},{"query":"SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1","result":"context.People.GroupBy(row => new { row.BirthPlace }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BirthPlace }).Take(1).ToList();","db_name":"body_builder"},{"query":"SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*) >= 2","result":"context.People.GroupBy(row => new { row.BirthPlace }).Where(group => group.Count() >= 2).Select(group => new { group.Key.BirthPlace }).ToList();","db_name":"body_builder"},{"query":"SELECT Height , Weight FROM people ORDER BY Height DESC","result":"context.People.OrderByDescending(row => row.Height).Select(row => new { row.Height, row.Weight }).ToList();","db_name":"body_builder"},{"query":"SELECT * FROM body_builder","result":"context.BodyBuilders.ToList();","db_name":"body_builder"},{"query":"SELECT Name , birth_place FROM people EXCEPT SELECT T1.Name , T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id","result":"context.People.Select(row => new { row.Name, row.BirthPlace }).Except(context.People.Join(context.BodyBuilders, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name, row.T1.BirthPlace })).ToList();","db_name":"body_builder"},{"query":"SELECT count(DISTINCT Birth_Place) FROM people","result":"context.People.Select(row => row.BirthPlace).Distinct().Count();","db_name":"body_builder"},{"query":"SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)","result":"context.People.Where(row => !context.BodyBuilders.Select(row => row.PeopleId).Contains(row.PeopleId)).Count();","db_name":"body_builder"},{"query":"SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.snatch > 140 OR T2.height > 200;","result":"context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Snatch > 140 || row.T2.Height > 200).Select(row => new { row.T2.Weight }).ToList();","db_name":"body_builder"},{"query":"SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";","result":"context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.BirthDate, \"%January%\")).Select(row => new { row.T1.Total }).ToList();","db_name":"body_builder"},{"query":"SELECT min(snatch) FROM body_builder","result":"context.BodyBuilders.Select(row => row.Snatch).Min();","db_name":"body_builder"},{"query":"SELECT count(*) FROM actor","result":"context.Actors.Count();","db_name":"musical"},{"query":"SELECT Name FROM actor ORDER BY Name ASC","result":"context.Actors.OrderBy(row => row.Name).Select(row => new { row.Name }).ToList();","db_name":"musical"},{"query":"SELECT Character , Duration FROM actor","result":"context.Actors.Select(row => new { row.Character, row.Duration }).ToList();","db_name":"musical"},{"query":"SELECT Name FROM actor WHERE Age != 20","result":"context.Actors.Where(row => row.Age != 20).Select(row => new { row.Name }).ToList();","db_name":"musical"},{"query":"SELECT Character FROM actor ORDER BY age DESC","result":"context.Actors.OrderByDescending(row => row.Age).Select(row => new { row.Character }).ToList();","db_name":"musical"},{"query":"SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1","result":"context.Actors.OrderByDescending(row => row.Age).Select(row => new { row.Duration }).Take(1).ToList();","db_name":"musical"},{"query":"SELECT Name FROM musical WHERE Nominee = \"Bob Fosse\"","result":"context.Musicals.Where(row => row.Nominee == \"Bob Fosse\").Select(row => new { row.Name }).ToList();","db_name":"musical"},{"query":"SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"","result":"context.Musicals.Where(row => row.Award != \"Tony Award\").Select(row => new { row.Nominee }).Distinct().ToList();","db_name":"musical"},{"query":"SELECT T1.Name , T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID","result":"context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).Select(row => new { T1Name = row.T1.Name, T2Name = row.T2.Name }).ToList();","db_name":"musical"},{"query":"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = \"The Phantom of the Opera\"","result":"context.Actors.Join(context.Musicals, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"The Phantom of the Opera\").Select(row => new { row.T1.Name }).ToList();","db_name":"musical"}]