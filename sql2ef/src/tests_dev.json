[
  {
    "query": "SELECT Title FROM Cartoon ORDER BY title",
    "result": "context.Cartoons.OrderBy(row => row.Title).Select(row => new { row.Title }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "result": "context.Cartoons.Where(row => row.DirectedBy == \"Ben Jones\").Select(row => new { row.Title }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "result": "context.Cartoons.Where(row => row.WrittenBy == \"Joseph Kuhr\").Count();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
    "result": "context.Cartoons.OrderBy(row => row.OriginalAirDate).Select(row => new { row.Title, row.DirectedBy }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "result": "context.Cartoons.Where(row => row.DirectedBy == \"Ben Jones\" || row.DirectedBy == \"Brandon Vietti\").Select(row => new { row.Title }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "result": "context.TvChannels.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
    "result": "context.TvChannels.GroupBy(row => 1).Select(group => new { CountDistinctSeriesName = group.Select(row => row.SeriesName).Distinct().Count(), CountDistinctContent = group.Select(row => row.Content).Distinct().Count() }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "result": "context.TvChannels.Where(row => row.SeriesName == \"Sky Radio\").Select(row => new { row.Content }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "result": "context.TvChannels.Where(row => row.SeriesName == \"Sky Radio\").Select(row => new { row.PackageOption }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "result": "context.TvChannels.Where(row => row.Language == \"English\").Count();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "result": "context.TvChannels.GroupBy(row => new { row.Language }).Select(group => new { group.Key.Language, Count = group.Count() }).OrderBy(group => group.Count).Take(1).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "result": "context.TvChannels.GroupBy(row => new { row.Language }).Select(group => new { group.Key.Language, Count = group.Count() }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "result": "context.TvChannels.Join(context.Cartoons, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"The Rise of the Blue Beetle!\").Select(row => new { row.T1.SeriesName }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "result": "context.TvChannels.Join(context.Cartoons, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T1.SeriesName == \"Sky Radio\").Select(row => new { row.T2.Title }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Episode FROM TV_series ORDER BY rating",
    "result": "context.TvSeries.OrderBy(row => (double) row.Rating).Select(row => new { row.Episode }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "result": "context.TvSeries.OrderByDescending(row => (double) row.Rating).Select(row => new { row.Episode, row.Rating }).Take(3).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "result": "context.TvSeries.GroupBy(row => 1).Select(group => new { MaxShare = group.Select(row => row.Share).Max(), MinShare = group.Select(row => row.Share).Min() }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "result": "context.TvSeries.Where(row => row.Episode == \"A Love of a Lifetime\").Select(row => new { row.AirDate }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "result": "context.TvSeries.Where(row => row.Episode == \"A Love of a Lifetime\").Select(row => new { row.WeeklyRank }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "result": "context.TvChannels.Join(context.TvSeries, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Episode == \"A Love of a Lifetime\").Select(row => new { row.T1.SeriesName }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "result": "context.TvChannels.Join(context.TvSeries, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T1.SeriesName == \"Sky Radio\").Select(row => new { row.T2.Episode }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
    "result": "context.Cartoons.GroupBy(row => new { row.DirectedBy }).Select(group => new { Count = group.Count(), group.Key.DirectedBy }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "select production_code , channel from cartoon order by original_air_date desc limit 1",
    "result": "context.Cartoons.OrderByDescending(row => row.OriginalAirDate).Select(row => new { row.ProductionCode, row.Channel }).Take(1).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
    "result": "context.TvChannels.Where(row => row.HightDefinitionTv == \"yes\").Select(row => new { row.PackageOption, row.SeriesName }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
    "result": "context.TvChannels.Join(context.Cartoons, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WrittenBy == \"Todd Casey\").Select(row => new { row.T1.Country }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
    "result": "context.TvChannels.Select(row => row.Country).Except(context.TvChannels.Join(context.Cartoons, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WrittenBy == \"Todd Casey\").Select(row => row.T1.Country)).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
    "result": "context.TvChannels.Join(context.Cartoons, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DirectedBy == \"Michael Chang\").Select(row => new { row.T1.SeriesName, row.T1.Country }).Intersect(context.TvChannels.Join(context.Cartoons, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DirectedBy == \"Ben Jones\").Select(row => new { row.T1.SeriesName, row.T1.Country })).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
    "result": "context.TvChannels.Where(row => row.Language != \"English\").Select(row => new { row.PixelAspectRatioPar, row.Country }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*) > 2",
    "result": "context.TvChannels.GroupBy(row => new { row.Country }).Where(group => group.Count() > 2).Select(group => new { group.First().Id }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
    "result": "context.TvChannels.Select(row => row.Id).Except(context.Cartoons.Where(row => row.DirectedBy == \"Ben Jones\").Select(row => row.Channel)).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
    "result": "context.TvChannels.Where(row => !context.Cartoons.Where(row => row.DirectedBy == \"Ben Jones\").Select(row => row.Channel).Contains(row.Id)).Select(row => new { row.PackageOption }).ToList();",
    "db_name": "tvshow",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "result": "context.Owners.Select(row => row.State).Intersect(context.Professionals.Select(row => row.State)).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "result": "context.Dogs.Where(row => context.Treatments.Select(row => row.DogId).Contains(row.DogId)).Select(row => row.Age).ToList().Select(value => double.Parse(value)).Average();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
    "result": "context.Professionals.Where(row => row.State == \"Indiana\").Select(row => new { row.ProfessionalId, row.LastName, row.CellNumber }).Union(context.Professionals.Join(context.Treatments, T1 => T1.ProfessionalId, T2 => T2.ProfessionalId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProfessionalId }).Where(group => group.Count() > 2).Select(group => new { group.Key.ProfessionalId, group.First().T1.LastName, group.First().T1.CellNumber })).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
    "result": "context.Dogs.Where(row => !context.Treatments.GroupBy(row => new { row.DogId }).Where(group => group.Sum(row => row.CostOfTreatment) > 1000).Select(group => group.Key.DogId).Contains(row.DogId)).Select(row => new { row.Name }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
    "result": "context.Professionals.Select(row => new { row.ProfessionalId, row.RoleCode, row.EmailAddress }).Except(context.Professionals.Join(context.Treatments, T1 => T1.ProfessionalId, T2 => T2.ProfessionalId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.ProfessionalId, row.T1.RoleCode, row.T1.EmailAddress })).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Dogs.Join(context.Owners, T1 => T1.OwnerId, T2 => T2.OwnerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.OwnerId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.OwnerId, group.First().T2.FirstName, group.First().T2.LastName }).Take(1).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
    "result": "context.Professionals.Join(context.Treatments, T1 => T1.ProfessionalId, T2 => T2.ProfessionalId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProfessionalId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProfessionalId, group.First().T1.RoleCode, group.First().T1.FirstName }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Breeds.Join(context.Dogs, T1 => T1.BreedCode, T2 => T2.BreedCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.BreedName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BreedName }).Take(1).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Owners.Join(context.Dogs, T1 => T1.OwnerId, T2 => T2.OwnerId, (T1, T2) => new { T1, T2 }).Join(context.Treatments, joined => joined.T2.DogId, T3 => T3.DogId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.OwnerId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.OwnerId, group.First().T1.LastName }).Take(1).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "result": "context.TreatmentTypes.Join(context.Treatments, T1 => T1.TreatmentTypeCode, T2 => T2.TreatmentTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TreatmentTypeCode }).OrderBy(group => group.Sum(row => row.T2.CostOfTreatment)).Select(group => new { group.First().T1.TreatmentTypeDescription }).Take(1).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "result": "context.Owners.Join(context.Dogs, T1 => T1.OwnerId, T2 => T2.OwnerId, (T1, T2) => new { T1, T2 }).Join(context.Treatments, joined => joined.T2.DogId, T3 => T3.DogId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.OwnerId }).OrderByDescending(group => group.Sum(row => row.T3.CostOfTreatment)).Select(group => new { group.Key.OwnerId, group.First().T1.ZipCode }).Take(1).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
    "result": "context.Professionals.Join(context.Treatments, T1 => T1.ProfessionalId, T2 => T2.ProfessionalId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProfessionalId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProfessionalId, group.First().T1.CellNumber }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "result": "context.Professionals.SelectMany(s => context.Treatments, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CostOfTreatment < context.Treatments.Select(row => row.CostOfTreatment).Average()).Select(row => new { row.T1.FirstName, row.T1.LastName }).Distinct().ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
    "result": "context.Treatments.Join(context.Professionals, T1 => T1.ProfessionalId, T2 => T2.ProfessionalId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.DateOfTreatment, row.T2.FirstName }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
    "result": "context.Treatments.Join(context.TreatmentTypes, T1 => T1.TreatmentTypeCode, T2 => T2.TreatmentTypeCode, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.CostOfTreatment, row.T2.TreatmentTypeDescription }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
    "result": "context.Owners.Join(context.Dogs, T1 => T1.OwnerId, T2 => T2.OwnerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.FirstName, row.T1.LastName, row.T2.SizeCode }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
    "result": "context.Owners.Join(context.Dogs, T1 => T1.OwnerId, T2 => T2.OwnerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.FirstName, row.T2.Name }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "result": "context.Dogs.Join(context.Treatments, T1 => T1.DogId, T2 => T2.DogId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BreedCode == context.Dogs.GroupBy(row => new { row.BreedCode }).OrderBy(group => group.Count()).Select(group => group.Key.BreedCode).Take(1).First()).Select(row => new { row.T1.Name, row.T2.DateOfTreatment }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
    "result": "context.Owners.Join(context.Dogs, T1 => T1.OwnerId, T2 => T2.OwnerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.State == \"Virginia\").Select(row => new { row.T1.FirstName, row.T2.Name }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
    "result": "context.Dogs.Join(context.Treatments, T1 => T1.DogId, T2 => T2.DogId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.DateArrived, row.T1.DateDeparted }).Distinct().ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs )",
    "result": "context.Owners.Join(context.Dogs, T1 => T1.OwnerId, T2 => T2.OwnerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Age == context.Dogs.Select(row => row.Age).Max()).Select(row => new { row.T1.LastName }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "result": "context.Professionals.Where(row => row.State == \"Hawaii\" || row.State == \"Wisconsin\").Select(row => new { row.EmailAddress }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT date_arrived , date_departed FROM Dogs",
    "result": "context.Dogs.Select(row => new { row.DateArrived, row.DateDeparted }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "result": "context.Treatments.Select(row => row.DogId).Distinct().Count();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "result": "context.Treatments.Select(row => row.ProfessionalId).Distinct().Count();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
    "result": "context.Professionals.Where(row => EF.Functions.Like(row.City, \"%West%\")).Select(row => new { row.RoleCode, row.Street, row.City, row.State }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
    "result": "context.Owners.Where(row => EF.Functions.Like(row.State, \"%North%\")).Select(row => new { row.FirstName, row.LastName, row.EmailAddress }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
    "result": "context.Dogs.Where(row => row.Age < context.Dogs.Select(row => row.Age).ToList().Select(value => double.Parse(value)).Average()).Count();",
    "db_name": "dog_kennels",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,38): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.53",
    "should_retest": false
  },
  {
    "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "result": "context.Treatments.OrderByDescending(row => row.DateOfTreatment).Select(row => new { row.CostOfTreatment }).Take(1).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
    "result": "context.Dogs.Where(row => !context.Treatments.Select(row => row.DogId).Contains(row.DogId)).Count();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
    "result": "context.Dogs.Where(row => !context.Treatments.Select(row => row.DogId).Contains(row.DogId)).Count();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
    "result": "context.Owners.Where(row => !context.Dogs.Select(row => row.OwnerId).Contains(row.OwnerId)).Count();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
    "result": "context.Professionals.Where(row => !context.Treatments.Select(row => row.ProfessionalId).Contains(row.ProfessionalId)).Count();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
    "result": "context.Dogs.Where(row => row.AbandonedYn == \"1\").Select(row => new { row.Name, row.Age, row.Weight }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT avg(age) FROM Dogs",
    "result": "context.Dogs.Select(row => row.Age).ToList().Select(value => double.Parse(value)).Average();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT max(age) FROM Dogs",
    "result": "context.Dogs.Select(row => row.Age).Max();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT charge_type , charge_amount FROM Charges",
    "result": "context.Charges.Select(row => new { row.ChargeType, row.ChargeAmount }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT max(charge_amount) FROM Charges",
    "result": "context.Charges.Select(row => row.ChargeAmount).Max();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT email_address , cell_number , home_phone FROM professionals",
    "result": "context.Professionals.Select(row => new { row.EmailAddress, row.CellNumber, row.HomePhone }).ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
    "result": "context.Dogs.Select(row => new { row.BreedCode, row.SizeCode }).Distinct().ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
    "result": "context.Professionals.Join(context.Treatments, T1 => T1.ProfessionalId, T2 => T2.ProfessionalId, (T1, T2) => new { T1, T2 }).Join(context.TreatmentTypes, joined => joined.T2.TreatmentTypeCode, T3 => T3.TreatmentTypeCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.FirstName, row.T3.TreatmentTypeDescription }).Distinct().ToList();",
    "db_name": "dog_kennels",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM players",
    "result": "context.Players.Count();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM matches",
    "result": "context.Matches.Count();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
    "result": "context.Players.Where(row => row.CountryCode == \"USA\").Select(row => new { row.FirstName, row.BirthDate }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT avg(loser_age) , avg(winner_age) FROM matches",
    "result": "context.Matches.GroupBy(row => 1).Select(group => new { AverageLoserAge = group.Select(row => row.LoserAge).Average(), AverageWinnerAge = group.Select(row => row.WinnerAge).Average() }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT avg(winner_rank) FROM matches",
    "result": "context.Matches.Select(row => row.WinnerRank).Average();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT min(loser_rank) FROM matches",
    "result": "context.Matches.Select(row => row.LoserRank).Min();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(DISTINCT country_code) FROM players",
    "result": "context.Players.Select(row => row.CountryCode).Distinct().Count();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(DISTINCT loser_name) FROM matches",
    "result": "context.Matches.Select(row => row.LoserName).Distinct().Count();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
    "result": "context.Matches.GroupBy(row => new { row.TourneyName }).Where(group => group.Count() > 10).Select(group => new { group.Key.TourneyName }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
    "result": "context.Matches.Where(row => row.Year == 2013).Select(row => row.WinnerName).Intersect(context.Matches.Where(row => row.Year == 2016).Select(row => row.WinnerName)).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
    "result": "context.Matches.Where(row => row.Year == 2013 || row.Year == 2016).Count();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
    "result": "context.Players.Join(context.Matches, T1 => T1.PlayerId, T2 => T2.WinnerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TourneyName == \"WTA Championships\").Select(row => new { row.T1.CountryCode, row.T1.FirstName }).Intersect(context.Players.Join(context.Matches, T1 => T1.PlayerId, T2 => T2.WinnerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TourneyName == \"Australian Open\").Select(row => new { row.T1.CountryCode, row.T1.FirstName })).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
    "result": "context.Players.OrderBy(row => row.BirthDate).Select(row => new { row.FirstName, row.CountryCode }).Take(1).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT first_name , last_name FROM players ORDER BY birth_date",
    "result": "context.Players.OrderBy(row => row.BirthDate).Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "result": "context.Players.Where(row => row.Hand == \"L\").OrderBy(row => row.BirthDate).Select(row => new { row.FirstName, row.LastName }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "result": "context.Players.Join(context.Rankings, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Tours).Select(row => new { row.T1.CountryCode, row.T1.FirstName }).Take(1).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Matches.GroupBy(row => new { row.Year }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Year }).Take(1).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Matches.GroupBy(row => new { row.WinnerName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.WinnerName, group.First().WinnerRankPoints }).Take(1).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "result": "context.Matches.Where(row => row.TourneyName == \"Australian Open\").OrderByDescending(row => row.WinnerRankPoints).Select(row => new { row.WinnerName }).Take(1).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "result": "context.Matches.OrderByDescending(row => row.Minutes).Select(row => new { row.WinnerName, row.LoserName }).Take(1).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
    "result": "context.Players.Join(context.Rankings, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FirstName }).Select(group => new { AverageRanking1 = group.Select(row => row.T2.Ranking1).Average(), group.Key.FirstName }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
    "result": "context.Players.Join(context.Rankings, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FirstName }).Select(group => new { SumRankingPoints = group.Select(row => row.T2.RankingPoints).Sum(), group.Key.FirstName }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) , country_code FROM players GROUP BY country_code",
    "result": "context.Players.GroupBy(row => new { row.CountryCode }).Select(group => new { Count = group.Count(), group.Key.CountryCode }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Players.GroupBy(row => new { row.CountryCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CountryCode }).Take(1).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
    "result": "context.Players.GroupBy(row => new { row.CountryCode }).Where(group => group.Count() > 50).Select(group => new { group.Key.CountryCode }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
    "result": "context.Rankings.GroupBy(row => new { row.RankingDate }).Select(group => new { SumTours = group.Select(row => row.Tours).Sum(), group.Key.RankingDate }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) , YEAR FROM matches GROUP BY YEAR",
    "result": "context.Matches.GroupBy(row => new { row.Year }).Select(group => new { Count = group.Count(), group.Key.Year }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "result": "context.Matches.OrderBy(row => row.WinnerAge).Select(row => new { row.WinnerName, row.WinnerRank }).Distinct().Take(3).ToList();",
    "db_name": "wta_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: Madison Keys, 1: 17}, {0: Madison Keys, 1: 24}, {0: Madison Keys, 1: 16}]\", linq_results: \"[{0: Serena Williams, 1: 1}, {0: Petra Kvitova, 1: 6}, {0: Angelique Kerber, 1: 9}]\" }",
    "should_retest": false
  },
  {
    "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
    "result": "context.Matches.Where(row => row.TourneyName == \"WTA Championships\" && row.WinnerHand == \"L\").Select(row => row.WinnerName).Distinct().Count();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "result": "context.Players.Join(context.Matches, T1 => T1.PlayerId, T2 => T2.WinnerId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.WinnerRankPoints).Select(row => new { row.T1.FirstName, row.T1.CountryCode, row.T1.BirthDate }).Take(1).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) , hand FROM players GROUP BY hand",
    "result": "context.Players.GroupBy(row => new { row.Hand }).Select(group => new { Count = group.Count(), group.Key.Hand }).ToList();",
    "db_name": "wta_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM pets WHERE weight > 10",
    "result": "context.Pets.Where(row => row.Weight > 10).Count();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "result": "context.Pets.OrderBy(row => row.PetAge).Select(row => new { row.Weight }).Take(1).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT max(weight) , petType FROM pets GROUP BY petType",
    "result": "context.Pets.GroupBy(row => new { row.PetType }).Select(group => new { MaxWeight = group.Select(row => row.Weight).Max(), group.Key.PetType }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
    "result": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age > 20).Count();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
    "result": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Sex == \"F\" && row.T3.PetType == \"dog\").Count();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(DISTINCT pettype) FROM pets",
    "result": "context.Pets.Select(row => row.PetType).Distinct().Count();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
    "result": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetType == \"cat\" || row.T3.PetType == \"dog\").Select(row => new { row.T1.Fname }).Distinct().ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
    "result": "context.Students.Join(context.HasPets, t1 => t1.StuId, t2 => t2.StuId, (t1, t2) => new { t1, t2 }).Join(context.Pets, joined => joined.t2.PetId, t3 => t3.PetId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.PetType == \"cat\").Select(row => row.t1.Fname).Intersect(context.Students.Join(context.HasPets, t1 => t1.StuId, t2 => t2.StuId, (t1, t2) => new { t1, t2 }).Join(context.Pets, joined => joined.t2.PetId, t3 => t3.PetId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.PetType == \"dog\").Select(row => row.t1.Fname)).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
    "result": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetType == \"cat\").Select(row => row.T1.Fname).Intersect(context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetType == \"dog\").Select(row => row.T1.Fname)).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
    "result": "context.Students.Where(row => !context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetType == \"cat\").Select(row => row.T1.StuId).Contains(row.StuId)).Select(row => new { row.Major, row.Age }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
    "result": "context.Students.Select(row => row.StuId).Except(context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetType == \"cat\").Select(row => row.T1.StuId)).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
    "result": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetType == \"dog\" && !context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetType == \"cat\").Select(row => row.T1.StuId).Contains(row.T1.StuId)).Select(row => new { row.T1.Fname, row.T1.Age }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
    "result": "context.Pets.OrderBy(row => row.PetAge).Select(row => new { row.PetType, row.Weight }).Take(1).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
    "result": "context.Pets.Where(row => row.PetAge > 1).Select(row => new { row.PetId, row.Weight }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
    "result": "context.Pets.GroupBy(row => new { row.PetType }).Select(group => new { AveragePetAge = group.Select(row => row.PetAge).Average(), MaxPetAge = group.Select(row => row.PetAge).Max(), group.Key.PetType }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT avg(weight) , pettype FROM pets GROUP BY pettype",
    "result": "context.Pets.GroupBy(row => new { row.PetType }).Select(group => new { AverageWeight = group.Select(row => row.Weight).Average(), group.Key.PetType }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
    "result": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Fname, row.T1.Age }).Distinct().ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
    "result": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Lname == \"Smith\").Select(row => new { row.T2.PetId }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
    "result": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StuId }).Select(group => new { Count = group.Count(), group.Key.StuId }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "select count(*) , t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
    "result": "context.Students.Join(context.HasPets, t1 => t1.StuId, t2 => t2.StuId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.StuId }).Select(group => new { Count = group.Count(), group.Key.StuId }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
    "result": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StuId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Fname, group.First().T1.Sex }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
    "result": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetAge == 3 && row.T3.PetType == \"cat\").Select(row => new { row.T1.Lname }).ToList();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
    "result": "context.Students.Where(row => !context.HasPets.Select(row => row.StuId).Contains(row.StuId)).Select(row => row.Age).Average();",
    "db_name": "pets_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Documents",
    "result": "context.Documents.Count();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT document_id , document_name , document_description FROM Documents",
    "result": "context.Documents.Select(row => new { row.DocumentId, row.DocumentName, row.DocumentDescription }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "result": "context.Documents.Where(row => EF.Functions.Like(row.DocumentDescription, \"%w%\")).Select(row => new { row.DocumentName, row.TemplateId }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
    "result": "context.Documents.Where(row => row.DocumentName == \"Robbin CV\").Select(row => new { row.DocumentId, row.TemplateId, row.DocumentDescription }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(DISTINCT template_id) FROM Documents",
    "result": "context.Documents.Select(row => row.TemplateId).Distinct().Count();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
    "result": "context.Documents.Join(context.Templates, T1 => T1.TemplateId, T2 => T2.TemplateId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TemplateTypeCode == \"PPT\").Count();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT template_id , count(*) FROM Documents GROUP BY template_id",
    "result": "context.Documents.GroupBy(row => new { row.TemplateId }).Select(group => new { group.Key.TemplateId, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Documents.Join(context.Templates, T1 => T1.TemplateId, T2 => T2.TemplateId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TemplateId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.TemplateId, group.First().T2.TemplateTypeCode }).Take(1).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
    "result": "context.Documents.GroupBy(row => new { row.TemplateId }).Where(group => group.Count() > 1).Select(group => new { group.Key.TemplateId }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "result": "context.Templates.Select(row => row.TemplateId).Except(context.Documents.Where(row => row.TemplateId.HasValue).Select(row => TemplateId = row.TemplateId.Value)).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,137): error CS0103: The name 'TemplateId' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    147 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.05",
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Templates",
    "result": "context.Templates.Count();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT template_id , version_number , template_type_code FROM Templates",
    "result": "context.Templates.Select(row => new { row.TemplateId, row.VersionNumber, row.TemplateTypeCode }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT template_type_code FROM Templates",
    "result": "context.Templates.Select(row => new { row.TemplateTypeCode }).Distinct().ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
    "result": "context.Templates.Where(row => row.TemplateTypeCode == \"PP\" || row.TemplateTypeCode == \"PPT\").Select(row => new { row.TemplateId }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Templates WHERE template_type_code = \"CV\"",
    "result": "context.Templates.Where(row => row.TemplateTypeCode == \"CV\").Count();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
    "result": "context.Templates.Where(row => row.VersionNumber > 5).Select(row => new { row.VersionNumber, row.TemplateTypeCode }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code",
    "result": "context.Templates.GroupBy(row => new { row.TemplateTypeCode }).Select(group => new { group.Key.TemplateTypeCode, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Templates.GroupBy(row => new { row.TemplateTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.TemplateTypeCode }).Take(1).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
    "result": "context.Templates.GroupBy(row => new { row.TemplateTypeCode }).Where(group => group.Count() < 3).Select(group => new { group.Key.TemplateTypeCode }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT min(Version_Number) , template_type_code FROM Templates",
    "result": "context.Templates.Select(row => new { MinVersionNumber = row.Select(row => row.VersionNumber).Min(), row.TemplateTypeCode }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,73): error CS1061: 'Template' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type 'Template' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.45",
    "should_retest": false
  },
  {
    "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
    "result": "context.Templates.Join(context.Documents, T1 => T1.TemplateId, T2 => T2.TemplateId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == \"Data base\").Select(row => new { row.T1.TemplateTypeCode }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
    "result": "context.Templates.Join(context.Documents, T1 => T1.TemplateId, T2 => T2.TemplateId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.TemplateTypeCode == \"BK\").Select(row => new { row.T2.DocumentName }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
    "result": "context.Templates.Join(context.Documents, T1 => T1.TemplateId, T2 => T2.TemplateId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TemplateTypeCode }).Select(group => new { group.Key.TemplateTypeCode, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Templates.Join(context.Documents, T1 => T1.TemplateId, T2 => T2.TemplateId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TemplateTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.TemplateTypeCode }).Take(1).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
    "result": "context.Templates.Select(row => row.TemplateTypeCode).Except(context.Templates.Join(context.Documents, T1 => T1.TemplateId, T2 => T2.TemplateId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.TemplateTypeCode)).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
    "result": "context.RefTemplateTypes.Select(row => new { row.TemplateTypeCode, row.TemplateTypeDescription }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
    "result": "context.RefTemplateTypes.Where(row => row.TemplateTypeCode == \"AD\").Select(row => new { row.TemplateTypeDescription }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
    "result": "context.RefTemplateTypes.Where(row => row.TemplateTypeDescription == \"Book\").Select(row => new { row.TemplateTypeCode }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
    "result": "context.RefTemplateTypes.Join(context.Templates, T1 => T1.TemplateTypeCode, T2 => T2.TemplateTypeCode, (T1, T2) => new { T1, T2 }).Join(context.Documents, joined => joined.T2.TemplateId, T3 => T3.TemplateId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.TemplateTypeDescription }).Distinct().ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
    "result": "context.RefTemplateTypes.Join(context.Templates, T1 => T1.TemplateTypeCode, T2 => T2.TemplateTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.TemplateTypeDescription == \"Presentation\").Select(row => new { row.T2.TemplateId }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Paragraphs",
    "result": "context.Paragraphs.Count();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
    "result": "context.Paragraphs.Join(context.Documents, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == \"Summer Show\").Count();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "select other_details from paragraphs where paragraph_text like 'korea'",
    "result": "context.Paragraphs.Where(row => EF.Functions.Like(row.ParagraphText, \"korea\")).Select(row => new { row.OtherDetails }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
    "result": "context.Paragraphs.Join(context.Documents, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == \"Welcome to NY\").Select(row => new { row.T1.ParagraphId, row.T1.ParagraphText }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
    "result": "context.Paragraphs.Join(context.Documents, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == \"Customer reviews\").Select(row => new { row.T1.ParagraphText }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "result": "context.Paragraphs.GroupBy(row => new { row.DocumentId }).OrderBy(group => group.DocumentId).Select(group => new { group.Key.DocumentId, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,93): error CS1061: 'IGrouping<<anonymous type: int DocumentId>, Paragraph>' does not contain a definition for 'DocumentId' and no accessible extension method 'DocumentId' accepting a first argument of type 'IGrouping<<anonymous type: int DocumentId>, Paragraph>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.51",
    "should_retest": false
  },
  {
    "query": "SELECT T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
    "result": "context.Paragraphs.Join(context.Documents, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DocumentId }).Select(group => new { group.Key.DocumentId, group.First().T2.DocumentName, Count = group.Count() }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
    "result": "context.Paragraphs.GroupBy(row => new { row.DocumentId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.DocumentId }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Paragraphs.Join(context.Documents, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DocumentId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DocumentId, group.First().T2.DocumentName }).Take(1).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "result": "context.Paragraphs.GroupBy(row => new { row.DocumentId }).OrderBy(group => group.Count()).Select(group => new { group.Key.DocumentId }).Take(1).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "result": "context.Paragraphs.GroupBy(row => new { row.DocumentId }).Where(group => group.Count() >= 1 && group.Count() <= 2).Select(group => new { group.Key.DocumentId }).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
    "result": "context.Paragraphs.Where(row => row.ParagraphText == \"Brazil\").Select(row => row.DocumentId).Intersect(context.Paragraphs.Where(row => row.ParagraphText == \"Ireland\").Select(row => row.DocumentId)).ToList();",
    "db_name": "cre_Doc_Template_Mgt",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM teacher",
    "result": "context.Teachers.Count();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM teacher ORDER BY Age ASC",
    "result": "context.Teachers.OrderBy(row => row.Age).Select(row => new { row.Name }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Age , Hometown FROM teacher",
    "result": "context.Teachers.Select(row => new { row.Age, row.Hometown }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "select name from teacher where hometown != \"little lever urban district\"",
    "result": "context.Teachers.Where(row => row.Hometown != \"little lever urban district\").Select(row => new { row.Name }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
    "result": "context.Teachers.Where(row => row.Age == \"32\" || row.Age == \"33\").Select(row => new { row.Name }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "result": "context.Teachers.OrderBy(row => row.Age).Select(row => new { row.Hometown }).Take(1).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
    "result": "context.Teachers.GroupBy(row => new { row.Hometown }).Select(group => new { group.Key.Hometown, Count = group.Count() }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Teachers.GroupBy(row => new { row.Hometown }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Hometown }).Take(1).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
    "result": "context.Teachers.GroupBy(row => new { row.Hometown }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Hometown }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
    "result": "context.CourseArranges.Join(context.Courses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Join(context.Teachers, joined => joined.T1.TeacherId, T3 => T3.TeacherId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Name, row.T2.Course1 }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
    "result": "context.CourseArranges.Join(context.Courses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Join(context.Teachers, joined => joined.T1.TeacherId, T3 => T3.TeacherId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderBy(row => row.T3.Name).Select(row => new { row.T3.Name, row.T2.Course1 }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
    "result": "context.CourseArranges.Join(context.Courses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Join(context.Teachers, joined => joined.T1.TeacherId, T3 => T3.TeacherId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Course1 == \"Math\").Select(row => new { row.T3.Name }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
    "result": "context.CourseArranges.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { group.Key.Name, Count = group.Count() }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
    "result": "context.CourseArranges.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Name }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
    "result": "context.Teachers.Where(row => !context.CourseArranges.Select(row => row.TeacherId).Contains(row.TeacherId)).Select(row => new { row.Name }).ToList();",
    "db_name": "course_teach",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
    "result": "context.Airlines.Where(row => row.Airline1 == \"JetBlue Airways\").Select(row => new { row.Country }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
    "result": "context.Airlines.Where(row => row.Airline1 == \"JetBlue Airways\").Select(row => new { row.Abbreviation }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
    "result": "context.Airlines.Where(row => row.Country == \"USA\").Select(row => new { row.Airline1, row.Abbreviation }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
    "result": "context.Airports.Where(row => row.City == \"Anthony\").Select(row => new { row.AirportCode, row.AirportName }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM AIRLINES",
    "result": "context.Airlines.Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM AIRPORTS",
    "result": "context.Airports.Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM FLIGHTS",
    "result": "context.Flights.Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
    "result": "context.Airlines.Where(row => row.Abbreviation == \"UAL\").Select(row => new { row.Airline1 }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM AIRLINES WHERE Country = \"USA\"",
    "result": "context.Airlines.Where(row => row.Country == \"USA\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
    "result": "context.Airports.Where(row => row.AirportName == \"Alton\").Select(row => new { row.City, row.Country }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
    "result": "context.Airports.Where(row => row.AirportCode == \"AKO\").Select(row => new { row.AirportName }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "result": "context.Airports.Where(row => row.City == \"Aberdeen\").Select(row => new { row.AirportName }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
    "result": "context.Flights.Where(row => row.SourceAirport == \"APG\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\"",
    "result": "context.Flights.Where(row => row.DestAirport == \"ATO\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
    "result": "context.Flights.Join(context.Airports, T1 => T1.SourceAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City == \"Aberdeen\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
    "result": "context.Flights.Join(context.Airports, T1 => T1.DestAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City == \"Aberdeen\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\"",
    "result": "context.Flights.Join(context.Airports, T1 => T1.DestAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Join(context.Airports, joined => joined.T1.SourceAirport, T3 => T3.AirportCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.City == \"Ashley\" && row.T3.City == \"Aberdeen\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "result": "context.Flights.Join(context.Airlines, T1 => T1.Airline, T2 => T2.Uid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Airline1 == \"JetBlue Airways\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\"",
    "result": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Airline1 == \"United Airlines\" && row.T2.DestAirport == \"ASY\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
    "result": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Airline1 == \"United Airlines\" && row.T2.SourceAirport == \"AHD\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\"",
    "result": "context.Flights.Join(context.Airports, T1 => T1.DestAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Join(context.Airlines, joined => joined.T1.Airline, T3 => T3.Uid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.City == \"Aberdeen\" && row.T3.Airline1 == \"United Airlines\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Airports.Join(context.Flights, T1 => T1.AirportCode, T2 => T2.DestAirport, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.City }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.City }).Take(1).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Airports.Join(context.Flights, T1 => T1.AirportCode, T2 => T2.SourceAirport, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.City }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.City }).Take(1).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Airports.Join(context.Flights, T1 => new { Pair1 = T1.AirportCode, Pair2 = T1.AirportCode }, T2 => new { Pair1 = T2.DestAirport, Pair2 = T2.SourceAirport }, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AirportCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AirportCode }).Take(1).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "result": "context.Airports.Join(context.Flights, T1 => new { Pair1 = T1.AirportCode, Pair2 = T1.AirportCode }, T2 => new { Pair1 = T2.DestAirport, Pair2 = T2.SourceAirport }, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AirportCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.AirportCode }).Take(1).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Airline1 }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Airline1 }).Take(1).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "result": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Airline1 }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.Abbreviation, group.First().T1.Country }).Take(1).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
    "result": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SourceAirport == \"AHD\").Select(row => new { row.T1.Airline1 }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
    "result": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DestAirport == \"AHD\").Select(row => new { row.T1.Airline1 }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
    "result": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SourceAirport == \"APG\").Select(row => row.T1.Airline1).Intersect(context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SourceAirport == \"CVO\").Select(row => row.T1.Airline1)).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
    "result": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SourceAirport == \"CVO\").Select(row => row.T1.Airline1).Except(context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SourceAirport == \"APG\").Select(row => row.T1.Airline1)).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10",
    "result": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Airline1 }).Where(group => group.Count() > 10).Select(group => new { group.Key.Airline1 }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
    "result": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Airline1 }).Where(group => group.Count() < 200).Select(group => new { group.Key.Airline1 }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\"",
    "result": "context.Flights.Join(context.Airlines, T1 => T1.Airline, T2 => T2.Uid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Airline1 == \"United Airlines\").Select(row => new { row.T1.FlightNo }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
    "result": "context.Flights.Where(row => row.SourceAirport == \"APG\").Select(row => new { row.FlightNo }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
    "result": "context.Flights.Where(row => row.DestAirport == \"APG\").Select(row => new { row.FlightNo }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
    "result": "context.Flights.Join(context.Airports, T1 => T1.SourceAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City == \"Aberdeen\").Select(row => new { row.T1.FlightNo }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
    "result": "context.Flights.Join(context.Airports, T1 => T1.DestAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City == \"Aberdeen\").Select(row => new { row.T1.FlightNo }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\"",
    "result": "context.Flights.Join(context.Airports, T1 => T1.DestAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City == \"Aberdeen\" || row.T2.City == \"Abilene\").Count();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "result": "context.Airports.Where(row => !context.Flights.Select(row => row.SourceAirport).Union(context.Flights.Select(row => row.DestAirport)).Contains(row.AirportCode)).Select(row => new { row.AirportName }).ToList();",
    "db_name": "flight_2",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM poker_player",
    "result": "context.PokerPlayers.Count();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "result": "context.PokerPlayers.OrderByDescending(row => row.Earnings).Select(row => new { row.Earnings }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
    "result": "context.PokerPlayers.Select(row => new { row.FinalTableMade, row.BestFinish }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT avg(Earnings) FROM poker_player",
    "result": "context.PokerPlayers.Select(row => (double) row.Earnings).Average();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "result": "context.PokerPlayers.OrderByDescending(row => row.Earnings).Select(row => new { row.MoneyRank }).Take(1).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
    "result": "context.PokerPlayers.Where(row => row.Earnings < 200000).Select(row => row.FinalTableMade).Max();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
    "result": "context.People.Join(context.PokerPlayers, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
    "result": "context.People.Join(context.PokerPlayers, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Earnings > 300000).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
    "result": "context.People.Join(context.PokerPlayers, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.FinalTableMade).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "result": "context.People.Join(context.PokerPlayers, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Earnings).Select(row => new { row.T1.BirthDate }).Take(1).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "result": "context.People.Join(context.PokerPlayers, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Height).Select(row => new { row.T2.MoneyRank }).Take(1).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
    "result": "context.People.Join(context.PokerPlayers, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Height > 200).Select(row => (double) row.T2.Earnings).Average();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
    "result": "context.People.Join(context.PokerPlayers, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Earnings).Select(row => new { row.T1.Name }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
    "result": "context.People.GroupBy(row => new { row.Nationality }).Select(group => new { group.Key.Nationality, Count = group.Count() }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.People.GroupBy(row => new { row.Nationality }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Nationality }).Take(1).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
    "result": "context.People.GroupBy(row => new { row.Nationality }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Nationality }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
    "result": "context.People.OrderBy(row => row.Name).Select(row => new { row.Name, row.BirthDate }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "result": "context.People.Where(row => row.Nationality != \"Russia\").Select(row => new { row.Name }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
    "result": "context.People.Where(row => !context.PokerPlayers.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(DISTINCT Nationality) FROM people",
    "result": "context.People.Select(row => row.Nationality).Distinct().Count();",
    "db_name": "poker_player",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Highschooler",
    "result": "context.Highschoolers.Count();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT name , grade FROM Highschooler",
    "result": "context.Highschoolers.Select(row => new { row.Name, row.Grade }).ToList();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT grade FROM Highschooler",
    "result": "context.Highschoolers.Select(row => new { row.Grade }).ToList();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT grade FROM Highschooler WHERE name = \"Kyle\"",
    "result": "context.Highschoolers.Where(row => row.Name == \"Kyle\").Select(row => new { row.Grade }).ToList();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT name FROM Highschooler WHERE grade = 10",
    "result": "context.Highschoolers.Where(row => row.Grade == 10).Select(row => new { row.Name }).ToList();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
    "result": "context.Highschoolers.Where(row => row.Name == \"Kyle\").Select(row => new { row.Id }).ToList();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "result": "",
    "db_name": "dog_kennels",
    "status": "BuildFailed",
    "error": "Failed to build query",
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
    "result": "context.Highschoolers.Where(row => row.Grade == 9 || row.Grade == 10).Count();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT grade , count(*) FROM Highschooler GROUP BY grade",
    "result": "context.Highschoolers.GroupBy(row => new { row.Grade }).Select(group => new { group.Key.Grade, Count = group.Count() }).ToList();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Highschoolers.GroupBy(row => new { row.Grade }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Grade }).Take(1).ToList();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
    "result": "context.Highschoolers.GroupBy(row => new { row.Grade }).Where(group => group.Count() >= 4).Select(group => new { group.Key.Grade }).ToList();",
    "db_name": "network_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT student_id , count(*) FROM Friend GROUP BY student_id",
    "result": "context.Friend.GroupBy(row => new { row.StudentId }).Select(group => new { group.Key.StudentId, Count = group.Count() }).ToList();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.42",
    "should_retest": false
  },
  {
    "query": "SELECT T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
    "result": "context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).Select(group => new { group.First().T2.Name, Count = group.Count() }).ToList();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.88",
    "should_retest": false
  },
  {
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Name }).Take(1).ToList();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.35",
    "should_retest": false
  },
  {
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
    "result": "context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).Where(group => group.Count() >= 3).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.78",
    "should_retest": false
  },
  {
    "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
    "result": "context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Highschoolers, joined => joined.T1.FriendId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Name == \"Kyle\").Select(row => new { row.T3.Name }).ToList();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.90",
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
    "result": "context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Kyle\").Count();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.63",
    "should_retest": false
  },
  {
    "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "result": "context.Highschoolers.Select(row => row.Id).Except(context.Friend.Select(row => row.StudentId)).ToList();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,71): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46",
    "should_retest": false
  },
  {
    "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
    "result": "context.Highschoolers.Select(row => row.Name).Except(context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Select(row => row.T2.Name)).ToList();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,73): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.75",
    "should_retest": false
  },
  {
    "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "result": "",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "Failed to build query",
    "should_retest": false
  },
  {
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
    "result": "",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "Failed to build query",
    "should_retest": false
  },
  {
    "query": "SELECT student_id , count(*) FROM Likes GROUP BY student_id",
    "result": "",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "Failed to build query",
    "should_retest": false
  },
  {
    "query": "SELECT T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
    "result": "",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "Failed to build query",
    "should_retest": false
  },
  {
    "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "result": "",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "Failed to build query",
    "should_retest": false
  },
  {
    "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
    "result": "",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "Failed to build query",
    "should_retest": false
  },
  {
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
    "result": "context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Grade > 5).GroupBy(row => new { row.T1.StudentId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T2.Name }).ToList();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,20): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.66",
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
    "result": "",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "Failed to build query",
    "should_retest": false
  },
  {
    "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
    "result": "context.Highschoolers.Where(row => context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Select(row => row.T1.StudentId).Contains(row.Id)).Select(row => row.Grade).Average();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,55): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.35",
    "should_retest": false
  },
  {
    "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
    "result": "context.Highschoolers.Where(row => !context.Friend.Join(context.Highschoolers, T1 => T1.StudentId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Select(row => row.T1.StudentId).Contains(row.Id)).Select(row => row.Grade).Min();",
    "db_name": "network_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,56): error CS1061: 'Network1Context' does not contain a definition for 'Friend' and no accessible extension method 'Friend' accepting a first argument of type 'Network1Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.68",
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'",
    "result": "context.Ships.Where(row => row.DispositionOfShip == \"Captured\").Count();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT name , tonnage FROM ship ORDER BY name DESC",
    "result": "context.Ships.OrderByDescending(row => row.Name).Select(row => new { row.Name, row.Tonnage }).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT name , date FROM battle",
    "result": "context.Battles.Select(row => new { row.Name, row.Date }).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT max(killed) , min(killed) FROM death",
    "result": "context.Deaths.GroupBy(row => 1).Select(group => new { MaxKilled = group.Select(row => row.Killed).Max(), MinKilled = group.Select(row => row.Killed).Min() }).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT avg(injured) FROM death",
    "result": "context.Deaths.Select(row => row.Injured).Average();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
    "result": "context.Deaths.Join(context.Ships, T1 => T1.CausedByShipId, t2 => t2.Id, (T1, t2) => new { T1, t2 }).Where(row => row.t2.Tonnage == \"t\").Select(row => new { row.T1.Killed, row.T1.Injured }).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
    "result": "context.Battles.Where(row => row.BulgarianCommander != \"Boril\").Select(row => new { row.Name, row.Result }).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
    "result": "context.Battles.Join(context.Ships, T1 => T1.Id, T2 => T2.LostInBattle, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ShipType == \"Brig\").Select(row => new { row.T1.Id, row.T1.Name }).Distinct().ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed) > 10",
    "result": "context.Battles.Join(context.Ships, T1 => T1.Id, T2 => T2.LostInBattle, (T1, T2) => new { T1, T2 }).Join(context.Deaths, joined => joined.T2.Id, T3 => T3.CausedByShipId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.Id }).Where(group => group.Sum(row => row.T3.Killed) > 10).Select(group => new { group.Key.Id, group.First().T1.Name }).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.id , T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Deaths.Join(context.Ships, T1 => T1.CausedByShipId, t2 => t2.Id, (T1, t2) => new { T1, t2 }).GroupBy(row => new { row.t2.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Id, group.First().t2.Name }).Take(1).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
    "result": "context.Battles.Where(row => row.BulgarianCommander == \"Kaloyan\" && row.LatinCommander == \"Baldwin I\").Select(row => new { row.Name }).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(DISTINCT RESULT) FROM battle",
    "result": "context.Battles.Select(row => row.Result).Distinct().Count();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );",
    "result": "context.Battles.Where(row => !context.Ships.Where(row => row.Tonnage == \"225\").Select(row => row.LostInBattle).Contains(row.Id)).Count();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
    "result": "context.Battles.Join(context.Ships, T1 => T1.Id, T2 => T2.LostInBattle, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Lettice\").Select(row => new { row.T1.Name, row.T1.Date }).Intersect(context.Battles.Join(context.Ships, T1 => T1.Id, T2 => T2.LostInBattle, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"HMS Atalanta\").Select(row => new { row.T1.Name, row.T1.Date })).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'",
    "result": "context.Battles.Select(row => new { row.Name, row.Result, row.BulgarianCommander }).Except(context.Battles.Join(context.Ships, T1 => T1.Id, T2 => T2.LostInBattle, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Location == \"English Channel\").Select(row => new { row.T1.Name, row.T1.Result, row.T1.BulgarianCommander })).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT note FROM death WHERE note LIKE '%East%'",
    "result": "context.Deaths.Where(row => EF.Functions.Like(row.Note, \"%East%\")).Select(row => new { row.Note }).ToList();",
    "db_name": "battle_death",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM singer",
    "result": "context.Singers.Count();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "result": "context.Singers.OrderBy(row => row.NetWorthMillions).Select(row => new { row.Name }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Birth_Year , Citizenship FROM singer",
    "result": "context.Singers.Select(row => new { row.BirthYear, row.Citizenship }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "result": "context.Singers.Where(row => row.Citizenship != \"France\").Select(row => new { row.Name }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
    "result": "context.Singers.Where(row => row.BirthYear == 1948 || row.BirthYear == 1949).Select(row => new { row.Name }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "result": "context.Singers.OrderByDescending(row => row.NetWorthMillions).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "result": "context.Singers.GroupBy(row => new { row.Citizenship }).Select(group => new { group.Key.Citizenship, Count = group.Count() }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Singers.GroupBy(row => new { row.Citizenship }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Citizenship }).Take(1).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
    "result": "context.Singers.GroupBy(row => new { row.Citizenship }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Citizenship }).Take(1).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "result": "context.Singers.GroupBy(row => new { row.Citizenship }).Select(group => new { group.Key.Citizenship, MaxNetWorthMillions = group.Select(row => row.NetWorthMillions).Max() }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
    "result": "context.Singers.Join(context.Songs, T1 => T1.SingerId, T2 => T2.SingerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Title, row.T1.Name }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
    "result": "context.Singers.Join(context.Songs, T1 => T1.SingerId, T2 => T2.SingerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Sales > 300000).Select(row => new { row.T1.Name }).Distinct().ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
    "result": "context.Singers.Join(context.Songs, T1 => T1.SingerId, T2 => T2.SingerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Where(group => group.Count() > 1).Select(group => new { group.Key.Name }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
    "result": "context.Singers.Join(context.Songs, T1 => T1.SingerId, T2 => T2.SingerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Select(group => new { group.Key.Name, SumSales = group.Select(row => row.T2.Sales).Sum() }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
    "result": "context.Singers.Where(row => !context.Songs.Select(row => row.SingerId).Contains(row.SingerId)).Select(row => new { row.Name }).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
    "result": "context.Singers.Where(row => row.BirthYear < 1945).Select(row => row.Citizenship).Intersect(context.Singers.Where(row => row.BirthYear > 1955).Select(row => row.Citizenship)).ToList();",
    "db_name": "singer",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM country WHERE IndepYear > 1950",
    "result": "context.Countries.Where(row => row.IndepYear > 1950).Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM country WHERE GovernmentForm = \"Republic\"",
    "result": "context.Countries.Where(row => row.GovernmentForm == \"Republic\").Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
    "result": "context.Countries.Where(row => row.Region == \"Caribbean\").Select(row => row.SurfaceArea).Sum();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Continent FROM country WHERE Name = \"Anguilla\"",
    "result": "context.Countries.Where(row => row.Name == \"Anguilla\").Select(row => new { row.Continent }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
    "result": "context.Countries.Join(context.Cities, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Kabul\").Select(row => new { row.T1.Region }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Aruba\").OrderByDescending(row => row.T2.Percentage).Select(row => new { row.T2.Language }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
    "result": "context.Countries.Where(row => row.Name == \"Brazil\").Select(row => new { row.Population, row.LifeExpectancy }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Population , Region FROM country WHERE Name = \"Angola\"",
    "result": "context.Countries.Where(row => row.Name == \"Angola\").Select(row => new { row.Population, row.Region }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
    "result": "context.Countries.Where(row => row.Region == \"Central Africa\").Select(row => (double) row.LifeExpectancy).Average();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "result": "context.Countries.Where(row => row.Continent == \"Asia\").OrderBy(row => row.LifeExpectancy).Select(row => new { row.Name }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
    "result": "context.Countries.Where(row => row.Continent == \"Asia\").GroupBy(row => 1).Select(group => new { SumPopulation = group.Select(row => row.Population).Sum(), MaxGnp = group.Select(row => row.Gnp).Max() }).ToList();",
    "db_name": "world_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false
  },
  {
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
    "result": "context.Countries.Where(row => row.Continent == \"Africa\" && row.GovernmentForm == \"Republic\").Select(row => (double) row.LifeExpectancy).Average();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
    "result": "context.Countries.Where(row => row.Continent == \"Asia\" || row.Continent == \"Europe\").Select(row => row.SurfaceArea).Sum();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT sum(Population) FROM city WHERE District = \"Gelderland\"",
    "result": "context.Cities.Where(row => row.District == \"Gelderland\").Select(row => row.Population).Sum();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
    "result": "context.Countries.Where(row => row.GovernmentForm == \"US Territory\").GroupBy(row => 1).Select(group => new { AverageGnp = group.Select(row => row.Gnp).Average(), SumPopulation = group.Select(row => row.Population).Sum() }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "result": "context.Countrylanguages.Select(row => row.Language).Distinct().Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
    "result": "context.Countries.Where(row => row.Continent == \"Africa\").Select(row => row.GovernmentForm).Distinct().Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Aruba\").Select(row => row.T2.Language).Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Afghanistan\" && row.T2.IsOfficial == \"T\").Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Name }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Continent }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Continent }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\").Select(row => row.T1.Name).Intersect(context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"Dutch\").Select(row => row.T1.Name)).Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\").Select(row => row.T1.Name).Intersect(context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"French\").Select(row => row.T1.Name)).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\" && row.T2.IsOfficial == \"T\").Select(row => row.T1.Name).Intersect(context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"French\" && row.T2.IsOfficial == \"T\").Select(row => row.T1.Name)).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"Chinese\").Select(row => row.T1.Continent).Distinct().Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\" || row.T2.Language == \"Dutch\").Select(row => new { row.T1.Region }).Distinct().ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"english\" and isofficial = \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"dutch\" and isofficial = \"t\"",
    "result": "context.Countries.Join(context.Countrylanguages, t1 => t1.Code, t2 => t2.CountryCode, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Language == \"english\" && row.t2.IsOfficial == \"t\").Select(row => row.t1.Name).Union(context.Countries.Join(context.Countrylanguages, t1 => t1.Code, t2 => t2.CountryCode, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Language == \"dutch\" && row.t2.IsOfficial == \"t\").Select(row => row.t1.Name)).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND IsOfficial = \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\" AND IsOfficial = \"T\"",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\" && row.T2.IsOfficial == \"T\").Select(row => new { rowT1..Code, rowT1..Name, rowT1..Continent, rowT1..Region, rowT1..SurfaceArea, rowT1..IndepYear, rowT1..Population, rowT1..LifeExpectancy, rowT1..Gnp, rowT1..Gnpold, rowT1..LocalName, rowT1..GovernmentForm, rowT1..HeadOfState, rowT1..Capital, rowT1..Code2, rowT2..CountryCode, rowT2..Language, rowT2..IsOfficial, rowT2..Percentage }).Union(context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"Dutch\" && row.T2.IsOfficial == \"T\").Select(row => new { rowT1..Code, rowT1..Name, rowT1..Continent, rowT1..Region, rowT1..SurfaceArea, rowT1..IndepYear, rowT1..Population, rowT1..LifeExpectancy, rowT1..Gnp, rowT1..Gnpold, rowT1..LocalName, rowT1..GovernmentForm, rowT1..HeadOfState, rowT1..Capital, rowT1..Code2, rowT2..CountryCode, rowT2..Language, rowT2..IsOfficial, rowT2..Percentage })).ToList();",
    "db_name": "world_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,1080): error CS0103: The name 'Percentage' does not exist in the current context [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    114 Error(s)\n\nTime Elapsed 00:00:01.31",
    "should_retest": false
  },
  {
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Continent == \"Asia\").GroupBy(row => new { row.T2.Language }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Language }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.GovernmentForm == \"Republic\").GroupBy(row => new { row.T2.Language }).Where(group => group.Count() == 1).Select(group => new { group.Key.Language }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "result": "context.Cities.Join(context.Countrylanguages, T1 => T1.CountryCode, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\").OrderByDescending(row => row.T1.Population).Select(row => new { row.T1.Name, row.T1.Population }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "result": "context.Countries.Where(row => row.Continent == \"Asia\").OrderByDescending(row => row.SurfaceArea).Select(row => new { row.Name, row.Population, row.LifeExpectancy }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
    "result": "context.Countries.Where(row => !context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\" && row.T2.IsOfficial == \"T\").Select(row => row.T1.Name).Contains(row.Name)).Select(row => (double) row.LifeExpectancy).Average();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
    "result": "context.Countries.Where(row => !context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"English\").Select(row => row.T1.Name).Contains(row.Name)).Select(row => row.Population).Sum();",
    "db_name": "world_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false
  },
  {
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.HeadOfState == \"Beatrix\" && row.T2.IsOfficial == \"T\").Select(row => new { row.T2.Language }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.IndepYear < 1930 && row.T2.IsOfficial == \"T\").Select(row => row.T2.Language).Distinct().Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\")",
    "result": "context.Countries.Where(row => row.SurfaceArea > context.Countries.Where(row => row.Continent == \"Europe\").Select(row => row.SurfaceArea).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT max(population) FROM country WHERE Continent = \"Asia\")",
    "result": "context.Countries.Where(row => row.Continent == \"Africa\" && row.Population < context.Countries.Where(row => row.Continent == \"Asia\").Select(row => row.Population).Max()).Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT min(population) FROM country WHERE Continent = \"Asia\")",
    "result": "context.Countries.Where(row => row.Continent == \"Africa\" && row.Population < context.Countries.Where(row => row.Continent == \"Asia\").Select(row => row.Population).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT max(population) FROM country WHERE Continent = \"Africa\")",
    "result": "context.Countries.Where(row => row.Continent == \"Asia\" && row.Population > context.Countries.Where(row => row.Continent == \"Africa\").Select(row => row.Population).Max()).Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT min(population) FROM country WHERE Continent = \"Africa\")",
    "result": "context.Countries.Where(row => row.Continent == \"Asia\" && row.Population > context.Countries.Where(row => row.Continent == \"Africa\").Select(row => row.Population).Min()).Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
    "result": "context.Countrylanguages.Select(row => row.CountryCode).Except(context.Countrylanguages.Where(row => row.Language == \"English\").Select(row => row.CountryCode)).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "result": "context.Countrylanguages.Where(row => row.Language != \"English\").Select(row => new { row.CountryCode }).Distinct().ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
    "result": "context.Countries.Where(row => row.GovernmentForm != \"Republic\").Select(row => row.Code).Except(context.Countrylanguages.Where(row => row.Language == \"English\").Select(row => row.CountryCode)).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
    "result": "context.Countries.Join(context.Cities, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Continent == \"Europe\" && !context.Countries.Join(context.Countrylanguages, T3 => T3.Code, T4 => T4.CountryCode, (T3, T4) => new { T3, T4 }).Where(row => row.T4.IsOfficial == \"T\" && row.T4.Language == \"English\").Select(row => row.T3.Name).Contains(row.T1.Name)).Select(row => new { row.T2.Name }).Distinct().ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 't' and t2.language = 'chinese' and t1.continent = \"asia\"",
    "result": "context.Countries.Join(context.Countrylanguages, t1 => t1.Code, t2 => t2.CountryCode, (t1, t2) => new { t1, t2 }).Join(context.Cities, joined => joined.t1.Code, t3 => t3.CountryCode, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.IsOfficial == \"t\" && row.t2.Language == \"chinese\" && row.t1.Continent == \"asia\").Select(row => new { row.t3.Name }).Distinct().ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = \"Asia\"",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Join(context.Cities, joined => joined.T1.Code, T3 => T3.CountryCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.IsOfficial == \"T\" && row.T2.Language == \"Chinese\" && row.T1.Continent == \"Asia\").Select(row => new { row.T3.Name }).Distinct().ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
    "result": "context.Countries.OrderBy(row => row.Population).Select(row => new { row.Name, row.SurfaceArea, row.IndepYear }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "result": "context.Countries.OrderByDescending(row => row.SurfaceArea).Select(row => new { row.Name, row.Population, row.HeadOfState }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
    "result": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Where(group => group.Count() > 2).Select(group => new { CountLanguage = group.Select(row => row.T2.Language).Count(), group.Key.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
    "result": "context.Cities.Where(row => row.Population > context.Cities.Select(row => row.Population).Average()).GroupBy(row => new { row.District }).Select(group => new { Count = group.Count(), group.Key.District }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
    "result": "context.Countries.GroupBy(row => new { row.GovernmentForm }).Where(group => group.Average(row => row.LifeExpectancy) > 72).Select(group => new { SumPopulation = group.Select(row => row.Population).Sum(), group.Key.GovernmentForm }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
    "result": "context.Countries.GroupBy(row => new { row.Continent }).Select(group => new { SumPopulation = group.Select(row => row.Population).Sum(), AverageLifeExpectancy = group.Select(row => row.LifeExpectancy).Average(), group.Key.Continent }).Where(group => group.AverageLifeExpectancy < 72).ToList();",
    "db_name": "world_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"\", linq_results: \"\" }",
    "should_retest": false
  },
  {
    "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "result": "context.Countries.OrderByDescending(row => row.SurfaceArea).Select(row => new { row.Name, row.SurfaceArea }).Take(5).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "result": "context.Countries.OrderByDescending(row => row.Population).Select(row => new { row.Name }).Take(3).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "result": "context.Countries.OrderBy(row => row.Population).Select(row => new { row.Name }).Take(3).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM country WHERE continent = \"Asia\"",
    "result": "context.Countries.Where(row => row.Continent == \"Asia\").Count();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
    "result": "context.Countries.Where(row => row.Continent == \"Europe\" && row.Population == \"80000\").Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,72): error CS0019: Operator '==' cannot be applied to operands of type 'int' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.40",
    "should_retest": false
  },
  {
    "query": "select sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
    "result": "context.Countries.Where(row => row.Continent == \"north america\" && row.SurfaceArea > 3000).GroupBy(row => 1).Select(group => new { SumPopulation = group.Select(row => row.Population).Sum(), AverageSurfaceArea = group.Select(row => row.SurfaceArea).Average() }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
    "result": "context.Cities.Where(row => row.Population >= 160000 && row.Population <= 900000).Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "select name from city where population between 160000 and 900000",
    "result": "context.Cities.Where(row => row.Population >= 160000 && row.Population <= 900000).Select(row => new { row.Name }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Countrylanguages.GroupBy(row => new { row.Language }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Language }).Take(1).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "result": "context.Countrylanguages.GroupBy(row => new { row.CountryCode }).Select(group => new { group.First().Language, group.Key.CountryCode, MaxPercentage = group.Select(row => row.Percentage).Max() }).ToList();",
    "db_name": "world_1",
    "status": "CodeFailed",
    "error": "ExceptionDetails { sql_results: \"[{0: Papiamento, 1: ABW, 2: 76,7}, {0: Pashto, 1: AFG, 2: 52,4}, {0: Ovimbundu, 1: AGO, 2: 37,2}, {0: English, 1: AIA, 2: 0}, {0: Albaniana, 1: ALB, 2: 97,9}, {0: Spanish, 1: AND, 2: 44,6}, {0: Papiamento, 1: ANT, 2: 86,2}, {0: Arabic, 1: ARE, 2: 42}, {0: Spanish, 1: ARG, 2: 96,8}, {0: Armenian, 1: ARM, 2: 93,4}, {0: Samoan, 1: ASM, 2: 90,6}, {0: Creole English, 1: ATG, 2: 95,7}, {0: English, 1: AUS, 2: 81,2}, {0: German, 1: AUT, 2: 92}, {0: Azerbaijani, 1: AZE, 2: 89}, {0: Kirundi, 1: BDI, 2: 98,1}, {0: Dutch, 1: BEL, 2: 59,2}, {0: Fon, 1: BEN, 2: 39,8}, {0: Mossi, 1: BFA, 2: 50,2}, {0: Bengali, 1: BGD, 2: 97,7}, {0: Bulgariana, 1: BGR, 2: 83,2}, {0: Arabic, 1: BHR, 2: 67,7}, {0: Creole English, 1: BHS, 2: 89,7}, {0: Serbo-Croatian, 1: BIH, 2: 99,2}, {0: Belorussian, 1: BLR, 2: 65,6}, {0: English, 1: BLZ, 2: 50,8}, {0: English, 1: BMU, 2: 100}, {0: Spanish, 1: BOL, 2: 87,7}, {0: Portuguese, 1: BRA, 2: 97,5}, {0: Bajan, 1: BRB, 2: 95,1}, {0: Malay, 1: BRN, 2: 45,5}, {0: Dzongkha, 1: BTN, 2: 50}, {0: Tswana, 1: BWA, 2: 75,5}, {0: Gbaya, 1: CAF, 2: 23,8}, {0: English, 1: CAN, 2: 60,4}, {0: English, 1: CCK, 2: 0}, {0: German, 1: CHE, 2: 63,6}, {0: Spanish, 1: CHL, 2: 89,7}, {0: Chinese, 1: CHN, 2: 92}, {0: Akan, 1: CIV, 2: 30}, {0: Fang, 1: CMR, 2: 19,7}, {0: Luba, 1: COD, 2: 18}, {0: Kongo, 1: COG, 2: 51,5}, {0: English, 1: COK, 2: 0}, {0: Spanish, 1: COL, 2: 99}, {0: Comorian, 1: COM, 2: 75}, {0: Crioulo, 1: CPV, 2: 100}, {0: Spanish, 1: CRI, 2: 97,5}, {0: Spanish, 1: CUB, 2: 100}, {0: Chinese, 1: CXR, 2: 0}, {0: English, 1: CYM, 2: 0}, {0: Greek, 1: CYP, 2: 74,1}, {0: Czech, 1: CZE, 2: 81,2}, {0: German, 1: DEU, 2: 91,3}, {0: Somali, 1: DJI, 2: 43,9}, {0: Creole English, 1: DMA, 2: 100}, {0: Danish, 1: DNK, 2: 93,5}, {0: Spanish, 1: DOM, 2: 98}, {0: Arabic, 1: DZA, 2: 86}, {0: Spanish, 1: ECU, 2: 93}, {0: Arabic, 1: EGY, 2: 98,8}, {0: Tigrinja, 1: ERI, 2: 49,1}, {0: Arabic, 1: ESH, 2: 100}, {0: Spanish, 1: ESP, 2: 74,4}, {0: Estonian, 1: EST, 2: 65,3}, {0: Oromo, 1: ETH, 2: 31}, {0: Finnish, 1: FIN, 2: 92,7}, {0: Fijian, 1: FJI, 2: 50,8}, {0: English, 1: FLK, 2: 0}, {0: French, 1: FRA, 2: 93,6}, {0: Faroese, 1: FRO, 2: 100}, {0: Trukese, 1: FSM, 2: 41,6}, {0: Fang, 1: GAB, 2: 35,8}, {0: English, 1: GBR, 2: 97,3}, {0: Georgiana, 1: GEO, 2: 71,7}, {0: Akan, 1: GHA, 2: 52,4}, {0: English, 1: GIB, 2: 88,9}, {0: Ful, 1: GIN, 2: 38,6}, {0: Creole French, 1: GLP, 2: 95}, {0: Malinke, 1: GMB, 2: 34,1}, {0: Crioulo, 1: GNB, 2: 36,4}, {0: Fang, 1: GNQ, 2: 84,8}, {0: Greek, 1: GRC, 2: 98,5}, {0: Creole English, 1: GRD, 2: 100}, {0: Greenlandic, 1: GRL, 2: 87,5}, {0: Spanish, 1: GTM, 2: 64,7}, {0: Creole French, 1: GUF, 2: 94,3}, {0: English, 1: GUM, 2: 37,5}, {0: Creole English, 1: GUY, 2: 96,4}, {0: Canton Chinese, 1: HKG, 2: 88,7}, {0: Spanish, 1: HND, 2: 97,2}, {0: Serbo-Croatian, 1: HRV, 2: 95,9}, {0: Haiti Creole, 1: HTI, 2: 100}, {0: Hungarian, 1: HUN, 2: 98,5}, {0: Javanese, 1: IDN, 2: 39,4}, {0: Hindi, 1: IND, 2: 39,9}, {0: English, 1: IRL, 2: 98,4}, {0: Persian, 1: IRN, 2: 45,7}, {0: Arabic, 1: IRQ, 2: 77,2}, {0: Icelandic, 1: ISL, 2: 95,7}, {0: Hebrew, 1: ISR, 2: 63,1}, {0: Italian, 1: ITA, 2: 94,1}, {0: Creole English, 1: JAM, 2: 94,2}, {0: Arabic, 1: JOR, 2: 97,9}, {0: Japanese, 1: JPN, 2: 99,1}, {0: Kazakh, 1: KAZ, 2: 46}, {0: Kikuyu, 1: KEN, 2: 20,9}, {0: Kirgiz, 1: KGZ, 2: 59,7}, {0: Khmer, 1: KHM, 2: 88,6}, {0: Kiribati, 1: KIR, 2: 98,9}, {0: Creole English, 1: KNA, 2: 100}, {0: Korean, 1: KOR, 2: 99,9}, {0: Arabic, 1: KWT, 2: 78,1}, {0: Lao, 1: LAO, 2: 67,2}, {0: Arabic, 1: LBN, 2: 93}, {0: Kpelle, 1: LBR, 2: 19,5}, {0: Arabic, 1: LBY, 2: 96}, {0: Creole French, 1: LCA, 2: 80}, {0: German, 1: LIE, 2: 89}, {0: Singali, 1: LKA, 2: 60,3}, {0: Sotho, 1: LSO, 2: 85}, {0: Lithuanian, 1: LTU, 2: 81,6}, {0: Luxembourgish, 1: LUX, 2: 64,4}, {0: Latvian, 1: LVA, 2: 55,1}, {0: Canton Chinese, 1: MAC, 2: 85,6}, {0: Arabic, 1: MAR, 2: 65}, {0: French, 1: MCO, 2: 41,9}, {0: Romanian, 1: MDA, 2: 61,9}, {0: Malagasy, 1: MDG, 2: 98,9}, {0: Dhivehi, 1: MDV, 2: 100}, {0: Spanish, 1: MEX, 2: 92,1}, {0: Marshallese, 1: MHL, 2: 96,8}, {0: Macedonian, 1: MKD, 2: 66,5}, {0: Bambara, 1: MLI, 2: 31,8}, {0: Maltese, 1: MLT, 2: 95,8}, {0: Burmese, 1: MMR, 2: 69}, {0: Mongolian, 1: MNG, 2: 78,8}, {0: Philippene Languages, 1: MNP, 2: 34,1}, {0: Makua, 1: MOZ, 2: 27,8}, {0: Hassaniya, 1: MRT, 2: 81,7}, {0: English, 1: MSR, 2: 0}, {0: Creole French, 1: MTQ, 2: 96,6}, {0: Creole French, 1: MUS, 2: 70,6}, {0: Chichewa, 1: MWI, 2: 58,3}, {0: Malay, 1: MYS, 2: 58,4}, {0: Mahoré, 1: MYT, 2: 41,9}, {0: Ovambo, 1: NAM, 2: 50,7}, {0: Malenasian Languages, 1: NCL, 2: 45,4}, {0: Hausa, 1: NER, 2: 53,1}, {0: English, 1: NFK, 2: 0}, {0: Joruba, 1: NGA, 2: 21,4}, {0: Spanish, 1: NIC, 2: 97,6}, {0: English, 1: NIU, 2: 0}, {0: Dutch, 1: NLD, 2: 95,6}, {0: Norwegian, 1: NOR, 2: 96,6}, {0: Nepali, 1: NPL, 2: 50,4}, {0: Nauru, 1: NRU, 2: 57,5}, {0: English, 1: NZL, 2: 87}, {0: Arabic, 1: OMN, 2: 76,7}, {0: Punjabi, 1: PAK, 2: 48,2}, {0: Spanish, 1: PAN, 2: 76,8}, {0: Pitcairnese, 1: PCN, 2: 0}, {0: Spanish, 1: PER, 2: 79,8}, {0: Pilipino, 1: PHL, 2: 29,3}, {0: Palau, 1: PLW, 2: 82,2}, {0: Papuan Languages, 1: PNG, 2: 78,1}, {0: Polish, 1: POL, 2: 97,6}, {0: Spanish, 1: PRI, 2: 51,3}, {0: Korean, 1: PRK, 2: 99,9}, {0: Portuguese, 1: PRT, 2: 99}, {0: Spanish, 1: PRY, 2: 55,1}, {0: Arabic, 1: PSE, 2: 95,9}, {0: Tahitian, 1: PYF, 2: 46,4}, {0: Arabic, 1: QAT, 2: 40,7}, {0: Creole French, 1: REU, 2: 91,5}, {0: Romanian, 1: ROM, 2: 90,7}, {0: Russian, 1: RUS, 2: 86,6}, {0: Rwanda, 1: RWA, 2: 100}, {0: Arabic, 1: SAU, 2: 95}, {0: Arabic, 1: SDN, 2: 49,4}, {0: Wolof, 1: SEN, 2: 48,1}, {0: Chinese, 1: SGP, 2: 77,1}, {0: English, 1: SHN, 2: 0}, {0: Norwegian, 1: SJM, 2: 0}, {0: Malenasian Languages, 1: SLB, 2: 85,6}, {0: Mende, 1: SLE, 2: 34,8}, {0: Spanish, 1: SLV, 2: 100}, {0: Italian, 1: SMR, 2: 100}, {0: Somali, 1: SOM, 2: 98,3}, {0: French, 1: SPM, 2: 0}, {0: Crioulo, 1: STP, 2: 86,3}, {0: Sranantonga, 1: SUR, 2: 81}, {0: Slovak, 1: SVK, 2: 85,6}, {0: Slovene, 1: SVN, 2: 87,9}, {0: Swedish, 1: SWE, 2: 89,5}, {0: Swazi, 1: SWZ, 2: 89,9}, {0: Seselwa, 1: SYC, 2: 91,3}, {0: Arabic, 1: SYR, 2: 90}, {0: English, 1: TCA, 2: 0}, {0: Sara, 1: TCD, 2: 27,7}, {0: Ewe, 1: TGO, 2: 23,2}, {0: Thai, 1: THA, 2: 52,6}, {0: Tadzhik, 1: TJK, 2: 62,2}, {0: English, 1: TKL, 2: 0}, {0: Turkmenian, 1: TKM, 2: 76,7}, {0: Portuguese, 1: TMP, 2: 0}, {0: Tongan, 1: TON, 2: 98,3}, {0: English, 1: TTO, 2: 93,5}, {0: Arabic, 1: TUN, 2: 69,9}, {0: Turkish, 1: TUR, 2: 87,6}, {0: Tuvalu, 1: TUV, 2: 92,5}, {0: Min, 1: TWN, 2: 66,7}, {0: Nyamwesi, 1: TZA, 2: 21,1}, {0: Ganda, 1: UGA, 2: 18,1}, {0: Ukrainian, 1: UKR, 2: 64,7}, {0: English, 1: UMI, 2: 0}, {0: Spanish, 1: URY, 2: 95,7}, {0: English, 1: USA, 2: 86,2}, {0: Uzbek, 1: UZB, 2: 72,6}, {0: Italian, 1: VAT, 2: 0}, {0: Creole English, 1: VCT, 2: 99,1}, {0: Spanish, 1: VEN, 2: 96,9}, {0: English, 1: VGB, 2: 0}, {0: English, 1: VIR, 2: 81,7}, {0: Vietnamese, 1: VNM, 2: 86,8}, {0: Bislama, 1: VUT, 2: 56,6}, {0: Futuna, 1: WLF, 2: 0}, {0: Samoan-English, 1: WSM, 2: 52}, {0: Arabic, 1: YEM, 2: 99,6}, {0: Serbo-Croatian, 1: YUG, 2: 75,2}, {0: Zulu, 1: ZAF, 2: 22,7}, {0: Bemba, 1: ZMB, 2: 29,7}, {0: Shona, 1: ZWE, 2: 72,1}]\", linq_results: \"[{0: Dutch, 1: ABW, 2: 76,7}, {0: Balochi, 1: AFG, 2: 52,4}, {0: Ambo, 1: AGO, 2: 37,2}, {0: English, 1: AIA, 2: 0}, {0: Albaniana, 1: ALB, 2: 97,9}, {0: Catalan, 1: AND, 2: 44,6}, {0: Dutch, 1: ANT, 2: 86,2}, {0: Arabic, 1: ARE, 2: 42}, {0: Indian Languages, 1: ARG, 2: 96,8}, {0: Armenian, 1: ARM, 2: 93,4}, {0: English, 1: ASM, 2: 90,6}, {0: Creole English, 1: ATG, 2: 95,7}, {0: Arabic, 1: AUS, 2: 81,2}, {0: Czech, 1: AUT, 2: 92}, {0: Armenian, 1: AZE, 2: 89}, {0: French, 1: BDI, 2: 98,1}, {0: Arabic, 1: BEL, 2: 59,2}, {0: Adja, 1: BEN, 2: 39,8}, {0: Busansi, 1: BFA, 2: 50,2}, {0: Bengali, 1: BGD, 2: 97,7}, {0: Bulgariana, 1: BGR, 2: 83,2}, {0: Arabic, 1: BHR, 2: 67,7}, {0: Creole English, 1: BHS, 2: 89,7}, {0: Serbo-Croatian, 1: BIH, 2: 99,2}, {0: Belorussian, 1: BLR, 2: 65,6}, {0: English, 1: BLZ, 2: 50,8}, {0: English, 1: BMU, 2: 100}, {0: Aimará, 1: BOL, 2: 87,7}, {0: German, 1: BRA, 2: 97,5}, {0: Bajan, 1: BRB, 2: 95,1}, {0: Chinese, 1: BRN, 2: 45,5}, {0: Asami, 1: BTN, 2: 50}, {0: Khoekhoe, 1: BWA, 2: 75,5}, {0: Banda, 1: CAF, 2: 23,8}, {0: Chinese, 1: CAN, 2: 60,4}, {0: English, 1: CCK, 2: 0}, {0: French, 1: CHE, 2: 63,6}, {0: Aimará, 1: CHL, 2: 89,7}, {0: Chinese, 1: CHN, 2: 92}, {0: Akan, 1: CIV, 2: 30}, {0: Bamileke-bamum, 1: CMR, 2: 19,7}, {0: Boa, 1: COD, 2: 18}, {0: Kongo, 1: COG, 2: 51,5}, {0: English, 1: COK, 2: 0}, {0: Arawakan, 1: COL, 2: 99}, {0: Comorian, 1: COM, 2: 75}, {0: Crioulo, 1: CPV, 2: 100}, {0: Chibcha, 1: CRI, 2: 97,5}, {0: Spanish, 1: CUB, 2: 100}, {0: Chinese, 1: CXR, 2: 0}, {0: English, 1: CYM, 2: 0}, {0: Greek, 1: CYP, 2: 74,1}, {0: Czech, 1: CZE, 2: 81,2}, {0: German, 1: DEU, 2: 91,3}, {0: Afar, 1: DJI, 2: 43,9}, {0: Creole English, 1: DMA, 2: 100}, {0: Arabic, 1: DNK, 2: 93,5}, {0: Creole French, 1: DOM, 2: 98}, {0: Arabic, 1: DZA, 2: 86}, {0: Ketšua, 1: ECU, 2: 93}, {0: Arabic, 1: EGY, 2: 98,8}, {0: Afar, 1: ERI, 2: 49,1}, {0: Arabic, 1: ESH, 2: 100}, {0: Basque, 1: ESP, 2: 74,4}, {0: Belorussian, 1: EST, 2: 65,3}, {0: Amhara, 1: ETH, 2: 31}, {0: Estonian, 1: FIN, 2: 92,7}, {0: Fijian, 1: FJI, 2: 50,8}, {0: English, 1: FLK, 2: 0}, {0: Arabic, 1: FRA, 2: 93,6}, {0: Danish, 1: FRO, 2: 100}, {0: Kosrean, 1: FSM, 2: 41,6}, {0: Fang, 1: GAB, 2: 35,8}, {0: English, 1: GBR, 2: 97,3}, {0: Abhyasi, 1: GEO, 2: 71,7}, {0: Akan, 1: GHA, 2: 52,4}, {0: Arabic, 1: GIB, 2: 88,9}, {0: Ful, 1: GIN, 2: 38,6}, {0: Creole French, 1: GLP, 2: 95}, {0: Diola, 1: GMB, 2: 34,1}, {0: Balante, 1: GNB, 2: 36,4}, {0: Bubi, 1: GNQ, 2: 84,8}, {0: Greek, 1: GRC, 2: 98,5}, {0: Creole English, 1: GRD, 2: 100}, {0: Danish, 1: GRL, 2: 87,5}, {0: Cakchiquel, 1: GTM, 2: 64,7}, {0: Creole French, 1: GUF, 2: 94,3}, {0: Chamorro, 1: GUM, 2: 37,5}, {0: Arawakan, 1: GUY, 2: 96,4}, {0: Canton Chinese, 1: HKG, 2: 88,7}, {0: Creole English, 1: HND, 2: 97,2}, {0: Serbo-Croatian, 1: HRV, 2: 95,9}, {0: French, 1: HTI, 2: 100}, {0: German, 1: HUN, 2: 98,5}, {0: Bali, 1: IDN, 2: 39,4}, {0: Asami, 1: IND, 2: 39,9}, {0: English, 1: IRL, 2: 98,4}, {0: Arabic, 1: IRN, 2: 45,7}, {0: Arabic, 1: IRQ, 2: 77,2}, {0: English, 1: ISL, 2: 95,7}, {0: Arabic, 1: ISR, 2: 63,1}, {0: Albaniana, 1: ITA, 2: 94,1}, {0: Creole English, 1: JAM, 2: 94,2}, {0: Arabic, 1: JOR, 2: 97,9}, {0: Ainu, 1: JPN, 2: 99,1}, {0: German, 1: KAZ, 2: 46}, {0: Gusii, 1: KEN, 2: 20,9}, {0: Kazakh, 1: KGZ, 2: 59,7}, {0: Chinese, 1: KHM, 2: 88,6}, {0: Kiribati, 1: KIR, 2: 98,9}, {0: Creole English, 1: KNA, 2: 100}, {0: Chinese, 1: KOR, 2: 99,9}, {0: Arabic, 1: KWT, 2: 78,1}, {0: Lao, 1: LAO, 2: 67,2}, {0: Arabic, 1: LBN, 2: 93}, {0: Bassa, 1: LBR, 2: 19,5}, {0: Arabic, 1: LBY, 2: 96}, {0: Creole French, 1: LCA, 2: 80}, {0: German, 1: LIE, 2: 89}, {0: Mixed Languages, 1: LKA, 2: 60,3}, {0: English, 1: LSO, 2: 85}, {0: Belorussian, 1: LTU, 2: 81,6}, {0: French, 1: LUX, 2: 64,4}, {0: Belorussian, 1: LVA, 2: 55,1}, {0: Canton Chinese, 1: MAC, 2: 85,6}, {0: Arabic, 1: MAR, 2: 65}, {0: English, 1: MCO, 2: 41,9}, {0: Bulgariana, 1: MDA, 2: 61,9}, {0: French, 1: MDG, 2: 98,9}, {0: Dhivehi, 1: MDV, 2: 100}, {0: Mixtec, 1: MEX, 2: 92,1}, {0: English, 1: MHL, 2: 96,8}, {0: Albaniana, 1: MKD, 2: 66,5}, {0: Bambara, 1: MLI, 2: 31,8}, {0: English, 1: MLT, 2: 95,8}, {0: Burmese, 1: MMR, 2: 69}, {0: Bajad, 1: MNG, 2: 78,8}, {0: Carolinian, 1: MNP, 2: 34,1}, {0: Chuabo, 1: MOZ, 2: 27,8}, {0: Ful, 1: MRT, 2: 81,7}, {0: English, 1: MSR, 2: 0}, {0: Creole French, 1: MTQ, 2: 96,6}, {0: Bhojpuri, 1: MUS, 2: 70,6}, {0: Chichewa, 1: MWI, 2: 58,3}, {0: Chinese, 1: MYS, 2: 58,4}, {0: French, 1: MYT, 2: 41,9}, {0: Afrikaans, 1: NAM, 2: 50,7}, {0: French, 1: NCL, 2: 45,4}, {0: Ful, 1: NER, 2: 53,1}, {0: English, 1: NFK, 2: 0}, {0: Bura, 1: NGA, 2: 21,4}, {0: Creole English, 1: NIC, 2: 97,6}, {0: English, 1: NIU, 2: 0}, {0: Arabic, 1: NLD, 2: 95,6}, {0: Danish, 1: NOR, 2: 96,6}, {0: Bhojpuri, 1: NPL, 2: 50,4}, {0: Chinese, 1: NRU, 2: 57,5}, {0: English, 1: NZL, 2: 87}, {0: Arabic, 1: OMN, 2: 76,7}, {0: Balochi, 1: PAK, 2: 48,2}, {0: Arabic, 1: PAN, 2: 76,8}, {0: Pitcairnese, 1: PCN, 2: 0}, {0: Aimará, 1: PER, 2: 79,8}, {0: Bicol, 1: PHL, 2: 29,3}, {0: Chinese, 1: PLW, 2: 82,2}, {0: Malenasian Languages, 1: PNG, 2: 78,1}, {0: Belorussian, 1: POL, 2: 97,6}, {0: English, 1: PRI, 2: 51,3}, {0: Chinese, 1: PRK, 2: 99,9}, {0: Portuguese, 1: PRT, 2: 99}, {0: German, 1: PRY, 2: 55,1}, {0: Arabic, 1: PSE, 2: 95,9}, {0: Chinese, 1: PYF, 2: 46,4}, {0: Arabic, 1: QAT, 2: 40,7}, {0: Chinese, 1: REU, 2: 91,5}, {0: German, 1: ROM, 2: 90,7}, {0: Avarian, 1: RUS, 2: 86,6}, {0: French, 1: RWA, 2: 100}, {0: Arabic, 1: SAU, 2: 95}, {0: Arabic, 1: SDN, 2: 49,4}, {0: Diola, 1: SEN, 2: 48,1}, {0: Chinese, 1: SGP, 2: 77,1}, {0: English, 1: SHN, 2: 0}, {0: Norwegian, 1: SJM, 2: 0}, {0: Malenasian Languages, 1: SLB, 2: 85,6}, {0: Bullom-sherbro, 1: SLE, 2: 34,8}, {0: Nahua, 1: SLV, 2: 100}, {0: Italian, 1: SMR, 2: 100}, {0: Arabic, 1: SOM, 2: 98,3}, {0: French, 1: SPM, 2: 0}, {0: Crioulo, 1: STP, 2: 86,3}, {0: Hindi, 1: SUR, 2: 81}, {0: Czech and Moravian, 1: SVK, 2: 85,6}, {0: Hungarian, 1: SVN, 2: 87,9}, {0: Arabic, 1: SWE, 2: 89,5}, {0: Swazi, 1: SWZ, 2: 89,9}, {0: English, 1: SYC, 2: 91,3}, {0: Arabic, 1: SYR, 2: 90}, {0: English, 1: TCA, 2: 0}, {0: Arabic, 1: TCD, 2: 27,7}, {0: Ane, 1: TGO, 2: 23,2}, {0: Chinese, 1: THA, 2: 52,6}, {0: Russian, 1: TJK, 2: 62,2}, {0: English, 1: TKL, 2: 0}, {0: Kazakh, 1: TKM, 2: 76,7}, {0: Portuguese, 1: TMP, 2: 0}, {0: English, 1: TON, 2: 98,3}, {0: Creole English, 1: TTO, 2: 93,5}, {0: Arabic, 1: TUN, 2: 69,9}, {0: Arabic, 1: TUR, 2: 87,6}, {0: English, 1: TUV, 2: 92,5}, {0: Ami, 1: TWN, 2: 66,7}, {0: Chaga and Pare, 1: TZA, 2: 21,1}, {0: Acholi, 1: UGA, 2: 18,1}, {0: Belorussian, 1: UKR, 2: 64,7}, {0: English, 1: UMI, 2: 0}, {0: Spanish, 1: URY, 2: 95,7}, {0: Chinese, 1: USA, 2: 86,2}, {0: Karakalpak, 1: UZB, 2: 72,6}, {0: Italian, 1: VAT, 2: 0}, {0: Creole English, 1: VCT, 2: 99,1}, {0: Goajiro, 1: VEN, 2: 96,9}, {0: English, 1: VGB, 2: 0}, {0: English, 1: VIR, 2: 81,7}, {0: Chinese, 1: VNM, 2: 86,8}, {0: Bislama, 1: VUT, 2: 56,6}, {0: Futuna, 1: WLF, 2: 0}, {0: English, 1: WSM, 2: 52}, {0: Arabic, 1: YEM, 2: 99,6}, {0: Albaniana, 1: YUG, 2: 75,2}, {0: Afrikaans, 1: ZAF, 2: 22,7}, {0: Bemba, 1: ZMB, 2: 29,7}, {0: English, 1: ZWE, 2: 72,1}]\" }",
    "should_retest": false
  },
  {
    "query": "SELECT count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
    "result": "context.Countrylanguages.Where(row => row.Language == \"Spanish\").GroupBy(row => new { row.CountryCode }).Select(group => new { Count = group.Count(), MaxPercentage = group.Select(row => row.Percentage).Max() }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
    "result": "context.Countrylanguages.Where(row => row.Language == \"Spanish\").GroupBy(row => new { row.CountryCode }).Select(group => new { group.Key.CountryCode, MaxPercentage = group.Select(row => row.Percentage).Max() }).ToList();",
    "db_name": "world_1",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Other_Available_Features",
    "result": "context.OtherAvailableFeatures.Count();",
    "db_name": "real_estate_properties",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = \"AirCon\"",
    "result": "context.OtherAvailableFeatures.Join(context.RefFeatureTypes, T1 => T1.FeatureTypeCode, T2 => T2.FeatureTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FeatureName == \"AirCon\").Select(row => new { row.T2.FeatureTypeName }).ToList();",
    "db_name": "real_estate_properties",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
    "result": "context.Properties.Join(context.RefPropertyTypes, T1 => T1.PropertyTypeCode, T2 => T2.PropertyTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PropertyTypeCode }).Select(group => new { group.First().T2.PropertyTypeDescription }).ToList();",
    "db_name": "real_estate_properties",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT property_name FROM Properties WHERE property_type_code = \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code = \"Apartment\" AND room_count > 1",
    "result": "context.Properties.Where(row => row.PropertyTypeCode == \"House\").Select(row => row.PropertyName).Union(context.Properties.Where(row => row.PropertyTypeCode == \"Apartment\" && row.RoomCount > 1).Select(row => row.PropertyName)).ToList();",
    "db_name": "real_estate_properties",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT line_1 , line_2 FROM addresses",
    "result": "context.Addresses.Select(row => new { row.Line1, row.Line2 }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Courses",
    "result": "context.Courses.Count();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT course_description FROM Courses WHERE course_name = 'math'",
    "result": "context.Courses.Where(row => row.CourseName == \"math\").Select(row => new { row.CourseDescription }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
    "result": "context.Addresses.Where(row => row.City == \"Port Chelsea\").Select(row => new { row.ZipPostcode }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.DegreePrograms.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DepartmentId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.DepartmentName, group.Key.DepartmentId }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "select t2.department_name , t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
    "result": "context.DegreePrograms.Join(context.Departments, t1 => t1.DepartmentId, t2 => t2.DepartmentId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.DepartmentId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t2.DepartmentName, group.Key.DepartmentId }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "result": "context.DegreePrograms.Select(row => row.DepartmentId).Distinct().Count();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "result": "context.DegreePrograms.Select(row => row.DegreeSummaryName).Distinct().Count();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
    "result": "context.Departments.Join(context.DegreePrograms, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DepartmentName == \"engineer\").Count();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT section_name , section_description FROM Sections",
    "result": "context.Sections.Select(row => new { row.SectionName, row.SectionDescription }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
    "result": "context.Courses.Join(context.Sections, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CourseId }).Where(group => group.Count() <= 2).Select(group => new { group.First().T1.CourseName, group.Key.CourseId }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "result": "context.Sections.OrderByDescending(row => row.SectionName).Select(row => new { row.SectionName }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Semesters.Join(context.StudentEnrolments, T1 => T1.SemesterId, T2 => T2.SemesterId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SemesterId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.SemesterName, group.Key.SemesterId }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "result": "context.Departments.Where(row => EF.Functions.Like(row.DepartmentName, \"%computer%\")).Select(row => new { row.DepartmentDescription }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
    "result": "context.Students.Join(context.StudentEnrolments, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).Where(group => group.Count() == 2).Select(group => new { group.First().T1.FirstName, group.First().T1.MiddleName, group.First().T1.LastName, group.Key.StudentId }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
    "result": "context.Students.Join(context.StudentEnrolments, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Join(context.DegreePrograms, joined => joined.T2.DegreeProgramId, T3 => T3.DegreeProgramId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DegreeSummaryName == \"Bachelor\").Select(row => new { row.T1.FirstName, row.T1.MiddleName, row.T1.LastName }).Distinct().ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "result": "context.DegreePrograms.Join(context.StudentEnrolments, T1 => T1.DegreeProgramId, T2 => T2.DegreeProgramId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DegreeSummaryName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DegreeSummaryName }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.DegreePrograms.Join(context.StudentEnrolments, T1 => T1.DegreeProgramId, T2 => T2.DegreeProgramId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DegreeProgramId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DegreeProgramId, group.First().T1.DegreeSummaryName }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Students.Join(context.StudentEnrolments, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).Select(group => new { T1StudentId = group.Key.StudentId, group.First().T1.FirstName, group.First().T1.MiddleName, group.First().T1.LastName, Count = group.Count(), T1StudentId2 = group.Key.StudentId }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "result": "context.Semesters.Where(row => !context.StudentEnrolments.Select(row => row.SemesterId).Contains(row.SemesterId)).Select(row => new { row.SemesterName }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
    "result": "context.Courses.Join(context.StudentEnrolmentCourses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.CourseName }).Distinct().ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Courses.Join(context.StudentEnrolmentCourses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CourseName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CourseName }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
    "result": "context.Students.Join(context.Addresses, T1 => T1.CurrentAddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.StateProvinceCounty == \"NorthCarolina\").Select(row => row.T1.LastName).Except(context.Students.Join(context.StudentEnrolments, T3 => T3.StudentId, T4 => T4.StudentId, (T3, T4) => new { T3, T4 }).Select(row => row.T3.LastName).Distinct()).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
    "result": "context.TranscriptContents.Join(context.Transcripts, T1 => T1.TranscriptId, T2 => T2.TranscriptId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TranscriptId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T2.TranscriptDate, group.Key.TranscriptId }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "result": "context.Students.Where(row => row.FirstName == \"Timmothy\" && row.LastName == \"Ward\").Select(row => new { row.CellMobileNumber }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
    "result": "context.Students.Where(row => row.FirstName == \"timmothy\" && row.LastName == \"ward\").Select(row => new { row.CellMobileNumber }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "result": "context.Students.OrderBy(row => row.DateFirstRegistered).Select(row => new { row.FirstName, row.MiddleName, row.LastName }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "result": "context.Students.OrderBy(row => row.DateLeft).Select(row => new { row.FirstName, row.MiddleName, row.LastName }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "result": "context.Students.Where(row => row.CurrentAddressId != row.PermanentAddressId).Select(row => new { row.FirstName }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.Addresses.Join(context.Students, T1 => T1.AddressId, T2 => T2.CurrentAddressId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.AddressId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AddressId, group.First().T1.Line1, group.First().T1.Line2 }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT avg(transcript_date) FROM Transcripts",
    "result": "context.Transcripts.Select(row => (double) row.TranscriptDate).Average();",
    "db_name": "student_transcripts_tracking",
    "status": "BuildFailed",
    "error": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/Program.cs(9,46): error CS0030: Cannot convert type 'System.DateTime?' to 'double' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/sql2ef/entity-framework/entity-framework.csproj]\n    146 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.61",
    "should_retest": false
  },
  {
    "query": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "result": "context.Transcripts.OrderBy(row => row.TranscriptDate).Select(row => new { row.TranscriptDate, row.OtherDetails }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) FROM Transcripts",
    "result": "context.Transcripts.Count();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "result": "context.Transcripts.OrderByDescending(row => row.TranscriptDate).Select(row => new { row.TranscriptDate }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "result": "context.TranscriptContents.GroupBy(row => new { row.StudentCourseId }).Select(group => new { Count = group.Count(), group.Key.StudentCourseId }).OrderByDescending(group => group.Count).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "result": "context.TranscriptContents.Join(context.Transcripts, T1 => T1.TranscriptId, T2 => T2.TranscriptId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TranscriptId }).OrderBy(group => group.Count()).Select(group => new { group.First().T2.TranscriptDate, group.Key.TranscriptId }).Take(1).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
    "result": "context.DegreePrograms.Join(context.StudentEnrolments, T1 => T1.DegreeProgramId, T2 => T2.DegreeProgramId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DegreeSummaryName == \"Master\").Select(row => row.T2.SemesterId).Distinct().Intersect(context.DegreePrograms.Join(context.StudentEnrolments, T1 => T1.DegreeProgramId, T2 => T2.DegreeProgramId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DegreeSummaryName == \"Bachelor\").Select(row => row.T2.SemesterId).Distinct()).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT count(DISTINCT current_address_id) FROM Students",
    "result": "context.Students.Select(row => row.CurrentAddressId).Distinct().Count();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "result": "context.Students.OrderByDescending(row => row.OtherStudentDetails).Select(row => new { row.OtherStudentDetails }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "SELECT section_description FROM Sections WHERE section_name = 'h'",
    "result": "context.Sections.Where(row => row.SectionName == \"h\").Select(row => new { row.SectionDescription }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  },
  {
    "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
    "result": "context.Students.Join(context.Addresses, t1 => t1.PermanentAddressId, t2 => t2.AddressId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Country == \"haiti\" || row.t1.CellMobileNumber == \"09700166582\").Select(row => new { row.t1.FirstName }).ToList();",
    "db_name": "student_transcripts_tracking",
    "status": "Passed",
    "error": null,
    "should_retest": false
  }
]