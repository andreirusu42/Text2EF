[
    {
        "id": "54e46e168257fa3c77cbc9b166fe53b70b93dad382e8ef741febac472d62d601",
        "db_name": "flight_1",
        "context_name": "Flight1Context",
        "question": "Show all origins and the number of flights from each origin.",
        "sql": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "linq": "context.Flights.GroupBy(row => new { row.Origin }).Select(group => new { group.Key.Origin, Count = group.Count() }).ToList();",
        "generated": "context.Flights.GroupBy(row => new { row.Origin }).Select(group => new { group.Key.Origin, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "e74151029757759fbb6e61317b753a237a708b677dca9815eeb7f9f2174ce845",
        "db_name": "flight_1",
        "context_name": "Flight1Context",
        "question": "Show all destinations and the number of flights to each destination.",
        "sql": "SELECT destination ,  count(*) FROM Flight GROUP BY destination",
        "linq": "context.Flights.GroupBy(row => new { row.Destination }).Select(group => new { group.Key.Destination, Count = group.Count() }).ToList();",
        "generated": "context.Flights.GroupBy(row => new { row.Destination }).Select(group => new { group.Key.Destination, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "34ed07339a7f3ddfb59b68a48ea7fdc6a3f9a9a4e5ce9941f4aae2c7247f93c0",
        "db_name": "flight_1",
        "context_name": "Flight1Context",
        "question": "Which origin has most number of flights?",
        "sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Flights.GroupBy(row => new { row.Origin }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Origin }).Take(1).ToList();",
        "generated": "context.Flights.GroupBy(row => new { row.Origin }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Origin }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "81fa96449af0a2e0e1d7cca649cff23b57db4fc5b09294af68e6cd2cd061a461",
        "db_name": "flight_1",
        "context_name": "Flight1Context",
        "question": "Which destination has least number of flights?",
        "sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "linq": "context.Flights.GroupBy(row => new { row.Destination }).OrderBy(group => group.Count()).Select(group => new { group.Key.Destination }).Take(1).ToList();",
        "generated": "context.Flights.GroupBy(row => new { row.Destination }).OrderBy(group => group.Count()).Select(group => new { group.Key.Destination }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "6c9b155e04be311877516cd23793a636eaea87f99f87e7030200c27f429adac7",
        "db_name": "flight_1",
        "context_name": "Flight1Context",
        "question": "What is the aircraft name for the flight with number 99",
        "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "linq": "context.Flights.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Flno == 99).Select(row => new { row.T2.Name }).ToList();",
        "generated": "context.Flights.Where(row => row.Flno == 99).Select(row => row.AidNavigation.Name).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "631e1c33d6b505289aff8e1168258ae257faf9fb0dbcddb8f5646bbe50146094",
        "db_name": "flight_1",
        "context_name": "Flight1Context",
        "question": "Show all flight numbers with aircraft Airbus A340-300.",
        "sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"",
        "linq": "context.Flights.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Airbus A340-300\").Select(row => new { row.T1.Flno }).ToList();",
        "generated": "context.Flights.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Airbus A340-300\").Select(row => new { row.T1.Flno }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "5243f60ba3637afbd70aba0b5c7a530370bb35765609a12570bf9b84050c4130",
        "db_name": "flight_1",
        "context_name": "Flight1Context",
        "question": "Show aircraft names and number of flights for each aircraft.",
        "sql": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "linq": "context.Flights.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Aid }).Select(group => new { group.First().T2.Name, Count = group.Count() }).ToList();",
        "generated": "context.Aircraft.Join(context.Flights, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Aid }).Select(group => new { group.Key.Aid, group.First().T1.Name, Count = group.Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Boeing 747-400, 1: 1}, {0: Boeing 737-800, 1: 1}, {0: Airbus A340-300, 1: 2}, {0: Embraer ERJ-145, 1: 1}, {0: SAAB 340, 1: 1}, {0: Piper Archer III, 1: 1}, {0: Lockheed L1011, 1: 2}, {0: Boeing 757-300, 1: 1}]\nLINQ Results: [{0: 1, 1: Boeing 747-400, 2: 1}, {0: 2, 1: Boeing 737-800, 2: 1}, {0: 3, 1: Airbus A340-300, 2: 2}, {0: 5, 1: Embraer ERJ-145, 2: 1}, {0: 6, 1: SAAB 340, 2: 1}, {0: 7, 1: Piper Archer III, 2: 1}, {0: 9, 1: Lockheed L1011, 2: 2}, {0: 10, 1: Boeing 757-300, 2: 1}]\n"
    },
    {
        "id": "3ab1fcfdd4dac6d802e308f8c77c272fffcf8c40f9819bde3e420654680c66f0",
        "db_name": "flight_1",
        "context_name": "Flight1Context",
        "question": "Show names for all aircraft with at least two flights.",
        "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "linq": "context.Flights.Join(context.Aircraft, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Aid }).Where(group => group.Count() >= 2).Select(group => new { group.First().T2.Name }).ToList();",
        "generated": "context.Aircraft.Join(context.Flights, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Aid }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "de968f2572ad8c4a17f1bcb38b69dc637657b153a1aa437d37806b262a2db60f",
        "db_name": "manufactory_1",
        "context_name": "Manufactory1Context",
        "question": "Compute the average price of all products with manufacturer code equal to 2.",
        "sql": "SELECT avg(price) FROM products WHERE Manufacturer  =  2",
        "linq": "context.Products.Where(row => row.Manufacturer == 2).Select(row => row.Price).Average();",
        "generated": "context.Products.Where(row => row.Manufacturer == 2).Select(row => row.Price).Average();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "5ac5dff752869cff04bacebbeca4fb5f845edf3b3917f78c4d6d0d8897951ce4",
        "db_name": "manufactory_1",
        "context_name": "Manufactory1Context",
        "question": "Compute the number of products with a price larger than or equal to $180.",
        "sql": "SELECT count(*) FROM products WHERE price >= 180",
        "linq": "context.Products.Where(row => row.Price >= 180).Count();",
        "generated": "context.Products.Where(row => row.Price >= 180).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "00be72863c88add972a195af14ffc9b099efdd96738f13f47fa4e18185a6dddd",
        "db_name": "manufactory_1",
        "context_name": "Manufactory1Context",
        "question": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).",
        "sql": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC",
        "linq": "context.Products.Where(row => row.Price >= 180).OrderByDescending(row => row.Price).ThenBy(row => row.Name).Select(row => new { row.Name, row.Price }).ToList();",
        "generated": "context.Products.Where(row => row.Price >= 180).OrderByDescending(row => row.Price).OrderBy(row => row.Name).Select(row => new { row.Name, row.Price }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "41fa611c7831012d30e168d4c5c2103ebe3372e0bade623cd433535865b2bdee",
        "db_name": "manufactory_1",
        "context_name": "Manufactory1Context",
        "question": "Select the average price of each manufacturer's products, showing only the manufacturer's code.",
        "sql": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer",
        "linq": "context.Products.GroupBy(row => new { row.Manufacturer }).Select(group => new { AveragePrice = group.Select(row => row.Price).Average(), group.Key.Manufacturer }).ToList();",
        "generated": "context.Products.GroupBy(row => new { row.Manufacturer }).Select(group => new { group.Key.Manufacturer, AveragePrice = group.Select(row => row.Price).Average() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 240, 1: 1}, {0: 150, 1: 2}, {0: 162, 1: 3}, {0: 150, 1: 4}, {0: 240, 1: 5}, {0: 62.5, 1: 6}]\nLINQ Results: [{0: 1, 1: 240}, {0: 2, 1: 150}, {0: 3, 1: 162}, {0: 4, 1: 150}, {0: 5, 1: 240}, {0: 6, 1: 62.5}]\n"
    },
    {
        "id": "3e51773ac2b2948de06f268a3ee958b77d9954baa04a3940aecdd092b0bab3b7",
        "db_name": "manufactory_1",
        "context_name": "Manufactory1Context",
        "question": "Select the average price of each manufacturer's products, showing the manufacturer's name.",
        "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "linq": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { AveragePrice = group.Select(row => row.T1.Price).Average(), group.Key.Name }).ToList();",
        "generated": "context.Products.GroupBy(row => new { row.Manufacturer }).Select(group => new { group.Key.Manufacturer, AveragePrice = group.Select(row => row.Price).Average() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 150, 1: Creative Labs}, {0: 240, 1: Fujitsu}, {0: 162, 1: Hewlett-Packard}, {0: 150, 1: Iomega}, {0: 240, 1: Sony}, {0: 62.5, 1: Winchester}]\nLINQ Results: [{0: 1, 1: 240}, {0: 2, 1: 150}, {0: 3, 1: 162}, {0: 4, 1: 150}, {0: 5, 1: 240}, {0: 6, 1: 62.5}]\n"
    },
    {
        "id": "e2b11f86e6c40c4c5b9ef4afab0de1ac78921814f695360121765ee1e39689a6",
        "db_name": "manufactory_1",
        "context_name": "Manufactory1Context",
        "question": "Select the names of manufacturer whose products have an average price higher than or equal to $150.",
        "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
        "linq": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { AveragePrice = group.Select(row => row.T1.Price).Average(), group.Key.Name }).Where(group => group.AveragePrice >= 150).ToList();",
        "generated": "context.Products.GroupBy(row => new { row.Manufacturer }).Select(group => new { group.Key.Manufacturer, group.Select(row => row.Price).Average() }).Where(row => row.Average() >= 150).Select(row => context.Manufacturers.Find(row.Manufacturer).Name).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,124): error CS0746: Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access. [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.42"
    },
    {
        "id": "86fe334cdec110290de6e1296880ed46bf8fc52fcc81fb35865c0fa6bf0dc28b",
        "db_name": "manufactory_1",
        "context_name": "Manufactory1Context",
        "question": "Select the name and price of the cheapest product.",
        "sql": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1",
        "linq": "context.Products.OrderBy(row => row.Price).Select(row => new { row.Name, row.Price }).Take(1).ToList();",
        "generated": "context.Products.Select(row => new { row.Name, row.Price }).OrderBy(row => row.Price).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b1a27ff4534de5c989e341bdf1723de97314eadfec19774d3b94fa70a918218f",
        "db_name": "manufactory_1",
        "context_name": "Manufactory1Context",
        "question": "Select the name of each manufacturer along with the name and price of its most expensive product.",
        "sql": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "linq": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { T1Name = group.OrderByDescending(row => row.T1.Price).First().T1.Name, MaxPrice = group.Select(row => row.T1.Price).Max(), T2Name = group.Key.Name }).ToList();",
        "generated": "context.Products.Join(context.Manufacturers, T1 => T1.Manufacturer, T2 => T2.Code, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Price).Select(row => new { row.T2.Name, row.T1.Name, row.T1.Price }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,203): error CS0833: An anonymous type cannot have multiple properties with the same name [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.47"
    },
    {
        "id": "547fb363e1b6aa73bba3a868739f93f4a0f51511ea0e80a5193c8551293b36b5",
        "db_name": "tracking_grants_for_research",
        "context_name": "TrackingGrantsForResearchContext",
        "question": "List the organisation id with the maximum outcome count, and the count.",
        "sql": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Projects.Join(context.ProjectOutcomes, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.OrganisationId }).Select(group => new { group.Key.OrganisationId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
        "generated": "context.Organisations.Join(context.ProjectOutcomes, T1 => T1.OrganisationId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.OrganisationId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.OrganisationId, Count = group.Count() }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 3, 1: 5}]\nLINQ Results: [{0: 7, 1: 3}]\n"
    },
    {
        "id": "94312671cca5cc8ec65c72049b1f1aee5fbb7f996346aa985663e89b5a3ab508",
        "db_name": "tracking_grants_for_research",
        "context_name": "TrackingGrantsForResearchContext",
        "question": "List the project details of the projects launched by the organisation",
        "sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )",
        "linq": "context.Projects.Where(row => context.Projects.GroupBy(row => new { row.OrganisationId }).OrderByDescending(group => group.Count()).Select(group => group.Key.OrganisationId).Take(1).Contains(row.OrganisationId)).Select(row => new { row.ProjectDetails }).ToList();",
        "generated": "context.Organisations.Join(context.Projects, T1 => T1.OrganisationId, T2 => T2.OrganisationId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.ProjectDetails }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: doloremque}, {0: sed}, {0: consectetur}]\nLINQ Results: [{0: porro}, {0: et}, {0: sint}, {0: doloremque}, {0: vel}, {0: deserunt}, {0: deleniti}, {0: ad}, {0: sed}, {0: consectetur}, {0: impedit}, {0: omnis}, {0: non}, {0: beatae}, {0: dolorem}]\n"
    },
    {
        "id": "8e6fccb6641a9a160c49e2f26a9ff67715fbd76f5998185db8903d254845a6f2",
        "db_name": "tracking_grants_for_research",
        "context_name": "TrackingGrantsForResearchContext",
        "question": "List the research staff details, and order in ascending order.",
        "sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC",
        "linq": "context.ResearchStaffs.OrderBy(row => row.StaffDetails).Select(row => new { row.StaffDetails }).ToList();",
        "generated": "context.ResearchStaffs.OrderBy(row => row.StaffDetails).Select(row => new { row.StaffDetails }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "dd7a20fe8b2b809a79ccc3a0e0bd33921f388861c67499686d02366f9deda813",
        "db_name": "tracking_grants_for_research",
        "context_name": "TrackingGrantsForResearchContext",
        "question": "How many tasks are there in total?",
        "sql": "SELECT count(*) FROM Tasks",
        "linq": "context.Tasks.Count();",
        "generated": "context.Tasks.Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "c4b3ff6ce5cf9a0769f9c05d4c1b5a050227b8cf7490df5bd2b9cca97ddd492f",
        "db_name": "tracking_grants_for_research",
        "context_name": "TrackingGrantsForResearchContext",
        "question": "How many tasks does each project have? List the task count and the project detail.",
        "sql": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id",
        "linq": "context.Projects.Join(context.Tasks, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProjectId }).Select(group => new { Count = group.Count(), group.First().T1.ProjectDetails }).ToList();",
        "generated": "context.Projects.Join(context.Tasks, T1 => T1.ProjectId, T2 => T2.ProjectId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProjectDetails }).Select(group => new { Count = group.Count(), group.Key.ProjectDetails }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "8bfdea57ad3f62c17fd780480145ee0100f6d639b14634a71f3eadd83d4366ef",
        "db_name": "tracking_grants_for_research",
        "context_name": "TrackingGrantsForResearchContext",
        "question": "What are the descriptions of all the project outcomes?",
        "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code",
        "linq": "context.ResearchOutcomes.Join(context.ProjectOutcomes, T1 => T1.OutcomeCode, T2 => T2.OutcomeCode, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.OutcomeDescription }).ToList();",
        "generated": "context.ProjectOutcomes.Select(row => new { row.OutcomeDetails }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Published Research Paper}, {0: Research Patent}, {0: Published Research Paper}, {0: Published Research Paper}, {0: Research Patent}, {0: Published Research Paper}, {0: Research Patent}, {0: Published Research Paper}, {0: Published Research Paper}, {0: Research Patent}, {0: Published Research Paper}, {0: Research Patent}, {0: Published Research Paper}, {0: Published Research Paper}, {0: Published Research Paper}]\nLINQ Results: []\n"
    },
    {
        "id": "468a37efc417084c710a0669e74b748fb39a8ba2a9e47055f4dfa19fad5b85c6",
        "db_name": "tracking_grants_for_research",
        "context_name": "TrackingGrantsForResearchContext",
        "question": "Which role is most common for the staff?",
        "sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.ProjectStaffs.GroupBy(row => new { row.RoleCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.RoleCode }).Take(1).ToList();",
        "generated": "context.StaffRoles.GroupBy(row => new { row.RoleDescription }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.RoleDescription }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: researcher}]\nLINQ Results: [{0: Project Researcher}]\n"
    },
    {
        "id": "0b06abff1cd6e2317c9ed30f317644278864b13d7a8e5c71beb0fff0197381b1",
        "db_name": "movie_1",
        "context_name": "Movie1Context",
        "question": "What are the titles of all movies that have rating star is between 3 and 5?",
        "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5",
        "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars >= 3 && row.T1.Stars <= 5).Select(row => new { row.T2.Title }).ToList();",
        "generated": "context.Movies.Join(context.Ratings, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Stars >= 3 && row.T2.Stars <= 5).Select(row => new { row.T1.Title }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b2fcf9e6d3b135668fd1f89cbcdfc0ab4429b2748be5fa0c35b2b157266b68b4",
        "db_name": "movie_1",
        "context_name": "Movie1Context",
        "question": "Find the names of reviewers who had given higher than 3 star ratings.",
        "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3",
        "linq": "context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars > 3).Select(row => new { row.T2.Name }).ToList();",
        "generated": "context.Reviewers.Join(context.Ratings, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Stars > 3).Select(row => new { row.T1.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "4c82031f5e2a523e0136519f02b3c9ce7432ba3af36c95216bd454241236ee75",
        "db_name": "movie_1",
        "context_name": "Movie1Context",
        "question": "Find the average rating star for each movie that are not reviewed by Brittany Harris.",
        "sql": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID",
        "linq": "context.Ratings.Where(row => row.MId.HasValue && !context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Brittany Harris\").Select(row => row.T1.MId).Contains(row.MId.Value)).GroupBy(row => new { row.MId }).Select(group => new { group.Key.MId, AverageStars = group.Select(row => row.Stars).Average() }).ToList();",
        "generated": "context.Ratings.Where(row => row.RIdNavigation.Name!= \"Brittany Harris\").GroupBy(row => row.MId).Select(group => new { group.Key, AverageStars = group.Select(row => row.Stars).Average() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 101, 1: 3}, {0: 104, 1: 2.5}, {0: 106, 1: 4.5}, {0: 107, 1: 4}]\nLINQ Results: [{0: 101, 1: 3}, {0: 103, 1: 3}, {0: 104, 1: 2.5}, {0: 106, 1: 4.5}, {0: 107, 1: 4}, {0: 108, 1: 4}]\n"
    },
    {
        "id": "4c511ced17fadf863d05f070dc2c45789538c4f94b98c0bc1ab36fa74d6e14d3",
        "db_name": "movie_1",
        "context_name": "Movie1Context",
        "question": "Find the average rating star for each movie that received at least 2 ratings.",
        "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "linq": "context.Ratings.GroupBy(row => new { row.MId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.MId, AverageStars = group.Select(row => row.Stars).Average() }).ToList();",
        "generated": "context.Ratings.GroupBy(row => new { row.MId }).Select(group => new { group.Key.MId, AverageStars = group.Select(row => row.Stars).Average() }).Where(group => group.Select(row => row.Stars).Count() >= 2).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,185): error CS1061: '<anonymous type: int? MId, double? AverageStars>' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type '<anonymous type: int? MId, double? AverageStars>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.55"
    },
    {
        "id": "5eb8717beba8e33004b5c0153073fa8009bdf4d61586a2c89da634628b93a343",
        "db_name": "movie_1",
        "context_name": "Movie1Context",
        "question": "Find the ids of reviewers who didn't only give 4 star.",
        "sql": "SELECT rID FROM Rating WHERE stars != 4",
        "linq": "context.Ratings.Where(row => row.Stars != 4).Select(row => new { row.RId }).ToList();",
        "generated": "context.Ratings.GroupBy(row => new { row.RId }).Where(group => group.Select(row => row.Stars).Distinct().Count() > 1).Select(group => group.Key.RId).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 201}, {0: 203}, {0: 203}, {0: 204}, {0: 205}, {0: 205}, {0: 206}, {0: 206}, {0: 207}, {0: 208}]\nLINQ Results: [{0: 201}, {0: 203}, {0: 205}, {0: 206}]\n"
    },
    {
        "id": "5ec4e77d67e80277dcc3ba61cd8f4fd0e122e47cdb593a6fb4cbaf701690779c",
        "db_name": "movie_1",
        "context_name": "Movie1Context",
        "question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?",
        "sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000",
        "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Join(context.Reviewers, joined => joined.T1.RId, T3 => T3.RId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Brittany Harris\" || row.T2.Year > 2000).Select(row => new { row.T2.Title }).Distinct().ToList();",
        "generated": "context.Movies.Where(row => row.Year > 2000 || context.Ratings.Select(row => row.RIdNavigation.Name).Contains(\"Brittany Harris\")).Select(row => new { row.Title }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: The Sound of Music}, {0: Raiders of the Lost Ark}, {0: Avatar}]\nLINQ Results: [{0: Gone with the Wind}, {0: Star Wars}, {0: The Sound of Music}, {0: E.T.}, {0: Titanic}, {0: Snow White}, {0: Avatar}, {0: Raiders of the Lost Ark}]\n"
    },
    {
        "id": "0dcad2200af555fc5e455625f349c28b344e3f9b5dda39437f4f4085d946be02",
        "db_name": "movie_1",
        "context_name": "Movie1Context",
        "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
        "sql": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980",
        "linq": "context.Movies.Where(row => row.Director == \"James Cameron\" || row.Year < 1980).Select(row => new { row.Title }).ToList();",
        "generated": "context.Movies.Where(row => row.Year < 1980 || row.Director == \"James Cameron\").Select(row => new { row.Title }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "9939110ee48e7afbeaf489a79c5cf5f54c0f04251c254b6acb2b05da28d0bc08",
        "db_name": "movie_1",
        "context_name": "Movie1Context",
        "question": "What are the names of reviewers who had rated 3 star and 4 star?",
        "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4",
        "linq": "context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars == 3).Select(row => row.T2.Name).Intersect(context.Ratings.Join(context.Reviewers, T1 => T1.RId, T2 => T2.RId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars == 4).Select(row => row.T2.Name)).ToList();",
        "generated": "context.Ratings.Where(row => row.Stars == 3 || row.Stars == 4).Select(row => row.RIdNavigation.Name).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Chris Jackson}]\nLINQ Results: [{0: Sarah Martinez}, {0: Daniel Lewis}, {0: Brittany Harris}, {0: Mike Anderson}, {0: Chris Jackson}, {0: Elizabeth Thomas}, {0: Ashley White}]\n"
    },
    {
        "id": "8b1402382f224a4de0d9310ac7827920e9eae84b91c791b96a20af970e970ada",
        "db_name": "movie_1",
        "context_name": "Movie1Context",
        "question": "What are the names of movies that get 3 star and 4 star?",
        "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
        "linq": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars == 3).Select(row => row.T2.Title).Intersect(context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars == 4).Select(row => row.T2.Title)).ToList();",
        "generated": "context.Ratings.Join(context.Movies, T1 => T1.MId, T2 => T2.MId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Stars == 3 || row.T1.Stars == 4).Select(row => new { row.T2.Title }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Gone with the Wind}]\nLINQ Results: [{0: Gone with the Wind}, {0: Snow White}, {0: Raiders of the Lost Ark}, {0: Gone with the Wind}, {0: The Sound of Music}, {0: Raiders of the Lost Ark}, {0: Avatar}, {0: E.T.}]\n"
    },
    {
        "id": "b0fe9d15fb1f5adc77f5395b74613a607cf2d9f6c2f2b09995977c37c8563a83",
        "db_name": "csu_1",
        "context_name": "Csu1Context",
        "question": "How many faculty lines are there in \"San Francisco State University\" in year 2004?",
        "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"",
        "linq": "context.Faculties.Join(context.Campuses, T1 => T1.Campus, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2004 && row.T2.Campus1 == \"San Francisco State University\").Select(row => new { row.T1.Faculty1 }).ToList();",
        "generated": "context.Faculties.Where(row => row.Campus == 1 && row.Year == 2004).Select(row => row.Faculty1).Sum();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "e78b7cf19aa98f5fa22af36d11031a53fd6a89bc5008495baa56f1b29db830e6",
        "db_name": "csu_1",
        "context_name": "Csu1Context",
        "question": "List the campus that have between 600 and 1000 faculty lines in year 2004.",
        "sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004",
        "linq": "context.Campuses.Join(context.Faculties, t1 => t1.Id, t2 => t2.Campus, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Faculty1 >= 600 && row.t2.Faculty1 <= 1000 && row.t1.Year == 2004).Select(row => new { row.t1.Campus1 }).ToList();",
        "generated": "context.Faculties.Where(row => row.Year == 2004 && row.Faculty >= 600 && row.Faculty <= 1000).Select(row => new { row.Campus }).Distinct().ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,97): error CS1061: 'Faculty' does not contain a definition for 'Faculty' and no accessible extension method 'Faculty' accepting a first argument of type 'Faculty' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.34"
    },
    {
        "id": "8374d6b61dfdc9a1581bf34cc21847868f5713d5dbee517f8251bb8895a2403c",
        "db_name": "csu_1",
        "context_name": "Csu1Context",
        "question": "How many undergraduates are there in \"San Jose State University\" in year 2004?",
        "sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"",
        "linq": "context.DisciplineEnrollments.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Year == 2004 && row.t2.Campus1 == \"San Jose State University\").Select(row => row.t1.Undergraduate).Sum();",
        "generated": "context.DisciplineEnrollments.Where(row => row.Campus == \"San Jose State University\" && row.Year == 2004).Select(row => row.Undergraduate).Sum();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,63): error CS0019: Operator '==' cannot be applied to operands of type 'int' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.43"
    },
    {
        "id": "834e3309d97fc7d0fbdaff764582b81eef19378d629b09d3b58c80b037a841c9",
        "db_name": "csu_1",
        "context_name": "Csu1Context",
        "question": "What is the number of graduates in \"San Francisco State University\" in year 2004?",
        "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"",
        "linq": "context.DisciplineEnrollments.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Year == 2004 && row.t2.Campus1 == \"San Francisco State University\").Select(row => row.t1.Graduate).Sum();",
        "generated": "context.Campuses.Join(context.Degrees, T1 => T1.Id, T2 => T2.Campus, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Campus1 == \"San Francisco State University\" && row.T2.Year == 2004).Select(row => row.T2.Degrees).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "57542d3447b38a8148280567f62379c064b40afdd1014a7f11c4fbcac414a058",
        "db_name": "csu_1",
        "context_name": "Csu1Context",
        "question": "What is the campus fee of \"San Francisco State University\" in year 2000?",
        "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
        "linq": "context.CsuFees.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Campus1 == \"San Francisco State University\" && row.t1.Year == 2000).Select(row => new { row.t1.CampusFee }).ToList();",
        "generated": "context.Campuses.Where(row => row.Campus1 == \"San Francisco State University\").Select(row => row.CsuFee.CampusFee).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "2b5f54469e49ee671704d6a2d7f047cc874acaed3d15756b576b52db00e4cac4",
        "db_name": "csu_1",
        "context_name": "Csu1Context",
        "question": "Find the campus fee of \"San Jose State University\" in year 2000.",
        "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000",
        "linq": "context.CsuFees.Join(context.Campuses, t1 => t1.Campus, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Campus1 == \"San Jose State University\" && row.t1.Year == 2000).Select(row => new { row.t1.CampusFee }).ToList();",
        "generated": "context.Campuses.Where(row => row.Campus1 == \"San Jose State University\").Select(row => row.CsuFee.CampusFee).First();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.InvalidOperationException: Sequence contains no elements\n   at System.Linq.ThrowHelper.ThrowNoElementsException()\n   at lambda_method14(Closure, QueryContext)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at System.Linq.Queryable.First[TSource](IQueryable`1 source)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "f3ce98efa2464eebebeb60c05b11bd333780f973745078c46ed4f9f6eb2570f8",
        "db_name": "csu_1",
        "context_name": "Csu1Context",
        "question": "How many CSU campuses are there?",
        "sql": "SELECT count(*) FROM campuses",
        "linq": "context.Campuses.Count();",
        "generated": "context.Campuses.Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "11f94a4105e54dbbe9de5cc2883aef4848cfe15c2b6b52a44449a9ad7e89fc6c",
        "db_name": "customers_card_transactions",
        "context_name": "CustomersCardTransactionsContext",
        "question": "Show the number of card types.",
        "sql": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
        "linq": "context.CustomersCards.Select(row => row.CardTypeCode).Distinct().Count();",
        "generated": "context.CustomersCards.GroupBy(row => new { row.CardTypeCode }).Select(group => new { group.Key.CardTypeCode, Count = group.Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 2}]\nLINQ Results: [{0: Credit, 1: 7}, {0: Debit, 1: 8}]\n"
    },
    {
        "id": "fddcc9d9aabb0a37ef8eb071ccc15f08502cd72ea30f93968c8acdb83477fb56",
        "db_name": "customers_card_transactions",
        "context_name": "CustomersCardTransactionsContext",
        "question": "Show all transaction types.",
        "sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions",
        "linq": "context.FinancialTransactions.Select(row => new { row.TransactionType }).Distinct().ToList();",
        "generated": "context.FinancialTransactions.Select(row => new { row.TransactionType }).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "47ad7ccbc4929e629d22ab641b153ac4c20f8d868cd00d3f372c94f91dbe998d",
        "db_name": "customers_card_transactions",
        "context_name": "CustomersCardTransactionsContext",
        "question": "Show the number of transaction types.",
        "sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
        "linq": "context.FinancialTransactions.Select(row => row.TransactionType).Distinct().Count();",
        "generated": "context.FinancialTransactions.Select(row => row.TransactionType).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "60efab0b3cf1e5d87e3cae1fa7240d089069df997cc4669765b9dbdaefd95459",
        "db_name": "customers_card_transactions",
        "context_name": "CustomersCardTransactionsContext",
        "question": "What is the average and total transaction amount?",
        "sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
        "linq": "context.FinancialTransactions.GroupBy(row => 1).Select(group => new { AverageTransactionAmount = group.Select(row => row.TransactionAmount).Average(), SumTransactionAmount = group.Select(row => row.TransactionAmount).Sum() }).ToList();",
        "generated": "context.FinancialTransactions.Select(row => row.TransactionAmount).Average() + context.FinancialTransactions.Select(row => row.TransactionAmount).Sum();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Parameter 'index')\n   at System.Linq.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument)\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 239\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\n"
    },
    {
        "id": "74a7ac2c22b3aedd6f9c1e03064f7f56f4689d84ba9bbc2890689927028e2029",
        "db_name": "customers_card_transactions",
        "context_name": "CustomersCardTransactionsContext",
        "question": "Show the card type codes and the number of transactions.",
        "sql": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
        "linq": "context.FinancialTransactions.Join(context.CustomersCards, T1 => T1.CardId, T2 => T2.CardId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CardTypeCode }).Select(group => new { group.Key.CardTypeCode, Count = group.Count() }).ToList();",
        "generated": "context.CustomersCards.Join(context.FinancialTransactions, T1 => T1.CardId, T2 => T2.CardId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CardTypeCode }).Select(group => new { group.Key.CardTypeCode, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "651d9748eab48cbcac9ecf3369f0b6801d43f5d64ea13c122a42d955575018c8",
        "db_name": "customers_card_transactions",
        "context_name": "CustomersCardTransactionsContext",
        "question": "Show the transaction type and the number of transactions.",
        "sql": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
        "linq": "context.FinancialTransactions.GroupBy(row => new { row.TransactionType }).Select(group => new { group.Key.TransactionType, Count = group.Count() }).ToList();",
        "generated": "context.FinancialTransactions.GroupBy(row => new { row.TransactionType }).Select(group => new { group.Key.TransactionType, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "972f71cddd02e289be5b0802e4d5cf9cb93b960e9f393008d3e3268c52f48e67",
        "db_name": "customers_card_transactions",
        "context_name": "CustomersCardTransactionsContext",
        "question": "What is the transaction type that has processed the greatest total amount in transactions?",
        "sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
        "linq": "context.FinancialTransactions.GroupBy(row => new { row.TransactionType }).OrderByDescending(group => group.Sum(row => row.TransactionAmount)).Select(group => new { group.Key.TransactionType }).Take(1).ToList();",
        "generated": "context.FinancialTransactions.GroupBy(row => new { row.TransactionType }).OrderByDescending(group => group.Sum(row => row.TransactionAmount)).Select(group => new { group.Key.TransactionType }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "d5e5357b9edc48bc62daffff10a50b16bcb31dc3382b8358f49b4ba325606806",
        "db_name": "customers_card_transactions",
        "context_name": "CustomersCardTransactionsContext",
        "question": "Show the account id and the number of transactions for each account",
        "sql": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id",
        "linq": "context.FinancialTransactions.GroupBy(row => new { row.AccountId }).Select(group => new { group.Key.AccountId, Count = group.Count() }).ToList();",
        "generated": "context.FinancialTransactions.GroupBy(row => new { row.AccountId }).Select(group => new { group.Key.AccountId, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "4bc67b307834c13856ba19678847c96aa36486f1f686c413c5cea160047f4796",
        "db_name": "cre_Doc_Tracking_DB",
        "context_name": "CreDocTrackingDbContext",
        "question": "Show the location codes and the number of documents in each location.",
        "sql": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",
        "linq": "context.DocumentLocations.GroupBy(row => new { row.LocationCode }).Select(group => new { group.Key.LocationCode, Count = group.Count() }).ToList();",
        "generated": "context.RefLocations.Join(context.DocumentLocations, T1 => T1.LocationCode, T2 => T2.LocationCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.LocationCode }).Select(group => new { group.Key.LocationCode, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "554fcda987ba852133be0a9a87976bd0e2ec2bc33a988e7775fd8c1cbb06397e",
        "db_name": "cre_Doc_Tracking_DB",
        "context_name": "CreDocTrackingDbContext",
        "question": "What is the location code with the most documents?",
        "sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.DocumentLocations.GroupBy(row => new { row.LocationCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.LocationCode }).Take(1).ToList();",
        "generated": "context.DocumentLocations.GroupBy(row => new { row.LocationCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.LocationCode }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "cc9be505beb538ff9d94f6e0d46a6f019b74de19332bfc27ab5eccb7b7501ffb",
        "db_name": "station_weather",
        "context_name": "StationWeatherContext",
        "question": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
        "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50",
        "linq": "context.WeeklyWeathers.Join(context.Stations, t1 => t1.StationId, t2 => t2.Id, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.StationId }).Where(group => group.Max(row => row.t1.Precipitation) > 50).Select(group => new { group.First().t2.Id, group.First().t2.LocalAuthority }).ToList();",
        "generated": "context.Stations.Join(context.WeeklyWeathers, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Precipitation > 50).Select(row => new { row.T1.Id, row.T1.LocalAuthority }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1, 1: Chiltern}, {0: 2, 1: Watford}, {0: 3, 1: Brentwood}, {0: 4, 1: Broxbourne}, {0: 10, 1: Three Rivers}]\nLINQ Results: [{0: 1, 1: Chiltern}, {0: 2, 1: Watford}, {0: 2, 1: Watford}, {0: 2, 1: Watford}, {0: 2, 1: Watford}, {0: 3, 1: Brentwood}, {0: 4, 1: Broxbourne}, {0: 10, 1: Three Rivers}]\n"
    },
    {
        "id": "31d137573deb15b303b572dda50d05a7a14b6b4e8d6853b78dd4e5e0eb7bd0e4",
        "db_name": "station_weather",
        "context_name": "StationWeatherContext",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "sql": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
        "linq": "context.WeeklyWeathers.GroupBy(row => 1).Select(group => new { MinLowTemperature = group.Select(row => row.LowTemperature).Min(), MaxWindSpeedMph = group.Select(row => row.WindSpeedMph).Max() }).ToList();",
        "generated": "context.WeeklyWeathers.Select(row => new { row.LowTemperature, row.WindSpeedMph }).OrderBy(row => row.LowTemperature).OrderByDescending(row => row.WindSpeedMph).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 46, 1: 24}]\nLINQ Results: [{0: 56, 1: 24}]\n"
    },
    {
        "id": "b00bb8b99640e7800515618539b5dd4ddd5617bb48c3baa9340944ecacdad3c5",
        "db_name": "station_weather",
        "context_name": "StationWeatherContext",
        "question": "Find the origins from which more than 1 train starts.",
        "sql": "SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1",
        "linq": "context.Trains.GroupBy(row => new { row.Origin }).Where(group => group.Count() > 1).Select(group => new { group.Key.Origin }).ToList();",
        "generated": "context.Trains.GroupBy(row => new { row.Origin }).Where(group => group.Count() > 1).Select(group => new { group.Key.Origin }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "23b626dd6cd838473aa7912b8b56cb08c0a4f09ff2aa1b9e02c87712329bab38",
        "db_name": "scientist_1",
        "context_name": "Scientist1Context",
        "question": "List the name of all projects that are operated longer than the average working hours of all projects.",
        "sql": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)",
        "linq": "context.Projects.Where(row => row.Hours > context.Projects.Select(row => row.Hours).Average()).Select(row => new { row.Name }).ToList();",
        "generated": "context.Projects.Where(row => row.Hours > context.Projects.Select(row => row.Hours).Average()).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "d04d283971e153e38f39d0bae2a8bbfe13009d7c1a9dcbe8e5b76b060a086720",
        "db_name": "scientist_1",
        "context_name": "Scientist1Context",
        "question": "Find the name of projects that require between 100 and 300 hours of work.",
        "sql": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300",
        "linq": "context.Projects.Where(row => row.Hours >= 100 && row.Hours <= 300).Select(row => new { row.Name }).ToList();",
        "generated": "context.Projects.Where(row => row.Hours >= 100 && row.Hours <= 300).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "91a330a111506ddf48ef2e04bed88d7f598c5d213e2b80b2cb7cf00da995362c",
        "db_name": "document_management",
        "context_name": "DocumentManagementContext",
        "question": "Find the average access count of documents with the least popular structure.",
        "sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "linq": "context.Documents.GroupBy(row => new { row.DocumentStructureCode }).OrderBy(group => group.Count()).Select(group => new { AverageAccessCount = group.Select(row => row.AccessCount).Average() }).Take(1);",
        "generated": "context.Documents.Join(context.DocumentStructures, T1 => T1.DocumentStructureCode, T2 => T2.DocumentStructureCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DocumentStructureDescription }).Select(group => new { AverageAccessCount = group.Select(row => row.T1.AccessCount).Average(), StructureDescription = group.Key.DocumentStructureDescription }).OrderBy(group => group.AverageAccessCount).Take(1).Select(group => new { AverageAccessCount = group.AverageAccessCount }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 7858.5}]\nLINQ Results: [{0: 2493}]\n"
    },
    {
        "id": "89ab55ef70456f4751e37547ae25b29e8247566bf5d78c33d0f58f8b495916b6",
        "db_name": "document_management",
        "context_name": "DocumentManagementContext",
        "question": "List all the image name and URLs in the order of their names.",
        "sql": "SELECT image_name ,  image_url FROM images ORDER BY image_name",
        "linq": "context.Images.OrderBy(row => row.ImageName).Select(row => new { row.ImageName, row.ImageUrl }).ToList();",
        "generated": "context.Images.OrderBy(row => row.ImageName).Select(row => new { row.ImageName, row.ImageUrl }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "6f9c78f793b397d9df49bdb00a0d2478cc19fcf48fde0ed65cad3ae120411654",
        "db_name": "document_management",
        "context_name": "DocumentManagementContext",
        "question": "Find the number of users in each role.",
        "sql": "SELECT count(*) ,  role_code FROM users GROUP BY role_code",
        "linq": "context.Users.GroupBy(row => new { row.RoleCode }).Select(group => new { Count = group.Count(), group.Key.RoleCode }).ToList();",
        "generated": "context.Users.GroupBy(row => new { row.RoleCode }).Select(group => new { group.Key.RoleCode, Count = group.Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 8, 1: DBA}, {0: 7, 1: PROJ-MGR}]\nLINQ Results: [{0: DBA, 1: 8}, {0: PROJ-MGR, 1: 7}]\n"
    },
    {
        "id": "271ff3c24b1d5d7b33e3903f624dfa1a25ccdbc026de91a130ec1fe8096ea6dc",
        "db_name": "document_management",
        "context_name": "DocumentManagementContext",
        "question": "What document types have more than 2 corresponding documents?",
        "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2",
        "linq": "context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Where(group => group.Count() > 2).Select(group => new { group.Key.DocumentTypeCode }).ToList();",
        "generated": "context.Documents.GroupBy(row => new { row.DocumentTypeCode }).Where(group => group.Count() > 2).Select(group => new { group.Key.DocumentTypeCode }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "18108bec8b7ead1b031b94c11d074d3603e700e8d7cd030fae7cea54f9e8d651",
        "db_name": "cre_Doc_Tracking_DB",
        "context_name": "CreDocTrackingDbContext",
        "question": "Show the location codes with at least 3 documents.",
        "sql": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "linq": "context.DocumentLocations.GroupBy(row => new { row.LocationCode }).Where(group => group.Count() >= 3).Select(group => new { group.Key.LocationCode }).ToList();",
        "generated": "context.AllDocuments.Join(context.DocumentLocations, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Join(context.RefLocations, joined => joined.T2.LocationCode, T3 => T3.LocationCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.LocationCode }).Where(group => group.Count() >= 3).Select(group => new { group.Key.LocationCode }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "2c5f3e1935ccaeb703716d2ab51a57470a8ae93ceee2a6154b976fa025b62946",
        "db_name": "cre_Doc_Tracking_DB",
        "context_name": "CreDocTrackingDbContext",
        "question": "Show the location name and code with the least documents.",
        "sql": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
        "linq": "context.DocumentLocations.Join(context.RefLocations, T1 => T1.LocationCode, T2 => T2.LocationCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.LocationCode }).OrderBy(group => group.Count()).Select(group => new { group.First().T2.LocationName, group.Key.LocationCode }).Take(1).ToList();",
        "generated": "context.DocumentLocations.GroupBy(row => new { row.LocationCode }).OrderBy(group => group.Count()).Select(group => new { group.Key.LocationCode, group.Key.LocationName }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,175): error CS1061: '<anonymous type: string LocationCode>' does not contain a definition for 'LocationName' and no accessible extension method 'LocationName' accepting a first argument of type '<anonymous type: string LocationCode>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.39"
    },
    {
        "id": "e56946f38725ee20f7f2b7a8aec6b4424113f7a6a310b160a87ea3f79f5ec6f0",
        "db_name": "cre_Doc_Tracking_DB",
        "context_name": "CreDocTrackingDbContext",
        "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "sql": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;",
        "linq": "context.DocumentsToBeDestroyeds.Join(context.Employees, T1 => T1.DestructionAuthorisedByEmployeeId, T2 => T2.EmployeeId, (T1, T2) => new { T1, T2 }).Join(context.Employees, joined => joined.T1.DestroyedByEmployeeId, T3 => T3.EmployeeId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { T2EmployeeName = row.T2.EmployeeName, T3EmployeeName = row.T3.EmployeeName }).ToList();",
        "generated": "context.Employees.Join(context.DocumentsToBeDestroyed, T1 => T1.EmployeeId, T2 => T2.DestructionAuthorisedByEmployeeId, (T1, T2) => new { T1, T2 }).Join(context.Employees, joined => joined.T2.DestroyedByEmployeeId, T3 => T3.EmployeeId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.EmployeeName }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,51): error CS1061: 'CreDocTrackingDbContext' does not contain a definition for 'DocumentsToBeDestroyed' and no accessible extension method 'DocumentsToBeDestroyed' accepting a first argument of type 'CreDocTrackingDbContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.32"
    },
    {
        "id": "59017bfd2da6e7096a2d4d28f383551aea5d91fd1bb11c4e39084363be16441e",
        "db_name": "cre_Doc_Tracking_DB",
        "context_name": "CreDocTrackingDbContext",
        "question": "Show the id of each employee and the number of document destruction authorised by that employee.",
        "sql": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "linq": "context.DocumentsToBeDestroyeds.GroupBy(row => new { row.DestructionAuthorisedByEmployeeId }).Select(group => new { group.Key.DestructionAuthorisedByEmployeeId, Count = group.Count() }).ToList();",
        "generated": "context.Employees.Join(context.DocumentsToBeDestroyedDestructionAuthorisedByEmployees, T1 => T1.EmployeeId, T2 => T2.DestructionAuthorisedByEmployeeId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.DocumentId }).Distinct().ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,51): error CS1061: 'CreDocTrackingDbContext' does not contain a definition for 'DocumentsToBeDestroyedDestructionAuthorisedByEmployees' and no accessible extension method 'DocumentsToBeDestroyedDestructionAuthorisedByEmployees' accepting a first argument of type 'CreDocTrackingDbContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.37"
    },
    {
        "id": "cab6cc2cb72715df103fa59d42407966c14a7ec1cb2c1e48d99f58f3c3c9b06f",
        "db_name": "cre_Doc_Tracking_DB",
        "context_name": "CreDocTrackingDbContext",
        "question": "Show the employee ids and the number of documents destroyed by each employee.",
        "sql": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",
        "linq": "context.DocumentsToBeDestroyeds.GroupBy(row => new { row.DestroyedByEmployeeId }).Select(group => new { group.Key.DestroyedByEmployeeId, Count = group.Count() }).ToList();",
        "generated": "context.Employees.Join(context.DocumentsToBeDestroyed, T1 => T1.EmployeeId, T2 => T2.DestroyedByEmployeeId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EmployeeId }).Select(group => new { group.Key.EmployeeId, Count = group.Count() }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,51): error CS1061: 'CreDocTrackingDbContext' does not contain a definition for 'DocumentsToBeDestroyed' and no accessible extension method 'DocumentsToBeDestroyed' accepting a first argument of type 'CreDocTrackingDbContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.37"
    },
    {
        "id": "be672232ffc537c614ed755d2b44655e8a23dbaf3f4e594850c402a6ddc12d86",
        "db_name": "cre_Doc_Tracking_DB",
        "context_name": "CreDocTrackingDbContext",
        "question": "Show the ids of all employees who have authorized destruction.",
        "sql": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "linq": "context.DocumentsToBeDestroyeds.Select(row => new { row.DestructionAuthorisedByEmployeeId }).Distinct().ToList();",
        "generated": "context.Employees.Where(row => row.RoleCode == \"Authorisation\").Select(row => row.EmployeeId).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 156}, {0: 55}, {0: 183}, {0: 38}, {0: 123}, {0: 30}]\nLINQ Results: []\n"
    },
    {
        "id": "119ad4832e1ae89413a459e1cc99d5983ac4bccae0a0da4c974434b156b42194",
        "db_name": "cre_Doc_Tracking_DB",
        "context_name": "CreDocTrackingDbContext",
        "question": "Show the ids of all employees who have destroyed a document.",
        "sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "linq": "context.DocumentsToBeDestroyeds.Select(row => new { row.DestroyedByEmployeeId }).Distinct().ToList();",
        "generated": "context.Employees.Where(row => row.DocumentsToBeDestroyedDestroyedByEmployees!= null).Select(row => new { row.EmployeeId }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 138}, {0: 173}, {0: 156}, {0: 136}, {0: 99}, {0: 38}, {0: 55}]\nLINQ Results: [{0: 25}, {0: 30}, {0: 38}, {0: 55}, {0: 57}, {0: 71}, {0: 99}, {0: 123}, {0: 136}, {0: 138}, {0: 156}, {0: 159}, {0: 173}, {0: 181}, {0: 183}]\n"
    },
    {
        "id": "cebf2a1915fad931784e2a6f5b88ca401ce961ae1b47fa6299d5d3a4fc10e405",
        "db_name": "department_store",
        "context_name": "DepartmentStoreContext",
        "question": "List the names of all the distinct customers who bought a keyboard.",
        "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"",
        "linq": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.OrderItems, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Products, joined => joined.T3.ProductId, T4 => T4.ProductId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.ProductName == \"keyboard\").Select(row => new { row.T1.CustomerName }).Distinct().ToList();",
        "generated": "context.Products.Join(context.OrderItems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Customers, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => row.T3.CustomerName).Distinct().ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,192): error CS1061: 'Customer' does not contain a definition for 'OrderId' and no accessible extension method 'OrderId' accepting a first argument of type 'Customer' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.40"
    },
    {
        "id": "9924a16701978a1b8dfd53381cb5b3c7b69a04295244ecb47d379e49a324bac8",
        "db_name": "department_store",
        "context_name": "DepartmentStoreContext",
        "question": "List the names and phone numbers of all the distinct suppliers who supply red jeans.",
        "sql": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"",
        "linq": "context.Suppliers.Join(context.ProductSuppliers, T1 => T1.SupplierId, T2 => T2.SupplierId, (T1, T2) => new { T1, T2 }).Join(context.Products, joined => joined.T2.ProductId, T3 => T3.ProductId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.ProductName == \"red jeans\").Select(row => new { row.T1.SupplierName, row.T1.SupplierPhone }).Distinct().ToList();",
        "generated": "context.Suppliers.Join(context.ProductSuppliers, T1 => T1.SupplierId, T2 => T2.SupplierId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ProductId == context.Products.Where(row => row.ProductName == \"red jeans\").Select(row => row.ProductId).First()).Select(row => new { row.T1.SupplierName, row.T1.SupplierPhone }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: AB Store, 1: 1-483-283-4742}]\nLINQ Results: []\n"
    },
    {
        "id": "9f887be5a584fd9ae8f524c2897249420c2b87bc4b354ec3bb895be5350fd733",
        "db_name": "department_store",
        "context_name": "DepartmentStoreContext",
        "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
        "sql": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date",
        "linq": "context.CustomerOrders.Where(row => row.OrderStatusCode == \"Cancelled\").OrderBy(row => row.OrderDate).Select(row => new { row.OrderId, row.CustomerId }).ToList();",
        "generated": "context.CustomerOrders.Where(row => row.OrderStatusCode == \"Cancelled\").OrderBy(row => row.OrderDate).Select(row => new { row.OrderId, row.CustomerId }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "721e067453aba7d479908bfc2be794affff805cfe151a93dbed80b9a89daf5e7",
        "db_name": "department_store",
        "context_name": "DepartmentStoreContext",
        "question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
        "linq": "context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.JobTitleCode == \"Sales Person\").Select(row => new { row.T1.StaffName, row.T1.StaffGender }).Except(context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.JobTitleCode == \"Clerical Staff\").Select(row => new { row.T1.StaffName, row.T1.StaffGender })).ToList();",
        "generated": "context.Staff.Join(context.StaffDepartmentAssignments, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DepartmentId, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DepartmentName == \"Sales\" && row.T2.JobTitleCode == \"Clerical Staff\").Select(row => new { row.T1.StaffName, row.T1.StaffGender }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Melody, 1: 1}, {0: Sabrina, 1: 1}, {0: Zakary, 1: 1}]\nLINQ Results: []\n"
    },
    {
        "id": "94fcbff03c53b481602a05869e3e9b03c362fc90a78ba90ecbb515a2e0af5f40",
        "db_name": "department_store",
        "context_name": "DepartmentStoreContext",
        "question": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.",
        "sql": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
        "linq": "context.Customers.Where(row => EF.Functions.Like(row.CustomerAddress, \"%WY%\") && row.PaymentMethodCode != \"Credit Card\").Select(row => new { row.CustomerId, row.CustomerName }).ToList();",
        "generated": "context.Customers.Join(context.CustomerAddresses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.AddressDetails.Contains(\"WY\") && row.t1.PaymentMethodCode!= \"credit_card\").Select(row => new { row.t1.CustomerId, row.t1.CustomerName }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,160): error CS1061: 'CustomerAddress' does not contain a definition for 'AddressDetails' and no accessible extension method 'AddressDetails' accepting a first argument of type 'CustomerAddress' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.29"
    },
    {
        "id": "dd43e32d783fb48ba829e0b80b2ccd413979d7367ce6851a713de25693dc98d7",
        "db_name": "department_store",
        "context_name": "DepartmentStoreContext",
        "question": "Find the average price of all product clothes.",
        "sql": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'",
        "linq": "context.Products.Where(row => row.ProductTypeCode == \"Clothes\").Select(row => (double) row.ProductPrice).Average();",
        "generated": "context.Products.Where(row => row.ProductTypeCode == \"CLOTHES\").Select(row => row.ProductPrice).Average();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.NotSupportedException: SQLite cannot apply aggregate operator 'Average' on expressions of type 'decimal'. Convert the values to a supported type, or use LINQ to Objects to aggregate the results on the client side.\n   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableAggregateMethodTranslator.Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList`1 arguments, IDiagnosticsLogger`1 logger)\n   at Microsoft.EntityFrameworkCore.Query.RelationalAggregateMethodCallTranslatorProvider.<>c__DisplayClass6_0.<Translate>b__0(IAggregateMethodCallTranslator t)\n   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()\n   at System.Linq.Enumerable.TryGetFirst[TSource](IEnumerable`1 source, Func`2 predicate, Boolean& found)\n   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)\n   at Microsoft.EntityFrameworkCore.Query.RelationalAggregateMethodCallTranslatorProvider.Translate(IModel model, MethodInfo method, EnumerableExpression source, IReadOnlyList`1 arguments, IDiagnosticsLogger`1 logger)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.TranslateAggregateMethod(EnumerableExpression enumerableExpression, MethodInfo method, List`1 scalarArguments)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.TryTranslateAggregateMethodCall(MethodCallExpression methodCallExpression, SqlExpression& translation)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.TranslateInternal(Expression expression, Boolean applyDefaultTypeMapping)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.Translate(Expression expression, Boolean applyDefaultTypeMapping)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateAggregateWithSelector(ShapedQueryExpression source, LambdaExpression selectorLambda, Func`2 methodGenerator, Boolean throwWhenEmpty, Type resultType)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateAverage(ShapedQueryExpression source, LambdaExpression selector, Type resultType)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "a5618e71d4b09f791f0cc3628d04942d82d647bedb2f041048831226fa22f39e",
        "db_name": "department_store",
        "context_name": "DepartmentStoreContext",
        "question": "Find the name of the most expensive hardware product.",
        "sql": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
        "linq": "context.Products.Where(row => row.ProductTypeCode == \"Hardware\").OrderByDescending(row => (double) row.ProductPrice).Select(row => new { row.ProductName }).Take(1).ToList();",
        "generated": "context.Products.Where(row => row.ProductTypeCode == \"HARDWARE\").OrderByDescending(row => row.ProductPrice).Select(row => new { row.ProductName }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.NotSupportedException: SQLite does not support expressions of type 'decimal' in ORDER BY clauses. Convert the values to a supported type, or use LINQ to Objects to order the results on the client side.\n   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.TranslateOrderBy(ShapedQueryExpression source, LambdaExpression keySelector, Boolean ascending)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.GetEnumerator()\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "92e861784fd1cb58e196c6c6cd19329cd14b6282e4d99a29c3c311fd1bb97940",
        "db_name": "customers_and_products_contacts",
        "context_name": "CustomersAndProductsContactsContext",
        "question": "Show the customer name, customer address city, date from, and date to for each customer address history.",
        "sql": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id",
        "linq": "context.CustomerAddressHistories.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.Addresses, joined => joined.T1.AddressId, T3 => T3.AddressId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.CustomerName, row.T3.City, row.T1.DateFrom, row.T1.DateTo }).ToList();",
        "generated": "context.Customers.Join(context.CustomerAddressHistories, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.CustomerName, row.T2.Address.City, row.T2.DateFrom, row.T2.DateTo }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "381d2b2396b9ad3540e6a342baef68cbaf9767a6ea02b1fbb84a8a98ac965dd7",
        "db_name": "customers_and_products_contacts",
        "context_name": "CustomersAndProductsContactsContext",
        "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2",
        "linq": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PaymentMethodCode == \"Credit Card\").GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() > 2).Select(group => new { group.First().T1.CustomerName }).ToList();",
        "generated": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.PaymentMethodCode == \"Credit Card\" && row.t2.OrderStatusCode == \"Delivered\").Select(row => new { row.t1.CustomerName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Sterling}, {0: Cleo}]\nLINQ Results: []\n"
    },
    {
        "id": "5fa6c428cc84b0d49981324dd1c1500fe29f48151f11aacb6ba3e6bf83056ac3",
        "db_name": "customers_and_products_contacts",
        "context_name": "CustomersAndProductsContactsContext",
        "question": "Show the product type and name for the products with price higher than 1000 or lower than 500.",
        "sql": "SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500",
        "linq": "context.Products.Where(row => row.ProductPrice > 1000 || row.ProductPrice < 500).Select(row => new { row.ProductTypeCode, row.ProductName }).ToList();",
        "generated": "context.Products.Where(row => row.ProductPrice < 1000 || row.ProductPrice > 500).Select(row => new { row.ProductTypeCode, row.ProductName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Hardware, 1: Apple}, {0: Clothes, 1: jcrew}, {0: Hardware, 1: Apple}, {0: Hardware, 1: Apple}, {0: Clothes, 1: jcrew}, {0: Hardware, 1: Apple}, {0: Hardware, 1: Apple}, {0: Hardware, 1: Sony}, {0: Hardware, 1: Sony}, {0: Clothes, 1: jcrew}, {0: Clothes, 1: gucci}, {0: Hardware, 1: Sony}, {0: Clothes, 1: gucci}]\nLINQ Results: [{0: Hardware, 1: Apple}, {0: Clothes, 1: jcrew}, {0: Hardware, 1: Apple}, {0: Hardware, 1: Apple}, {0: Clothes, 1: jcrew}, {0: Hardware, 1: Apple}, {0: Hardware, 1: Apple}, {0: Hardware, 1: Sony}, {0: Clothes, 1: jcrew}, {0: Hardware, 1: Sony}, {0: Clothes, 1: jcrew}, {0: Clothes, 1: gucci}, {0: Clothes, 1: gucci}, {0: Hardware, 1: Sony}, {0: Clothes, 1: gucci}]\n"
    },
    {
        "id": "31ec01bf8fd96fb3e1678beeb1aae149452f126701099ca120e9d121b40f0337",
        "db_name": "election_representative",
        "context_name": "ElectionRepresentativeContext",
        "question": "What states have at least two representatives?",
        "sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2",
        "linq": "context.Representatives.GroupBy(row => new { row.State }).Where(group => group.Count() >= 2).Select(group => new { group.Key.State }).ToList();",
        "generated": "context.Representatives.GroupBy(row => new { row.State }).Where(group => group.Count() >= 2).Select(group => new { group.Key.State }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b54f2969e91f68f1fb6b267f9143b96098db1517d6c24a545213930f43800fe7",
        "db_name": "election_representative",
        "context_name": "ElectionRepresentativeContext",
        "question": "List the names of representatives that have not participated in elections listed here.",
        "sql": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)",
        "linq": "context.Representatives.Where(row => !context.Elections.Select(row => row.RepresentativeId).Contains(row.RepresentativeId)).Select(row => new { row.Name }).ToList();",
        "generated": "context.Representatives.Where(row =>!context.Elections.Select(row => row.RepresentativeId).Contains(row.RepresentativeId)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "e808b36cb6ffff9663d5d011a51a273987d67e6e1ade7805b7ca050387200e3f",
        "db_name": "election_representative",
        "context_name": "ElectionRepresentativeContext",
        "question": "Show the parties that have both representatives in New York state and representatives in Pennsylvania state.",
        "sql": "SELECT Party FROM representative WHERE State  =  \"New York\" INTERSECT SELECT Party FROM representative WHERE State  =  \"Pennsylvania\"",
        "linq": "context.Representatives.Where(row => row.State == \"New York\").Select(row => row.Party).Intersect(context.Representatives.Where(row => row.State == \"Pennsylvania\").Select(row => row.Party)).ToList();",
        "generated": "context.Representatives.Join(context.Elections, T1 => T1.RepresentativeId, T2 => T2.RepresentativeId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.State == \"New York\" || row.T2.State == \"Pennsylvania\").Select(row => new { row.T1.Party }).Distinct().ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,200): error CS1061: 'Election' does not contain a definition for 'State' and no accessible extension method 'State' accepting a first argument of type 'Election' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.40"
    },
    {
        "id": "7a74494e0a1ecd18a052d0b160276a5aa85489d08bf903d742fab74c9c082cc7",
        "db_name": "election_representative",
        "context_name": "ElectionRepresentativeContext",
        "question": "How many distinct parties are there for representatives?",
        "sql": "SELECT count(DISTINCT Party) FROM representative",
        "linq": "context.Representatives.Select(row => row.Party).Distinct().Count();",
        "generated": "context.Representatives.Select(row => row.Party).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "9040e07642355ec0c25ef7fa00e8f4cc3a4c710831f91f2a4ebd54d98d5ac54c",
        "db_name": "insurance_and_eClaims",
        "context_name": "InsuranceAndEClaimsContext",
        "question": "Find the name of the customer that has been involved in the most policies.",
        "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Policies.Join(context.Customers, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.CustomerDetails }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CustomerDetails }).Take(1).ToList();",
        "generated": "context.Customers.Join(context.Policies, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerDetails }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CustomerDetails }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "3dcac1364acdca3c9e6c21004bc4872062135cd115aba3038283886b19b59120",
        "db_name": "insurance_and_eClaims",
        "context_name": "InsuranceAndEClaimsContext",
        "question": "What is the description of the claim status \"Open\"?",
        "sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
        "linq": "context.ClaimsProcessingStages.Where(row => row.ClaimStatusName == \"Open\").Select(row => new { row.ClaimStatusDescription }).ToList();",
        "generated": "context.ClaimsProcessingStages.Where(row => row.ClaimStatusName == \"Open\").Select(row => new { row.ClaimStatusDescription }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "96d6ee1c7d6772fca476580971f28afb1e51d730cc14f302b43d1e7a40056c8d",
        "db_name": "insurance_and_eClaims",
        "context_name": "InsuranceAndEClaimsContext",
        "question": "How many distinct claim outcome codes are there?",
        "sql": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "linq": "context.ClaimsProcessings.Select(row => row.ClaimOutcomeCode).Distinct().Count();",
        "generated": "context.ClaimsProcessings.Select(row => row.ClaimOutcomeCode).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "209c69eec50f5890de9d76da1009ee5ffeffcc728d58bf3b8cebf976b371e27f",
        "db_name": "insurance_and_eClaims",
        "context_name": "InsuranceAndEClaimsContext",
        "question": "Which customer is associated with the latest policy?",
        "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
        "linq": "context.Policies.Join(context.Customers, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.StartDate == context.Policies.Select(row => row.StartDate).Max()).Select(row => new { row.t2.CustomerDetails }).ToList();",
        "generated": "context.Policies.OrderByDescending(row => row.EndDate).Select(row => new { row.Customer.CustomerDetails }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Selena Gerhold}]\nLINQ Results: [{0: Buddy Marquardt}]\n"
    },
    {
        "id": "fa09a06a1c7520bbc1c1472d8e493defb9974b4da81790d1568654dd7958c7e9",
        "db_name": "baseball_1",
        "context_name": "Baseball1Context",
        "question": "How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?",
        "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;",
        "linq": "context.Salaries.Join(context.Players, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.NameFirst == \"Len\" && row.T2.NameLast == \"Barker\" && row.T1.Year >= 1985 && row.T1.Year <= 1990).Select(row => row.T1.Salary1).Sum();",
        "generated": "context.Salaries.Where(row => row.Year >= 1985 && row.Year <= 1990 && row.PlayerId == \"barklen01\").Select(row => row.Salary1).Sum();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 3612500}]\nLINQ Results: [{0: 0}]\n"
    },
    {
        "id": "a844bd42ad10a81dfdc8bf9c54b4e3236d432820c5e75e1c11c1e57626cdf3f1",
        "db_name": "baseball_1",
        "context_name": "Baseball1Context",
        "question": "List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.",
        "sql": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
        "linq": "context.Salaries.Join(context.Players, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Join(context.Teams, joined => joined.T1.TeamId, T3 => T3.TeamIdBr, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Year == 2005 && row.T3.Name == \"Washington Nationals\").Select(row => new { row.T2.NameFirst, row.T2.NameLast }).Intersect(context.Salaries.Join(context.Players, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Join(context.Teams, joined => joined.T1.TeamId, T3 => T3.TeamIdBr, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Year == 2007 && row.T3.Name == \"Washington Nationals\").Select(row => new { row.T2.NameFirst, row.T2.NameLast })).ToList();",
        "generated": "context.Salaries.Join(context.Players, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2005 && row.T1.TeamId == \"was\" && row.T1.PlayerId == row.T2.PlayerId).Select(row => new { row.T2.NameFirst, row.T2.NameLast }).Distinct().Join(context.Salaries, T1 => T1.PlayerId, T2 => T2.PlayerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == 2007 && row.T2.TeamId == \"was\" && row.T2.PlayerId == row.T1.PlayerId).Select(row => new { row.T1.NameFirst, row.T1.NameLast }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,323): error CS1061: '<anonymous type: string NameFirst, string NameLast>' does not contain a definition for 'PlayerId' and no accessible extension method 'PlayerId' accepting a first argument of type '<anonymous type: string NameFirst, string NameLast>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.27"
    },
    {
        "id": "0cfc083d1ad4f7e16d4a5bbb1b8f290ae7f5ffd1a30888c3620161c74f512fe3",
        "db_name": "baseball_1",
        "context_name": "Baseball1Context",
        "question": "How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?",
        "sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "linq": "context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Boston Red Stockings\" && row.T1.Year >= 1990 && row.T1.Year <= 2000).Select(row => row.T1.Games).Sum();",
        "generated": "context.Teams.Join(context.HomeGames, T1 => T1.TeamId, HG => HG.TeamId, (T1, HG) => new { T1, HG }).Where(row => row.T1.Name == \"Boston Red Stockings\" && row.HG.Year >= 1990 && row.HG.Year <= 2000).Select(row => row.HG.Attendance).Sum();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 4325}]\nLINQ Results: [{0: 0}]\n"
    },
    {
        "id": "66fc6ec07d9c7ec512c3fcbc0e34cccce4bb5277752ee373bec1c45483ea1386",
        "db_name": "baseball_1",
        "context_name": "Baseball1Context",
        "question": "Which team had the least number of attendances in home games in 1980?",
        "sql": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;",
        "linq": "context.HomeGames.Join(context.Teams, T1 => T1.TeamId, T2 => T2.TeamIdBr, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 1980).OrderBy(row => row.T1.Attendance).Select(row => new { row.T2.Name }).Take(1).ToList();",
        "generated": "context.Teams.Where(row => row.Year == 1980).OrderBy(row => row.Attendance).Select(row => new { row.Attendance }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Minnesota Twins}]\nLINQ Results: [{0: 769206}]\n"
    },
    {
        "id": "c2f39d89de4a757b99b8048bf756b73fa0659987bbb97da995234b67af161635",
        "db_name": "baseball_1",
        "context_name": "Baseball1Context",
        "question": "List the names of states that have more than 2 parks.",
        "sql": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;",
        "linq": "context.Parks.GroupBy(row => new { row.State }).Where(group => group.Count() > 2).Select(group => new { group.Key.State }).ToList();",
        "generated": "context.Parks.GroupBy(row => new { row.State }).Where(group => group.Count() > 2).Select(group => new { group.Key.State, group.Key.City, group.Key.ParkName }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,167): error CS1061: '<anonymous type: string State>' does not contain a definition for 'ParkName' and no accessible extension method 'ParkName' accepting a first argument of type '<anonymous type: string State>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.27"
    },
    {
        "id": "2581b5d95b8eb4aeaf93be6cd92144954a3afdcf5ba78ee4f350d1b168d1a8dc",
        "db_name": "baseball_1",
        "context_name": "Baseball1Context",
        "question": "How many team franchises are active, with active value 'Y'?",
        "sql": "SELECT count(*) FROM team_franchise WHERE active = 'Y';",
        "linq": "context.TeamFranchises.Where(row => row.Active == \"Y\").Count();",
        "generated": "context.TeamFranchises.Where(row => row.Active == \"Y\").Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "9085467a769b9536b2beb16412063470da76c58b800ad1425e63c94a2e09689b",
        "db_name": "baseball_1",
        "context_name": "Baseball1Context",
        "question": "Which cities have 2 to 4 parks?",
        "sql": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
        "linq": "context.Parks.GroupBy(row => new { row.City }).Where(group => group.Count() >= 2 && group.Count() <= 4).Select(group => new { group.Key.City }).ToList();",
        "generated": "context.Parks.GroupBy(row => new { row.City }).Where(group => group.Count() >= 2 && group.Count() <= 4).Select(group => new { group.Key.City }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "c76680bc5784d016bc0361401fb05dc80e3fd4fbbd94e099f8a2d52bf16946c7",
        "db_name": "baseball_1",
        "context_name": "Baseball1Context",
        "question": "Which park had most attendances in 2008?",
        "sql": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;",
        "linq": "context.HomeGames.Join(context.Parks, T1 => T1.ParkId, T2 => T2.ParkId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2008).OrderByDescending(row => row.T1.Attendance).Select(row => new { row.T2.ParkName }).Take(1).ToList();",
        "generated": "context.Parks.Where(row => row.Year == 2008).Select(row => new { row.Attendance }).OrderByDescending(row => row.Attendance).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,51): error CS1061: 'Park' does not contain a definition for 'Year' and no accessible extension method 'Year' accepting a first argument of type 'Park' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.39"
    },
    {
        "id": "c5c4cb265d542808bcd0999f5352c0566aee68a78f888a24cd4a6c20d06d8993",
        "db_name": "music_2",
        "context_name": "Music2Context",
        "question": "How many songs have a shared vocal?",
        "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "linq": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Type == \"shared\").Select(row => row.T2.Title).Distinct().Count();",
        "generated": "context.Vocals.GroupBy(row => new { row.SongId }).Where(group => group.Count() > 1).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "47cf4e12990dbcf0acdc156b83a9d2cf1345e5ca296b7345b91c97f867e0ac28",
        "db_name": "music_2",
        "context_name": "Music2Context",
        "question": "Find all the songs that do not have a back vocal.",
        "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "linq": "context.Vocals.Join(context.Songs, t1 => t1.SongId, t2 => t2.SongId, (t1, t2) => new { t1, t2 }).Select(row => row.t2.Title).Distinct().Except(context.Vocals.Join(context.Songs, t1 => t1.SongId, t2 => t2.SongId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Type == \"back\").Select(row => row.t2.Title)).ToList();",
        "generated": "context.Songs.Where(row =>!context.Vocals.Select(row => row.SongId).Contains(row.SongId)).Select(row => new { row.Title }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "89f2a21a4897bb9428dc15b220256fa956cfa1b9ecd80999464132ae52a2ca4e",
        "db_name": "music_2",
        "context_name": "Music2Context",
        "question": "Which vocal type has the band mate with first name \"Solveig\" played the most?",
        "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Vocals.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Firstname == \"Solveig\").GroupBy(row => new { row.T1.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
        "generated": "context.Bands.Join(context.Vocals, T1 => T1.Id, T2 => T2.Bandmate, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "3f5292238e1a400a002a1ed8137076273c299fb41af86a8a226b06dfab0a60c7",
        "db_name": "music_2",
        "context_name": "Music2Context",
        "question": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?",
        "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "linq": "context.Vocals.Join(context.Songs, T1 => T1.SongId, T2 => T2.SongId, (T1, T2) => new { T1, T2 }).Join(context.Bands, joined => joined.T1.Bandmate, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Lastname == \"Heilo\" && row.T2.Title == \"Der Kapitan\").Select(row => new { row.T1.Type }).ToList();",
        "generated": "context.Vocals.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Lastname == \"Heilo\" && row.T3.Title == \"Der Kapitan\").Select(row => new { row.T1.Type }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "e05a6487143357d6100a4cbed4ebd3e53478740d0697c59d6d1e9edb43529655",
        "db_name": "music_2",
        "context_name": "Music2Context",
        "question": "Find the first name of the band mate that has performed in most songs.",
        "sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Performances.Join(context.Bands, t1 => t1.Bandmate, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Join(context.Songs, joined => joined.t1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.t1, joined.t2, T3 }).GroupBy(row => new { row.t2.Firstname }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Firstname }).Take(1).ToList();",
        "generated": "context.Bands.Select(row => new { row.Firstname }).Distinct().OrderByDescending(group => group.Firstname.Count()).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.InvalidOperationException: The LINQ expression 'DbSet<Band>()\n    .Select(b => new { Firstname = b.Firstname })\n    .Distinct()\n    .OrderByDescending(e => e.Firstname\n        .Count())' could not be translated. Additional information: Translation of method 'System.Linq.Enumerable.Count' failed. If this method can be mapped to your custom function, see https://go.microsoft.com/fwlink/?linkid=2132413 for more information. Either rewrite the query in a form that can be translated, or switch to client evaluation explicitly by inserting a call to 'AsEnumerable', 'AsAsyncEnumerable', 'ToList', or 'ToListAsync'. See https://go.microsoft.com/fwlink/?linkid=2101038 for more information.\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.GetEnumerator()\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "5cc8ef2fc7f76ef2793372cf2fc081fbe7b6b0890e138527649a600a23d6a799",
        "db_name": "music_2",
        "context_name": "Music2Context",
        "question": "Which vocal type has the band mate with first name \"Marianne\" played the most?",
        "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Vocals.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Firstname == \"Marianne\").GroupBy(row => new { row.T1.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
        "generated": "context.Bands.Join(context.Vocals, T1 => T1.Id, T2 => T2.Bandmate, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "295cdfa24b42fd0fa73af200d710bb90be0471dd18186efea26f894c04f2dcc9",
        "db_name": "music_2",
        "context_name": "Music2Context",
        "question": "Who is performing in the back stage position for the song \"Der Kapitan\"? Show the first name and last name.",
        "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"",
        "linq": "context.Performances.Join(context.Bands, T1 => T1.Bandmate, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Title == \"Der Kapitan\" && row.T1.StagePosition == \"back\").Select(row => new { row.T2.Firstname, row.T2.Lastname }).ToList();",
        "generated": "context.Bands.Join(context.Performances, T1 => T1.Id, T2 => T2.Bandmate, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T2.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Title == \"Der Kapitan\").Select(row => new { row.T1.Firstname, row.T1.Lastname }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "695caf41dd3427afa38d3a38bd4e20008c8abf7348acfd45440657ae03522d07",
        "db_name": "music_2",
        "context_name": "Music2Context",
        "question": "What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?",
        "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"",
        "linq": "context.Albums.Join(context.Tracklists, T1 => T1.Aid, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T2.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Title == \"A Kiss Before You Go: Live in Hamburg\").Select(row => new { row.T3.Title }).ToList();",
        "generated": "context.Albums.Join(context.Tracklists, T1 => T1.Aid, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Title == \"A Kiss Before You Go: Live in Hamburg\").Select(row => row.T2.SongId).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "93647ffcba77aeddee95ae527cca29d06b05a59106fd23e06caad141fa6b48c7",
        "db_name": "music_2",
        "context_name": "Music2Context",
        "question": "What are all the songs in albums under label \"Universal Music Group\"?",
        "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"Universal Music Group\"",
        "linq": "context.Albums.Join(context.Tracklists, T1 => T1.Aid, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T2.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Label == \"Universal Music Group\").Select(row => new { row.T3.Title }).ToList();",
        "generated": "context.Albums.Join(context.Tracklists, T1 => T1.Aid, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Label == \"Universal Music Group\").Select(row => new { row.T2.SongId }).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "e394af06aabe9ffac438bd5a63f5e11f724b69dcaca4846c2fb14826b1a80a6c",
        "db_name": "music_2",
        "context_name": "Music2Context",
        "question": "Find the number of songs in all the studio albums.",
        "sql": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"",
        "linq": "context.Albums.Join(context.Tracklists, T1 => T1.Aid, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T2.SongId, T3 => T3.SongId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Type == \"Studio\").Select(row => row.T3.Title).Distinct().Count();",
        "generated": "context.Albums.Where(row => row.Type == \"Studio\").Select(row => row.SongId).Distinct().Count();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,88): error CS1061: 'Album' does not contain a definition for 'SongId' and no accessible extension method 'SongId' accepting a first argument of type 'Album' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.65"
    },
    {
        "id": "188fb3f6dadfd4ea2c0ba6cf3b346f38b567f7d36eeec6ed07857dfc5beef5f9",
        "db_name": "customers_and_addresses",
        "context_name": "CustomersAndAddressesContext",
        "question": "What is the total number of products that are in orders with status \"Cancelled\"?",
        "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"",
        "linq": "context.CustomerOrders.Join(context.OrderItems, t1 => t1.OrderId, t2 => t2.OrderId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.OrderStatus == \"Cancelled\").Select(row => row.t2.OrderQuantity).ToList().Select(value => double.Parse(value)).Sum();",
        "generated": "context.OrderItems.Join(context.CustomerOrders, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatus == \"Cancelled\").Select(row => row.T1.ProductId).Distinct().Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 77}]\nLINQ Results: [{0: 3}]\n"
    },
    {
        "id": "de6a3a4d1e667f4eeb01fe0a03bad895ba790ae2db5036605e1da1c7a07d9460",
        "db_name": "customers_and_addresses",
        "context_name": "CustomersAndAddressesContext",
        "question": "Who made the latest order?",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "linq": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t2.OrderDate).Select(row => new { row.t1.CustomerName }).Take(1).ToList();",
        "generated": "context.Customers.Select(row => new { row.CustomerName, row.DateBecameCustomer }).OrderByDescending(row => row.DateBecameCustomer).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Eunice Morar}]\nLINQ Results: [{0: Kitty Padberg III, 1: 2018-03-22 18:09:09}]\n"
    },
    {
        "id": "6dab39f591a7cb10c25d48c3cca5573e570511cdd0b2ca0fce5563f8f8838c49",
        "db_name": "customers_and_addresses",
        "context_name": "CustomersAndAddressesContext",
        "question": "Which product has been ordered most number of times?",
        "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.OrderItems.Join(context.Products, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ProductId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t2.ProductDetails }).Take(1).ToList();",
        "generated": "context.OrderItems.GroupBy(row => new { row.ProductId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ProductId }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Dove Chocolate}]\nLINQ Results: [{0: 2}]\n"
    },
    {
        "id": "bb324c7807b72fbc6aa31b9834385909f899fe186967074cd344a63fc58ffb68",
        "db_name": "customers_and_addresses",
        "context_name": "CustomersAndAddressesContext",
        "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "sql": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "linq": "context.Addresses.Where(row => row.City == \"East Julianaside\" && row.StateProvinceCounty == \"Texas\").Select(row => row.AddressContent).Union(context.Addresses.Where(row => row.City == \"Gleasonmouth\" && row.StateProvinceCounty == \"Arizona\").Select(row => row.AddressContent)).ToList();",
        "generated": "context.Addresses.Where(row => row.City == \"East Julianaside\" || row.City == \"Gleasonmouth\").Select(row => new { row.AddressContent }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b8f343ccd104fefb78e00e69777acad5812c5380da03f6d040ff9a19b3fa992a",
        "db_name": "customers_and_addresses",
        "context_name": "CustomersAndAddressesContext",
        "question": "Find the name of customers who did not pay with Cash.",
        "sql": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'",
        "linq": "context.Customers.Where(row => row.PaymentMethod != \"Cash\").Select(row => new { row.CustomerName }).ToList();",
        "generated": "context.Customers.Where(row => row.PaymentMethod!= \"Cash\").Select(row => new { row.CustomerName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "3442d5fea82c26c6285d8e462f3378964c270bef3c8a7ba0acf939b8393d3407",
        "db_name": "customers_and_addresses",
        "context_name": "CustomersAndAddressesContext",
        "question": "Find the names of customers who never ordered product Latte.",
        "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "linq": "context.Customers.Select(row => row.CustomerName).Except(context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Products, joined => joined.t3.ProductId, t4 => t4.ProductId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ProductDetails == \"Latte\").Select(row => row.t1.CustomerName)).ToList();",
        "generated": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.OrderItems, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.ProductId == context.Products.Where(row => row.ProductDetails == \"Latte\").Select(row => row.ProductId).First()).Select(row => row.T1.CustomerName).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Alexane Kilback}, {0: Devin Mills}, {0: Dr. Julia Wuckert MD}, {0: Eunice Morar}, {0: Kitty Padberg III}, {0: Maudie Kertzmann}, {0: Miss Aliyah Witting}, {0: Mozell Morissette}, {0: Prof. Alexzander Hamill}, {0: Prof. Ibrahim Bashirian}, {0: Prof. Reyes Berge II}, {0: Rodrick Heaney}, {0: Tillman Ernser}]\nLINQ Results: [{0: Salvatore Tillman}, {0: Clifford Pagac}]\n"
    },
    {
        "id": "70391427b2864dbaa0a274275eaba485bac1c7176bdccf63f82c7874ce877831",
        "db_name": "customers_and_addresses",
        "context_name": "CustomersAndAddressesContext",
        "question": "Find the names of customers who never placed an order.",
        "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id",
        "linq": "context.Customers.Select(row => row.CustomerName).Except(context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Select(row => row.t1.CustomerName)).ToList();",
        "generated": "context.Customers.Where(row =>!context.CustomerOrders.Select(row => row.CustomerId).Contains(row.CustomerId)).Select(row => new { row.CustomerName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "19c5599ead9e40b471fad291143f98ff0dbf11c1fb91c7fb416cdc223e20cd02",
        "db_name": "customers_and_addresses",
        "context_name": "CustomersAndAddressesContext",
        "question": "Find the names of customers who ordered both products Latte and Americano.",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "linq": "context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Products, joined => joined.t3.ProductId, t4 => t4.ProductId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ProductDetails == \"Latte\").Select(row => row.t1.CustomerName).Intersect(context.Customers.Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Products, joined => joined.t3.ProductId, t4 => t4.ProductId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ProductDetails == \"Americano\").Select(row => row.t1.CustomerName)).ToList();",
        "generated": "context.Products.Join(context.OrderItems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.CustomerOrders, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Customers, joined => joined.T3.CustomerId, T4 => T4.CustomerId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T1.ProductDetails == \"Latte\" && row.T2.ProductDetails == \"Americano\").Select(row => new { row.T4.CustomerName }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,450): error CS1061: 'OrderItem' does not contain a definition for 'ProductDetails' and no accessible extension method 'ProductDetails' accepting a first argument of type 'OrderItem' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.55"
    },
    {
        "id": "7b29b8718c979eb42b609dbe2eff8298415d87821da639993ea39a0d59a2e56b",
        "db_name": "music_4",
        "context_name": "Music4Context",
        "question": "Find the famous titles of artists that do not have any volume.",
        "sql": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "linq": "context.Artists.Where(row => !context.Volumes.Select(row => row.ArtistId).Contains(row.ArtistId)).Select(row => new { row.FamousTitle }).ToList();",
        "generated": "context.Artists.Where(row =>!context.Volumes.Select(row => row.ArtistId).Contains(row.ArtistId)).Select(row => new { row.FamousTitle }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "26f0aa4607cc20860ef0ace608fd819d62f7a22b11dd3738da86f9b8136588fd",
        "db_name": "music_4",
        "context_name": "Music4Context",
        "question": "Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.",
        "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2",
        "linq": "context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WeeksOnTop > 2).Select(row => row.T1.FamousTitle).Intersect(context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WeeksOnTop < 2).Select(row => row.T1.FamousTitle)).ToList();",
        "generated": "context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WeeksOnTop > 2).Select(row => new { row.T1.FamousTitle }).Union(context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WeeksOnTop < 2).Select(row => new { row.T1.FamousTitle })).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Bergen 1996}]\nLINQ Results: [{0: Bergen 1996}, {0: Imperivm}, {0: Transmutation}, {0: Unholy Metal Way (re-release)}]\n"
    },
    {
        "id": "a9e902e98f32fb3f2456bec0fbcc1401a3c6ab475392c6ffe2c310a5a7b92ba8",
        "db_name": "music_4",
        "context_name": "Music4Context",
        "question": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?",
        "sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"",
        "linq": "context.MusicFestivals.Where(row => row.Category == \"Best Song\" && row.Result == \"Awarded\").Select(row => new { row.DateOfCeremony }).ToList();",
        "generated": "context.MusicFestivals.Where(row => row.Category == \"Best Song\" && row.Result == \"Awarded\").Select(row => new { row.DateOfCeremony }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "baec94d585f37f0910a9b90ffe096bcc98981248e0d0f3050e35872ebbf55a6b",
        "db_name": "music_4",
        "context_name": "Music4Context",
        "question": "What is the issue date of the volume with the minimum weeks on top?",
        "sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1",
        "linq": "context.Volumes.OrderBy(row => row.WeeksOnTop).Select(row => new { row.IssueDate }).Take(1).ToList();",
        "generated": "context.Volumes.OrderBy(row => row.WeeksOnTop).Select(row => new { row.IssueDate }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "d4437d03ca4d2aa9872da241287877189ab2dbb3b54dc8b66d56d6e23cfd896d",
        "db_name": "music_4",
        "context_name": "Music4Context",
        "question": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.",
        "sql": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
        "linq": "context.MusicFestivals.GroupBy(row => new { row.Result }).Select(group => new { group.Key.Result, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
        "generated": "context.Volumes.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Join(context.MusicFestivals, joined => joined.T1.Volume, T3 => T3.Volume, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.MusicFestival1 }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.MusicFestival1, group.Count() }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,384): error CS0746: Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access. [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.35"
    },
    {
        "id": "1bf7c0993395f9948fbf91bb73496f41d69dfb2daa5499a94bbe6e352c2f5ec7",
        "db_name": "music_4",
        "context_name": "Music4Context",
        "question": "What are the issue dates of volumes associated with the artist aged 23 or younger?",
        "sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23",
        "linq": "context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age <= 23).Select(row => new { row.T2.IssueDate }).ToList();",
        "generated": "context.Artists.Join(context.Volumes, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age <= 23).Select(row => row.T2.IssueDate).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "9186eb184b5285a91311ebca744a151d6a14f14ad2b04287bd6c4d42a613a874",
        "db_name": "local_govt_in_alabama",
        "context_name": "LocalGovtInAlabamaContext",
        "question": "What is the most common participant type?",
        "sql": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Participants.GroupBy(row => new { row.ParticipantTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ParticipantTypeCode }).Take(1).ToList();",
        "generated": "context.Participants.GroupBy(row => new { row.ParticipantTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ParticipantTypeCode }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "d3cef9d769584058fc462972167aff06109d8bf0a0304145cf84f13247279761",
        "db_name": "sports_competition",
        "context_name": "SportsCompetitionContext",
        "question": "how many different positions are there?",
        "sql": "SELECT count(DISTINCT POSITION) FROM player",
        "linq": "context.Players.Select(row => row.Position).Distinct().Count();",
        "generated": "context.Players.Select(row => row.Position).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "3a48dcb7da7d0e5263b330210605627fb30b1e61465261d8142f3d31c5660fb1",
        "db_name": "sports_competition",
        "context_name": "SportsCompetitionContext",
        "question": "what are the name of players who get more than the average points.",
        "sql": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)",
        "linq": "context.Players.Where(row => row.Points > context.Players.Select(row => (double) row.Points).Average()).Select(row => new { row.Name }).ToList();",
        "generated": "context.Players.Where(row => row.Points > context.Players.Select(row => row.Points).Average()).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "927ebd294135b8058403a468a372283f17c59de63a8353642c7ca21bdac73747",
        "db_name": "sports_competition",
        "context_name": "SportsCompetitionContext",
        "question": "find the number of players whose points are lower than 30 in each position.",
        "sql": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION",
        "linq": "context.Players.Where(row => row.Points < 30).GroupBy(row => new { row.Position }).Select(group => new { Count = group.Count(), group.Key.Position }).ToList();",
        "generated": "context.Players.GroupBy(row => new { row.Position }).Select(group => new { group.Key.Position, Count = group.Where(row => row.Points < 30).Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1, 1: Full Back}, {0: 1, 1: Left Wing}, {0: 1, 1: Loose Forward}, {0: 3, 1: Prop}, {0: 3, 1: Second Row}]\nLINQ Results: [{0: Full Back, 1: 1}, {0: Hooker, 1: 0}, {0: Left Wing, 1: 1}, {0: Loose Forward, 1: 1}, {0: Prop, 1: 3}, {0: Right Centre, 1: 0}, {0: Right Wing, 1: 0}, {0: Scrum Half, 1: 0}, {0: Second Row, 1: 3}, {0: Stand Off, 1: 0}]\n"
    },
    {
        "id": "002db330e82e31c3d73cc3be96dd292bd1a62e8192b177abb88fccd7351ff902",
        "db_name": "sports_competition",
        "context_name": "SportsCompetitionContext",
        "question": "which country did participated in the most number of Tournament competitions?",
        "sql": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Competitions.Where(row => row.CompetitionType == \"Tournament\").GroupBy(row => new { row.Country }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Country }).Take(1).ToList();",
        "generated": "context.Clubs.GroupBy(row => new { row.Club.ClubId, row.Club.ClubRanks.Rank }).Select(group => new { group.Key.ClubId, group.Key.Rank, group.Select(row => row.Club.ClubRanks.Gold).Sum(), group.Select(row => row.Club.ClubRanks.Silver).Sum(), group.Select(row => row.Club.ClubRanks.Bronze).Sum() }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,261): error CS0746: Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access. [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    5 Error(s)\n\nTime Elapsed 00:00:01.46"
    },
    {
        "id": "bb0ed4564266d789ec67b16b10bfc8a55393c97a3b21477a113bec39d1349204",
        "db_name": "sports_competition",
        "context_name": "SportsCompetitionContext",
        "question": "which countries did participated in both Friendly and Tournament type competitions.",
        "sql": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'",
        "linq": "context.Competitions.Where(row => row.CompetitionType == \"Friendly\").Select(row => row.Country).Intersect(context.Competitions.Where(row => row.CompetitionType == \"Tournament\").Select(row => row.Country)).ToList();",
        "generated": "context.Clubs.Join(context.ClubRanks, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.CompetitionResults, joined => joined.t1.ClubId, t3 => t3.ClubId1, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.CompetitionResults, joined => joined.t3.CompetitionId, t4 => t4.CompetitionId, (joined, t4) => new { joined.t1, joined.t2, t3 = joined.t3, t4 }).Join(context.CompetitionResults, joined => joined.t4.CompetitionId, t5 => t5.CompetitionId, (joined, t5) => new { joined.t1, joined.t2, t3 = joined.t3, t4 = joined.t4, t5 }).Join(context.Clubs, joined => joined.t3.ClubId2, t6 => t6.ClubId, (joined, t6) => new { joined.t1, joined.t2, joined.t3, joined.t4, t6 }).Where(row => row.t1",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(12,40): error CS1026: ) expected [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:00.70"
    },
    {
        "id": "9bc4373bc93a49a081095beb68014912153906a0977bc0402e5472c22f9d1480",
        "db_name": "sports_competition",
        "context_name": "SportsCompetitionContext",
        "question": "Find the countries that have never participated in any competition with Friendly type.",
        "sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'",
        "linq": "context.Competitions.Select(row => row.Country).Except(context.Competitions.Where(row => row.CompetitionType == \"Friendly\").Select(row => row.Country)).ToList();",
        "generated": "context.Competitions.Where(row => row.CompetitionType == \"Friendly\" &&!context.Competitions.Select(row => row.Country).Contains(row.Country)).Select(row => new { row.Country }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Slovenia}]\nLINQ Results: []\n"
    },
    {
        "id": "6ca937f8b06c2352235e37b058082762c11abf74a7b2b90285122398d035ec7a",
        "db_name": "protein_institute",
        "context_name": "ProteinInstituteContext",
        "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
        "sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'",
        "linq": "context.Institutions.Join(context.Proteins, T1 => T1.InstitutionId, T2 => T2.InstitutionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Founded > 1880 || row.T1.Type == \"Private\").Count();",
        "generated": "context.Institutions.Join(context.Proteins, T1 => T1.InstitutionId, T2 => T2.InstitutionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Founded > 1880 || row.T1.Type == \"Private\").Select(row => row.T2.ProteinName).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "5265d36e746294775bc2f269233d503a4e044fa9e5b2724d28b78e047c09f77d",
        "db_name": "protein_institute",
        "context_name": "ProteinInstituteContext",
        "question": "Show the protein name and the institution name.",
        "sql": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "linq": "context.Institutions.Join(context.Proteins, T1 => T1.InstitutionId, T2 => T2.InstitutionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.ProteinName, row.T1.Institution1 }).ToList();",
        "generated": "context.Proteins.Join(context.Institutions, T1 => T1.InstitutionId, T2 => T2.InstitutionId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.Name, row.T1.ProteinName }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,167): error CS1061: 'Institution' does not contain a definition for 'Name' and no accessible extension method 'Name' accepting a first argument of type 'Institution' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.70"
    },
    {
        "id": "a66a432a7eb6e1dd66e62bd3788a609111b263316a87e3f494064b0aadd427c9",
        "db_name": "protein_institute",
        "context_name": "ProteinInstituteContext",
        "question": "How many proteins are associated with an institution in a building with at least 20 floors?",
        "sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20",
        "linq": "context.Institutions.Join(context.Proteins, T1 => T1.InstitutionId, T2 => T2.InstitutionId, (T1, T2) => new { T1, T2 }).Join(context.Buildings, joined => joined.T1.BuildingId, T3 => T3.BuildingId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Floors >= 20).Count();",
        "generated": "context.Buildings.Join(context.Institutions, T1 => T1.BuildingId, T2 => T2.BuildingId, (T1, T2) => new { T1, T2 }).Join(context.Proteins, joined => joined.T2.InstitutionId, T3 => T3.InstitutionId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Floors >= 20).Select(row => 1).Sum();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "f1d26f9522e3e220476375f8b7f820d6d94d2228270858ae31d8c4377f579c90",
        "db_name": "protein_institute",
        "context_name": "ProteinInstituteContext",
        "question": "How many institutions do not have an associated protein in our record?",
        "sql": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)",
        "linq": "context.Institutions.Where(row => !context.Proteins.Select(row => row.InstitutionId).Contains(row.InstitutionId)).Count();",
        "generated": "context.Proteins.Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 7}]\nLINQ Results: [{0: 5}]\n"
    },
    {
        "id": "22f20aa225a81cd69a27dc93790c70910bce7368de2ced79520ba80495d3adc2",
        "db_name": "medicine_enzyme_interaction",
        "context_name": "MedicineEnzymeInteractionContext",
        "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.",
        "sql": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
        "linq": "context.Medicines.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.MedicineId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.InteractionType == \"inhibitor\").Select(row => new { row.T1.Name, row.T1.TradeName }).Intersect(context.Medicines.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.MedicineId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.InteractionType == \"activitor\").Select(row => new { row.T1.Name, row.T1.TradeName })).ToList();",
        "generated": "context.Medicines.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.MedicineId, (T1, T2) => new { T1, T2 }).Join(context.Enzymes, joined => joined.T2.EnzymeId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.InteractionType == \"inhibitor\" && row.T2.InteractionType == \"activitor\").Select(row => new { row.T1.Name, row.T1.TradeName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Asenapine, 1: Saphris}, {0: Iloperidone, 1: Fanapt}]\nLINQ Results: []\n"
    },
    {
        "id": "7cb3abbe0e7ccb7051c42bf79a88c6a0a4dce6a574c67fcacfd2d34a06d0120a",
        "db_name": "medicine_enzyme_interaction",
        "context_name": "MedicineEnzymeInteractionContext",
        "question": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.",
        "sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'",
        "linq": "context.Medicines.Select(row => new { row.Name, row.TradeName }).Except(context.Medicines.Join(context.MedicineEnzymeInteractions, T1 => T1.Id, T2 => T2.MedicineId, (T1, T2) => new { T1, T2 }).Join(context.Enzymes, joined => joined.T2.EnzymeId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Product == \"Protoporphyrinogen IX\").Select(row => new { row.T1.Name, row.T1.TradeName })).ToList();",
        "generated": "context.Medicines.Where(row =>!context.MedicineEnzymeInteractions.Select(row => row.Enzyme.Product).Contains(\"Heme\")).Select(row => new { row.Name, row.TradeName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Amisulpride, 1: Solian}, {0: Aripiprazole, 1: Abilify}, {0: Asenapine, 1: Saphris}, {0: Blonanserin, 1: Lonasen}, {0: Carpipramine, 1: Prazinil}, {0: Clocapramine, 1: Clofekton}, {0: Clozapine, 1: Clozaril}, {0: Iloperidone, 1: Fanapt}, {0: Lurasidone, 1: Latuda}, {0: Melperone, 1: Buronil}, {0: Mosapramine, 1: Cremin}, {0: Olanzapine, 1: Zyprexa}, {0: Paliperidone, 1: Invega}, {0: Perospirone, 1: Lullan}, {0: Quetiapine, 1: Seroquel}, {0: Remoxipride, 1: Roxiam}, {0: Risperidone, 1: Risperdal}, {0: Sertindole, 1: Serdolect}, {0: Sulpiride, 1: Sulpirid}, {0: Zotepine, 1: Nipolept}]\nLINQ Results: [{0: Amisulpride, 1: Solian}, {0: Aripiprazole, 1: Abilify}, {0: Asenapine, 1: Saphris}, {0: Blonanserin, 1: Lonasen}, {0: Carpipramine, 1: Prazinil}, {0: Clocapramine, 1: Clofekton}, {0: Clozapine, 1: Clozaril}, {0: Iloperidone, 1: Fanapt}, {0: Lurasidone, 1: Latuda}, {0: Melperone, 1: Buronil}, {0: Mosapramine, 1: Cremin}, {0: Olanzapine, 1: Zyprexa}, {0: Paliperidone, 1: Invega}, {0: Perospirone, 1: Lullan}, {0: Quetiapine, 1: Seroquel}, {0: Remoxipride, 1: Roxiam}, {0: Risperidone, 1: Risperdal}, {0: Sertindole, 1: Serdolect}, {0: Sulpiride, 1: Sulpirid}, {0: Ziprasidone, 1: Geodon}, {0: Zotepine, 1: Nipolept}]\n"
    },
    {
        "id": "c9a0d0117c798d2e890396c5c1337d05acb5133598add940ffa38849b3c0793d",
        "db_name": "medicine_enzyme_interaction",
        "context_name": "MedicineEnzymeInteractionContext",
        "question": "How many distinct FDA approval statuses are there for the medicines?",
        "sql": "SELECT count(DISTINCT FDA_approved) FROM medicine",
        "linq": "context.Medicines.Select(row => row.FdaApproved).Distinct().Count();",
        "generated": "context.Medicines.Select(row => row.FdaApproved).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "740be68beec7f99d25bb071c521fbfe3cdc09244c810c138f53093bc659b470a",
        "db_name": "medicine_enzyme_interaction",
        "context_name": "MedicineEnzymeInteractionContext",
        "question": "Which enzyme names have the substring \"ALA\"?",
        "sql": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
        "linq": "context.Enzymes.Where(row => EF.Functions.Like(row.Name, \"%ALA%\")).Select(row => new { row.Name }).ToList();",
        "generated": "context.Enzymes.Where(row => row.Name.Contains(\"ALA\")).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "27a6ed0ea3e059fbaa618d8ae3a0d3de104012e8b4ba6132b25c4433053dace8",
        "db_name": "medicine_enzyme_interaction",
        "context_name": "MedicineEnzymeInteractionContext",
        "question": "find the number of medicines offered by each trade.",
        "sql": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
        "linq": "context.Medicines.GroupBy(row => new { row.TradeName }).Select(group => new { group.Key.TradeName, Count = group.Count() }).ToList();",
        "generated": "context.Medicines.GroupBy(row => new { row.TradeName }).Select(group => new { Count = group.Count(), group.Key.TradeName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Abilify, 1: 1}, {0: Buronil, 1: 1}, {0: Clofekton, 1: 1}, {0: Clozaril, 1: 1}, {0: Cremin, 1: 1}, {0: Fanapt, 1: 1}, {0: Geodon, 1: 1}, {0: Invega, 1: 1}, {0: Latuda, 1: 1}, {0: Lonasen, 1: 1}, {0: Lullan, 1: 1}, {0: Nipolept, 1: 1}, {0: Prazinil, 1: 1}, {0: Risperdal, 1: 1}, {0: Roxiam, 1: 1}, {0: Saphris, 1: 1}, {0: Serdolect, 1: 1}, {0: Seroquel, 1: 1}, {0: Solian, 1: 1}, {0: Sulpirid, 1: 1}, {0: Zyprexa, 1: 1}]\nLINQ Results: [{0: 1, 1: Abilify}, {0: 1, 1: Buronil}, {0: 1, 1: Clofekton}, {0: 1, 1: Clozaril}, {0: 1, 1: Cremin}, {0: 1, 1: Fanapt}, {0: 1, 1: Geodon}, {0: 1, 1: Invega}, {0: 1, 1: Latuda}, {0: 1, 1: Lonasen}, {0: 1, 1: Lullan}, {0: 1, 1: Nipolept}, {0: 1, 1: Prazinil}, {0: 1, 1: Risperdal}, {0: 1, 1: Roxiam}, {0: 1, 1: Saphris}, {0: 1, 1: Serdolect}, {0: 1, 1: Seroquel}, {0: 1, 1: Solian}, {0: 1, 1: Sulpirid}, {0: 1, 1: Zyprexa}]\n"
    },
    {
        "id": "45fa44daf3352b6116e709b48f21cdf0fa1d3a8e36d97445509d9d8ef7aaafd8",
        "db_name": "student_1",
        "context_name": "Student1Context",
        "question": "Find the last names of the students in third grade that are not taught by COVIN JEROME.",
        "sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
        "linq": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Grade == 3 && row.T2.FirstName != \"COVIN\" && row.T2.LastName != \"JEROME\").Select(row => new { row.T1.LastName }).Distinct().ToList();",
        "generated": "context.Lists.Where(row => row.Grade == 3 &&!context.Teachers.Select(row => row.Classroom).Contains(row.Classroom)).Select(row => new { row.LastName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: AREHART}, {0: GROENEWEG}, {0: NABOZNY}, {0: PINNELL}, {0: SANTORY}, {0: VANDERWOUDE}]\nLINQ Results: []\n"
    },
    {
        "id": "e5029d23f0ac828706f65f8de81472f6d7d3c088109459ecdb30f4304301f66b",
        "db_name": "student_1",
        "context_name": "Student1Context",
        "question": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.",
        "sql": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade",
        "linq": "context.Lists.GroupBy(row => new { row.Grade }).Select(group => new { group.Key.Grade, CountDistinctClassroom = group.Select(row => row.Classroom).Distinct().Count(), Count = group.Count() }).ToList();",
        "generated": "context.Lists.GroupBy(row => new { row.Grade }).Select(group => new { group.Key.Grade, group.Count(), group.Sum(row => row.Classroom) }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,122): error CS0746: Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access. [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.52"
    },
    {
        "id": "e65f1ef0734cdedd70a8f66f93fbfb274834a24225d344a98f199901c083d259",
        "db_name": "student_1",
        "context_name": "Student1Context",
        "question": "For each classroom, report the classroom number and the number of grades using it.",
        "sql": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "linq": "context.Lists.GroupBy(row => new { row.Classroom }).Select(group => new { group.Key.Classroom, CountDistinctGrade = group.Select(row => row.Grade).Distinct().Count() }).ToList();",
        "generated": "context.Lists.GroupBy(row => row.Classroom).Select(group => new { group.Key, CountOfGrades = group.Select(row => row.Grade).Distinct().Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b1f366af07639a156db65b9d6f5fe4b0ef3fc3d6a9c7a14d6a43ce3d5ed9645f",
        "db_name": "student_1",
        "context_name": "Student1Context",
        "question": "Which classroom has the most students?",
        "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Lists.GroupBy(row => new { row.Classroom }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Classroom }).Take(1).ToList();",
        "generated": "context.Lists.GroupBy(row => new { row.Classroom }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Classroom }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "85491787a06d9e179492ba1acc62ded7c5c282083a977bffacf2abc24f03fed5",
        "db_name": "student_1",
        "context_name": "Student1Context",
        "question": "Report the number of students in each classroom.",
        "sql": "SELECT classroom ,  count(*) FROM list GROUP BY classroom",
        "linq": "context.Lists.GroupBy(row => new { row.Classroom }).Select(group => new { group.Key.Classroom, Count = group.Count() }).ToList();",
        "generated": "context.Lists.GroupBy(row => row.Classroom).Select(group => new { Count = group.Count(), Classroom = group.Key }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 101, 1: 3}, {0: 102, 1: 7}, {0: 103, 1: 5}, {0: 104, 1: 4}, {0: 105, 1: 5}, {0: 106, 1: 7}, {0: 107, 1: 6}, {0: 108, 1: 2}, {0: 109, 1: 8}, {0: 110, 1: 6}, {0: 111, 1: 4}, {0: 112, 1: 3}]\nLINQ Results: [{0: 3, 1: 101}, {0: 7, 1: 102}, {0: 5, 1: 103}, {0: 4, 1: 104}, {0: 5, 1: 105}, {0: 7, 1: 106}, {0: 6, 1: 107}, {0: 2, 1: 108}, {0: 8, 1: 109}, {0: 6, 1: 110}, {0: 4, 1: 111}, {0: 3, 1: 112}]\n"
    },
    {
        "id": "53c34dec3158cc7c36132596c4abcb12be66e109b3c2d61724f89659ba92e603",
        "db_name": "student_1",
        "context_name": "Student1Context",
        "question": "Find the name of the teacher who teaches the largest number of students.",
        "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Lists.Join(context.Teachers, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.FirstName, row.T2.LastName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.FirstName, group.Key.LastName }).Take(1).ToList();",
        "generated": "context.Teachers.Join(context.Lists, T1 => T1.Classroom, T2 => T2.Classroom, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Classroom }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Classroom, T1 = group.First().T1.FirstName }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0:  GORDON, 1: KAWA}]\nLINQ Results: [{0: 109, 1:  GORDON}]\n"
    },
    {
        "id": "da5f19e2bdcdb120b770d646b7dcf7cc926a34623ff5ff20401f90ef63e9323b",
        "db_name": "student_1",
        "context_name": "Student1Context",
        "question": "Find the number of students in one classroom.",
        "sql": "SELECT count(*) ,  classroom FROM list GROUP BY classroom",
        "linq": "context.Lists.GroupBy(row => new { row.Classroom }).Select(group => new { Count = group.Count(), group.Key.Classroom }).ToList();",
        "generated": "context.Lists.Where(row => row.Classroom == context.Lists.Select(row => row.Classroom).Distinct().First()).Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 3, 1: 101}, {0: 7, 1: 102}, {0: 5, 1: 103}, {0: 4, 1: 104}, {0: 5, 1: 105}, {0: 7, 1: 106}, {0: 6, 1: 107}, {0: 2, 1: 108}, {0: 8, 1: 109}, {0: 6, 1: 110}, {0: 4, 1: 111}, {0: 3, 1: 112}]\nLINQ Results: [{0: 3}]\n"
    },
    {
        "id": "8c36f106fb6e55b5b2ab895e67a7bab3ae50451665f496b3900484efacc4cc4b",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "Find the name and address of the department that has the highest number of students.",
        "sql": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Students.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.DeptName, group.First().T2.DeptAddress }).Take(1).ToList();",
        "generated": "context.Departments.Join(context.Students, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DeptCode, T1 = group.First().T1.DeptAddress }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Accounting, 1: KLR 211, Box 52}]\nLINQ Results: [{0: ACCT, 1: KLR 211, Box 52}]\n"
    },
    {
        "id": "70cd56f8ba3c3a0f7b7cbe24e205232b11952f2c4328fb06d94c430e9173e661",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "Find the name, address, number of students in the departments that have the top 3 highest number of students.",
        "sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
        "linq": "context.Students.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).Select(group => new { group.First().T2.DeptName, group.First().T2.DeptAddress, Count = group.Count() }).OrderByDescending(group => group.Count).Take(3).ToList();",
        "generated": "context.Departments.Join(context.Students, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeptCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.DeptName, group.First().T1.DeptAddress }).Take(3).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Parameter 'index')\n   at System.Linq.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument)\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 239\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\n"
    },
    {
        "id": "264138601206f51a03d990e5b9c4c2b79bb2037eb7f8194176c39204aaedd365",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "Find the first name and office of the professor who is in the history department and has a Ph.D. degree.",
        "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'",
        "linq": "context.Employees.Join(context.Professors, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\" && row.T2.ProfHighDegree == \"Ph.D.\").Select(row => new { row.T1.EmpFname, row.T2.ProfOffice }).ToList();",
        "generated": "context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DeptName == \"History\" && row.T1.ProfHighDegree == \"Ph.D.\").Select(row => new { row.T1.ProfOffice, row.T1.EmpFname }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,256): error CS1061: 'Professor' does not contain a definition for 'EmpFname' and no accessible extension method 'EmpFname' accepting a first argument of type 'Professor' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.52"
    },
    {
        "id": "31e217a2d2bb6e581f4d3f1e6048745138d8a121f8cb7455f2851cb6a3164644",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "Find the first names of all instructors who have taught some course and the course code.",
        "sql": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num",
        "linq": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.EmpFname, row.T1.CrsCode }).ToList();",
        "generated": "context.Employees.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T2.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.EmpFname }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Parameter 'index')\n   at System.Linq.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument)\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 239\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\n"
    },
    {
        "id": "785f59586bb03441ca76ff21db7cf0360f114f0c784ae1efd50b2cce5ad4a46f",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "Find the first names of all instructors who have taught some course and the course description.",
        "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code",
        "linq": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.EmpFname, row.T3.CrsDescription }).ToList();",
        "generated": "context.Courses.Join(context.Classes, T1 => T1.CrsCode, T2 => T2.CrsCode, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.CrsDescription, row.T2.ProfNum }).Distinct().Select(row => new { row.ProfNum, row.CrsDescription }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Arnelle, 1: Accounting I}, {0: Arnelle, 1: Accounting I}, {0: Robert, 1: Accounting I}, {0: Ismael, 1: Accounting II}, {0: Ismael, 1: Accounting II}, {0: Carlos, 1: Intro. to Microcomputing}, {0: Gerald, 1: Intro. to Microcomputing}, {0: Carlos, 1: Intro. to Microcomputing}, {0: Peter, 1: Database Design and Implementation}, {0: Gerald, 1: Intro. to Statistics}, {0: Gerald, 1: Intro. to Statistics}, {0: Peter, 1: Statistical Applications}, {0: Peter, 1: Statistical Applications}]\nLINQ Results: [{0: 105, 1: Accounting I}, {0: 342, 1: Accounting I}, {0: 301, 1: Accounting II}, {0: 228, 1: Intro. to Microcomputing}, {0: 114, 1: Intro. to Microcomputing}, {0: 162, 1: Database Design and Implementation}, {0: 114, 1: Intro. to Statistics}, {0: 162, 1: Statistical Applications}]\n"
    },
    {
        "id": "1e974b78e8f0b5c55105e77c8e52c70ce607a42747877e5c99fafecdcd2968d0",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "Find the first names and offices of all instructors who have taught some course and also find the course description.",
        "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num",
        "linq": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Professors, joined => joined.T2.EmpNum, T4 => T4.EmpNum, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Select(row => new { row.T2.EmpFname, row.T4.ProfOffice, row.T3.CrsDescription }).ToList();",
        "generated": "context.Classes.Join(context.Professors, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.ProfOffice, row.T3.CrsDescription }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Parameter 'index')\n   at System.Linq.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument)\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 239\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\n"
    },
    {
        "id": "e1cc74d245bbd91c2015455ba145f302744f0c92db9157b748aa21f1f3a8d559",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "Find the first names and offices of all instructors who have taught some course and the course description and the department name.",
        "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code",
        "linq": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T1.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Professors, joined => joined.T2.EmpNum, T4 => T4.EmpNum, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Join(context.Departments, joined => joined.T4.DeptCode, T5 => T5.DeptCode, (joined, T5) => new { joined.T1, joined.T2, joined.T3, joined.T4, T5 }).Select(row => new { row.T2.EmpFname, row.T4.ProfOffice, row.T3.CrsDescription, row.T5.DeptName }).ToList();",
        "generated": "context.Professors.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T2.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Departments, joined => joined.T3.DeptCode, T4 => T4.DeptCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Select(row => new { row.T1.ProfOffice, row.T1.EmpFname }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,425): error CS1061: 'Professor' does not contain a definition for 'EmpFname' and no accessible extension method 'EmpFname' accepting a first argument of type 'Professor' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.48"
    },
    {
        "id": "96c7bb83be1a4afc35bd8bb95208648c21fa481d4bcd1a44cfd699df304063b9",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "Find names of all students who took some course and the course description.",
        "sql": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code",
        "linq": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T2.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Courses, joined => joined.T3.CrsCode, T4 => T4.CrsCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Select(row => new { row.T1.StuFname, row.T1.StuLname, row.T4.CrsDescription }).ToList();",
        "generated": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T2.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Courses, joined => joined.T3.CrsCode, T4 => T4.CrsCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Select(row => new { row.T1.StuLname, row.T4.CrsDescription }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Parameter 'index')\n   at System.Linq.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument)\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 239\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\n"
    },
    {
        "id": "c134ba95ee1e4c2b3cec32958be42cdb12c1c60253962ebd9d0779fb5fbda5b2",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "Find names of all students who took some course and got A or C.",
        "sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'",
        "linq": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EnrollGrade == \"C\" || row.T2.EnrollGrade == \"A\").Select(row => new { row.T1.StuFname, row.T1.StuLname }).ToList();",
        "generated": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EnrollGrade == \"A\" || row.T2.EnrollGrade == \"C\").Select(row => new { row.T1.StuLname, row.T1.StuFname }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: William, 1: Bowser}, {0: William, 1: Bowser}, {0: William, 1: Bowser}, {0: Anne, 1: Smithson}]\nLINQ Results: [{0: Bowser, 1: William}, {0: Bowser, 1: William}, {0: Bowser, 1: William}, {0: Smithson, 1: Anne}]\n"
    },
    {
        "id": "79db1a69f9af42ef5d774053f4d6a1b6e1723bf0d6e3b3370e674e42878e6ba1",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "Find the first names of all professors in the Accounting department who is teaching some course and the class room.",
        "sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'",
        "linq": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Professors, joined => joined.T2.EmpNum, T3 => T3.EmpNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Departments, joined => joined.T3.DeptCode, T4 => T4.DeptCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.DeptName == \"Accounting\").Select(row => new { row.T2.EmpFname, row.T1.ClassRoom }).ToList();",
        "generated": "context.Professors.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T2.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptCode == \"ACCT\").Select(row => new { row.T1.ProfExtension }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Arnelle, 1: BUS200}, {0: Arnelle, 1: BUS311}, {0: Gerald, 1: KLR200}, {0: Gerald, 1: KLR200}, {0: Gerald, 1: KLR211}, {0: Ismael, 1: BUS252}, {0: Ismael, 1: BUS311}]\nLINQ Results: [{0: 8665}, {0: 5514}, {0: 4683}]\n"
    },
    {
        "id": "55b4e6e6f579e1e26040bf2fc4d6dd89f8b91b90b97a1b20d684aa916c7e78fe",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.",
        "sql": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'",
        "linq": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Professors, joined => joined.T2.EmpNum, T3 => T3.EmpNum, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Departments, joined => joined.T3.DeptCode, T4 => T4.DeptCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.DeptName == \"Computer Info. Systems\").Select(row => new { row.T2.EmpFname, row.T3.ProfHighDegree }).Distinct().ToList();",
        "generated": "context.Professors.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).Join(context.Courses, joined => joined.T2.CrsCode, T3 => T3.CrsCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Departments, joined => joined.T3.DeptCode, T4 => T4.DeptCode, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.DeptName == \"Computer Info. Systems\").Select(row => new { row.T1.ProfHighDegree, row.T1.EmpFname }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,487): error CS1061: 'Professor' does not contain a definition for 'EmpFname' and no accessible extension method 'EmpFname' accepting a first argument of type 'Professor' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49"
    },
    {
        "id": "c299bf7e3fb811b8a9305f307a05ceb1c3f4becaf0d0dbcce6ffb058d8dce336",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "What is the last name of the student who got a grade A in the class with code 10018.",
        "sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018",
        "linq": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.EnrollGrade == \"A\" && row.T2.ClassCode == \"10018\").Select(row => new { row.T1.StuLname }).ToList();",
        "generated": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T2.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.ClassSection == \"A\").Select(row => new { row.T1.StuLname }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Bowser}]\nLINQ Results: []\n"
    },
    {
        "id": "6d9e3ec22ffec4712d9149e98fdb20d37f79d4e1cfbf51fa43d64aafdbd3b6c5",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "Find the first name and office of history professor who did not get a Ph.D. degree.",
        "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",
        "linq": "context.Professors.Join(context.Employees, T1 => T1.EmpNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T1.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DeptName == \"History\" && row.T1.ProfHighDegree != \"Ph.D.\").Select(row => new { row.T2.EmpFname, row.T1.ProfOffice }).ToList();",
        "generated": "context.Professors.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ProfHighDegree!= \"Ph.D.\" && row.T2.DeptName == \"History\").Select(row => new { row.T1.ProfOffice, row.T1.EmpFname }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,255): error CS1061: 'Professor' does not contain a definition for 'EmpFname' and no accessible extension method 'EmpFname' accepting a first argument of type 'Professor' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.52"
    },
    {
        "id": "997471b4a6e8a227a09d015485d8f1ed55e3763b2d68fed18fe02e316abf59fb",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "Find the first names of professors who are teaching more than one class.",
        "sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1",
        "linq": "context.Classes.Join(context.Employees, T1 => T1.ProfNum, T2 => T2.EmpNum, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProfNum }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.EmpFname }).ToList();",
        "generated": "context.Professors.Join(context.Classes, T1 => T1.EmpNum, T2 => T2.ProfNum, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EmpNum }).Where(group => group.Count() > 1).Select(group => group.First().T1.ProfExtension).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Arnelle}, {0: Gerald}, {0: Peter}, {0: Carlos}, {0: Ismael}]\nLINQ Results: [{0: 8665}, {0: 4436}, {0: 2359}, {0: 3000}, {0: 4683}]\n"
    },
    {
        "id": "64d3c278f31a654208d3cc6a58412ec4868975a9421a0c46dac7f00cb28172a9",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "Find the first names of students who took exactly one class.",
        "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1",
        "linq": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StuNum }).Where(group => group.Count() == 1).Select(group => new { group.First().T1.StuFname }).ToList();",
        "generated": "context.Students.Join(context.Classes, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ClassSection == \"01\").Select(row => row.T1.StuFname).Distinct().ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,85): error CS1061: 'Class' does not contain a definition for 'StuNum' and no accessible extension method 'StuNum' accepting a first argument of type 'Class' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.54"
    },
    {
        "id": "4c1df713e2f6b1e176544ed510225cba67a2381136df68724942c760d84f6615",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "Find the name of department that offers the class whose description has the word \"Statistics\".",
        "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'",
        "linq": "context.Courses.Join(context.Departments, T1 => T1.DeptCode, T2 => T2.DeptCode, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.CrsDescription, \"%Statistics%\")).Select(row => new { row.T2.DeptName }).ToList();",
        "generated": "context.Classes.Join(context.Courses, T1 => T1.CrsCode, T2 => T2.CrsCode, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.DeptCode, T3 => T3.DeptCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.CrsDescription.Contains(\"Statistics\")).Select(row => new { row.T3.DeptName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Computer Info. Systems}]\nLINQ Results: [{0: Computer Info. Systems}, {0: Computer Info. Systems}]\n"
    },
    {
        "id": "023377e88bdea5596d1370855c01ef6d23334d3e6cb178fdc151225c130d8560",
        "db_name": "college_1",
        "context_name": "College1Context",
        "question": "What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?",
        "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'",
        "linq": "context.Students.Join(context.Enrolls, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Join(context.Classes, joined => joined.T2.ClassCode, T3 => T3.ClassCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CrsCode == \"ACCT-211\" && EF.Functions.Like(row.T1.StuLname, \"S%\")).Select(row => new { row.T1.StuFname }).ToList();",
        "generated": "context.Students.Join(context.Classes, T1 => T1.StuNum, T2 => T2.StuNum, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ClassSection == \"ACCT-211\").Select(row => new { row.T1.StuFname }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,85): error CS1061: 'Class' does not contain a definition for 'StuNum' and no accessible extension method 'StuNum' accepting a first argument of type 'Class' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.56"
    },
    {
        "id": "c566627ce518b80b98adf46a6c5d10db944ad76af8c8eb9e32351a3fed71aed0",
        "db_name": "local_govt_mdm",
        "context_name": "LocalGovtMdmContext",
        "question": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?",
        "sql": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'",
        "linq": "context.CustomerMasterIndices.Join(context.CmiCrossReferences, T1 => T1.MasterCustomerId, T2 => T2.MasterCustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CmiDetails == \"Gottlieb ,  Becker and Wyman\").Select(row => new { row.T2.SourceSystemCode }).Distinct().ToList();",
        "generated": "context.CustomerMasterIndices.Join(context.CmiCrossReferences, T1 => T1.MasterCustomerId, T2 => T2.MasterCustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CmiDetails == \"Gottlieb, Becker and Wyman\").Select(row => row.T2.SourceSystemCode).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: []\nLINQ Results: [{0: Parking}, {0: Benefits}, {0: Electoral}]\n"
    },
    {
        "id": "2579825570059ddcdb681770fb8b31d1ffa7fbdf4d583b9c8c29cbfa3f3c324b",
        "db_name": "local_govt_mdm",
        "context_name": "LocalGovtMdmContext",
        "question": "Which cmi cross reference id is not related to any parking taxes?",
        "sql": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
        "linq": "context.CmiCrossReferences.Select(row => row.CmiCrossRefId).Except(context.ParkingFines.Select(row => row.CmiCrossRefId)).ToList();",
        "generated": "context.CmiCrossReferences.Where(row =>!context.ParkingFines.Select(row => row.CmiCrossRefId).Contains(row.CmiCrossRefId)).Select(row => new { row.CmiCrossRefId }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "17097cab93a18496b677e5bc365b6ce06245ff12b9df74df1b2034a3ac39ed23",
        "db_name": "local_govt_mdm",
        "context_name": "LocalGovtMdmContext",
        "question": "Which distinct source system code includes the substring 'en'?",
        "sql": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'",
        "linq": "context.CmiCrossReferences.Where(row => EF.Functions.Like(row.SourceSystemCode, \"%en%\")).Select(row => new { row.SourceSystemCode }).Distinct().ToList();",
        "generated": "context.CmiCrossReferences.Where(row => row.SourceSystemCode.Contains(\"en\")).Select(row => row.SourceSystemCode).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "54df1edc0be0e5b87dc926bf872993c49942d21ca5771fc208dcfffde7ec490d",
        "db_name": "dorm_1",
        "context_name": "Dorm1Context",
        "question": "Find the total number of students living in the male dorm (with gender M).",
        "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "linq": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Gender == \"M\").Count();",
        "generated": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Dormid == 7 && row.T1.Sex == \"M\").Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1}]\nLINQ Results: [{0: 0}]\n"
    },
    {
        "id": "63e2b1516a59930ea79390326f47750783f7768c64024ed1df8166268c001710",
        "db_name": "dorm_1",
        "context_name": "Dorm1Context",
        "question": "Find the number of female students (with F sex) living in Smith Hall",
        "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "linq": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DormName == \"Smith Hall\" && row.T1.Sex == \"F\").Count();",
        "generated": "context.Students.Where(row => row.Sex == \"F\").Select(row => row.Lname).Intersect(context.LivesIns.Where(row => row.Dormid == 3).Select(row => row.StuId)).Count();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,166): error CS1061: 'LivesIn' does not contain a definition for 'StuId' and no accessible extension method 'StuId' accepting a first argument of type 'LivesIn' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.54"
    },
    {
        "id": "f39c44db06af9ed7a8b13e78d5d8eba028ec8b6d4e18205e8f3ea62b4a59ab0d",
        "db_name": "dorm_1",
        "context_name": "Dorm1Context",
        "question": "Find the name of amenities Smith Hall dorm have.",
        "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'",
        "linq": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.DormName == \"Smith Hall\").Select(row => new { row.T3.AmenityName }).ToList();",
        "generated": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.DormName == \"Smith Hall\").Select(row => new { row.T3.AmenityName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "0846ee5ec8f20d66f3c697a693364866d78bf7c94a4b49e94fd5a50a93f5a5e0",
        "db_name": "dorm_1",
        "context_name": "Dorm1Context",
        "question": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.",
        "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name",
        "linq": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.DormName == \"Smith Hall\").OrderBy(row => row.T3.AmenityName).Select(row => new { row.T3.AmenityName }).ToList();",
        "generated": "context.HasAmenities.Join(context.DormAmenities, T1 => T1.Amenid, T2 => T2.Amenid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.DormName == \"Smith Hall\").Select(row => new { row.T2.AmenityName }).OrderBy(row => row.AmenityName).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,171): error CS1061: 'DormAmenity' does not contain a definition for 'Dormid' and no accessible extension method 'Dormid' accepting a first argument of type 'DormAmenity' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.60"
    },
    {
        "id": "c35f96b9b20e068aae19ae9fce393bb8838fe454dbe51d2afd9c3aa78a8702b2",
        "db_name": "dorm_1",
        "context_name": "Dorm1Context",
        "question": "Find the name of amenity that is most common in all dorms.",
        "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.DormAmenities.Join(context.HasAmenities, T1 => T1.Amenid, T2 => T2.Amenid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Amenid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.AmenityName }).Take(1).ToList();",
        "generated": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Amenid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.AmenityName }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,242): error CS1061: 'HasAmenity' does not contain a definition for 'AmenityName' and no accessible extension method 'AmenityName' accepting a first argument of type 'HasAmenity' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.52"
    },
    {
        "id": "e049bc1d4a3664d6653b4ab64d64d4960b9522ca74fe07362da5882030af8e78",
        "db_name": "dorm_1",
        "context_name": "Dorm1Context",
        "question": "Find the name and capacity of the dorm with least number of amenities.",
        "sql": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
        "linq": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T2.Dormid }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.DormName, group.First().T1.StudentCapacity }).Take(1).ToList();",
        "generated": "context.Dorms.Join(context.DormAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Dormid }).OrderBy(group => group.Count()).Select(group => new { group.Key.T1.DormName, group.Key.T1.StudentCapacity }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,88): error CS1061: 'DormAmenity' does not contain a definition for 'Dormid' and no accessible extension method 'Dormid' accepting a first argument of type 'DormAmenity' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.59"
    },
    {
        "id": "162bfa4b63503b407db0261b0311be588f7549ce4e46813ad3cbc5c5164acb06",
        "db_name": "dorm_1",
        "context_name": "Dorm1Context",
        "question": "Find the name of dorms that do not have amenity TV Lounge.",
        "sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
        "linq": "context.Dorms.Select(row => row.DormName).Except(context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.AmenityName == \"TV Lounge\").Select(row => row.T1.DormName)).ToList();",
        "generated": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AmenityName!= \"TV Lounge\").Select(row => new { row.T1.DormName }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,143): error CS1061: 'HasAmenity' does not contain a definition for 'AmenityName' and no accessible extension method 'AmenityName' accepting a first argument of type 'HasAmenity' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.67"
    },
    {
        "id": "b3ed5cf385007a8c9e0ef0fbafd96ede64f720e19f100d484d57548083d0a98b",
        "db_name": "dorm_1",
        "context_name": "Dorm1Context",
        "question": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge.",
        "sql": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
        "linq": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Dormid.HasValue && context.HasAmenities.Join(context.DormAmenities, T3 => T3.Amenid, T4 => T4.Amenid, (T3, T4) => new { T3, T4 }).Where(row => row.T4.AmenityName == \"TV Lounge\").Select(row => row.T3.Dormid).Contains(row.T2.Dormid.Value)).Select(row => new { row.T1.Fname, row.T1.Lname }).ToList();",
        "generated": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.HasAmenities, joined => joined.T3.Dormid, T4 => T4.Dormid, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.Amenid == 1).Select(row => new { row.T1.Lname, row.T1.Fname }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Linda, 1: Smith}, {0: Dinesh, 1: Kumar}, {0: Paul, 1: Gompers}, {0: Lisa, 1: Apap}, {0: Jandy, 1: Nelson}, {0: Eric, 1: Tai}, {0: Derek, 1: Lee}, {0: David, 1: Adams}, {0: Steven, 1: Davis}, {0: Susan, 1: Lee}, {0: Mark, 1: Schwartz}, {0: Bruce, 1: Wilson}, {0: Michael, 1: Leighton}, {0: Ian, 1: Thornton}, {0: George, 1: Andreou}, {0: David, 1: Shieber}, {0: Mark, 1: Goldman}, {0: Paul, 1: Brody}, {0: Jun, 1: Han}, {0: Lisa, 1: Cheng}, {0: Eric, 1: Brown}, {0: Eric, 1: Epp}]\nLINQ Results: []\n"
    },
    {
        "id": "20eee5456b41e5f1ae18c50388b05a10c25dd833250b569b839d0821b044b2e5",
        "db_name": "dorm_1",
        "context_name": "Dorm1Context",
        "question": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.",
        "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
        "linq": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Dormid.HasValue && !context.HasAmenities.Join(context.DormAmenities, T3 => T3.Amenid, T4 => T4.Amenid, (T3, T4) => new { T3, T4 }).Where(row => row.T4.AmenityName == \"TV Lounge\").Select(row => row.T3.Dormid).Contains(row.T2.Dormid.Value)).Select(row => new { row.T1.Fname, row.T1.Age }).ToList();",
        "generated": "context.Students.Join(context.LivesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).Join(context.Dorms, joined => joined.T2.Dormid, T3 => T3.Dormid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.HasAmenities, joined => joined.T3.Dormid, T4 => T4.Dormid, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row =>!row.T4.Amenid.Equals(2)).Select(row => new { row.T1.Fname, row.T1.Age }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Tracy, 1: 19}, {0: Shiela, 1: 21}, {0: Charles, 1: 18}, {0: Michael, 1: 17}, {0: Stacy, 1: 18}, {0: Eric, 1: 20}, {0: Sarah, 1: 20}, {0: William, 1: 18}, {0: Sarah, 1: 26}]\nLINQ Results: [{0: Linda, 1: 18}, {0: Linda, 1: 18}, {0: Linda, 1: 18}, {0: Linda, 1: 18}, {0: Linda, 1: 18}, {0: Linda, 1: 18}, {0: Linda, 1: 18}, {0: Linda, 1: 18}, {0: Tracy, 1: 19}, {0: Tracy, 1: 19}, {0: Tracy, 1: 19}, {0: Tracy, 1: 19}, {0: Tracy, 1: 19}, {0: Shiela, 1: 21}, {0: Shiela, 1: 21}, {0: Shiela, 1: 21}, {0: Shiela, 1: 21}, {0: Shiela, 1: 21}, {0: Dinesh, 1: 20}, {0: Dinesh, 1: 20}, {0: Dinesh, 1: 20}, {0: Dinesh, 1: 20}, {0: Dinesh, 1: 20}, {0: Dinesh, 1: 20}, {0: Paul, 1: 26}, {0: Paul, 1: 26}, {0: Paul, 1: 26}, {0: Paul, 1: 26}, {0: Paul, 1: 26}, {0: Paul, 1: 26}, {0: Paul, 1: 26}, {0: Paul, 1: 26}, {0: Paul, 1: 26}, {0: Paul, 1: 26}, {0: Paul, 1: 26}, {0: Paul, 1: 26}, {0: Lisa, 1: 18}, {0: Lisa, 1: 18}, {0: Lisa, 1: 18}, {0: Lisa, 1: 18}, {0: Lisa, 1: 18}, {0: Lisa, 1: 18}, {0: Jandy, 1: 20}, {0: Jandy, 1: 20}, {0: Jandy, 1: 20}, {0: Jandy, 1: 20}, {0: Jandy, 1: 20}, {0: Jandy, 1: 20}, {0: Jandy, 1: 20}, {0: Jandy, 1: 20}, {0: Jandy, 1: 20}, {0: Jandy, 1: 20}, {0: Jandy, 1: 20}, {0: Jandy, 1: 20}, {0: Eric, 1: 19}, {0: Eric, 1: 19}, {0: Eric, 1: 19}, {0: Eric, 1: 19}, {0: Eric, 1: 19}, {0: Eric, 1: 19}, {0: Derek, 1: 17}, {0: Derek, 1: 17}, {0: Derek, 1: 17}, {0: Derek, 1: 17}, {0: Derek, 1: 17}, {0: Derek, 1: 17}, {0: Derek, 1: 17}, {0: Derek, 1: 17}, {0: Derek, 1: 17}, {0: Derek, 1: 17}, {0: Derek, 1: 17}, {0: Derek, 1: 17}, {0: David, 1: 22}, {0: David, 1: 22}, {0: David, 1: 22}, {0: David, 1: 22}, {0: David, 1: 22}, {0: David, 1: 22}, {0: Steven, 1: 20}, {0: Steven, 1: 20}, {0: Steven, 1: 20}, {0: Steven, 1: 20}, {0: Steven, 1: 20}, {0: Steven, 1: 20}, {0: Steven, 1: 20}, {0: Steven, 1: 20}, {0: Steven, 1: 20}, {0: Steven, 1: 20}, {0: Steven, 1: 20}, {0: Steven, 1: 20}, {0: Charles, 1: 18}, {0: Charles, 1: 18}, {0: Charles, 1: 18}, {0: Susan, 1: 16}, {0: Susan, 1: 16}, {0: Susan, 1: 16}, {0: Susan, 1: 16}, {0: Susan, 1: 16}, {0: Susan, 1: 16}, {0: Susan, 1: 16}, {0: Susan, 1: 16}, {0: Susan, 1: 16}, {0: Susan, 1: 16}, {0: Susan, 1: 16}, {0: Susan, 1: 16}, {0: Mark, 1: 17}, {0: Mark, 1: 17}, {0: Mark, 1: 17}, {0: Mark, 1: 17}, {0: Mark, 1: 17}, {0: Mark, 1: 17}, {0: Bruce, 1: 27}, {0: Bruce, 1: 27}, {0: Bruce, 1: 27}, {0: Bruce, 1: 27}, {0: Bruce, 1: 27}, {0: Bruce, 1: 27}, {0: Michael, 1: 20}, {0: Michael, 1: 20}, {0: Michael, 1: 20}, {0: Michael, 1: 20}, {0: Michael, 1: 20}, {0: Michael, 1: 20}, {0: Ian, 1: 22}, {0: Ian, 1: 22}, {0: Ian, 1: 22}, {0: Ian, 1: 22}, {0: Ian, 1: 22}, {0: Ian, 1: 22}, {0: Ian, 1: 22}, {0: Ian, 1: 22}, {0: Ian, 1: 22}, {0: Ian, 1: 22}, {0: Ian, 1: 22}, {0: Ian, 1: 22}, {0: George, 1: 19}, {0: George, 1: 19}, {0: George, 1: 19}, {0: George, 1: 19}, {0: George, 1: 19}, {0: George, 1: 19}, {0: George, 1: 19}, {0: George, 1: 19}, {0: George, 1: 19}, {0: George, 1: 19}, {0: George, 1: 19}, {0: George, 1: 19}, {0: Michael, 1: 17}, {0: Michael, 1: 17}, {0: Michael, 1: 17}, {0: Michael, 1: 17}, {0: Michael, 1: 17}, {0: David, 1: 20}, {0: David, 1: 20}, {0: David, 1: 20}, {0: David, 1: 20}, {0: David, 1: 20}, {0: David, 1: 20}, {0: David, 1: 20}, {0: David, 1: 20}, {0: David, 1: 20}, {0: David, 1: 20}, {0: David, 1: 20}, {0: David, 1: 20}, {0: Stacy, 1: 18}, {0: Stacy, 1: 18}, {0: Stacy, 1: 18}, {0: Stacy, 1: 18}, {0: Stacy, 1: 18}, {0: Mark, 1: 18}, {0: Mark, 1: 18}, {0: Mark, 1: 18}, {0: Mark, 1: 18}, {0: Mark, 1: 18}, {0: Mark, 1: 18}, {0: Mark, 1: 18}, {0: Mark, 1: 18}, {0: Mark, 1: 18}, {0: Mark, 1: 18}, {0: Mark, 1: 18}, {0: Mark, 1: 18}, {0: Paul, 1: 18}, {0: Paul, 1: 18}, {0: Paul, 1: 18}, {0: Paul, 1: 18}, {0: Paul, 1: 18}, {0: Paul, 1: 18}, {0: Eric, 1: 20}, {0: Eric, 1: 20}, {0: Eric, 1: 20}, {0: Eric, 1: 20}, {0: Eric, 1: 20}, {0: Jun, 1: 17}, {0: Jun, 1: 17}, {0: Jun, 1: 17}, {0: Jun, 1: 17}, {0: Jun, 1: 17}, {0: Jun, 1: 17}, {0: Lisa, 1: 21}, {0: Lisa, 1: 21}, {0: Lisa, 1: 21}, {0: Lisa, 1: 21}, {0: Lisa, 1: 21}, {0: Lisa, 1: 21}, {0: Lisa, 1: 21}, {0: Lisa, 1: 21}, {0: Sarah, 1: 20}, {0: Sarah, 1: 20}, {0: Sarah, 1: 20}, {0: Sarah, 1: 20}, {0: Sarah, 1: 20}, {0: Eric, 1: 20}, {0: Eric, 1: 20}, {0: Eric, 1: 20}, {0: Eric, 1: 20}, {0: Eric, 1: 20}, {0: Eric, 1: 20}, {0: Eric, 1: 20}, {0: Eric, 1: 20}, {0: William, 1: 18}, {0: Eric, 1: 18}, {0: Eric, 1: 18}, {0: Eric, 1: 18}, {0: Eric, 1: 18}, {0: Eric, 1: 18}, {0: Eric, 1: 18}, {0: Eric, 1: 18}, {0: Eric, 1: 18}, {0: Eric, 1: 18}, {0: Eric, 1: 18}, {0: Eric, 1: 18}, {0: Eric, 1: 18}, {0: Sarah, 1: 26}, {0: Sarah, 1: 26}, {0: Sarah, 1: 26}, {0: Sarah, 1: 26}, {0: Sarah, 1: 26}]\n"
    },
    {
        "id": "9a2ca66cefd94d9639e3e22a7b299a3686d8f3af2ce702491495ab1f21beb648",
        "db_name": "dorm_1",
        "context_name": "Dorm1Context",
        "question": "Find the name of amenities of the dorm where the student with last name Smith is living in.",
        "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'",
        "linq": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.DormAmenities, joined => joined.T2.Amenid, T3 => T3.Amenid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.LivesIns, joined => joined.T1.Dormid, T4 => T4.Dormid, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Join(context.Students, joined => joined.T4.Stuid, T5 => T5.StuId, (joined, T5) => new { joined.T1, joined.T2, joined.T3, joined.T4, T5 }).Where(row => row.T5.Lname == \"Smith\").Select(row => new { row.T3.AmenityName }).ToList();",
        "generated": "context.Dorms.Join(context.HasAmenities, T1 => T1.Dormid, T2 => T2.Dormid, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.Amenid, T3 => T3.Advisor, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.LivesIns, joined => joined.T1.Dormid, T4 => T4.Dormid, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.Stuid == 2014001).Select(row => new { row.T2.AmenityName }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,436): error CS1061: 'HasAmenity' does not contain a definition for 'AmenityName' and no accessible extension method 'AmenityName' accepting a first argument of type 'HasAmenity' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.74"
    },
    {
        "id": "dbf1456d29639b54f1e99361bc276aaa68ad23943c9ca55a8a20e8314696d9d5",
        "db_name": "e_government",
        "context_name": "EGovernmentContext",
        "question": "Which is the email of the party that has used the services the most number of times?",
        "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Parties.Join(context.PartyServices, t1 => t1.PartyId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.PartyEmail }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PartyEmail }).Take(1).ToList();",
        "generated": "context.Services.Join(context.PartyServices, T1 => T1.ServiceId, T2 => T2.ServiceId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.CustomerId, group.First().T1.ServiceName }).Take(1).Select(row => new { row.ServiceName, row.CustomerId }).Join(context.Party, T3 => T3.CustomerId, T4 => T4.PartyId, (T3, T4) => new { T3.ServiceName, T3.CustomerId, T4 }).Select(row => new { row.ServiceName, row.PartyEmail }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,376): error CS1061: 'EGovernmentContext' does not contain a definition for 'Party' and no accessible extension method 'Party' accepting a first argument of type 'EGovernmentContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.97"
    },
    {
        "id": "20ea6adb39c69ddc9f3b420dbdbd424d660d3491c9f623c3191c8d2b338f93d2",
        "db_name": "e_government",
        "context_name": "EGovernmentContext",
        "question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
        "sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "linq": "context.Addresses.Where(row => EF.Functions.Like(row.Line1NumberBuilding, \"%6862 Kaitlyn Knolls%\")).Select(row => new { row.StateProvinceCounty }).ToList();",
        "generated": "context.Addresses.Where(row => row.Line1NumberBuilding == \"6862 Kaitlyn Knolls\").Select(row => new { row.StateProvinceCounty }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Pennsylvania}]\nLINQ Results: []\n"
    },
    {
        "id": "096e901a6522d96d23381e13357fa6d74a70fed609ca87da344a411fb2a35f4e",
        "db_name": "e_government",
        "context_name": "EGovernmentContext",
        "question": "What is the name of organization that has the greatest number of contact individuals?",
        "sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Organizations.Join(context.OrganizationContactIndividuals, t1 => t1.OrganizationId, t2 => t2.OrganizationId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.OrganizationName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.OrganizationName }).Take(1).ToList();",
        "generated": "context.Organizations.Join(context.OrganizationContactIndividuals, T1 => T1.OrganizationId, T2 => T2.OrganizationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.OrganizationId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.OrganizationName }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "7b70ef2b2ff2f0ceff158c43248cf8c5734216928513cf4891d91d6652b04eb7",
        "db_name": "e_government",
        "context_name": "EGovernmentContext",
        "question": "Find the last name of the individuals that have been contact individuals of an organization.",
        "sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "linq": "context.Individuals.Join(context.OrganizationContactIndividuals, t1 => t1.IndividualId, t2 => t2.IndividualId, (t1, t2) => new { t1, t2 }).Select(row => new { row.t1.IndividualLastName }).Distinct().ToList();",
        "generated": "context.Individuals.Join(context.OrganizationContactIndividuals, t1 => t1.IndividualId, t2 => t2.IndividualId, (t1, t2) => new { t1, t2 }).Join(context.Organizations, joined => joined.t2.OrganizationId, t3 => t3.OrganizationId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Select(row => new { row.t1.IndividualLastName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Schuster}, {0: Kertzmann}, {0: Jacobs}, {0: D'Amore}, {0: Rutherford}, {0: Rau}, {0: Rogahn}, {0: Bradtke}, {0: Dooley}]\nLINQ Results: [{0: Schuster}, {0: Kertzmann}, {0: Kertzmann}, {0: Jacobs}, {0: D'Amore}, {0: Rutherford}, {0: Rutherford}, {0: Rau}, {0: Rau}, {0: Rogahn}, {0: Rogahn}, {0: Bradtke}, {0: Bradtke}, {0: Bradtke}, {0: Dooley}]\n"
    },
    {
        "id": "0ff97bf95aa22dc97192236ef06d4c2a790b0036fbd8e3b53e55423f51612f33",
        "db_name": "body_builder",
        "context_name": "BodyBuilderContext",
        "question": "How many distinct birth places are there?",
        "sql": "SELECT count(DISTINCT Birth_Place) FROM people",
        "linq": "context.People.Select(row => row.BirthPlace).Distinct().Count();",
        "generated": "context.People.Select(row => row.BirthPlace).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "8766f3c33dd22827c703a7feccd1aac441068fa28148531aac3609256ee5181f",
        "db_name": "body_builder",
        "context_name": "BodyBuilderContext",
        "question": "How many persons are not body builders?",
        "sql": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)",
        "linq": "context.People.Where(row => !context.BodyBuilders.Select(row => row.PeopleId).Contains(row.PeopleId)).Count();",
        "generated": "context.People.Where(row =>!context.BodyBuilders.Select(row => row.PeopleId).Contains(row.PeopleId)).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "f15d4d21a97ef6dcf6f85445530b21aa5dc0317fbfea7d2205aed1ad54b8a269",
        "db_name": "body_builder",
        "context_name": "BodyBuilderContext",
        "question": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.",
        "sql": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;",
        "linq": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Snatch > 140 || row.T2.Height > 200).Select(row => new { row.T2.Weight }).ToList();",
        "generated": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Snatch > 140 || row.T2.Height > 200).Select(row => new { row.T2.Weight }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "98b3e62dcab3c0f74ef09a3a382c125e1726dead0cc0a33898c233a6458912b1",
        "db_name": "body_builder",
        "context_name": "BodyBuilderContext",
        "question": "What are the total scores of the body builders whose birthday contains the string \"January\" ?",
        "sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";",
        "linq": "context.BodyBuilders.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.BirthDate, \"%January%\")).Select(row => new { row.T1.Total }).ToList();",
        "generated": "context.BodyBuilders.Where(row => row.CleanJerk!= null).Select(row => new { row.Total }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 317.5}]\nLINQ Results: [{0: 317.5}, {0: 315}, {0: 315}, {0: 312.5}, {0: 292.5}]\n"
    },
    {
        "id": "7b37903c5c3d30921e4889acc6dc90909af0060370e7e5dc7fe2d6ce2ebeccb0",
        "db_name": "body_builder",
        "context_name": "BodyBuilderContext",
        "question": "What is the minimum snatch score?",
        "sql": "SELECT min(snatch) FROM body_builder",
        "linq": "context.BodyBuilders.Select(row => row.Snatch).Min();",
        "generated": "context.BodyBuilders.Select(row => row.Snatch).Min();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "7dd453ea1bb3ed01ed21974de39e8770da46b844f49e34a32ec4e50dd314a198",
        "db_name": "dog_kennels",
        "context_name": "DogKennelsContext",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "linq": "context.Dogs.Where(row => row.AbandonedYn == \"1\").Select(row => new { row.Name, row.Age, row.Weight }).ToList();",
        "generated": "context.Dogs.Where(row => row.AbandonedYn == \"1\").Select(row => new { row.Name, row.Age, row.Weight }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "e701983b6b34e4c59280ea3ab578125aa4246bd635ec6ea476e9e052217b607c",
        "db_name": "dog_kennels",
        "context_name": "DogKennelsContext",
        "question": "What is the average age of all the dogs?",
        "sql": "SELECT avg(age) FROM Dogs",
        "linq": "context.Dogs.Select(row => row.Age).ToList().Select(value => double.Parse(value)).Average();",
        "generated": "context.Dogs.Select(row => row.Age).Average();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,20): error CS1929: 'IQueryable<string>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.84"
    },
    {
        "id": "b3d32670e7a0e177d1b671216fa8d2b7b63534e3c7bc6b8a3f174c4040f885a5",
        "db_name": "dog_kennels",
        "context_name": "DogKennelsContext",
        "question": "What is the age of the oldest dog?",
        "sql": "SELECT max(age) FROM Dogs",
        "linq": "context.Dogs.Select(row => row.Age).Max();",
        "generated": "context.Dogs.OrderByDescending(row => row.Age).Select(row => new { row.Age }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "0884291167c62fee4fd07259637a68f12f0690d6519132fcf02f4f396be96275",
        "db_name": "dog_kennels",
        "context_name": "DogKennelsContext",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "sql": "SELECT charge_type ,  charge_amount FROM Charges",
        "linq": "context.Charges.Select(row => new { row.ChargeType, row.ChargeAmount }).ToList();",
        "generated": "context.Charges.Select(row => new { row.ChargeType, row.ChargeAmount }).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "e1630ece081b0402dd20ed959270a3aa3348215619706608f8a9890e4253cc7e",
        "db_name": "dog_kennels",
        "context_name": "DogKennelsContext",
        "question": "How much does the most expensive charge type costs?",
        "sql": "SELECT max(charge_amount) FROM Charges",
        "linq": "context.Charges.Select(row => row.ChargeAmount).Max();",
        "generated": "context.Charges.OrderByDescending(row => row.ChargeAmount).Select(row => new { row.ChargeAmount }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "dfd3ca8de324e96a81402c62ed1908c5cccc34d9ff9c981df076e498931de591",
        "db_name": "dog_kennels",
        "context_name": "DogKennelsContext",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "linq": "context.Professionals.Select(row => new { row.EmailAddress, row.CellNumber, row.HomePhone }).ToList();",
        "generated": "context.Professionals.Select(row => new { row.EmailAddress, row.CellNumber, row.HomePhone }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "5fc936ebae2bcbdfcc2fdcbf9c80faaace0495fd700dd5d4b80dadd7b332d546",
        "db_name": "course_teach",
        "context_name": "CourseTeachContext",
        "question": "Show names of teachers and the number of courses they teach.",
        "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "linq": "context.CourseArranges.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { group.Key.Name, Count = group.Count() }).ToList();",
        "generated": "context.Teachers.Join(context.CourseArranges, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TeacherId }).Select(group => new { group.Key.T1.Name, Count = group.Count() }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,207): error CS1061: '<anonymous type: int TeacherId>' does not contain a definition for 'T1' and no accessible extension method 'T1' accepting a first argument of type '<anonymous type: int TeacherId>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.69"
    },
    {
        "id": "0aba61bce69b4a847d38c4d0b481e9ffbe94f0e42ebb9faeb006cda828470899",
        "db_name": "course_teach",
        "context_name": "CourseTeachContext",
        "question": "Show names of teachers that teach at least two courses.",
        "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "linq": "context.CourseArranges.Join(context.Teachers, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Name }).ToList();",
        "generated": "context.Teachers.Join(context.CourseArranges, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TeacherId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "a0263e6dcfb4e580d6c473bfbdbec9d0a1c8f42d83f9d3b71523093fce461177",
        "db_name": "course_teach",
        "context_name": "CourseTeachContext",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "linq": "context.Teachers.Where(row => !context.CourseArranges.Select(row => row.TeacherId).Contains(row.TeacherId)).Select(row => new { row.Name }).ToList();",
        "generated": "context.Teachers.Where(row =>!context.CourseArranges.Select(row => row.TeacherId).Contains(row.TeacherId)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "eaf53c546f4d1b2193b49cf0b1c3cdc0be9de8a8f2f5972c8561439ee1a01472",
        "db_name": "poker_player",
        "context_name": "PokerPlayerContext",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "linq": "context.People.OrderBy(row => row.Name).Select(row => new { row.Name, row.BirthDate }).ToList();",
        "generated": "context.People.OrderBy(row => row.Name).Select(row => new { row.Name, row.BirthDate }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "546c836f7845367b102578c6935dbfbe1bca80115ef6dc0fdcf37348123a02cb",
        "db_name": "poker_player",
        "context_name": "PokerPlayerContext",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "linq": "context.People.Where(row => row.Nationality != \"Russia\").Select(row => new { row.Name }).ToList();",
        "generated": "context.People.Where(row => row.Nationality!= \"Russia\").Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "c3c11352d79b6db812bd1817eed6828dbb38791d3a05783b921689ad7a7e118a",
        "db_name": "poker_player",
        "context_name": "PokerPlayerContext",
        "question": "List the names of people that are not poker players.",
        "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "linq": "context.People.Where(row => !context.PokerPlayers.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();",
        "generated": "context.People.Where(row =>!context.PokerPlayers.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "71915bbe5656c6ef1594ddfccbf0f5f34b9860f94e4b1ce29356bbf59b29c1d2",
        "db_name": "poker_player",
        "context_name": "PokerPlayerContext",
        "question": "How many distinct nationalities are there?",
        "sql": "SELECT count(DISTINCT Nationality) FROM people",
        "linq": "context.People.Select(row => row.Nationality).Distinct().Count();",
        "generated": "context.People.Select(row => row.Nationality).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "62cba5159ac2411fdbdb4325fc9a2b4af9213ea879a7766eb1af60da2a4e28d9",
        "db_name": "imdb",
        "context_name": "ImdbContext",
        "question": "How many movies did \" Quentin Tarantino \" direct before 2002 and after 2010 ?",
        "sql": "SELECT COUNT ( DISTINCT t4.title  ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid WHERE t3.name  =  \"Quentin Tarantino\" AND t4.release_year  <  2010 AND t4.release_year  >  2002;",
        "linq": "context.Directors.Join(context.DirectedBies, t3 => t3.Did, t2 => t2.Did, (t3, t2) => new { t3, t2 }).Join(context.Movies, joined => joined.t2.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t3, joined.t2, t4 }).Join(context.MadeBies, joined => joined.t4.Mid, t5 => t5.Msid, (joined, t5) => new { joined.t3, joined.t2, joined.t4, t5 }).Join(context.Producers, joined => joined.t5.Pid, t1 => t1.Pid, (joined, t1) => new { joined.t3, joined.t2, joined.t4, joined.t5, t1 }).Where(row => row.t3.Name == \"Quentin Tarantino\" && row.t4.ReleaseYear < 2010 && row.t4.ReleaseYear > 2002).Select(row => row.t4.Title).Distinct().Count();",
        "generated": "context.Directors.Join(context.DirectedBies, T1 => T1.Did, T2 => T2.Did, (T1, T2) => new { T1, T2 }).Join(context.Movies, joined => joined.T2.Msid, T3 => T3.Mid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Quentin Tarantino\" && row.T3.ReleaseYear < 2002 && row.T3.ReleaseYear > 2010).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "df2f59d02d5b9e82512bf5461555701f0c3e0e5d5f2f29e40173edb5d742a9b9",
        "db_name": "imdb",
        "context_name": "ImdbContext",
        "question": "How many female actors were born in \" New York City \" after 1980 ?",
        "sql": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";",
        "linq": "context.Actors.Where(row => row.BirthCity == \"New York City\" && row.BirthYear > 1980 && row.Gender == \"female\").Select(row => row.Name).Distinct().Count();",
        "generated": "context.Actors.Where(row => row.Gender == \"Female\" && row.BirthCity == \"New York City\" && row.BirthYear >= 1980).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "290cfbb42f1ba89b70b2019d663688e099f95c47867cac7b23eafa301e99ee7c",
        "db_name": "imdb",
        "context_name": "ImdbContext",
        "question": "find the number of actors from Iran who played in \" Jim Jarmusch \" movies",
        "sql": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.nationality  =  \"Iran\" AND t3.name  =  \"Jim Jarmusch\";",
        "linq": "context.Casts.Join(context.Actors, t4 => t4.Aid, t1 => t1.Aid, (t4, t1) => new { t4, t1 }).Join(context.Movies, joined => joined.t4.Msid, t5 => t5.Mid, (joined, t5) => new { joined.t4, joined.t1, t5 }).Join(context.DirectedBies, joined => joined.t5.Mid, t2 => t2.Msid, (joined, t2) => new { joined.t4, joined.t1, joined.t5, t2 }).Join(context.Directors, joined => joined.t2.Did, t3 => t3.Did, (joined, t3) => new { joined.t4, joined.t1, joined.t5, joined.t2, t3 }).Where(row => row.t1.Nationality == \"Iran\" && row.t3.Name == \"Jim Jarmusch\").Select(row => row.t1.Name).Distinct().Count();",
        "generated": "context.Actors.Where(row => row.Nationality == \"Iran\" && context.Casts.Select(row => row.Msid).Contains(context.Movies.Where(row => row.Title == \"Jim Jarmusch\").Select(row => row.Mid))).Select(row => row.Name).Count();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,77): error CS1929: 'IQueryable<int?>' does not contain a definition for 'Contains' and the best extension method overload 'MemoryExtensions.Contains<IQueryable<int>>(ReadOnlySpan<IQueryable<int>>, IQueryable<int>)' requires a receiver of type 'System.ReadOnlySpan<System.Linq.IQueryable<int>>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.79"
    },
    {
        "id": "c1c55605e7e524a0216c2eb67a9ebe6811f97c55961d03048ab27bc0698e3587",
        "db_name": "imdb",
        "context_name": "ImdbContext",
        "question": "How many actors from China have acted in \" Rush Hour 3 \"",
        "sql": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"China\" AND t3.title  =  \"Rush Hour 3\";",
        "linq": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Nationality == \"China\" && row.t3.Title == \"Rush Hour 3\").Select(row => row.t1.Name).Distinct().Count();",
        "generated": "context.Actors.Where(row => row.Nationality == \"China\" && context.Casts.Where(row => row.Role == 1).Select(row => row.Msid).Contains(context.Movies.Find(93).Mid)).Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.InvalidOperationException: An exception was thrown while attempting to evaluate a LINQ query parameter expression. See the inner exception for more information. To show additional information call 'DbContextOptionsBuilder.EnableSensitiveDataLogging'.\n ---> System.NullReferenceException: Object reference not set to an instance of an object.\n   at System.Linq.Expressions.Interpreter.Instruction.NullCheck(Object o)\n   at System.Linq.Expressions.Interpreter.FuncCallInstruction`2.Run(InterpretedFrame frame)\n   at System.Linq.Expressions.Interpreter.Interpreter.Run(InterpretedFrame frame)\n   at System.Linq.Expressions.Interpreter.LightLambda.Run(Object[] arguments)\n   at System.Dynamic.Utils.DelegateHelpers.FuncThunk[TReturn](Func`2 handler)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.GetValue(Expression expression, String& parameterName)\n   --- End of inner exception stack trace ---\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.GetValue(Expression expression, String& parameterName)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.GetValue(Expression expression, String& parameterName)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Evaluate(Expression expression, Boolean generateParameter)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Visit(Expression expression)\n   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\n   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Visit(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.VisitBinary(BinaryExpression binaryExpression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Visit(Expression expression)\n   at System.Linq.Expressions.ExpressionVisitor.VisitLambda[T](Expression`1 node)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Visit(Expression expression)\n   at System.Linq.Expressions.ExpressionVisitor.VisitUnary(UnaryExpression node)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Visit(Expression expression)\n   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\n   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Visit(Expression expression)\n   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\n   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Visit(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.ExtractParameters(Expression expression, Boolean clearEvaluatedValues)\n   at Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.ExtractParameters(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExtractParameters(Expression query, IParameterValues parameterValues, IDiagnosticsLogger`1 logger, Boolean parameterize, Boolean generateContextAccessors)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "c2621528f09a01a8b6b22f7d735fa05ca074f4db8a9c3b5dd5e956cae4b9f8ae",
        "db_name": "imdb",
        "context_name": "ImdbContext",
        "question": "Find all movies that star both \" Woody Strode \" and \" Jason Robards \"",
        "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
        "linq": "context.Casts.Join(context.Actors, t5 => t5.Aid, t1 => t1.Aid, (t5, t1) => new { t5, t1 }).Join(context.Movies, joined => joined.t5.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t5, joined.t1, t4 }).Join(context.Casts, joined => joined.t4.Mid, t3 => t3.Msid, (joined, t3) => new { joined.t5, joined.t1, joined.t4, t3 }).Join(context.Actors, joined => joined.t3.Aid, t2 => t2.Aid, (joined, t2) => new { joined.t5, joined.t1, joined.t4, joined.t3, t2 }).Where(row => row.t1.Name == \"Woody Strode\" && row.t2.Name == \"Jason Robards\").Select(row => new { row.t4.Title }).ToList();",
        "generated": "context.Movies.Join(context.Casts, T1 => T1.Mid, T2 => T2.Msid, (T1, T2) => new { T1, T2 }).Join(context.Casts, T1 => T1.T1.Mid, T2 => T2.Msid, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Title == \" The Professionals \" && row.T2.Role == \" Woody Strode \").Join(context.Casts, T1 => T1.T1.Mid, T2 => T2.Msid, (T1, T2) => new { T1, T2 }).Join(context.Casts, T1 => T1.T1.Mid, T2 => T2.Msid, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Title == \" The Godfather \" && row.T2.Role == \" Jason Robards \").Select(row => new { row.T1.Title }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,246): error CS0019: Operator '==' cannot be applied to operands of type 'int?' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.80"
    },
    {
        "id": "ef020caef57f9d76432c2b4b13733220b8792f90b11fe98acff14b0890efa249",
        "db_name": "imdb",
        "context_name": "ImdbContext",
        "question": "Find all actors who acted in the same movie as \" Tom Hanks \"",
        "sql": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN CAST AS t3 ON t5.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"Tom Hanks\";",
        "linq": "context.Casts.Join(context.Actors, t4 => t4.Aid, t1 => t1.Aid, (t4, t1) => new { t4, t1 }).Join(context.Movies, joined => joined.t4.Msid, t5 => t5.Mid, (joined, t5) => new { joined.t4, joined.t1, t5 }).Join(context.Casts, joined => joined.t5.Mid, t3 => t3.Msid, (joined, t3) => new { joined.t4, joined.t1, joined.t5, t3 }).Join(context.Actors, joined => joined.t3.Aid, t2 => t2.Aid, (joined, t2) => new { joined.t4, joined.t1, joined.t5, joined.t3, t2 }).Where(row => row.t2.Name == \"Tom Hanks\").Select(row => new { row.t1.Name }).ToList();",
        "generated": "context.Actors.Join(context.Casts, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).Join(context.Movies, joined => joined.T2.Msid, T3 => T3.Mid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Casts, joined => joined.T3.Msid, T4 => T4.Msid, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Join(context.Actors, joined => joined.T4.Aid, T5 => T5.Aid, (joined, T5) => new { joined.T1, joined.T2, joined.T3, joined.T4, T5 }).Where(row => row.T1.Name == \"Tom Hanks\").Select(row => new { row.T5.Name }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,262): error CS1061: 'Movie' does not contain a definition for 'Msid' and no accessible extension method 'Msid' accepting a first argument of type 'Movie' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.93"
    },
    {
        "id": "75492a8ca9e1a4b6f9d8a8dc170578c85668137b28a402222b79f932cfede6c0",
        "db_name": "imdb",
        "context_name": "ImdbContext",
        "question": "What movies have the same director as the movie \" Revolutionary Road \" ?",
        "sql": "SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN directed_by AS t1 ON t5.did  =  t1.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t4.title  =  \"Revolutionary Road\";",
        "linq": "context.Directors.Join(context.DirectedBies, t5 => t5.Did, t2 => t2.Did, (t5, t2) => new { t5, t2 }).Join(context.DirectedBies, joined => joined.t5.Did, t1 => t1.Did, (joined, t1) => new { joined.t5, joined.t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t5, joined.t2, joined.t1, t4 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t5, joined.t2, joined.t1, joined.t4, t3 }).Where(row => row.t4.Title == \"Revolutionary Road\").Select(row => new { row.t3.Title }).ToList();",
        "generated": "context.DirectedBies.Join(context.Movies, T1 => T1.Did, T2 => T2.Did, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Title == \"Revolutionary Road\").Select(row => row.T1.Msid).Distinct().ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,85): error CS1061: 'Movie' does not contain a definition for 'Did' and no accessible extension method 'Did' accepting a first argument of type 'Movie' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.85"
    },
    {
        "id": "5cf1af16a45038a68c65fdc505e3e8e855572afed809d1d62e4724f0a3c8ba62",
        "db_name": "imdb",
        "context_name": "ImdbContext",
        "question": "Find the movie which is classified in the most number of genres",
        "sql": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid GROUP BY t3.title ORDER BY COUNT ( DISTINCT t2.genre  ) DESC LIMIT 1;",
        "linq": "context.Genres.Join(context.Classifications, t2 => t2.Gid, t1 => t1.Gid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).GroupBy(row => new { row.t3.Title }).OrderByDescending(group => group.Count(row => row.t2.Genre1 != null)).Select(group => new { group.Key.Title }).Take(1).ToList();",
        "generated": "context.Classifications.Join(context.Movies, T1 => T1.Msid, T2 => T2.Mid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Gid }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Gid }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "2fe9ec39280337c1d4a8efaef2a57c5f808e02175310fa2588d133293a88fba7",
        "db_name": "imdb",
        "context_name": "ImdbContext",
        "question": "which movie has the most number of actors from China ?",
        "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.nationality  =  \"China\" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name  ) DESC LIMIT 1;",
        "linq": "context.Casts.Join(context.Actors, t3 => t3.Aid, t1 => t1.Aid, (t3, t1) => new { t3, t1 }).Join(context.Movies, joined => joined.t3.Msid, t2 => t2.Mid, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t1.Nationality == \"China\").GroupBy(row => new { row.t2.Title }).OrderByDescending(group => group.Count(row => row.t1.Name != null)).Select(group => new { group.Key.Title }).Take(1).ToList();",
        "generated": "context.Actors.Join(context.Casts, T1 => T1.Aid, T2 => T2.Aid, (T1, T2) => new { T1, T2 }).Join(context.Movies, joined => joined.T2.Msid, T3 => T3.Mid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.TitleAka == null).GroupBy(row => row.T1.Nationality).OrderByDescending(group => group.Count()).Select(group => new { group.Key }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "00c1ba7d87ae3d2a06186e538af8aae4df0a1742a147e7548069f98f545ea40e",
        "db_name": "imdb",
        "context_name": "ImdbContext",
        "question": "Find the actors who played in the latest movie by \" Quentin Tarantino \"",
        "sql": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t3.name  =  \"Quentin Tarantino\" ORDER BY t5.release_year DESC LIMIT 1;",
        "linq": "context.Casts.Join(context.Actors, t4 => t4.Aid, t1 => t1.Aid, (t4, t1) => new { t4, t1 }).Join(context.Movies, joined => joined.t4.Msid, t5 => t5.Mid, (joined, t5) => new { joined.t4, joined.t1, t5 }).Join(context.DirectedBies, joined => joined.t5.Mid, t2 => t2.Msid, (joined, t2) => new { joined.t4, joined.t1, joined.t5, t2 }).Join(context.Directors, joined => joined.t2.Did, t3 => t3.Did, (joined, t3) => new { joined.t4, joined.t1, joined.t5, joined.t2, t3 }).Where(row => row.t3.Name == \"Quentin Tarantino\").OrderByDescending(row => row.t5.ReleaseYear).Select(row => new { row.t1.Name }).Take(1).ToList();",
        "generated": "context.Actors.Join(context.Casts, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.DirectedBies, joined => joined.t1.Msid, t3 => t3.Msid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.DirectedBy, t4 => t4.Did, t5 => t5.Did, (t4, t5) => new { t4.t2, t4.t1, t4.t3, t5 }).Join(context.Movies, t6 => t6.Msid, t7 => t7.Msid, (t6, t7) => new { t6.t2, t6.t1, t6.t3, t6.t5, t7 }).OrderByDescending(row => row.t7.ReleaseYear).Where(row => row.t7.ReleaseYear == context.Movies.Max(row => row.ReleaseYear) && row.t5.Did == context.DirectedBy.Where(row => row.Msid == context.Casts.Where(row => row.Aid == context.Actors.Where(row => row.Name == \"Quentin",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(12,40): error CS1026: ) expected [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    3 Error(s)\n\nTime Elapsed 00:00:00.62"
    },
    {
        "id": "6190f0fdda947a7559cd28f94e7531d440a5de00b7d8560967d0c7f5298b8bb7",
        "db_name": "imdb",
        "context_name": "ImdbContext",
        "question": "Find the name and budget of the latest movie by \" Quentin Tarantino \"",
        "sql": "SELECT t3.budget  ,  t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" ORDER BY t3.release_year DESC LIMIT 1;",
        "linq": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Quentin Tarantino\").OrderByDescending(row => row.t3.ReleaseYear).Select(row => new { row.t3.Budget, row.t3.Title }).Take(1).ToList();",
        "generated": "context.Movies.Join(context.DirectedBy, t1 => t1.Mid, t2 => t2.Msid, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Did == 9).Select(row => new { row.t1.Title, row.t1.Budget }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,48): error CS1061: 'ImdbContext' does not contain a definition for 'DirectedBy' and no accessible extension method 'DirectedBy' accepting a first argument of type 'ImdbContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.51"
    },
    {
        "id": "46ba13ca1036a73e3c8bd30ff2aa020b313305c0a2dd21ab782786efd84e38ce",
        "db_name": "imdb",
        "context_name": "ImdbContext",
        "question": "What is the latest movie by \" Jim Jarmusch \"",
        "sql": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1;",
        "linq": "context.Directors.Join(context.DirectedBies, t2 => t2.Did, t1 => t1.Did, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t1.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t2.Name == \"Jim Jarmusch\").OrderByDescending(row => row.t3.ReleaseYear).Select(row => new { row.t3.Title }).Take(1).ToList();",
        "generated": "context.Movies.Where(row => row.TitleAka == \"Jim Jarmusch\").OrderByDescending(row => row.ReleaseYear).Select(row => new { row.TitleAka }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "29e39eaae5527f492916b9508aa2ab12093044f0bcc32dd42a96fd5a7dd2925c",
        "db_name": "imdb",
        "context_name": "ImdbContext",
        "question": "Which producer has worked with the most number of directors ?",
        "sql": "SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name  ) DESC LIMIT 1;",
        "linq": "context.Directors.Join(context.DirectedBies, t3 => t3.Did, t2 => t2.Did, (t3, t2) => new { t3, t2 }).Join(context.Movies, joined => joined.t2.Msid, t4 => t4.Mid, (joined, t4) => new { joined.t3, joined.t2, t4 }).Join(context.MadeBies, joined => joined.t4.Mid, t5 => t5.Msid, (joined, t5) => new { joined.t3, joined.t2, joined.t4, t5 }).Join(context.Producers, joined => joined.t5.Pid, t1 => t1.Pid, (joined, t1) => new { joined.t3, joined.t2, joined.t4, joined.t5, t1 }).GroupBy(row => new { row.t1.Name }).OrderByDescending(group => group.Count(row => row.t3.Name != null)).Select(group => new { group.Key.Name }).Take(1).ToList();",
        "generated": "context.Producers.Join(context.MadeBies, T1 => T1.Pid, T2 => T2.Pid, (T1, T2) => new { T1, T2 }).Join(context.DirectedBies, joined => joined.T2.Did, T3 => T3.Did, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.Pid }).Select(group => new { group.Key.Pid, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).Select(group => new { group.Pid }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,164): error CS1061: 'MadeBy' does not contain a definition for 'Did' and no accessible extension method 'Did' accepting a first argument of type 'MadeBy' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.86"
    },
    {
        "id": "201a73c1281de11505340ab2d7365819025dc7cd2309c93a85f8f10a96a78086",
        "db_name": "imdb",
        "context_name": "ImdbContext",
        "question": "Find the latest movie which \" Gabriele Ferzetti \" acted in",
        "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;",
        "linq": "context.Casts.Join(context.Actors, t2 => t2.Aid, t1 => t1.Aid, (t2, t1) => new { t2, t1 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.Name == \"Gabriele Ferzetti\").OrderByDescending(row => row.t3.ReleaseYear).Select(row => new { row.t1.Name }).Take(1).ToList();",
        "generated": "context.Actors.Join(context.Casts, t1 => t1.Aid, t2 => t2.Aid, (t1, t2) => new { t1, t2 }).Join(context.Movies, joined => joined.t2.Msid, t3 => t3.Mid, (joined, t3) => new { joined.t1, joined.t2, t3 }).OrderByDescending(row => row.t3.ReleaseYear).Where(row => row.t1.Name == \"Gabriele Ferzetti\").Select(row => new { row.t3.Title }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "a8d894df2cb7084229768a8773306a2284498c670ecc1b23b276a3c23c27839f",
        "db_name": "battle_death",
        "context_name": "BattleDeathContext",
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "linq": "context.Battles.Where(row => !context.Ships.Where(row => row.Tonnage == \"225\").Select(row => row.LostInBattle).Contains(row.Id)).Count();",
        "generated": "context.Ships.Join(context.Battles, T1 => T1.LostInBattle, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Tonnage == \"225\" && row.T2.Result!= \"Lose\").Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 7}]\nLINQ Results: [{0: 1}]\n"
    },
    {
        "id": "fa15e3e0a95c46805268bb707bf427af92104a32b70151e44c5fce8d5abfd08c",
        "db_name": "battle_death",
        "context_name": "BattleDeathContext",
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "linq": "context.Battles.Join(context.Ships, T1 => T1.Id, T2 => T2.LostInBattle, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Lettice\").Select(row => new { row.T1.Name, row.T1.Date }).Intersect(context.Battles.Join(context.Ships, T1 => T1.Id, T2 => T2.LostInBattle, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"HMS Atalanta\").Select(row => new { row.T1.Name, row.T1.Date })).ToList();",
        "generated": "context.Battles.Join(context.Ships, T1 => T1.Id, T2 => T2.LostInBattle, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Lettice\" || row.T2.Name == \"HMS Atalanta\").Select(row => new { row.T1.Name, row.T1.Date }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Siege of Constantinople, 1: 1235}]\nLINQ Results: [{0: Siege of Constantinople, 1: 1235}, {0: Siege of Constantinople, 1: 1235}]\n"
    },
    {
        "id": "1ad26a04d435ca7bb24b273e51e1bc19fb56a13f282da8756f62113ecff6062c",
        "db_name": "battle_death",
        "context_name": "BattleDeathContext",
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "linq": "context.Battles.Select(row => new { row.Name, row.Result, row.BulgarianCommander }).Except(context.Battles.Join(context.Ships, T1 => T1.Id, T2 => T2.LostInBattle, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Location == \"English Channel\").Select(row => new { row.T1.Name, row.T1.Result, row.T1.BulgarianCommander })).ToList();",
        "generated": "context.Battles.Join(context.Ships, T1 => T1.Id, T2 => T2.LostInBattle, (T1, T2) => new { T1, T2 }).Where(row => row.T2.LostInBattle == null).Select(row => new { row.T1.Name, row.T1.Result, row.T1.BulgarianCommander }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Battle of Adrianople, 1: Bulgarian victory, 2: Kaloyan}, {0: Battle of Rusion, 1: Bulgarian victory, 2: Kaloyan}, {0: Battle of Serres, 1: Bulgarian victory, 2: Kaloyan}]\nLINQ Results: []\n"
    },
    {
        "id": "fffc395f37d019b149b5e4f41b8cecf4d59b0f5810e6c0ed0d3b01b348d10cfe",
        "db_name": "battle_death",
        "context_name": "BattleDeathContext",
        "question": "What are the notes of the death events which has substring 'East'?",
        "sql": "SELECT note FROM death WHERE note LIKE '%East%'",
        "linq": "context.Deaths.Where(row => EF.Functions.Like(row.Note, \"%East%\")).Select(row => new { row.Note }).ToList();",
        "generated": "context.Deaths.Where(row => EF.Functions.Like(row.Note, \"%East%\")).Select(row => new { row.Note }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b63f2adbdd14196f6801412d86ac4f1862d6a0c541a972e2fec00a9bf40bf846",
        "db_name": "pilot_record",
        "context_name": "PilotRecordContext",
        "question": "Show the names of pilots and the number of records they have.",
        "sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name",
        "linq": "context.PilotRecords.Join(context.Pilots, T1 => T1.PilotId, T2 => T2.PilotId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.PilotName }).Select(group => new { group.Key.PilotName, Count = group.Count() }).ToList();",
        "generated": "context.PilotRecords.Join(context.Pilots, T1 => T1.PilotId, T2 => T2.PilotId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.PilotName }).Select(group => new { group.Key.PilotName, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "9e924fe562c7f48274b40c76388f11f20c543bb1fb3619f39608e06fee2cfb40",
        "db_name": "pilot_record",
        "context_name": "PilotRecordContext",
        "question": "Show names of pilots that have more than one record.",
        "sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1",
        "linq": "context.PilotRecords.Join(context.Pilots, T1 => T1.PilotId, T2 => T2.PilotId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.PilotName }).Where(group => group.Count() > 1).Select(group => new { group.Key.PilotName, Count = group.Count() }).ToList();",
        "generated": "context.Pilots.Join(context.PilotRecords, T1 => T1.PilotId, T2 => T2.PilotId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PilotName }).Where(group => group.Count() > 1).Select(group => new { group.Key.PilotName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Parameter 'index')\n   at System.Linq.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument)\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 239\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\n"
    },
    {
        "id": "97ab4eed0a5ce7465b38cc00622cdcf1ebf476923ed9122e129fd62e78f96cfc",
        "db_name": "pilot_record",
        "context_name": "PilotRecordContext",
        "question": "List the names of pilots that do not have any record.",
        "sql": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)",
        "linq": "context.Pilots.Where(row => !context.PilotRecords.Select(row => row.PilotId).Contains(row.PilotId)).Select(row => new { row.PilotName }).ToList();",
        "generated": "context.Pilots.Where(row =>!context.PilotRecords.Select(row => row.PilotId).Contains(row.PilotId)).Select(row => new { row.PilotName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "8552230939096be2a8a14ecc3b9681a94c6c32b3feb41c908963d92f7a068326",
        "db_name": "products_gen_characteristics",
        "context_name": "ProductsGenCharacteristicsContext",
        "question": "Find the unit of measurement and product category code of product named \"chervil\".",
        "sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\"",
        "linq": "context.Products.Join(context.RefProductCategories, t1 => t1.ProductCategoryCode, t2 => t2.ProductCategoryCode, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ProductName == \"chervil\").Select(row => new { row.t2.UnitOfMeasure, row.t2.ProductCategoryCode }).ToList();",
        "generated": "context.Products.Where(row => row.ProductName == \"chervil\").Select(row => new { row.UnitOfMeasure, row.ProductCategoryCode }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,104): error CS1061: 'Product' does not contain a definition for 'UnitOfMeasure' and no accessible extension method 'UnitOfMeasure' accepting a first argument of type 'Product' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.34"
    },
    {
        "id": "ec91a9de8431365633dc288a54623ef130fdf170f09fe0bf5add92df14b96116",
        "db_name": "products_gen_characteristics",
        "context_name": "ProductsGenCharacteristicsContext",
        "question": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".",
        "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
        "linq": "context.Products.Join(context.RefProductCategories, t1 => t1.ProductCategoryCode, t2 => t2.ProductCategoryCode, (t1, t2) => new { t1, t2 }).Join(context.RefColors, joined => joined.t1.ColorCode, t3 => t3.ColorCode, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.ColorDescription == \"white\" && row.t2.UnitOfMeasure != \"Handful\").Select(row => new { row.t1.ProductName }).ToList();",
        "generated": "context.Products.Join(context.RefColors, T1 => T1.ColorCode, T2 => T2.ColorCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ColorDescription == \"white\" && row.T1.ProductsCategoryCode!= \"Handful\").Select(row => new { row.T1.ProductName }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,187): error CS1061: 'Product' does not contain a definition for 'ProductsCategoryCode' and no accessible extension method 'ProductsCategoryCode' accepting a first argument of type 'Product' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49"
    },
    {
        "id": "94847b517d873af5b9cd101e6db01a0c0744bc131adaf4b68e6c01404b4549f6",
        "db_name": "products_gen_characteristics",
        "context_name": "ProductsGenCharacteristicsContext",
        "question": "What is the description of the color for most products?",
        "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ColorDescription }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ColorDescription }).Take(1).ToList();",
        "generated": "context.Products.GroupBy(row => new { row.ColorCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ColorCode, group.First().ColorDescription }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,174): error CS1061: 'Product' does not contain a definition for 'ColorDescription' and no accessible extension method 'ColorDescription' accepting a first argument of type 'Product' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.36"
    },
    {
        "id": "9d0a2e6b45bbb208a0a5f16a857a1d8909107e21d7ce20557b5ed5cedc121a02",
        "db_name": "products_gen_characteristics",
        "context_name": "ProductsGenCharacteristicsContext",
        "question": "What is the description of the color used by least products?",
        "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1",
        "linq": "context.Products.Join(context.RefColors, t1 => t1.ColorCode, t2 => t2.ColorCode, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ColorDescription }).OrderBy(group => group.Count()).Select(group => new { group.Key.ColorDescription }).Take(1).ToList();",
        "generated": "context.Products.Join(context.Characteristics, T1 => T1.ColorCode, T2 => T2.CharacteristicId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CharacteristicDataType }).OrderBy(group => group.Key.CharacteristicDataType).Select(group => new { group.First().T1.ColorDescription }).Distinct().ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,37): error CS0411: The type arguments for method 'Enumerable.Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)' cannot be inferred from the usage. Try specifying the type arguments explicitly. [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.29"
    },
    {
        "id": "40ec0c8b1616799503149e7b97928aaa3a0b9ab750a408c2008b7a2879b9574f",
        "db_name": "products_gen_characteristics",
        "context_name": "ProductsGenCharacteristicsContext",
        "question": "What is the characteristic name used by most number of the products?",
        "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.CharacteristicName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CharacteristicName }).Take(1).ToList();",
        "generated": "context.Products.GroupBy(row => new { row.Characteristics.Select(row => row.CharacteristicName).ToList() }).OrderByDescending(group => group.Count()).Select(group => new { group.Key }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,62): error CS1061: 'Product' does not contain a definition for 'Characteristics' and no accessible extension method 'Characteristics' accepting a first argument of type 'Product' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.23"
    },
    {
        "id": "f36fcdc6003889fee0afb369879ca385579236f4b576d56184f750247f7e80f9",
        "db_name": "products_gen_characteristics",
        "context_name": "ProductsGenCharacteristicsContext",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "sql": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "linq": "context.Characteristics.Select(row => new { row.CharacteristicName, row.OtherCharacteristicDetails, row.CharacteristicDataType }).Except(context.Characteristics.Join(context.ProductCharacteristics, t1 => t1.CharacteristicId, t2 => t2.CharacteristicId, (t1, t2) => new { t1, t2 }).Select(row => new { row.t1.CharacteristicName, row.t1.OtherCharacteristicDetails, row.t1.CharacteristicDataType })).ToList();",
        "generated": "context.Characteristics.Where(row =>!context.ProductCharacteristics.Select(row => row.CharacteristicId).Contains(row.CharacteristicId)).Select(row => new { row.CharacteristicName, row.CharacteristicDataType, row.OtherCharacteristicDetails }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: cool, 2: dolores}, {0: cool, 2: et}, {0: cool, 2: quam}, {0: hot, 2: impedit}, {0: slow, 2: numquam}, {0: slow, 2: placeat}]\nLINQ Results: [{0: slow, 1: numquam}, {0: hot, 1: impedit}, {0: cool, 1: et}, {0: cool, 1: dolores}, {0: cool, 1: quam}, {0: slow, 1: placeat}]\n"
    },
    {
        "id": "90c5acc08e1a9e0dd769b93836422279ba63cd2c055c86f6d3828f5f7e2f86c7",
        "db_name": "products_gen_characteristics",
        "context_name": "ProductsGenCharacteristicsContext",
        "question": "What are characteristic names used at least twice across all products?",
        "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2",
        "linq": "context.Products.Join(context.ProductCharacteristics, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).Join(context.Characteristics, joined => joined.t2.CharacteristicId, t3 => t3.CharacteristicId, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t3.CharacteristicName }).Where(group => group.Count() >= 2).Select(group => new { group.Key.CharacteristicName }).ToList();",
        "generated": "context.Characteristics.GroupBy(row => new { row.CharacteristicName }).Where(group => group.Count() >= 2).Select(group => new { group.Key.CharacteristicName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: fast}, {0: slow}, {0: warm}]\nLINQ Results: [{0: cool}, {0: fast}, {0: hot}, {0: slow}, {0: warm}]\n"
    },
    {
        "id": "21df223fceb6d232965d5af2ed6379847bed7f0df2f203ae6a30561fe91a4070",
        "db_name": "products_gen_characteristics",
        "context_name": "ProductsGenCharacteristicsContext",
        "question": "How many colors are never used by any product?",
        "sql": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
        "linq": "context.RefColors.Where(row => !context.Products.Select(row => row.ColorCode).Contains(row.ColorCode)).Count();",
        "generated": "context.Products.GroupBy(row => new { row.ColorCode }).Where(group =>!group.Select(row => row.ColorCode).Intersect(context.Products.Select(row => row.ColorCode)).Any()).Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 2}]\nLINQ Results: [{0: 0}]\n"
    },
    {
        "id": "5ec5de1893325955772c403fa1e147b0aadbdbd4364d1a792de8fbeba94c5e6b",
        "db_name": "cre_Doc_Control_Systems",
        "context_name": "CreDocControlSystemsContext",
        "question": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.",
        "sql": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
        "linq": "context.Documents.Where(row => row.DocumentStatusCode == \"done\" && row.DocumentTypeCode == \"Paper\").Select(row => row.DocumentId).Except(context.Documents.Join(context.RefShippingAgents, Documents => Documents.ShippingAgentCode, RefShippingAgents => RefShippingAgents.ShippingAgentCode, (Documents, RefShippingAgents) => new { Documents, RefShippingAgents }).Where(row => row.RefShippingAgents.ShippingAgentName == \"USPS\").Select(row => row.Documents.DocumentId)).ToList();",
        "generated": "context.Documents.Where(row => row.DocumentStatusCode == \"done\" && row.DocumentTypeCode == \"Paper\" && row.ShippingAgentCode!= \"USPS\").Select(row => row.DocumentId).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 3}, {0: 17}]\nLINQ Results: [{0: 2}, {0: 3}, {0: 4}, {0: 17}]\n"
    },
    {
        "id": "11c83cfead190f4c83653b635b9f6c9d283a6ae205c95134e8ec808167a42e61",
        "db_name": "cre_Doc_Control_Systems",
        "context_name": "CreDocControlSystemsContext",
        "question": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.",
        "sql": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
        "linq": "context.Documents.Where(row => row.DocumentStatusCode == \"done\" && row.DocumentTypeCode == \"Paper\").Select(row => row.DocumentId).Intersect(context.Documents.Join(context.RefShippingAgents, Documents => Documents.ShippingAgentCode, RefShippingAgents => RefShippingAgents.ShippingAgentCode, (Documents, RefShippingAgents) => new { Documents, RefShippingAgents }).Where(row => row.RefShippingAgents.ShippingAgentName == \"USPS\").Select(row => row.Documents.DocumentId)).ToList();",
        "generated": "context.Documents.Where(row => row.DocumentStatusCode == \"DONE\" && row.DocumentTypeCode == \"Paper\" && row.ShippingAgentCode == \"USPS\").Select(row => new { row.DocumentId }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 2}, {0: 4}]\nLINQ Results: []\n"
    },
    {
        "id": "64da1355ece6448e58a5f6b27497cba2a8cace189444956af02248fb68c97902",
        "db_name": "cre_Doc_Control_Systems",
        "context_name": "CreDocControlSystemsContext",
        "question": "What is draft detail of the document with id 7?",
        "sql": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;",
        "linq": "context.DocumentDrafts.Where(row => row.DocumentId == 7).Select(row => new { row.DraftDetails }).ToList();",
        "generated": "context.DocumentDrafts.Where(row => row.DocumentId == 7).Select(row => row.DraftDetails).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "2f1f8e9205459533a445bc4be5704516302e80b7c0e1b7f199eee24b190e13d0",
        "db_name": "cre_Doc_Control_Systems",
        "context_name": "CreDocControlSystemsContext",
        "question": "How many draft copies does the document with id 2 have?",
        "sql": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;",
        "linq": "context.DraftCopies.Where(row => row.DocumentId == 2).Count();",
        "generated": "context.Documents.Find(2).DocumentDrafts.Select(row => row.DraftCopies.Count).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 2}]\nLINQ Results: []\n"
    },
    {
        "id": "1726a55131e64a179e3053968b39c3910f4ac7757f386b700bc9f04f668ed8d9",
        "db_name": "cre_Doc_Control_Systems",
        "context_name": "CreDocControlSystemsContext",
        "question": "Which document has the most draft copies? List its document id and number of draft copies.",
        "sql": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
        "linq": "context.DraftCopies.GroupBy(row => new { row.DocumentId }).Select(group => new { group.Key.DocumentId, CountCopyNumber = group.Select(row => row.CopyNumber).Count() }).OrderByDescending(group => group.CountCopyNumber).Take(1).ToList();",
        "generated": "context.Documents.Join(context.DocumentDrafts, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DocumentId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DocumentId, Count = group.Count() }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 2, 1: 2}]\nLINQ Results: [{0: 1, 1: 2}]\n"
    },
    {
        "id": "a6a915b3b3ec3c03265b7862c8f7883b9741dd1d4b2ad5f96005ced6b3bdc7e2",
        "db_name": "cre_Doc_Control_Systems",
        "context_name": "CreDocControlSystemsContext",
        "question": "Which documents have more than 1 draft copies? List document id and number of draft copies.",
        "sql": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;",
        "linq": "context.DraftCopies.GroupBy(row => new { row.DocumentId }).Select(group => new { group.Key.DocumentId, Count = group.Count() }).Where(group => group.Count > 1).ToList();",
        "generated": "context.Documents.Join(context.DocumentDrafts, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Join(context.DraftCopies, joined => joined.T2.DocumentId, joined => joined.DocumentId, (joined, joined1) => new { joined, joined1 }).GroupBy(row => new { row.joined.DocumentId }).Select(group => new { group.Key.DocumentId, Count = group.Count() }).Where(row => row.Count > 1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,398): error CS0019: Operator '>' cannot be applied to operands of type 'method group' and 'int' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.30"
    },
    {
        "id": "ffc1f19db0b7d98ae8eafa2bd63dd5f4752ce3662066869b7640540c0ea39456",
        "db_name": "railway",
        "context_name": "RailwayContext",
        "question": "List the object number of railways that do not have any trains.",
        "sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)",
        "linq": "context.Railways.Where(row => !context.Trains.Select(row => row.RailwayId).Contains(row.RailwayId)).Select(row => new { row.ObjectNumber }).ToList();",
        "generated": "context.Railways.Where(row =>!context.Trains.Select(row => row.RailwayId).Contains(row.RailwayId)).Select(row => new { row.ObjectNumber }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "7186ce894a04d9c97fa7c9a4ff01d2c8358359842db1d4f7f53d5f4baf5996f4",
        "db_name": "railway",
        "context_name": "RailwayContext",
        "question": "Show the countries that have both managers of age above 50 and managers of age below 46.",
        "sql": "SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46",
        "linq": "context.Managers.Where(row => row.Age > 50).Select(row => row.Country).Intersect(context.Managers.Where(row => row.Age < 46).Select(row => row.Country)).ToList();",
        "generated": "context.Managers.Join(context.RailwayManages, T1 => T1.ManagerId, T2 => T2.ManagerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Country }).Where(group => group.All(row => row.T1.Age > 50) && group.All(row => row.T2.FromYear == group.First().T2.FromYear)).Select(group => new { group.Key.Country }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: United States}]\nLINQ Results: []\n"
    },
    {
        "id": "ec7d9334039be45478dcdda7067b28e6a34014996dc141521fb7c5a1aba54674",
        "db_name": "railway",
        "context_name": "RailwayContext",
        "question": "Show the distinct countries of managers.",
        "sql": "SELECT DISTINCT Country FROM manager",
        "linq": "context.Managers.Select(row => new { row.Country }).Distinct().ToList();",
        "generated": "context.Managers.Select(row => row.Country).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "bbea2f0ae08b276a8ff77d0c4f3512646534ce7c5eb40368bb5aa3a4555085c5",
        "db_name": "railway",
        "context_name": "RailwayContext",
        "question": "Show the working years of managers in descending order of their level.",
        "sql": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC",
        "linq": "context.Managers.OrderByDescending(row => row.Level).Select(row => new { row.WorkingYearStarts }).ToList();",
        "generated": "context.Managers.Join(context.RailwayManages, T1 => T1.ManagerId, T2 => T2.ManagerId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Level).Select(row => new { row.T2.FromYear }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1993}, {0: 1999}, {0: 1985}, {0: 2001}, {0: 2003}, {0: 2004}, {0: 2006}]\nLINQ Results: [{0: 2013}, {0: 2010}, {0: 2011}, {0: 2012}]\n"
    },
    {
        "id": "91ff029c8c2b501265402794bb924fb3ee801cfefc3b13f608c0f885bf57b57f",
        "db_name": "railway",
        "context_name": "RailwayContext",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "sql": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
        "linq": "context.Managers.Where(row => row.Age > 50 || row.Age < 46).Select(row => new { row.Country }).ToList();",
        "generated": "context.Managers.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, MaxAge = group.Select(row => row.Age).Max(), MinAge = group.Select(row => row.Age).Min() }).Where(row => row.MaxAge > 50 || row.MinAge < 46).Select(row => new { row.Country }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: United States}, {0: United States}, {0: England}, {0: Australia}]\nLINQ Results: [{0: Australia}, {0: England}, {0: United States}]\n"
    },
    {
        "id": "eb7c9f4e664704f70921e9bf5f69c7d629b801ab55d4abe91786b3e2a1d4dbee",
        "db_name": "flight_company",
        "context_name": "FlightCompanyContext",
        "question": "How many companies operates airlines in each airport?",
        "sql": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id",
        "linq": "context.OperateCompanies.Join(context.Flights, T1 => T1.Id, t2 => t2.CompanyId, (T1, t2) => new { T1, t2 }).Join(context.Airports, joined => joined.t2.AirportId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.t2, T3 }).GroupBy(row => new { row.T3.Id }).Select(group => new { group.Key.Id, Count = group.Count() }).ToList();",
        "generated": "context.OperateCompanies.GroupBy(row => new { row.AirportId }).Select(group => new { group.Key.AirportId, Count = group.Count() }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,70): error CS1061: 'OperateCompany' does not contain a definition for 'AirportId' and no accessible extension method 'AirportId' accepting a first argument of type 'OperateCompany' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.21"
    },
    {
        "id": "052effe0d2263791373f5255e79d72406f70292e8cd790723d38d097ec34ce0b",
        "db_name": "flight_company",
        "context_name": "FlightCompanyContext",
        "question": "how many airports are there in each country?",
        "sql": "SELECT count(*) ,  country FROM airport GROUP BY country",
        "linq": "context.Airports.GroupBy(row => new { row.Country }).Select(group => new { Count = group.Count(), group.Key.Country }).ToList();",
        "generated": "context.Airports.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1, 1: Belgium}, {0: 1, 1: Denmark}, {0: 1, 1: Iceland}, {0: 1, 1: Netherlands}, {0: 1, 1: Norway}, {0: 1, 1: Spain}, {0: 3, 1: United States}]\nLINQ Results: [{0: Belgium, 1: 1}, {0: Denmark, 1: 1}, {0: Iceland, 1: 1}, {0: Netherlands, 1: 1}, {0: Norway, 1: 1}, {0: Spain, 1: 1}, {0: United States, 1: 3}]\n"
    },
    {
        "id": "10460194060242e45e541c876c767f6fbad1b6205631a94a3e69da3165ac6aa1",
        "db_name": "flight_company",
        "context_name": "FlightCompanyContext",
        "question": "which countries have more than 2 airports?",
        "sql": "SELECT country FROM airport GROUP BY country HAVING count(*)  >  2",
        "linq": "context.Airports.GroupBy(row => new { row.Country }).Where(group => group.Count() > 2).Select(group => new { group.Key.Country }).ToList();",
        "generated": "context.Airports.GroupBy(row => new { row.Country }).Where(group => group.Count() > 2).Select(group => new { group.Key.Country }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "4bf0ebcabeb878ee161d6bbcf469c2fa2ef79725a59aad76e6c913a9ebe8d752",
        "db_name": "flight_company",
        "context_name": "FlightCompanyContext",
        "question": "which pilot is in charge of the most number of flights?",
        "sql": "SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Flights.GroupBy(row => new { row.Pilot }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Pilot }).Take(1).ToList();",
        "generated": "context.Flights.GroupBy(row => new { row.Pilot }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Pilot }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "63ea8ec7f8df75532179736a45469f42d04ce0230afbaa9d47e3520d8af0849f",
        "db_name": "e_learning",
        "context_name": "ELearningContext",
        "question": "List the dates of enrollment and completion of the student with personal name \"Karson\".",
        "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"",
        "linq": "context.StudentCourseEnrolments.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PersonalName == \"Karson\").Select(row => new { row.T1.DateOfEnrolment, row.T1.DateOfCompletion }).ToList();",
        "generated": "context.Students.Join(context.StudentCourseEnrolments, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PersonalName == \"Karson\").Select(row => new { row.T2.DateOfEnrolment, row.T2.DateOfCompletion }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "9753bfc7fa2e4bdaac98489c738ff3b9a58ebedfa8e18d36ba804cd5ac10de45",
        "db_name": "e_learning",
        "context_name": "ELearningContext",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "linq": "context.StudentCourseEnrolments.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FamilyName == \"Zieme\" && row.T2.PersonalName == \"Bernie\").Select(row => new { row.T1.DateOfEnrolment, row.T1.DateOfCompletion }).ToList();",
        "generated": "context.Students.Join(context.StudentCourseEnrolments, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FamilyName == \"Zieme\" && row.T1.PersonalName == \"Bernie\").Select(row => new { row.T2.DateOfEnrolment, row.T2.DateOfCompletion }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "9ccc16cd3ccad57a9b0961fd02d88c416df835fd3f578c32f2b6c8ee3d397cab",
        "db_name": "e_learning",
        "context_name": "ELearningContext",
        "question": "Find the student ID and login name of the student with the most course enrollments",
        "sql": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
        "linq": "context.StudentCourseEnrolments.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.StudentId, group.First().T2.LoginName }).Take(1).ToList();",
        "generated": "context.Students.Join(context.StudentCourseEnrolments, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.StudentId, group.First().T1.LoginName }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "f46ace66dcfb64d80a1b3d7a3be4af1a274021ffbe39932c50cfca6803e6ad27",
        "db_name": "e_learning",
        "context_name": "ELearningContext",
        "question": "Find the student ID and personal name of the student with at least two enrollments.",
        "sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2",
        "linq": "context.StudentCourseEnrolments.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.StudentId, group.First().T2.PersonalName }).ToList();",
        "generated": "context.Students.Join(context.StudentCourseEnrolments, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.StudentId, group.First().T1.PersonalName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "8f04ea18eb078b56eae1c466dbad6ed8d8f39e78e1e49d358e9619f7657df44c",
        "db_name": "e_learning",
        "context_name": "ELearningContext",
        "question": "Find the student ID and middle name for all the students with at most two enrollments.",
        "sql": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2",
        "linq": "context.StudentCourseEnrolments.Join(context.Students, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).Where(group => group.Count() <= 2).Select(group => new { group.Key.StudentId, group.First().T2.MiddleName }).ToList();",
        "generated": "context.Students.Join(context.StudentCourseEnrolments, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StudentId }).Where(group => group.Count() <= 2).Select(group => new { group.First().T1.MiddleName, group.First().T1.StudentId }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 2, 1: Luella}, {0: 3, 1: Brandt}, {0: 4, 1: Casimir}, {0: 6, 1: Asa}, {0: 9, 1: Kailey}, {0: 10, 1: Vicente}, {0: 11, 1: Kolby}, {0: 12, 1: Karley}, {0: 13, 1: Camilla}, {0: 14, 1: Ursula}]\nLINQ Results: [{0: Luella, 1: 2}, {0: Brandt, 1: 3}, {0: Casimir, 1: 4}, {0: Asa, 1: 6}, {0: Kailey, 1: 9}, {0: Vicente, 1: 10}, {0: Kolby, 1: 11}, {0: Karley, 1: 12}, {0: Camilla, 1: 13}, {0: Ursula, 1: 14}]\n"
    },
    {
        "id": "f873f0c684df3d602d09f5494b4154962867f6445a5f767ac9e3726beb1e060c",
        "db_name": "e_learning",
        "context_name": "ELearningContext",
        "question": "Find the personal names of students not enrolled in any course.",
        "sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id",
        "linq": "context.Students.Select(row => row.PersonalName).Except(context.Students.Join(context.StudentCourseEnrolments, T1 => T1.StudentId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.PersonalName)).ToList();",
        "generated": "context.Students.Where(row =>!context.StudentCourseEnrolments.Select(row => row.StudentId).Contains(row.StudentId)).Select(row => new { row.PersonalName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "a03fabc2effcd4a37c19679c179a3340a0e1e12b839c26264079041c221571f3",
        "db_name": "e_learning",
        "context_name": "ELearningContext",
        "question": "How many students did not have any course enrollment?",
        "sql": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)",
        "linq": "context.Students.Where(row => !context.StudentCourseEnrolments.Select(row => row.StudentId).Contains(row.StudentId)).Count();",
        "generated": "context.Students.Where(row =>!context.StudentCourseEnrolments.Select(row => row.StudentId).Contains(row.StudentId)).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "5ffee628fb696a889880c6e8fdfaebb7c869ac1cfa5ae2c28e144192cbdd69d2",
        "db_name": "e_learning",
        "context_name": "ELearningContext",
        "question": "Find the common login name of course authors and students.",
        "sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
        "linq": "context.CourseAuthorsAndTutors.Select(row => row.LoginName).Intersect(context.Students.Select(row => row.LoginName)).ToList();",
        "generated": "context.CourseAuthorsAndTutors.Join(context.Students, T1 => T1.LoginName, T2 => T2.LoginName, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.LoginName }).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "409e351b913861375dff413a174ca8d05116264fab6fb6e887c2f8e1efe500c0",
        "db_name": "e_learning",
        "context_name": "ELearningContext",
        "question": "Find the common personal name of course authors and students.",
        "sql": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
        "linq": "context.CourseAuthorsAndTutors.Select(row => row.PersonalName).Intersect(context.Students.Select(row => row.PersonalName)).ToList();",
        "generated": "context.CourseAuthorsAndTutors.Join(context.Students, T1 => T1.AuthorId, T2 => T2.StudentId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.PersonalName }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: []\nLINQ Results: [{0: Cathrine}, {0: Retha}, {0: Darius}, {0: Julio}, {0: Yessenia}, {0: Adolf}, {0: Logan}, {0: Kelsie}, {0: Georgiana}, {0: Deja}, {0: Ciara}, {0: Sheldon}, {0: Madonna}, {0: Dusty}, {0: Shakira}]\n"
    },
    {
        "id": "9c9a54fbc193df82cb49682ce1eec96cc285b1d8239a3f4b8388ef3fa4faf1bb",
        "db_name": "driving_school",
        "context_name": "DrivingSchoolContext",
        "question": "List all payment methods and number of payments using each payment methods.",
        "sql": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",
        "linq": "context.CustomerPayments.GroupBy(row => new { row.PaymentMethodCode }).Select(group => new { group.Key.PaymentMethodCode, Count = group.Count() }).ToList();",
        "generated": "context.CustomerPayments.GroupBy(row => new { row.PaymentMethodCode }).Select(group => new { group.Key.PaymentMethodCode, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "70a9358bf4709d54d3fbd0e3cef4ddb64006c62e9ef38433767fb79ee00e2e47",
        "db_name": "driving_school",
        "context_name": "DrivingSchoolContext",
        "question": "How many lessons were in cancelled state?",
        "sql": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";",
        "linq": "context.Lessons.Where(row => row.LessonStatusCode == \"Cancelled\").Count();",
        "generated": "context.Lessons.Where(row => row.LessonStatusCode == \"Cancelled\").Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "f79b372aab1315f4115728dbb25e5dba2a6652c28df3c5b20b92e181962f018f",
        "db_name": "driving_school",
        "context_name": "DrivingSchoolContext",
        "question": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",
        "sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
        "linq": "context.Lessons.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Janessa\" && row.T2.LastName == \"Sawayn\" && EF.Functions.Like(row.T2.Nickname, \"%s%\")).Select(row => new { row.T1.LessonId }).ToList();",
        "generated": "context.Lessons.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Janessa\" && row.T2.LastName == \"Sawayn\" && row.T2.Nickname.Contains('s')).Select(row => row.T1.LessonId).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.InvalidOperationException: The LINQ expression 'DbSet<Lesson>()\n    .Join(\n        inner: DbSet<Staff>(), \n        outerKeySelector: l => (object)l.StaffId, \n        innerKeySelector: s => (object)(int?)s.StaffId, \n        resultSelector: (l, s) => new TransparentIdentifier<Lesson, Staff>(\n            Outer = l, \n            Inner = s\n        ))\n    .Where(ti => ti.Inner.FirstName == \"Janessa\" && ti.Inner.LastName == \"Sawayn\" && ti.Inner.Nickname.Contains(s))' could not be translated. Additional information: Translation of method 'string.Contains' failed. If this method can be mapped to your custom function, see https://go.microsoft.com/fwlink/?linkid=2132413 for more information. Either rewrite the query in a form that can be translated, or switch to client evaluation explicitly by inserting a call to 'AsEnumerable', 'AsAsyncEnumerable', 'ToList', or 'ToListAsync'. See https://go.microsoft.com/fwlink/?linkid=2101038 for more information.\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.GetEnumerator()\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "65254df305129337ae79b4ed081e2f0f9b0adeb8d883004b1d4fb2b2cc615fe4",
        "db_name": "driving_school",
        "context_name": "DrivingSchoolContext",
        "question": "How many lessons taught by staff whose first name has letter 'a' in it?",
        "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"",
        "linq": "context.Lessons.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T2.FirstName, \"%a%\")).Count();",
        "generated": "context.Staff.Join(context.Lessons, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName.Contains('a')).Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.InvalidOperationException: The LINQ expression 'DbSet<Staff>()\n    .Join(\n        inner: DbSet<Lesson>(), \n        outerKeySelector: s => (object)(int?)s.StaffId, \n        innerKeySelector: l => (object)l.StaffId, \n        resultSelector: (s, l) => new TransparentIdentifier<Staff, Lesson>(\n            Outer = s, \n            Inner = l\n        ))\n    .Where(ti => ti.Outer.FirstName.Contains(a))' could not be translated. Additional information: Translation of method 'string.Contains' failed. If this method can be mapped to your custom function, see https://go.microsoft.com/fwlink/?linkid=2132413 for more information. Either rewrite the query in a form that can be translated, or switch to client evaluation explicitly by inserting a call to 'AsEnumerable', 'AsAsyncEnumerable', 'ToList', or 'ToListAsync'. See https://go.microsoft.com/fwlink/?linkid=2101038 for more information.\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "3a64ba44e1c0c15bb499972eaced3e34d4103a6850e36df739d94b47b8cd0ae8",
        "db_name": "driving_school",
        "context_name": "DrivingSchoolContext",
        "question": "How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?",
        "sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "linq": "context.Lessons.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Janessa\" && row.T2.LastName == \"Sawayn\").Select(row => row.T1.LessonTime).ToList().Select(value => double.Parse(value)).Sum();",
        "generated": "context.Staff.Join(context.Lessons, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"Janessa\" && row.T1.LastName == \"Sawayn\").Select(row => row.T2.LessonTime).Sum();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,20): error CS1929: 'IQueryable<string>' does not contain a definition for 'Sum' and the best extension method overload 'Enumerable.Sum(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.28"
    },
    {
        "id": "6577553e0cad74951ba4e638b556dbd3f9d41b7793cd505b29202f08bc2b49da",
        "db_name": "driving_school",
        "context_name": "DrivingSchoolContext",
        "question": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?",
        "sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "linq": "context.Lessons.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Janessa\" && row.T2.LastName == \"Sawayn\").Select(row => (double) row.T1.Price).Average();",
        "generated": "context.Staff.Join(context.Lessons, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"Janessa\" && row.T1.LastName == \"Sawayn\").Select(row => row.T2.Price).Average();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "76dfaa7eee71b6d9b74db686972ee129d3366f941a59fdf2c4116f0d9517d2c5",
        "db_name": "driving_school",
        "context_name": "DrivingSchoolContext",
        "question": "How many lesson does customer with first name Ray took?",
        "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"",
        "linq": "context.Lessons.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Ray\").Count();",
        "generated": "context.Customers.Where(row => row.FirstName == \"Ray\").Select(row => row.Lessons.Count()).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "da953040f37bc7fec765334686e6c0ead3a4cb15725246bb51f27279114dece7",
        "db_name": "driving_school",
        "context_name": "DrivingSchoolContext",
        "question": "Which last names are both used by customers and by staff?",
        "sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
        "linq": "context.Customers.Select(row => row.LastName).Intersect(context.Staff.Select(row => row.LastName)).ToList();",
        "generated": "context.Customers.Select(row => row.LastName).Intersect(context.Staff.Select(row => row.LastName)).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "af7c2bd83d43ef42f3d6e3f087db8329fe46899d9a5ddc11e64eb848205dc9fc",
        "db_name": "driving_school",
        "context_name": "DrivingSchoolContext",
        "question": "What is the first name of the staff who did not give any lesson?",
        "sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id",
        "linq": "context.Staff.Select(row => row.FirstName).Except(context.Lessons.Join(context.Staff, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Select(row => row.T2.FirstName)).ToList();",
        "generated": "context.Staff.Where(row =>!context.Lessons.Select(row => row.StaffId).Contains(row.StaffId)).Select(row => new { row.FirstName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "33ddc2fe9dfd63df03c4938467328c233ace5c94508c0df1640479c0af224e07",
        "db_name": "driving_school",
        "context_name": "DrivingSchoolContext",
        "question": "What is the id and detail of the vehicle used in lessons for most of the times?",
        "sql": "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Vehicles.Join(context.Lessons, T1 => T1.VehicleId, T2 => T2.VehicleId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.VehicleId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.VehicleId, group.First().T1.VehicleDetails }).Take(1).ToList();",
        "generated": "context.Lessons.Join(context.Vehicles, T1 => T1.VehicleId, T2 => T2.VehicleId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.VehicleId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.VehicleId, group.First().T2.VehicleDetails }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "6a5115b3c9f14e84dc2d617d583b27f81ed23d922edcea6681cbc3e2147165fe",
        "db_name": "roller_coaster",
        "context_name": "RollerCoasterContext",
        "question": "Show the names of countries that have more than one roller coaster.",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "linq": "context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Where(group => group.Count() > 1).Select(group => new { group.Key.Name }).ToList();",
        "generated": "context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CountryId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "352780d0a4968a833e0c7f75bdb2c6ee55c1f7b007aff125d52a65d3d5e31677",
        "db_name": "roller_coaster",
        "context_name": "RollerCoasterContext",
        "question": "Show the name and population of the country that has the highest roller coaster.",
        "sql": "SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1",
        "linq": "context.Countries.Join(context.RollerCoasters, T1 => T1.CountryId, T2 => T2.CountryId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Height).Select(row => new { row.T1.Name, row.T1.Population }).Take(1).ToList();",
        "generated": "context.Countries.OrderByDescending(row => row.Area).Select(row => new { row.Name, row.Population }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "32e536418896b7c0fbbc9540f2a45f660428a2f69852a55970f6d7000fe93bd8",
        "db_name": "roller_coaster",
        "context_name": "RollerCoasterContext",
        "question": "How many countries do not have an roller coaster longer than 3000?",
        "sql": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )",
        "linq": "context.Countries.Where(row => !context.RollerCoasters.Where(row => row.Length > 3000).Select(row => row.CountryId).Contains(row.CountryId)).Count();",
        "generated": "context.Countries.Where(row =>!context.RollerCoasters.Where(row => row.Length > 3000).Select(row => row.CountryId).Contains(row.CountryId)).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "887ee91d07b7cc13578352d3459a45b5b8815f426bb7abbe67836a6c76bc9020",
        "db_name": "epinions_1",
        "context_name": "Epinions1Context",
        "question": "Find the name of the user who gave the highest rating.",
        "sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1",
        "linq": "context.Useraccts.Join(context.Reviews, T1 => T1.UId, T2 => T2.UId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Rating).Select(row => new { row.T1.Name }).Take(1).ToList();",
        "generated": "context.Useraccts.Join(context.Reviews, T1 => T1.UId, T2 => T2.UId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Rating).Select(row => new { row.T1.Name }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "a27ce32a96e39f1106d71f9eab6eee93c11f4eb2d79d0d04c96d6a8abaa2c6ab",
        "db_name": "epinions_1",
        "context_name": "Epinions1Context",
        "question": "Find the name of the source user with the highest average trust score.",
        "sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1",
        "linq": "context.Useraccts.Join(context.Trusts, T1 => T1.UId, T2 => T2.SourceUId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.SourceUId }).OrderByDescending(group => group.Average(row => row.T2.Trust1)).Select(group => new { group.First().T1.Name }).Take(1).ToList();",
        "generated": "context.Trusts.GroupBy(row => new { row.SourceUId }).Select(group => new { group.Key.SourceUId, group.Select(row => row.Trust1).Average() }).OrderByDescending(group => group.Average()).Select(group => context.Useraccts.Find(group.SourceUId).Name).First();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,116): error CS0746: Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access. [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.42"
    },
    {
        "id": "d8608156b3a96bf57f37c1e66c72f5d9094add21584903843b9d05d78b8d99fb",
        "db_name": "epinions_1",
        "context_name": "Epinions1Context",
        "question": "Find each target user's name and average trust score.",
        "sql": "SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id",
        "linq": "context.Useraccts.Join(context.Trusts, T1 => T1.UId, T2 => T2.TargetUId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TargetUId }).Select(group => new { group.First().T1.Name, AverageTrust1 = group.Select(row => row.T2.Trust1).Average() }).ToList();",
        "generated": "context.Trusts.GroupBy(row => new { row.TargetUId }).Select(group => new { group.Key.TargetUId, Name = group.Select(row => row.SourceU.Name).Distinct().First(), AverageTrust = group.Select(row => row.Trust1).Average() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Mark, 1: 4.666666666666667}, {0: Terry, 1: 5}, {0: Nancy, 1: 8}, {0: Rosie, 1: 4.5}, {0: Roxi, 1: 10}]\nLINQ Results: [{0: 2, 1: Helen, 2: 4.666666666666667}, {0: 3, 1: Helen, 2: 5}, {0: 4, 1: Mark, 2: 8}, {0: 5, 1: Emily, 2: 4.5}, {0: 6, 1: Terry, 2: 10}]\n"
    },
    {
        "id": "824077595bdcd650ca20e6ea1dd14449fe25d101073e3f64e1f31fbd984a6e4c",
        "db_name": "epinions_1",
        "context_name": "Epinions1Context",
        "question": "Find the name of the target user with the lowest trust score.",
        "sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1",
        "linq": "context.Useraccts.Join(context.Trusts, T1 => T1.UId, T2 => T2.TargetUId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Trust1).Select(row => new { row.T1.Name }).Take(1).ToList();",
        "generated": "context.Trusts.OrderBy(row => row.Trust1).Select(row => new { row.TargetU.Name }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "9f5173444cefffb293c80c6598603f621a61e8f779a5045c7887dc5fcb9a16ad",
        "db_name": "epinions_1",
        "context_name": "Epinions1Context",
        "question": "Find the names of the items that did not receive any review.",
        "sql": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "linq": "context.Items.Where(row => !context.Reviews.Select(row => row.IId).Contains(row.IId)).Select(row => new { row.Title }).ToList();",
        "generated": "context.Items.Where(row =>!context.Reviews.Select(row => row.IId).Contains(row.IId)).Select(row => new { row.Title }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "6fe784ce498a2fa829d2d8ab62b6b161a96eccda1d0d5eae4108edcde4ceb074",
        "db_name": "epinions_1",
        "context_name": "Epinions1Context",
        "question": "Find the number of users who did not write any review.",
        "sql": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
        "linq": "context.Useraccts.Where(row => !context.Reviews.Select(row => row.UId).Contains(row.UId)).Count();",
        "generated": "context.Useraccts.Where(row =>!context.Reviews.Select(row => row.UId).Contains(row.UId)).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "484c511df1f5745e749da16918dbc708ad35ee3558653c4ddd3fe8a87d36de85",
        "db_name": "allergy_1",
        "context_name": "Allergy1Context",
        "question": "Which allergy has most number of students affected?",
        "sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.HasAllergies.GroupBy(row => new { row.Allergy }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Allergy }).Take(1).ToList();",
        "generated": "context.HasAllergies.GroupBy(row => new { row.Allergy }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Allergy }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "84f461596610bdc966aec6a8ccfd4ef8715b344577d1abe1eb5078d6d06c14c2",
        "db_name": "allergy_1",
        "context_name": "Allergy1Context",
        "question": "Show all allergies with number of students affected.",
        "sql": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",
        "linq": "context.HasAllergies.GroupBy(row => new { row.Allergy }).Select(group => new { group.Key.Allergy, Count = group.Count() }).ToList();",
        "generated": "context.Students.Join(context.HasAllergies, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Allergy }).Select(group => new { group.Key.Allergy, Count = group.Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Anchovies, 1: 3}, {0: Cat, 1: 4}, {0: Dog, 1: 3}, {0: Eggs, 1: 3}, {0: Grass Pollen, 1: 4}, {0: Milk, 1: 3}, {0: Nuts, 1: 11}, {0: Ragweed, 1: 6}, {0: Rodent, 1: 1}, {0: Shellfish, 1: 4}, {0: Soy, 1: 4}, {0: Tree Pollen, 1: 13}]\nLINQ Results: [{0: Anchovies, 1: 3}, {0: Cat, 1: 4}, {0: Dog, 1: 3}, {0: Eggs, 1: 3}, {0: Grass Pollen, 1: 4}, {0: Milk, 1: 3}, {0: Nuts, 1: 11}, {0: Ragweed, 1: 5}, {0: Rodent, 1: 1}, {0: Shellfish, 1: 4}, {0: Soy, 1: 4}, {0: Tree Pollen, 1: 13}]\n"
    },
    {
        "id": "0fc820677adf4fe3e0ca557b14d5bff4e7f2b200c6637cf6d9c5bb0c71333c25",
        "db_name": "allergy_1",
        "context_name": "Allergy1Context",
        "question": "Show all allergy type with number of students affected.",
        "sql": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
        "linq": "context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AllergyType1 }).Select(group => new { group.Key.AllergyType1, Count = group.Count() }).ToList();",
        "generated": "context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AllergyType1 }).Select(group => new { group.Key.AllergyType1, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "a93d106db7587323731dedff06420c58213909a3648f7e5062d8250dbdd936ae",
        "db_name": "allergy_1",
        "context_name": "Allergy1Context",
        "question": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.",
        "sql": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy",
        "linq": "context.AllergyTypes.Join(context.HasAllergies, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Fname == \"Lisa\").OrderBy(row => row.T1.Allergy).Select(row => new { row.T1.Allergy, row.T1.AllergyType1 }).ToList();",
        "generated": "context.Students.Join(context.HasAllergies, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.AllergyTypes, joined => joined.T2.Allergy, T3 => T3.Allergy, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Fname == \"Lisa\").Select(row => new { row.T3.AllergyType1 }).OrderBy(row => row.AllergyType1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Parameter 'index')\n   at System.Linq.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument)\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 239\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\n"
    },
    {
        "id": "9fa65af0e82afecf2fd2ed6b24dcf5280b5d63d25ab01349467dfb476b927b97",
        "db_name": "allergy_1",
        "context_name": "Allergy1Context",
        "question": "List the first and last name of the students who do not have any food type allergy.",
        "sql": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "linq": "context.Students.Where(row => !context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"food\").Select(row => row.T1.StuId).Contains(row.StuId)).Select(row => new { row.Fname, row.Lname }).ToList();",
        "generated": "context.Students.Join(context.HasAllergies, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Allergy!= \"Food\").Select(row => new { row.T1.Lname, row.T1.Fname }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Linda, 1: Smith}, {0: Shiela, 1: Jones}, {0: Jandy, 1: Nelson}, {0: Eric, 1: Tai}, {0: David, 1: Adams}, {0: Steven, 1: Davis}, {0: Bruce, 1: Wilson}, {0: Arthur, 1: Pang}, {0: Ian, 1: Thornton}, {0: George, 1: Andreou}, {0: Stacy, 1: Prater}, {0: Mark, 1: Goldman}, {0: Eric, 1: Pang}, {0: Paul, 1: Brody}, {0: Eric, 1: Rugh}, {0: Lisa, 1: Cheng}, {0: Eric, 1: Brown}, {0: William, 1: Simms}, {0: Eric, 1: Epp}, {0: Sarah, 1: Schmidt}]\nLINQ Results: [{0: Smith, 1: Linda}, {0: Kim, 1: Tracy}, {0: Kim, 1: Tracy}, {0: Jones, 1: Shiela}, {0: Kumar, 1: Dinesh}, {0: Gompers, 1: Paul}, {0: Gompers, 1: Paul}, {0: Schultz, 1: Andy}, {0: Apap, 1: Lisa}, {0: Apap, 1: Lisa}, {0: Apap, 1: Lisa}, {0: Apap, 1: Lisa}, {0: Apap, 1: Lisa}, {0: Apap, 1: Lisa}, {0: Apap, 1: Lisa}, {0: Apap, 1: Lisa}, {0: Apap, 1: Lisa}, {0: Tai, 1: Eric}, {0: Lee, 1: Derek}, {0: Lee, 1: Derek}, {0: Lee, 1: Derek}, {0: Lee, 1: Derek}, {0: Lee, 1: Derek}, {0: Lee, 1: Derek}, {0: Lee, 1: Derek}, {0: Lee, 1: Derek}, {0: Lee, 1: Derek}, {0: Adams, 1: David}, {0: Davis, 1: Steven}, {0: Norris, 1: Charles}, {0: Lee, 1: Susan}, {0: Lee, 1: Susan}, {0: Schwartz, 1: Mark}, {0: Schwartz, 1: Mark}, {0: Wilson, 1: Bruce}, {0: Leighton, 1: Michael}, {0: Leighton, 1: Michael}, {0: Pang, 1: Arthur}, {0: Thornton, 1: Ian}, {0: Andreou, 1: George}, {0: Woods, 1: Michael}, {0: Woods, 1: Michael}, {0: Shieber, 1: David}, {0: Shieber, 1: David}, {0: Shieber, 1: David}, {0: Prater, 1: Stacy}, {0: Prater, 1: Stacy}, {0: Goldman, 1: Mark}, {0: Pang, 1: Eric}, {0: Brody, 1: Paul}, {0: Rugh, 1: Eric}, {0: Han, 1: Jun}, {0: Han, 1: Jun}, {0: Han, 1: Jun}, {0: Cheng, 1: Lisa}, {0: Smith, 1: Sarah}, {0: Smith, 1: Sarah}, {0: Smith, 1: Sarah}]\n"
    },
    {
        "id": "d9b06187f744b7e4c4ce709865f1bf328a43d4bd91444ca8909bc0e6f09a3160",
        "db_name": "allergy_1",
        "context_name": "Allergy1Context",
        "question": "Find the number of male (sex is 'M') students who have some food type allery.",
        "sql": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "linq": "context.Students.Where(row => row.Sex == \"M\" && context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"food\").Select(row => row.T1.StuId).Contains(row.StuId)).Count();",
        "generated": "context.Students.Where(row => row.Sex == \"M\").Join(context.HasAllergies, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.AllergyTypes, joined => joined.T2.Allergy, T3 => T3.Allergy, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.AllergyType1 == \"Food Type\").Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 10}]\nLINQ Results: [{0: 0}]\n"
    },
    {
        "id": "aecfe299f26f3f08c9345e117049cae7b098e66fdef3aa553f0437eb598eb78c",
        "db_name": "allergy_1",
        "context_name": "Allergy1Context",
        "question": "Find the different first names and cities of the students who have allergy to milk or cat.",
        "sql": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "linq": "context.Students.Join(context.HasAllergies, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Allergy == \"Milk\" || row.T2.Allergy == \"Cat\").Select(row => new { row.T1.Fname, row.T1.CityCode }).Distinct().ToList();",
        "generated": "context.Students.Join(context.HasAllergies, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.AllergyTypes, joined => joined.T2.Allergy, T3 => T3.Allergy, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.AllergyType1 == \"milk\" || row.T3.AllergyType1 == \"cat\").Select(row => new { row.T1.Fname, row.T1.CityCode }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Linda, 1: BAL}, {0: Lisa, 1: PIT}, {0: Derek, 1: HOU}, {0: Mark, 1: DET}, {0: David, 1: NYC}]\nLINQ Results: []\n"
    },
    {
        "id": "99b13d1cf97b184791e71dc6f0adbfa47956c240a1ec76854a8602a2fbcda605",
        "db_name": "allergy_1",
        "context_name": "Allergy1Context",
        "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.",
        "sql": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
        "linq": "context.Students.Where(row => row.Age > 18 && !context.HasAllergies.Join(context.AllergyTypes, T1 => T1.Allergy, T2 => T2.Allergy, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AllergyType1 == \"food\" || row.T2.AllergyType1 == \"animal\").Select(row => row.T1.StuId).Contains(row.StuId)).Count();",
        "generated": "context.Students.Where(row => row.Age > 18 &&!context.HasAllergies.Select(row => row.StuId).Contains(row.StuId)).Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 12}]\nLINQ Results: [{0: 3}]\n"
    },
    {
        "id": "0d7eacba0f18bac3b72e758b0940b196ac8765b2c51ce926a5e582eb43d35b97",
        "db_name": "allergy_1",
        "context_name": "Allergy1Context",
        "question": "Find the first name and major of the students who are not allegry to soy.",
        "sql": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
        "linq": "context.Students.Where(row => !context.HasAllergies.Where(row => row.Allergy == \"Soy\").Select(row => row.StuId).Contains(row.StuId)).Select(row => new { row.Fname, row.Major }).ToList();",
        "generated": "context.Students.Join(context.HasAllergies, t1 => t1.StuId, t2 => t2.StuId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Allergy!= \"soy\").Select(row => new { row.t1.Fname, row.t1.Major }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Linda, 1: 600}, {0: Tracy, 1: 600}, {0: Shiela, 1: 600}, {0: Dinesh, 1: 600}, {0: Paul, 1: 600}, {0: Andy, 1: 600}, {0: Lisa, 1: 600}, {0: Jandy, 1: 600}, {0: Eric, 1: 600}, {0: Derek, 1: 600}, {0: David, 1: 600}, {0: Steven, 1: 600}, {0: Charles, 1: 600}, {0: Mark, 1: 600}, {0: Bruce, 1: 600}, {0: Arthur, 1: 600}, {0: Ian, 1: 520}, {0: George, 1: 520}, {0: Michael, 1: 540}, {0: David, 1: 520}, {0: Stacy, 1: 540}, {0: Mark, 1: 520}, {0: Eric, 1: 520}, {0: Paul, 1: 520}, {0: Eric, 1: 550}, {0: Lisa, 1: 550}, {0: Eric, 1: 550}, {0: William, 1: 550}, {0: Eric, 1: 50}, {0: Sarah, 1: 50}]\nLINQ Results: [{0: Linda, 1: 600}, {0: Tracy, 1: 600}, {0: Tracy, 1: 600}, {0: Shiela, 1: 600}, {0: Dinesh, 1: 600}, {0: Paul, 1: 600}, {0: Paul, 1: 600}, {0: Andy, 1: 600}, {0: Lisa, 1: 600}, {0: Lisa, 1: 600}, {0: Lisa, 1: 600}, {0: Lisa, 1: 600}, {0: Lisa, 1: 600}, {0: Lisa, 1: 600}, {0: Lisa, 1: 600}, {0: Lisa, 1: 600}, {0: Lisa, 1: 600}, {0: Eric, 1: 600}, {0: Derek, 1: 600}, {0: Derek, 1: 600}, {0: Derek, 1: 600}, {0: Derek, 1: 600}, {0: Derek, 1: 600}, {0: Derek, 1: 600}, {0: Derek, 1: 600}, {0: Derek, 1: 600}, {0: Derek, 1: 600}, {0: David, 1: 600}, {0: Steven, 1: 600}, {0: Charles, 1: 600}, {0: Susan, 1: 600}, {0: Susan, 1: 600}, {0: Mark, 1: 600}, {0: Mark, 1: 600}, {0: Bruce, 1: 600}, {0: Michael, 1: 600}, {0: Michael, 1: 600}, {0: Arthur, 1: 600}, {0: Ian, 1: 520}, {0: George, 1: 520}, {0: Michael, 1: 540}, {0: Michael, 1: 540}, {0: David, 1: 520}, {0: David, 1: 520}, {0: David, 1: 520}, {0: Stacy, 1: 540}, {0: Stacy, 1: 540}, {0: Mark, 1: 520}, {0: Eric, 1: 520}, {0: Paul, 1: 520}, {0: Eric, 1: 550}, {0: Jun, 1: 100}, {0: Jun, 1: 100}, {0: Jun, 1: 100}, {0: Lisa, 1: 550}, {0: Sarah, 1: 550}, {0: Sarah, 1: 550}, {0: Sarah, 1: 550}]\n"
    },
    {
        "id": "432236961db11e0da392d53fe59d91939d7f29e810d56d839f83c8f7be6d93f9",
        "db_name": "company_1",
        "context_name": "Company1Context",
        "question": "Find the number of employees of each gender whose salary is lower than 50000.",
        "sql": "SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex",
        "linq": "context.Employees.Where(row => row.Salary < 50000).GroupBy(row => new { row.Sex }).Select(group => new { Count = group.Count(), group.Key.Sex }).ToList();",
        "generated": "context.Employees.GroupBy(row => new { row.Sex }).Select(group => new { group.Key.Sex, Count = group.Count(row => row.Salary < 50000) }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 3, 1: F}, {0: 4, 1: M}]\nLINQ Results: [{0: F, 1: 3}, {0: M, 1: 4}]\n"
    },
    {
        "id": "fbe26e77cd0091ed83e5fa176d7a056f2e2658d8b459cb26759743f1863a1cf1",
        "db_name": "company_1",
        "context_name": "Company1Context",
        "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.",
        "sql": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate",
        "linq": "context.Employees.OrderBy(row => row.Bdate).Select(row => new { row.Fname, row.Lname, row.Address }).ToList();",
        "generated": "context.Employees.OrderBy(row => row.Bdate).Select(row => new { row.Fname, row.Lname, row.Address }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "bed0fe6f31004f250d8c6ce4a6ea51c55e4b16fc080790a46aef7b8f393309f5",
        "db_name": "game_1",
        "context_name": "Game1Context",
        "question": "How many students play video games?",
        "sql": "SELECT count(DISTINCT StuID) FROM Plays_games",
        "linq": "context.PlaysGames.Select(row => row.StuId).Distinct().Count();",
        "generated": "context.PlaysGames.Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 5}]\nLINQ Results: [{0: 10}]\n"
    },
    {
        "id": "035d1717d05896d21074cf14523e70a4b82ccd90f5acbec65e135cf6daa9697d",
        "db_name": "game_1",
        "context_name": "Game1Context",
        "question": "Show all game ids and the number of hours played.",
        "sql": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid",
        "linq": "context.PlaysGames.GroupBy(row => new { row.GameId }).Select(group => new { group.Key.GameId, SumHoursPlayed = group.Select(row => row.HoursPlayed).Sum() }).ToList();",
        "generated": "context.PlaysGames.GroupBy(row => row.GameId).Select(group => new { group.Key, Count = group.Sum(row => row.HoursPlayed) }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "ba43fb68a1da8d20f49cfc6b2b813417f12e8b534aa8474f2e077e1bc569505e",
        "db_name": "game_1",
        "context_name": "Game1Context",
        "question": "Show all student ids and the number of hours played.",
        "sql": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid",
        "linq": "context.PlaysGames.GroupBy(row => new { row.StuId }).Select(group => new { group.Key.StuId, SumHoursPlayed = group.Select(row => row.HoursPlayed).Sum() }).ToList();",
        "generated": "context.PlaysGames.Select(row => new { row.StuId, row.HoursPlayed }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1001, 1: 51}, {0: 1007, 1: 1000}, {0: 1008, 1: 100}, {0: 1010, 1: 1337}, {0: 1032, 1: 157}]\nLINQ Results: [{0: 1001, 1: 35}, {0: 1001, 1: 15}, {0: 1001, 1: 1}, {0: 1007, 1: 1000}, {0: 1008, 1: 50}, {0: 1008, 1: 50}, {0: 1010, 1: 1337}, {0: 1032, 1: 47}, {0: 1032, 1: 10}, {0: 1032, 1: 100}]\n"
    },
    {
        "id": "c5c07e2b5e662d3f92d3e92d1509811cba01210bb883d59f896c6d254842898f",
        "db_name": "game_1",
        "context_name": "Game1Context",
        "question": "Show the game name that has most number of hours played.",
        "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1",
        "linq": "context.PlaysGames.Join(context.VideoGames, T1 => T1.GameId, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.GameId }).OrderByDescending(group => group.Sum(row => row.T1.HoursPlayed)).Select(group => new { group.First().T2.Gname }).Take(1).ToList();",
        "generated": "context.PlaysGames.GroupBy(row => new { row.GameId }).OrderByDescending(group => group.Sum(row => row.HoursPlayed)).Select(group => new { group.Key.GameId, group.First().Gname }).Take(1);",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,190): error CS1061: 'PlaysGame' does not contain a definition for 'Gname' and no accessible extension method 'Gname' accepting a first argument of type 'PlaysGame' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.42"
    },
    {
        "id": "ae50ee580d62d5e4471ebc2267f53ae8481355e2e573c6333d7a358cbedaca38",
        "db_name": "game_1",
        "context_name": "Game1Context",
        "question": "Show all game names played by at least 1000 hours.",
        "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000",
        "linq": "context.PlaysGames.Join(context.VideoGames, T1 => T1.GameId, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.GameId }).Where(group => group.Sum(row => row.T1.HoursPlayed) >= 1000).Select(group => new { group.First().T2.Gname }).ToList();",
        "generated": "context.PlaysGames.Where(row => row.HoursPlayed >= 1000).Select(row => row.Game.Gname).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "daab254a69f700bc6ba08a9a77c897f3396b0d0b23b74de96aae20cb3fa084f9",
        "db_name": "game_1",
        "context_name": "Game1Context",
        "question": "Show all game names played by Linda Smith",
        "sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"",
        "linq": "context.PlaysGames.Join(context.VideoGames, T1 => T1.GameId, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Lname == \"Smith\" && row.T3.Fname == \"Linda\").Select(row => new { row.T2.Gname }).ToList();",
        "generated": "context.PlaysGames.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Fname == \"Linda\" && row.T2.Lname == \"Smith\").Select(row => new { row.T1.Gname }).Distinct().ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,214): error CS1061: 'PlaysGame' does not contain a definition for 'Gname' and no accessible extension method 'Gname' accepting a first argument of type 'PlaysGame' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.71"
    },
    {
        "id": "0b2dad97c90fa57e04f1e69d94a5b8dd75d725db9c8131d98aaa6cac9af767c5",
        "db_name": "game_1",
        "context_name": "Game1Context",
        "question": "Find the last and first name of students who are playing Football or Lacrosse.",
        "sql": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"",
        "linq": "context.SportsInfos.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.SportName == \"Football\" || row.T1.SportName == \"Lacrosse\").Select(row => new { row.T2.Lname, row.T2.Fname }).ToList();",
        "generated": "context.Students.Join(context.SportsInfos, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.SportName == \"Football\" || row.T2.SportName == \"Lacrosse\").Select(row => new { row.T1.Lname, row.T1.Fname }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "22469d4c13ce6780129a8ad527a5086b9f048355855f16dcca40b62afbcaf842",
        "db_name": "activity_1",
        "context_name": "Activity1Context",
        "question": "Show the names of all the activities Mark Giuliano participates in.",
        "sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "linq": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Join(context.Activities, joined => joined.T2.Actid, T3 => T3.Actid, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Fname == \"Mark\" && row.T1.Lname == \"Giuliano\").Select(row => new { row.T3.ActivityName }).ToList();",
        "generated": "context.ParticipatesIns.Join(context.Activities, T1 => T1.Actid, T2 => T2.Actid, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.Stuid, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Fname == \"Mark\" && row.T3.Lname == \"Giuliano\").Select(row => new { row.T2.ActivityName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Canasta}, {0: Chess}, {0: Crossword Puzzles}]\nLINQ Results: []\n"
    },
    {
        "id": "3e175a39f2e0bcb9a90605291784b534d56f6a37e23b36aedef99d4b5422d89c",
        "db_name": "activity_1",
        "context_name": "Activity1Context",
        "question": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.",
        "sql": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
        "linq": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).Select(group => new { group.First().T1.Fname, group.First().T1.Lname, Count = group.Count(), group.Key.FacId }).ToList();",
        "generated": "context.Faculties.Join(context.FacultyParticipatesIns, t1 => t1.FacId, t2 => t2.FacId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.FacId }).Select(group => new { group.First().t1.Lname, group.First().t1.Fname, Count = group.Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Parameter 'index')\n   at System.Linq.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument)\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 239\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\n"
    },
    {
        "id": "3b5fab3ce95501d5965310de372dd24b664c43a816802ee12bd22a11c7581b06",
        "db_name": "activity_1",
        "context_name": "Activity1Context",
        "question": "Show all the activity names and the number of faculty involved in each activity.",
        "sql": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID",
        "linq": "context.Activities.Join(context.FacultyParticipatesIns, T1 => T1.Actid, T2 => T2.Actid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Actid }).Select(group => new { group.First().T1.ActivityName, Count = group.Count() }).ToList();",
        "generated": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Join(context.Activities, joined => joined.T2.Actid, T3 => T3.Actid, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.Actid }).Select(group => new { group.Key.Actid, group.Select(row => row.T1.Lname).Distinct().Count() }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,329): error CS0746: Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access. [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.30"
    },
    {
        "id": "e3107b1ce8e4a3b00ff635f1317fa0028bc6a531377fe15e56927e2d76d79909",
        "db_name": "activity_1",
        "context_name": "Activity1Context",
        "question": "What is the first and last name of the faculty participating in the most activities?",
        "sql": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.FacId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Fname, group.First().T1.Lname }).Take(1).ToList();",
        "generated": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Actid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Lname, group.First().T1.Fname }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Yair, 1: Amir}]\nLINQ Results: [{0: Giuliano, 1: Mark}]\n"
    },
    {
        "id": "2c3112ea9b44e4a5e24e586caae674c01ce4c4f38a2aed2a5d0b8a523fc6d8e2",
        "db_name": "activity_1",
        "context_name": "Activity1Context",
        "question": "What is the name of the activity that has the most faculty members involved in?",
        "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Activities.Join(context.FacultyParticipatesIns, T1 => T1.Actid, T2 => T2.Actid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Actid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.ActivityName }).Take(1).ToList();",
        "generated": "context.Faculties.Join(context.FacultyParticipatesIns, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Join(context.Activities, joined => joined.T2.Actid, T3 => T3.Actid, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.Fname, row.T1.Lname, row.T3.ActivityName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ActivityName }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Crossword Puzzles}]\nLINQ Results: [{0: Mountain Climbing}]\n"
    },
    {
        "id": "bac5ad332ac89bd7aeaabde84499ed2e2f92dfb8089d9d714b85ba9e9d6f4c28",
        "db_name": "activity_1",
        "context_name": "Activity1Context",
        "question": "What is the first and last name of the student participating in the most activities?",
        "sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Students.Join(context.ParticipatesIns, T1 => T1.StuId, T2 => T2.Stuid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StuId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Fname, group.First().T1.Lname }).Take(1).ToList();",
        "generated": "context.ParticipatesIns.GroupBy(row => new { row.StuId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().Fname, group.First().Lname }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,69): error CS1061: 'ParticipatesIn' does not contain a definition for 'StuId' and no accessible extension method 'StuId' accepting a first argument of type 'ParticipatesIn' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.41"
    },
    {
        "id": "1d732713872ddb3bdeefe2c1d53225518d6b2a2a16ed1809e66a8c082de25554",
        "db_name": "activity_1",
        "context_name": "Activity1Context",
        "question": "What is the name of the activity with the most students?",
        "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Activities.Join(context.ParticipatesIns, T1 => T1.Actid, T2 => T2.Actid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Actid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.ActivityName }).Take(1).ToList();",
        "generated": "context.ParticipatesIns.Join(context.Activities, T1 => T1.Actid, T2 => T2.Actid, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Actid }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.ActivityName }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "3efb30a36e86c2afc23e362fea2d78aaa64128413b3fa029fc3b580c67fce0d1",
        "db_name": "entrepreneur",
        "context_name": "EntrepreneurContext",
        "question": "List the names of people that are not entrepreneurs.",
        "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
        "linq": "context.People.Where(row => !context.Entrepreneurs.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();",
        "generated": "context.People.Where(row =>!context.Entrepreneurs.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "ffd5cfde4af8dc2217d7f8df32621bd86cb4e65da8c3e48e954e24f7e18b4fd8",
        "db_name": "entrepreneur",
        "context_name": "EntrepreneurContext",
        "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "linq": "context.Entrepreneurs.Where(row => row.MoneyRequested > 140000).Select(row => row.Investor).Intersect(context.Entrepreneurs.Where(row => row.MoneyRequested < 120000).Select(row => row.Investor)).ToList();",
        "generated": "context.Entrepreneurs.Where(row => row.MoneyRequested > 140000 || row.MoneyRequested < 120000).Select(row => row.Investor).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Duncan Bannatyne}]\nLINQ Results: [{0: Duncan Bannatyne}, {0: Rachel Elnaugh}, {0: Peter Jones}, {0: Simon Woodroffe}]\n"
    },
    {
        "id": "cdd439911d418e5143f9624c318743b7a3ddd5c563f5a37de101d70ea0d9bae1",
        "db_name": "entrepreneur",
        "context_name": "EntrepreneurContext",
        "question": "How many distinct companies are there?",
        "sql": "SELECT count(DISTINCT Company) FROM entrepreneur",
        "linq": "context.Entrepreneurs.Select(row => row.Company).Distinct().Count();",
        "generated": "context.Entrepreneurs.Select(row => row.Company).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "4e5b22208ad38f68d2aa3c6a453d4efff5e4625ea48db4211b72f50eb9a024a0",
        "db_name": "entrepreneur",
        "context_name": "EntrepreneurContext",
        "question": "Show the company of the tallest entrepreneur.",
        "sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
        "linq": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Height).Select(row => new { row.T1.Company }).Take(1).ToList();",
        "generated": "context.Entrepreneurs.Join(context.People, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Height).Select(row => new { row.T1.Company }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "441fd55c0a7280f393c5db12774ed9026bccebfd39daf2b48435841d88d0504d",
        "db_name": "gymnast",
        "context_name": "GymnastContext",
        "question": "List the distinct hometowns that are not associated with any gymnast.",
        "sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "linq": "context.People.Select(row => row.Hometown).Distinct().Except(context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Select(row => row.T2.Hometown).Distinct()).ToList();",
        "generated": "context.People.Where(row =>!context.Gymnasts.Select(row => row.Hometown).Contains(row.Hometown)).Select(row => new { row.Hometown }).Distinct().ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,83): error CS1061: 'Gymnast' does not contain a definition for 'Hometown' and no accessible extension method 'Hometown' accepting a first argument of type 'Gymnast' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.39"
    },
    {
        "id": "03e84e8aea8faa830e518ab426324e530a0c09de1a9015b33e6ed057a6682394",
        "db_name": "gymnast",
        "context_name": "GymnastContext",
        "question": "Show the hometowns shared by people older than 23 and younger than 20.",
        "sql": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20",
        "linq": "context.People.Where(row => row.Age > 23).Select(row => row.Hometown).Intersect(context.People.Where(row => row.Age < 20).Select(row => row.Hometown)).ToList();",
        "generated": "context.People.Where(row => row.Age > 23 && row.Age < 20).Select(row => new { row.Hometown }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Santo Domingo}]\nLINQ Results: []\n"
    },
    {
        "id": "a81c4f18efd38cb2061a07a74a680eb32d920fef4909ffa3102fff5f66dbb706",
        "db_name": "gymnast",
        "context_name": "GymnastContext",
        "question": "How many distinct hometowns did these people have?",
        "sql": "SELECT count(DISTINCT Hometown) FROM people",
        "linq": "context.People.Select(row => row.Hometown).Distinct().Count();",
        "generated": "context.People.Select(row => row.Hometown).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "06a2fdb550e80e723a3adc731d3f2d65c2c28f7c6e6108fb8e26e304bc603630",
        "db_name": "gymnast",
        "context_name": "GymnastContext",
        "question": "Show the ages of gymnasts in descending order of total points.",
        "sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC",
        "linq": "context.Gymnasts.Join(context.People, T1 => T1.GymnastId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.TotalPoints).Select(row => new { row.T2.Age }).ToList();",
        "generated": "context.Gymnasts.OrderByDescending(row => row.TotalPoints).Select(row => new { row.Age }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,103): error CS1061: 'Gymnast' does not contain a definition for 'Age' and no accessible extension method 'Age' accepting a first argument of type 'Gymnast' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.36"
    },
    {
        "id": "a94d3f2e6b1303bed30eac86cfca0878e2d20f1c0468ca656699304817715d58",
        "db_name": "mountain_photos",
        "context_name": "MountainPhotosContext",
        "question": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?",
        "sql": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'",
        "linq": "context.Mountains.Join(context.Photos, T1 => T1.Id, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Country == \"Ethiopia\").Select(row => row.T2.CameraLensId).Distinct().Count();",
        "generated": "context.CameraLens.Join(context.Photos, T1 => T1.Id, T2 => T2.CameraLensId, (T1, T2) => new { T1, T2 }).Join(context.Mountains, joined => joined.T2.MountainId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Country == \"Ethiopia\").Select(row => row.T1.Brand).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "09f881c36bde231b959e89ad43dd90184bee85e1c0d69e176c06ed1d2ac07593",
        "db_name": "mountain_photos",
        "context_name": "MountainPhotosContext",
        "question": "List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif'",
        "sql": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Lasta Massif'",
        "linq": "context.Mountains.Join(context.Photos, T1 => T1.Id, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Join(context.CameraLens, joined => joined.T2.CameraLensId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Range == \"Toubkal Atlas\").Select(row => row.T3.Brand).Intersect(context.Mountains.Join(context.Photos, T1 => T1.Id, T2 => T2.MountainId, (T1, T2) => new { T1, T2 }).Join(context.CameraLens, joined => joined.T2.CameraLensId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Range == \"Lasta Massif\").Select(row => row.T3.Brand)).ToList();",
        "generated": "context.CameraLens.Join(context.Photos, T1 => T1.Id, T2 => T2.CameraLensId, (T1, T2) => new { T1, T2 }).Join(context.Mountains, joined => joined.T2.MountainId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Range == \"Toubkal Atlas\" || row.T3.Range == \"Lasta Massif\").Select(row => row.T1.Brand).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Sigma}]\nLINQ Results: [{0: Olympus}, {0: Sigma}]\n"
    },
    {
        "id": "4e48ee600e6f215e55c976a7ea4ad422140e702f694b45a1505a5ac6f71dfc06",
        "db_name": "mountain_photos",
        "context_name": "MountainPhotosContext",
        "question": "List the camera lens names containing substring \"Digital\".",
        "sql": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"",
        "linq": "context.CameraLens.Where(row => EF.Functions.Like(row.Name, \"%Digital%\")).Select(row => new { row.Name }).ToList();",
        "generated": "context.CameraLens.Where(row => row.Brand.Contains(\"Digital\")).Select(row => new { row.Name }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Olympus M.Zuiko Digital ED 45mm f/1.8}, {0: Olympus M.Zuiko Digital ED 75mm f/1.8}]\nLINQ Results: []\n"
    },
    {
        "id": "21dda929a476be9ca5bf4d8e0cb214c425bb5060df3545990cf88db3ec34536f",
        "db_name": "mountain_photos",
        "context_name": "MountainPhotosContext",
        "question": "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.",
        "sql": "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)",
        "linq": "context.CameraLens.Join(context.Photos, T1 => T1.Id, T2 => T2.CameraLensId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Select(group => new { group.First().T1.Name, Count = group.Count() }).OrderBy(group => group.Count).ToList();",
        "generated": "context.CameraLens.Join(context.Photos, T1 => T1.Id, T2 => T2.CameraLensId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Brand, row.T1.Name }).Select(group => new { group.Key.Brand, group.Key.Name, Count = group.Count() }).OrderBy(group => group.Count).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Panasonic Leica DG Nocticron 42.5mm f /1.2, 1: 1}, {0: Panasonic Lumix G 150mm f /2.8, 1: 1}, {0: Olympus 15mm f/8.0 Body Cap, 1: 2}, {0: Schneider Kreuznach Super Angulon 14mm f /2.0, 1: 2}, {0: Sigma 19mm f2.8 EX DN, 1: 4}]\nLINQ Results: [{0: Panasonic, 1: Panasonic Leica DG Nocticron 42.5mm f /1.2, 2: 1}, {0: Panasonic, 1: Panasonic Lumix G 150mm f /2.8, 2: 1}, {0: Olympus, 1: Olympus 15mm f/8.0 Body Cap, 2: 2}, {0: Schneider Kreuznach, 1: Schneider Kreuznach Super Angulon 14mm f /2.0, 2: 2}, {0: Sigma, 1: Sigma 19mm f2.8 EX DN, 2: 4}]\n"
    },
    {
        "id": "403314f2c2cc458950cf03ca5dfa999aa68aff839df9b445885cabb356bd64eb",
        "db_name": "tracking_software_problems",
        "context_name": "TrackingSoftwareProblemsContext",
        "question": "What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?",
        "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )",
        "linq": "context.Problems.Join(context.Staff, T1 => T1.ReportedByStaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DateProblemReported > context.Problems.Join(context.Staff, T3 => T3.ReportedByStaffId, T4 => T4.StaffId, (T3, T4) => new { T3, T4 }).Where(row => row.T4.StaffFirstName == \"Rylan\" && row.T4.StaffLastName == \"Homenick\").Select(row => row.T3.DateProblemReported).Max()).Select(row => new { row.T1.ProblemId }).ToList();",
        "generated": "context.Problems.Where(row => row.DateProblemReported > context.Problems.Where(row => row.ReportedByStaff.StaffFirstName == \"Rylan\" && row.ReportedByStaff.StaffLastName == \"Homenick\").Select(row => row.DateProblemReported).Min()).Select(row => row.ProblemId).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "aff06919eda3358826bb2d1a8430fe3cd23c4746e4e23e4be2dca33dafc0bb44",
        "db_name": "tracking_software_problems",
        "context_name": "TrackingSoftwareProblemsContext",
        "question": "Find the top 3 products which have the largest number of problems?",
        "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3",
        "linq": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ProductName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ProductName }).Take(3).ToList();",
        "generated": "context.Products.Join(context.Problems, t1 => t1.ProductId, t2 => t2.ProductId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ProductId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ProductId, group.First().t1.ProductName }).Take(3).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: rose}, {0: wechat}, {0: yellow}]\nLINQ Results: [{0: 1, 1: rose}, {0: 4, 1: wechat}, {0: 2, 1: yellow}]\n"
    },
    {
        "id": "0a9ee65ee96590616bfbb2aa0a0df04108236f16421ed710f3e6edcc8b78d17a",
        "db_name": "tracking_software_problems",
        "context_name": "TrackingSoftwareProblemsContext",
        "question": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
        "sql": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "linq": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Staff, joined => joined.T1.ReportedByStaffId, T3 => T3.StaffId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.ProductName == \"rem\").Select(row => new { row.T3.StaffFirstName, row.T3.StaffLastName }).Except(context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Staff, joined => joined.T1.ReportedByStaffId, T3 => T3.StaffId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.ProductName == \"aut\").Select(row => new { row.T3.StaffFirstName, row.T3.StaffLastName })).ToList();",
        "generated": "context.Products.Join(context.Problems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ProductName == \"rem\").Select(row => new { row.T2.ReportedByStaff.StaffFirstName, row.T2.ReportedByStaff.StaffLastName }).Except(context.Products.Join(context.Problems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ProductName == \"aut\").Select(row => new { row.T2.ReportedByStaff.StaffFirstName, row.T2.ReportedByStaff.StaffLastName })).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "d46ba760155acb6447a4ecbc82b2120747664caecf1a80087ca5ae1ed706ae76",
        "db_name": "tracking_software_problems",
        "context_name": "TrackingSoftwareProblemsContext",
        "question": "Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?",
        "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"",
        "linq": "context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Staff, joined => joined.T1.ReportedByStaffId, T3 => T3.StaffId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.StaffFirstName == \"Lacey\" && row.T3.StaffLastName == \"Bosco\").Select(row => row.T2.ProductName).Intersect(context.Problems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Staff, joined => joined.T1.ReportedByStaffId, T3 => T3.StaffId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.StaffFirstName == \"Kenton\" && row.T3.StaffLastName == \"Champlin\").Select(row => row.T2.ProductName)).ToList();",
        "generated": "context.Products.Join(context.Problems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Staff, joined => joined.T2.ReportedByStaffId, T3 => T3.StaffId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.StaffFirstName == \"Lacey\" && row.T3.StaffFirstName == \"Kenton\").Select(row => new { row.T1.ProductName }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: yellow}]\nLINQ Results: []\n"
    },
    {
        "id": "b4edd2f7f639e219af7a51a35db074763f66f857dda1bc9385adbd4b57aa05a2",
        "db_name": "tvshow",
        "context_name": "TvshowContext",
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "linq": "context.TvChannels.Join(context.Cartoons, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WrittenBy == \"Todd Casey\").Select(row => new { row.T1.Country }).ToList();",
        "generated": "context.Cartoons.Join(context.TvChannels, T1 => T1.Channel, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.TvSeries, joined => joined.T2.Id, T3 => T3.Channel, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.WrittenBy == \"Todd Casey\").Select(row => new { row.T2.Country }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: United Kingdom}, {0: Italy}]\nLINQ Results: [{0: Italy}]\n"
    },
    {
        "id": "c609fd810dc23964fc83c0e3f1d33e0bcbd40363912eb481bd897bd3283ff3a3",
        "db_name": "tvshow",
        "context_name": "TvshowContext",
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "linq": "context.TvChannels.Select(row => row.Country).Except(context.TvChannels.Join(context.Cartoons, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WrittenBy == \"Todd Casey\").Select(row => row.T1.Country)).ToList();",
        "generated": "context.Cartoons.Join(context.TvChannels, T1 => T1.Channel, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T1.WrittenBy!= \"Todd Casey\").Select(row => row.T2.Country).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Poland}]\nLINQ Results: [{0: Italy}, {0: United Kingdom}]\n"
    },
    {
        "id": "bcf80ee8bba55a7e9e5fce1392889ef36408f78709238e0125552f828f940ef1",
        "db_name": "tvshow",
        "context_name": "TvshowContext",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "linq": "context.TvChannels.Join(context.Cartoons, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DirectedBy == \"Michael Chang\").Select(row => new { row.T1.SeriesName, row.T1.Country }).Intersect(context.TvChannels.Join(context.Cartoons, T1 => T1.Id, T2 => T2.Channel, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DirectedBy == \"Ben Jones\").Select(row => new { row.T1.SeriesName, row.T1.Country })).ToList();",
        "generated": "context.Cartoons.Join(context.TvChannels, T1 => T1.Channel, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DirectedBy == \"Ben Jones\" || row.T1.DirectedBy == \"Michael Chang\").Select(row => new { row.T2.SeriesName, row.T2.Country }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: MTV Dance, 1: United Kingdom}]\nLINQ Results: [{0: Sky Radio, 1: Italy}, {0: Music Box Italia, 1: Italy}, {0: MTV Hits, 1: Italy}, {0: MTV Rocks, 1: United Kingdom}, {0: MTV Dance, 1: United Kingdom}, {0: MTV Dance, 1: United Kingdom}, {0: Classica, 1: Italy}, {0: MTV Dance, 1: United Kingdom}]\n"
    },
    {
        "id": "95958bb4a13b92e5b18ceb06650e96a1b84b6644ecf0fd1f54a168ec80d77aea",
        "db_name": "tvshow",
        "context_name": "TvshowContext",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "linq": "context.TvChannels.Where(row => row.Language != \"English\").Select(row => new { row.PixelAspectRatioPar, row.Country }).ToList();",
        "generated": "context.TvChannels.Where(row => row.Language!= \"English\").Select(row => new { row.PixelAspectRatioPar, row.Country }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "f8a726ddc29472744603c6b874578ef962e16e6d850dbaf8b785fa6b2649528a",
        "db_name": "tvshow",
        "context_name": "TvshowContext",
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "linq": "context.TvChannels.GroupBy(row => new { row.Country }).Where(group => group.Count() > 2).Select(group => new { group.First().Id }).ToList();",
        "generated": "context.TvChannels.GroupBy(row => new { row.Country }).Where(group => group.Count() > 2).Select(group => new { group.Key.Country }).Distinct().Select(row => new { row.Country }).Select(row => context.TvChannels.Where(row => EF.Functions.Like(row.Country, \"%\" + row.Country + \"%\")).Select(row => row.Id).ToList()).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.InvalidOperationException: Translating this query requires the SQL APPLY operation, which is not supported on SQLite.\n   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessor.ApplyValidatingVisitor.VisitExtension(Expression extensionExpression)\n   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessor.ApplyValidatingVisitor.VisitExtension(Expression extensionExpression)\n   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessor.Process(Expression query)\n   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.GetEnumerator()\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "023dfb036b16d6c13242eb26893d6a19ee5b94d064f186190753a721d4ef7262",
        "db_name": "tvshow",
        "context_name": "TvshowContext",
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "linq": "context.TvChannels.Select(row => row.Id).Except(context.Cartoons.Where(row => row.DirectedBy == \"Ben Jones\").Select(row => row.Channel)).ToList();",
        "generated": "context.Cartoons.Select(row => row.Channel).Distinct().Except(context.Cartoons.Where(row => row.DirectedBy == \"Ben Jones\").Select(row => row.Channel)).Select(row => row).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 701}, {0: 703}, {0: 705}, {0: 706}, {0: 708}, {0: 709}, {0: 713}, {0: 714}, {0: 715}, {0: 717}, {0: 719}]\nLINQ Results: [{0: 701}, {0: 703}, {0: 705}, {0: 706}, {0: 708}]\n"
    },
    {
        "id": "b7b6ce87e1e5539ee9bc01ac79f9bfc34a8f7f35ad2846af548cc5c3da06c2a1",
        "db_name": "tvshow",
        "context_name": "TvshowContext",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "linq": "context.TvChannels.Where(row => !context.Cartoons.Where(row => row.DirectedBy == \"Ben Jones\").Select(row => row.Channel).Contains(row.Id)).Select(row => new { row.PackageOption }).ToList();",
        "generated": "context.Cartoons.Where(row => row.DirectedBy!= \"Ben Jones\").Select(row => row.Channel).Distinct().Select(row => context.TvChannels.Where(row => row.Id == row).Select(row => row.PackageOption).Distinct()).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,164): error CS0019: Operator '==' cannot be applied to operands of type 'string' and 'TvChannel' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38"
    },
    {
        "id": "c29793c665e92800e4aeed3f34beb9b6b16940fab247b5e28557186c30d3c5cf",
        "db_name": "dog_kennels",
        "context_name": "DogKennelsContext",
        "question": "What are all the possible breed type and size type combinations?",
        "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "linq": "context.Dogs.Select(row => new { row.BreedCode, row.SizeCode }).Distinct().ToList();",
        "generated": "context.Breeds.Join(context.Dogs, T1 => T1.BreedCode, T2 => T2.BreedCode, (T1, T2) => new { T1, T2 }).Join(context.Sizes, joined => joined.T2.SizeCode, T3 => T3.SizeCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.BreedCode, row.T3.SizeCode }).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "02c2a1891772e1dee0650ae5e412bebba06053785a53ba769879d52e32d18e2a",
        "db_name": "dog_kennels",
        "context_name": "DogKennelsContext",
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "linq": "context.Professionals.Join(context.Treatments, T1 => T1.ProfessionalId, T2 => T2.ProfessionalId, (T1, T2) => new { T1, T2 }).Join(context.TreatmentTypes, joined => joined.T2.TreatmentTypeCode, T3 => T3.TreatmentTypeCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.FirstName, row.T3.TreatmentTypeDescription }).Distinct().ToList();",
        "generated": "context.Professionals.Join(context.Treatments, T1 => T1.ProfessionalId, T2 => T2.ProfessionalId, (T1, T2) => new { T1, T2 }).Join(context.TreatmentTypes, joined => joined.T2.TreatmentTypeCode, T3 => T3.TreatmentTypeCode, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.FirstName, row.T3.TreatmentTypeDescription }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Monte, 1: Take for a Walk}, {0: Domenica, 1: Vaccination}, {0: Vernice, 1: Physical examination}, {0: Karley, 1: Vaccination}, {0: Sigurd, 1: Vaccination}, {0: Sigurd, 1: Physical examination}, {0: Ruben, 1: Physical examination}, {0: Domenica, 1: Take for a Walk}, {0: Velva, 1: Take for a Walk}, {0: Danny, 1: Vaccination}, {0: Monte, 1: Physical examination}, {0: Ruben, 1: Take for a Walk}]\nLINQ Results: [{0: Monte, 1: Take for a Walk}, {0: Domenica, 1: Vaccination}, {0: Vernice, 1: Physical examination}, {0: Karley, 1: Vaccination}, {0: Sigurd, 1: Vaccination}, {0: Vernice, 1: Physical examination}, {0: Sigurd, 1: Physical examination}, {0: Ruben, 1: Physical examination}, {0: Domenica, 1: Take for a Walk}, {0: Velva, 1: Take for a Walk}, {0: Danny, 1: Vaccination}, {0: Monte, 1: Physical examination}, {0: Karley, 1: Vaccination}, {0: Monte, 1: Take for a Walk}, {0: Ruben, 1: Take for a Walk}]\n"
    },
    {
        "id": "bd4f5276f4357cd3c25994a3fab2a40190e27d68c8ef48e047b361bdb8751b23",
        "db_name": "cre_Doc_Template_Mgt",
        "context_name": "CreDocTemplateMgtContext",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "linq": "context.Paragraphs.Join(context.Documents, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == \"Welcome to NY\").Select(row => new { row.T1.ParagraphId, row.T1.ParagraphText }).ToList();",
        "generated": "context.Documents.Join(context.Paragraphs, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DocumentName == \"Welcome to NY\").Select(row => new { row.T2.ParagraphId, row.T2.ParagraphText }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "0c1fc05d236a80d19acf3ade609bfeeb9411e5fc97cbbf8001499d0b0c5a1691",
        "db_name": "cre_Doc_Template_Mgt",
        "context_name": "CreDocTemplateMgtContext",
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "linq": "context.Paragraphs.Join(context.Documents, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.DocumentName == \"Customer reviews\").Select(row => new { row.T1.ParagraphText }).ToList();",
        "generated": "context.Documents.Join(context.Paragraphs, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DocumentName == \"Customer reviews\").Select(row => new { row.T2.ParagraphText }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "3b1eede87e297d9c31c7cbad53b0881387919236764711c48a551475e208e634",
        "db_name": "cre_Doc_Template_Mgt",
        "context_name": "CreDocTemplateMgtContext",
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "linq": "context.Paragraphs.Join(context.Documents, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DocumentId }).Select(group => new { group.Key.DocumentId, group.First().T2.DocumentName, Count = group.Count() }).ToList();",
        "generated": "context.Documents.Join(context.Paragraphs, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DocumentId }).Select(group => new { group.Key.DocumentId, group.First().T1.DocumentName, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "bbaa5aa66c300e298bdde6104fb6815a93c73bb8dca7900c53a2fce88690fdc5",
        "db_name": "cre_Doc_Template_Mgt",
        "context_name": "CreDocTemplateMgtContext",
        "question": "List all document ids with at least two paragraphs.",
        "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "linq": "context.Paragraphs.GroupBy(row => new { row.DocumentId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.DocumentId }).ToList();",
        "generated": "context.Documents.Where(row => row.Paragraphs.Count >= 2).Select(row => new { row.DocumentId }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "21cab6f03c6253615e35c20d14d94796eecd86066ebfbcb49eda0db4b87960fe",
        "db_name": "cre_Doc_Template_Mgt",
        "context_name": "CreDocTemplateMgtContext",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Paragraphs.Join(context.Documents, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DocumentId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.DocumentId, group.First().T2.DocumentName }).Take(1).ToList();",
        "generated": "context.Documents.OrderByDescending(row => row.Paragraphs.Count).Select(row => new { row.DocumentId, row.DocumentName }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "5b57a7f5285d6f587cc556ab679c727c5f71a7259ee3ea6f2593d6f047a72a8d",
        "db_name": "cre_Doc_Template_Mgt",
        "context_name": "CreDocTemplateMgtContext",
        "question": "What is the document id with least number of paragraphs?",
        "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "linq": "context.Paragraphs.GroupBy(row => new { row.DocumentId }).OrderBy(group => group.Count()).Select(group => new { group.Key.DocumentId }).Take(1).ToList();",
        "generated": "context.Documents.Join(context.Paragraphs, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DocumentId }).OrderBy(group => group.Count()).Select(group => new { group.Key.DocumentId }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "f063504de3e9d910befc0ff0413e427efebb64a86a17e19a10b20c3a350bb54e",
        "db_name": "cre_Doc_Template_Mgt",
        "context_name": "CreDocTemplateMgtContext",
        "question": "What is the document id with 1 to 2 paragraphs?",
        "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "linq": "context.Paragraphs.GroupBy(row => new { row.DocumentId }).Where(group => group.Count() >= 1 && group.Count() <= 2).Select(group => new { group.Key.DocumentId }).ToList();",
        "generated": "context.Documents.Join(context.Paragraphs, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DocumentName == \"1 to 2 paragraphs\").Select(row => new { row.T1.DocumentId }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 3}, {0: 80}, {0: 3830}, {0: 33930}, {0: 50123}, {0: 651512}, {0: 3540024}, {0: 16514113}, {0: 385906526}]\nLINQ Results: []\n"
    },
    {
        "id": "b9211f06fc8f57d1095dc11e6fc2fd57baf8c48785d7acf737e38ecdee6a8e54",
        "db_name": "cre_Doc_Template_Mgt",
        "context_name": "CreDocTemplateMgtContext",
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "linq": "context.Paragraphs.Where(row => row.ParagraphText == \"Brazil\").Select(row => row.DocumentId).Intersect(context.Paragraphs.Where(row => row.ParagraphText == \"Ireland\").Select(row => row.DocumentId)).ToList();",
        "generated": "context.Documents.Join(context.Paragraphs, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ParagraphText == \"Brazil\" && row.T2.ParagraphText == \"Ireland\").Select(row => new { row.T1.DocumentId }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 16514113}]\nLINQ Results: []\n"
    },
    {
        "id": "fa5e5a28a0401ac3b34e9cc511c8bde050d7ea2a5d711edb7fe8ba635dbbeab4",
        "db_name": "browser_web",
        "context_name": "BrowserWebContext",
        "question": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.",
        "sql": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'",
        "linq": "context.WebClientAccelerators.Select(row => new { row.Name, row.OperatingSystem }).Except(context.WebClientAccelerators.Join(context.AcceleratorCompatibleBrowsers, T1 => T1.Id, T2 => T2.AcceleratorId, (T1, T2) => new { T1, T2 }).Join(context.Browsers, joined => joined.T2.BrowserId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Opera\").Select(row => new { row.T1.Name, row.T1.OperatingSystem })).ToList();",
        "generated": "context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Opera\").Select(row => new { row.T1.Accelerator.Name, row.T1.Accelerator.OperatingSystem }).Except(context.WebClientAccelerators.Select(row => new { row.Name, row.OperatingSystem })).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: CACHEbox, 1: Appliance (Linux)}, {0: Fasterfox, 1: Windows, Mac, Linux and Mobile devices}, {0: Freewire, 1: Windows, except NT and 95}, {0: Google Web Accelerator (discontinued), 1: Windows}, {0: Heigh Speed, 1: Windows}, {0: Netfury, 1: Windows, Mac}, {0: Nitro, 1: Windows, Mac}, {0: ONSPEED, 1: Windows, Mac and Mobile devices}, {0: Opera Turbo, 1: Android, Linux, Mac and Windows devices}, {0: Polipo, 1: Unix (Linux, *BSD, Mac OS X, others), Windows}, {0: Propel, 1: Windows, Mac}, {0: Proxyconn Web Accelerator, 1: Windows, Mac, Mobile devices}, {0: RabbIT, 1: Any system with Java 1.6 VM available}, {0: Squid, 1: Unix (Linux, *BSD, Mac OS X, others), Windows}, {0: Toonel, 1: Windows, Linux, Mac OS, Symbian, WindowsMobile}, {0: WinGate, 1: Windows (2000 onwards)}, {0: Ziproxy, 1: Unix (Linux, *BSD, Mac OS X, others)}]\nLINQ Results: []\n"
    },
    {
        "id": "897d5bee9d8075234b5f3521d458d1571485b7c8a6b4575499ea36ce09fe89d3",
        "db_name": "browser_web",
        "context_name": "BrowserWebContext",
        "question": "Which accelerator name contains substring \"Opera\"?",
        "sql": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "linq": "context.WebClientAccelerators.Where(row => EF.Functions.Like(row.Name, \"%Opera%\")).Select(row => new { row.Name }).ToList();",
        "generated": "context.WebClientAccelerators.Where(row => EF.Functions.Like(row.Name, \"%Opera%\")).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "705325f50b5ff7c531abf7e21d66dd95c855d3ab07327e1a0382a80ea37d864e",
        "db_name": "browser_web",
        "context_name": "BrowserWebContext",
        "question": "Find the number of web accelerators used for each Operating system.",
        "sql": "SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system",
        "linq": "context.WebClientAccelerators.GroupBy(row => new { row.OperatingSystem }).Select(group => new { group.Key.OperatingSystem, Count = group.Count() }).ToList();",
        "generated": "context.WebClientAccelerators.GroupBy(row => new { row.OperatingSystem }).Select(group => new { Count = group.Count(), group.Key.OperatingSystem }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Android, Linux, Mac and Windows devices, 1: 1}, {0: Any, 1: 1}, {0: Any system with Java 1.6 VM available, 1: 1}, {0: Appliance (Linux), 1: 1}, {0: Unix (Linux, *BSD, Mac OS X, others), 1: 1}, {0: Unix (Linux, *BSD, Mac OS X, others), Windows, 1: 2}, {0: Windows, 1: 3}, {0: Windows (2000 onwards), 1: 1}, {0: Windows, Linux, Mac OS, Symbian, WindowsMobile, 1: 1}, {0: Windows, Mac, 1: 3}, {0: Windows, Mac and Mobile devices, 1: 1}, {0: Windows, Mac, Linux and Mobile devices, 1: 1}, {0: Windows, Mac, Mobile devices, 1: 1}, {0: Windows, except NT and 95, 1: 1}]\nLINQ Results: [{0: 1, 1: Android, Linux, Mac and Windows devices}, {0: 1, 1: Any}, {0: 1, 1: Any system with Java 1.6 VM available}, {0: 1, 1: Appliance (Linux)}, {0: 1, 1: Unix (Linux, *BSD, Mac OS X, others)}, {0: 2, 1: Unix (Linux, *BSD, Mac OS X, others), Windows}, {0: 3, 1: Windows}, {0: 1, 1: Windows (2000 onwards)}, {0: 1, 1: Windows, Linux, Mac OS, Symbian, WindowsMobile}, {0: 3, 1: Windows, Mac}, {0: 1, 1: Windows, Mac and Mobile devices}, {0: 1, 1: Windows, Mac, Linux and Mobile devices}, {0: 1, 1: Windows, Mac, Mobile devices}, {0: 1, 1: Windows, except NT and 95}]\n"
    },
    {
        "id": "c80f65d6494fbff755370224daf5b06d7e0d93b31185e59db8aaa41738f43a41",
        "db_name": "browser_web",
        "context_name": "BrowserWebContext",
        "question": "give me names of all compatible browsers and accelerators in the descending order of compatible year",
        "sql": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC",
        "linq": "context.AcceleratorCompatibleBrowsers.Join(context.Browsers, T1 => T1.BrowserId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.WebClientAccelerators, joined => joined.T1.AcceleratorId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T1.CompatibleSinceYear).Select(row => new { T2Name = row.T2.Name, T3Name = row.T3.Name }).ToList();",
        "generated": "context.AcceleratorCompatibleBrowsers.OrderByDescending(row => row.CompatibleSinceYear).Select(row => new { row.Accelerator.Name, row.Browser.Name }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,150): error CS0833: An anonymous type cannot have multiple properties with the same name [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.37"
    },
    {
        "id": "380fd76e690a22be738618d449ba26f2d92934e05a67899dd603a39748e6bbac",
        "db_name": "musical",
        "context_name": "MusicalContext",
        "question": "List the nominees that have been nominated more than two musicals.",
        "sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "linq": "context.Musicals.GroupBy(row => new { row.Nominee }).Where(group => group.Count() > 2).Select(group => new { group.Key.Nominee }).ToList();",
        "generated": "context.Actors.Where(row => row.Result == \"Nominee\").GroupBy(row => new { row.Nominee }).Where(group => group.Count() > 2).Select(group => new { group.Key.Nominee }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,52): error CS1061: 'Actor' does not contain a definition for 'Result' and no accessible extension method 'Result' accepting a first argument of type 'Actor' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.33"
    },
    {
        "id": "4a1416c1172d4e0033b811df7030485a109b059646a1fd505b28cd1a21366224",
        "db_name": "musical",
        "context_name": "MusicalContext",
        "question": "List the name of musicals that do not have actors.",
        "sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "linq": "context.Musicals.Where(row => !context.Actors.Select(row => row.MusicalId).Contains(row.MusicalId)).Select(row => new { row.Name }).ToList();",
        "generated": "context.Musicals.Where(row =>!context.Actors.Select(row => row.MusicalId).Contains(row.MusicalId)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "168e863ad9f6bf4fb0d2646ab7f8332259f5f1f1891449a796a1429173dc3a82",
        "db_name": "musical",
        "context_name": "MusicalContext",
        "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
        "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "linq": "context.Musicals.Where(row => row.Award == \"Tony Award\").Select(row => row.Nominee).Intersect(context.Musicals.Where(row => row.Award == \"Drama Desk Award\").Select(row => row.Nominee)).ToList();",
        "generated": "context.Musicals.Join(context.Actors, T1 => T1.MusicalId, T2 => T2.MusicalId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Award == \"Tony Award\" && row.T1.Result == \"Nominee\" && row.T2.Award == \"Drama Desk Award\" && row.T2.Result == \"Nominee\").Select(row => new { row.T2.Name }).Distinct().ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,246): error CS1061: 'Actor' does not contain a definition for 'Result' and no accessible extension method 'Result' accepting a first argument of type 'Actor' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.34"
    },
    {
        "id": "f30ff547ce13eddbfbe01727d38d494af5178524ad655588f6288c05d4ef1fb5",
        "db_name": "musical",
        "context_name": "MusicalContext",
        "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "linq": "context.Musicals.Where(row => row.Award == \"Tony Award\" || row.Award == \"Cleavant Derricks\").Select(row => new { row.Nominee }).ToList();",
        "generated": "context.Musicals.Where(row => row.Award == \"Bob Fosse\" || row.Award == \"Cleavant Derricks\").Select(row => new { row.Nominee }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Bob Fosse}, {0: Cleavant Derricks}, {0: Bob Fosse}, {0: Bob Fosse}]\nLINQ Results: []\n"
    },
    {
        "id": "9c0f7927c0c17dec2f92868acbe882af177ae2d343a8c9fddc5e8ca8eeed10d4",
        "db_name": "game_injury",
        "context_name": "GameInjuryContext",
        "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
        "sql": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'",
        "linq": "context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Player == \"Walter Samuel\").Select(row => row.T2.Name).Intersect(context.Games.Join(context.Stadia, T1 => T1.StadiumId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T1.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Player == \"Thiago Motta\").Select(row => row.T2.Name)).ToList();",
        "generated": "context.Stadia.Join(context.Games, T1 => T1.Id, T2 => T2.StadiumId, (T1, T2) => new { T1, T2 }).Join(context.InjuryAccidents, joined => joined.T2.Id, T3 => T3.GameId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Player == \"Walter Samuel\" || row.T3.Player == \"Thiago Motta\").Select(row => row.T1.Name).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "ee1a69b0ddf9cdcd13cc7faa72d173bd5dd8bfd7ba92932414650bcc85bd9e05",
        "db_name": "game_injury",
        "context_name": "GameInjuryContext",
        "question": "Which stadium name contains the substring \"Bank\"?",
        "sql": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"",
        "linq": "context.Stadia.Where(row => EF.Functions.Like(row.Name, \"%Bank%\")).Select(row => new { row.Name }).ToList();",
        "generated": "context.Stadia.Where(row => row.Name.Contains(\"Bank\")).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "c1385a0fe0cbfaa8bd1c37af6d55d2933c348be56a2cb8e591270c707e0a11f6",
        "db_name": "game_injury",
        "context_name": "GameInjuryContext",
        "question": "How many games has each stadium held?",
        "sql": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id",
        "linq": "context.Stadia.Join(context.Games, T1 => T1.Id, T2 => T2.StadiumId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).Select(group => new { group.Key.Id, Count = group.Count() }).ToList();",
        "generated": "context.Stadia.GroupBy(row => new { row.Id }).Select(group => new { group.Key.Id, Count = group.Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1, 1: 2}, {0: 2, 1: 2}, {0: 3, 1: 2}, {0: 4, 1: 2}, {0: 5, 1: 2}, {0: 6, 1: 1}, {0: 7, 1: 2}, {0: 8, 1: 1}, {0: 9, 1: 1}, {0: 10, 1: 3}, {0: 11, 1: 1}, {0: 12, 1: 1}]\nLINQ Results: [{0: 1, 1: 1}, {0: 2, 1: 1}, {0: 3, 1: 1}, {0: 4, 1: 1}, {0: 5, 1: 1}, {0: 6, 1: 1}, {0: 7, 1: 1}, {0: 8, 1: 1}, {0: 9, 1: 1}, {0: 10, 1: 1}, {0: 11, 1: 1}, {0: 12, 1: 1}, {0: 13, 1: 1}]\n"
    },
    {
        "id": "244566e0fcb3ee5c95e93fa08e986846befaea28967208d8d0d02f75c15b9485",
        "db_name": "game_injury",
        "context_name": "GameInjuryContext",
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "sql": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "linq": "context.Games.Join(context.InjuryAccidents, T1 => T1.Id, T2 => T2.GameId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Season).Select(row => new { row.T1.Date, row.T2.Player }).ToList();",
        "generated": "context.Games.Join(context.InjuryAccidents, t1 => t1.Id, t2 => t2.GameId, (t1, t2) => new { t1, t2 }).OrderByDescending(row => row.t1.Season).Select(row => new { row.t1.Date, row.t2.Player }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "6414195c001df50650497f9b4e70299334d2b69c753ff8b77856f10d5b142a0f",
        "db_name": "department_management",
        "context_name": "DepartmentManagementContext",
        "question": "What are the distinct ages of the heads who are acting?",
        "sql": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
        "linq": "context.Managements.Join(context.Heads, T2 => T2.HeadId, T1 => T1.HeadId, (T2, T1) => new { T2, T1 }).Where(row => row.T2.TemporaryActing == \"Yes\").Select(row => new { row.T1.Age }).Distinct().ToList();",
        "generated": "context.Heads.Select(row => row.Age).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 53}, {0: 52}, {0: 69}]\nLINQ Results: [{0: 67}, {0: 68}, {0: 69}, {0: 52}, {0: 53}, {0: 50}, {0: 56}, {0: 43}]\n"
    },
    {
        "id": "47d85f2ed732df36fecbe7952953ade60dad3aa2f43b55f3b55e2fcc6f000e05",
        "db_name": "department_management",
        "context_name": "DepartmentManagementContext",
        "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
        "sql": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'",
        "linq": "context.Departments.Join(context.Managements, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Heads, joined => joined.T2.HeadId, T3 => T3.HeadId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Treasury\").Select(row => row.T3.BornState).Intersect(context.Departments.Join(context.Managements, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Heads, joined => joined.T2.HeadId, T3 => T3.HeadId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Homeland Security\").Select(row => row.T3.BornState)).ToList();",
        "generated": "context.Heads.Join(context.Managements, t1 => t1.HeadId, t2 => t2.HeadId, (t1, t2) => new { t1, t2 }).Join(context.Dept, t2 => t2.DepartmentId, t3 => t3.DepartmentId, (t2, t3) => new { t2.t1, t2.t2, t3 }).Where(row => row.t3.Name == \"Treasury\" && row.t2.t1.Name == \"Homeland Security\").Select(row => new { row.t2.t1.BornState }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,150): error CS1061: '<anonymous type: Head t1, Management t2>' does not contain a definition for 'DepartmentId' and no accessible extension method 'DepartmentId' accepting a first argument of type '<anonymous type: Head t1, Management t2>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.28"
    },
    {
        "id": "a759f3cacf2a7c6bdf479d064de18a83834a91816c1a01896c9ea7e376dfaeed",
        "db_name": "department_management",
        "context_name": "DepartmentManagementContext",
        "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
        "sql": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
        "linq": "context.Managements.Join(context.Departments, T2 => T2.DepartmentId, T1 => T1.DepartmentId, (T2, T1) => new { T2, T1 }).GroupBy(row => new { row.T1.DepartmentId }).Select(group => new { group.Key.DepartmentId, group.First().T1.Name, Count = group.Count() }).Where(group => group.Count > 1).ToList();",
        "generated": "context.Heads.Join(context.Managements, T1 => T1.HeadId, T2 => T2.HeadId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DepartmentId }).Where(group => group.Count() > 1).Select(group => new { group.Key.T2.DepartmentId, group.First().T2.Department.Name, group.Count() }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,283): error CS0746: Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access. [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.53"
    },
    {
        "id": "896da07c63c7a450ed85d4b1fa572a59a3a1523d182325466f96431c9fa3effb",
        "db_name": "department_management",
        "context_name": "DepartmentManagementContext",
        "question": "Which head's name has the substring 'Ha'? List the id and name.",
        "sql": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'",
        "linq": "context.Heads.Where(row => EF.Functions.Like(row.Name, \"%Ha%\")).Select(row => new { row.HeadId, row.Name }).ToList();",
        "generated": "context.Heads.Where(row => EF.Functions.Like(row.Name, \"Ha%\")).Select(row => new { row.HeadId, row.Name }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 4, 1: Dudley Hart}, {0: 9, 1: P\u00e1draig Harrington}, {0: 10, 1: Franklin Langham}]\nLINQ Results: []\n"
    },
    {
        "id": "a0fa010fc41639bcd00820a302459e4cf7e9b60e0782a3360db8a6546050f0bd",
        "db_name": "store_product",
        "context_name": "StoreProductContext",
        "question": "Find all the product whose name contains the word \"Scanner\".",
        "sql": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"",
        "linq": "context.Products.Where(row => EF.Functions.Like(row.Product1, \"%Scanner%\")).Select(row => new { row.Product1 }).ToList();",
        "generated": "context.Products.Where(row => row.Product1.Contains(\"Scanner\")).Select(row => new { row.Product1 }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b7e93bcca3e89c47f46b99e84ececd71cb982aceb41a2ae9867bf784d8c4e329",
        "db_name": "store_product",
        "context_name": "StoreProductContext",
        "question": "Find the most prominent max page size among all the products.",
        "sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Products.GroupBy(row => new { row.MaxPageSize }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.MaxPageSize }).Take(1).ToList();",
        "generated": "context.Products.GroupBy(row => 1).Select(group => new { MaxPageSize = group.Select(row => row.MaxPageSize).Distinct().OrderByDescending(pageSize => pageSize).Take(1).ToList() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.InvalidOperationException: Translating this query requires the SQL APPLY operation, which is not supported on SQLite.\n   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessor.ApplyValidatingVisitor.VisitExtension(Expression extensionExpression)\n   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessor.ApplyValidatingVisitor.VisitExtension(Expression extensionExpression)\n   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessor.Process(Expression query)\n   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.GetEnumerator()\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "53a5ae92f4226c67797d42101d462e5cda82309742ac61823f00a61e1c5b691f",
        "db_name": "store_product",
        "context_name": "StoreProductContext",
        "question": "Find the name of the products that are not using the most frequently-used max page size.",
        "sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
        "linq": "context.Products.Where(row => row.Product1 != context.Products.GroupBy(row => new { row.MaxPageSize }).OrderByDescending(group => group.Count()).Select(group => group.Key.MaxPageSize).Take(1).First()).Select(row => new { row.Product1 }).ToList();",
        "generated": "context.Products.GroupBy(row => new { row.MaxPageSize }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.MaxPageSize }).Where(row => row.MaxPageSize!= context.Products.GroupBy(row => new { row.MaxPageSize }).OrderByDescending(group => group.Count()).Select(group => group.Key.MaxPageSize).First()).Select(row => new { row.MaxPageSize }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Fujitsu fi-6130 A4 Series Scanner}, {0: Plustek MobileOffice D28 Corporate}, {0: Xerox Travel Scanner 100}, {0: ScanShell 3000DN}, {0: Canon imageFORMULA P-150}, {0: Canon DR-2080C}]\nLINQ Results: [{0: 216mm x 356mm}, {0: 216mm x 355mm}]\n"
    },
    {
        "id": "941d5114601730dae782925fcc5436d0d9ff8ce3e456af698b4cc4db3d401d61",
        "db_name": "store_product",
        "context_name": "StoreProductContext",
        "question": "Find the total population of the districts where the area is bigger than the average city area.",
        "sql": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)",
        "linq": "context.Districts.Where(row => row.CityArea > context.Districts.Select(row => (double) row.CityArea).Average()).Select(row => row.CityPopulation).Sum();",
        "generated": "context.Districts.Where(row => row.CityArea > context.Districts.Select(row => row.CityArea).Average()).Select(row => row.CityPopulation).Sum();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "c066bc0ffdc9b6cf1e737edd6d616cc4b73a576cf8bd23c1252b5731f2a16607",
        "db_name": "store_product",
        "context_name": "StoreProductContext",
        "question": "Find the names of districts where have both city mall and village store type stores.",
        "sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"",
        "linq": "context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Type == \"City Mall\").Select(row => row.t3.DistrictName).Intersect(context.Stores.Join(context.StoreDistricts, t1 => t1.StoreId, t2 => t2.StoreId, (t1, t2) => new { t1, t2 }).Join(context.Districts, joined => joined.t2.DistrictId, t3 => t3.DistrictId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Type == \"Village Store\").Select(row => row.t3.DistrictName)).ToList();",
        "generated": "context.Districts.Join(context.StoreDistricts, t1 => t1.DistrictId, t2 => t2.DistrictId, (t1, t2) => new { t1, t2 }).Join(context.Stores, joined => joined.t2.StoreId, t3 => t3.StoreId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Type == \"city mall\" || row.t3.Type == \"village\").Select(row => new { row.t1.DistrictName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Khanewal District}]\nLINQ Results: []\n"
    },
    {
        "id": "c31e7fa56385f1600a1b5ff134f813a837e8be82698cd901faf7e90b72542467",
        "db_name": "match_season",
        "context_name": "MatchSeasonContext",
        "question": "Show the most common position of players in match seasons.",
        "sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.MatchSeasons.GroupBy(row => new { row.Position }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Position }).Take(1).ToList();",
        "generated": "context.Players.GroupBy(row => new { row.Position }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Position }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,61): error CS1061: 'Player' does not contain a definition for 'Position' and no accessible extension method 'Position' accepting a first argument of type 'Player' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38"
    },
    {
        "id": "474d8c5dd71d926e6e600fa0c2a3ff9f8456eaf85ca4ef09aaf5ff07adbb1512",
        "db_name": "match_season",
        "context_name": "MatchSeasonContext",
        "question": "Show the top 3 most common colleges of players in match seasons.",
        "sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
        "linq": "context.MatchSeasons.GroupBy(row => new { row.College }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.College }).Take(3).ToList();",
        "generated": "context.Players.GroupBy(row => new { row.College }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.College }).Take(3).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,61): error CS1061: 'Player' does not contain a definition for 'College' and no accessible extension method 'College' accepting a first argument of type 'Player' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38"
    },
    {
        "id": "14474358f42bda0bca715708210f5f7878c9df9f8ea41ae7cf51663b628f7400",
        "db_name": "match_season",
        "context_name": "MatchSeasonContext",
        "question": "Show the name of colleges that have at least two players.",
        "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2",
        "linq": "context.MatchSeasons.GroupBy(row => new { row.College }).Where(group => group.Count() >= 2).Select(group => new { group.Key.College }).ToList();",
        "generated": "context.MatchSeasons.GroupBy(row => new { row.College }).Where(group => group.Count() >= 2).Select(group => new { group.Key.College }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "65c841fea841b514e667905599c89db28e0e2ab959d9010c9905e3823d3cd588",
        "db_name": "match_season",
        "context_name": "MatchSeasonContext",
        "question": "What are the names of teams that do no have match season record?",
        "sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "linq": "context.Teams.Where(row => !context.MatchSeasons.Select(row => row.Team).Contains(row.TeamId)).Select(row => new { row.Name }).ToList();",
        "generated": "context.Teams.Where(row =>!context.MatchSeasons.Select(row => row.Team).Contains(row.TeamId)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "38ba4b805e75f9551802fcd21050ff436fa5931deac4bff306cbae1549516c0f",
        "db_name": "match_season",
        "context_name": "MatchSeasonContext",
        "question": "What are the names of countries that have both players with position forward and players with position defender?",
        "sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "linq": "context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Position == \"Forward\").Select(row => row.T1.CountryName).Intersect(context.Countries.Join(context.MatchSeasons, T1 => T1.CountryId, T2 => T2.Country, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Position == \"Defender\").Select(row => row.T1.CountryName)).ToList();",
        "generated": "context.Countries.Join(context.Players, t1 => t1.CountryId, t2 => t2.Team, (t1, t2) => new { t1, t2 }).Join(context.MatchSeasons, joined => joined.t2.PlayerId, t3 => t3.PlayerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Position == \"Forward\").Select(row => new { row.t1.CountryName }).Distinct().Union(context.Countries.Join(context.Players, t1 => t1.CountryId, t2 => t2.Team, (t1, t2) => new { t1, t2 }).Join(context.MatchSeasons, joined => joined.t2.PlayerId, t3 => t3.PlayerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Position == \"Defender\").Select(row => new { row.t1.CountryName })).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,520): error CS1061: 'MatchSeason' does not contain a definition for 'PlayerId' and no accessible extension method 'PlayerId' accepting a first argument of type 'MatchSeason' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.36"
    },
    {
        "id": "66bca96db63dff308609056be43e8f5fbd4ce05ec23cd427e0a37ae8c330b517",
        "db_name": "match_season",
        "context_name": "MatchSeasonContext",
        "question": "Which college have both players with position midfielder and players with position defender?",
        "sql": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"",
        "linq": "context.MatchSeasons.Where(row => row.Position == \"Midfielder\").Select(row => row.College).Intersect(context.MatchSeasons.Where(row => row.Position == \"Defender\").Select(row => row.College)).ToList();",
        "generated": "context.MatchSeasons.Where(row => row.Position == \"midfielder\" || row.Position == \"defender\").Select(row => new { row.College }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Maryland}]\nLINQ Results: []\n"
    },
    {
        "id": "a185644f50455a54924ab039906c8bdce276d7ac229062dabb5e79dcd93b299c",
        "db_name": "insurance_policies",
        "context_name": "InsurancePoliciesContext",
        "question": "How many settlements are there in total?",
        "sql": "SELECT count(*) FROM Settlements",
        "linq": "context.Settlements.Count();",
        "generated": "context.Settlements.Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "99151fefea0177e380b04a97176a761fc11d42a33f4f441d8a4379eccacb3680",
        "db_name": "insurance_policies",
        "context_name": "InsurancePoliciesContext",
        "question": "List the details of the customers who do not have any policies.",
        "sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id",
        "linq": "context.Customers.Select(row => row.CustomerDetails).Except(context.Customers.Join(context.CustomerPolicies, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.CustomerDetails)).ToList();",
        "generated": "context.Customers.Where(row =>!context.CustomerPolicies.Select(row => row.CustomerId).Contains(row.CustomerId)).Select(row => new { row.CustomerDetails }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "099e4f329f3158d9e29103c45de29c26a9a668336ba893ef9e92962b5f62e7f2",
        "db_name": "insurance_policies",
        "context_name": "InsurancePoliciesContext",
        "question": "Find the total claimed amount of all the claims.",
        "sql": "SELECT sum(Amount_Claimed) FROM Claims",
        "linq": "context.Claims.Select(row => row.AmountClaimed).Sum();",
        "generated": "context.Claims.Sum(row => (int?)row.AmountClaimed?? 0);",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "ca444523f7bfd4d2e07f5defbdecf01f43531f699378ac252dade9a4fc585180",
        "db_name": "tracking_share_transactions",
        "context_name": "TrackingShareTransactionsContext",
        "question": "Show the description of the transaction type that occurs most frequently.",
        "sql": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "linq": "context.RefTransactionTypes.Join(context.Transactions, T1 => T1.TransactionTypeCode, T2 => T2.TransactionTypeCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TransactionTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.TransactionTypeDescription }).Take(1).ToList();",
        "generated": "context.RefTransactionTypes.GroupBy(row => new { row.TransactionTypeDescription }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.TransactionTypeDescription }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Purchase}]\nLINQ Results: [{0: Sale}]\n"
    },
    {
        "id": "3c31c347d3b990dd6053e050cf5a07ba47c6e0df094dce0edfe8b3ab8620b110",
        "db_name": "tracking_share_transactions",
        "context_name": "TrackingShareTransactionsContext",
        "question": "Show the id and details of the investor that has the largest number of transactions.",
        "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1",
        "linq": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.InvestorId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.InvestorId, group.First().T1.InvestorDetails }).Take(1).ToList();",
        "generated": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.InvestorId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.InvestorId, group.First().T1.InvestorDetails }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "2aabe9c37f838c117ca7de98408902639d6a26b9dfe366a36624e47fb43c8277",
        "db_name": "tracking_share_transactions",
        "context_name": "TrackingShareTransactionsContext",
        "question": "Show the id and details for the investors who have the top 3 number of transactions.",
        "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
        "linq": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.InvestorId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.InvestorId, group.First().T1.InvestorDetails }).Take(3).ToList();",
        "generated": "context.Investors.OrderByDescending(row => row.Transactions.Count()).Select(row => new { row.InvestorId, row.InvestorDetails }).Take(3).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 3, 1: d}, {0: 19, 1: l}, {0: 18, 1: w}]\nLINQ Results: [{0: 3, 1: d}, {0: 2, 1: z}, {0: 18, 1: w}]\n"
    },
    {
        "id": "d90aab2c296abd5f5d4c44de6dda887c8f829abd5880b3b04c45fa4a1aa4afec",
        "db_name": "tracking_share_transactions",
        "context_name": "TrackingShareTransactionsContext",
        "question": "Show the ids of the investors who have at least two transactions.",
        "sql": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2",
        "linq": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.InvestorId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.InvestorId }).ToList();",
        "generated": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).GroupBy(row => row.T1.InvestorId).Where(group => group.Count() >= 2).Select(group => group.Key).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "2a7ed54ba5bc4b464bba0b8051e724b2f0c95a7c07aa5f4179c918f214632cbc",
        "db_name": "tracking_share_transactions",
        "context_name": "TrackingShareTransactionsContext",
        "question": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".",
        "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2",
        "linq": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TransactionTypeCode == \"SALE\").GroupBy(row => new { row.T2.InvestorId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.InvestorId, group.First().T1.InvestorDetails }).ToList();",
        "generated": "context.Investors.Join(context.Transactions, T1 => T1.InvestorId, T2 => T2.InvestorId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.TransactionTypeCode == \"SALE\").GroupBy(row => new { row.T1.InvestorId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.InvestorId, group.First().T1.InvestorDetails }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "dfe31293d1d1c0e8b1a57cb1299d599b775bb200863f069ddb13fe235de4c7a2",
        "db_name": "tracking_share_transactions",
        "context_name": "TrackingShareTransactionsContext",
        "question": "What are the details of all sales and purchases?",
        "sql": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases",
        "linq": "context.Sales.Select(row => row.SalesDetails).Union(context.Purchases.Select(row => row.PurchaseDetails)).ToList();",
        "generated": "context.Purchases.Join(context.Transactions, T1 => T1.PurchaseTransactionId, T2 => T2.TransactionId, (T1, T2) => new { T1, T2 }).Join(context.Sales, joined => joined.T2.TransactionId, T3 => T3.SalesTransactionId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.SalesDetails, row.T1.PurchaseDetails }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: a}, {0: c}, {0: e}, {0: f}, {0: h}, {0: i}, {0: l}, {0: n}, {0: o}, {0: p}, {0: r}, {0: s}, {0: t}, {0: x}, {0: y}, {0: z}]\nLINQ Results: [{0: x, 1: c}, {0: o, 1: y}, {0: a, 1: i}, {0: f, 1: x}, {0: y, 1: y}, {0: x, 1: a}, {0: p, 1: r}, {0: e, 1: a}, {0: p, 1: r}, {0: s, 1: l}, {0: s, 1: z}, {0: t, 1: h}, {0: p, 1: t}, {0: n, 1: o}, {0: e, 1: x}]\n"
    },
    {
        "id": "f5f21c0b839c090ff609fedb65429274cba9bc8b48c71def6ec506bac4aaf322",
        "db_name": "tracking_share_transactions",
        "context_name": "TrackingShareTransactionsContext",
        "question": "What are the details of the lots which are not used in any transactions?",
        "sql": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id",
        "linq": "context.Lots.Select(row => row.LotDetails).Except(context.Lots.Join(context.TransactionsLots, T1 => T1.LotId, T2 => T2.LotId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.LotDetails)).ToList();",
        "generated": "context.Lots.Where(row =>!context.TransactionsLots.Select(row => row.LotId).Contains(row.LotId)).Select(row => new { row.LotDetails }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: m}, {0: q}]\nLINQ Results: [{0: z}, {0: q}, {0: d}, {0: m}, {0: m}, {0: z}]\n"
    },
    {
        "id": "8d825ef9c617b48c1adfffa01cf2a4dbb9d7f201b9a38e67d146293dd05523ca",
        "db_name": "behavior_monitoring",
        "context_name": "BehaviorMonitoringContext",
        "question": "What are the monthly rentals of student addresses in Texas state?",
        "sql": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\"",
        "linq": "context.Addresses.Join(context.StudentAddresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StateProvinceCounty == \"Texas\").Select(row => new { row.T2.MonthlyRental }).ToList();",
        "generated": "context.Students.Select(row => row.Address.StateProvinceCounty).Distinct().Select(state => context.Students.Join(context.Addresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DateAddressTo > new DateTime(2013, 1, 1) && row.T1.DateAddressTo < new DateTime(2014, 1, 1) && row.T2.StateProvinceCounty == state).Select(row => row.T2.MonthlyRental).Sum()).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,291): error CS1061: 'Student' does not contain a definition for 'DateAddressTo' and no accessible extension method 'DateAddressTo' accepting a first argument of type 'Student' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.34"
    },
    {
        "id": "9957e5cf78945de4abaa4a90a6c120df9258517dbe7e29d64bf4c776548f571d",
        "db_name": "behavior_monitoring",
        "context_name": "BehaviorMonitoringContext",
        "question": "What are the first names and last names of students with address in Wisconsin state?",
        "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Wisconsin\"",
        "linq": "context.Addresses.Join(context.Students, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.StateProvinceCounty == \"Wisconsin\").Select(row => new { row.T2.FirstName, row.T2.LastName }).ToList();",
        "generated": "context.Students.Join(context.Addresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.StateProvinceCounty == \"Wisconsin\").Select(row => new { row.T1.FirstName, row.T1.LastName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "9901b0da2cf330515aac3a3502e02369bb15b14a512e5edfd70c6d9b96a6357b",
        "db_name": "behavior_monitoring",
        "context_name": "BehaviorMonitoringContext",
        "question": "What are the line 1 and average monthly rentals of all student addresses?",
        "sql": "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id",
        "linq": "context.Addresses.Join(context.StudentAddresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.AddressId }).Select(group => new { group.First().T1.Line1, AverageMonthlyRental = group.Select(row => (double) row.T2.MonthlyRental).Average() }).ToList();",
        "generated": "context.StudentAddresses.Select(row => new { row.Line1, row.MonthlyRental }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,69): error CS1061: 'StudentAddress' does not contain a definition for 'Line1' and no accessible extension method 'Line1' accepting a first argument of type 'StudentAddress' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38"
    },
    {
        "id": "6abd25ae44cbb08f0a6b877d1a5e35a8e9da6c58dc92ba80f16776f5ae89edb8",
        "db_name": "behavior_monitoring",
        "context_name": "BehaviorMonitoringContext",
        "question": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?",
        "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"",
        "linq": "context.Addresses.Join(context.Teachers, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.FirstName == \"Lyla\").Select(row => new { row.T1.ZipPostcode }).ToList();",
        "generated": "context.Teachers.Join(context.Addresses, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FirstName == \"Lyla\").Select(row => new { row.T2.ZipPostcode }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "9926d504d3b9cb5b2cf47e77a7c492b35204da36fb7641324f9f6213fe514cf4",
        "db_name": "behavior_monitoring",
        "context_name": "BehaviorMonitoringContext",
        "question": "What are the email addresses of teachers whose address has zip code \"918\"?",
        "sql": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\"",
        "linq": "context.Addresses.Join(context.Teachers, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.ZipPostcode == \"918\").Select(row => new { row.T2.EmailAddress }).ToList();",
        "generated": "context.Addresses.Join(context.Teachers, t1 => t1.AddressId, t2 => t2.AddressId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.ZipPostcode == \"918\").Select(row => new { row.t2.EmailAddress }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "33f1bf30ed5bebf32b87b35fad8f260944467c74235d687fc28e2bbed5dd806c",
        "db_name": "behavior_monitoring",
        "context_name": "BehaviorMonitoringContext",
        "question": "How many students are not involved in any behavior incident?",
        "sql": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )",
        "linq": "context.Students.Where(row => !context.BehaviorIncidents.Select(row => row.StudentId).Contains(row.StudentId)).Count();",
        "generated": "context.Students.Where(row =>!context.BehaviorIncidents.Select(row => row.StudentId).Contains(row.StudentId)).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "8a6c0695398e947fb1175667ff3542227814d761a90ee16343c5d722d78b8949",
        "db_name": "behavior_monitoring",
        "context_name": "BehaviorMonitoringContext",
        "question": "Find the last names of teachers who are not involved in any detention.",
        "sql": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id",
        "linq": "context.Teachers.Select(row => row.LastName).Except(context.Teachers.Join(context.Detentions, T1 => T1.TeacherId, T2 => T2.TeacherId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.LastName)).ToList();",
        "generated": "context.Teachers.Where(row =>!context.Detentions.Select(row => row.TeacherId).Contains(row.TeacherId)).Select(row => new { row.LastName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Brakus}, {0: Goldner}, {0: Kuhic}, {0: Medhurst}, {0: Price}]\nLINQ Results: [{0: Medhurst}, {0: Brakus}, {0: Kuhic}, {0: Kuhic}, {0: Goldner}, {0: Price}]\n"
    },
    {
        "id": "66b6be49364c3cb237db82daf56d276a3cc08c762560ba6537a4a3ff6114c53f",
        "db_name": "inn_1",
        "context_name": "Inn1Context",
        "question": "Find the name and id of the top 3 expensive rooms.",
        "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
        "linq": "context.Rooms.OrderByDescending(row => row.BasePrice).Select(row => new { row.RoomId, row.RoomName }).Take(3).ToList();",
        "generated": "context.Rooms.OrderByDescending(row => row.BasePrice).Select(row => new { row.RoomName, row.RoomId }).Take(3).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: FNA, 1: Frugal not apropos}, {0: AOB, 1: Abscond or bolster}, {0: CAS, 1: Convoke and sanguine}]\nLINQ Results: [{0: Frugal not apropos, 1: FNA}, {0: Abscond or bolster, 1: AOB}, {0: Convoke and sanguine, 1: CAS}]\n"
    },
    {
        "id": "cb92cf1d6a59be43961762b3fcfcb36fd55ac51610dfef4e62d218f187797153",
        "db_name": "inn_1",
        "context_name": "Inn1Context",
        "question": "Find the name of rooms whose price is higher than the average price.",
        "sql": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );",
        "linq": "context.Rooms.Where(row => row.BasePrice > context.Rooms.Select(row => row.BasePrice).Average()).Select(row => new { row.RoomName }).ToList();",
        "generated": "context.Rooms.Where(row => row.BasePrice > context.Rooms.Select(row => row.BasePrice).Average()).Select(row => new { row.RoomName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "1c40f69f5bba617de8e1cda21a012995adbd18bf22cf01f7f55f74b27a03b6b5",
        "db_name": "inn_1",
        "context_name": "Inn1Context",
        "question": "Find the number of rooms that do not have any reservation.",
        "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
        "linq": "context.Rooms.Where(row => !context.Reservations.Select(row => row.Room).Distinct().Contains(row.RoomId)).Count();",
        "generated": "context.Rooms.Where(row =>!context.Reservations.Select(row => row.Room).Contains(row.RoomId)).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "f3b6d05df10c01e8d7a3d06ed898e880dee341fe7e7774173086037449213791",
        "db_name": "inn_1",
        "context_name": "Inn1Context",
        "question": "Return the name and number of reservations made for each of the rooms.",
        "sql": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room",
        "linq": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Room }).Select(group => new { group.First().T2.RoomName, Count = group.Count(), group.Key.Room }).ToList();",
        "generated": "context.Rooms.Join(context.Reservations, T1 => T1.RoomId, T2 => T2.Room, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.RoomId }).Select(group => new { group.Key.RoomId, Count = group.Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Parameter 'index')\n   at System.Linq.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument)\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 239\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\n"
    },
    {
        "id": "9634b5bc852ec567ed3ce0b42d774c4325b1b8ddc380baa237e60663f3068522",
        "db_name": "inn_1",
        "context_name": "Inn1Context",
        "question": "Find the names of rooms that have been reserved for more than 60 times.",
        "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60",
        "linq": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Room }).Where(group => group.Count() > 60).Select(group => new { group.First().T2.RoomName }).ToList();",
        "generated": "context.Rooms.Join(context.Reservations, T1 => T1.RoomId, T2 => T2.Room, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.RoomId }).Select(group => new { group.First().T1.RoomName }).Where(group => group.RoomName!= null).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Convoke and sanguine}, {0: Frugal not apropos}, {0: Immutable before decorum}, {0: Recluse and defiance}]\nLINQ Results: [{0: Abscond or bolster}, {0: Convoke and sanguine}, {0: Frugal not apropos}, {0: Harbinger but bequest}, {0: Immutable before decorum}, {0: Interim but salutary}, {0: Mendicant with cryptic}, {0: Recluse and defiance}, {0: Riddle to exculpate}, {0: Thrift and accolade}]\n"
    },
    {
        "id": "38000ce710cf11e98ea60a72ba8d9f6ed975899e6fc23fdfdf7db4410de84047",
        "db_name": "inn_1",
        "context_name": "Inn1Context",
        "question": "Find the name of rooms whose base price is between 120 and 150.",
        "sql": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150",
        "linq": "context.Rooms.Where(row => row.BasePrice >= 120 && row.BasePrice <= 150).Select(row => new { row.RoomName }).ToList();",
        "generated": "context.Rooms.Where(row => row.BasePrice >= 120 && row.BasePrice <= 150).Select(row => row.RoomName).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "bfb3d9adabe13ffe4009e16d2482f5b3dc4fa34ae92f3d54c5e98572b75733f1",
        "db_name": "inn_1",
        "context_name": "Inn1Context",
        "question": "Find the name of rooms booked by some customers whose first name contains ROY.",
        "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'",
        "linq": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.FirstName, \"%ROY%\")).Select(row => new { row.T2.RoomName }).ToList();",
        "generated": "context.Reservations.Join(context.Rooms, T1 => T1.Room, T2 => T2.RoomId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.FirstName, \"%ROY%\")).Select(row => new { row.T2.RoomName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "a8f55bfb996620d1131524d1f30eb703f4f3c0901636aea38f49bc5723bac549",
        "db_name": "ship_mission",
        "context_name": "ShipMissionContext",
        "question": "Show the distinct fate of missions that involve ships with nationality \"United States\"",
        "sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"",
        "linq": "context.Missions.Join(context.Ships, T1 => T1.ShipId, T2 => T2.ShipId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Nationality == \"United States\").Select(row => new { row.T1.Fate }).Distinct().ToList();",
        "generated": "context.Missions.Join(context.Ships, T1 => T1.ShipId, T2 => T2.ShipId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Nationality == \"United States\").Select(row => row.T1.Fate).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b5982a9d28fe0446c66b6e74473a29fdd85910bada08caec156fe2109167a76b",
        "db_name": "ship_mission",
        "context_name": "ShipMissionContext",
        "question": "List the name of ships that are not involved in any mission",
        "sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)",
        "linq": "context.Ships.Where(row => !context.Missions.Select(row => row.ShipId).Contains(row.ShipId)).Select(row => new { row.Name }).ToList();",
        "generated": "context.Ships.Where(row =>!context.Missions.Select(row => row.ShipId).Contains(row.ShipId)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "a15b6a4bc8bba992d77032a68f46aa5c0d92efd4c8deebcf99b4b2f8673a304d",
        "db_name": "ship_mission",
        "context_name": "ShipMissionContext",
        "question": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.",
        "sql": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000",
        "linq": "context.Ships.Where(row => row.Tonnage > 6000).Select(row => row.Type).Intersect(context.Ships.Where(row => row.Tonnage < 4000).Select(row => row.Type)).ToList();",
        "generated": "context.Ships.GroupBy(row => new { row.Type }).Where(group => group.Select(row => row.Tonnage).Any(row => row > 6000) && group.Select(row => row.Tonnage).Any(row => row < 4000)).Select(group => new { group.Key.Type }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "ad0adbec7f13bf4433ca87cf1f9bc717780ff119818b5608c6f98a1c407c61e6",
        "db_name": "school_player",
        "context_name": "SchoolPlayerContext",
        "question": "List the locations of schools that do not have any player.",
        "sql": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)",
        "linq": "context.Schools.Where(row => !context.Players.Select(row => row.SchoolId).Contains(row.SchoolId)).Select(row => new { row.Location }).ToList();",
        "generated": "context.Schools.Where(row =>!context.Players.Select(row => row.SchoolId).Contains(row.SchoolId)).Select(row => new { row.Location }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b481afba47ddcb51f8b8a2d9a35ad07f6dcc097f88ca8e64059450c1046e5b51",
        "db_name": "school_player",
        "context_name": "SchoolPlayerContext",
        "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "linq": "context.Schools.Where(row => row.Founded < 1890).Select(row => row.Denomination).Intersect(context.Schools.Where(row => row.Founded > 1900).Select(row => row.Denomination)).ToList();",
        "generated": "context.Schools.Where(row => row.Founded < 1890 || row.Founded > 1900).Select(row => new { row.Denomination }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Catholic}]\nLINQ Results: [{0: Catholic}, {0: Anglican}, {0: Uniting Church}]\n"
    },
    {
        "id": "f64f23f04d323e72bce61a71a36b572566abafbc2ed9db0241d5e69ae8eb6454",
        "db_name": "school_player",
        "context_name": "SchoolPlayerContext",
        "question": "Show the nicknames of schools that are not in division 1.",
        "sql": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
        "linq": "context.SchoolDetails.Where(row => row.Division != \"Division 1\").Select(row => new { row.Nickname }).ToList();",
        "generated": "context.Schools.Join(context.SchoolDetails, T1 => T1.SchoolId, T2 => T2.SchoolId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Division!= \"1\").Select(row => new { row.T2.Nickname }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Auks}, {0: Raiders}, {0: Seahawks}, {0: Silver Eagles}]\nLINQ Results: [{0: Tigers}, {0: Auks}, {0: Buccaneers}, {0: Raiders}, {0: Seahawks}, {0: Silver Eagles}]\n"
    },
    {
        "id": "247ac3a49e5b88e5760a091f48617e863226bcc03b723f3ec2e23e1c0c3babc8",
        "db_name": "school_player",
        "context_name": "SchoolPlayerContext",
        "question": "Show the denomination shared by more than one school.",
        "sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1",
        "linq": "context.Schools.GroupBy(row => new { row.Denomination }).Where(group => group.Count() > 1).Select(group => new { group.Key.Denomination }).ToList();",
        "generated": "context.Schools.GroupBy(row => new { row.Denomination }).Where(group => group.Count() > 1).Select(group => new { group.Key.Denomination }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "7cc845a1129ded855adc0ce90f115e06f68fb1a962dc00ab255b3f0b6d2ea45d",
        "db_name": "network_1",
        "context_name": "Network1Context",
        "question": "Which grade has the most high schoolers?",
        "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Highschoolers.GroupBy(row => new { row.Grade }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Grade }).Take(1).ToList();",
        "generated": "context.Highschoolers.GroupBy(row => new { row.Grade }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Grade }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "4486127b06e9a6aa6818f44e529c37ef64b0bb46ca070a34040c8e9ab384551e",
        "db_name": "network_1",
        "context_name": "Network1Context",
        "question": "Show me all grades that have at least 4 students.",
        "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "linq": "context.Highschoolers.GroupBy(row => new { row.Grade }).Where(group => group.Count() >= 4).Select(group => new { group.Key.Grade }).ToList();",
        "generated": "context.Highschoolers.GroupBy(row => new { row.Grade }).Where(group => group.Count() >= 4).Select(group => new { group.Key.Grade }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "e47d5ed090cf3f87acd6f99915196097fdbd9888b9137d3ac5c21348ec36f949",
        "db_name": "world_1",
        "context_name": "World1Context",
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "linq": "context.Cities.Where(row => row.Population > context.Cities.Select(row => row.Population).Average()).GroupBy(row => new { row.District }).Select(group => new { Count = group.Count(), group.Key.District }).ToList();",
        "generated": "context.Cities.GroupBy(row => new { row.District }).Select(group => new { group.Key.District, Count = group.Count(row => row.Population > context.Cities.Select(row => row.Population).Average()) }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1, 1: Abidjan}, {0: 1, 1: Abu Dhabi}, {0: 1, 1: Adana}, {0: 1, 1: Addis Abeba}, {0: 1, 1: Aden}, {0: 1, 1: Aguascalientes}, {0: 1, 1: Ahal}, {0: 2, 1: Aichi}, {0: 1, 1: Alagoas}, {0: 2, 1: Alberta}, {0: 1, 1: Aleksandria}, {0: 1, 1: Aleppo}, {0: 1, 1: Alger}, {0: 1, 1: Almaty Qalasy}, {0: 1, 1: Altai}, {0: 1, 1: Amazonas}, {0: 1, 1: Amman}, {0: 1, 1: Anambra & Enugu & Eb}, {0: 2, 1: Andalusia}, {0: 5, 1: Andhra Pradesh}, {0: 5, 1: Anhui}, {0: 1, 1: Ankara}, {0: 1, 1: Antalya}, {0: 1, 1: Antananarivo}, {0: 1, 1: Antioquia}, {0: 1, 1: Antwerpen}, {0: 1, 1: Aragonia}, {0: 1, 1: Aragua}, {0: 1, 1: Arequipa}, {0: 3, 1: Arizona}, {0: 1, 1: Arkangeli}, {0: 1, 1: Ashanti}, {0: 1, 1: Assam}, {0: 1, 1: Astrahan}, {0: 1, 1: Asunci\u00f3n}, {0: 1, 1: Atlantique}, {0: 1, 1: Atl\u00e1ntico}, {0: 1, 1: Attika}, {0: 1, 1: Auckland}, {0: 1, 1: Baden-W\u00fcrttemberg}, {0: 1, 1: Baghdad}, {0: 2, 1: Bahia}, {0: 2, 1: Baijeri}, {0: 3, 1: Baja California}, {0: 1, 1: Baki}, {0: 1, 1: Bali}, {0: 1, 1: Baluchistan}, {0: 1, 1: Bamako}, {0: 1, 1: Banaadir}, {0: 1, 1: Bangkok}, {0: 1, 1: Bangui}, {0: 1, 1: Baskimaa}, {0: 1, 1: Basra}, {0: 1, 1: Ba\u0161kortostan}, {0: 1, 1: Beirut}, {0: 1, 1: Bengasi}, {0: 1, 1: Berliini}, {0: 1, 1: Bihar}, {0: 1, 1: Bishkek shaary}, {0: 1, 1: Blantyre}, {0: 2, 1: Bol\u00edvar}, {0: 1, 1: Bratislava}, {0: 1, 1: Brazzaville}, {0: 1, 1: Bremen}, {0: 1, 1: British Colombia}, {0: 1, 1: Brjansk}, {0: 1, 1: Budapest}, {0: 12, 1: Buenos Aires}, {0: 1, 1: Bukarest}, {0: 1, 1: Bulawayo}, {0: 1, 1: Burjatia}, {0: 1, 1: Bursa}, {0: 8, 1: California}, {0: 1, 1: Callao}, {0: 1, 1: Campania}, {0: 1, 1: Canary Islands}, {0: 2, 1: Cap-Vert}, {0: 1, 1: Carabobo}, {0: 1, 1: Casablanca}, {0: 1, 1: Cear\u00e1}, {0: 2, 1: Central}, {0: 2, 1: Central Java}, {0: 1, 1: Central Macedonia}, {0: 1, 1: Central Serbia}, {0: 1, 1: Central Visayas}, {0: 1, 1: Centre}, {0: 1, 1: Chandigarh}, {0: 1, 1: Chari-Baguirmi}, {0: 2, 1: Chhatisgarh}, {0: 1, 1: Chiapas}, {0: 4, 1: Chiba}, {0: 2, 1: Chihuahua}, {0: 1, 1: Chisinau}, {0: 1, 1: Chittagong}, {0: 1, 1: Chollabuk}, {0: 1, 1: Chongqing}, {0: 1, 1: Chungchongbuk}, {0: 2, 1: Coahuila de Zaragoza}, {0: 1, 1: Coast}, {0: 1, 1: Cochabamba}, {0: 2, 1: Colorado}, {0: 1, 1: Conakry}, {0: 1, 1: Constantine}, {0: 1, 1: Cort\u00e9s}, {0: 1, 1: C\u00f3rdoba}, {0: 1, 1: Damascus}, {0: 1, 1: Dar es Salaam}, {0: 1, 1: Delhi}, {0: 1, 1: Dhaka}, {0: 1, 1: District of Columbia}, {0: 1, 1: Distrito Central}, {0: 4, 1: Distrito Federal}, {0: 1, 1: Distrito Nacional}, {0: 1, 1: Diyarbakir}, {0: 1, 1: Djibouti}, {0: 2, 1: Dnipropetrovsk}, {0: 1, 1: Doha}, {0: 1, 1: Dolnoslaskie}, {0: 3, 1: Donetsk}, {0: 1, 1: Dubai}, {0: 1, 1: Durango}, {0: 1, 1: East Azerbaidzan}, {0: 2, 1: East Java}, {0: 1, 1: East Kasai}, {0: 1, 1: Eastern Cape}, {0: 1, 1: Ehime}, {0: 1, 1: Emilia-Romagna}, {0: 7, 1: England}, {0: 1, 1: Esfahan}, {0: 1, 1: Eskisehir}, {0: 1, 1: Estuaire}, {0: 1, 1: Fars}, {0: 1, 1: Federaatio}, {0: 2, 1: Florida}, {0: 2, 1: Fujian}, {0: 2, 1: Fukuoka}, {0: 1, 1: Fukushima}, {0: 1, 1: F\u00e8s-Boulemane}, {0: 1, 1: Gansu}, {0: 7, 1: Gauteng}, {0: 1, 1: Gaza}, {0: 1, 1: Gaziantep}, {0: 1, 1: Georgia}, {0: 1, 1: Gifu}, {0: 1, 1: Gilan}, {0: 1, 1: Giza}, {0: 1, 1: Goi\u00e1s}, {0: 1, 1: Gomel}, {0: 1, 1: Grad Sofija}, {0: 1, 1: Grad Zagreb}, {0: 1, 1: Greater Accra}, {0: 3, 1: Guanajuato}, {0: 4, 1: Guangdong}, {0: 3, 1: Guangxi}, {0: 1, 1: Guatemala}, {0: 1, 1: Guayas}, {0: 1, 1: Guerrero}, {0: 2, 1: Guizhou}, {0: 5, 1: Gujarat}, {0: 1, 1: Habarovsk}, {0: 1, 1: Hainan}, {0: 1, 1: Haiphong}, {0: 1, 1: Hamadan}, {0: 1, 1: Hamburg}, {0: 1, 1: Hamgyong N}, {0: 1, 1: Hamgyong P}, {0: 1, 1: Hanoi}, {0: 1, 1: Harare}, {0: 1, 1: Harjumaa}, {0: 1, 1: Harkova}, {0: 1, 1: Haryana}, {0: 1, 1: Haute-Za\u00efre}, {0: 1, 1: Hawaii}, {0: 6, 1: Hebei}, {0: 9, 1: Heilongjiang}, {0: 7, 1: Henan}, {0: 1, 1: Herson}, {0: 1, 1: Hessen}, {0: 1, 1: Hims}, {0: 2, 1: Hiroshima}, {0: 1, 1: Hlavn\u00ed mesto Praha}, {0: 1, 1: Ho Chi Minh City}, {0: 2, 1: Hokkaido}, {0: 1, 1: Hongkong}, {0: 1, 1: Horad Minsk}, {0: 1, 1: Hsinchu}, {0: 4, 1: Hubei}, {0: 4, 1: Hunan}, {0: 4, 1: Hyogo}, {0: 1, 1: Illinois}, {0: 1, 1: Inchon}, {0: 1, 1: Indiana}, {0: 3, 1: Inner Mongolia}, {0: 1, 1: Irbil}, {0: 1, 1: Irkutsk}, {0: 1, 1: Ishikawa}, {0: 1, 1: Islamabad}, {0: 1, 1: Istanbul}, {0: 1, 1: Ivanovo}, {0: 1, 1: Izmir}, {0: 1, 1: I\u00e7el}, {0: 1, 1: Jakarta Raya}, {0: 3, 1: Jalisco}, {0: 1, 1: Jambi}, {0: 1, 1: Jammu and Kashmir}, {0: 1, 1: Jaroslavl}, {0: 1, 1: Jerusalem}, {0: 2, 1: Jharkhand}, {0: 7, 1: Jiangsu}, {0: 2, 1: Jiangxi}, {0: 4, 1: Jilin}, {0: 1, 1: Jizn\u00ed Morava}, {0: 1, 1: Kabol}, {0: 1, 1: Kadiogo}, {0: 1, 1: Kaduna}, {0: 1, 1: Kagoshima}, {0: 1, 1: Kairo}, {0: 1, 1: Kalimantan Barat}, {0: 1, 1: Kalimantan Selatan}, {0: 1, 1: Kalimantan Timur}, {0: 1, 1: Kaliningrad}, {0: 5, 1: Kanagawa}, {0: 1, 1: Kano & Jigawa}, {0: 1, 1: Kaohsiung}, {0: 3, 1: Karnataka}, {0: 1, 1: Karotegin}, {0: 1, 1: Katalonia}, {0: 1, 1: Kaunas}, {0: 1, 1: Kayseri}, {0: 1, 1: Keelung}, {0: 2, 1: Kemerovo}, {0: 3, 1: Kerala}, {0: 1, 1: Kerman}, {0: 1, 1: Kermanshah}, {0: 3, 1: Khartum}, {0: 1, 1: Khorasan}, {0: 1, 1: Khulna}, {0: 1, 1: Khuzestan}, {0: 1, 1: Kinshasa}, {0: 1, 1: Kiova}, {0: 1, 1: Kirov}, {0: 1, 1: Konya}, {0: 1, 1: Kouilou}, {0: 1, 1: Kowloon and New Kowl}, {0: 2, 1: Krasnodar}, {0: 1, 1: Krasnojarsk}, {0: 1, 1: Kujawsko-Pomorskie}, {0: 1, 1: Kumamoto}, {0: 1, 1: Kurgan}, {0: 1, 1: Kursk}, {0: 4, 1: KwaZulu-Natal}, {0: 1, 1: Kwangju}, {0: 1, 1: Kwara & Kogi}, {0: 7, 1: Kyonggi}, {0: 1, 1: Kyongsangbuk}, {0: 3, 1: Kyongsangnam}, {0: 1, 1: Kyoto}, {0: 1, 1: K\u00f8benhavn}, {0: 1, 1: La Habana}, {0: 1, 1: La Libertad}, {0: 2, 1: La Paz}, {0: 1, 1: Lagos}, {0: 1, 1: Lambayeque}, {0: 1, 1: Lampung}, {0: 1, 1: Lara}, {0: 1, 1: Latium}, {0: 1, 1: Leinster}, {0: 12, 1: Liaoning}, {0: 1, 1: Liguria}, {0: 1, 1: Lilongwe}, {0: 1, 1: Lima}, {0: 1, 1: Lipetsk}, {0: 2, 1: Lisboa}, {0: 1, 1: Littoral}, {0: 1, 1: Lodzkie}, {0: 1, 1: Lombardia}, {0: 1, 1: Loreto}, {0: 1, 1: Louisiana}, {0: 1, 1: Luanda}, {0: 1, 1: Lubelskie}, {0: 1, 1: Lugansk}, {0: 1, 1: Lusaka}, {0: 1, 1: Luxor}, {0: 1, 1: Lviv}, {0: 1, 1: Macau}, {0: 5, 1: Madhya Pradesh}, {0: 1, 1: Madrid}, {0: 1, 1: Maekel}, {0: 1, 1: Magdalena}, {0: 13, 1: Maharashtra}, {0: 1, 1: Malopolskie}, {0: 1, 1: Managua}, {0: 1, 1: Mandalay}, {0: 1, 1: Manitoba}, {0: 2, 1: Maputo}, {0: 1, 1: Maranh\u00e3o}, {0: 1, 1: Maritime}, {0: 1, 1: Markazi}, {0: 1, 1: Marrakech-Tensift-Al}, {0: 1, 1: Maryland}, {0: 1, 1: Massachusetts}, {0: 1, 1: Mato Grosso}, {0: 1, 1: Mato Grosso do Sul}, {0: 1, 1: Mazowieckie}, {0: 1, 1: Medina}, {0: 3, 1: Mekka}, {0: 1, 1: Mekn\u00e8s-Tafilalet}, {0: 1, 1: Michigan}, {0: 1, 1: Michoac\u00e1n de Ocampo}, {0: 1, 1: Midi-Pyr\u00e9n\u00e9es}, {0: 4, 1: Minas Gerais}, {0: 1, 1: Minnesota}, {0: 1, 1: Miranda}, {0: 1, 1: Missouri}, {0: 1, 1: Miyagi}, {0: 1, 1: Mogiljov}, {0: 1, 1: Montevideo}, {0: 1, 1: Montserrado}, {0: 1, 1: Moscow (City)}, {0: 1, 1: Murcia}, {0: 1, 1: Murmansk}, {0: 1, 1: Mykolajiv}, {0: 9, 1: M\u00e9xico}, {0: 1, 1: Nagano}, {0: 1, 1: Nagasaki}, {0: 1, 1: Nairobi}, {0: 1, 1: Namangan}, {0: 1, 1: Nampo-si}, {0: 1, 1: Nara}, {0: 12, 1: National Capital Reg}, {0: 1, 1: Nebraska}, {0: 1, 1: Nevada}, {0: 1, 1: New Mexico}, {0: 1, 1: New South Wales}, {0: 1, 1: New York}, {0: 1, 1: Newmaa}, {0: 1, 1: Niamey}, {0: 1, 1: Niedersachsen}, {0: 1, 1: Niigata}, {0: 1, 1: Ninawa}, {0: 1, 1: Ningxia}, {0: 1, 1: Nizni Novgorod}, {0: 1, 1: Noord-Holland}, {0: 7, 1: Nordrhein-Westfalen}, {0: 1, 1: Norte de Santander}, {0: 1, 1: North Carolina}, {0: 1, 1: Northern Mindanao}, {0: 1, 1: Nothwest Border Prov}, {0: 1, 1: Nouakchott}, {0: 1, 1: Novosibirsk}, {0: 3, 1: Nuevo Le\u00f3n}, {0: 1, 1: Odesa}, {0: 1, 1: Ogun}, {0: 2, 1: Ohio}, {0: 1, 1: Oita}, {0: 2, 1: Okayama}, {0: 2, 1: Oklahoma}, {0: 1, 1: Omsk}, {0: 1, 1: Ondo & Ekiti}, {0: 4, 1: Ontario}, {0: 1, 1: Oran}, {0: 1, 1: Oregon}, {0: 1, 1: Orenburg}, {0: 1, 1: Oriental}, {0: 2, 1: Orissa}, {0: 6, 1: Osaka}, {0: 1, 1: Oslo}, {0: 1, 1: Ouest}, {0: 5, 1: Oyo & Osun}, {0: 1, 1: Panam\u00e1}, {0: 2, 1: Paran\u00e1}, {0: 2, 1: Para\u00edba}, {0: 2, 1: Par\u00e1}, {0: 1, 1: Peking}, {0: 1, 1: Pennsylvania}, {0: 1, 1: Penza}, {0: 1, 1: Perak}, {0: 1, 1: Perm}, {0: 3, 1: Pernambuco}, {0: 1, 1: Phnom Penh}, {0: 1, 1: Piau\u00ed}, {0: 1, 1: Pichincha}, {0: 1, 1: Piemonte}, {0: 1, 1: Pietari}, {0: 1, 1: Pomorskie}, {0: 1, 1: Port Said}, {0: 1, 1: Primorje}, {0: 1, 1: Provence-Alpes-C\u00f4te}, {0: 1, 1: Puebla}, {0: 11, 1: Punjab}, {0: 1, 1: Pusan}, {0: 1, 1: Pyongyang-si}, {0: 1, 1: Qaraghandy}, {0: 1, 1: Qinghai}, {0: 1, 1: Qom}, {0: 1, 1: Quang Nam-Da Nang}, {0: 1, 1: Queensland}, {0: 1, 1: Quer\u00e9taro de Arteaga}, {0: 1, 1: Quintana Roo}, {0: 1, 1: Qu\u00e9bec}, {0: 2, 1: Rabat-Sal\u00e9-Zammour-Z}, {0: 5, 1: Rajasthan}, {0: 1, 1: Rangoon [Yangon]}, {0: 1, 1: Rh\u00f4ne-Alpes}, {0: 1, 1: Riau}, {0: 1, 1: Riika}, {0: 1, 1: Rio Grande do Norte}, {0: 1, 1: Rio Grande do Sul}, {0: 8, 1: Rio de Janeiro}, {0: 1, 1: Risaralda}, {0: 1, 1: Rivers & Bayelsa}, {0: 1, 1: Riyadh}, {0: 1, 1: Rjazan}, {0: 1, 1: Rostov-na-Donu}, {0: 3, 1: Saitama}, {0: 2, 1: Saksi}, {0: 1, 1: Salta}, {0: 2, 1: Samara}, {0: 1, 1: Samarkand}, {0: 1, 1: San Juan}, {0: 1, 1: San Luis Potos\u00ed}, {0: 1, 1: San Salvador}, {0: 1, 1: Sanaa}, {0: 1, 1: Sanliurfa}, {0: 1, 1: Santa Catarina}, {0: 1, 1: Santa Cruz}, {0: 2, 1: Santa F\u00e9}, {0: 1, 1: Santaf\u00e9 de Bogot\u00e1}, {0: 1, 1: Santander}, {0: 3, 1: Santiago}, {0: 1, 1: Santiago de Cuba}, {0: 1, 1: Saratov}, {0: 2, 1: Scotland}, {0: 1, 1: Seoul}, {0: 1, 1: Sergipe}, {0: 2, 1: Shaanxi}, {0: 2, 1: Shaba}, {0: 7, 1: Shandong}, {0: 1, 1: Shanghai}, {0: 3, 1: Shanxi}, {0: 2, 1: Shizuoka}, {0: 3, 1: Sichuan}, {0: 3, 1: Sinaloa}, {0: 2, 1: Sindh}, {0: 1, 1: Sisilia}, {0: 1, 1: Sistan va Baluchesta}, {0: 1, 1: Skopje}, {0: 1, 1: Smolensk}, {0: 1, 1: Sofala}, {0: 2, 1: Sonora}, {0: 1, 1: South Australia}, {0: 1, 1: South Kazakstan}, {0: 2, 1: Southern Mindanao}, {0: 2, 1: Southern Tagalog}, {0: 1, 1: Suez}, {0: 1, 1: Sulawesi Selatan}, {0: 1, 1: Sumatera Barat}, {0: 1, 1: Sumatera Selatan}, {0: 1, 1: Sumatera Utara}, {0: 2, 1: Sverdlovsk}, {0: 13, 1: S\u00e3o Paulo}, {0: 1, 1: Tabasco}, {0: 1, 1: Taegu}, {0: 1, 1: Taejon}, {0: 1, 1: Taichung}, {0: 1, 1: Tainan}, {0: 5, 1: Taipei}, {0: 2, 1: Tamaulipas}, {0: 5, 1: Tamil Nadu}, {0: 1, 1: Tanger-T\u00e9touan}, {0: 2, 1: Tatarstan}, {0: 1, 1: Tbilisi}, {0: 2, 1: Teheran}, {0: 2, 1: Tennessee}, {0: 6, 1: Texas}, {0: 1, 1: Tianjin}, {0: 1, 1: Tjumen}, {0: 1, 1: Tochigi}, {0: 3, 1: Tokyo-to}, {0: 1, 1: Tolima}, {0: 1, 1: Tomsk}, {0: 1, 1: Toscana}, {0: 1, 1: Toskent Shahri}, {0: 1, 1: Tripoli}, {0: 1, 1: Tucum\u00e1n}, {0: 1, 1: Tula}, {0: 1, 1: Tunis}, {0: 1, 1: Tver}, {0: 2, 1: T\u0161eljabinsk}, {0: 1, 1: T\u0161uvassia}, {0: 1, 1: Udmurtia}, {0: 1, 1: Ulaanbaatar}, {0: 1, 1: Uljanovsk}, {0: 12, 1: Uttar Pradesh}, {0: 1, 1: Valencia}, {0: 1, 1: Valle}, {0: 2, 1: Veracruz}, {0: 1, 1: Viangchan}, {0: 1, 1: Victoria}, {0: 1, 1: Vilna}, {0: 1, 1: Vinnytsja}, {0: 1, 1: Virginia}, {0: 1, 1: Volgograd}, {0: 1, 1: Voronez}, {0: 1, 1: Wakayama}, {0: 1, 1: Washington}, {0: 1, 1: West Australia}, {0: 1, 1: West Azerbaidzan}, {0: 3, 1: West Bengali}, {0: 1, 1: West G\u00f6tanmaan l\u00e4n}, {0: 4, 1: West Java}, {0: 1, 1: West Kasai}, {0: 2, 1: Western}, {0: 1, 1: Western Cape}, {0: 1, 1: Western Mindanao}, {0: 2, 1: Western Visayas}, {0: 1, 1: Wielkopolskie}, {0: 1, 1: Wien}, {0: 1, 1: Wilayah Persekutuan}, {0: 1, 1: Wisconsin}, {0: 1, 1: Xinxiang}, {0: 1, 1: Yerevan}, {0: 1, 1: Yogyakarta}, {0: 1, 1: Yucat\u00e1n}, {0: 1, 1: Yunnan}, {0: 1, 1: Zachodnio-Pomorskie}, {0: 1, 1: Zaporizzja}, {0: 3, 1: Zhejiang}, {0: 2, 1: Zuid-Holland}, {0: 1, 1: Zulia}, {0: 1, 1: al-Daqahliya}, {0: 2, 1: al-Gharbiya}, {0: 1, 1: al-Qalyubiya}, {0: 1, 1: al-Sharqiya}, {0: 1, 1: al-Sulaymaniya}, {0: 1, 1: al-Tamim}, {0: 1, 1: al-Zarqa}, {0: 1, 1: \u00cele-de-France}, {0: 1, 1: \u2013}]\nLINQ Results: [{0: , 1: 0}, {0: ARMM, 1: 0}, {0: Abhasia [Aphazeti], 1: 0}, {0: Abidjan, 1: 1}, {0: Abruzzit, 1: 0}, {0: Abu Dhabi, 1: 1}, {0: Aceh, 1: 0}, {0: Acre, 1: 0}, {0: Adana, 1: 1}, {0: Addis Abeba, 1: 1}, {0: Aden, 1: 1}, {0: Adiyaman, 1: 0}, {0: Adygea, 1: 0}, {0: Adzaria [At\u0161ara], 1: 0}, {0: Afyon, 1: 0}, {0: Aguascalientes, 1: 1}, {0: Ahal, 1: 1}, {0: Aichi, 1: 2}, {0: Ajman, 1: 0}, {0: Akershus, 1: 0}, {0: Akita, 1: 0}, {0: Aksaray, 1: 0}, {0: Alabama, 1: 0}, {0: Alagoas, 1: 1}, {0: Alaska, 1: 0}, {0: Alberta, 1: 2}, {0: Aleksandria, 1: 1}, {0: Aleppo, 1: 1}, {0: Alger, 1: 1}, {0: Almaty, 1: 0}, {0: Almaty Qalasy, 1: 1}, {0: Alsace, 1: 0}, {0: Altai, 1: 1}, {0: Alto Paran\u00e1, 1: 0}, {0: Amap\u00e1, 1: 0}, {0: Amazonas, 1: 1}, {0: Amhara, 1: 0}, {0: Amman, 1: 1}, {0: Amur, 1: 0}, {0: An Giang, 1: 0}, {0: Anambra & Enugu & Eb, 1: 1}, {0: Ancash, 1: 0}, {0: Andalusia, 1: 2}, {0: Andhra Pradesh, 1: 5}, {0: Andijon, 1: 0}, {0: Andorra la Vella, 1: 0}, {0: Anhalt Sachsen, 1: 0}, {0: Anhui, 1: 5}, {0: Ankara, 1: 1}, {0: Annaba, 1: 0}, {0: Antalya, 1: 1}, {0: Antananarivo, 1: 1}, {0: Antioquia, 1: 1}, {0: Antofagasta, 1: 0}, {0: Antwerpen, 1: 1}, {0: Anzo\u00e1tegui, 1: 0}, {0: Aomori, 1: 0}, {0: Apulia, 1: 0}, {0: Apure, 1: 0}, {0: Aqt\u00f6be, 1: 0}, {0: Aqua Grande, 1: 0}, {0: Aquitaine, 1: 0}, {0: Arad, 1: 0}, {0: Aragonia, 1: 1}, {0: Aragua, 1: 1}, {0: Ardebil, 1: 0}, {0: Arecibo, 1: 0}, {0: Arequipa, 1: 1}, {0: Arges, 1: 0}, {0: Ariana, 1: 0}, {0: Arizona, 1: 3}, {0: Arkangeli, 1: 1}, {0: Arkansas, 1: 0}, {0: Arusha, 1: 0}, {0: Ashanti, 1: 1}, {0: Asir, 1: 0}, {0: Assam, 1: 1}, {0: Assuan, 1: 0}, {0: Astana, 1: 0}, {0: Astrahan, 1: 1}, {0: Asturia, 1: 0}, {0: Asunci\u00f3n, 1: 1}, {0: Asyut, 1: 0}, {0: Atacama, 1: 0}, {0: Atacora, 1: 0}, {0: Atlantique, 1: 1}, {0: Atl\u00e1ntico, 1: 1}, {0: Atl\u00e1ntida, 1: 0}, {0: Attika, 1: 1}, {0: Atyrau, 1: 0}, {0: Auckland, 1: 1}, {0: Auvergne, 1: 0}, {0: Ayacucho, 1: 0}, {0: Aydin, 1: 0}, {0: Azuay, 1: 0}, {0: Ba Ria-Vung Tau, 1: 0}, {0: Babil, 1: 0}, {0: Bac Thai, 1: 0}, {0: Bacau, 1: 0}, {0: Baden-W\u00fcrttemberg, 1: 1}, {0: Baghdad, 1: 1}, {0: Bahia, 1: 2}, {0: Bahr al-Jabal, 1: 0}, {0: Baijeri, 1: 2}, {0: Baja California, 1: 3}, {0: Baja California Sur, 1: 0}, {0: Baki, 1: 1}, {0: Balears, 1: 0}, {0: Bali, 1: 1}, {0: Balikesir, 1: 0}, {0: Balkh, 1: 0}, {0: Balti, 1: 0}, {0: Baluchistan, 1: 1}, {0: Bamako, 1: 1}, {0: Banaadir, 1: 1}, {0: Bandundu, 1: 0}, {0: Bangkok, 1: 1}, {0: Bangui, 1: 1}, {0: Bani Suwayf, 1: 0}, {0: Banjul, 1: 0}, {0: Baranya, 1: 0}, {0: Barinas, 1: 0}, {0: Barisal, 1: 0}, {0: Bas-Za\u00efre, 1: 0}, {0: Basel-Stadt, 1: 0}, {0: Baskimaa, 1: 1}, {0: Basra, 1: 1}, {0: Basse-Normandie, 1: 0}, {0: Basse-Terre, 1: 0}, {0: Batman, 1: 0}, {0: Batna, 1: 0}, {0: Battambang, 1: 0}, {0: Bauchi & Gombe, 1: 0}, {0: Bayam\u00f3n, 1: 0}, {0: Ba\u0161kortostan, 1: 1}, {0: Beirut, 1: 1}, {0: Belgorod, 1: 0}, {0: Belize City, 1: 0}, {0: Bender (T\u00eeghina), 1: 0}, {0: Bengasi, 1: 1}, {0: Bengkulu, 1: 0}, {0: Benguela, 1: 0}, {0: Benue, 1: 0}, {0: Berliini, 1: 1}, {0: Bern, 1: 0}, {0: Bicol, 1: 0}, {0: Bihar, 1: 1}, {0: Bihor, 1: 0}, {0: Binh Dinh, 1: 0}, {0: Binh Thuan, 1: 0}, {0: Bioko, 1: 0}, {0: Biserta, 1: 0}, {0: Bishkek shaary, 1: 1}, {0: Biskra, 1: 0}, {0: Bissau, 1: 0}, {0: Blantyre, 1: 1}, {0: Blida, 1: 0}, {0: Bol\u00edvar, 1: 2}, {0: Borgou, 1: 0}, {0: Borno & Yobe, 1: 0}, {0: Borsod-Aba\u00faj-Zempl\u00e9n, 1: 0}, {0: Botosani, 1: 0}, {0: Bouak\u00e9, 1: 0}, {0: Boulkiemd\u00e9, 1: 0}, {0: Bourgogne, 1: 0}, {0: Boyac\u00e1, 1: 0}, {0: Braga, 1: 0}, {0: Braila, 1: 0}, {0: Brandenburg, 1: 0}, {0: Brasov, 1: 0}, {0: Bratislava, 1: 1}, {0: Brazzaville, 1: 1}, {0: Bremen, 1: 1}, {0: Brest, 1: 0}, {0: Bretagne, 1: 0}, {0: British Colombia, 1: 1}, {0: Brjansk, 1: 1}, {0: Brunei and Muara, 1: 0}, {0: Bryssel, 1: 0}, {0: Budapest, 1: 1}, {0: Buenos Aires, 1: 12}, {0: Buhoro, 1: 0}, {0: Bujumbura, 1: 0}, {0: Bukarest, 1: 1}, {0: Bulawayo, 1: 1}, {0: Burgas, 1: 0}, {0: Burjatia, 1: 1}, {0: Bursa, 1: 1}, {0: Bushehr, 1: 0}, {0: Buzau, 1: 0}, {0: B\u00e1cs-Kiskun, 1: 0}, {0: B\u00e9char, 1: 0}, {0: B\u00e9ja\u00efa, 1: 0}, {0: B\u00edob\u00edo, 1: 0}, {0: CAR, 1: 0}, {0: Cagayan Valley, 1: 0}, {0: Caguas, 1: 0}, {0: Cajamarca, 1: 0}, {0: Calabria, 1: 0}, {0: Caldas, 1: 0}, {0: California, 1: 8}, {0: Callao, 1: 1}, {0: Camag\u00fcey, 1: 0}, {0: Campania, 1: 1}, {0: Campeche, 1: 0}, {0: Can Tho, 1: 0}, {0: Canary Islands, 1: 1}, {0: Cantabria, 1: 0}, {0: Canterbury, 1: 0}, {0: Cap-Vert, 1: 2}, {0: Capital Region, 1: 0}, {0: Caquet\u00e1, 1: 0}, {0: Carabobo, 1: 1}, {0: Caraga, 1: 0}, {0: Caras-Severin, 1: 0}, {0: Carolina, 1: 0}, {0: Caroni, 1: 0}, {0: Casablanca, 1: 1}, {0: Castilla and Le\u00f3n, 1: 0}, {0: Castries, 1: 0}, {0: Catamarca, 1: 0}, {0: Cauca, 1: 0}, {0: Cayenne, 1: 0}, {0: Cayo, 1: 0}, {0: Cear\u00e1, 1: 1}, {0: Central, 1: 2}, {0: Central Java, 1: 2}, {0: Central Luzon, 1: 0}, {0: Central Macedonia, 1: 1}, {0: Central Mindanao, 1: 0}, {0: Central Serbia, 1: 1}, {0: Central Visayas, 1: 1}, {0: Centre, 1: 1}, {0: Cesar, 1: 0}, {0: Chaco, 1: 0}, {0: Chagang, 1: 0}, {0: Chaharmahal va Bakht, 1: 0}, {0: Champagne-Ardenne, 1: 0}, {0: Chandigarh, 1: 1}, {0: Changhwa, 1: 0}, {0: Chaouia-Ouardigha, 1: 0}, {0: Chari-Baguirmi, 1: 1}, {0: Cheju, 1: 0}, {0: Chhatisgarh, 1: 2}, {0: Chiang Mai, 1: 0}, {0: Chiapas, 1: 1}, {0: Chiayi, 1: 0}, {0: Chiba, 1: 4}, {0: Chihuahua, 1: 2}, {0: Chimborazo, 1: 0}, {0: Chinandega, 1: 0}, {0: Chisinau, 1: 1}, {0: Chittagong, 1: 1}, {0: Chlef, 1: 0}, {0: Chollabuk, 1: 1}, {0: Chollanam, 1: 0}, {0: Chongqing, 1: 1}, {0: Chubut, 1: 0}, {0: Chungchongbuk, 1: 1}, {0: Chungchongnam, 1: 0}, {0: Chuquisaca, 1: 0}, {0: Chuuk, 1: 0}, {0: Ciego de \u00c1vila, 1: 0}, {0: Cienfuegos, 1: 0}, {0: Cizah, 1: 0}, {0: Cluj, 1: 0}, {0: Coahuila de Zaragoza, 1: 2}, {0: Coast, 1: 1}, {0: Cochabamba, 1: 1}, {0: Colima, 1: 0}, {0: Colorado, 1: 2}, {0: Conakry, 1: 1}, {0: Connecticut, 1: 0}, {0: Constanta, 1: 0}, {0: Constantine, 1: 1}, {0: Copperbelt, 1: 0}, {0: Coquimbo, 1: 0}, {0: Corrientes, 1: 0}, {0: Cort\u00e9s, 1: 1}, {0: Co\u00edmbra, 1: 0}, {0: Crete, 1: 0}, {0: Cross River, 1: 0}, {0: Csongr\u00e1d, 1: 0}, {0: Cundinamarca, 1: 0}, {0: Cura\u00e7ao, 1: 0}, {0: Cusco, 1: 0}, {0: C\u00f3rdoba, 1: 1}, {0: Dac Lac, 1: 0}, {0: Dagestan, 1: 0}, {0: Dakhlet Nou\u00e2dhibou, 1: 0}, {0: Daloa, 1: 0}, {0: Damascus, 1: 1}, {0: Damaskos, 1: 0}, {0: Dar es Salaam, 1: 1}, {0: Darfur al-Janubiya, 1: 0}, {0: Darfur al-Shamaliya, 1: 0}, {0: Dashhowuz, 1: 0}, {0: Daugavpils, 1: 0}, {0: Dayr al-Zawr, 1: 0}, {0: Delhi, 1: 1}, {0: Denizli, 1: 0}, {0: Dhaka, 1: 1}, {0: DhiQar, 1: 0}, {0: Dili, 1: 0}, {0: Diourbel, 1: 0}, {0: Dire Dawa, 1: 0}, {0: District of Columbia, 1: 1}, {0: Distrito Central, 1: 1}, {0: Distrito Federal, 1: 4}, {0: Distrito Nacional, 1: 1}, {0: Diyala, 1: 0}, {0: Diyarbakir, 1: 1}, {0: Djibouti, 1: 1}, {0: Dnipropetrovsk, 1: 2}, {0: Dnjestria, 1: 0}, {0: Dodoma, 1: 0}, {0: Doha, 1: 1}, {0: Dolj, 1: 0}, {0: Dolnoslaskie, 1: 1}, {0: Donetsk, 1: 3}, {0: Dong Nai, 1: 0}, {0: Doukkala-Abda, 1: 0}, {0: Drenthe, 1: 0}, {0: Duarte, 1: 0}, {0: Dubai, 1: 1}, {0: Dunedin, 1: 0}, {0: Durango, 1: 1}, {0: D\u00e2mbovita, 1: 0}, {0: East Azerbaidzan, 1: 1}, {0: East Falkland, 1: 0}, {0: East Flanderi, 1: 0}, {0: East G\u00f6tanmaan l\u00e4n, 1: 0}, {0: East Java, 1: 2}, {0: East Kasai, 1: 1}, {0: East Kazakstan, 1: 0}, {0: Eastern, 1: 0}, {0: Eastern Cape, 1: 1}, {0: Eastern Visayas, 1: 0}, {0: Edirne, 1: 0}, {0: Edo & Delta, 1: 0}, {0: Ehime, 1: 1}, {0: El Oro, 1: 0}, {0: El-Aai\u00fan, 1: 0}, {0: El\u00e2zig, 1: 0}, {0: Emilia-Romagna, 1: 1}, {0: England, 1: 7}, {0: Entre Rios, 1: 0}, {0: Equateur, 1: 0}, {0: Erzincan, 1: 0}, {0: Erzurum, 1: 0}, {0: Esfahan, 1: 1}, {0: Eskisehir, 1: 1}, {0: Esmeraldas, 1: 0}, {0: Esp\u00edrito Santo, 1: 0}, {0: Estuaire, 1: 1}, {0: Extremadura, 1: 0}, {0: Extr\u00eame-Nord, 1: 0}, {0: Fakaofo, 1: 0}, {0: Falc\u00f3n, 1: 0}, {0: Fargona, 1: 0}, {0: Fars, 1: 1}, {0: Federaatio, 1: 1}, {0: Federal Capital Dist, 1: 0}, {0: Fej\u00e9r, 1: 0}, {0: Fianarantsoa, 1: 0}, {0: Flevoland, 1: 0}, {0: Florida, 1: 2}, {0: Formosa, 1: 0}, {0: Fort-de-France, 1: 0}, {0: Franche-Comt\u00e9, 1: 0}, {0: Francistown, 1: 0}, {0: Frederiksberg, 1: 0}, {0: Free State, 1: 0}, {0: Friuli-Venezia Giuli, 1: 0}, {0: Fujian, 1: 2}, {0: Fukui, 1: 0}, {0: Fukuoka, 1: 2}, {0: Fukushima, 1: 1}, {0: Funafuti, 1: 0}, {0: Fyn, 1: 0}, {0: F\u00e8s-Boulemane, 1: 1}, {0: Gaborone, 1: 0}, {0: Gab\u00e8s, 1: 0}, {0: Galati, 1: 0}, {0: Galicia, 1: 0}, {0: Gansu, 1: 1}, {0: Gauteng, 1: 7}, {0: Gaza, 1: 1}, {0: Gaziantep, 1: 1}, {0: Gelderland, 1: 0}, {0: Geneve, 1: 0}, {0: Georgetown, 1: 0}, {0: Georgia, 1: 1}, {0: Gharb-Chrarda-B\u00e9ni H, 1: 0}, {0: Gharda\u00efa, 1: 0}, {0: Gifu, 1: 1}, {0: Gilan, 1: 1}, {0: Giza, 1: 1}, {0: Goi\u00e1s, 1: 1}, {0: Golestan, 1: 0}, {0: Gomel, 1: 1}, {0: Gorj, 1: 0}, {0: Grad Sofija, 1: 1}, {0: Grad Zagreb, 1: 1}, {0: Grand Cayman, 1: 0}, {0: Grand Turk, 1: 0}, {0: Grande-Terre, 1: 0}, {0: Granma, 1: 0}, {0: Greater Accra, 1: 1}, {0: Grodno, 1: 0}, {0: Groningen, 1: 0}, {0: Guanajuato, 1: 3}, {0: Guangdong, 1: 4}, {0: Guangxi, 1: 3}, {0: Guant\u00e1namo, 1: 0}, {0: Guatemala, 1: 1}, {0: Guayas, 1: 1}, {0: Guaynabo, 1: 0}, {0: Guerrero, 1: 1}, {0: Guizhou, 1: 2}, {0: Gujarat, 1: 5}, {0: Gumma, 1: 0}, {0: Gu\u00e1rico, 1: 0}, {0: Gy\u00f6r-Moson-Sopron, 1: 0}, {0: G\u00e4nc\u00e4, 1: 0}, {0: G\u00e4vleborgs l\u00e4n, 1: 0}, {0: Ha Darom, 1: 0}, {0: Ha Merkaz, 1: 0}, {0: Habarovsk, 1: 1}, {0: Hadramawt, 1: 0}, {0: Haifa, 1: 0}, {0: Hail, 1: 0}, {0: Hainan, 1: 1}, {0: Hainaut, 1: 0}, {0: Haiphong, 1: 1}, {0: Hajd\u00fa-Bihar, 1: 0}, {0: Hakassia, 1: 0}, {0: Hama, 1: 0}, {0: Hamadan, 1: 1}, {0: Hamburg, 1: 1}, {0: Hamgyong N, 1: 1}, {0: Hamgyong P, 1: 1}, {0: Hamilton, 1: 0}, {0: Hanoi, 1: 1}, {0: Hanti-Mansia, 1: 0}, {0: Harare, 1: 1}, {0: Harjumaa, 1: 1}, {0: Harkova, 1: 1}, {0: Haryana, 1: 1}, {0: Haskovo, 1: 0}, {0: Hatay, 1: 0}, {0: Haute-Normandie, 1: 0}, {0: Haute-Za\u00efre, 1: 1}, {0: Hawaii, 1: 1}, {0: Hawalli, 1: 0}, {0: Hebei, 1: 6}, {0: Hebron, 1: 0}, {0: Heilongjiang, 1: 9}, {0: Henan, 1: 7}, {0: Herat, 1: 0}, {0: Herson, 1: 1}, {0: Hessen, 1: 1}, {0: Hhohho, 1: 0}, {0: Hidalgo, 1: 0}, {0: Hims, 1: 1}, {0: Hiroshima, 1: 2}, {0: Hlavn\u00ed mesto Praha, 1: 1}, {0: Hmelnytskyi, 1: 0}, {0: Ho Chi Minh City, 1: 1}, {0: Hodeida, 1: 0}, {0: Hokkaido, 1: 2}, {0: Holgu\u00edn, 1: 0}, {0: Home Island, 1: 0}, {0: Hongkong, 1: 1}, {0: Honiara, 1: 0}, {0: Horad Minsk, 1: 1}, {0: Hordaland, 1: 0}, {0: Hormozgan, 1: 0}, {0: Houet, 1: 0}, {0: Hsinchu, 1: 1}, {0: Hualien, 1: 0}, {0: Huambo, 1: 0}, {0: Huanuco, 1: 0}, {0: Hubei, 1: 4}, {0: Huila, 1: 0}, {0: Hunan, 1: 4}, {0: Hwanghae N, 1: 0}, {0: Hwanghae P, 1: 0}, {0: Hyogo, 1: 4}, {0: H\u00f6fu\u00f0borgarsv\u00e6\u00f0i, 1: 0}, {0: Iasi, 1: 0}, {0: Ibaragi, 1: 0}, {0: Ibb, 1: 0}, {0: Ica, 1: 0}, {0: Idaho, 1: 0}, {0: Idlib, 1: 0}, {0: Ilam, 1: 0}, {0: Ilan, 1: 0}, {0: Illinois, 1: 1}, {0: Ilocos, 1: 0}, {0: Imbabura, 1: 0}, {0: Imereti, 1: 0}, {0: Imo & Abia, 1: 0}, {0: Inchon, 1: 1}, {0: Indiana, 1: 1}, {0: Inhambane, 1: 0}, {0: Inner Harbour, 1: 0}, {0: Inner Mongolia, 1: 3}, {0: Iowa, 1: 0}, {0: Irbid, 1: 0}, {0: Irbil, 1: 1}, {0: Irkutsk, 1: 1}, {0: Irrawaddy [Ayeyarwad, 1: 0}, {0: Ishikawa, 1: 1}, {0: Islamabad, 1: 1}, {0: Ismailia, 1: 0}, {0: Isparta, 1: 0}, {0: Istanbul, 1: 1}, {0: Ivano-Frankivsk, 1: 0}, {0: Ivanovo, 1: 1}, {0: Iwate, 1: 0}, {0: Izmir, 1: 1}, {0: I\u00e7el, 1: 1}, {0: Jakarta Raya, 1: 1}, {0: Jalisco, 1: 3}, {0: Jambi, 1: 1}, {0: Jammu and Kashmir, 1: 1}, {0: Jaroslavl, 1: 1}, {0: Jersey, 1: 0}, {0: Jerusalem, 1: 1}, {0: Jharkhand, 1: 2}, {0: Jiangsu, 1: 7}, {0: Jiangxi, 1: 2}, {0: Jilin, 1: 4}, {0: Jizn\u00ed Cechy, 1: 0}, {0: Jizn\u00ed Morava, 1: 1}, {0: Johor, 1: 0}, {0: Jubbada Hoose, 1: 0}, {0: Jujuy, 1: 0}, {0: Jun\u00edn, 1: 0}, {0: J\u00f6nk\u00f6pings l\u00e4n, 1: 0}, {0: Kabardi-Balkaria, 1: 0}, {0: Kabol, 1: 1}, {0: Kadiogo, 1: 1}, {0: Kaduna, 1: 1}, {0: Kaesong-si, 1: 0}, {0: Kafr al-Shaykh, 1: 0}, {0: Kagawa, 1: 0}, {0: Kagoshima, 1: 1}, {0: Kahramanmaras, 1: 0}, {0: Kairo, 1: 1}, {0: Kairouan, 1: 0}, {0: Kalimantan Barat, 1: 1}, {0: Kalimantan Selatan, 1: 1}, {0: Kalimantan Tengah, 1: 0}, {0: Kalimantan Timur, 1: 1}, {0: Kaliningrad, 1: 1}, {0: Kalmykia, 1: 0}, {0: Kaluga, 1: 0}, {0: Kamt\u0161atka, 1: 0}, {0: Kanagawa, 1: 5}, {0: Kang-won, 1: 0}, {0: Kangwon, 1: 0}, {0: Kano & Jigawa, 1: 1}, {0: Kansas, 1: 0}, {0: Kaohsiung, 1: 1}, {0: Kaolack, 1: 0}, {0: Karab\u00fck, 1: 0}, {0: Karakalpakistan, 1: 0}, {0: Karaman, 1: 0}, {0: Karat\u0161ai-T\u0161erkessia, 1: 0}, {0: Karbala, 1: 0}, {0: Karjala, 1: 0}, {0: Karnataka, 1: 3}, {0: Karotegin, 1: 1}, {0: Kars, 1: 0}, {0: Kassala, 1: 0}, {0: Kastilia-La Mancha, 1: 0}, {0: Katalonia, 1: 1}, {0: Katsina, 1: 0}, {0: Kaunas, 1: 1}, {0: Kayseri, 1: 1}, {0: Kedah, 1: 0}, {0: Keelung, 1: 1}, {0: Kelantan, 1: 0}, {0: Kemerovo, 1: 2}, {0: Kentucky, 1: 0}, {0: Kerala, 1: 3}, {0: Kerman, 1: 1}, {0: Kermanshah, 1: 1}, {0: Khan Yunis, 1: 0}, {0: Khanh Hoa, 1: 0}, {0: Khartum, 1: 3}, {0: Khomas, 1: 0}, {0: Khon Kaen, 1: 0}, {0: Khorasan, 1: 1}, {0: Khorazm, 1: 0}, {0: Khujand, 1: 0}, {0: Khulna, 1: 1}, {0: Khuzestan, 1: 1}, {0: Kien Giang, 1: 0}, {0: Kigali, 1: 0}, {0: Kilimanjaro, 1: 0}, {0: Kilis, 1: 0}, {0: Kinshasa, 1: 1}, {0: Kiova, 1: 1}, {0: Kirikkale, 1: 0}, {0: Kirov, 1: 1}, {0: Kirovograd, 1: 0}, {0: Kitaa, 1: 0}, {0: Klaipeda, 1: 0}, {0: Kocaeli, 1: 0}, {0: Kochi, 1: 0}, {0: Kombo St Mary, 1: 0}, {0: Komi, 1: 0}, {0: Konya, 1: 1}, {0: Kordestan, 1: 0}, {0: Korhogo, 1: 0}, {0: Koror, 1: 0}, {0: Kosovo and Metohija, 1: 0}, {0: Kostroma, 1: 0}, {0: Kouilou, 1: 1}, {0: Kowloon and New Kowl, 1: 1}, {0: Krasnodar, 1: 2}, {0: Krasnojarsk, 1: 1}, {0: Krim, 1: 0}, {0: Kujawsko-Pomorskie, 1: 1}, {0: Kumamoto, 1: 1}, {0: Kurdufan al-Shamaliy, 1: 0}, {0: Kurgan, 1: 1}, {0: Kursk, 1: 1}, {0: Kvemo Kartli, 1: 0}, {0: KwaZulu-Natal, 1: 4}, {0: Kwangju, 1: 1}, {0: Kwara & Kogi, 1: 1}, {0: Kyonggi, 1: 7}, {0: Kyongsangbuk, 1: 1}, {0: Kyongsangnam, 1: 3}, {0: Kyoto, 1: 1}, {0: K\u00e4rnten, 1: 0}, {0: K\u00f8benhavn, 1: 1}, {0: K\u00fctahya, 1: 0}, {0: La Araucan\u00eda, 1: 0}, {0: La Guajira, 1: 0}, {0: La Habana, 1: 1}, {0: La Libertad, 1: 1}, {0: La Paz, 1: 2}, {0: La Rioja, 1: 0}, {0: La Romana, 1: 0}, {0: Lagos, 1: 1}, {0: Lam Dong, 1: 0}, {0: Lambayeque, 1: 1}, {0: Lampung, 1: 1}, {0: Languedoc-Roussillon, 1: 0}, {0: Lara, 1: 1}, {0: Las Tunas, 1: 0}, {0: Latakia, 1: 0}, {0: Latium, 1: 1}, {0: Lebap, 1: 0}, {0: Leinster, 1: 1}, {0: Le\u00f3n, 1: 0}, {0: Liaoning, 1: 12}, {0: Liepaja, 1: 0}, {0: Liguria, 1: 1}, {0: Lilongwe, 1: 1}, {0: Lima, 1: 1}, {0: Limassol, 1: 0}, {0: Limburg, 1: 0}, {0: Limousin, 1: 0}, {0: Lipetsk, 1: 1}, {0: Lisboa, 1: 2}, {0: Littoral, 1: 1}, {0: Li\u00e8ge, 1: 0}, {0: Lodzkie, 1: 1}, {0: Logone Occidental, 1: 0}, {0: Loja, 1: 0}, {0: Lombardia, 1: 1}, {0: Lorestan, 1: 0}, {0: Loreto, 1: 1}, {0: Lori, 1: 0}, {0: Lorraine, 1: 0}, {0: Los Lagos, 1: 0}, {0: Los R\u00edos, 1: 0}, {0: Louisiana, 1: 1}, {0: Lovec, 1: 0}, {0: Luanda, 1: 1}, {0: Lubelskie, 1: 1}, {0: Lubuskie, 1: 0}, {0: Lugansk, 1: 1}, {0: Lusaka, 1: 1}, {0: Luxembourg, 1: 0}, {0: Luxor, 1: 1}, {0: Lviv, 1: 1}, {0: L\u00e4nsimaa, 1: 0}, {0: Maale, 1: 0}, {0: Macau, 1: 1}, {0: Madhya Pradesh, 1: 5}, {0: Madrid, 1: 1}, {0: Maekel, 1: 1}, {0: Magadan, 1: 0}, {0: Magallanes, 1: 0}, {0: Magdalena, 1: 1}, {0: Magwe [Magway], 1: 0}, {0: Mahajanga, 1: 0}, {0: Maharashtra, 1: 13}, {0: Mah\u00e9, 1: 0}, {0: Majuro, 1: 0}, {0: Malatya, 1: 0}, {0: Malopolskie, 1: 1}, {0: Mamoutzou, 1: 0}, {0: Manab\u00ed, 1: 0}, {0: Managua, 1: 1}, {0: Mandalay, 1: 1}, {0: Mangghystau, 1: 0}, {0: Manica, 1: 0}, {0: Manicaland, 1: 0}, {0: Manipur, 1: 0}, {0: Manisa, 1: 0}, {0: Manitoba, 1: 1}, {0: Maputo, 1: 2}, {0: Maradi, 1: 0}, {0: Maramures, 1: 0}, {0: Maranh\u00e3o, 1: 1}, {0: Marche, 1: 0}, {0: Mardin, 1: 0}, {0: Marinmaa, 1: 0}, {0: Maritime, 1: 1}, {0: Markazi, 1: 1}, {0: Marrakech-Tensift-Al, 1: 1}, {0: Mary, 1: 0}, {0: Maryland, 1: 1}, {0: Masaya, 1: 0}, {0: Maseru, 1: 0}, {0: Masqat, 1: 0}, {0: Massachusetts, 1: 1}, {0: Matanzas, 1: 0}, {0: Mato Grosso, 1: 1}, {0: Mato Grosso do Sul, 1: 1}, {0: Maule, 1: 0}, {0: Mayag\u00fcez, 1: 0}, {0: Maysan, 1: 0}, {0: Mazandaran, 1: 0}, {0: Mazowieckie, 1: 1}, {0: Mbeya, 1: 0}, {0: Mecklenburg-Vorpomme, 1: 0}, {0: Medina, 1: 1}, {0: Meghalaya, 1: 0}, {0: Mehedinti, 1: 0}, {0: Mekka, 1: 3}, {0: Mekn\u00e8s-Tafilalet, 1: 1}, {0: Mendoza, 1: 0}, {0: Meta, 1: 0}, {0: Miaoli, 1: 0}, {0: Michigan, 1: 1}, {0: Michoac\u00e1n de Ocampo, 1: 1}, {0: Midi-Pyr\u00e9n\u00e9es, 1: 1}, {0: Midlands, 1: 0}, {0: Mie, 1: 0}, {0: Minas Gerais, 1: 4}, {0: Ming\u00e4\u00e7evir, 1: 0}, {0: Minnesota, 1: 1}, {0: Minsk, 1: 0}, {0: Miranda, 1: 1}, {0: Misiones, 1: 0}, {0: Misrata, 1: 0}, {0: Mississippi, 1: 0}, {0: Missouri, 1: 1}, {0: Miyagi, 1: 1}, {0: Miyazaki, 1: 0}, {0: Mizoram, 1: 0}, {0: Mogiljov, 1: 1}, {0: Molukit, 1: 0}, {0: Mon, 1: 0}, {0: Monagas, 1: 0}, {0: Montana, 1: 0}, {0: Montenegro, 1: 0}, {0: Montevideo, 1: 1}, {0: Montserrado, 1: 1}, {0: Mordva, 1: 0}, {0: Morelos, 1: 0}, {0: Morogoro, 1: 0}, {0: Moscow (City), 1: 1}, {0: Moskova, 1: 0}, {0: Mostaganem, 1: 0}, {0: Mpumalanga, 1: 0}, {0: Munster, 1: 0}, {0: Murcia, 1: 1}, {0: Mures, 1: 0}, {0: Murmansk, 1: 1}, {0: Mwanza, 1: 0}, {0: Mykolajiv, 1: 1}, {0: M\u00e9rida, 1: 0}, {0: M\u00e9xico, 1: 9}, {0: Nablus, 1: 0}, {0: Nagano, 1: 1}, {0: Nagasaki, 1: 1}, {0: Nairobi, 1: 1}, {0: Najran, 1: 0}, {0: Nakhon Pathom, 1: 0}, {0: Nakhon Ratchasima, 1: 0}, {0: Nakhon Sawan, 1: 0}, {0: Nam Ha, 1: 0}, {0: Namangan, 1: 1}, {0: Namibe, 1: 0}, {0: Nampo-si, 1: 1}, {0: Nampula, 1: 0}, {0: Namur, 1: 0}, {0: Nantou, 1: 0}, {0: Nara, 1: 1}, {0: Nari\u00f1o, 1: 0}, {0: National Capital Dis, 1: 0}, {0: National Capital Reg, 1: 12}, {0: Navarra, 1: 0}, {0: Navoi, 1: 0}, {0: Nayarit, 1: 0}, {0: Neamt, 1: 0}, {0: Nebraska, 1: 1}, {0: Negeri Sembilan, 1: 0}, {0: Neuqu\u00e9n, 1: 0}, {0: Nevada, 1: 1}, {0: New Hampshire, 1: 0}, {0: New Jersey, 1: 0}, {0: New Mexico, 1: 1}, {0: New Providence, 1: 0}, {0: New South Wales, 1: 1}, {0: New York, 1: 1}, {0: Newfoundland, 1: 0}, {0: Newmaa, 1: 1}, {0: Nghe An, 1: 0}, {0: Niamey, 1: 1}, {0: Nicosia, 1: 0}, {0: Niedersachsen, 1: 1}, {0: Niger, 1: 0}, {0: Niigata, 1: 1}, {0: Ninawa, 1: 1}, {0: Ningxia, 1: 1}, {0: Nizni Novgorod, 1: 1}, {0: Njazidja, 1: 0}, {0: Nonthaburi, 1: 0}, {0: Noord-Brabant, 1: 0}, {0: Noord-Holland, 1: 1}, {0: Nord, 1: 0}, {0: Nord-Ouest, 1: 0}, {0: Nord-Pas-de-Calais, 1: 0}, {0: Nordjylland, 1: 0}, {0: Nordrhein-Westfalen, 1: 7}, {0: Norte de Santander, 1: 1}, {0: North Austria, 1: 0}, {0: North Carolina, 1: 1}, {0: North Gaza, 1: 0}, {0: North Ireland, 1: 0}, {0: North Kazakstan, 1: 0}, {0: North Kivu, 1: 0}, {0: North Ossetia-Alania, 1: 0}, {0: North West, 1: 0}, {0: Northern, 1: 0}, {0: Northern Cape, 1: 0}, {0: Northern Mindanao, 1: 1}, {0: Nothwest Border Prov, 1: 1}, {0: Nouakchott, 1: 1}, {0: Nova Scotia, 1: 0}, {0: Novgorod, 1: 0}, {0: Novosibirsk, 1: 1}, {0: Nuevo Le\u00f3n, 1: 3}, {0: Nusa Tenggara Barat, 1: 0}, {0: Nusa Tenggara Timur, 1: 0}, {0: Nyanza, 1: 0}, {0: Oaxaca, 1: 0}, {0: Odesa, 1: 1}, {0: Ogun, 1: 1}, {0: Ohio, 1: 2}, {0: Oita, 1: 1}, {0: Okayama, 1: 2}, {0: Okinawa, 1: 0}, {0: Oklahoma, 1: 2}, {0: Omsk, 1: 1}, {0: Ondo & Ekiti, 1: 1}, {0: Ontario, 1: 4}, {0: Opolskie, 1: 0}, {0: Oran, 1: 1}, {0: Ordu, 1: 0}, {0: Oregon, 1: 1}, {0: Orenburg, 1: 1}, {0: Oriental, 1: 1}, {0: Orissa, 1: 2}, {0: Orjol, 1: 0}, {0: Oromia, 1: 0}, {0: Oruro, 1: 0}, {0: Osaka, 1: 6}, {0: Osh, 1: 0}, {0: Osijek-Baranja, 1: 0}, {0: Oslo, 1: 1}, {0: Osmaniye, 1: 0}, {0: Osrednjeslovenska, 1: 0}, {0: Ouest, 1: 1}, {0: Outer Harbour, 1: 0}, {0: Ou\u00e9m\u00e9, 1: 0}, {0: Overijssel, 1: 0}, {0: Oyo & Osun, 1: 5}, {0: O\u00b4Higgins, 1: 0}, {0: Pahang, 1: 0}, {0: Panam\u00e1, 1: 1}, {0: Panevezys, 1: 0}, {0: Paramaribo, 1: 0}, {0: Paran\u00e1, 1: 2}, {0: Para\u00edba, 1: 2}, {0: Par\u00e1, 1: 2}, {0: Pavlodar, 1: 0}, {0: Pays de la Loire, 1: 0}, {0: Pegu [Bago], 1: 0}, {0: Peking, 1: 1}, {0: Pennsylvania, 1: 1}, {0: Penza, 1: 1}, {0: Perak, 1: 1}, {0: Perm, 1: 1}, {0: Pernambuco, 1: 3}, {0: Phnom Penh, 1: 1}, {0: Piau\u00ed, 1: 1}, {0: Picardie, 1: 0}, {0: Pichincha, 1: 1}, {0: Piemonte, 1: 1}, {0: Pietari, 1: 1}, {0: Pihkova, 1: 0}, {0: Pinar del R\u00edo, 1: 0}, {0: Pingtung, 1: 0}, {0: Pirkanmaa, 1: 0}, {0: Piura, 1: 0}, {0: Plaines Wilhelms, 1: 0}, {0: Plateau & Nassarawa, 1: 0}, {0: Plovdiv, 1: 0}, {0: Plymouth, 1: 0}, {0: Podkarpackie, 1: 0}, {0: Podlaskie, 1: 0}, {0: Podravska, 1: 0}, {0: Pohjois-Pohjanmaa, 1: 0}, {0: Pohnpei, 1: 0}, {0: Pomorskie, 1: 1}, {0: Ponce, 1: 0}, {0: Pondicherry, 1: 0}, {0: Port Said, 1: 1}, {0: Port-Louis, 1: 0}, {0: Port-of-Spain, 1: 0}, {0: Porto, 1: 0}, {0: Portuguesa, 1: 0}, {0: Potos\u00ed, 1: 0}, {0: Prahova, 1: 0}, {0: Primorje, 1: 1}, {0: Primorje-Gorski Kota, 1: 0}, {0: Provence-Alpes-C\u00f4te, 1: 1}, {0: Puebla, 1: 1}, {0: Puerto Plata, 1: 0}, {0: Pulau Pinang, 1: 0}, {0: Pultava, 1: 0}, {0: Punjab, 1: 11}, {0: Puno, 1: 0}, {0: Pusan, 1: 1}, {0: Pyongan N, 1: 0}, {0: Pyongan P, 1: 0}, {0: Pyongyang-si, 1: 1}, {0: P\u00e4ij\u00e4t-H\u00e4me, 1: 0}, {0: Qandahar, 1: 0}, {0: Qaraghandy, 1: 1}, {0: Qashqadaryo, 1: 0}, {0: Qasim, 1: 0}, {0: Qazvin, 1: 0}, {0: Qina, 1: 0}, {0: Qinghai, 1: 1}, {0: Qom, 1: 1}, {0: Qostanay, 1: 0}, {0: Quang Binh, 1: 0}, {0: Quang Nam-Da Nang, 1: 1}, {0: Quang Ninh, 1: 0}, {0: Queensland, 1: 1}, {0: Quer\u00e9taro, 1: 0}, {0: Quer\u00e9taro de Arteaga, 1: 1}, {0: Quetzaltenango, 1: 0}, {0: Quind\u00edo, 1: 0}, {0: Quintana Roo, 1: 1}, {0: Qu\u00e9bec, 1: 1}, {0: Qyzylorda, 1: 0}, {0: Rabat-Sal\u00e9-Zammour-Z, 1: 2}, {0: Rafah, 1: 0}, {0: Rajasthan, 1: 5}, {0: Rajshahi, 1: 0}, {0: Rakhine, 1: 0}, {0: Rangoon [Yangon], 1: 1}, {0: Rarotonga, 1: 0}, {0: Republika Srpska, 1: 0}, {0: Rheinland-Pfalz, 1: 0}, {0: Rhode Island, 1: 0}, {0: Rh\u00f4ne-Alpes, 1: 1}, {0: Riad, 1: 0}, {0: Riau, 1: 1}, {0: Rift Valley, 1: 0}, {0: Riika, 1: 1}, {0: Rio Grande do Norte, 1: 1}, {0: Rio Grande do Sul, 1: 1}, {0: Rio de Janeiro, 1: 8}, {0: Risaralda, 1: 1}, {0: Rivers & Bayelsa, 1: 1}, {0: Rivne, 1: 0}, {0: Riyadh, 1: 1}, {0: Rjazan, 1: 1}, {0: Rogaland, 1: 0}, {0: Rond\u00f4nia, 1: 0}, {0: Roraima, 1: 0}, {0: Rostov-na-Donu, 1: 1}, {0: Ruse, 1: 0}, {0: Saarland, 1: 0}, {0: Sabah, 1: 0}, {0: Saga, 1: 0}, {0: Sagaing, 1: 0}, {0: Saha (Jakutia), 1: 0}, {0: Sahalin, 1: 0}, {0: Saint George\u00b4s, 1: 0}, {0: Saint Helena, 1: 0}, {0: Saint-Denis, 1: 0}, {0: Saint-Louis, 1: 0}, {0: Saint-Pierre, 1: 0}, {0: Saipan, 1: 0}, {0: Saitama, 1: 3}, {0: Sakarya, 1: 0}, {0: Saksi, 1: 2}, {0: Salta, 1: 1}, {0: Salzburg, 1: 0}, {0: Samara, 1: 2}, {0: Samarkand, 1: 1}, {0: Samsun, 1: 0}, {0: San Jos\u00e9, 1: 0}, {0: San Juan, 1: 1}, {0: San Luis, 1: 0}, {0: San Luis Potos\u00ed, 1: 1}, {0: San Marino, 1: 0}, {0: San Miguel, 1: 0}, {0: San Miguelito, 1: 0}, {0: San Pedro de Macor\u00eds, 1: 0}, {0: San Salvador, 1: 1}, {0: Sanaa, 1: 1}, {0: Sancti-Sp\u00edritus, 1: 0}, {0: Sanliurfa, 1: 1}, {0: Santa Ana, 1: 0}, {0: Santa Catarina, 1: 1}, {0: Santa Cruz, 1: 1}, {0: Santa F\u00e9, 1: 2}, {0: Santaf\u00e9 de Bogot\u00e1, 1: 1}, {0: Santander, 1: 1}, {0: Santiago, 1: 3}, {0: Santiago de Cuba, 1: 1}, {0: Santiago del Estero, 1: 0}, {0: Saratov, 1: 1}, {0: Sarawak, 1: 0}, {0: Sardinia, 1: 0}, {0: Saskatchewan, 1: 0}, {0: Satu Mare, 1: 0}, {0: Savannakhet, 1: 0}, {0: Sawhaj, 1: 0}, {0: Schaan, 1: 0}, {0: Schleswig-Holstein, 1: 0}, {0: Scotland, 1: 2}, {0: Selangor, 1: 0}, {0: Semnan, 1: 0}, {0: Seoul, 1: 1}, {0: Sergipe, 1: 1}, {0: Serravalle/Dogano, 1: 0}, {0: Severn\u00ed Cechy, 1: 0}, {0: Severn\u00ed Morava, 1: 0}, {0: Sfax, 1: 0}, {0: Shaanxi, 1: 2}, {0: Shaba, 1: 2}, {0: Shamal Sina, 1: 0}, {0: Shan, 1: 0}, {0: Shandong, 1: 7}, {0: Shanghai, 1: 1}, {0: Shanxi, 1: 3}, {0: Sharja, 1: 0}, {0: Shefa, 1: 0}, {0: Shiga, 1: 0}, {0: Shimane, 1: 0}, {0: Shizuoka, 1: 2}, {0: Sibiu, 1: 0}, {0: Sichuan, 1: 3}, {0: Sidi Bel Abb\u00e8s, 1: 0}, {0: Siem Reap, 1: 0}, {0: Siirt, 1: 0}, {0: Sinaloa, 1: 3}, {0: Sind, 1: 0}, {0: Sindh, 1: 2}, {0: Sisilia, 1: 1}, {0: Sistan va Baluchesta, 1: 1}, {0: Sivas, 1: 0}, {0: Skikda, 1: 0}, {0: Skopje, 1: 1}, {0: Sk\u00e5ne l\u00e4n, 1: 0}, {0: Slaskie, 1: 0}, {0: Smolensk, 1: 1}, {0: Sofala, 1: 1}, {0: Sokoto & Kebbi & Zam, 1: 0}, {0: Songkhla, 1: 0}, {0: Sonora, 1: 2}, {0: Souss Massa-Dra\u00e2, 1: 0}, {0: Sousse, 1: 0}, {0: South Australia, 1: 1}, {0: South Carolina, 1: 0}, {0: South Dakota, 1: 0}, {0: South Kazakstan, 1: 1}, {0: South Kivu, 1: 0}, {0: South Tarawa, 1: 0}, {0: Southern Mindanao, 1: 2}, {0: Southern Tagalog, 1: 2}, {0: Split-Dalmatia, 1: 0}, {0: St George, 1: 0}, {0: St George Basseterre, 1: 0}, {0: St John, 1: 0}, {0: St Michael, 1: 0}, {0: St Thomas, 1: 0}, {0: St. Andrew, 1: 0}, {0: St. Catherine, 1: 0}, {0: Stavropol, 1: 0}, {0: Steiermark, 1: 0}, {0: Streymoyar, 1: 0}, {0: Suceava, 1: 0}, {0: Sucre, 1: 0}, {0: Suez, 1: 1}, {0: Sulawesi Selatan, 1: 1}, {0: Sulawesi Tengah, 1: 0}, {0: Sulawesi Tenggara, 1: 0}, {0: Sulawesi Utara, 1: 0}, {0: Sumatera Barat, 1: 1}, {0: Sumatera Selatan, 1: 1}, {0: Sumatera Utara, 1: 1}, {0: Sumqayit, 1: 0}, {0: Sumy, 1: 0}, {0: Surkhondaryo, 1: 0}, {0: Sverdlovsk, 1: 2}, {0: Swietokrzyskie, 1: 0}, {0: Sylhet, 1: 0}, {0: Szabolcs-Szatm\u00e1r-Ber, 1: 0}, {0: S\u00e3o Paulo, 1: 13}, {0: S\u00e3o Tiago, 1: 0}, {0: S\u00e9tif, 1: 0}, {0: S\u00f8r-Tr\u00f8ndelag, 1: 0}, {0: Tabasco, 1: 1}, {0: Tabora, 1: 0}, {0: Tabuk, 1: 0}, {0: Tacna, 1: 0}, {0: Tadla-Azilal, 1: 0}, {0: Taegu, 1: 1}, {0: Taejon, 1: 1}, {0: Tahiti, 1: 0}, {0: Taichung, 1: 1}, {0: Tainan, 1: 1}, {0: Taipei, 1: 5}, {0: Taitung, 1: 0}, {0: Taizz, 1: 0}, {0: Taka-Karpatia, 1: 0}, {0: Tamaulipas, 1: 2}, {0: Tambov, 1: 0}, {0: Tamil Nadu, 1: 5}, {0: Tanga, 1: 0}, {0: Tanger-T\u00e9touan, 1: 1}, {0: Taoyuan, 1: 0}, {0: Tarapac\u00e1, 1: 0}, {0: Taraz, 1: 0}, {0: Tarija, 1: 0}, {0: Tartumaa, 1: 0}, {0: Tasmania, 1: 0}, {0: Tatarstan, 1: 2}, {0: Taza-Al Hoceima-Taou, 1: 0}, {0: Tbilisi, 1: 1}, {0: Teheran, 1: 2}, {0: Tekirdag, 1: 0}, {0: Tel Aviv, 1: 0}, {0: Tenasserim [Tanintha, 1: 0}, {0: Tennessee, 1: 2}, {0: Terengganu, 1: 0}, {0: Ternopil, 1: 0}, {0: Tete, 1: 0}, {0: Texas, 1: 6}, {0: Thessalia, 1: 0}, {0: Thimphu, 1: 0}, {0: Thi\u00e8s, 1: 0}, {0: Thua Thien-Hue, 1: 0}, {0: Th\u00fcringen, 1: 0}, {0: Tianjin, 1: 1}, {0: Tiaret, 1: 0}, {0: Tibet, 1: 0}, {0: Tien Giang, 1: 0}, {0: Tigray, 1: 0}, {0: Timis, 1: 0}, {0: Tirana, 1: 0}, {0: Tiroli, 1: 0}, {0: Tjumen, 1: 1}, {0: Tlemcen, 1: 0}, {0: Toa Baja, 1: 0}, {0: Toamasina, 1: 0}, {0: Tocantins, 1: 0}, {0: Tochigi, 1: 1}, {0: Tokat, 1: 0}, {0: Tokushima, 1: 0}, {0: Tokyo-to, 1: 3}, {0: Tolima, 1: 1}, {0: Tomsk, 1: 1}, {0: Tongatapu, 1: 0}, {0: Tortola, 1: 0}, {0: Toscana, 1: 1}, {0: Toskent, 1: 0}, {0: Toskent Shahri, 1: 1}, {0: Tottori, 1: 0}, {0: Toyama, 1: 0}, {0: Trabzon, 1: 0}, {0: Trentino-Alto Adige, 1: 0}, {0: Tripoli, 1: 1}, {0: Tripura, 1: 0}, {0: Trujillo, 1: 0}, {0: Tucum\u00e1n, 1: 1}, {0: Tula, 1: 1}, {0: Tulcea, 1: 0}, {0: Tungurahua, 1: 0}, {0: Tunis, 1: 1}, {0: Tutuila, 1: 0}, {0: Tver, 1: 1}, {0: Tyva, 1: 0}, {0: T\u00e1chira, 1: 0}, {0: T\u00e9bessa, 1: 0}, {0: T\u0161eljabinsk, 1: 2}, {0: T\u0161erkasy, 1: 0}, {0: T\u0161ernigiv, 1: 0}, {0: T\u0161ernivtsi, 1: 0}, {0: T\u0161et\u0161enia, 1: 0}, {0: T\u0161ita, 1: 0}, {0: T\u0161uvassia, 1: 1}, {0: Ubon Ratchathani, 1: 0}, {0: Ucayali, 1: 0}, {0: Udmurtia, 1: 1}, {0: Udon Thani, 1: 0}, {0: Ulaanbaatar, 1: 1}, {0: Uljanovsk, 1: 1}, {0: Umbria, 1: 0}, {0: Upolu, 1: 0}, {0: Uppsala l\u00e4n, 1: 0}, {0: Usak, 1: 0}, {0: Utah, 1: 0}, {0: Utrecht, 1: 0}, {0: Uttar Pradesh, 1: 12}, {0: Uttaranchal, 1: 0}, {0: Vaduz, 1: 0}, {0: Valencia, 1: 1}, {0: Valle, 1: 1}, {0: Valpara\u00edso, 1: 0}, {0: Van, 1: 0}, {0: Varna, 1: 0}, {0: Varsinais-Suomi, 1: 0}, {0: Vaud, 1: 0}, {0: Veneto, 1: 0}, {0: Veracruz, 1: 2}, {0: Veracruz-Llave, 1: 0}, {0: Viangchan, 1: 1}, {0: Victoria, 1: 1}, {0: Villa Clara, 1: 0}, {0: Vilna, 1: 1}, {0: Vinnytsja, 1: 1}, {0: Virginia, 1: 1}, {0: Vitebsk, 1: 0}, {0: Vladimir, 1: 0}, {0: Vojvodina, 1: 0}, {0: Volgograd, 1: 1}, {0: Vologda, 1: 0}, {0: Volynia, 1: 0}, {0: Voronez, 1: 1}, {0: Vrancea, 1: 0}, {0: V\u00e2lcea, 1: 0}, {0: V\u00e4sterbottens l\u00e4n, 1: 0}, {0: V\u00e4sternorrlands l\u00e4n, 1: 0}, {0: V\u00e4stmanlands l\u00e4n, 1: 0}, {0: V\u00fdchodn\u00e9 Slovensko, 1: 0}, {0: V\u00fdchodn\u00ed Cechy, 1: 0}, {0: Wakayama, 1: 1}, {0: Wales, 1: 0}, {0: Wallis, 1: 0}, {0: Warminsko-Mazurskie, 1: 0}, {0: Washington, 1: 1}, {0: Wasit, 1: 0}, {0: Wellington, 1: 0}, {0: West Australia, 1: 1}, {0: West Azerbaidzan, 1: 1}, {0: West Bengali, 1: 3}, {0: West Flanderi, 1: 0}, {0: West Greece, 1: 0}, {0: West G\u00f6tanmaan l\u00e4n, 1: 1}, {0: West Irian, 1: 0}, {0: West Island, 1: 0}, {0: West Java, 1: 4}, {0: West Kasai, 1: 1}, {0: West Kazakstan, 1: 0}, {0: Western, 1: 2}, {0: Western Cape, 1: 1}, {0: Western Mindanao, 1: 1}, {0: Western Visayas, 1: 2}, {0: Wielkopolskie, 1: 1}, {0: Wien, 1: 1}, {0: Wilayah Persekutuan, 1: 1}, {0: Wisconsin, 1: 1}, {0: Woqooyi Galbeed, 1: 0}, {0: Xinxiang, 1: 1}, {0: Yamagata, 1: 0}, {0: Yamaguchi, 1: 0}, {0: Yamalin Nenetsia, 1: 0}, {0: Yamanashi, 1: 0}, {0: Yamoussoukro, 1: 0}, {0: Yanggang, 1: 0}, {0: Yaracuy, 1: 0}, {0: Yazd, 1: 0}, {0: Yerevan, 1: 1}, {0: Yogyakarta, 1: 1}, {0: Yucat\u00e1n, 1: 1}, {0: Yunnan, 1: 1}, {0: Y\u00fcnlin, 1: 0}, {0: Zacatecas, 1: 0}, {0: Zachodnio-Pomorskie, 1: 1}, {0: Zamb\u00e9zia, 1: 0}, {0: Zanjan, 1: 0}, {0: Zanzibar West, 1: 0}, {0: Zapadn\u00ed Cechy, 1: 0}, {0: Zaporizzja, 1: 1}, {0: Zhejiang, 1: 3}, {0: Ziguinchor, 1: 0}, {0: Zinder, 1: 0}, {0: Zonguldak, 1: 0}, {0: Zufar, 1: 0}, {0: Zuid-Holland, 1: 2}, {0: Zulia, 1: 1}, {0: Zytomyr, 1: 0}, {0: Z\u00fcrich, 1: 0}, {0: al-Anbar, 1: 0}, {0: al-Asima, 1: 0}, {0: al-Bahr al-Abyad, 1: 0}, {0: al-Bahr al-Ahmar, 1: 0}, {0: al-Batina, 1: 0}, {0: al-Buhayra, 1: 0}, {0: al-Daqahliya, 1: 1}, {0: al-Faiyum, 1: 0}, {0: al-Gharbiya, 1: 2}, {0: al-Hasaka, 1: 0}, {0: al-Jazira, 1: 0}, {0: al-Khudud al-Samaliy, 1: 0}, {0: al-Manama, 1: 0}, {0: al-Minufiya, 1: 0}, {0: al-Minya, 1: 0}, {0: al-Najaf, 1: 0}, {0: al-Qadarif, 1: 0}, {0: al-Qadisiya, 1: 0}, {0: al-Qalyubiya, 1: 1}, {0: al-Qasim, 1: 0}, {0: al-Raqqa, 1: 0}, {0: al-Shamal, 1: 0}, {0: al-Sharqiya, 1: 1}, {0: al-Sulaymaniya, 1: 1}, {0: al-Tamim, 1: 1}, {0: al-Zarqa, 1: 1}, {0: al-Zawiya, 1: 0}, {0: \u00c5rhus, 1: 0}, {0: \u00c7orum, 1: 0}, {0: \u00cele-de-France, 1: 1}, {0: \u00d6rebros l\u00e4n, 1: 0}, {0: \u0160iauliai, 1: 0}, {0: \u0160irak, 1: 0}, {0: \u2013, 1: 1}]\n"
    },
    {
        "id": "bb61e809f33770b27fd77c6d2a77619b07b9690e22beadb7d282d78fffe27ef1",
        "db_name": "world_1",
        "context_name": "World1Context",
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "linq": "context.Countries.GroupBy(row => new { row.GovernmentForm }).Where(group => group.Average(row => row.LifeExpectancy) > 72).Select(group => new { SumPopulation = group.Select(row => row.Population).Sum(), group.Key.GovernmentForm }).ToList();",
        "generated": "context.Countries.GroupBy(row => new { row.GovernmentForm }).Select(group => new { group.Key.GovernmentForm, TotalPopulation = group.Sum(row => row.Population) }).Where(row => row.AverageLifeExpectancy > 72).Select(row => new { row.GovernmentForm, TotalPopulation = row.TotalPopulation }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,200): error CS1061: '<anonymous type: string GovernmentForm, int TotalPopulation>' does not contain a definition for 'AverageLifeExpectancy' and no accessible extension method 'AverageLifeExpectancy' accepting a first argument of type '<anonymous type: string GovernmentForm, int TotalPopulation>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.76"
    },
    {
        "id": "90b318347a41b72ea00cb9138d94b555e6bd6aacded8c10344ebda2b6182a0f8",
        "db_name": "world_1",
        "context_name": "World1Context",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "linq": "context.Countries.OrderByDescending(row => row.SurfaceArea).Select(row => new { row.Name, row.SurfaceArea }).Take(5).ToList();",
        "generated": "context.Countries.OrderByDescending(row => row.SurfaceArea).Select(row => new { row.Name, row.SurfaceArea }).Take(5).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "7de5587a5d418d718c23cdd2e8e1f5cfbf97870a9ebd032233c308345975bf6e",
        "db_name": "world_1",
        "context_name": "World1Context",
        "question": "What are names of countries with the top 3 largest population?",
        "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "linq": "context.Countries.OrderByDescending(row => row.Population).Select(row => new { row.Name }).Take(3).ToList();",
        "generated": "context.Countries.OrderByDescending(row => row.Population).Select(row => new { row.Name }).Take(3).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "c465c2b00a90dcf9b3df9c1d62fdbdfaf8f08738f66fe29af66ca5a6e4dc5f5e",
        "db_name": "world_1",
        "context_name": "World1Context",
        "question": "What are the names of the nations with the 3 lowest populations?",
        "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "linq": "context.Countries.OrderBy(row => row.Population).Select(row => new { row.Name }).Take(3).ToList();",
        "generated": "context.Countries.OrderByDescending(row => row.Population).Select(row => new { row.Name }).Take(3).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Antarctica}, {0: French Southern territories}, {0: Bouvet Island}]\nLINQ Results: [{0: China}, {0: India}, {0: United States}]\n"
    },
    {
        "id": "3b44475f6342097676041f0c4c2fe7a43cef0b6a28c05174896ef12e6d9f04f6",
        "db_name": "world_1",
        "context_name": "World1Context",
        "question": "how many countries are in Asia?",
        "sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "linq": "context.Countries.Where(row => row.Continent == \"Asia\").Count();",
        "generated": "context.Countries.Where(row => row.Continent == \"Asia\").Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "379e06c7d947d2fbd8780ab06710ac44965d69554caa26e651b41591e99b1077",
        "db_name": "world_1",
        "context_name": "World1Context",
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "linq": "context.Countries.Where(row => row.Continent == \"north america\" && row.SurfaceArea > 3000).GroupBy(row => 1).Select(group => new { SumPopulation = group.Select(row => row.Population).Sum(), AverageSurfaceArea = group.Select(row => row.SurfaceArea).Average() }).ToList();",
        "generated": "context.Countries.Where(row => row.Continent == \"North America\" && row.SurfaceArea > 3000).Select(row => new { row.Population, row.SurfaceArea }).Sum(row => row.SurfaceArea) / context.Countries.Where(row => row.Continent == \"North America\" && row.SurfaceArea > 3000).Select(row => new { row.Population, row.SurfaceArea }).Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: []\nLINQ Results: [{0: 1344763.7222222222}]\n"
    },
    {
        "id": "99acca0ad73b36d076aed63876cb377392b0b1110470bf0994210660eb217995",
        "db_name": "world_1",
        "context_name": "World1Context",
        "question": "What are the cities whose population is between 160000 and 900000?",
        "sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "linq": "context.Cities.Where(row => row.Population >= 160000 && row.Population <= 900000).Select(row => new { row.Name }).ToList();",
        "generated": "context.Cities.Where(row => row.Population >= 160000 && row.Population <= 900000).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "3722a015deee9da81391930571553c06e080c4a36b5c741094744e103ce9e778",
        "db_name": "world_1",
        "context_name": "World1Context",
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "sql": "select name from city where population between 160000 and 900000",
        "linq": "context.Cities.Where(row => row.Population >= 160000 && row.Population <= 900000).Select(row => new { row.Name }).ToList();",
        "generated": "context.Cities.Where(row => row.Population >= 160000 && row.Population <= 900000).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "1ddf2b3f1d176a077d5801b95e13904b20c8a5db5bfff2a73e038f77fedc2a8a",
        "db_name": "world_1",
        "context_name": "World1Context",
        "question": "Which language is spoken by the largest number of countries?",
        "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Countrylanguages.GroupBy(row => new { row.Language }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Language }).Take(1).ToList();",
        "generated": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Language }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Language }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "6cd4027cab6d8a09048057d186ce34d5d289f7bd8715047a5864ed88676428d8",
        "db_name": "world_1",
        "context_name": "World1Context",
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "linq": "context.Countrylanguages.Where(row => row.Language == \"Spanish\").GroupBy(row => new { row.CountryCode }).Select(group => new { Count = group.Count(), MaxPercentage = group.Select(row => row.Percentage).Max() }).ToList();",
        "generated": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"Spanish\").Select(row => row.T2.Percentage).Sum();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1, 1: 7.4}, {0: 1, 1: 44.6}, {0: 1, 1: 96.8}, {0: 1, 1: 31.6}, {0: 1, 1: 87.7}, {0: 1, 1: 0.7}, {0: 1, 1: 89.7}, {0: 1, 1: 99}, {0: 1, 1: 97.5}, {0: 1, 1: 100}, {0: 1, 1: 98}, {0: 1, 1: 93}, {0: 1, 1: 74.4}, {0: 1, 1: 0.4}, {0: 1, 1: 64.7}, {0: 1, 1: 97.2}, {0: 1, 1: 92.1}, {0: 1, 1: 97.6}, {0: 1, 1: 76.8}, {0: 1, 1: 79.8}, {0: 1, 1: 51.3}, {0: 1, 1: 55.1}, {0: 1, 1: 100}, {0: 1, 1: 0.6}, {0: 1, 1: 95.7}, {0: 1, 1: 7.5}, {0: 1, 1: 96.9}, {0: 1, 1: 13.3}]\nLINQ Results: [{0: 1849.3999999999996}]\n"
    },
    {
        "id": "63df7b6e56c6bf5a1bf438478436003473857f9de58b1c6e35da900debffe79f",
        "db_name": "world_1",
        "context_name": "World1Context",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "linq": "context.Countrylanguages.Where(row => row.Language == \"Spanish\").GroupBy(row => new { row.CountryCode }).Select(group => new { group.Key.CountryCode, MaxPercentage = group.Select(row => row.Percentage).Max() }).ToList();",
        "generated": "context.Countries.Join(context.Countrylanguages, T1 => T1.Code, T2 => T2.CountryCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Language == \"Spanish\" && row.T2.Percentage == context.Countrylanguages.Select(row => row.Percentage).Max()).Select(row => row.T1.Code).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: ABW, 1: 7.4}, {0: AND, 1: 44.6}, {0: ARG, 1: 96.8}, {0: BLZ, 1: 31.6}, {0: BOL, 1: 87.7}, {0: CAN, 1: 0.7}, {0: CHL, 1: 89.7}, {0: COL, 1: 99}, {0: CRI, 1: 97.5}, {0: CUB, 1: 100}, {0: DOM, 1: 98}, {0: ECU, 1: 93}, {0: ESP, 1: 74.4}, {0: FRA, 1: 0.4}, {0: GTM, 1: 64.7}, {0: HND, 1: 97.2}, {0: MEX, 1: 92.1}, {0: NIC, 1: 97.6}, {0: PAN, 1: 76.8}, {0: PER, 1: 79.8}, {0: PRI, 1: 51.3}, {0: PRY, 1: 55.1}, {0: SLV, 1: 100}, {0: SWE, 1: 0.6}, {0: URY, 1: 95.7}, {0: USA, 1: 7.5}, {0: VEN, 1: 96.9}, {0: VIR, 1: 13.3}]\nLINQ Results: [{0: CUB}, {0: SLV}]\n"
    },
    {
        "id": "3ef2656789927bf7ee4e8e0814673060bd74feab00994dae6e04a36f57052d34",
        "db_name": "hospital_1",
        "context_name": "Hospital1Context",
        "question": "Find the names of procedures which physician John Wen was trained in.",
        "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "linq": "context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => new { row.T3.Name }).ToList();",
        "generated": "context.TrainedIns.Where(row => row.Physician == context.Physicians.Where(row => row.Name == \"John Wen\").Select(row => row.EmployeeId).First()).Select(row => row.TreatmentNavigation.Name).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "3341bc5962be922357f41c4405f4c282699c5f43b3fe622a2be423ae243e3866",
        "db_name": "hospital_1",
        "context_name": "Hospital1Context",
        "question": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.",
        "sql": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "linq": "context.Procedures.Where(row => row.Cost > 1000).Select(row => row.Name).Union(context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => row.T3.Name)).ToList();",
        "generated": "context.Procedures.Join(context.TrainedIns, T1 => T1.Treatment, T2 => T2.Treatment, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CertificationExpires >= DateOnly.Parse(\"2022-01-01\") || row.T1.Cost > 1000).Select(row => new { row.T1.Name }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,73): error CS1061: 'Procedure' does not contain a definition for 'Treatment' and no accessible extension method 'Treatment' accepting a first argument of type 'Procedure' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.43"
    },
    {
        "id": "6ecf8bcc2a5f164dd303f63dba0b18e01c6337c53160848f875eb85c5a300ab2",
        "db_name": "hospital_1",
        "context_name": "Hospital1Context",
        "question": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?",
        "sql": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "linq": "context.Procedures.Where(row => row.Cost > 1000).Select(row => row.Name).Except(context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => row.T3.Name)).ToList();",
        "generated": "context.Procedures.Where(row => row.Cost > 1000 &&!context.TrainedIns.Select(row => row.Physician).Contains(5)).Select(row => row.Name).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: []\nLINQ Results: [{0: Reverse Rhinopodoplasty}, {0: Obtuse Pyloric Recombobulation}, {0: Folded Demiophtalmectomy}, {0: Complete Walletectomy}, {0: Obfuscated Dermogastrotomy}, {0: Reversible Pancreomyoplasty}]\n"
    },
    {
        "id": "ab5be97444b8277b42ec887b1b7a82f2b8030dd2f9f4a79dd7239eb0c313e78d",
        "db_name": "hospital_1",
        "context_name": "Hospital1Context",
        "question": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.",
        "sql": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "linq": "context.Procedures.Where(row => row.Cost < 5000).Select(row => row.Name).Intersect(context.Physicians.Join(context.TrainedIns, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Procedures, joined => joined.T2.Treatment, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"John Wen\").Select(row => row.T3.Name)).ToList();",
        "generated": "context.Procedures.Join(context.TrainedIns, T1 => T1.Code, T2 => T2.Treatment, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Physician == \"John Wen\" && row.T1.Cost < 5000).Select(row => new { row.T1.Name }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,140): error CS0019: Operator '==' cannot be applied to operands of type 'int' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.66"
    },
    {
        "id": "6a262e77ae220a438a3a5fbbda31adc3279c2a3c86b4d6a4e9d57f6a0654d505",
        "db_name": "hospital_1",
        "context_name": "Hospital1Context",
        "question": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.",
        "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'",
        "linq": "context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Surgery\").Select(row => row.T1.Name).Intersect(context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Psychiatry\").Select(row => row.T1.Name)).ToList();",
        "generated": "context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Department == 2 && row.T2.Department == 3).Select(row => new { row.T1.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "792552fb730d53fa4957e218ac8ec6bb5d02913271ba9b19e6dc4de8202b51d7",
        "db_name": "hospital_1",
        "context_name": "Hospital1Context",
        "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
        "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'",
        "linq": "context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Department, T3 => T3.DepartmentId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Surgery\" || row.T3.Name == \"Psychiatry\").Select(row => new { row.T1.Name }).ToList();",
        "generated": "context.Physicians.Join(context.AffiliatedWiths, T1 => T1.EmployeeId, T2 => T2.Physician, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Department == \"Surgery\" || row.T2.Department == \"Psychiatry\").Select(row => new { row.T1.Name }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,185): error CS0019: Operator '==' cannot be applied to operands of type 'int' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.50"
    },
    {
        "id": "03e90e42ee94c38d2d3d76571c09d11040d649da9f0a02ab19016b0385cb5b83",
        "db_name": "hospital_1",
        "context_name": "Hospital1Context",
        "question": "Find the names of patients who are not using the medication of Procrastin-X.",
        "sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'",
        "linq": "context.Patients.Select(row => row.Name).Except(context.Patients.Join(context.Prescribes, T1 => T1.Ssn, T2 => T2.Patient, (T1, T2) => new { T1, T2 }).Join(context.Medications, joined => joined.T2.Medication, T3 => T3.Code, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Procrastin-X\").Select(row => row.T1.Name)).ToList();",
        "generated": "context.Medications.Where(row => row.Name!= \"Procrastin-X\").Select(row => new { row.Name }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Dennis Doe}, {0: Grace Ritchie}, {0: Random J. Patient}]\nLINQ Results: [{0: Thesisin}, {0: Awakin}, {0: Crescavitin}, {0: Melioraurin}]\n"
    },
    {
        "id": "ff18b5d7776c8b9d136d76ea72193515d7a4e66611ec8cde1a7f4290c127fab5",
        "db_name": "hospital_1",
        "context_name": "Hospital1Context",
        "question": "Find the number of patients who are not using the medication of Procrastin-X.",
        "sql": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "linq": "context.Patients.Where(row => !context.Prescribes.Join(context.Medications, T1 => T1.Medication, T2 => T2.Code, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Procrastin-X\").Select(row => row.T1.Patient).Contains(row.Ssn)).Count();",
        "generated": "context.Patients.Join(context.Prescribes, t1 => t1.Ssn, t2 => t2.Patient, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Medication == \"Procrastin-X\").Count();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,135): error CS0019: Operator '==' cannot be applied to operands of type 'int' and 'string' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.53"
    },
    {
        "id": "fef4f359f7c6798aa58803b7bd7ef0fde57de4d99e5a1221ff883d474413c7b2",
        "db_name": "hospital_1",
        "context_name": "Hospital1Context",
        "question": "How many appointments are there?",
        "sql": "SELECT count(*) FROM appointment",
        "linq": "context.Appointments.Count();",
        "generated": "context.Appointments.Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "4a3597f4e3f717005a8fc76663fe1ff7a0f0f13acb67e1511d4997f8e670a716",
        "db_name": "hospital_1",
        "context_name": "Hospital1Context",
        "question": "Find the names of nurses who are on call.",
        "sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse",
        "linq": "context.Nurses.Join(context.OnCalls, T1 => T1.EmployeeId, T2 => T2.Nurse, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name }).Distinct().ToList();",
        "generated": "context.Nurses.Join(context.OnCalls, T1 => T1.EmployeeId, T2 => T2.Nurse, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Name }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Carla Espinosa}, {0: Laverne Roberts}, {0: Paul Flowers}]\nLINQ Results: [{0: Carla Espinosa}, {0: Carla Espinosa}, {0: Laverne Roberts}, {0: Paul Flowers}, {0: Paul Flowers}, {0: Paul Flowers}]\n"
    },
    {
        "id": "c465cbf0d850a68dad116e61a62f259976b418cff7032322ae32266513eb30cc",
        "db_name": "manufacturer",
        "context_name": "ManufacturerContext",
        "question": "Find the number of funiture types produced by each manufacturer as well as the company names.",
        "sql": "SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id",
        "linq": "context.Manufacturers.Join(context.FurnitureManufactes, t1 => t1.ManufacturerId, t2 => t2.ManufacturerId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.ManufacturerId }).Select(group => new { Count = group.Count(), group.First().t1.Name }).ToList();",
        "generated": "context.FurnitureManufactes.GroupBy(row => new { row.ManufacturerId }).Select(group => new { group.Key.ManufacturerId, group.Count(), context.Manufacturers.Where(row => group.Key.ManufacturerId == row.ManufacturerId).Select(row => row.Name).Take(1).ToList()[0] }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,154): error CS0746: Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access. [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.46"
    },
    {
        "id": "b34fa678959f95d337500f848847899c6cb6569b6bc628943055783d509b40c6",
        "db_name": "manufacturer",
        "context_name": "ManufacturerContext",
        "question": "Give me the names and prices of furnitures which some companies are manufacturing.",
        "sql": "SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID",
        "linq": "context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Select(row => new { row.t1.Name, row.t2.PriceInDollar }).ToList();",
        "generated": "context.FurnitureManufactes.Join(context.Manufacturers, T1 => T1.ManufacturerId, T2 => T2.ManufacturerId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.Furniture.Name, row.T1.PriceInDollar }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "96f6d286632cb9fc0e372cfa305556c944080b275a6fc8b0634228a99a200a23",
        "db_name": "manufacturer",
        "context_name": "ManufacturerContext",
        "question": "Find the market shares and names of furnitures which no any company is producing in our records.",
        "sql": "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)",
        "linq": "context.Furnitures.Where(row => !context.FurnitureManufactes.Select(row => row.FurnitureId).Contains(row.FurnitureId)).Select(row => new { row.MarketRate, row.Name }).ToList();",
        "generated": "context.Furnitures.Where(row =>!context.FurnitureManufactes.Select(row => row.FurnitureId).Contains(row.FurnitureId)).Select(row => new { row.Name, row.MarketRate }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 3.5, 1: Bench}, {0: 2, 1: Four-poster bed}]\nLINQ Results: [{0: Bench, 1: 3.5}, {0: Four-poster bed, 1: 2}]\n"
    },
    {
        "id": "3cbf8983a1358d0c1d85ac392367d68c2d8cd4be89340d1448567fbc4f9373ae",
        "db_name": "manufacturer",
        "context_name": "ManufacturerContext",
        "question": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.",
        "sql": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10",
        "linq": "context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Join(context.Manufacturers, joined => joined.t2.ManufacturerId, t3 => t3.ManufacturerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.NumOfComponent < 6).Select(row => row.t3.Name).Intersect(context.Furnitures.Join(context.FurnitureManufactes, t1 => t1.FurnitureId, t2 => t2.FurnitureId, (t1, t2) => new { t1, t2 }).Join(context.Manufacturers, joined => joined.t2.ManufacturerId, t3 => t3.ManufacturerId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.NumOfComponent > 10).Select(row => row.t3.Name)).ToList();",
        "generated": "context.Manufacturers.Join(context.FurnitureManufactes, T1 => T1.ManufacturerId, T2 => T2.ManufacturerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Where(group => group.Select(row => row.T2.FurnitureId).Distinct().Count() == 2).Select(group => new { group.Key.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "836d4e431821c35d8f96d22ea886139bb2b5638bdaf61cc1dfe6e9d29094027c",
        "db_name": "perpetrator",
        "context_name": "PerpetratorContext",
        "question": "List the names of people that are not perpetrators.",
        "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)",
        "linq": "context.People.Where(row => !context.Perpetrators.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();",
        "generated": "context.People.Where(row =>!context.Perpetrators.Select(row => row.PeopleId).Contains(row.PeopleId)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "c39fdba903229d15466e90e1525edd1efdf9b43b74b8d0caadd33fda54a2a54c",
        "db_name": "perpetrator",
        "context_name": "PerpetratorContext",
        "question": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.",
        "sql": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20",
        "linq": "context.Perpetrators.Where(row => row.Injured > 50).Select(row => row.Country).Intersect(context.Perpetrators.Where(row => row.Injured < 20).Select(row => row.Country)).ToList();",
        "generated": "context.People.Join(context.Perpetrators, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Injured > 50 && row.t2.Injured < 20).Select(row => new { row.t1.Country }).Distinct().ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,212): error CS1061: 'Person' does not contain a definition for 'Country' and no accessible extension method 'Country' accepting a first argument of type 'Person' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.46"
    },
    {
        "id": "3f2ca213396d263714f4b5bb79adb4679d323d6145285d8ca47b0799c1815aad",
        "db_name": "perpetrator",
        "context_name": "PerpetratorContext",
        "question": "How many distinct locations of perpetrators are there?",
        "sql": "SELECT count(DISTINCT LOCATION) FROM perpetrator",
        "linq": "context.Perpetrators.Select(row => row.Location).Distinct().Count();",
        "generated": "context.People.Select(row => row.Location).Distinct().Count();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,53): error CS1061: 'Person' does not contain a definition for 'Location' and no accessible extension method 'Location' accepting a first argument of type 'Person' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.62"
    },
    {
        "id": "1a636b1853501e0cc715caaf857cf3d47aef4b6bc7e416ec0f15663e0f7c0aee",
        "db_name": "perpetrator",
        "context_name": "PerpetratorContext",
        "question": "Show the date of the tallest perpetrator.",
        "sql": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "linq": "context.People.Join(context.Perpetrators, T1 => T1.PeopleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Height).Select(row => new { row.T2.Date }).Take(1).ToList();",
        "generated": "context.Perpetrators.OrderByDescending(row => row.People.Height).Select(row => row.Date).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b5c3548d0c52fd1046debc298147f25ff507b11198e916857cd0223e11afaff1",
        "db_name": "perpetrator",
        "context_name": "PerpetratorContext",
        "question": "In which year did the most recent crime happen?",
        "sql": "SELECT max(YEAR) FROM perpetrator;",
        "linq": "context.Perpetrators.Select(row => row.Year).Max();",
        "generated": "context.Perpetrators.OrderByDescending(row => row.Year).Select(row => new { row.Year }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "a1b32109efaead55354b3edc7ef42414435f7b6a857fbfdd498cdbe782d4b489",
        "db_name": "storm_record",
        "context_name": "StormRecordContext",
        "question": "What are the region names affected by the storm with a number of deaths of least 10?",
        "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10",
        "linq": "context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.NumberDeaths >= 10).Select(row => new { row.T2.RegionName }).ToList();",
        "generated": "context.Regions.Join(context.AffectedRegions, t1 => t1.RegionId, t2 => t2.RegionId, (t1, t2) => new { t1, t2 }).Join(context.Storms, joined => joined.t2.StormId, t3 => t3.StormId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.NumberDeaths >= 10).Select(row => new { row.t1.RegionName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "36c51af596f7a74bb4c18d8ce44084a2775522b9b9f6f5c95ecd305d9281f366",
        "db_name": "storm_record",
        "context_name": "StormRecordContext",
        "question": "Show all storm names affecting region \"Denmark\".",
        "sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
        "linq": "context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.RegionName == \"Denmark\").Select(row => new { row.T3.Name }).ToList();",
        "generated": "context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).Join(context.Regions, joined => joined.T2.RegionId, T3 => T3.RegionId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.RegionName == \"Denmark\").Select(row => row.T1.Name).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "7f0e59ec4ab93b5fa8e405c43e186d71e84cf75dcb41b0925f2496a15f836b91",
        "db_name": "storm_record",
        "context_name": "StormRecordContext",
        "question": "Show the region name with at least two storms.",
        "sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "linq": "context.Regions.Join(context.AffectedRegions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.RegionId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.RegionName }).ToList();",
        "generated": "context.Regions.Join(context.Storms, T1 => T1.RegionId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.RegionId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.RegionName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Afghanistan}, {0: Albania}]\nLINQ Results: []\n"
    },
    {
        "id": "34fbc5dcf33b45e5653d8987efa55bc3e11d6f707fe7487c32a76c6d172220ff",
        "db_name": "storm_record",
        "context_name": "StormRecordContext",
        "question": "Find the names of the regions which were affected by the storm that killed the greatest number of people.",
        "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1",
        "linq": "context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T3.NumberDeaths).Select(row => new { row.T2.RegionName }).Take(1).ToList();",
        "generated": "context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).Join(context.Regions, joined => joined.T2.RegionId, T3 => T3.RegionId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T1.NumberDeaths).Select(row => new { row.T3.RegionName }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "bd478c5cf9b72d30f2fa69d8c3c9a01bc5f0b95d40f53565ed46bbbf720f2d12",
        "db_name": "storm_record",
        "context_name": "StormRecordContext",
        "question": "Find the name of the storm that affected both Afghanistan and Albania regions.",
        "sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'",
        "linq": "context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.RegionName == \"Afghanistan\").Select(row => row.T3.Name).Intersect(context.AffectedRegions.Join(context.Regions, T1 => T1.RegionId, T2 => T2.RegionId, (T1, T2) => new { T1, T2 }).Join(context.Storms, joined => joined.T1.StormId, T3 => T3.StormId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.RegionName == \"Albania\").Select(row => row.T3.Name)).ToList();",
        "generated": "context.Storms.Join(context.AffectedRegions, T1 => T1.StormId, T2 => T2.StormId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.RegionId == 1 || row.T2.RegionId == 2).Select(row => new { row.T1.Name }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: One}]\nLINQ Results: [{0: One}, {0: Four}, {0: Five}]\n"
    },
    {
        "id": "3697552a5f47056a8bbb8cb2e1eabc01c621ae62bcea81dd138b8f2a1301b950",
        "db_name": "cre_Theme_park",
        "context_name": "CreThemeParkContext",
        "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.",
        "sql": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "linq": "context.TouristAttractions.GroupBy(row => new { row.HowToGetThere }).Select(group => new { group.Key.HowToGetThere, Count = group.Count() }).ToList();",
        "generated": "context.TouristAttractions.Select(row => new { row.HowToGetThere, row.TouristAttractionId }).GroupBy(row => new { row.HowToGetThere }).Select(group => new { group.Key.HowToGetThere, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "76c78528b5b616254989d42089c60e36c5fd1e32c228056801862024369fff87",
        "db_name": "cre_Theme_park",
        "context_name": "CreThemeParkContext",
        "question": "Show different tourist attractions' names, ids, and the corresponding number of visits.",
        "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID",
        "linq": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId, Count = group.Count() }).ToList();",
        "generated": "context.Visits.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Select(group => new { group.Key.TouristAttractionId, T2Name = group.Select(row => row.T2.Name).Distinct().First(), Count = group.Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: UK gallery, 1: 2701, 2: 1}, {0: flying elephant, 1: 5076, 2: 1}, {0: US museum, 1: 6476, 2: 4}, {0: fun games, 1: 6523, 2: 2}, {0: history gallery, 1: 6653, 2: 1}, {0: exploration trial, 1: 6852, 2: 4}, {0: presidents hall, 1: 8429, 2: 1}, {0: jungle cruise, 1: 8698, 2: 3}, {0: fun shops, 1: 9360, 2: 1}, {0: parking, 1: 9919, 2: 2}]\nLINQ Results: [{0: 2701, 1: UK gallery, 2: 1}, {0: 5076, 1: flying elephant, 2: 1}, {0: 6476, 1: US museum, 2: 4}, {0: 6523, 1: fun games, 2: 2}, {0: 6653, 1: history gallery, 2: 1}, {0: 6852, 1: exploration trial, 2: 4}, {0: 8429, 1: presidents hall, 2: 1}, {0: 8698, 1: jungle cruise, 2: 3}, {0: 9360, 1: fun shops, 2: 1}, {0: 9919, 1: parking, 2: 2}]\n"
    },
    {
        "id": "40c162a8896971760690ed0a3cce14ec1e981e5fb8d4bd0d7d9536ed4a54cdd8",
        "db_name": "cre_Theme_park",
        "context_name": "CreThemeParkContext",
        "question": "Show the names and ids of tourist attractions that are visited at least two times.",
        "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
        "linq": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.Name, group.Key.TouristAttractionId }).ToList();",
        "generated": "context.Visits.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.T2.TouristAttractionId, group.Key.T2.Name }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,308): error CS1061: '<anonymous type: int TouristAttractionId>' does not contain a definition for 'T2' and no accessible extension method 'T2' accepting a first argument of type '<anonymous type: int TouristAttractionId>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.26"
    },
    {
        "id": "4fa59725b23095b103e09eb95927dae86b52a9ebd62fd0109f0364977bf9d3f9",
        "db_name": "cre_Theme_park",
        "context_name": "CreThemeParkContext",
        "question": "Show the names and ids of tourist attractions that are visited at most once.",
        "sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1",
        "linq": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.TouristAttractionId }).Where(group => group.Count() <= 1).Select(group => new { group.First().T1.Name, group.First().T1.TouristAttractionId }).ToList();",
        "generated": "context.Visits.GroupBy(row => new { row.TouristAttractionId }).Where(group => group.Count() == 1).Select(group => new { group.Key.TouristAttractionId, group.Key.TouristAttractionName }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,181): error CS1061: '<anonymous type: int TouristAttractionId>' does not contain a definition for 'TouristAttractionName' and no accessible extension method 'TouristAttractionName' accepting a first argument of type '<anonymous type: int TouristAttractionId>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.51"
    },
    {
        "id": "33131076abae0581c9d98d887da9d6535f898cbfc4b623a58b6b5c9c0f323afb",
        "db_name": "cre_Theme_park",
        "context_name": "CreThemeParkContext",
        "question": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?",
        "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"",
        "linq": "context.Locations.Join(context.TouristAttractions, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Address == \"660 Shea Crescent\" || row.T2.HowToGetThere == \"walk\").Select(row => new { row.T2.Name }).ToList();",
        "generated": "context.TouristAttractions.Where(row => row.HowToGetThere == \"Walk\" || row.Address == \"660 Shea Crescent\").Select(row => new { row.Name }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,95): error CS1061: 'TouristAttraction' does not contain a definition for 'Address' and no accessible extension method 'Address' accepting a first argument of type 'TouristAttraction' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.38"
    },
    {
        "id": "9afcfce8aaf3f8ca6121e3b594a259a6db91b99aad9e94defd9aae436ca5770e",
        "db_name": "cre_Theme_park",
        "context_name": "CreThemeParkContext",
        "question": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?",
        "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"",
        "linq": "context.Locations.Join(context.TouristAttractions, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Address == \"254 Ottilie Junction\" || row.T2.HowToGetThere == \"bus\").Select(row => new { row.T2.Name }).ToList();",
        "generated": "context.TouristAttractions.Where(row => row.HowToGetThere == \"bus\" || row.Location.Address == \"254 Ottilie Junction\").Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "5e8767e24a9ec9eade2c847720b9e75bf807e0d98b52ef54d7a28138cb9bfcbe",
        "db_name": "cre_Theme_park",
        "context_name": "CreThemeParkContext",
        "question": "What are the names of the tourist attractions Vincent and Marcelle visit?",
        "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"",
        "linq": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Vincent\").Select(row => row.T1.Name).Intersect(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Marcelle\").Select(row => row.T1.Name)).ToList();",
        "generated": "context.Visits.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Join(context.Visitors, joined => joined.T1.TouristId, T3 => T3.TouristId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.TouristDetails == \"Vincent\" || row.T3.TouristDetails == \"Marcelle\").Select(row => new { row.T2.Name }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: parking}]\nLINQ Results: [{0: flying elephant}, {0: exploration trial}, {0: parking}, {0: parking}, {0: UK gallery}]\n"
    },
    {
        "id": "fba68a4b5d3cb573cd8061638fa634ffe47b68bfa01ab355610f263a683c5f13",
        "db_name": "cre_Theme_park",
        "context_name": "CreThemeParkContext",
        "question": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?",
        "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "linq": "context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Alison\").Select(row => row.T1.Name).Except(context.TouristAttractions.Join(context.Visits, T1 => T1.TouristAttractionId, T3 => T3.TouristAttractionId, (T1, T3) => new { T1, T3 }).Join(context.Visitors, joined => joined.T3.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T2.TouristDetails == \"Rosalind\").Select(row => row.T1.Name)).ToList();",
        "generated": "context.Visits.Join(context.TouristAttractions, T1 => T1.TouristAttractionId, T2 => T2.TouristAttractionId, (T1, T2) => new { T1, T2 }).Join(context.Visits, joined => joined.T1.TouristId, T2 => T2.TouristId, (joined, T2) => new { joined.T1, joined.T2, T2 }).Where(row => row.T2.VisitDetails == \"Alison\" && row.T1.T2.VisitDetails!= \"Rosalind\").Select(row => new { row.T1.T2.Name }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,272): error CS0833: An anonymous type cannot have multiple properties with the same name [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.99"
    },
    {
        "id": "ea6121eb6416967cecf94a3e6a316a9bec2873410cdd6b9afa993b5557498b93",
        "db_name": "cre_Theme_park",
        "context_name": "CreThemeParkContext",
        "question": "How many tourists did not make any visit?",
        "sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
        "linq": "context.Visitors.Where(row => !context.Visits.Select(row => row.TouristId).Contains(row.TouristId)).Count();",
        "generated": "context.Visits.Count(row => row.VisitDetails == \"No visit\");",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 9}]\nLINQ Results: [{0: 0}]\n"
    },
    {
        "id": "b4e1fa0c226bd2ca3f99d6c1893456ba702c58174b9fd1ebab396ccbe41e9b1a",
        "db_name": "soccer_2",
        "context_name": "Soccer2Context",
        "question": "Find the names of states that have some college students playing in goalie and mid positions.",
        "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'",
        "linq": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"goalie\").Select(row => row.T1.State).Intersect(context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"mid\").Select(row => row.T1.State)).ToList();",
        "generated": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"Y\" && (row.T2.PPos == \"Goalie\" || row.T2.PPos == \"Mid\")).Select(row => new { row.T1.State }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: LA}]\nLINQ Results: []\n"
    },
    {
        "id": "9eb4c921430c3508146ced2cc8b0fc719ec46f842097a6ba92872c31bea0bde6",
        "db_name": "soccer_2",
        "context_name": "Soccer2Context",
        "question": "How many schools have some students playing in goalie and mid positions.",
        "sql": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "linq": "context.Tryouts.Where(row => row.PPos == \"goalie\").Select(row => row.CName).Intersect(context.Tryouts.Where(row => row.PPos == \"mid\").Select(row => row.CName)).Count();",
        "generated": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"Y\").GroupBy(row => new { row.T1.CName }).Where(group => group.Any(row => row.T2.PPos == \"Goalie\" || row.T2.PPos == \"Mid\")).Select(group => group.Key.CName).Distinct().Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1}]\nLINQ Results: [{0: 0}]\n"
    },
    {
        "id": "deff87356aa7e57f1e37da357baf04e13d89136159c98370a50ce6bc9f7766fc",
        "db_name": "soccer_2",
        "context_name": "Soccer2Context",
        "question": "Find the names of schools that have some players in the mid position but not in the goalie position.",
        "sql": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "linq": "context.Tryouts.Where(row => row.PPos == \"mid\").Select(row => row.CName).Except(context.Tryouts.Where(row => row.PPos == \"goalie\").Select(row => row.CName)).ToList();",
        "generated": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"Mid\" && row.T2.Decision == \"Y\").Select(row => row.T1.CName).Except(context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"Goalie\" && row.T2.Decision == \"Y\").Select(row => row.T1.CName)).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: OU}]\nLINQ Results: []\n"
    },
    {
        "id": "b84e9b02c896ace420b1be93938397fd6a9aae4abbc31f863f26d1d5f13e4450",
        "db_name": "soccer_2",
        "context_name": "Soccer2Context",
        "question": "Find the names of states that have some college students playing in the mid position but not in the goalie position.",
        "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'",
        "linq": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"mid\").Select(row => row.T1.State).Except(context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"goalie\").Select(row => row.T1.State)).ToList();",
        "generated": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Join(context.Tryouts, joined => joined.T2.PPos, T3 => T3.PPos, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PPos == \"mid\" && row.T3.PPos!= \"goalie\").Select(row => new { row.T1.State }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: OK}]\nLINQ Results: [{0: OK}, {0: LA}]\n"
    },
    {
        "id": "64cd30ab6c6e5b16df9a4ce1e0431593808d08c1529012dbe72f19a966297ab8",
        "db_name": "soccer_2",
        "context_name": "Soccer2Context",
        "question": "How many states that have some college students playing in the mid position but not in the goalie position.",
        "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')",
        "linq": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"mid\").Select(row => row.T1.State).Except(context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"goalie\").Select(row => row.T1.State)).Count();",
        "generated": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.PPos == \"mid\" && row.T2.Decision!= \"G\").GroupBy(row => row.T1.State).Select(group => new { group.Key }).Distinct().Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1}]\nLINQ Results: [{0: 2}]\n"
    },
    {
        "id": "43e01ccb425bf171e0442f9ee11169e3bacf1ad0eb82a5c803df7959c9b33c39",
        "db_name": "soccer_2",
        "context_name": "Soccer2Context",
        "question": "Find the states where have the colleges whose enrollments are less than the largest size.",
        "sql": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "linq": "context.Colleges.Where(row => row.Enr < context.Colleges.Select(row => row.Enr).Max()).Select(row => new { row.State }).Distinct().ToList();",
        "generated": "context.Colleges.Where(row => row.Enr < context.Colleges.Select(row => row.Enr).Max()).Select(row => row.State).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "ecc728dd380ff41fdd5d2b401590a1e7b3aa40b2af99517c31cf8525a08e6e86",
        "db_name": "soccer_2",
        "context_name": "Soccer2Context",
        "question": "Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.",
        "sql": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')",
        "linq": "context.Colleges.Where(row => row.Enr > context.Colleges.Where(row => row.State == \"FL\").Select(row => row.Enr).Min()).Select(row => new { row.CName }).Distinct().ToList();",
        "generated": "context.Colleges.Where(row => context.Colleges.Where(row => row.State == \"FL\").Select(row => row.Enr).Contains(row.Enr)).Select(row => new { row.CName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: OU}]\nLINQ Results: [{0: FSU}]\n"
    },
    {
        "id": "f12bbe163534a6402b718f816bbc51c4d7faaf8074252d04cd6127f8cefd130e",
        "db_name": "soccer_2",
        "context_name": "Soccer2Context",
        "question": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.",
        "sql": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')",
        "linq": "context.Colleges.Where(row => row.Enr > context.Colleges.Where(row => row.State == \"FL\").Select(row => row.Enr).Max()).Select(row => new { row.CName }).ToList();",
        "generated": "context.Colleges.Where(row => row.Enr > context.Colleges.Where(row => row.State == \"FL\").Select(row => row.Enr).Max()).Select(row => new { row.CName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "ff79a875523741dbf1fed7f80071824cc12046aa672a35823263569f6895fc99",
        "db_name": "soccer_2",
        "context_name": "Soccer2Context",
        "question": "What is the total number of enrollment of schools that do not have any goalie player?",
        "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
        "linq": "context.Colleges.Where(row => !context.Tryouts.Where(row => row.PPos == \"goalie\").Select(row => row.CName).Contains(row.CName)).Select(row => row.Enr).Sum();",
        "generated": "context.Colleges.Join(context.Tryouts, T1 => T1.CName, T2 => T2.CName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Decision == \"NA\").Select(row => row.T1.Enr).Sum();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 41000}]\nLINQ Results: [{0: 0}]\n"
    },
    {
        "id": "4a2ee5bd7a09e13d1f7cc74742575190b9c851b44131319712acc5e040f1bc6e",
        "db_name": "soccer_2",
        "context_name": "Soccer2Context",
        "question": "What is the number of states that has some college whose enrollment is larger than the average enrollment?",
        "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)",
        "linq": "context.Colleges.Where(row => row.Enr > context.Colleges.Select(row => row.Enr).Average()).Select(row => row.State).Distinct().Count();",
        "generated": "context.Colleges.GroupBy(row => new { row.State }).Where(group => group.Select(row => row.Enr).Average() < group.Select(row => row.Enr).Max()).Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 3}]\nLINQ Results: [{0: 0}]\n"
    },
    {
        "id": "2ceca2886f38b8b9bdcf9d81d18b8bff5851b785dba7699d206cf9a961df8b64",
        "db_name": "soccer_2",
        "context_name": "Soccer2Context",
        "question": "What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?",
        "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)",
        "linq": "context.Colleges.Where(row => row.Enr < context.Colleges.Select(row => row.Enr).Average()).Select(row => row.State).Distinct().Count();",
        "generated": "context.Colleges.GroupBy(row => new { row.State }).Where(group => group.Select(row => row.Enr).All(enr => enr < context.Colleges.Select(row => row.Enr).Average())).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "8849fd6a4301c2bd94712f27b841c6b39c817d46564f9e56ef0613a1c48f6b2c",
        "db_name": "bike_1",
        "context_name": "Bike1Context",
        "question": "For each station, return its longitude and the average duration of trips that started from the station.",
        "sql": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id",
        "linq": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.StartStationId }).Select(group => new { group.First().T1.Name, group.First().T1.Long, AverageDuration = group.Select(row => row.T2.Duration).Average() }).ToList();",
        "generated": "context.Trips.Join(context.Stations, T1 => T1.StartStationId, T2 => T2.Id, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Long }).Select(group => new { group.Key.Long, AverageDuration = group.Select(row => row.T1.Duration).Average() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Parameter 'index')\n   at System.Linq.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument)\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 239\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\n"
    },
    {
        "id": "c059842821c07576d9aaa84e0255a35feacd2881fa9686f9bedcb43f7e1b8ad3",
        "db_name": "bike_1",
        "context_name": "Bike1Context",
        "question": "For each station, find its latitude and the minimum duration of trips that ended at the station.",
        "sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "linq": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.EndStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.EndStationId }).Select(group => new { group.OrderBy(row => row.T2.Duration).First().T1.Name, group.OrderBy(row => row.T2.Duration).First().T1.Lat, MinDuration = group.Select(row => row.T2.Duration).Min() }).ToList();",
        "generated": "context.Statuses.Join(context.Trips, T1 => T1.StationId, T2 => T2.EndStationId, (T1, T2) => new { T1, T2 }).Join(context.Stations, joined => joined.T1.StationId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.EndDate!= null).Select(row => new { row.T3.Lat, row.T2.Duration }).OrderBy(row => row.Lat).Select(row => new { row.Lat, row.Duration }).Distinct().Take(5).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: San Jose Diridon Caltrain Station, 1: 37.329732, 2: 195}, {0: San Jose Civic Center, 1: 37.330698, 2: 211}, {0: Santa Clara at Almaden, 1: 37.333988, 2: 169}, {0: Adobe on Almaden, 1: 37.331415, 2: 237}, {0: San Pedro Square, 1: 37.336721000000004, 2: 182}, {0: Paseo de San Antonio, 1: 37.333798, 2: 147}, {0: San Salvador at 1st, 1: 37.330165, 2: 161}, {0: Japantown, 1: 37.348742, 2: 259}, {0: San Jose City Hall, 1: 37.337391, 2: 219}, {0: MLK Library, 1: 37.335885, 2: 209}, {0: SJSU 4th at San Carlos, 1: 37.332808, 2: 205}, {0: St James Park, 1: 37.339301, 2: 101}, {0: Arena Green / SAP Center, 1: 37.332692, 2: 165}, {0: SJSU - San Salvador at 9th, 1: 37.333955, 2: 258}, {0: Franklin at Maple, 1: 37.481758, 2: 198}, {0: Redwood City Caltrain Station, 1: 37.486078000000006, 2: 206}, {0: San Mateo County Center, 1: 37.487615999999996, 2: 126}, {0: Redwood City Public Library, 1: 37.484219, 2: 1193}, {0: Stanford in Redwood City, 1: 37.48537, 2: 651}, {0: Redwood City Medical Center, 1: 37.487682, 2: 225}, {0: Mountain View City Hall, 1: 37.389218, 2: 145}, {0: Mountain View Caltrain Station, 1: 37.394358000000004, 2: 189}, {0: San Antonio Caltrain Station, 1: 37.406940000000006, 2: 153}, {0: Evelyn Park and Ride, 1: 37.390277000000005, 2: 191}, {0: San Antonio Shopping Center, 1: 37.400443, 2: 198}, {0: Castro Street and El Camino Real, 1: 37.385956, 2: 166}, {0: Rengstorff Avenue / California Street, 1: 37.400240999999994, 2: 320}, {0: Palo Alto Caltrain Station, 1: 37.443988, 2: 80}, {0: University and Emerson, 1: 37.444521, 2: 631}, {0: California Ave Caltrain Station, 1: 37.429082, 2: 151}, {0: Cowper at University, 1: 37.448598, 2: 145}, {0: Park at Olive, 1: 37.425683899999996, 2: 166}, {0: Powell Street BART, 1: 37.783871000000005, 2: 104}, {0: Clay at Battery, 1: 37.795001, 2: 92}, {0: Davis at Jackson, 1: 37.79728, 2: 84}, {0: Commercial at Montgomery, 1: 37.794230999999996, 2: 76}, {0: Washington at Kearney, 1: 37.795425, 2: 175}, {0: Post at Kearney, 1: 37.788975, 2: 73}, {0: Embarcadero at Vallejo, 1: 37.799953, 2: 111}, {0: Spear at Folsom, 1: 37.790302000000004, 2: 139}, {0: Harry Bridges Plaza (Ferry Building), 1: 37.795392, 2: 114}, {0: Embarcadero at Folsom, 1: 37.791464000000005, 2: 63}, {0: Embarcadero at Bryant, 1: 37.787152, 2: 136}, {0: Temporary Transbay Terminal (Howard at Beale), 1: 37.789756, 2: 86}, {0: Beale at Market, 1: 37.792251, 2: 72}, {0: 5th at Howard, 1: 37.781752000000004, 2: 73}, {0: San Francisco City Hall, 1: 37.77865, 2: 120}, {0: Golden Gate at Polk, 1: 37.781332, 2: 107}, {0: Embarcadero at Sansome, 1: 37.80477, 2: 62}, {0: 2nd at Townsend, 1: 37.780526, 2: 68}, {0: 2nd at Folsom, 1: 37.785299, 2: 111}, {0: Howard at 2nd, 1: 37.786978000000005, 2: 62}, {0: 2nd at South Park, 1: 37.782259, 2: 71}, {0: Townsend at 7th, 1: 37.771058000000004, 2: 138}, {0: South Van Ness at Market, 1: 37.774814, 2: 70}, {0: Market at 10th, 1: 37.776619000000004, 2: 101}, {0: Yerba Buena Center of the Arts (3rd @ Howard), 1: 37.784878000000006, 2: 126}, {0: San Francisco Caltrain 2 (330 Townsend), 1: 37.7766, 2: 77}, {0: San Francisco Caltrain (Townsend at 4th), 1: 37.776617, 2: 61}, {0: Powell at Post (Union Square), 1: 37.788446, 2: 209}, {0: Civic Center BART (7th at Market), 1: 37.781039, 2: 106}, {0: Grant Avenue at Columbus Avenue, 1: 37.798522, 2: 143}, {0: Steuart at Market, 1: 37.794139, 2: 64}, {0: Mechanics Plaza (Market at Battery), 1: 37.7913, 2: 87}, {0: Market at 4th, 1: 37.786305, 2: 140}, {0: Market at Sansome, 1: 37.789625, 2: 104}, {0: Santa Clara County Civic Center, 1: 37.352601, 2: 409}, {0: Broadway St at Battery St, 1: 37.798541, 2: 105}, {0: Mezes Park, 1: 37.491269, 2: 225}, {0: Ryland Park, 1: 37.342725, 2: 269}]\nLINQ Results: [{0: 37.330698, 1: 211}, {0: 37.330698, 1: 523}, {0: 37.330698, 1: 5933}, {0: 37.333988, 1: 169}, {0: 37.333988, 1: 181}]\n"
    },
    {
        "id": "8bbb475ee3e8d21970454b3efd748ec939b9b5e45b19373f0e44fd61ac3adbf6",
        "db_name": "bike_1",
        "context_name": "Bike1Context",
        "question": "List all the distinct stations from which a trip of duration below 100 started.",
        "sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100",
        "linq": "context.Trips.Where(row => row.Duration < 100).Select(row => new { row.StartStationName }).Distinct().ToList();",
        "generated": "context.Trips.Where(row => row.Duration < 100).Select(row => row.StartStationName).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b7b46a57339e6d7a370a0a312a7acfc22c902bd2848e414bf30d9835cb5f7fe2",
        "db_name": "bike_1",
        "context_name": "Bike1Context",
        "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.",
        "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "linq": "context.Trips.Where(row => row.Duration >= context.Trips.Where(row => row.ZipCode == \"94103\").Select(row => row.Duration).Average()).Select(row => new { row.Id }).ToList();",
        "generated": "context.Trips.Where(row => row.ZipCode == \"94103\" && row.Duration >= context.Trips.Select(row => row.Duration).Average()).Select(row => new { row.Id }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 900505}, {0: 900507}, {0: 900508}, {0: 900514}, {0: 900515}, {0: 900519}, {0: 900520}, {0: 900522}, {0: 900523}, {0: 900524}, {0: 900527}, {0: 900529}, {0: 900531}, {0: 900534}, {0: 900536}, {0: 900540}, {0: 900541}, {0: 900543}, {0: 900545}, {0: 900550}, {0: 900552}, {0: 900553}, {0: 900554}, {0: 900555}, {0: 900562}, {0: 900563}, {0: 900565}, {0: 900566}, {0: 900567}, {0: 900568}, {0: 900571}, {0: 900577}, {0: 900581}, {0: 900583}, {0: 900588}, {0: 900598}, {0: 900601}, {0: 900610}, {0: 900617}, {0: 900618}, {0: 900619}, {0: 900620}, {0: 900621}, {0: 900622}, {0: 900625}, {0: 900630}, {0: 900631}, {0: 900635}, {0: 900636}, {0: 900641}, {0: 900644}, {0: 900646}, {0: 900647}, {0: 900648}, {0: 900650}, {0: 900651}, {0: 900656}, {0: 900663}, {0: 900664}, {0: 900668}, {0: 900669}, {0: 900670}, {0: 900671}, {0: 900673}, {0: 900674}, {0: 900675}, {0: 900679}, {0: 900684}, {0: 900689}, {0: 900692}, {0: 900693}, {0: 900700}, {0: 900701}, {0: 900704}, {0: 900706}, {0: 900707}, {0: 900711}, {0: 900715}, {0: 900716}, {0: 900719}, {0: 900721}, {0: 900723}, {0: 900724}, {0: 900725}, {0: 900730}, {0: 900731}, {0: 900732}, {0: 900736}, {0: 900737}, {0: 900739}, {0: 900743}, {0: 900746}, {0: 900747}, {0: 900748}, {0: 900749}, {0: 900750}, {0: 900752}, {0: 900753}, {0: 900757}, {0: 900763}, {0: 900767}, {0: 900769}, {0: 900770}, {0: 900771}, {0: 900772}, {0: 900774}, {0: 900775}, {0: 900776}, {0: 900777}, {0: 900778}, {0: 900780}, {0: 900783}, {0: 900786}, {0: 900790}, {0: 900795}, {0: 900799}, {0: 900802}, {0: 900804}, {0: 900806}, {0: 900807}, {0: 900809}, {0: 900810}, {0: 900812}, {0: 900818}, {0: 900825}, {0: 900828}, {0: 900832}, {0: 900833}, {0: 900834}, {0: 900835}, {0: 900840}, {0: 900843}, {0: 900846}, {0: 900847}, {0: 900849}, {0: 900853}, {0: 900855}, {0: 900856}, {0: 900857}, {0: 900859}, {0: 900861}, {0: 900865}, {0: 900866}, {0: 900875}, {0: 900877}, {0: 900883}, {0: 900884}, {0: 900885}, {0: 900887}, {0: 900890}, {0: 900891}, {0: 900892}, {0: 900895}, {0: 900896}, {0: 900902}, {0: 900908}, {0: 900909}, {0: 900912}, {0: 900913}, {0: 900915}, {0: 900916}, {0: 900917}, {0: 900922}, {0: 900923}, {0: 900925}, {0: 900927}, {0: 900929}, {0: 900931}, {0: 900932}, {0: 900934}, {0: 900936}, {0: 900941}, {0: 900948}, {0: 900949}, {0: 900956}, {0: 900964}, {0: 900966}, {0: 900968}, {0: 900971}, {0: 900972}, {0: 900974}, {0: 900978}, {0: 900979}, {0: 900980}, {0: 900981}, {0: 900982}, {0: 900983}, {0: 900984}, {0: 900987}, {0: 900989}, {0: 900990}, {0: 900992}, {0: 900993}, {0: 900994}, {0: 900996}, {0: 900997}, {0: 901004}, {0: 901006}, {0: 901007}, {0: 901008}, {0: 901011}, {0: 901012}, {0: 901013}, {0: 901015}, {0: 901017}, {0: 901018}, {0: 901021}, {0: 901023}, {0: 901025}, {0: 901026}, {0: 901027}, {0: 901028}, {0: 901029}, {0: 901037}, {0: 901038}, {0: 901039}, {0: 901040}, {0: 901044}, {0: 901045}, {0: 901046}, {0: 901047}, {0: 901051}, {0: 901052}, {0: 901054}, {0: 901055}, {0: 901057}, {0: 901058}, {0: 901059}, {0: 901060}, {0: 901061}, {0: 901062}, {0: 901064}, {0: 901065}, {0: 901066}, {0: 901067}, {0: 901068}, {0: 901070}, {0: 901071}, {0: 901072}, {0: 901073}, {0: 901077}, {0: 901078}, {0: 901079}, {0: 901081}, {0: 901082}, {0: 901083}, {0: 901085}, {0: 901086}, {0: 901088}, {0: 901089}, {0: 901092}, {0: 901096}, {0: 901097}, {0: 901099}, {0: 901100}, {0: 901101}, {0: 901102}, {0: 901103}, {0: 901104}, {0: 901105}, {0: 901106}, {0: 901107}, {0: 901108}, {0: 901110}, {0: 901111}, {0: 901112}, {0: 901114}, {0: 901115}, {0: 901116}, {0: 901120}, {0: 901124}, {0: 901125}, {0: 901126}, {0: 901127}, {0: 901128}, {0: 901129}, {0: 901130}, {0: 901131}, {0: 901132}, {0: 901133}, {0: 901134}, {0: 901135}, {0: 901139}, {0: 901140}, {0: 901141}, {0: 901142}, {0: 901143}, {0: 901144}, {0: 901146}, {0: 901147}, {0: 901148}, {0: 901164}, {0: 901167}, {0: 901168}, {0: 901170}, {0: 901171}, {0: 901173}, {0: 901174}, {0: 901175}, {0: 901177}, {0: 901180}, {0: 901181}, {0: 901182}, {0: 901184}, {0: 901185}, {0: 901188}, {0: 901189}, {0: 901191}, {0: 901192}, {0: 901193}, {0: 901200}, {0: 901201}, {0: 901202}, {0: 901203}, {0: 901204}, {0: 901206}, {0: 901208}, {0: 901209}, {0: 901210}, {0: 901211}, {0: 901212}, {0: 901215}, {0: 901216}, {0: 901217}, {0: 901218}, {0: 901219}, {0: 901220}, {0: 901221}, {0: 901222}, {0: 901224}, {0: 901227}, {0: 901228}, {0: 901231}, {0: 901232}, {0: 901233}, {0: 901234}, {0: 901235}, {0: 901236}, {0: 901238}, {0: 901239}, {0: 901240}, {0: 901241}, {0: 901243}, {0: 901244}, {0: 901245}, {0: 901246}, {0: 901247}, {0: 901249}, {0: 901258}, {0: 901261}, {0: 901262}, {0: 901264}, {0: 901265}, {0: 901266}, {0: 901267}, {0: 901269}, {0: 901270}, {0: 901272}, {0: 901273}, {0: 901274}, {0: 901275}, {0: 901276}, {0: 901277}, {0: 901278}, {0: 901283}, {0: 901284}, {0: 901288}, {0: 901289}, {0: 901290}, {0: 901293}, {0: 901294}, {0: 901295}, {0: 901296}, {0: 901297}, {0: 901298}, {0: 901299}, {0: 901302}, {0: 901307}, {0: 901316}, {0: 901317}, {0: 901318}, {0: 901319}, {0: 901320}, {0: 901321}, {0: 901323}, {0: 901324}, {0: 901325}, {0: 901335}, {0: 901336}, {0: 901338}, {0: 901340}, {0: 901341}, {0: 901343}, {0: 901344}, {0: 901345}, {0: 901346}, {0: 901347}, {0: 901348}, {0: 901350}, {0: 901353}, {0: 901355}, {0: 901356}, {0: 901358}, {0: 901360}, {0: 901361}, {0: 901363}, {0: 901371}, {0: 901372}, {0: 901373}, {0: 901376}, {0: 901378}, {0: 901379}, {0: 901380}, {0: 901382}, {0: 901383}, {0: 901387}, {0: 901391}, {0: 901392}, {0: 901396}, {0: 901398}, {0: 901400}, {0: 901401}, {0: 901402}, {0: 901403}, {0: 901406}, {0: 901407}, {0: 901408}, {0: 901409}, {0: 901410}, {0: 901411}, {0: 901413}, {0: 901421}, {0: 901422}, {0: 901427}, {0: 901428}, {0: 901429}, {0: 901430}, {0: 901433}, {0: 901435}, {0: 901440}, {0: 901443}, {0: 901444}, {0: 901445}, {0: 901448}, {0: 901449}, {0: 901455}, {0: 901457}, {0: 901460}, {0: 901461}, {0: 901466}, {0: 901467}, {0: 901468}, {0: 901470}, {0: 901471}, {0: 901472}, {0: 901473}, {0: 901474}, {0: 901478}, {0: 901479}, {0: 901489}, {0: 901490}, {0: 901494}, {0: 901495}, {0: 901497}, {0: 901504}, {0: 901507}, {0: 901508}, {0: 901512}, {0: 901513}, {0: 901514}, {0: 901515}, {0: 901516}, {0: 901519}, {0: 901524}, {0: 901525}, {0: 901526}, {0: 901527}, {0: 901528}, {0: 901529}, {0: 901530}, {0: 901531}, {0: 901532}, {0: 901533}, {0: 901534}, {0: 901537}, {0: 901538}, {0: 901539}, {0: 901540}, {0: 901541}, {0: 901542}, {0: 901543}, {0: 901546}, {0: 901548}, {0: 901552}, {0: 901553}, {0: 901554}, {0: 901555}, {0: 901556}, {0: 901557}, {0: 901558}, {0: 901562}, {0: 901563}, {0: 901565}, {0: 901566}, {0: 901567}, {0: 901568}, {0: 901573}, {0: 901584}, {0: 901585}, {0: 901586}, {0: 901587}, {0: 901588}, {0: 901589}, {0: 901590}, {0: 901591}, {0: 901592}, {0: 901593}, {0: 901595}, {0: 901604}, {0: 901608}, {0: 901609}, {0: 901610}, {0: 901612}, {0: 901613}, {0: 901614}, {0: 901618}, {0: 901619}, {0: 901620}, {0: 901621}, {0: 901622}, {0: 901623}, {0: 901629}, {0: 901630}, {0: 901632}, {0: 901634}, {0: 901635}, {0: 901638}, {0: 901639}, {0: 901640}, {0: 901643}, {0: 901644}, {0: 901647}, {0: 901651}, {0: 901652}, {0: 901653}, {0: 901654}, {0: 901656}, {0: 901657}, {0: 901658}, {0: 901659}, {0: 901660}, {0: 901661}, {0: 901663}, {0: 901664}, {0: 901665}, {0: 901666}, {0: 901668}, {0: 901669}, {0: 901670}, {0: 901674}, {0: 901675}, {0: 901676}, {0: 901677}, {0: 901678}, {0: 901679}, {0: 901681}, {0: 901682}, {0: 901686}, {0: 901687}, {0: 901688}, {0: 901692}, {0: 901693}, {0: 901695}, {0: 901696}, {0: 901703}, {0: 901705}, {0: 901709}, {0: 901710}, {0: 901711}, {0: 901713}, {0: 901718}, {0: 901725}, {0: 901726}, {0: 901729}, {0: 901732}, {0: 901736}, {0: 901737}, {0: 901743}, {0: 901744}, {0: 901749}, {0: 901750}, {0: 901751}, {0: 901755}, {0: 901756}, {0: 901757}, {0: 901761}, {0: 901762}, {0: 901763}, {0: 901764}, {0: 901765}, {0: 901766}, {0: 901768}, {0: 901772}, {0: 901774}, {0: 901776}, {0: 901782}, {0: 901783}, {0: 901786}, {0: 901787}, {0: 901794}, {0: 901796}, {0: 901797}, {0: 901801}, {0: 901802}, {0: 901806}, {0: 901807}, {0: 901808}, {0: 901809}, {0: 901811}, {0: 901814}, {0: 901815}, {0: 901816}, {0: 901817}, {0: 901820}, {0: 901821}, {0: 901823}, {0: 901824}, {0: 901827}, {0: 901828}, {0: 901830}, {0: 901831}, {0: 901832}, {0: 901833}, {0: 901834}, {0: 901839}, {0: 901841}, {0: 901842}, {0: 901845}, {0: 901846}, {0: 901850}, {0: 901854}, {0: 901855}, {0: 901857}, {0: 901860}, {0: 901862}, {0: 901863}, {0: 901864}, {0: 901865}, {0: 901867}, {0: 901875}, {0: 901877}, {0: 901878}, {0: 901879}, {0: 901880}, {0: 901882}, {0: 901883}, {0: 901888}, {0: 901902}, {0: 901909}, {0: 901911}, {0: 901912}, {0: 901913}, {0: 901914}, {0: 901915}, {0: 901918}, {0: 901920}, {0: 901922}, {0: 901925}, {0: 901929}, {0: 901931}, {0: 901933}, {0: 901934}, {0: 901939}, {0: 901944}, {0: 901945}, {0: 901955}, {0: 901960}, {0: 901961}, {0: 901963}, {0: 901964}, {0: 901965}, {0: 901967}, {0: 901972}, {0: 901973}, {0: 901975}, {0: 901979}, {0: 901981}, {0: 901982}, {0: 901983}, {0: 901984}, {0: 901985}, {0: 901986}, {0: 901987}, {0: 901988}, {0: 901991}, {0: 901992}, {0: 901993}, {0: 901994}, {0: 901999}, {0: 902003}, {0: 902004}, {0: 902010}, {0: 902015}, {0: 902019}, {0: 902020}, {0: 902026}, {0: 902027}, {0: 902029}, {0: 902031}, {0: 902033}, {0: 902034}, {0: 902037}, {0: 902038}, {0: 902039}, {0: 902045}, {0: 902049}, {0: 902052}, {0: 902057}, {0: 902058}, {0: 902059}, {0: 902061}, {0: 902063}, {0: 902064}, {0: 902065}, {0: 902066}, {0: 902068}, {0: 902069}, {0: 902073}, {0: 902075}, {0: 902076}, {0: 902077}, {0: 902078}, {0: 902079}, {0: 902080}, {0: 902084}, {0: 902085}, {0: 902087}, {0: 902092}, {0: 902093}, {0: 902100}, {0: 902105}, {0: 902111}, {0: 902112}, {0: 902114}, {0: 902118}, {0: 902121}, {0: 902126}, {0: 902128}, {0: 902129}, {0: 902132}, {0: 902133}, {0: 902134}, {0: 902135}, {0: 902136}, {0: 902139}, {0: 902140}, {0: 902141}, {0: 902142}, {0: 902147}, {0: 902148}, {0: 902149}, {0: 902151}, {0: 902158}, {0: 902165}, {0: 902166}, {0: 902168}, {0: 902174}, {0: 902182}, {0: 902183}, {0: 902184}, {0: 902185}, {0: 902186}, {0: 902189}, {0: 902190}, {0: 902194}, {0: 902201}, {0: 902202}, {0: 902203}, {0: 902208}, {0: 902209}, {0: 902211}, {0: 902213}, {0: 902214}, {0: 902216}, {0: 902217}, {0: 902218}, {0: 902220}, {0: 902222}, {0: 902223}, {0: 902225}, {0: 902226}, {0: 902227}, {0: 902228}, {0: 902232}, {0: 902235}, {0: 902236}, {0: 902242}, {0: 902243}, {0: 902245}, {0: 902247}, {0: 902249}, {0: 902254}, {0: 902263}, {0: 902265}, {0: 902275}, {0: 902287}, {0: 902299}, {0: 902301}, {0: 902302}, {0: 902303}, {0: 902307}, {0: 902310}, {0: 902312}, {0: 902322}, {0: 902323}, {0: 902324}, {0: 902329}, {0: 902330}, {0: 902331}, {0: 902332}, {0: 902343}, {0: 902346}, {0: 902349}, {0: 902357}, {0: 902362}, {0: 902364}, {0: 902365}, {0: 902366}, {0: 902368}, {0: 902372}, {0: 902373}, {0: 902374}, {0: 902376}, {0: 902385}, {0: 902386}, {0: 902394}, {0: 902401}, {0: 902403}, {0: 902404}, {0: 902408}, {0: 902411}, {0: 902412}, {0: 902415}, {0: 902418}, {0: 902424}, {0: 902425}, {0: 902432}, {0: 902434}, {0: 902437}, {0: 902438}, {0: 902439}, {0: 902441}, {0: 902445}, {0: 902446}, {0: 902451}, {0: 902458}, {0: 902459}, {0: 902471}, {0: 902474}, {0: 902480}, {0: 902481}, {0: 902483}, {0: 902484}, {0: 902486}, {0: 902487}, {0: 902490}, {0: 902491}, {0: 902493}, {0: 902497}, {0: 902498}, {0: 902499}, {0: 902504}, {0: 902505}, {0: 902507}, {0: 902509}, {0: 902510}, {0: 902512}, {0: 902516}, {0: 902518}, {0: 902519}, {0: 902520}, {0: 902532}, {0: 902533}, {0: 902534}, {0: 902540}, {0: 902543}, {0: 902545}, {0: 902547}, {0: 902555}, {0: 902559}, {0: 902583}, {0: 902585}, {0: 902589}, {0: 902603}, {0: 902609}, {0: 902612}, {0: 902615}, {0: 902616}, {0: 902620}, {0: 902623}, {0: 902626}, {0: 902627}, {0: 902638}, {0: 902639}, {0: 902642}, {0: 902644}, {0: 902646}, {0: 902647}, {0: 902650}, {0: 902652}, {0: 902654}, {0: 902657}, {0: 902660}, {0: 902663}, {0: 902666}, {0: 902668}, {0: 902670}, {0: 902671}, {0: 902673}, {0: 902675}, {0: 902677}, {0: 902678}, {0: 902682}, {0: 902683}, {0: 902684}, {0: 902686}, {0: 902687}, {0: 902691}, {0: 902692}, {0: 902694}, {0: 902695}, {0: 902698}, {0: 902699}, {0: 902701}, {0: 902702}, {0: 902704}, {0: 902709}, {0: 902712}, {0: 902714}, {0: 902715}, {0: 902716}, {0: 902718}, {0: 902721}, {0: 902730}, {0: 902731}, {0: 902732}, {0: 902733}, {0: 902735}, {0: 902739}, {0: 902740}, {0: 902742}, {0: 902744}, {0: 902745}, {0: 902746}, {0: 902748}, {0: 902749}, {0: 902763}, {0: 902770}, {0: 902771}, {0: 902775}, {0: 902782}, {0: 902783}, {0: 902786}, {0: 902788}, {0: 902791}, {0: 902796}, {0: 902797}, {0: 902800}, {0: 902803}, {0: 902808}, {0: 902815}, {0: 902823}, {0: 902824}, {0: 902831}, {0: 902834}, {0: 902835}, {0: 902837}, {0: 902838}, {0: 902841}, {0: 902844}, {0: 902845}, {0: 902847}, {0: 902848}, {0: 902849}, {0: 902850}, {0: 902852}, {0: 902855}, {0: 902856}, {0: 902857}, {0: 902858}, {0: 902859}, {0: 902862}, {0: 902864}, {0: 902865}, {0: 902867}, {0: 902876}, {0: 902885}, {0: 902886}, {0: 902888}, {0: 902889}, {0: 902890}, {0: 902891}, {0: 902892}, {0: 902898}, {0: 902900}, {0: 902901}, {0: 902903}, {0: 902908}, {0: 902913}, {0: 902914}, {0: 902916}, {0: 902917}, {0: 902918}, {0: 902919}, {0: 902920}, {0: 902923}, {0: 902927}, {0: 902935}, {0: 902936}, {0: 902937}, {0: 902942}, {0: 902944}, {0: 902948}, {0: 902949}, {0: 902950}, {0: 902952}, {0: 902954}, {0: 902956}, {0: 902958}, {0: 902959}, {0: 902963}, {0: 902964}, {0: 902971}, {0: 902973}, {0: 902975}, {0: 902977}, {0: 902978}, {0: 902979}, {0: 902982}, {0: 902988}, {0: 902989}, {0: 902992}, {0: 903000}, {0: 903003}, {0: 903009}, {0: 903010}, {0: 903015}, {0: 903016}, {0: 903020}, {0: 903025}, {0: 903026}, {0: 903027}, {0: 903031}, {0: 903033}, {0: 903035}, {0: 903037}, {0: 903040}, {0: 903041}, {0: 903042}, {0: 903043}, {0: 903044}, {0: 903045}, {0: 903049}, {0: 903050}, {0: 903055}, {0: 903059}, {0: 903062}, {0: 903063}, {0: 903065}, {0: 903078}, {0: 903080}, {0: 903082}, {0: 903083}, {0: 903093}, {0: 903096}, {0: 903097}, {0: 903102}, {0: 903107}, {0: 903108}, {0: 903111}, {0: 903114}, {0: 903115}, {0: 903117}, {0: 903118}, {0: 903123}, {0: 903124}, {0: 903125}, {0: 903126}, {0: 903128}, {0: 903132}, {0: 903135}, {0: 903138}, {0: 903141}, {0: 903144}, {0: 903145}, {0: 903146}, {0: 903148}, {0: 903153}, {0: 903156}, {0: 903157}, {0: 903160}, {0: 903161}, {0: 903162}, {0: 903163}, {0: 903165}, {0: 903166}, {0: 903167}, {0: 903168}, {0: 903169}, {0: 903170}, {0: 903174}, {0: 903177}, {0: 903180}, {0: 903182}, {0: 903188}, {0: 903189}, {0: 903190}, {0: 903194}, {0: 903202}, {0: 903203}, {0: 903205}, {0: 903211}, {0: 903218}, {0: 903221}, {0: 903228}, {0: 903239}, {0: 903247}, {0: 903248}, {0: 903251}, {0: 903254}, {0: 903257}, {0: 903258}, {0: 903260}, {0: 903262}, {0: 903263}, {0: 903264}, {0: 903265}, {0: 903268}, {0: 903270}, {0: 903271}, {0: 903273}, {0: 903274}, {0: 903275}, {0: 903279}, {0: 903283}, {0: 903284}, {0: 903285}, {0: 903291}, {0: 903293}, {0: 903303}, {0: 903309}, {0: 903313}, {0: 903314}, {0: 903316}, {0: 903321}, {0: 903327}, {0: 903328}, {0: 903330}, {0: 903333}, {0: 903339}, {0: 903341}, {0: 903343}, {0: 903346}, {0: 903348}, {0: 903349}, {0: 903352}, {0: 903359}, {0: 903363}, {0: 903370}, {0: 903374}, {0: 903375}, {0: 903378}, {0: 903379}, {0: 903380}, {0: 903381}, {0: 903382}, {0: 903383}, {0: 903384}, {0: 903385}, {0: 903386}, {0: 903387}, {0: 903390}, {0: 903396}, {0: 903399}, {0: 903400}, {0: 903401}, {0: 903404}, {0: 903407}, {0: 903410}, {0: 903411}, {0: 903419}, {0: 903420}, {0: 903425}, {0: 903432}, {0: 903435}, {0: 903438}, {0: 903451}, {0: 903464}, {0: 903473}, {0: 903475}, {0: 903480}, {0: 903481}, {0: 903482}, {0: 903483}, {0: 903484}, {0: 903488}, {0: 903494}, {0: 903499}, {0: 903501}, {0: 903503}, {0: 903507}, {0: 903511}, {0: 903512}, {0: 903514}, {0: 903516}, {0: 903518}, {0: 903520}, {0: 903522}, {0: 903526}, {0: 903527}, {0: 903532}, {0: 903536}, {0: 903537}, {0: 903538}, {0: 903545}, {0: 903548}, {0: 903549}, {0: 903552}, {0: 903559}, {0: 903561}, {0: 903562}, {0: 903563}, {0: 903564}, {0: 903565}, {0: 903581}, {0: 903593}, {0: 903594}, {0: 903595}, {0: 903597}, {0: 903599}, {0: 903600}, {0: 903605}, {0: 903614}, {0: 903616}, {0: 903620}, {0: 903622}, {0: 903624}, {0: 903628}, {0: 903629}, {0: 903632}, {0: 903633}, {0: 903636}, {0: 903637}, {0: 903638}, {0: 903639}, {0: 903640}, {0: 903641}, {0: 903642}, {0: 903643}, {0: 903647}, {0: 903648}, {0: 903650}, {0: 903655}, {0: 903656}, {0: 903660}, {0: 903662}, {0: 903663}, {0: 903664}, {0: 903667}, {0: 903668}, {0: 903669}, {0: 903670}, {0: 903674}, {0: 903676}, {0: 903678}, {0: 903681}, {0: 903687}, {0: 903689}, {0: 903690}, {0: 903691}, {0: 903692}, {0: 903694}, {0: 903695}, {0: 903696}, {0: 903697}, {0: 903698}, {0: 903699}, {0: 903700}, {0: 903701}, {0: 903702}, {0: 903706}, {0: 903708}, {0: 903709}, {0: 903710}, {0: 903711}, {0: 903713}, {0: 903714}, {0: 903715}, {0: 903718}, {0: 903719}, {0: 903720}, {0: 903724}, {0: 903731}, {0: 903741}, {0: 903745}, {0: 903748}, {0: 903750}, {0: 903753}, {0: 903756}, {0: 903758}, {0: 903759}, {0: 903760}, {0: 903761}, {0: 903763}, {0: 903765}, {0: 903766}, {0: 903767}, {0: 903768}, {0: 903770}, {0: 903774}, {0: 903775}, {0: 903777}, {0: 903778}, {0: 903779}, {0: 903780}, {0: 903782}, {0: 903785}, {0: 903790}, {0: 903792}, {0: 903794}, {0: 903795}, {0: 903798}, {0: 903801}, {0: 903809}, {0: 903810}, {0: 903813}, {0: 903818}, {0: 903820}, {0: 903822}, {0: 903824}, {0: 903825}, {0: 903826}, {0: 903827}, {0: 903831}, {0: 903832}, {0: 903837}, {0: 903840}, {0: 903845}, {0: 903846}, {0: 903847}, {0: 903849}, {0: 903851}, {0: 903852}, {0: 903854}, {0: 903857}, {0: 903859}, {0: 903860}, {0: 903862}, {0: 903863}, {0: 903868}, {0: 903869}, {0: 903880}, {0: 903886}, {0: 903895}, {0: 903901}, {0: 903904}, {0: 903907}, {0: 903921}, {0: 903924}, {0: 903925}, {0: 903931}, {0: 903934}, {0: 903936}, {0: 903938}, {0: 903939}, {0: 903940}, {0: 903946}, {0: 903950}, {0: 903956}, {0: 903959}, {0: 903961}, {0: 903962}, {0: 903963}, {0: 903964}, {0: 903968}, {0: 903972}, {0: 903975}, {0: 903976}, {0: 903977}, {0: 903979}, {0: 903982}, {0: 903988}, {0: 903990}, {0: 903992}, {0: 903993}, {0: 903997}, {0: 904000}, {0: 904008}, {0: 904010}, {0: 904021}, {0: 904022}, {0: 904024}, {0: 904025}, {0: 904026}, {0: 904027}, {0: 904029}, {0: 904036}, {0: 904040}, {0: 904041}, {0: 904042}, {0: 904046}, {0: 904047}, {0: 904050}, {0: 904052}, {0: 904058}, {0: 904071}, {0: 904075}, {0: 904077}, {0: 904080}, {0: 904083}, {0: 904084}, {0: 904085}, {0: 904091}, {0: 904094}, {0: 904099}, {0: 904101}, {0: 904104}, {0: 904106}, {0: 904109}, {0: 904118}, {0: 904119}, {0: 904120}, {0: 904132}, {0: 904136}, {0: 904137}, {0: 904143}, {0: 904146}, {0: 904148}, {0: 904150}, {0: 904153}, {0: 904154}, {0: 904157}, {0: 904160}, {0: 904167}, {0: 904168}, {0: 904171}, {0: 904179}, {0: 904184}, {0: 904185}, {0: 904186}, {0: 904188}, {0: 904197}, {0: 904198}, {0: 904199}, {0: 904208}, {0: 904214}, {0: 904240}, {0: 904242}, {0: 904245}, {0: 904247}, {0: 904250}, {0: 904251}, {0: 904255}, {0: 904256}, {0: 904257}, {0: 904259}, {0: 904262}, {0: 904266}, {0: 904271}, {0: 904286}, {0: 904288}, {0: 904289}, {0: 904295}, {0: 904300}, {0: 904304}, {0: 904305}, {0: 904307}, {0: 904308}, {0: 904310}, {0: 904313}, {0: 904314}, {0: 904315}, {0: 904317}, {0: 904334}, {0: 904338}, {0: 904339}, {0: 904340}, {0: 904342}, {0: 904347}, {0: 904349}, {0: 904352}, {0: 904353}, {0: 904355}, {0: 904357}, {0: 904359}, {0: 904360}, {0: 904362}, {0: 904364}, {0: 904366}, {0: 904368}, {0: 904372}, {0: 904373}, {0: 904381}, {0: 904385}, {0: 904387}, {0: 904388}, {0: 904391}, {0: 904392}, {0: 904400}, {0: 904401}, {0: 904406}, {0: 904408}, {0: 904409}, {0: 904414}, {0: 904415}, {0: 904418}, {0: 904421}, {0: 904424}, {0: 904427}, {0: 904430}, {0: 904433}, {0: 904434}, {0: 904437}, {0: 904441}, {0: 904442}, {0: 904445}, {0: 904448}, {0: 904450}, {0: 904452}, {0: 904453}, {0: 904455}, {0: 904471}, {0: 904472}, {0: 904473}, {0: 904474}, {0: 904476}, {0: 904477}, {0: 904485}, {0: 904487}, {0: 904488}, {0: 904489}, {0: 904490}, {0: 904494}, {0: 904496}, {0: 904497}, {0: 904499}, {0: 904505}, {0: 904506}, {0: 904507}, {0: 904508}, {0: 904514}, {0: 904517}, {0: 904522}, {0: 904524}, {0: 904527}, {0: 904529}, {0: 904530}, {0: 904532}, {0: 904535}, {0: 904536}, {0: 904538}, {0: 904539}, {0: 904544}, {0: 904545}, {0: 904546}, {0: 904551}, {0: 904552}, {0: 904553}, {0: 904554}, {0: 904555}, {0: 904556}, {0: 904557}, {0: 904558}, {0: 904564}, {0: 904566}, {0: 904569}, {0: 904574}, {0: 904576}, {0: 904577}, {0: 904579}, {0: 904581}, {0: 904583}, {0: 904584}, {0: 904586}, {0: 904587}, {0: 904589}, {0: 904590}, {0: 904598}, {0: 904599}, {0: 904604}, {0: 904606}, {0: 904610}, {0: 904611}, {0: 904614}, {0: 904615}, {0: 904623}, {0: 904624}, {0: 904629}, {0: 904635}, {0: 904639}, {0: 904643}, {0: 904645}, {0: 904646}, {0: 904651}, {0: 904653}, {0: 904654}, {0: 904656}, {0: 904659}, {0: 904660}, {0: 904661}, {0: 904662}, {0: 904667}, {0: 904669}, {0: 904670}, {0: 904671}, {0: 904672}, {0: 904673}, {0: 904676}, {0: 904678}, {0: 904682}, {0: 904683}, {0: 904687}, {0: 904690}, {0: 904691}, {0: 904692}, {0: 904698}, {0: 904700}, {0: 904703}, {0: 904705}, {0: 904707}, {0: 904708}, {0: 904709}, {0: 904711}, {0: 904712}, {0: 904714}, {0: 904715}, {0: 904717}, {0: 904718}, {0: 904721}, {0: 904723}, {0: 904724}, {0: 904725}, {0: 904726}, {0: 904730}, {0: 904731}, {0: 904732}, {0: 904734}, {0: 904739}, {0: 904741}, {0: 904742}, {0: 904745}, {0: 904747}, {0: 904748}, {0: 904750}, {0: 904752}, {0: 904753}, {0: 904754}, {0: 904755}, {0: 904756}, {0: 904758}, {0: 904760}, {0: 904762}, {0: 904763}, {0: 904766}, {0: 904767}, {0: 904768}, {0: 904771}, {0: 904774}, {0: 904777}, {0: 904779}, {0: 904780}, {0: 904781}, {0: 904782}, {0: 904786}, {0: 904787}, {0: 904789}, {0: 904791}, {0: 904798}, {0: 904802}, {0: 904806}, {0: 904808}, {0: 904809}, {0: 904813}, {0: 904817}, {0: 904818}, {0: 904820}, {0: 904821}, {0: 904823}, {0: 904825}, {0: 904827}, {0: 904828}, {0: 904829}, {0: 904830}, {0: 904831}, {0: 904832}, {0: 904835}, {0: 904838}, {0: 904839}, {0: 904843}, {0: 904844}, {0: 904846}, {0: 904847}, {0: 904848}, {0: 904850}, {0: 904853}, {0: 904857}, {0: 904861}, {0: 904867}, {0: 904871}, {0: 904878}, {0: 904881}, {0: 904886}, {0: 904892}, {0: 904894}, {0: 904899}, {0: 904901}, {0: 904902}, {0: 904906}, {0: 904909}, {0: 904910}, {0: 904912}, {0: 904917}, {0: 904918}, {0: 904921}, {0: 904925}, {0: 904932}, {0: 904935}, {0: 904939}, {0: 904940}, {0: 904943}, {0: 904944}, {0: 904947}, {0: 904948}, {0: 904949}, {0: 904950}, {0: 904955}, {0: 904956}, {0: 904957}, {0: 904958}, {0: 904963}, {0: 904970}, {0: 904971}, {0: 904972}, {0: 904976}, {0: 904977}, {0: 904978}, {0: 904979}, {0: 904982}, {0: 904983}, {0: 904984}, {0: 904986}, {0: 904988}, {0: 904989}, {0: 904992}, {0: 904993}, {0: 904994}, {0: 904995}, {0: 904996}, {0: 904997}, {0: 904998}, {0: 905001}, {0: 905002}, {0: 905004}, {0: 905006}, {0: 905007}, {0: 905008}, {0: 905009}, {0: 905010}, {0: 905011}, {0: 905013}, {0: 905015}, {0: 905018}, {0: 905019}, {0: 905020}, {0: 905023}, {0: 905032}, {0: 905035}, {0: 905036}, {0: 905042}, {0: 905043}, {0: 905045}, {0: 905051}, {0: 905054}, {0: 905057}, {0: 905058}, {0: 905062}, {0: 905063}, {0: 905067}, {0: 905068}, {0: 905074}, {0: 905076}, {0: 905077}, {0: 905083}, {0: 905086}, {0: 905098}, {0: 905104}, {0: 905106}, {0: 905107}, {0: 905113}, {0: 905114}, {0: 905116}, {0: 905119}, {0: 905122}, {0: 905127}, {0: 905130}, {0: 905131}, {0: 905133}, {0: 905140}, {0: 905141}, {0: 905142}, {0: 905144}, {0: 905145}, {0: 905147}, {0: 905148}, {0: 905150}, {0: 905153}, {0: 905155}, {0: 905157}, {0: 905158}, {0: 905164}, {0: 905167}, {0: 905169}, {0: 905172}, {0: 905173}, {0: 905174}, {0: 905177}, {0: 905182}, {0: 905188}, {0: 905191}, {0: 905193}, {0: 905200}, {0: 905201}, {0: 905211}, {0: 905214}, {0: 905226}, {0: 905230}, {0: 905233}, {0: 905241}, {0: 905243}, {0: 905244}, {0: 905247}, {0: 905250}, {0: 905252}, {0: 905262}, {0: 905270}, {0: 905282}, {0: 905283}, {0: 905285}, {0: 905286}, {0: 905287}, {0: 905294}, {0: 905312}, {0: 905320}, {0: 905328}, {0: 905342}, {0: 905344}, {0: 905346}, {0: 905357}, {0: 905363}, {0: 905368}, {0: 905370}, {0: 905371}, {0: 905372}, {0: 905376}, {0: 905381}, {0: 905382}, {0: 905383}, {0: 905384}, {0: 905387}, {0: 905388}, {0: 905391}, {0: 905399}, {0: 905403}, {0: 905407}, {0: 905409}, {0: 905410}, {0: 905415}, {0: 905418}, {0: 905419}, {0: 905421}, {0: 905425}, {0: 905430}, {0: 905431}, {0: 905432}, {0: 905440}, {0: 905447}, {0: 905448}, {0: 905449}, {0: 905450}, {0: 905451}, {0: 905452}, {0: 905453}, {0: 905457}, {0: 905458}, {0: 905461}, {0: 905465}, {0: 905468}, {0: 905470}, {0: 905472}, {0: 905473}, {0: 905474}, {0: 905475}, {0: 905478}, {0: 905479}, {0: 905480}, {0: 905482}, {0: 905483}, {0: 905488}, {0: 905498}, {0: 905502}, {0: 905504}, {0: 905505}, {0: 905509}, {0: 905510}, {0: 905515}, {0: 905518}, {0: 905519}, {0: 905521}, {0: 905522}, {0: 905525}, {0: 905530}, {0: 905533}, {0: 905535}, {0: 905536}, {0: 905538}, {0: 905542}, {0: 905544}, {0: 905546}, {0: 905547}, {0: 905549}, {0: 905550}, {0: 905553}, {0: 905554}, {0: 905560}, {0: 905561}, {0: 905565}, {0: 905567}, {0: 905569}, {0: 905577}, {0: 905578}, {0: 905582}, {0: 905583}, {0: 905586}, {0: 905587}, {0: 905590}, {0: 905591}, {0: 905605}, {0: 905607}, {0: 905612}, {0: 905614}, {0: 905615}, {0: 905620}, {0: 905621}, {0: 905623}, {0: 905629}, {0: 905633}, {0: 905638}, {0: 905640}, {0: 905641}, {0: 905642}, {0: 905647}, {0: 905649}, {0: 905652}, {0: 905657}, {0: 905658}, {0: 905659}, {0: 905660}, {0: 905661}, {0: 905662}, {0: 905663}, {0: 905666}, {0: 905669}, {0: 905671}, {0: 905674}, {0: 905676}, {0: 905679}, {0: 905682}, {0: 905688}, {0: 905689}, {0: 905690}, {0: 905692}, {0: 905693}, {0: 905702}, {0: 905703}, {0: 905706}, {0: 905709}, {0: 905710}, {0: 905712}, {0: 905715}, {0: 905718}, {0: 905719}, {0: 905721}, {0: 905722}, {0: 905723}, {0: 905725}, {0: 905727}, {0: 905729}, {0: 905734}, {0: 905736}, {0: 905737}, {0: 905743}, {0: 905744}, {0: 905751}, {0: 905753}, {0: 905754}, {0: 905755}, {0: 905758}, {0: 905759}, {0: 905764}, {0: 905768}, {0: 905772}, {0: 905777}, {0: 905779}, {0: 905783}, {0: 905785}, {0: 905797}, {0: 905803}, {0: 905804}, {0: 905805}, {0: 905811}, {0: 905815}, {0: 905818}, {0: 905820}, {0: 905821}, {0: 905830}, {0: 905833}, {0: 905835}, {0: 905837}, {0: 905838}, {0: 905839}, {0: 905845}, {0: 905847}, {0: 905849}, {0: 905850}, {0: 905853}, {0: 905854}, {0: 905856}, {0: 905858}, {0: 905861}, {0: 905862}, {0: 905864}, {0: 905865}, {0: 905868}, {0: 905869}, {0: 905871}, {0: 905881}, {0: 905884}, {0: 905885}, {0: 905888}, {0: 905889}, {0: 905898}, {0: 905903}, {0: 905905}, {0: 905908}, {0: 905909}, {0: 905910}, {0: 905912}, {0: 905913}, {0: 905915}, {0: 905916}, {0: 905918}, {0: 905919}, {0: 905920}, {0: 905921}, {0: 905924}, {0: 905925}, {0: 905927}, {0: 905928}, {0: 905930}, {0: 905938}, {0: 905940}, {0: 905944}, {0: 905952}, {0: 905956}, {0: 905965}, {0: 905968}, {0: 905970}, {0: 905972}, {0: 905974}, {0: 905976}, {0: 905980}, {0: 905981}, {0: 905983}, {0: 905985}, {0: 905989}, {0: 905990}, {0: 905994}, {0: 905996}, {0: 905997}, {0: 905998}, {0: 906001}, {0: 906004}, {0: 906005}, {0: 906009}, {0: 906010}, {0: 906011}, {0: 906013}, {0: 906022}, {0: 906023}, {0: 906025}, {0: 906036}, {0: 906041}, {0: 906042}, {0: 906044}, {0: 906045}, {0: 906046}, {0: 906049}, {0: 906050}, {0: 906062}, {0: 906067}, {0: 906068}, {0: 906076}, {0: 906077}, {0: 906079}, {0: 906082}, {0: 906084}, {0: 906089}, {0: 906092}, {0: 906094}, {0: 906095}, {0: 906098}, {0: 906099}, {0: 906104}, {0: 906113}, {0: 906114}, {0: 906115}, {0: 906118}, {0: 906120}, {0: 906135}, {0: 906139}, {0: 906151}, {0: 906158}, {0: 906162}, {0: 906165}, {0: 906166}, {0: 906167}, {0: 906168}, {0: 906169}, {0: 906170}, {0: 906174}, {0: 906177}, {0: 906182}, {0: 906188}, {0: 906190}, {0: 906191}, {0: 906192}, {0: 906194}, {0: 906204}, {0: 906207}, {0: 906215}, {0: 906217}, {0: 906221}, {0: 906224}, {0: 906225}, {0: 906226}, {0: 906227}, {0: 906228}, {0: 906229}, {0: 906230}, {0: 906235}, {0: 906249}, {0: 906256}, {0: 906257}, {0: 906271}, {0: 906273}, {0: 906276}, {0: 906278}, {0: 906284}, {0: 906285}, {0: 906290}, {0: 906293}, {0: 906295}, {0: 906296}, {0: 906299}, {0: 906300}, {0: 906314}, {0: 906316}, {0: 906321}, {0: 906322}, {0: 906324}, {0: 906325}, {0: 906326}, {0: 906328}, {0: 906329}, {0: 906333}, {0: 906336}, {0: 906340}, {0: 906341}, {0: 906342}, {0: 906346}, {0: 906347}, {0: 906348}, {0: 906352}, {0: 906354}, {0: 906355}, {0: 906357}, {0: 906364}, {0: 906365}, {0: 906368}, {0: 906370}, {0: 906371}, {0: 906373}, {0: 906374}, {0: 906375}, {0: 906377}, {0: 906378}, {0: 906385}, {0: 906386}, {0: 906387}, {0: 906388}, {0: 906389}, {0: 906390}, {0: 906391}, {0: 906392}, {0: 906393}, {0: 906395}, {0: 906396}, {0: 906397}, {0: 906400}, {0: 906401}, {0: 906408}, {0: 906411}, {0: 906415}, {0: 906416}, {0: 906418}, {0: 906422}, {0: 906424}, {0: 906427}, {0: 906428}, {0: 906431}, {0: 906432}, {0: 906434}, {0: 906439}, {0: 906440}, {0: 906441}, {0: 906444}, {0: 906445}, {0: 906451}, {0: 906455}, {0: 906457}, {0: 906460}, {0: 906461}, {0: 906466}, {0: 906468}, {0: 906469}, {0: 906470}, {0: 906471}, {0: 906473}, {0: 906476}, {0: 906477}, {0: 906482}, {0: 906485}, {0: 906490}, {0: 906495}, {0: 906496}, {0: 906502}, {0: 906505}, {0: 906512}, {0: 906513}, {0: 906515}, {0: 906518}, {0: 906521}, {0: 906522}, {0: 906529}, {0: 906534}, {0: 906538}, {0: 906540}, {0: 906541}, {0: 906542}, {0: 906545}, {0: 906547}, {0: 906552}, {0: 906553}, {0: 906561}, {0: 906562}, {0: 906569}, {0: 906571}, {0: 906572}, {0: 906574}, {0: 906578}, {0: 906579}, {0: 906580}, {0: 906583}, {0: 906584}, {0: 906587}, {0: 906591}, {0: 906592}, {0: 906598}, {0: 906600}, {0: 906602}, {0: 906603}, {0: 906605}, {0: 906607}, {0: 906609}, {0: 906612}, {0: 906613}, {0: 906614}, {0: 906615}, {0: 906616}, {0: 906618}, {0: 906619}, {0: 906620}, {0: 906623}, {0: 906627}, {0: 906635}, {0: 906637}, {0: 906638}, {0: 906640}, {0: 906641}, {0: 906642}, {0: 906643}, {0: 906645}, {0: 906646}, {0: 906650}, {0: 906651}, {0: 906652}, {0: 906653}, {0: 906654}, {0: 906655}, {0: 906656}, {0: 906659}, {0: 906660}, {0: 906661}, {0: 906662}, {0: 906667}, {0: 906668}, {0: 906669}, {0: 906670}, {0: 906671}, {0: 906677}, {0: 906681}, {0: 906685}, {0: 906686}, {0: 906692}, {0: 906693}, {0: 906694}, {0: 906695}, {0: 906696}, {0: 906698}, {0: 906703}, {0: 906706}, {0: 906707}, {0: 906711}, {0: 906713}, {0: 906717}, {0: 906718}, {0: 906719}, {0: 906728}, {0: 906732}, {0: 906737}, {0: 906744}, {0: 906745}, {0: 906749}, {0: 906753}, {0: 906754}, {0: 906759}, {0: 906762}, {0: 906769}, {0: 906774}, {0: 906777}, {0: 906779}, {0: 906786}, {0: 906787}, {0: 906788}, {0: 906789}, {0: 906791}, {0: 906792}, {0: 906793}, {0: 906799}, {0: 906802}, {0: 906803}, {0: 906804}, {0: 906805}, {0: 906806}, {0: 906807}, {0: 906808}, {0: 906809}, {0: 906811}, {0: 906814}, {0: 906818}, {0: 906819}, {0: 906820}, {0: 906821}, {0: 906826}, {0: 906827}, {0: 906830}, {0: 906831}, {0: 906835}, {0: 906838}, {0: 906842}, {0: 906847}, {0: 906848}, {0: 906849}, {0: 906850}, {0: 906851}, {0: 906856}, {0: 906857}, {0: 906858}, {0: 906863}, {0: 906866}, {0: 906869}, {0: 906878}, {0: 906881}, {0: 906885}, {0: 906886}, {0: 906894}, {0: 906897}, {0: 906902}, {0: 906906}, {0: 906912}, {0: 906918}, {0: 906922}, {0: 906923}, {0: 906928}, {0: 906929}, {0: 906930}, {0: 906931}, {0: 906932}, {0: 906937}, {0: 906938}, {0: 906939}, {0: 906941}, {0: 906942}, {0: 906943}, {0: 906946}, {0: 906947}, {0: 906949}, {0: 906950}, {0: 906954}, {0: 906955}, {0: 906960}, {0: 906961}, {0: 906963}, {0: 906966}, {0: 906968}, {0: 906974}, {0: 906976}, {0: 906977}, {0: 906979}, {0: 906984}, {0: 906985}, {0: 906986}, {0: 906988}, {0: 906989}, {0: 906993}, {0: 906994}, {0: 906998}, {0: 907001}, {0: 907002}, {0: 907007}, {0: 907009}, {0: 907010}, {0: 907011}, {0: 907013}, {0: 907015}, {0: 907018}, {0: 907020}, {0: 907026}, {0: 907027}, {0: 907028}, {0: 907031}, {0: 907032}, {0: 907033}, {0: 907034}, {0: 907035}, {0: 907037}, {0: 907039}, {0: 907040}, {0: 907043}, {0: 907056}, {0: 907063}, {0: 907072}, {0: 907073}, {0: 907074}, {0: 907076}, {0: 907077}, {0: 907079}, {0: 907081}, {0: 907084}, {0: 907086}, {0: 907088}, {0: 907090}, {0: 907095}, {0: 907099}, {0: 907104}, {0: 907105}, {0: 907108}, {0: 907109}, {0: 907112}, {0: 907114}, {0: 907115}, {0: 907116}, {0: 907118}, {0: 907119}, {0: 907120}, {0: 907121}, {0: 907125}, {0: 907126}, {0: 907129}, {0: 907140}, {0: 907145}, {0: 907150}, {0: 907151}, {0: 907156}, {0: 907157}, {0: 907158}, {0: 907159}, {0: 907162}, {0: 907168}, {0: 907178}, {0: 907180}, {0: 907183}, {0: 907184}, {0: 907189}, {0: 907195}, {0: 907203}, {0: 907211}, {0: 907214}, {0: 907225}, {0: 907228}, {0: 907241}, {0: 907244}, {0: 907245}, {0: 907246}, {0: 907249}, {0: 907254}, {0: 907257}, {0: 907258}, {0: 907260}, {0: 907261}, {0: 907263}, {0: 907264}, {0: 907267}, {0: 907268}, {0: 907271}, {0: 907274}, {0: 907275}, {0: 907276}, {0: 907277}, {0: 907278}, {0: 907281}, {0: 907287}, {0: 907289}, {0: 907290}, {0: 907292}, {0: 907293}, {0: 907295}, {0: 907297}, {0: 907299}, {0: 907300}, {0: 907301}, {0: 907302}, {0: 907304}, {0: 907307}, {0: 907324}, {0: 907325}, {0: 907326}, {0: 907329}, {0: 907330}, {0: 907331}, {0: 907333}, {0: 907334}, {0: 907337}, {0: 907358}, {0: 907366}, {0: 907367}, {0: 907370}, {0: 907373}, {0: 907376}, {0: 907380}, {0: 907384}, {0: 907386}, {0: 907389}, {0: 907392}, {0: 907393}, {0: 907395}, {0: 907399}, {0: 907400}, {0: 907406}, {0: 907407}, {0: 907408}, {0: 907409}, {0: 907410}, {0: 907411}, {0: 907415}, {0: 907416}, {0: 907420}, {0: 907424}, {0: 907426}, {0: 907427}, {0: 907429}, {0: 907432}, {0: 907435}, {0: 907438}, {0: 907449}, {0: 907450}, {0: 907451}, {0: 907454}, {0: 907456}, {0: 907460}, {0: 907461}, {0: 907462}, {0: 907463}, {0: 907464}, {0: 907465}, {0: 907467}, {0: 907468}, {0: 907469}, {0: 907470}, {0: 907471}, {0: 907472}, {0: 907479}, {0: 907480}, {0: 907482}, {0: 907489}, {0: 907493}, {0: 907494}, {0: 907496}, {0: 907497}, {0: 907499}, {0: 907505}, {0: 907508}, {0: 907510}, {0: 907515}, {0: 907516}, {0: 907517}, {0: 907518}, {0: 907523}, {0: 907524}, {0: 907528}, {0: 907529}, {0: 907531}, {0: 907532}, {0: 907535}, {0: 907536}, {0: 907538}, {0: 907540}, {0: 907541}, {0: 907542}, {0: 907544}, {0: 907546}, {0: 907548}, {0: 907549}, {0: 907550}, {0: 907554}, {0: 907558}, {0: 907559}, {0: 907562}, {0: 907563}, {0: 907565}, {0: 907566}, {0: 907571}, {0: 907572}, {0: 907573}, {0: 907579}, {0: 907580}, {0: 907585}, {0: 907591}, {0: 907592}, {0: 907596}, {0: 907597}, {0: 907599}, {0: 907601}, {0: 907602}, {0: 907605}, {0: 907611}, {0: 907613}, {0: 907615}, {0: 907618}, {0: 907621}, {0: 907622}, {0: 907628}, {0: 907629}, {0: 907631}, {0: 907632}, {0: 907634}, {0: 907636}, {0: 907645}, {0: 907655}, {0: 907657}, {0: 907667}, {0: 907672}, {0: 907677}, {0: 907678}, {0: 907680}, {0: 907681}, {0: 907683}, {0: 907684}, {0: 907687}, {0: 907689}, {0: 907695}, {0: 907699}, {0: 907700}, {0: 907703}, {0: 907704}, {0: 907708}, {0: 907710}, {0: 907711}, {0: 907712}, {0: 907714}, {0: 907716}, {0: 907718}, {0: 907721}, {0: 907725}, {0: 907726}, {0: 907729}, {0: 907733}, {0: 907734}, {0: 907735}, {0: 907736}, {0: 907737}, {0: 907739}, {0: 907740}, {0: 907742}, {0: 907743}, {0: 907745}, {0: 907747}, {0: 907751}, {0: 907756}, {0: 907767}, {0: 907770}, {0: 907772}, {0: 907775}, {0: 907781}, {0: 907783}, {0: 907786}, {0: 907787}, {0: 907793}, {0: 907797}, {0: 907798}, {0: 907800}, {0: 907802}, {0: 907804}, {0: 907806}, {0: 907812}, {0: 907813}, {0: 907815}, {0: 907816}, {0: 907818}, {0: 907819}, {0: 907825}, {0: 907827}, {0: 907829}, {0: 907831}, {0: 907835}, {0: 907838}, {0: 907839}, {0: 907847}, {0: 907850}, {0: 907851}, {0: 907853}, {0: 907857}, {0: 907859}, {0: 907860}, {0: 907862}, {0: 907863}, {0: 907864}, {0: 907865}, {0: 907866}, {0: 907869}, {0: 907871}, {0: 907874}, {0: 907875}, {0: 907876}, {0: 907877}, {0: 907879}, {0: 907886}, {0: 907887}, {0: 907891}, {0: 907895}, {0: 907898}, {0: 907901}, {0: 907908}, {0: 907916}, {0: 907918}, {0: 907921}, {0: 907922}, {0: 907927}, {0: 907928}, {0: 907933}, {0: 907945}, {0: 907946}, {0: 907947}, {0: 907948}, {0: 907954}, {0: 907958}, {0: 907959}, {0: 907962}, {0: 907964}, {0: 907965}, {0: 907966}, {0: 907968}, {0: 907978}, {0: 907986}, {0: 907987}, {0: 907988}, {0: 907989}, {0: 908000}, {0: 908002}, {0: 908004}, {0: 908006}, {0: 908007}, {0: 908010}, {0: 908013}, {0: 908015}, {0: 908016}, {0: 908020}, {0: 908022}, {0: 908026}, {0: 908027}, {0: 908031}, {0: 908039}, {0: 908040}, {0: 908046}, {0: 908047}, {0: 908054}, {0: 908055}, {0: 908057}, {0: 908059}, {0: 908072}, {0: 908074}, {0: 908075}, {0: 908080}, {0: 908087}, {0: 908088}, {0: 908093}, {0: 908098}, {0: 908099}, {0: 908100}, {0: 908101}, {0: 908102}, {0: 908103}, {0: 908104}, {0: 908105}, {0: 908109}, {0: 908110}, {0: 908113}, {0: 908119}, {0: 908120}, {0: 908126}, {0: 908127}, {0: 908128}, {0: 908131}, {0: 908132}, {0: 908133}, {0: 908134}, {0: 908138}, {0: 908143}, {0: 908156}, {0: 908157}, {0: 908160}, {0: 908162}, {0: 908164}, {0: 908165}, {0: 908166}, {0: 908167}, {0: 908169}, {0: 908174}, {0: 908175}, {0: 908176}, {0: 908178}, {0: 908182}, {0: 908183}, {0: 908184}, {0: 908186}, {0: 908189}, {0: 908190}, {0: 908192}, {0: 908193}, {0: 908196}, {0: 908203}, {0: 908207}, {0: 908211}, {0: 908216}, {0: 908220}, {0: 908226}, {0: 908228}, {0: 908229}, {0: 908230}, {0: 908237}, {0: 908238}, {0: 908244}, {0: 908247}, {0: 908248}, {0: 908252}, {0: 908253}, {0: 908254}, {0: 908259}, {0: 908261}, {0: 908263}, {0: 908264}, {0: 908265}, {0: 908266}, {0: 908268}, {0: 908272}, {0: 908273}, {0: 908274}, {0: 908278}, {0: 908280}, {0: 908281}, {0: 908282}, {0: 908285}, {0: 908289}, {0: 908291}, {0: 908293}, {0: 908298}, {0: 908306}, {0: 908310}, {0: 908311}, {0: 908314}, {0: 908317}, {0: 908318}, {0: 908319}, {0: 908320}, {0: 908321}, {0: 908322}, {0: 908324}, {0: 908326}, {0: 908328}, {0: 908329}, {0: 908332}, {0: 908335}, {0: 908336}, {0: 908347}, {0: 908348}, {0: 908350}, {0: 908351}, {0: 908355}, {0: 908356}, {0: 908357}, {0: 908358}, {0: 908360}, {0: 908361}, {0: 908363}, {0: 908364}, {0: 908366}, {0: 908367}, {0: 908370}, {0: 908371}, {0: 908372}, {0: 908376}, {0: 908377}, {0: 908379}, {0: 908381}, {0: 908384}, {0: 908386}, {0: 908387}, {0: 908388}, {0: 908390}, {0: 908391}, {0: 908392}, {0: 908393}, {0: 908394}, {0: 908395}, {0: 908398}, {0: 908404}, {0: 908408}, {0: 908413}, {0: 908416}, {0: 908418}, {0: 908423}, {0: 908431}, {0: 908437}, {0: 908438}, {0: 908440}, {0: 908444}, {0: 908447}, {0: 908449}, {0: 908450}, {0: 908451}, {0: 908453}, {0: 908456}, {0: 908458}, {0: 908459}, {0: 908462}, {0: 908463}, {0: 908464}, {0: 908465}, {0: 908470}, {0: 908471}, {0: 908472}, {0: 908473}, {0: 908475}, {0: 908476}, {0: 908477}, {0: 908480}, {0: 908483}, {0: 908485}, {0: 908490}, {0: 908491}, {0: 908494}, {0: 908499}, {0: 908500}, {0: 908501}, {0: 908506}, {0: 908507}, {0: 908508}, {0: 908511}, {0: 908512}, {0: 908518}, {0: 908520}, {0: 908521}, {0: 908522}, {0: 908526}, {0: 908528}, {0: 908529}, {0: 908531}, {0: 908532}, {0: 908533}, {0: 908534}, {0: 908536}, {0: 908545}, {0: 908546}, {0: 908550}, {0: 908552}, {0: 908553}, {0: 908556}, {0: 908557}, {0: 908560}, {0: 908564}, {0: 908568}, {0: 908570}, {0: 908571}, {0: 908572}, {0: 908575}, {0: 908577}, {0: 908581}, {0: 908582}, {0: 908584}, {0: 908585}, {0: 908587}, {0: 908589}, {0: 908592}, {0: 908595}, {0: 908598}, {0: 908605}, {0: 908607}, {0: 908608}, {0: 908611}, {0: 908613}, {0: 908614}, {0: 908617}, {0: 908620}, {0: 908623}, {0: 908627}, {0: 908629}, {0: 908632}, {0: 908635}, {0: 908637}, {0: 908644}, {0: 908645}, {0: 908649}, {0: 908650}, {0: 908651}, {0: 908660}, {0: 908661}, {0: 908665}, {0: 908669}, {0: 908679}, {0: 908682}, {0: 908684}, {0: 908691}, {0: 908695}, {0: 908696}, {0: 908697}, {0: 908698}, {0: 908699}, {0: 908700}, {0: 908706}, {0: 908711}, {0: 908712}, {0: 908714}, {0: 908716}, {0: 908717}, {0: 908719}, {0: 908720}, {0: 908721}, {0: 908722}, {0: 908723}, {0: 908724}, {0: 908726}, {0: 908727}, {0: 908729}, {0: 908731}, {0: 908732}, {0: 908733}, {0: 908734}, {0: 908738}, {0: 908739}, {0: 908740}, {0: 908741}, {0: 908742}, {0: 908743}, {0: 908746}, {0: 908748}, {0: 908753}, {0: 908754}, {0: 908755}, {0: 908756}, {0: 908757}, {0: 908758}, {0: 908762}, {0: 908763}, {0: 908767}, {0: 908769}, {0: 908771}, {0: 908773}, {0: 908774}, {0: 908779}, {0: 908783}, {0: 908784}, {0: 908785}, {0: 908787}, {0: 908789}, {0: 908790}, {0: 908792}, {0: 908793}, {0: 908796}, {0: 908801}, {0: 908802}, {0: 908803}, {0: 908804}, {0: 908807}, {0: 908811}, {0: 908812}, {0: 908814}, {0: 908816}, {0: 908817}, {0: 908818}, {0: 908819}, {0: 908827}, {0: 908830}, {0: 908831}, {0: 908838}, {0: 908840}, {0: 908844}, {0: 908848}, {0: 908851}, {0: 908855}, {0: 908857}, {0: 908858}, {0: 908863}, {0: 908864}, {0: 908869}, {0: 908875}, {0: 908876}, {0: 908877}, {0: 908878}, {0: 908879}, {0: 908881}, {0: 908882}, {0: 908887}, {0: 908888}, {0: 908889}, {0: 908892}, {0: 908896}, {0: 908897}, {0: 908899}, {0: 908900}, {0: 908901}, {0: 908902}, {0: 908914}, {0: 908916}, {0: 908917}, {0: 908918}, {0: 908921}, {0: 908922}, {0: 908925}, {0: 908926}, {0: 908928}, {0: 908929}, {0: 908931}, {0: 908933}, {0: 908936}, {0: 908937}, {0: 908938}, {0: 908941}, {0: 908942}, {0: 908945}, {0: 908948}, {0: 908949}, {0: 908956}, {0: 908958}, {0: 908959}, {0: 908961}, {0: 908964}, {0: 908965}, {0: 908966}, {0: 908972}, {0: 908981}, {0: 908983}, {0: 908988}, {0: 908993}, {0: 908994}, {0: 909000}, {0: 909005}, {0: 909006}, {0: 909018}, {0: 909034}, {0: 909036}, {0: 909038}, {0: 909039}, {0: 909040}, {0: 909044}, {0: 909052}, {0: 909061}, {0: 909063}, {0: 909072}, {0: 909074}, {0: 909076}, {0: 909082}, {0: 909084}, {0: 909085}, {0: 909088}, {0: 909090}, {0: 909091}, {0: 909092}, {0: 909093}, {0: 909100}, {0: 909101}, {0: 909103}, {0: 909104}, {0: 909105}, {0: 909109}, {0: 909116}, {0: 909117}, {0: 909120}, {0: 909125}, {0: 909127}, {0: 909128}, {0: 909134}, {0: 909136}, {0: 909137}, {0: 909138}, {0: 909142}, {0: 909143}, {0: 909144}, {0: 909148}, {0: 909149}, {0: 909150}, {0: 909153}, {0: 909166}, {0: 909173}, {0: 909181}, {0: 909185}, {0: 909186}, {0: 909187}, {0: 909188}, {0: 909189}, {0: 909193}, {0: 909194}, {0: 909195}, {0: 909196}, {0: 909197}, {0: 909199}, {0: 909201}, {0: 909204}, {0: 909207}, {0: 909211}, {0: 909214}, {0: 909215}, {0: 909218}, {0: 909219}, {0: 909220}, {0: 909231}, {0: 909234}, {0: 909242}, {0: 909243}, {0: 909244}, {0: 909248}, {0: 909254}, {0: 909256}, {0: 909259}, {0: 909261}, {0: 909267}, {0: 909269}, {0: 909270}, {0: 909271}, {0: 909272}, {0: 909275}, {0: 909276}, {0: 909278}, {0: 909279}, {0: 909281}, {0: 909283}, {0: 909284}, {0: 909287}, {0: 909288}, {0: 909290}, {0: 909291}, {0: 909293}, {0: 909302}, {0: 909303}, {0: 909304}, {0: 909306}, {0: 909309}, {0: 909313}, {0: 909317}, {0: 909318}, {0: 909319}, {0: 909322}, {0: 909324}, {0: 909327}, {0: 909328}, {0: 909330}, {0: 909331}, {0: 909333}, {0: 909334}, {0: 909336}, {0: 909340}, {0: 909344}, {0: 909345}, {0: 909348}, {0: 909350}, {0: 909351}, {0: 909352}, {0: 909353}, {0: 909355}, {0: 909356}, {0: 909360}, {0: 909362}, {0: 909363}, {0: 909364}, {0: 909367}, {0: 909368}, {0: 909370}, {0: 909373}, {0: 909374}, {0: 909378}, {0: 909381}, {0: 909382}, {0: 909383}, {0: 909384}, {0: 909387}, {0: 909390}, {0: 909413}, {0: 909414}, {0: 909415}, {0: 909417}, {0: 909421}, {0: 909433}, {0: 909435}, {0: 909439}, {0: 909446}, {0: 909457}, {0: 909459}, {0: 909462}, {0: 909474}, {0: 909477}, {0: 909478}, {0: 909482}, {0: 909485}, {0: 909486}, {0: 909489}, {0: 909495}, {0: 909502}, {0: 909503}, {0: 909506}, {0: 909516}, {0: 909517}, {0: 909518}, {0: 909519}, {0: 909520}, {0: 909521}, {0: 909524}, {0: 909527}, {0: 909531}, {0: 909536}, {0: 909537}, {0: 909539}, {0: 909540}, {0: 909541}, {0: 909543}, {0: 909550}, {0: 909551}, {0: 909555}, {0: 909557}, {0: 909559}, {0: 909561}, {0: 909574}, {0: 909577}, {0: 909579}, {0: 909584}, {0: 909587}, {0: 909591}, {0: 909599}, {0: 909604}, {0: 909606}, {0: 909607}, {0: 909608}, {0: 909611}, {0: 909615}, {0: 909618}, {0: 909624}, {0: 909625}, {0: 909636}, {0: 909637}, {0: 909640}, {0: 909642}, {0: 909644}, {0: 909650}, {0: 909651}, {0: 909652}, {0: 909656}, {0: 909658}, {0: 909664}, {0: 909680}, {0: 909682}, {0: 909683}, {0: 909686}, {0: 909687}, {0: 909688}, {0: 909696}, {0: 909701}, {0: 909703}, {0: 909713}, {0: 909715}, {0: 909716}, {0: 909720}, {0: 909727}, {0: 909729}, {0: 909734}, {0: 909735}, {0: 909754}, {0: 909755}, {0: 909758}, {0: 909765}, {0: 909767}, {0: 909770}, {0: 909771}, {0: 909775}, {0: 909776}, {0: 909786}, {0: 909792}, {0: 909793}, {0: 909796}, {0: 909801}, {0: 909821}, {0: 909822}, {0: 909833}, {0: 909843}, {0: 909850}, {0: 909851}, {0: 909859}, {0: 909860}, {0: 909863}, {0: 909865}, {0: 909866}, {0: 909867}, {0: 909871}, {0: 909872}, {0: 909873}, {0: 909874}, {0: 909876}, {0: 909877}, {0: 909881}, {0: 909882}, {0: 909883}, {0: 909884}, {0: 909888}, {0: 909894}, {0: 909900}, {0: 909903}, {0: 909904}, {0: 909906}, {0: 909908}, {0: 909910}, {0: 909915}, {0: 909916}, {0: 909920}, {0: 909921}, {0: 909924}, {0: 909931}, {0: 909932}, {0: 909935}, {0: 909938}, {0: 909940}, {0: 909941}, {0: 909942}, {0: 909944}, {0: 909947}, {0: 909949}, {0: 909954}, {0: 909955}, {0: 909957}, {0: 909958}, {0: 909959}, {0: 909961}, {0: 909967}, {0: 909968}, {0: 909969}, {0: 909970}, {0: 909972}, {0: 909973}, {0: 909978}, {0: 909980}, {0: 909984}, {0: 909986}, {0: 909987}, {0: 909988}, {0: 909989}, {0: 909991}, {0: 909992}, {0: 909996}, {0: 909998}, {0: 910000}, {0: 910005}, {0: 910006}, {0: 910007}, {0: 910008}, {0: 910009}, {0: 910010}, {0: 910012}, {0: 910013}, {0: 910014}, {0: 910015}, {0: 910016}, {0: 910018}, {0: 910019}, {0: 910020}, {0: 910021}, {0: 910023}, {0: 910029}, {0: 910030}, {0: 910033}, {0: 910044}, {0: 910045}, {0: 910048}, {0: 910050}, {0: 910054}, {0: 910055}, {0: 910056}, {0: 910058}, {0: 910060}, {0: 910061}, {0: 910063}, {0: 910066}, {0: 910068}, {0: 910069}, {0: 910070}, {0: 910073}, {0: 910075}, {0: 910076}, {0: 910077}, {0: 910079}, {0: 910080}, {0: 910081}, {0: 910084}, {0: 910085}, {0: 910087}, {0: 910094}, {0: 910096}, {0: 910100}, {0: 910104}, {0: 910106}, {0: 910107}, {0: 910109}, {0: 910110}, {0: 910111}, {0: 910112}, {0: 910114}, {0: 910118}, {0: 910119}, {0: 910122}, {0: 910123}, {0: 910126}, {0: 910127}, {0: 910128}, {0: 910134}, {0: 910136}, {0: 910139}, {0: 910145}, {0: 910146}, {0: 910149}, {0: 910154}, {0: 910155}, {0: 910158}, {0: 910160}, {0: 910164}, {0: 910166}, {0: 910167}, {0: 910173}, {0: 910174}, {0: 910175}, {0: 910176}, {0: 910178}, {0: 910184}, {0: 910188}, {0: 910189}, {0: 910192}, {0: 910193}, {0: 910195}, {0: 910197}, {0: 910199}, {0: 910201}, {0: 910205}, {0: 910208}, {0: 910212}, {0: 910215}, {0: 910216}, {0: 910217}, {0: 910218}, {0: 910219}, {0: 910220}, {0: 910221}, {0: 910224}, {0: 910226}, {0: 910227}, {0: 910228}, {0: 910229}, {0: 910230}, {0: 910231}, {0: 910232}, {0: 910239}, {0: 910243}, {0: 910244}, {0: 910246}, {0: 910248}, {0: 910251}, {0: 910252}, {0: 910253}, {0: 910257}, {0: 910263}, {0: 910264}, {0: 910267}, {0: 910268}, {0: 910270}, {0: 910271}, {0: 910275}, {0: 910276}, {0: 910282}, {0: 910283}, {0: 910285}, {0: 910288}, {0: 910291}, {0: 910292}, {0: 910293}, {0: 910300}, {0: 910305}, {0: 910309}, {0: 910311}, {0: 910315}, {0: 910316}, {0: 910319}, {0: 910325}, {0: 910326}, {0: 910328}, {0: 910330}, {0: 910333}, {0: 910334}, {0: 910335}, {0: 910336}, {0: 910339}, {0: 910340}, {0: 910341}, {0: 910344}, {0: 910350}, {0: 910351}, {0: 910352}, {0: 910355}, {0: 910356}, {0: 910357}, {0: 910359}, {0: 910360}, {0: 910361}, {0: 910362}, {0: 910364}, {0: 910365}, {0: 910366}, {0: 910367}, {0: 910368}, {0: 910371}, {0: 910373}, {0: 910374}, {0: 910375}, {0: 910377}, {0: 910378}, {0: 910383}, {0: 910384}, {0: 910386}, {0: 910388}, {0: 910389}, {0: 910390}, {0: 910391}, {0: 910392}, {0: 910393}, {0: 910395}, {0: 910397}, {0: 910398}, {0: 910400}, {0: 910401}, {0: 910402}, {0: 910403}, {0: 910411}, {0: 910413}, {0: 910414}, {0: 910418}, {0: 910421}, {0: 910423}, {0: 910425}, {0: 910426}, {0: 910427}, {0: 910428}, {0: 910429}, {0: 910430}, {0: 910431}, {0: 910434}, {0: 910436}, {0: 910441}, {0: 910442}, {0: 910443}, {0: 910444}, {0: 910446}, {0: 910447}, {0: 910450}, {0: 910452}, {0: 910456}, {0: 910457}, {0: 910458}, {0: 910462}, {0: 910463}, {0: 910471}, {0: 910479}, {0: 910483}, {0: 910484}, {0: 910485}, {0: 910488}, {0: 910489}, {0: 910490}, {0: 910491}, {0: 910492}, {0: 910495}, {0: 910502}, {0: 910508}, {0: 910511}, {0: 910512}, {0: 910514}, {0: 910518}, {0: 910519}, {0: 910520}, {0: 910528}, {0: 910530}, {0: 910533}, {0: 910534}, {0: 910535}, {0: 910536}, {0: 910542}, {0: 910544}, {0: 910548}, {0: 910549}, {0: 910552}, {0: 910553}, {0: 910554}, {0: 910557}, {0: 910558}, {0: 910560}, {0: 910566}, {0: 910567}, {0: 910570}, {0: 910572}, {0: 910573}, {0: 910577}, {0: 910578}, {0: 910580}, {0: 910582}, {0: 910583}, {0: 910584}, {0: 910585}, {0: 910586}, {0: 910588}, {0: 910599}, {0: 910600}, {0: 910602}, {0: 910605}, {0: 910606}, {0: 910607}, {0: 910610}, {0: 910611}, {0: 910627}, {0: 910628}, {0: 910629}, {0: 910631}, {0: 910632}, {0: 910635}, {0: 910638}, {0: 910643}, {0: 910644}, {0: 910650}, {0: 910651}, {0: 910652}, {0: 910657}, {0: 910666}, {0: 910670}, {0: 910673}, {0: 910675}, {0: 910676}, {0: 910677}, {0: 910681}, {0: 910685}, {0: 910688}, {0: 910690}, {0: 910692}, {0: 910697}, {0: 910700}, {0: 910702}, {0: 910703}, {0: 910704}, {0: 910705}, {0: 910706}, {0: 910709}, {0: 910710}, {0: 910712}, {0: 910713}, {0: 910716}, {0: 910718}, {0: 910742}, {0: 910746}, {0: 910748}, {0: 910749}, {0: 910752}, {0: 910753}, {0: 910756}, {0: 910759}, {0: 910760}, {0: 910761}, {0: 910762}, {0: 910763}, {0: 910764}, {0: 910772}, {0: 910776}, {0: 910777}, {0: 910778}, {0: 910780}, {0: 910781}, {0: 910782}, {0: 910783}, {0: 910784}, {0: 910785}, {0: 910786}, {0: 910789}, {0: 910791}, {0: 910797}, {0: 910803}, {0: 910805}, {0: 910806}, {0: 910809}, {0: 910812}, {0: 910815}, {0: 910816}, {0: 910817}, {0: 910818}, {0: 910819}, {0: 910828}, {0: 910829}, {0: 910830}, {0: 910831}, {0: 910832}, {0: 910833}, {0: 910834}, {0: 910835}, {0: 910836}, {0: 910838}, {0: 910840}, {0: 910841}, {0: 910842}, {0: 910846}, {0: 910847}, {0: 910850}, {0: 910851}, {0: 910861}, {0: 910862}, {0: 910863}, {0: 910865}, {0: 910868}, {0: 910869}, {0: 910870}, {0: 910871}, {0: 910872}, {0: 910873}, {0: 910874}, {0: 910876}, {0: 910878}, {0: 910879}, {0: 910882}, {0: 910888}, {0: 910889}, {0: 910890}, {0: 910894}, {0: 910895}, {0: 910896}, {0: 910897}, {0: 910898}, {0: 910901}, {0: 910903}, {0: 910904}, {0: 910908}, {0: 910910}, {0: 910914}, {0: 910915}, {0: 910917}, {0: 910918}, {0: 910920}, {0: 910921}, {0: 910923}, {0: 910924}, {0: 910925}, {0: 910926}, {0: 910927}, {0: 910941}, {0: 910942}, {0: 910946}, {0: 910948}, {0: 910949}, {0: 910950}, {0: 910952}, {0: 910953}, {0: 910954}, {0: 910955}, {0: 910956}, {0: 910957}, {0: 910958}, {0: 910959}, {0: 910962}, {0: 910964}, {0: 910965}, {0: 910967}, {0: 910968}, {0: 910969}, {0: 910970}, {0: 910973}, {0: 910975}, {0: 910976}, {0: 910979}, {0: 910980}, {0: 910981}, {0: 910982}, {0: 910983}, {0: 910984}, {0: 910985}, {0: 910986}, {0: 910988}, {0: 910989}, {0: 910990}, {0: 910994}, {0: 910995}, {0: 911000}, {0: 911002}, {0: 911003}, {0: 911004}, {0: 911012}, {0: 911013}, {0: 911014}, {0: 911015}, {0: 911017}, {0: 911018}, {0: 911019}, {0: 911020}, {0: 911021}, {0: 911022}, {0: 911023}, {0: 911027}, {0: 911035}, {0: 911040}, {0: 911041}, {0: 911044}, {0: 911047}, {0: 911048}, {0: 911052}, {0: 911053}, {0: 911054}, {0: 911055}, {0: 911056}, {0: 911057}, {0: 911058}, {0: 911059}, {0: 911060}, {0: 911062}, {0: 911064}, {0: 911068}, {0: 911069}, {0: 911070}, {0: 911072}, {0: 911074}, {0: 911075}, {0: 911076}, {0: 911077}, {0: 911078}, {0: 911082}, {0: 911087}, {0: 911091}, {0: 911098}, {0: 911099}, {0: 911100}, {0: 911101}, {0: 911102}, {0: 911103}, {0: 911104}, {0: 911105}, {0: 911106}, {0: 911107}, {0: 911111}, {0: 911112}, {0: 911117}, {0: 911120}, {0: 911123}, {0: 911126}, {0: 911129}, {0: 911131}, {0: 911132}, {0: 911133}, {0: 911134}, {0: 911135}, {0: 911136}, {0: 911137}, {0: 911138}, {0: 911139}, {0: 911143}, {0: 911145}, {0: 911146}, {0: 911147}, {0: 911148}, {0: 911149}, {0: 911153}, {0: 911154}, {0: 911157}, {0: 911169}, {0: 911170}, {0: 911174}, {0: 911178}, {0: 911179}, {0: 911182}, {0: 911184}, {0: 911189}, {0: 911193}, {0: 911194}, {0: 911195}, {0: 911196}, {0: 911200}, {0: 911202}, {0: 911204}, {0: 911205}, {0: 911209}, {0: 911210}, {0: 911216}, {0: 911217}, {0: 911220}, {0: 911222}, {0: 911224}, {0: 911226}, {0: 911227}, {0: 911228}, {0: 911229}, {0: 911231}, {0: 911233}, {0: 911234}, {0: 911236}, {0: 911237}, {0: 911238}, {0: 911241}, {0: 911245}, {0: 911246}, {0: 911253}, {0: 911254}, {0: 911255}, {0: 911256}, {0: 911261}, {0: 911264}, {0: 911265}, {0: 911266}, {0: 911268}, {0: 911269}, {0: 911270}, {0: 911271}, {0: 911273}, {0: 911274}, {0: 911276}, {0: 911277}, {0: 911278}, {0: 911280}, {0: 911285}, {0: 911286}, {0: 911287}, {0: 911288}, {0: 911290}, {0: 911291}, {0: 911294}, {0: 911295}, {0: 911296}, {0: 911297}, {0: 911298}, {0: 911299}, {0: 911300}, {0: 911301}, {0: 911302}, {0: 911303}, {0: 911304}, {0: 911305}, {0: 911306}, {0: 911308}, {0: 911311}, {0: 911312}, {0: 911313}, {0: 911317}, {0: 911318}, {0: 911321}, {0: 911323}, {0: 911329}, {0: 911333}, {0: 911335}, {0: 911336}, {0: 911337}, {0: 911342}, {0: 911343}, {0: 911344}, {0: 911345}, {0: 911346}, {0: 911348}, {0: 911349}, {0: 911350}, {0: 911351}, {0: 911353}, {0: 911355}, {0: 911356}, {0: 911358}, {0: 911359}, {0: 911360}, {0: 911362}, {0: 911363}, {0: 911364}, {0: 911365}, {0: 911367}, {0: 911368}, {0: 911369}, {0: 911370}, {0: 911371}, {0: 911372}, {0: 911373}, {0: 911374}, {0: 911375}, {0: 911378}, {0: 911379}, {0: 911380}, {0: 911381}, {0: 911382}, {0: 911383}, {0: 911384}, {0: 911387}, {0: 911388}, {0: 911389}, {0: 911390}, {0: 911391}, {0: 911393}, {0: 911397}, {0: 911398}, {0: 911400}, {0: 911401}, {0: 911402}, {0: 911403}, {0: 911409}, {0: 911410}, {0: 911411}, {0: 911412}, {0: 911414}, {0: 911415}, {0: 911416}, {0: 911417}, {0: 911418}, {0: 911419}, {0: 911421}, {0: 911422}, {0: 911423}, {0: 911424}, {0: 911429}, {0: 911430}, {0: 911435}, {0: 911436}, {0: 911439}, {0: 911444}, {0: 911445}, {0: 911446}, {0: 911452}, {0: 911453}, {0: 911454}, {0: 911459}, {0: 911460}, {0: 911462}, {0: 911463}, {0: 911464}, {0: 911465}, {0: 911466}, {0: 911467}, {0: 911468}, {0: 911470}, {0: 911471}, {0: 911472}, {0: 911473}, {0: 911474}, {0: 911475}, {0: 911476}, {0: 911477}, {0: 911479}, {0: 911480}, {0: 911481}, {0: 911482}, {0: 911483}, {0: 911484}, {0: 911486}, {0: 911491}, {0: 911494}, {0: 911497}, {0: 911500}, {0: 911506}, {0: 911508}, {0: 911509}, {0: 911510}, {0: 911516}, {0: 911518}, {0: 911519}, {0: 911520}, {0: 911521}, {0: 911522}, {0: 911535}, {0: 911536}, {0: 911541}, {0: 911542}, {0: 911543}, {0: 911545}, {0: 911546}, {0: 911547}, {0: 911548}, {0: 911549}, {0: 911550}, {0: 911551}, {0: 911554}, {0: 911555}, {0: 911556}, {0: 911560}, {0: 911561}, {0: 911562}, {0: 911568}, {0: 911574}, {0: 911576}, {0: 911577}, {0: 911578}, {0: 911580}, {0: 911581}, {0: 911582}, {0: 911584}, {0: 911606}, {0: 911607}, {0: 911612}, {0: 911613}, {0: 911615}, {0: 911616}, {0: 911617}, {0: 911618}, {0: 911620}, {0: 911623}, {0: 911624}, {0: 911627}, {0: 911628}, {0: 911630}, {0: 911633}, {0: 911640}, {0: 911645}, {0: 911647}, {0: 911649}, {0: 911650}, {0: 911654}, {0: 911655}, {0: 911656}, {0: 911657}, {0: 911660}, {0: 911671}, {0: 911680}, {0: 911685}, {0: 911688}, {0: 911691}, {0: 911693}, {0: 911695}, {0: 911696}, {0: 911697}, {0: 911699}, {0: 911700}, {0: 911701}, {0: 911703}, {0: 911705}, {0: 911707}, {0: 911708}, {0: 911714}, {0: 911717}, {0: 911718}, {0: 911720}, {0: 911721}, {0: 911723}, {0: 911724}, {0: 911725}, {0: 911726}, {0: 911727}, {0: 911730}, {0: 911731}, {0: 911735}, {0: 911738}, {0: 911743}, {0: 911745}, {0: 911748}, {0: 911749}, {0: 911750}, {0: 911751}, {0: 911760}, {0: 911761}, {0: 911763}, {0: 911764}, {0: 911767}, {0: 911773}, {0: 911774}, {0: 911776}, {0: 911783}, {0: 911785}, {0: 911786}, {0: 911787}, {0: 911791}, {0: 911793}, {0: 911794}, {0: 911797}, {0: 911798}, {0: 911800}, {0: 911801}, {0: 911802}, {0: 911803}, {0: 911811}, {0: 911812}, {0: 911813}, {0: 911815}, {0: 911816}, {0: 911819}, {0: 911821}, {0: 911822}, {0: 911824}, {0: 911826}, {0: 911829}, {0: 911835}, {0: 911839}, {0: 911841}, {0: 911843}, {0: 911844}, {0: 911845}, {0: 911848}, {0: 911850}, {0: 911857}, {0: 911864}, {0: 911865}, {0: 911867}, {0: 911868}, {0: 911869}, {0: 911871}, {0: 911872}, {0: 911873}, {0: 911875}, {0: 911876}, {0: 911878}, {0: 911880}, {0: 911883}, {0: 911884}, {0: 911885}, {0: 911886}, {0: 911887}, {0: 911888}, {0: 911892}, {0: 911894}, {0: 911896}, {0: 911898}, {0: 911900}, {0: 911907}, {0: 911911}, {0: 911913}, {0: 911914}, {0: 911915}, {0: 911918}, {0: 911919}, {0: 911922}, {0: 911924}, {0: 911925}, {0: 911926}, {0: 911930}, {0: 911933}, {0: 911936}, {0: 911940}, {0: 911941}, {0: 911944}, {0: 911945}, {0: 911946}, {0: 911947}, {0: 911948}, {0: 911951}, {0: 911953}, {0: 911954}, {0: 911955}, {0: 911956}, {0: 911957}, {0: 911958}, {0: 911961}, {0: 911963}, {0: 911966}, {0: 911967}, {0: 911970}, {0: 911972}, {0: 911980}, {0: 911983}, {0: 911985}, {0: 911991}, {0: 911993}, {0: 912006}, {0: 912009}, {0: 912013}, {0: 912017}, {0: 912019}, {0: 912023}, {0: 912030}, {0: 912035}, {0: 912037}, {0: 912042}, {0: 912046}, {0: 912047}, {0: 912049}, {0: 912050}, {0: 912051}, {0: 912054}, {0: 912056}, {0: 912058}, {0: 912061}, {0: 912062}, {0: 912064}, {0: 912069}, {0: 912071}, {0: 912074}, {0: 912075}, {0: 912076}, {0: 912078}, {0: 912079}, {0: 912080}, {0: 912081}, {0: 912082}, {0: 912085}, {0: 912087}, {0: 912089}, {0: 912090}, {0: 912091}, {0: 912093}, {0: 912097}, {0: 912101}, {0: 912102}, {0: 912103}, {0: 912106}, {0: 912111}, {0: 912112}, {0: 912113}, {0: 912116}, {0: 912119}, {0: 912123}, {0: 912124}, {0: 912127}, {0: 912129}, {0: 912131}, {0: 912133}, {0: 912134}, {0: 912135}, {0: 912136}, {0: 912139}, {0: 912144}, {0: 912154}, {0: 912155}, {0: 912158}, {0: 912160}, {0: 912162}, {0: 912165}, {0: 912166}, {0: 912171}, {0: 912172}, {0: 912173}, {0: 912175}, {0: 912176}, {0: 912181}, {0: 912184}, {0: 912185}, {0: 912186}, {0: 912188}, {0: 912196}, {0: 912200}, {0: 912201}, {0: 912205}, {0: 912209}, {0: 912219}, {0: 912224}, {0: 912225}, {0: 912228}, {0: 912229}, {0: 912230}, {0: 912233}, {0: 912247}, {0: 912249}, {0: 912261}, {0: 912265}, {0: 912273}, {0: 912274}, {0: 912275}, {0: 912276}, {0: 912277}, {0: 912278}, {0: 912288}, {0: 912294}, {0: 912299}, {0: 912301}, {0: 912305}, {0: 912306}, {0: 912312}, {0: 912315}, {0: 912319}, {0: 912323}, {0: 912329}, {0: 912334}, {0: 912343}, {0: 912345}, {0: 912347}, {0: 912348}, {0: 912354}, {0: 912355}, {0: 912365}, {0: 912367}, {0: 912371}, {0: 912372}, {0: 912373}, {0: 912387}, {0: 912393}, {0: 912394}, {0: 912396}, {0: 912398}, {0: 912399}, {0: 912401}, {0: 912404}, {0: 912405}, {0: 912407}, {0: 912412}, {0: 912416}, {0: 912417}, {0: 912419}, {0: 912420}, {0: 912421}, {0: 912422}, {0: 912430}, {0: 912431}, {0: 912432}, {0: 912434}, {0: 912435}, {0: 912437}, {0: 912439}, {0: 912449}, {0: 912453}, {0: 912455}, {0: 912457}, {0: 912462}, {0: 912464}, {0: 912465}, {0: 912468}, {0: 912470}, {0: 912471}, {0: 912472}, {0: 912473}, {0: 912476}, {0: 912477}, {0: 912486}, {0: 912492}, {0: 912493}, {0: 912494}, {0: 912495}, {0: 912497}, {0: 912499}, {0: 912500}, {0: 912501}, {0: 912502}, {0: 912505}, {0: 912506}, {0: 912507}, {0: 912509}, {0: 912510}, {0: 912514}, {0: 912515}, {0: 912522}, {0: 912523}, {0: 912524}, {0: 912525}, {0: 912527}, {0: 912528}, {0: 912529}, {0: 912532}, {0: 912533}, {0: 912536}, {0: 912537}, {0: 912540}, {0: 912543}, {0: 912544}, {0: 912545}, {0: 912547}, {0: 912549}, {0: 912551}, {0: 912552}, {0: 912556}, {0: 912561}, {0: 912562}, {0: 912563}, {0: 912570}, {0: 912571}, {0: 912585}, {0: 912586}, {0: 912591}, {0: 912592}, {0: 912593}, {0: 912594}, {0: 912596}, {0: 912601}, {0: 912614}, {0: 912616}, {0: 912622}, {0: 912624}, {0: 912625}, {0: 912626}, {0: 912627}, {0: 912628}, {0: 912629}, {0: 912630}, {0: 912636}, {0: 912637}, {0: 912639}, {0: 912640}, {0: 912641}, {0: 912649}, {0: 912652}, {0: 912657}, {0: 912664}, {0: 912665}, {0: 912668}, {0: 912678}, {0: 912681}, {0: 912683}, {0: 912700}, {0: 912701}, {0: 912709}, {0: 912711}, {0: 912712}, {0: 912713}, {0: 912716}, {0: 912717}, {0: 912718}, {0: 912720}, {0: 912724}, {0: 912725}, {0: 912726}, {0: 912727}, {0: 912729}, {0: 912732}, {0: 912733}, {0: 912736}, {0: 912738}, {0: 912740}, {0: 912741}, {0: 912742}, {0: 912743}, {0: 912749}, {0: 912752}, {0: 912757}, {0: 912758}, {0: 912762}, {0: 912763}, {0: 912767}, {0: 912775}, {0: 912776}, {0: 912779}, {0: 912782}, {0: 912783}, {0: 912788}, {0: 912790}, {0: 912796}, {0: 912800}, {0: 912801}, {0: 912802}, {0: 912803}, {0: 912808}, {0: 912809}, {0: 912810}, {0: 912811}, {0: 912812}, {0: 912815}, {0: 912816}, {0: 912818}, {0: 912822}, {0: 912830}, {0: 912831}, {0: 912832}, {0: 912838}, {0: 912841}, {0: 912842}, {0: 912848}, {0: 912849}, {0: 912852}, {0: 912854}, {0: 912859}, {0: 912860}, {0: 912863}, {0: 912865}, {0: 912869}, {0: 912876}, {0: 912878}, {0: 912883}, {0: 912887}, {0: 912888}, {0: 912892}, {0: 912894}, {0: 912898}, {0: 912899}, {0: 912900}, {0: 912902}, {0: 912903}, {0: 912904}, {0: 912908}, {0: 912910}, {0: 912916}, {0: 912919}, {0: 912921}, {0: 912923}, {0: 912924}, {0: 912927}, {0: 912931}, {0: 912935}, {0: 912937}, {0: 912944}, {0: 912945}, {0: 912946}, {0: 912951}, {0: 912955}, {0: 912956}, {0: 912957}, {0: 912959}, {0: 912962}, {0: 912966}, {0: 912967}, {0: 912969}, {0: 912974}, {0: 912975}, {0: 912979}, {0: 912980}, {0: 912981}, {0: 912982}, {0: 912985}, {0: 912989}, {0: 912990}, {0: 912993}, {0: 912998}, {0: 912999}, {0: 913000}, {0: 913009}, {0: 913010}, {0: 913019}, {0: 913022}, {0: 913023}, {0: 913029}, {0: 913030}, {0: 913031}, {0: 913032}, {0: 913039}, {0: 913042}, {0: 913048}, {0: 913051}, {0: 913055}, {0: 913057}, {0: 913060}, {0: 913061}, {0: 913069}, {0: 913076}, {0: 913078}, {0: 913079}, {0: 913082}, {0: 913083}, {0: 913084}, {0: 913089}, {0: 913090}, {0: 913093}, {0: 913094}, {0: 913097}, {0: 913102}, {0: 913103}, {0: 913110}, {0: 913117}, {0: 913120}, {0: 913121}, {0: 913123}, {0: 913124}, {0: 913127}, {0: 913129}, {0: 913131}, {0: 913133}, {0: 913137}, {0: 913144}, {0: 913148}, {0: 913149}, {0: 913158}, {0: 913161}, {0: 913163}, {0: 913166}, {0: 913184}, {0: 913186}, {0: 913197}, {0: 913199}, {0: 913205}, {0: 913210}, {0: 913211}, {0: 913216}, {0: 913217}, {0: 913218}, {0: 913221}, {0: 913223}, {0: 913224}, {0: 913228}, {0: 913234}, {0: 913235}, {0: 913243}, {0: 913245}, {0: 913246}, {0: 913251}, {0: 913265}, {0: 913267}, {0: 913270}, {0: 913274}, {0: 913277}, {0: 913278}, {0: 913279}, {0: 913283}, {0: 913286}, {0: 913287}, {0: 913296}, {0: 913299}, {0: 913301}, {0: 913306}, {0: 913307}, {0: 913320}, {0: 913322}, {0: 913326}, {0: 913340}, {0: 913348}, {0: 913349}, {0: 913353}, {0: 913367}, {0: 913368}, {0: 913371}, {0: 913379}, {0: 913380}, {0: 913382}, {0: 913383}, {0: 913386}, {0: 913400}, {0: 913410}, {0: 913419}, {0: 913429}, {0: 913431}, {0: 913432}, {0: 913442}, {0: 913443}, {0: 913448}, {0: 913451}, {0: 913453}, {0: 913459}, {0: 913460}]\nLINQ Results: [{0: 900646}, {0: 901783}, {0: 902978}, {0: 903114}, {0: 903285}, {0: 903309}, {0: 903832}, {0: 903990}, {0: 905201}, {0: 905930}, {0: 906929}, {0: 906938}, {0: 908431}, {0: 908763}, {0: 908804}, {0: 908851}, {0: 908961}, {0: 910508}, {0: 910786}, {0: 910927}, {0: 911041}, {0: 912594}, {0: 913224}]\n"
    },
    {
        "id": "11299f6d4fc416b1d6215da33780ad2f9a86c882c1148b913c32f615a6102663",
        "db_name": "bike_1",
        "context_name": "Bike1Context",
        "question": "What are the id and name of the stations that have ever had more than 12 bikes available?",
        "sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
        "linq": "context.Stations.Join(context.Statuses, T1 => T1.Id, T2 => T2.StationId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BikesAvailable > 12).Select(row => new { row.T1.Id, row.T1.Name }).Distinct().ToList();",
        "generated": "context.Statuses.Where(row => row.BikesAvailable > 12).Select(row => new { row.StationId, row.Name }).Distinct().ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,114): error CS1061: 'Status' does not contain a definition for 'Name' and no accessible extension method 'Name' accepting a first argument of type 'Status' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.39"
    },
    {
        "id": "d62d8e4ea22f37da31de947b4a7f36795fa69e4a2bc9d64749090f337330129a",
        "db_name": "bike_1",
        "context_name": "Bike1Context",
        "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
        "sql": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100",
        "linq": "context.Stations.Where(row => row.City == \"Palo Alto\").Select(row => row.Name).Except(context.Trips.GroupBy(row => new { row.EndStationName }).Where(group => group.Count() > 100).Select(group => group.Key.EndStationName)).ToList();",
        "generated": "context.Stations.Where(row => row.City == \"Palo Alto\" &&!context.Trips.Select(row => row.EndStationName).Contains(row.Name)).Select(row => new { row.Name }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: California Ave Caltrain Station}, {0: Cowper at University}, {0: Palo Alto Caltrain Station}, {0: Park at Olive}, {0: University and Emerson}]\nLINQ Results: []\n"
    },
    {
        "id": "7d95d2b5c0f99f5d8d19a1eaf879062c94df8f8c8e27fe4387f8955e72523a25",
        "db_name": "bike_1",
        "context_name": "Bike1Context",
        "question": "How many trips started from Mountain View city and ended at Palo Alto city?",
        "sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
        "linq": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).Join(context.Trips, joined => joined.T2.Id, T4 => T4.Id, (joined, T4) => new { joined.T1, joined.T2, T4 }).Join(context.Stations, joined => joined.T4.EndStationId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, joined.T4, T3 }).Where(row => row.T1.City == \"Mountain View\" && row.T3.City == \"Palo Alto\").Count();",
        "generated": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.EndStationId, (T1, T2) => new { T1, T2 }).Join(context.Stations, T2 => T2.T1.Id, T3 => T3.Id, (T2, T3) => new { T2, T3 }).Where(row => row.T2.T1.City == \"Mountain View\" && row.T3.City == \"Palo Alto\").Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 7}]\nLINQ Results: [{0: 0}]\n"
    },
    {
        "id": "6d27a779ef8af65d2d75589c58378db4f22b639d4d0ff5fd3dd92727e4a818a2",
        "db_name": "bike_1",
        "context_name": "Bike1Context",
        "question": "What is the average latitude and longitude of the starting points of all trips?",
        "sql": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id",
        "linq": "context.Stations.Join(context.Trips, T1 => T1.Id, T2 => T2.StartStationId, (T1, T2) => new { T1, T2 }).GroupBy(row => 1).Select(group => new { AverageLat = group.Select(row => row.T1.Lat).Average(), AverageLong = group.Select(row => row.T1.Long).Average() }).ToList();",
        "generated": "context.Trips.Select(row => new { row.StartStationLat, row.StartStationLong }).Average();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,79): error CS1061: 'Trip' does not contain a definition for 'StartStationLong' and no accessible extension method 'StartStationLong' accepting a first argument of type 'Trip' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.49"
    },
    {
        "id": "e85fe8c16bcc0dc1aafccca0fa969272c5055b1d98656ab2c885dbe684e0df6e",
        "db_name": "news_report",
        "context_name": "NewsReportContext",
        "question": "Show the names of journalists that have reported more than one event.",
        "sql": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1",
        "linq": "context.NewsReports.Join(context.Events, T1 => T1.EventId, T2 => T2.EventId, (T1, T2) => new { T1, T2 }).Join(context.Journalists, joined => joined.T1.JournalistId, T3 => T3.JournalistId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.Name }).Where(group => group.Count() > 1).Select(group => new { group.Key.Name }).ToList();",
        "generated": "context.Journalists.Join(context.NewsReports, T1 => T1.JournalistId, T2 => T2.JournalistId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.JournalistId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "08f31b0ebb7cc9d968d1aa95db757a0f507b86b12f6f1ec144781e4b54fd5e26",
        "db_name": "news_report",
        "context_name": "NewsReportContext",
        "question": "List the names of journalists who have not reported any event.",
        "sql": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)",
        "linq": "context.Journalists.Where(row => !context.NewsReports.Select(row => row.JournalistId).Contains(row.JournalistId)).Select(row => new { row.Name }).ToList();",
        "generated": "context.Journalists.Where(row =>!context.NewsReports.Select(row => row.JournalistId).Contains(row.JournalistId)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "4dd923194fa6e518574df91310cc78e16a597b7808c970459498cb569b8f7507",
        "db_name": "news_report",
        "context_name": "NewsReportContext",
        "question": "what are the average and maximum attendances of all events?",
        "sql": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event",
        "linq": "context.Events.GroupBy(row => 1).Select(group => new { AverageEventAttendance = group.Select(row => row.EventAttendance).Average(), MaxEventAttendance = group.Select(row => row.EventAttendance).Max() }).ToList();",
        "generated": "context.Events.Select(row => new { row.EventAttendance }).Average()<|end_of_text|>",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,101): error CS1525: Invalid expression term '>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:00.74"
    },
    {
        "id": "0b87c20c9f92e0260f378e36bc6befb6a7fb7ed1a0979b6a6cf08af4628d20e5",
        "db_name": "news_report",
        "context_name": "NewsReportContext",
        "question": "List the event venues and names that have the top 2 most number of people attended.",
        "sql": "SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2",
        "linq": "context.Events.OrderByDescending(row => row.EventAttendance).Select(row => new { row.Venue, row.Name }).Take(2).ToList();",
        "generated": "context.Events.OrderByDescending(row => row.EventAttendance).Select(row => new { row.Venue, row.Name }).Take(2).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "a4a2175e95cb64803791783135ca6fd4e86ca32dee39f2353599a575b42fb905",
        "db_name": "local_govt_and_lot",
        "context_name": "LocalGovtAndLotContext",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "sql": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "linq": "context.CustomerEvents.Select(row => new { row.CustomerEventId, row.DateMovedIn, row.PropertyId }).ToList();",
        "generated": "context.Customers.Select(row => new { row.CustomerId, row.CustomerDetails }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 70, 1: 2015-03-27 12:00:00, 2: 605}, {0: 160, 1: 2015-03-27 12:00:00, 2: 879}, {0: 166, 1: 2015-03-27 12:00:00, 2: 629}, {0: 216, 1: 2015-03-27 12:00:00, 2: 669}, {0: 226, 1: 2015-03-27 12:00:00, 2: 748}, {0: 256, 1: 2015-03-27 12:00:00, 2: 108}, {0: 428, 1: 2015-03-27 12:00:00, 2: 954}, {0: 530, 1: 2015-03-27 12:00:00, 2: 669}, {0: 559, 1: 2015-03-27 12:00:00, 2: 107}, {0: 591, 1: 2016-09-27 12:00:00, 2: 120}, {0: 606, 1: 2016-09-27 12:00:00, 2: 445}, {0: 627, 1: 2016-09-27 12:00:00, 2: 748}, {0: 817, 1: 2016-09-27 12:00:00, 2: 107}]\nLINQ Results: [{0: 4, 1: Mr. Raul Prosacco}, {0: 5, 1: Esteban Senger}, {0: 16, 1: Tyrique Durgan II}, {0: 17, 1: Malcolm Farrell}, {0: 19, 1: Sabryna Moore PhD}, {0: 21, 1: Dr. Haylie Hilll III}, {0: 31, 1: Monty Sauer III}, {0: 41, 1: Jayme Marquardt}, {0: 63, 1: Vincenza Price}, {0: 69, 1: Elva Boehm}, {0: 76, 1: Kyleigh Schuster}, {0: 79, 1: Oma Smith}, {0: 82, 1: Bridgette Nitzsche PhD}, {0: 87, 1: Jeff McCullough MD}, {0: 91, 1: Mackenzie Hettinger V}]\n"
    },
    {
        "id": "05bc10fd1fcfa8d3cc28cd662a74a84e6dd845c60d1db1580fdccbfb42a9e760",
        "db_name": "local_govt_and_lot",
        "context_name": "LocalGovtAndLotContext",
        "question": "How many customers did not have any event?",
        "sql": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )",
        "linq": "context.Customers.Where(row => !context.CustomerEvents.Select(row => row.CustomerId).Contains(row.CustomerId)).Count();",
        "generated": "context.Customers.Where(row =>!context.CustomerEvents.Select(row => row.CustomerId).Contains(row.CustomerId)).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "00756d572ab46299a7b2eba41ce142193f95ec9f6e506b1216a86bea906cf611",
        "db_name": "local_govt_and_lot",
        "context_name": "LocalGovtAndLotContext",
        "question": "What are the distinct move in dates of the residents?",
        "sql": "SELECT DISTINCT date_moved_in FROM residents",
        "linq": "context.Residents.Select(row => new { row.DateMovedIn }).Distinct().ToList();",
        "generated": "context.Residents.Select(row => row.DateMovedIn).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 2017-06-17 15:43:33}, {0: 2015-03-27 12:00:00}, {0: 2016-09-27 12:00:00}]\nLINQ Results: [{0: 2017-06-17 00:00:00, 1: 17, 2: Saturday, 3: 168, 4: 15, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 43, 10: 6, 11: 2024-08-19 08:56:17, 12: 33, 13: 636333110130000000, 14: 15:43:33, 15: 2024-08-19 00:00:00, 16: 2017, 17: 2024-08-19 05:56:17}, {0: 2015-03-27 00:00:00, 1: 27, 2: Friday, 3: 86, 4: 12, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 0, 10: 3, 11: 2024-08-19 08:56:17, 12: 0, 13: 635630544000000000, 14: 12:00:00, 15: 2024-08-19 00:00:00, 16: 2015, 17: 2024-08-19 05:56:17}, {0: 2016-09-27 00:00:00, 1: 27, 2: Tuesday, 3: 271, 4: 12, 5: Unspecified, 6: 0, 7: 0, 8: 0, 9: 0, 10: 9, 11: 2024-08-19 08:56:17, 12: 0, 13: 636105744000000000, 14: 12:00:00, 15: 2024-08-19 00:00:00, 16: 2016, 17: 2024-08-19 05:56:17}]\n"
    },
    {
        "id": "f0107c731ad1d672f19b49e0530dd50431680cbac700d3de60b759e580916ab1",
        "db_name": "cinema",
        "context_name": "CinemaContext",
        "question": "Show cinema name, film title, date, and price for each record in schedule.",
        "sql": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id",
        "linq": "context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).Join(context.Cinemas, joined => joined.T1.CinemaId, T3 => T3.CinemaId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T3.Name, row.T2.Title, row.T1.Date, row.T1.Price }).ToList();",
        "generated": "context.Schedules.Join(context.Cinemas, T1 => T1.CinemaId, T2 => T2.CinemaId, (T1, T2) => new { T1, T2 }).Join(context.Films, joined => joined.T1.FilmId, T3 => T3.FilmId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T2.Name, row.T3.Title, row.T1.Date, row.T1.Price }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "546c944ad17178f708398a111ea08b3ac344291c82385f07cd71dc5ae2866726",
        "db_name": "cinema",
        "context_name": "CinemaContext",
        "question": "What are the title and director of the films without any schedule?",
        "sql": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
        "linq": "context.Films.Where(row => !context.Schedules.Select(row => row.FilmId).Contains(row.FilmId)).Select(row => new { row.Title, row.DirectedBy }).ToList();",
        "generated": "context.Films.Where(row =>!context.Schedules.Select(row => row.FilmId).Contains(row.FilmId)).Select(row => new { row.Title, row.DirectedBy }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "c8646fc337cb1ad71396cdcac3eb03c9cc10215ba8c525430a3c7bf3051a7410",
        "db_name": "cinema",
        "context_name": "CinemaContext",
        "question": "Show director with the largest number of show times in total.",
        "sql": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
        "linq": "context.Schedules.Join(context.Films, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DirectedBy }).OrderByDescending(group => group.Sum(row => row.T1.ShowTimesPerDay)).Select(group => new { group.Key.DirectedBy }).Take(1).ToList();",
        "generated": "context.Films.Join(context.Schedules, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DirectedBy }).OrderByDescending(group => group.Sum(row => row.T2.ShowTimesPerDay)).Select(group => new { group.Key.DirectedBy }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "77d550b533006953f78d64929a6be77a5a1c2a5595e522fb80a63e3aa6e2294d",
        "db_name": "cinema",
        "context_name": "CinemaContext",
        "question": "Find the locations that have more than one movie theater with capacity above 300.",
        "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "linq": "context.Cinemas.Where(row => row.Capacity > 300).GroupBy(row => new { row.Location }).Where(group => group.Count() > 1).Select(group => new { group.Key.Location }).ToList();",
        "generated": "context.Cinemas.Join(context.Schedules, T1 => T1.CinemaId, T2 => T2.CinemaId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ShowTimesPerDay > 0).GroupBy(row => new { row.T1.Location }).Where(group => group.Count() > 1).Select(group => new { group.Key.Location }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: County Clare}]\nLINQ Results: [{0: County Wicklow}]\n"
    },
    {
        "id": "56a214321dca89f12254279f6eac1ff75b0bfeaf9e8a2c281b3119c25386489e",
        "db_name": "cinema",
        "context_name": "CinemaContext",
        "question": "How many films have the word 'Dummy' in their titles?",
        "sql": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
        "linq": "context.Films.Where(row => EF.Functions.Like(row.Title, \"%Dummy%\")).Count();",
        "generated": "context.Films.Where(row => row.Title.Contains(\"Dummy\")).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b50ca2c9b70ffebd4956a79b9ee1afc70438d3a7f0fd9fffcc4ab4c2e7426d34",
        "db_name": "wine_1",
        "context_name": "Wine1Context",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "linq": "context.Wines.Where(row => row.Year < context.Wines.Where(row => row.Winery == \"Brander\").Select(row => row.Year).Min()).Select(row => new { row.Name }).ToList();",
        "generated": "context.Wines.Where(row => row.Year < context.Wines.Where(row => row.Winery == \"Brander\").Select(row => row.Year).Max()).Select(row => row.Name).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "0327284b61d111a04904374454d02110c4c234a76da1aab4cd1aedc9a4daf31c",
        "db_name": "wine_1",
        "context_name": "Wine1Context",
        "question": "What are the names of wines that are more expensive then all wines made in the year 2006?",
        "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)",
        "linq": "context.Wines.Where(row => row.Price > context.Wines.Where(row => row.Year == 2006).Select(row => row.Price).Max()).Select(row => new { row.Name }).ToList();",
        "generated": "context.Wines.Where(row => row.Year > 2006).Select(row => new { row.Name }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Darius II}]\nLINQ Results: [{0: Old Kraft Vineyard}, {0: Giana}, {0: Black Chicken}, {0: Napa Ranches}, {0: Varozza Vineyard}, {0: Mother Clone}, {0: Zinfandel}, {0: Sauvignon Blanc}, {0: Les Pionniers}, {0: Cuvee Nicolas}, {0: Tradition}, {0: Church Vineyard}, {0: LApres-Midi}, {0: Rosemarys Block Dry Stack Vineyard}, {0: Sauvignon Blanc}, {0: Sauvignon Blanc}, {0: Sauvignon Blanc}, {0: Mesa Verde Vineyard}, {0: Sauvignon Blanc}, {0: Sauvignon Blanc}, {0: Sauvignon Blanc}, {0: Asatsuyu}, {0: Estate}, {0: Sauvignon Blanc}, {0: Home Ranch}, {0: Hyde Vineyards}, {0: Purisma Mountain}, {0: 3CV Grassini Family Vineyards}, {0: Schmidt Ranch}, {0: Sauvignon Blanc}, {0: Cuvee Natalie}, {0: au Naturel}, {0: Handley Vineyard}, {0: Wow Oui}, {0: Sauvignon Blanc}, {0: Sauvignon Blanc}, {0: Sauvignon Blanc}, {0: Sauvignon Blanc}, {0: Sauvignon Blanc}, {0: Magnolia Lane}, {0: Carols Vineyard}, {0: East Side Vineyards}, {0: Sauvignon Blanc}, {0: Sauvignon Blanc}, {0: Sauvignon Blanc}, {0: Sauvignon Blanc}, {0: Sauvignon Blanc}, {0: Pritchard Hill}, {0: Reserve}, {0: Neyers Ranch - Conn Valley}, {0: Annum}, {0: Cabernet Sauvignon}, {0: Beckstoffer To Kalon Vineyard}, {0: Coliseum Block}, {0: 1886}, {0: Cabernet Sauvignon}, {0: Beckstoffer To Kalon Vineyard}, {0: Couer de Valee}, {0: Amber Ridge Vineyard}, {0: Keefer Ranch}, {0: Koplen Vineyard}, {0: Freestone Hill}, {0: Julias Vineyard}, {0: Carneros Hyde Vineyard}, {0: Pinot Noir}, {0: Garys Vineyard}, {0: Kanzler Vineyard}, {0: Five Sisters}, {0: Pisoni Vineyard}, {0: Rosellas Vineyard}, {0: Kanzler Vineyard}, {0: Valley Bliss Block}, {0: Pinot Noir}, {0: Lancel Creek Vineyard}, {0: Pinot Noir}, {0: 4-Barrel}, {0: Gaps Crown Vineyard}, {0: Pinot Noir}, {0: Reserve}, {0: A by Acacia}, {0: La Encantada Vineyard}, {0: La Encantada Vineyard Clone 667}, {0: Estate Reserve}, {0: Carneros}, {0: Pinot Noir}, {0: Garys Vineyard}, {0: Pinot Noir}, {0: Sarmento Vineyard}, {0: Pinot Noir}, {0: Pinot Noir}, {0: Pinot Noir}, {0: Pinot Noir}, {0: Henry Ranch}, {0: Pinot Noir}, {0: Kali Hart}, {0: Pinot Noir}, {0: Pinot Noir}, {0: Pinot Noir}, {0: Sleepy Hollow Vineyard}, {0: Pinot Noir}, {0: Syrah}, {0: Eddies Patch}, {0: Merlot}, {0: Reserve}, {0: Darius II}, {0: Cabernet Sauvignon}, {0: Hillstone Vineyard}, {0: Tomahawk Vineyard}, {0: Elevage}, {0: Cabernet Sauvignon}, {0: Cabernet Sauvignon}, {0: Neruda Brix Vineyard}, {0: Cabernet Sauvignon}, {0: Cabernet Sauvignon}, {0: On the Road}, {0: Garnacha Denner Vineyard}, {0: Purisma Mountain Vineyard}, {0: Hope Family Vineyard}, {0: Foggy Knoll Vineyard}, {0: Anns Block}, {0: Kick Ranch}, {0: Thompson Vineyard}, {0: Hayne Vineyard}, {0: Sweetwater Springs Vineyard}, {0: Petite Sirah}, {0: Rosellas Vineyard}, {0: Pisoni Vineyard}, {0: Kanzler Vineyard}, {0: Russel Family Vineyard}, {0: Durell Vineyard}, {0: Garys Vineyard}, {0: Garys Vineyard}, {0: Rancho Oliveros Vineyard}, {0: Graham Family Vineyard}, {0: Pinot Noir}, {0: Pinot Noir}, {0: Garys Vineyard}, {0: Clos Pepe Vineyard}, {0: Keefer Ranch Vineyard}, {0: Keefer Ranch Vineyard}, {0: Cargasacchi Vineyard}, {0: Pinot Noir}, {0: Clos Pepe Vineyard}, {0: Turner Vineyard}, {0: Rancho La Vina Vineyard}, {0: Pinot Noir}, {0: Limited Release}, {0: Aubaine Vineyard}, {0: Pinot Noir}, {0: Pinot Noir}, {0: Pinot Noir}, {0: Quarzo}, {0: Rosellas Vineyard}, {0: Cardiac Hill}, {0: Larner Vinyard}, {0: White Hawk Vineyard}, {0: Mesa Reserve}, {0: Twist of Fate}, {0: Syrah}, {0: Garys Vineyard}, {0: Kemp Vineyard}, {0: Christensen Family Vineyard}, {0: Syrah}, {0: The Flight}, {0: Colson Canyon Vineyard}, {0: Syrah}, {0: England-Shaw}, {0: Rose Steinbeck Vineyard}, {0: La Cruz Vineyard}, {0: Syrah}, {0: Syrah}, {0: Syrah}, {0: Snows Lake Vineyard}, {0: Abba Vineyard}, {0: Originals}, {0: Gesture Limited Release}, {0: Star Angel }, {0: Kick Ranch Reserve}, {0: Syrah}, {0: Syrah}, {0: Les Cotes De LOuest}, {0: Shiraz}, {0: Carlisle Vineyard}, {0: Cedarman}, {0: Tofanelli Vineyard}, {0: Fredericks Vineyard}, {0: Rossi Ranch}, {0: Treborce Vineyard}, {0: Wild Oak Old Vines}, {0: Old Vine}, {0: Wheelhouse}, {0: Zinfandel}, {0: Zinfandel}, {0: SHR Field Blend}, {0: Edizione Pennino}, {0: Chardonnay}, {0: La Cruz Vineyard}, {0: Signature}, {0: Loco}, {0: Chardonnay}, {0: Ma Belle-Fille}, {0: Durell Vineyard Wente Clone}, {0: Estate Vineyard}, {0: Belle Cote}, {0: Mon Plaisir}, {0: Untilited #3}, {0: Los Alamos Vineyard Historic Vineyards Collection}, {0: Chardonnay}, {0: Cahrles Heintz Vineyard}, {0: Santa Cruz Mountains Estate}, {0: Red Shoulder Ranch}, {0: Winmakers Reserve}, {0: Sangiacomo Vineyard}, {0: Sbraglia Limited-Release}, {0: Chardonnay}, {0: Chardonnay}, {0: La Carrlere}, {0: Chardonnay}, {0: Home Ranch}, {0: Chardonnay}, {0: Carneros}, {0: Chardonnay}, {0: Chardonnay}, {0: Keefer Ranch}, {0: Chardonnay}, {0: Private Reserve}, {0: Chardonnay}, {0: Chardonnay}, {0: Dutton Ranch}, {0: Chardonnay}, {0: Emelias Cuvee}, {0: Laughlin Family Vineyard}, {0: Chardonnay}, {0: B. Theriot Vineyard}, {0: Ceja Vineyard}, {0: Chardonnay}, {0: Chardonnay}, {0: Chardonnay}, {0: Proprietary Reserve}, {0: Los Carneros}, {0: Chardonnay}, {0: Carneros}, {0: Chardonnay}, {0: Signature}, {0: Valley Dominique}, {0: Chardonnay}, {0: Founders}, {0: Gold Creek Ranch}, {0: Chardonnay}, {0: Chardonnay}, {0: De La Guerra}, {0: Chardonnay}, {0: Carneros}, {0: Chardonnay}, {0: Chardonnay}, {0: Chardonnay}, {0: Chardonnay}, {0: Chardonnay}, {0: Chardonnay}, {0: Chardonnay}, {0: Chardonnay}, {0: Finest Selection Reserve}, {0: Valley Savoy}, {0: Coster Vineyard}, {0: Lambda}, {0: Pinot Noir}, {0: Hurst Vineyard}, {0: Keefer Ranch}, {0: Pinot Noir}, {0: McDougal Ranch}, {0: Clos Pepe Vineyard}, {0: Pinot Noir}, {0: Kanzler Vineyard}, {0: Ramondo Vineyard}, {0: Symposium Fort Ross Vineyard}, {0: Grand Detour}, {0: Valley Dutton Ranch}, {0: Pinot Noir}, {0: Pinot Noir}, {0: Papas Block}, {0: Rosellas Vineyard}, {0: Zinfandel}, {0: Problem Child}, {0: Rossi Ranch}, {0: Zinfandel}, {0: Montafi Ranch}, {0: Old vine Della Costa Family Vineyard}, {0: Giuseppe & Luisa}, {0: Zinfandel}, {0: Backroads}, {0: Heritage}, {0: Knotty Vines}, {0: Ancient Vines}, {0: Incredible Red}, {0: Special Selection}, {0: Date Night}, {0: Black Label}, {0: Cabernet Sauvignon}, {0: Artistry}, {0: Napa Angel Aurelios Selection}, {0: Eterium B. Thieriot Vineyard}, {0: Chardonnay}, {0: Metallico Un-Oaked}, {0: Reserve}, {0: Russian River Selection}, {0: Chardonnay}, {0: Chardonnay}, {0: Numbers}, {0: Pinot Noir}, {0: Zinfandel}, {0: Merlot}, {0: Zinfandel}, {0: Beckstoffer Dr. Crane Vineyard}, {0: DAdamo Vineyard}, {0: InSpire}, {0: Cabernet Sauvignon}, {0: Cabernet Sauvignon}, {0: Cabernet Sauvignon}, {0: Cabernet Sauvignon}, {0: Spare Me}, {0: Jersey Boy}, {0: Artistry}, {0: District 4}, {0: Elevation 1147}, {0: La Capilla Collection}, {0: Cabernet Sauvignon}, {0: To the Rescue}, {0: Pictures}, {0: Rose Wine Creek Ranch}, {0: Merlot}, {0: Chelsea Goldschmidt}, {0: Ryan}, {0: Pinot Noir}, {0: Finn}, {0: Aidan}, {0: Eoin}, {0: Ulises Valdez Vineyard}, {0: Pinot Noir}, {0: Victories Rose}, {0: La Cruz Vineyard}, {0: Grand Firepeak Cuvee Firepeak Vineyard}, {0: Sleepy Hollow Vineyard}, {0: Pinot Noir}, {0: Sauvignon Blanc}, {0: Fume Blanc}, {0: Sauvignon Blanc}, {0: Lillie Vineyard}, {0: Sauvignon Blanc}, {0: Papas Block}, {0: Labels}, {0: Madden Ranch}, {0: Rose}, {0: Rosellas Vineyard}, {0: Syrah}, {0: Highwire Vineyard}, {0: Rocky Terrace Los Chamizal Vineyards}, {0: Century Vines Reserve}, {0: Boticelli Vineyards}, {0: Todd Brothers Ranch Old Vines}, {0: Old Vine}, {0: Somers Ranch}, {0: Reserve}, {0: Morning Sun Los Chamizal Vineyards}, {0: Jesses Vineyard}, {0: Carlas Reserve}, {0: Ginos Vineyard}, {0: Zinfandel}, {0: Bridgehead}, {0: Old vine Della Costa Family Vineyard}, {0: Zinfandel}, {0: Pato Vineyard}, {0: Zinfandel}, {0: Cullinane Reserve}, {0: Edizione Pennino}, {0: Zinfandel}, {0: Bushnell Vineyard}, {0: Old Vines}, {0: Zinfandel}, {0: Primitivo Block #4}, {0: A by Acacia}]\n"
    },
    {
        "id": "ebf75b837efbbb970548c9053d65f291d2e30fa34ebbefe37ef4a273ff1ab0f2",
        "db_name": "wine_1",
        "context_name": "Wine1Context",
        "question": "Find the top 3 wineries with the greatest number of wines made of white color grapes.",
        "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
        "linq": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Color == \"White\").GroupBy(row => new { row.T2.Winery }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Winery }).Take(3).ToList();",
        "generated": "context.Grapes.Join(context.Wines, T1 => T1.Grape1, T2 => T2.Grape, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Color }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Color, group.First().T2.Winery }).Take(3).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Peter Michael}, {0: Kistler}, {0: Brander}]\nLINQ Results: [{0: Red, 1: Robert Biale}, {0: White, 1: Altamura}]\n"
    },
    {
        "id": "5efdb7f2930b439b39a2490f572d72210e289feda07eb26ab309649353b10c29",
        "db_name": "wine_1",
        "context_name": "Wine1Context",
        "question": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.",
        "sql": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR",
        "linq": "context.Wines.Where(row => row.Price > 100).OrderBy(row => row.Year).Select(row => new { row.Grape, row.Winery, row.Year }).ToList();",
        "generated": "context.Wines.Where(row => row.Price > 100).Select(row => new { row.Grape, row.Winery, row.Year }).OrderBy(row => row.Year).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "3378ae486017c0abaca91efa686f0bcd87dd6ec961e1695fab9eb1d62c07bd1a",
        "db_name": "wine_1",
        "context_name": "Wine1Context",
        "question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
        "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name",
        "linq": "context.Wines.Where(row => row.Score > 93).OrderBy(row => row.Name).Select(row => new { row.Grape, row.Appelation, row.Name }).ToList();",
        "generated": "context.Wines.Where(row => row.Score > 93).Select(row => new { row.Grape, row.Appelation, row.Name }).OrderBy(row => row.Name).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "f811633da433a2bb5af5656cda380ec421afcf450f38d9e27c837e59ffbb87fa",
        "db_name": "wine_1",
        "context_name": "Wine1Context",
        "question": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.",
        "sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
        "linq": "context.Wines.Where(row => row.Year > 2008).Select(row => row.Appelation).Except(context.Appellations.Where(row => row.Area == \"Central Coast\").Select(row => row.Appelation)).ToList();",
        "generated": "context.Appellations.Where(row => row.Year > 2008 && row.County!= \"Central Coast\").Select(row => new { row.Appelation }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,58): error CS1061: 'Appellation' does not contain a definition for 'Year' and no accessible extension method 'Year' accepting a first argument of type 'Appellation' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.45"
    },
    {
        "id": "e71b75be7918a8bfbbd969be94a1decd1bd2c66bcde41ed234cae9920be73b43",
        "db_name": "wine_1",
        "context_name": "Wine1Context",
        "question": "Find the average price of wines that are not produced from Sonoma county.",
        "sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')",
        "linq": "context.Wines.Where(row => !context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T1.County == \"Sonoma\").Select(row => row.T1.Appelation).Contains(row.Appelation)).Select(row => row.Price).Average();",
        "generated": "context.Wines.Where(row => row.Appelation!= \"Sonoma\").Select(row => row.Price).Average();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 46.53503184713376}]\nLINQ Results: [{0: 45.406}]\n"
    },
    {
        "id": "f558f0fbb76ca996ff7980dd08d135c1d29d6de6da1040fb823dcd2c08f7bf17",
        "db_name": "wine_1",
        "context_name": "Wine1Context",
        "question": "Find the county where produces the most number of wines with score higher than 90.",
        "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Appellations.Join(context.Wines, T1 => T1.Appelation, T2 => T2.Appelation, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Score > 90).GroupBy(row => new { row.T1.County }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.County }).Take(1).ToList();",
        "generated": "context.Wines.Where(row => row.Score > 90).GroupBy(row => new { row.AppelationNavigation.County }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.County }).Distinct().Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Sonoma}]\nLINQ Results: [{0: Amador}]\n"
    },
    {
        "id": "52dc53650f9e8c413e09b7e3f20abbb719c3035974e281c10c091542fad2ef8b",
        "db_name": "program_share",
        "context_name": "ProgramShareContext",
        "question": "find the names of programs whose origin is not in Beijing.",
        "sql": "SELECT name FROM program WHERE origin != 'Beijing'",
        "linq": "context.Programs.Where(row => row.Origin != \"Beijing\").Select(row => new { row.Name }).ToList();",
        "generated": "context.Programs.Where(row => row.Origin!= \"Beijing\").Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "ddd59e3705d8240770c3c7032fee1c73847bcc70a429dd32fc0e6670a4636a6c",
        "db_name": "program_share",
        "context_name": "ProgramShareContext",
        "question": "What are the names of the channels owned by CCTV or HBS?",
        "sql": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'",
        "linq": "context.Channels.Where(row => row.Owner == \"CCTV\" || row.Owner == \"HBS\").Select(row => new { row.Name }).ToList();",
        "generated": "context.Channels.Where(row => row.Owner == \"CCTV\" || row.Owner == \"HBS\").Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "7c30b092057642281b16d728e71e6e4fe4d323f6543562c4d8f2b70dd080d6f8",
        "db_name": "program_share",
        "context_name": "ProgramShareContext",
        "question": "Find the total rating ratio for each channel owner.",
        "sql": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER",
        "linq": "context.Channels.GroupBy(row => new { row.Owner }).Select(group => new { SumRatingInPercent = group.Select(row => row.RatingInPercent).Sum(), group.Key.Owner }).ToList();",
        "generated": "context.Channels.GroupBy(row => new { row.Owner }).Select(group => new { group.Key.Owner, RatingSum = group.Sum(row => row.RatingInPercent) }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 0.2, 1: Anhui Television}, {0: 2.4299999999999997, 1: CCTV}, {0: 0.53, 1: HBS}, {0: 0.19, 1: Shandong Television}]\nLINQ Results: [{0: Anhui Television, 1: 0.2}, {0: CCTV, 1: 2.4299999999999997}, {0: HBS, 1: 0.53}, {0: Shandong Television, 1: 0.19}]\n"
    },
    {
        "id": "0eaf9ee9600095eae2996f04364abf9edd62eb540c8824d96e8cb976aa732987",
        "db_name": "program_share",
        "context_name": "ProgramShareContext",
        "question": "Find the name of the program that is broadcast most frequently.",
        "sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Programs.Join(context.Broadcasts, t1 => t1.ProgramId, t2 => t2.ProgramId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ProgramId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.Name }).Take(1).ToList();",
        "generated": "context.Program.OrderByDescending(row => context.Broadcasts.Where(row1 => row1.ProgramId == row.ProgramId).Count()).Select(row => new { row.Name }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,28): error CS1061: 'ProgramShareContext' does not contain a definition for 'Program' and no accessible extension method 'Program' accepting a first argument of type 'ProgramShareContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.63"
    },
    {
        "id": "6001d4c2153a65e06b47159250a45e2dc9efde772192c6d47b08dff67b6137f1",
        "db_name": "customer_deliveries",
        "context_name": "CustomerDeliveriesContext",
        "question": "Find the payment method that is used most frequently.",
        "sql": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Customers.GroupBy(row => new { row.PaymentMethod }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PaymentMethod }).Take(1).ToList();",
        "generated": "context.Customers.GroupBy(row => new { row.PaymentMethod }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.PaymentMethod }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "320af40724a24c3a3cdc987f83987081f96c47456a7592cac232398663df64d2",
        "db_name": "customer_deliveries",
        "context_name": "CustomerDeliveriesContext",
        "question": "List the names of all routes in alphabetic order.",
        "sql": "SELECT route_name FROM Delivery_Routes ORDER BY route_name",
        "linq": "context.DeliveryRoutes.OrderBy(row => row.RouteName).Select(row => new { row.RouteName }).ToList();",
        "generated": "context.DeliveryRoutes.OrderBy(row => row.RouteName).Select(row => new { row.RouteName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "0a70e21fd2bd2424d742699e7308f6799a78f42d223e88c5ec4ab52d50324b90",
        "db_name": "customer_deliveries",
        "context_name": "CustomerDeliveriesContext",
        "question": "Find the name of route that has the highest number of deliveries.",
        "sql": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.DeliveryRoutes.Join(context.DeliveryRouteLocations, t1 => t1.RouteId, t2 => t2.RouteId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.RouteId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t1.RouteName }).Take(1).ToList();",
        "generated": "context.OrderDeliveries.Join(context.DeliveryRouteLocations, T1 => T1.LocationCode, T2 => T2.LocationCode, (T1, T2) => new { T1, T2 }).Join(context.DeliveryRoutes, joined => joined.T2.RouteId, T3 => T3.RouteId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.RouteId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.T3.RouteName }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,394): error CS1061: '<anonymous type: int RouteId>' does not contain a definition for 'T3' and no accessible extension method 'T3' accepting a first argument of type '<anonymous type: int RouteId>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.07"
    },
    {
        "id": "3a7fc21b5d7c7aba77d9c99b144a215e51986baa624ee5775aac083772922f9a",
        "db_name": "customer_deliveries",
        "context_name": "CustomerDeliveriesContext",
        "question": "List the state names and the number of customers living in each state.",
        "sql": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",
        "linq": "context.CustomerAddresses.Join(context.Addresses, t1 => t1.AddressId, t2 => t2.AddressId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.StateProvinceCounty }).Select(group => new { group.Key.StateProvinceCounty, Count = group.Count() }).ToList();",
        "generated": "context.Customers.Join(context.CustomerAddresses, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.Addresses, joined => joined.T2.AddressId, T3 => T3.AddressId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.StateProvinceCounty }).Select(group => new { group.Key.StateProvinceCounty, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "fbcb1f7909ab9982cb442fbba8c9fedd484490f1b64e5b7eca00581fe8f264e1",
        "db_name": "entertainment_awards",
        "context_name": "EntertainmentAwardsContext",
        "question": "List the most common type of artworks.",
        "sql": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
        "linq": "context.Artworks.GroupBy(row => new { row.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
        "generated": "context.Artworks.GroupBy(row => new { row.Type }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Type }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "319b162b4a0d9c38c8854836fdbb4ca345388880fed065496193eebad4df9099",
        "db_name": "entertainment_awards",
        "context_name": "EntertainmentAwardsContext",
        "question": "List the year in which there are more than one festivals.",
        "sql": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1",
        "linq": "context.FestivalDetails.GroupBy(row => new { row.Year }).Where(group => group.Count() > 1).Select(group => new { group.Key.Year }).ToList();",
        "generated": "context.FestivalDetails.GroupBy(row => new { row.Year }).Where(group => group.Count() > 1).Select(group => new { group.Key.Year }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b9087b7581537ee82e997cbee8c0224e60e8a055b584f6f7e7ade5545bdd5151",
        "db_name": "entertainment_awards",
        "context_name": "EntertainmentAwardsContext",
        "question": "List the name of artworks that are not nominated.",
        "sql": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)",
        "linq": "context.Artworks.Where(row => !context.Nominations.Select(row => row.ArtworkId).Contains(row.ArtworkId)).Select(row => new { row.Name }).ToList();",
        "generated": "context.Artworks.Where(row =>!context.Nominations.Select(row => row.ArtworkId).Contains(row.ArtworkId)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "9667828666e3ac5c849111b83dd74abc15077397a5a8e4c4af721cf9be99cd1d",
        "db_name": "entertainment_awards",
        "context_name": "EntertainmentAwardsContext",
        "question": "Show the number of audience in year 2008 or 2010.",
        "sql": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010",
        "linq": "context.FestivalDetails.Where(row => row.Year == 2008 || row.Year == 2010).Select(row => new { row.NumOfAudience }).ToList();",
        "generated": "context.FestivalDetails.Where(row => row.Year == 2008 || row.Year == 2010).Select(row => new { row.NumOfAudience }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "21f48184054d219331a2b2452a7c1b72a464f1180594c28b73772727ed6b5618",
        "db_name": "entertainment_awards",
        "context_name": "EntertainmentAwardsContext",
        "question": "What are the total number of the audiences who visited any of the festivals?",
        "sql": "SELECT sum(Num_of_Audience) FROM festival_detail",
        "linq": "context.FestivalDetails.Select(row => row.NumOfAudience).Sum();",
        "generated": "context.FestivalDetails.Select(row => row.NumOfAudience).Sum();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "f0e36835362a506f377a04ab63ee34df9db71b41c4141d67567f56f59f59f59e",
        "db_name": "journal_committee",
        "context_name": "JournalCommitteeContext",
        "question": "Show the id, name of each editor and the number of journal committees they are on.",
        "sql": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id",
        "linq": "context.Editors.Join(context.JournalCommittees, T1 => T1.EditorId, T2 => T2.EditorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EditorId }).Select(group => new { group.Key.EditorId, group.First().T1.Name, Count = group.Count() }).ToList();",
        "generated": "context.Editors.Join(context.JournalCommittees, T1 => T1.EditorId, T2 => T2.EditorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.EditorId }).Select(group => new { group.Key.EditorId, Name = group.First().T1.Name, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "fe3ec84f4f745092d34ecb134eb2e878d677c2490f8e7e277ae52624efbf1eb3",
        "db_name": "journal_committee",
        "context_name": "JournalCommitteeContext",
        "question": "Show the names of editors that are on at least two journal committees.",
        "sql": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2",
        "linq": "context.Editors.Join(context.JournalCommittees, T1 => T1.EditorId, T2 => T2.EditorId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Name }).ToList();",
        "generated": "context.Editors.Join(context.JournalCommittees, t1 => t1.EditorId, t2 => t2.EditorId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.EditorId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.t1.Name }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,241): error CS1061: '<anonymous type: int EditorId>' does not contain a definition for 't1' and no accessible extension method 't1' accepting a first argument of type '<anonymous type: int EditorId>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.99"
    },
    {
        "id": "2662724da4012c9b2133b3cde99c14a286617c15839a3f41f25e277d047a21df",
        "db_name": "journal_committee",
        "context_name": "JournalCommitteeContext",
        "question": "List the names of editors that are not on any journal committee.",
        "sql": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "linq": "context.Editors.Where(row => !context.JournalCommittees.Select(row => row.EditorId).Contains(row.EditorId)).Select(row => new { row.Name }).ToList();",
        "generated": "context.Editors.Where(row =>!context.JournalCommittees.Select(row => row.EditorId).Contains(row.EditorId)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "a1c19ba96d08b7191a81d1fb494998139a3baca4f6942970cbe82d97c0094e69",
        "db_name": "journal_committee",
        "context_name": "JournalCommitteeContext",
        "question": "What is the average sales of the journals that have an editor whose work type is 'Photo'?",
        "sql": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'",
        "linq": "context.Journals.Join(context.JournalCommittees, T1 => T1.JournalId, T2 => T2.JournalId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.WorkType == \"Photo\").Select(row => row.T1.Sales).Average();",
        "generated": "context.Journals.Join(context.JournalCommittees, t1 => t1.JournalId, t2 => t2.JournalId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.WorkType == \"Photo\").Select(row => row.t1.Sales).Average();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "6c57046010c884e4aefaa246b480f8a48b719f6ae2eb85c8b185a03ba6d59f40",
        "db_name": "club_1",
        "context_name": "Club1Context",
        "question": "Find the names of the clubs that have at least a member from the city with city code \"HOU\".",
        "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"",
        "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.CityCode == \"HOU\").Select(row => new { row.t1.ClubName }).Distinct().ToList();",
        "generated": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.CityCode == \"HOU\").Select(row => row.t1.ClubName).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "d5d3ec306be503feff48fbd82c263c541c60e421de6afdaabdb7832f7ce3db8a",
        "db_name": "club_1",
        "context_name": "Club1Context",
        "question": "How many clubs does the student named \"Eric Tai\" belong to?",
        "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == \"Eric\" && row.t3.Lname == \"Tai\").Select(row => row.t1.ClubName).Distinct().Count();",
        "generated": "context.MemberOfClubs.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Fname == \"Eric\" && row.T2.Lname == \"Tai\").Select(row => row.T1.ClubId).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "263bb094416fda40351e3ab91d2c0595b81890f00afeec398b4e5bab0fe9ac2c",
        "db_name": "club_1",
        "context_name": "Club1Context",
        "question": "List the clubs having \"Davis Steven\" as a member.",
        "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"",
        "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Fname == \"Davis\" && row.t3.Lname == \"Steven\").Select(row => new { row.t1.ClubName }).Distinct().ToList();",
        "generated": "context.Clubs.Join(context.MemberOfClubs, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Lname == \"Davis\" && row.T3.Fname == \"Steven\").Select(row => new { row.T1.ClubName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "5bf11c4070a095f7ab738a06fca69ec266971c3043a106673264ede2810698b0",
        "db_name": "club_1",
        "context_name": "Club1Context",
        "question": "List the clubs that have at least a member with advisor \"1121\".",
        "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121",
        "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Advisor == 1121).Select(row => new { row.t1.ClubName }).Distinct().ToList();",
        "generated": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Advisor == 1121).Select(row => new { row.t1.ClubName }).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "1aace32925bf236f7f27619fe9ae1762e237b135f13eb171b3398715e3f431e5",
        "db_name": "club_1",
        "context_name": "Club1Context",
        "question": "What is the average age of the members of the club \"Bootup Baltimore\"?",
        "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"",
        "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\").Select(row => row.t3.Age).Average();",
        "generated": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Bootup Baltimore\").Select(row => row.t3.Age).Average();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "78fc542ec970f862fa91711dcb31e3b443a196f52f5b16bc14cced3a3859c5b2",
        "db_name": "club_1",
        "context_name": "Club1Context",
        "question": "Find the average age of members of the club \"Hopkins Student Enterprises\".",
        "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"",
        "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Hopkins Student Enterprises\").Select(row => row.t3.Age).Average();",
        "generated": "context.Clubs.Join(context.MemberOfClubs, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T2.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.ClubName == \"Hopkins Student Enterprises\").Select(row => row.T3.Age).Average();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "3b596dab54cf29bccbbf2a80973651d588e600757593dcc7a0ee910a8447ae00",
        "db_name": "club_1",
        "context_name": "Club1Context",
        "question": "Retrieve the average age of members of the club \"Tennis Club\".",
        "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
        "linq": "context.Clubs.Join(context.MemberOfClubs, t1 => t1.ClubId, t2 => t2.ClubId, (t1, t2) => new { t1, t2 }).Join(context.Students, joined => joined.t2.StuId, t3 => t3.StuId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.ClubName == \"Tennis Club\").Select(row => row.t3.Age).Average();",
        "generated": "context.MemberOfClubs.Join(context.Clubs, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ClubName == \"Tennis Club\").Select(row => row.T1.Age).Average();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,192): error CS1061: 'MemberOfClub' does not contain a definition for 'Age' and no accessible extension method 'Age' accepting a first argument of type 'MemberOfClub' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.69"
    },
    {
        "id": "a3beb3a7ca895105e907ce21ff695c5840bf17c1c7bee62cc67f5a4381baf4e7",
        "db_name": "decoration_competition",
        "context_name": "DecorationCompetitionContext",
        "question": "Show the names of members that have a rank in round higher than 3.",
        "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3",
        "linq": "context.Members.Join(context.Rounds, T1 => T1.MemberId, T2 => T2.MemberId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.RankInRound > 3).Select(row => new { row.T1.Name }).ToList();",
        "generated": "context.Members.Join(context.Rounds, T1 => T1.MemberId, T2 => T2.MemberId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.RankInRound > 3).Select(row => new { row.T1.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "8069c2e091b6b6f4bc44fb7c884c1a9f5738bd0eda6adedcd25dd915be2c6497",
        "db_name": "decoration_competition",
        "context_name": "DecorationCompetitionContext",
        "question": "Show the names of members in ascending order of their rank in rounds.",
        "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC",
        "linq": "context.Members.Join(context.Rounds, T1 => T1.MemberId, T2 => T2.MemberId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.RankInRound).Select(row => new { row.T1.Name }).ToList();",
        "generated": "context.Members.Join(context.Rounds, T1 => T1.MemberId, T2 => T2.MemberId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.RankInRound).Select(row => row.T1.Name).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b48845beaad0d363ad1964532938150c5ed8f265c677c9ce399bb57eedc54c01",
        "db_name": "decoration_competition",
        "context_name": "DecorationCompetitionContext",
        "question": "List the names of members who did not participate in any round.",
        "sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)",
        "linq": "context.Members.Where(row => !context.Rounds.Select(row => row.MemberId).Contains(row.MemberId)).Select(row => new { row.Name }).ToList();",
        "generated": "context.Members.Where(row =>!context.Rounds.Select(row => row.MemberId).Contains(row.MemberId)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "a5cb47ff8b63bfd2be04d7572a0413a3ff77ae5519e76951e3d2b59ca1e77fff",
        "db_name": "customers_campaigns_ecommerce",
        "context_name": "CustomersCampaignsEcommerceContext",
        "question": "What are the distinct address type codes for all customer addresses?",
        "sql": "SELECT DISTINCT address_type_code FROM customer_addresses",
        "linq": "context.CustomerAddresses.Select(row => new { row.AddressTypeCode }).Distinct().ToList();",
        "generated": "context.CustomerAddresses.Select(row => row.AddressTypeCode).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "89130ecfd759f72dcdd620ffb935c5e3e50befab6cc0330e736426c2bf3c8156",
        "db_name": "customers_campaigns_ecommerce",
        "context_name": "CustomersCampaignsEcommerceContext",
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "sql": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'",
        "linq": "context.CustomerOrders.Where(row => row.OrderStatusCode == \"Cancelled\" || row.OrderStatusCode == \"Paid\").Select(row => new { row.OrderShippingCharges, row.CustomerId }).ToList();",
        "generated": "context.CustomerOrders.Where(row => row.OrderStatusCode == \"Cancelled\" || row.OrderStatusCode == \"Paid\").Select(row => new { row.OrderShippingCharges, row.CustomerId }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "04a6f528ee5aee1f5418a5461cadc702416636c2cd645da1325bd01d55fada39",
        "db_name": "customers_campaigns_ecommerce",
        "context_name": "CustomersCampaignsEcommerceContext",
        "question": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'",
        "linq": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.ShippingMethodCode == \"FedEx\" && row.T2.OrderStatusCode == \"Paid\").Select(row => new { row.T1.CustomerName }).ToList();",
        "generated": "context.Customers.Join(context.CustomerOrders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.OrderStatusCode == \"Paid\" && row.T2.ShippingMethodCode == \"FedEx\").Select(row => row.T1.CustomerName).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "968d3749dc9f63d3418a4d8e6311aa5066dc54f993f0a754634bed6ccacf449d",
        "db_name": "cre_Docs_and_Epenses",
        "context_name": "CreDocsAndEpensesContext",
        "question": "Show the budget type code and description and the corresponding document id.",
        "sql": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",
        "linq": "context.DocumentsWithExpenses.Join(context.RefBudgetCodes, T1 => T1.BudgetTypeCode, T2 => T2.BudgetTypeCode, (T1, T2) => new { T1, T2 }).Select(row => new { row.T2.BudgetTypeCode, row.T2.BudgetTypeDescription, row.T1.DocumentId }).ToList();",
        "generated": "context.DocumentsWithExpenses.Select(row => new { row.BudgetTypeCode, row.DocumentDetails }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: GV, 1: Government, 2: 57}, {0: GV, 1: Government, 2: 192}, {0: GV, 1: Government, 2: 226}, {0: GV, 1: Government, 2: 227}, {0: GV, 1: Government, 2: 240}, {0: GV, 1: Government, 2: 300}, {0: SF, 1: Self founded, 2: 309}, {0: SF, 1: Self founded, 2: 367}, {0: ORG, 1: Organisation, 2: 371}, {0: ORG, 1: Organisation, 2: 383}]\nLINQ Results: [{0: GV, 1: government}, {0: SF, 1: safety}, {0: ORG, 1: organization}]\n"
    },
    {
        "id": "5a4862edec22b89bd46f0f15d1bd9c8e3e308c835aab4cf4945eb1a55eb36fa9",
        "db_name": "cre_Docs_and_Epenses",
        "context_name": "CreDocsAndEpensesContext",
        "question": "Show ids for all documents with budget types described as 'Government'.",
        "sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
        "linq": "context.DocumentsWithExpenses.Join(context.RefBudgetCodes, T1 => T1.BudgetTypeCode, T2 => T2.BudgetTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeDescription == \"Government\").Select(row => new { row.T1.DocumentId }).ToList();",
        "generated": "context.DocumentsWithExpenses.Join(context.RefBudgetCodes, T1 => T1.BudgetTypeCode, T2 => T2.BudgetTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeDescription == \"Government\").Select(row => row.T1.DocumentId).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "1f59f3fe3b460edc141f94413315c9b9e0a55c7f6f3c5f80710260e5b9f984ac",
        "db_name": "cre_Docs_and_Epenses",
        "context_name": "CreDocsAndEpensesContext",
        "question": "Show budget type codes and the number of documents in each budget type.",
        "sql": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "linq": "context.DocumentsWithExpenses.GroupBy(row => new { row.BudgetTypeCode }).Select(group => new { group.Key.BudgetTypeCode, Count = group.Count() }).ToList();",
        "generated": "context.DocumentsWithExpenses.GroupBy(row => new { row.BudgetTypeCode }).Select(group => new { group.Key.BudgetTypeCode, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "036ff8437c9d60b1dcdaad8c5042f95a4e59cfa0b8e59edb65277905fce18cdc",
        "db_name": "cre_Docs_and_Epenses",
        "context_name": "CreDocsAndEpensesContext",
        "question": "What is the budget type code with most number of documents.",
        "sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.DocumentsWithExpenses.GroupBy(row => new { row.BudgetTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BudgetTypeCode }).Take(1).ToList();",
        "generated": "context.DocumentsWithExpenses.GroupBy(row => new { row.BudgetTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BudgetTypeCode }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "64c77ed2291414186d1db8b8b03e5a79d67d001fe7e17b7b3c92905225938d7e",
        "db_name": "cre_Docs_and_Epenses",
        "context_name": "CreDocsAndEpensesContext",
        "question": "What are the ids of documents which don't have expense budgets?",
        "sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses",
        "linq": "context.Documents.Select(row => row.DocumentId).Except(context.DocumentsWithExpenses.Select(row => row.DocumentId)).ToList();",
        "generated": "context.Documents.Where(row =>!context.DocumentsWithExpenses.Select(row => row.DocumentId).Contains(row.DocumentId)).Select(row => new { row.DocumentId }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "5a24ee698bc1d00162ed2e1b19c64fa6691d5b302d6dfb6f276b1486e4bf4eb1",
        "db_name": "cre_Docs_and_Epenses",
        "context_name": "CreDocsAndEpensesContext",
        "question": "Show ids for all documents in type CV without expense budgets.",
        "sql": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "linq": "context.Documents.Where(row => row.DocumentTypeCode == \"CV\").Select(row => row.DocumentId).Except(context.DocumentsWithExpenses.Select(row => row.DocumentId)).ToList();",
        "generated": "context.Documents.Where(row => row.DocumentTypeCode == \"CV\" &&!context.DocumentsWithExpenses.Select(row => row.DocumentId).Contains(row.DocumentId)).Select(row => new { row.DocumentId }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "660321487b6fced1e5b366ceebd1f6dfe7b3c62acc0d3e50814bfb71b1046f0c",
        "db_name": "cre_Docs_and_Epenses",
        "context_name": "CreDocsAndEpensesContext",
        "question": "What are the ids of documents with letter 's' in the name with any expense budgets.",
        "sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'",
        "linq": "context.Documents.Join(context.DocumentsWithExpenses, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => EF.Functions.Like(row.T1.DocumentName, \"%s%\")).Select(row => new { row.T1.DocumentId }).ToList();",
        "generated": "context.Documents.Join(context.DocumentsWithExpenses, t1 => t1.DocumentId, t2 => t2.DocumentId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.DocumentDetails.Contains(\"s\") && row.t1.DocumentName.Contains(\"s\")).Select(row => new { row.t2.DocumentId }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 57}, {0: 192}, {0: 226}, {0: 227}, {0: 300}, {0: 371}, {0: 383}]\nLINQ Results: []\n"
    },
    {
        "id": "feece921bdeb285b835fe2c3c4d38d43bec41ad56ab02834b4f462ccf2c7c30e",
        "db_name": "cre_Docs_and_Epenses",
        "context_name": "CreDocsAndEpensesContext",
        "question": "How many documents do not have any expense?",
        "sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
        "linq": "context.Documents.Where(row => !context.DocumentsWithExpenses.Select(row => row.DocumentId).Contains(row.DocumentId)).Count();",
        "generated": "context.Documents.Join(context.DocumentsWithExpenses, t1 => t1.DocumentId, t2 => t2.DocumentId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.DocumentId }).Where(group => group.Count() == 0).Select(group => group.Key.DocumentId).Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 5}]\nLINQ Results: [{0: 0}]\n"
    },
    {
        "id": "8677c16143e5c23fff670dab55e2533c4d3f36deec03176a4af2331f63468502",
        "db_name": "cre_Docs_and_Epenses",
        "context_name": "CreDocsAndEpensesContext",
        "question": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?",
        "sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'",
        "linq": "context.Documents.Join(context.DocumentsWithExpenses, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeCode == \"GV\").Select(row => row.T1.DocumentDate).Intersect(context.Documents.Join(context.DocumentsWithExpenses, T1 => T1.DocumentId, T2 => T2.DocumentId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeCode == \"SF\").Select(row => row.T1.DocumentDate)).ToList();",
        "generated": "context.DocumentsWithExpenses.Join(context.RefBudgetCodes, T1 => T1.BudgetTypeCode, T2 => T2.BudgetTypeCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BudgetTypeCode == \"GV\" && row.T2.BudgetTypeCode == \"SF\").Select(row => row.T1.DocumentDetails).Distinct().Select(row => new { row.DocumentDetails }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,307): error CS1061: 'string' does not contain a definition for 'DocumentDetails' and no accessible extension method 'DocumentDetails' accepting a first argument of type 'string' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.44"
    },
    {
        "id": "333a937d96492b36d1d706b24b6eb40109f9e60a466f765ec0a1e24030d5a03f",
        "db_name": "county_public_safety",
        "context_name": "CountyPublicSafetyContext",
        "question": "List the names of counties that do not have any cities.",
        "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)",
        "linq": "context.CountyPublicSafeties.Where(row => !context.Cities.Select(row => row.CountyId).Contains(row.CountyId)).Select(row => new { row.Name }).ToList();",
        "generated": "context.CountyPublicSafeties.Where(row =>!context.Cities.Select(row => row.CountyId).Contains(row.CountyId)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "7fa4900237500cabf2b668e34639f8694bc30fa7ee8fa21c6538c1624808f53f",
        "db_name": "county_public_safety",
        "context_name": "CountyPublicSafetyContext",
        "question": "Show the police force shared by counties with location on the east and west.",
        "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"",
        "linq": "context.CountyPublicSafeties.Where(row => row.Location == \"East\").Select(row => row.PoliceForce).Intersect(context.CountyPublicSafeties.Where(row => row.Location == \"West\").Select(row => row.PoliceForce)).ToList();",
        "generated": "context.CountyPublicSafeties.Join(context.CountyPublicSafeties, T1 => T1.CountyId, T2 => T2.CountyId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Location == \"East\" && row.T2.Location == \"West\").Select(row => new { row.T1.PoliceForce }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: RCMP}]\nLINQ Results: []\n"
    },
    {
        "id": "e0272e9f1b0b857180da5b4d0861a5ab479a30a51d7a24a812cb3988d4a2864e",
        "db_name": "county_public_safety",
        "context_name": "CountyPublicSafetyContext",
        "question": "Show the names of cities in counties that have a crime rate less than 100.",
        "sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)",
        "linq": "context.Cities.Where(row => row.CountyId.HasValue && context.CountyPublicSafeties.Where(row => row.CrimeRate < 100).Select(row => row.CountyId).Contains(row.CountyId.Value)).Select(row => new { row.Name }).ToList();",
        "generated": "context.Cities.Join(context.CountyPublicSafeties, T1 => T1.CountyId, T2 => T2.CountyId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CrimeRate < 100).Select(row => new { row.T1.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "8e11104598919385d40ae6ec0e4b93aa9cfb0265f102113ca31eb8ce5e6259c2",
        "db_name": "county_public_safety",
        "context_name": "CountyPublicSafetyContext",
        "question": "Show the case burden of counties in descending order of population.",
        "sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
        "linq": "context.CountyPublicSafeties.OrderByDescending(row => row.Population).Select(row => new { row.CaseBurden }).ToList();",
        "generated": "context.CountyPublicSafeties.OrderByDescending(row => row.Population).Select(row => new { row.CaseBurden }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "a3cc5efc46b13bed4f7496bc5af48b39f9dbe7fb24e5e89a65ee847cdecc3cc6",
        "db_name": "climbing",
        "context_name": "ClimbingContext",
        "question": "List the names of mountains that do not have any climber.",
        "sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
        "linq": "context.Mountains.Where(row => !context.Climbers.Select(row => row.MountainId).Contains(row.MountainId)).Select(row => new { row.Name }).ToList();",
        "generated": "context.Mountains.Where(row =>!context.Climbers.Select(row => row.MountainId).Contains(row.MountainId)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "51fe82ddd8ab8090dd16d211a71b9bdc45501ea74065ca3d496bb0a5656c943e",
        "db_name": "climbing",
        "context_name": "ClimbingContext",
        "question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.",
        "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200",
        "linq": "context.Mountains.Where(row => row.Height > 5600).Select(row => row.Country).Intersect(context.Mountains.Where(row => row.Height < 5200).Select(row => row.Country)).ToList();",
        "generated": "context.Mountains.GroupBy(row => new { row.Country }).Where(group => group.Select(row => row.Height).All(height => height > 5600) && group.Select(row => row.Height).All(height => height < 5200)).Select(group => new { group.Key.Country }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Tanzania}]\nLINQ Results: []\n"
    },
    {
        "id": "506b96e91b042941b666848240e783fe2a02bdd0fd45ccdb5c40ada6f6bb9f14",
        "db_name": "climbing",
        "context_name": "ClimbingContext",
        "question": "Show the range that has the most number of mountains.",
        "sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
        "linq": "context.Mountains.GroupBy(row => new { row.Range }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Range }).Take(1).ToList();",
        "generated": "context.Mountains.GroupBy(row => new { row.Range }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Range }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "f02abc504dea45bfeb1f3c34bcc71cd94477353a2366e209476886bb4ac630ac",
        "db_name": "climbing",
        "context_name": "ClimbingContext",
        "question": "Show the names of mountains with height more than 5000 or prominence more than 1000.",
        "sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000",
        "linq": "context.Mountains.Where(row => row.Height > 5000 || row.Prominence > 1000).Select(row => new { row.Name }).ToList();",
        "generated": "context.Mountains.Where(row => row.Height > 5000 || row.Prominence > 1000).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "d94ac84616b475cc01824d596bd048d375ffc02662ba1ccd572d121ef9a1d01d",
        "db_name": "swimming",
        "context_name": "SwimmingContext",
        "question": "Find the names of the swimmers who have no record.",
        "sql": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)",
        "linq": "context.Swimmers.Where(row => !context.Records.Select(row => row.SwimmerId).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
        "generated": "context.Swimmers.Where(row =>!context.Records.Select(row => row.SwimmerId).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "243a3f0db81ff21537ab6d85070a5d7d540f1af52d35add73099fdf1da9770b0",
        "db_name": "swimming",
        "context_name": "SwimmingContext",
        "question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.",
        "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'",
        "linq": "context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Result == \"Win\").Select(row => row.t1.Name).Intersect(context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Result == \"Loss\").Select(row => row.t1.Name)).ToList();",
        "generated": "context.Swimmers.Join(context.Records, T1 => T1.Id, T2 => T2.SwimmerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Result == \"win\" && row.T2.Result == \"loss\").Select(row => new { row.T1.Name }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Craig Stevens}, {0: Oussama Mellouli}, {0: Sergiy Fesenko}]\nLINQ Results: []\n"
    },
    {
        "id": "66428ad32905dc67ed33a1d059afd03920cb64aaf7230191f3796ff3a5c7711e",
        "db_name": "swimming",
        "context_name": "SwimmingContext",
        "question": "Find the names of stadiums that some Australian swimmers have been to.",
        "sql": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'",
        "linq": "context.Swimmers.Join(context.Records, t1 => t1.Id, t2 => t2.SwimmerId, (t1, t2) => new { t1, t2 }).Join(context.Events, joined => joined.t2.EventId, t3 => t3.Id, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Stadia, joined => joined.t3.StadiumId, t4 => t4.Id, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t1.Nationality == \"Australia\").Select(row => new { row.t4.Name }).ToList();",
        "generated": "context.Swimmers.Join(context.Events, T1 => T1.Id, T2 => T2.StadiumId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Nationality == \"Australia\").Select(row => new { row.T2.StadiumName }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,194): error CS1061: 'Event' does not contain a definition for 'StadiumName' and no accessible extension method 'StadiumName' accepting a first argument of type 'Event' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.49"
    },
    {
        "id": "51c848a3678563a663ea73efa0f2d4fe4525ff3a03063c1a381ca82f83da4c6f",
        "db_name": "swimming",
        "context_name": "SwimmingContext",
        "question": "Find the names of stadiums that the most swimmers have been to.",
        "sql": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Records.Join(context.Events, t1 => t1.EventId, t2 => t2.Id, (t1, t2) => new { t1, t2 }).Join(context.Stadia, joined => joined.t2.StadiumId, t3 => t3.Id, (joined, t3) => new { joined.t1, joined.t2, t3 }).GroupBy(row => new { row.t2.StadiumId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().t3.Name }).Take(1).ToList();",
        "generated": "context.Stadia.Join(context.Swimmers, T1 => T1.Id, T2 => T2.StadiumId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Id }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Name }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,80): error CS1061: 'Swimmer' does not contain a definition for 'StadiumId' and no accessible extension method 'StadiumId' accepting a first argument of type 'Swimmer' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.42"
    },
    {
        "id": "86e226a3317544b544c8cbe8f634526dc25b5fd4c1528af6d6fe30dbd70cbf5c",
        "db_name": "swimming",
        "context_name": "SwimmingContext",
        "question": "Find all details for each swimmer.",
        "sql": "SELECT * FROM swimmer",
        "linq": "context.Swimmers.Select(row => new { row.Id, row.Name, row.Nationality, row.Meter100, row.Meter200, row.Meter300, row.Meter400, row.Meter500, row.Meter600, row.Meter700, row.Time }).ToList();",
        "generated": "context.Swimmers.Select(row => new { row.Name, row.Nationality, row.Meter100, row.Meter200, row.Meter300, row.Meter400, row.Meter500, row.Meter600, row.Meter700, row.Time }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Parameter 'index')\n   at System.Linq.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument)\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 239\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\n"
    },
    {
        "id": "0d8fdc806a728f821fd858e5c1688735c789b3c81152d351a66a9f9f1d602eed",
        "db_name": "swimming",
        "context_name": "SwimmingContext",
        "question": "What is the average capacity of the stadiums that were opened in year 2005?",
        "sql": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005",
        "linq": "context.Stadia.Where(row => row.OpeningYear == 2005).Select(row => row.Capacity).Average();",
        "generated": "context.Stadia.Where(row => row.OpeningYear == 2005).Select(row => row.Capacity).Average();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "c974d652f686362c17ca527ae4f471ffc6d88e1413275c81f77b740210813c98",
        "db_name": "election",
        "context_name": "ElectionContext",
        "question": "Show the name of the party that has at least two records.",
        "sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2",
        "linq": "context.Parties.GroupBy(row => new { row.Party1 }).Where(group => group.Count() >= 2).Select(group => new { group.Key.Party1 }).ToList();",
        "generated": "context.Parties.Where(row => row.Year > 2010).Select(row => new { row.Party1 }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Democratic}, {0: Independence}]\nLINQ Results: []\n"
    },
    {
        "id": "89c2683dfff029a591121f31b9ee7f13bf2c40abb65bd5aaaad9969583dbd2bf",
        "db_name": "election",
        "context_name": "ElectionContext",
        "question": "Show the name of the party that has the most delegates.",
        "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "linq": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Party }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.Party1 }).Take(1).ToList();",
        "generated": "context.Parties.OrderByDescending(row => row.Delegate).Select(row => new { row.Party1 }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,65): error CS1061: 'Party' does not contain a definition for 'Delegate' and no accessible extension method 'Delegate' accepting a first argument of type 'Party' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.53"
    },
    {
        "id": "1f7f00451ea2926f9ebad8a5185308061812b7e3447ed10f64cb659883516f15",
        "db_name": "election",
        "context_name": "ElectionContext",
        "question": "Show the people that have been governor the most times.",
        "sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "linq": "context.Parties.GroupBy(row => new { row.Governor }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Governor }).Take(1).ToList();",
        "generated": "context.Parties.OrderByDescending(row => row.Governor).Select(row => new { row.Governor }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Eliot Spitzer}]\nLINQ Results: [{0: Tom Golisano}]\n"
    },
    {
        "id": "fa80aa18a87c08d7040da0e1d3bc3813f6fe4a63bfe65420f38b350bbdb34b33",
        "db_name": "election",
        "context_name": "ElectionContext",
        "question": "Show the people that have been comptroller the most times and the corresponding number of times.",
        "sql": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "linq": "context.Parties.GroupBy(row => new { row.Comptroller }).Select(group => new { group.Key.Comptroller, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
        "generated": "context.Parties.OrderBy(row => row.Comptroller).GroupBy(row => row.Comptroller).OrderByDescending(group => group.Count()).Select(group => new { group.Key, Count = group.Count() }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "58e1b75eda5e8417e9b043e8803960753dac61aad0e685a14186022d38443013",
        "db_name": "election",
        "context_name": "ElectionContext",
        "question": "What are the names of parties that do not have delegates in election?",
        "sql": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)",
        "linq": "context.Parties.Where(row => !context.Elections.Select(row => row.Party).Contains(row.PartyId)).Select(row => new { row.Party1 }).ToList();",
        "generated": "context.Parties.Where(row =>!context.Elections.Select(row => row.Party).Contains(row.PartyId)).Select(row => new { row.Party1 }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "ca0548a21fb7f85e39cfb0c20b3955a8fca631f09abc912daaad0cf26e0c024b",
        "db_name": "election",
        "context_name": "ElectionContext",
        "question": "What are the names of parties that have both delegates on \"Appropriations\" committee and",
        "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"",
        "linq": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Committee == \"Appropriations\").Select(row => row.T2.Party1).Intersect(context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Committee == \"Economic Matters\").Select(row => row.T2.Party1)).ToList();",
        "generated": "context.Parties.Join(context.Elections, T1 => T1.PartyId, T2 => T2.Party, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Committee == \"Appropriations\").Select(row => new { row.T1.Party1 }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Democratic}]\nLINQ Results: [{0: Democratic}, {0: Liberal}]\n"
    },
    {
        "id": "70eff40bbdc549d9822734bd7618de8b8facdbe20b93b1a9d0c21ce8d1a0e7b8",
        "db_name": "election",
        "context_name": "ElectionContext",
        "question": "Which committees have delegates from both democratic party and liberal party?",
        "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"",
        "linq": "context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Party1 == \"Democratic\").Select(row => row.T1.Committee).Intersect(context.Elections.Join(context.Parties, T1 => T1.Party, T2 => T2.PartyId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Party1 == \"Liberal\").Select(row => row.T1.Committee)).ToList();",
        "generated": "context.Parties.Where(row => row.Party1 == \"Democratic\" || row.Party1 == \"Liberal\").Select(row => new { row.Comptroller }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Appropriations}]\nLINQ Results: [{0: Carl McCall}, {0: Alan Hevesi}]\n"
    },
    {
        "id": "ff28dfa5f2cf2729d457f1cf4d73c04bf97e2ac4c76b36af518e5bf7103ebdc5",
        "db_name": "book_2",
        "context_name": "Book2Context",
        "question": "List the titles of books that are not published.",
        "sql": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
        "linq": "context.Books.Where(row => !context.Publications.Select(row => row.BookId).Contains(row.BookId)).Select(row => new { row.Title }).ToList();",
        "generated": "context.Books.Where(row =>!context.Publications.Select(row => row.BookId).Contains(row.BookId)).Select(row => new { row.Title }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "379907210a2c5e2b6b35fdb085c6fc95e1cab94af6fda081bc0ca9d9836377ac",
        "db_name": "book_2",
        "context_name": "Book2Context",
        "question": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.",
        "sql": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000",
        "linq": "context.Publications.Where(row => row.Price > 10000000).Select(row => row.Publisher).Intersect(context.Publications.Where(row => row.Price < 5000000).Select(row => row.Publisher)).ToList();",
        "generated": "context.Publications.GroupBy(row => new { row.Publisher }).Where(group => group.Select(row => row.Price).Contains(10000000) && group.Select(row => row.Price).Contains(5000000)).Select(group => new { group.Key.Publisher }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Pearson}]\nLINQ Results: []\n"
    },
    {
        "id": "1fd938c5c7816244e0668ab5c1737d2573812d1c7b77524d3090ef5141fb7416",
        "db_name": "book_2",
        "context_name": "Book2Context",
        "question": "What is the number of distinct publication dates?",
        "sql": "SELECT COUNT (DISTINCT Publication_Date) FROM publication",
        "linq": "context.Publications.Select(row => row.PublicationDate).Distinct().Count();",
        "generated": "context.Publications.Select(row => row.PublicationDate).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "81cc060f19911490dc3fca9ba83b915a63b4168ea256e522436e6203cbe2d23c",
        "db_name": "book_2",
        "context_name": "Book2Context",
        "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"",
        "sql": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
        "linq": "context.Publications.Where(row => row.Publisher == \"Person\" || row.Publisher == \"Wiley\").Select(row => new { row.Price }).ToList();",
        "generated": "context.Publications.Where(row => row.Publisher == \"Person\" || row.Publisher == \"Wiley\").Select(row => new { row.Price }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "4d49ca1ae669d6f4903370899c8aae2d9f3ff3c95f781fb2e63aa7148ed1ace6",
        "db_name": "device",
        "context_name": "DeviceContext",
        "question": "List the names of shops that have no devices in stock.",
        "sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)",
        "linq": "context.Shops.Where(row => !context.Stocks.Select(row => row.ShopId).Contains(row.ShopId)).Select(row => new { row.ShopName }).ToList();",
        "generated": "context.Stocks.Select(row => row.Shop.ShopName).Except(context.Stocks.Select(row => row.Shop.ShopName).Distinct()).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Pentre store}, {0: Tynewydd repair}, {0: Dinas store}, {0: Naval repair}, {0: Naval's shop}, {0: National Cellphone}]\nLINQ Results: []\n"
    },
    {
        "id": "535a6e9498c60856dd8cac06c0949995d9bcd3f86c8b649b13eecab983576983",
        "db_name": "device",
        "context_name": "DeviceContext",
        "question": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
        "sql": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008",
        "linq": "context.Shops.Where(row => row.OpenYear > 2012).Select(row => row.Location).Intersect(context.Shops.Where(row => row.OpenYear < 2008).Select(row => row.Location)).ToList();",
        "generated": "context.Shops.Where(row => row.OpenYear > 2012 || row.OpenYear < 2008).Select(row => new { row.Location }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: []\nLINQ Results: [{0: Dinas}, {0: Cymmer}, {0: Porth}, {0: Gelli}, {0: Penygraig}, {0: Maerdy}, {0: Wattstown}]\n"
    },
    {
        "id": "e08cebbf3b947a126b5422f6e9f3eee6d90dce7298740a94a6a994e2a401dd54",
        "db_name": "device",
        "context_name": "DeviceContext",
        "question": "List the carriers of devices that have no devices in stock.",
        "sql": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)",
        "linq": "context.Devices.Where(row => !context.Stocks.Select(row => row.DeviceId).Contains(row.DeviceId)).Select(row => new { row.Carrier }).ToList();",
        "generated": "context.Devices.Where(row =>!context.Stocks.Select(row => row.DeviceId).Contains(row.DeviceId)).Select(row => new { row.Carrier }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "a1feff1602dc2313ee17fa6e2bf32b8db0794a41ddb9df469f5283992b856b38",
        "db_name": "device",
        "context_name": "DeviceContext",
        "question": "Show the carriers of devices in stock at more than one shop.",
        "sql": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1",
        "linq": "context.Stocks.Join(context.Devices, T1 => T1.DeviceId, T2 => T2.DeviceId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DeviceId }).Where(group => group.Count() > 1).Select(group => new { group.First().T2.Carrier }).ToList();",
        "generated": "context.Stocks.GroupBy(row => new { row.Device.Carrier }).Where(group => group.Count() > 1).Select(group => new { group.Key.Carrier }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "abc368623990e4975a7712cbdd9269d345e77fb412f980acb400b6352e83b54e",
        "db_name": "workshop_paper",
        "context_name": "WorkshopPaperContext",
        "question": "Show each author and the number of workshops they submitted to.",
        "sql": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author",
        "linq": "context.Acceptances.Join(context.Submissions, T1 => T1.SubmissionId, T2 => T2.SubmissionId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Author }).Select(group => new { group.Key.Author, CountDistinctWorkshopId = group.Select(row => row.T1.WorkshopId).Distinct().Count() }).ToList();",
        "generated": "context.Submissions.GroupBy(row => new { row.Author }).Select(group => new { group.Key.Author, Count = group.Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Jeff Lloyd, 1: 1}, {0: Sammy Green, 1: 2}, {0: Sherman Smith, 1: 1}, {0: Steve Niehaus, 1: 1}, {0: Steve Raible, 1: 1}]\nLINQ Results: [{0: Andy Bolton, 1: 1}, {0: Don Bitterlich, 1: 1}, {0: Jeff Lloyd, 1: 1}, {0: Randy Johnson, 1: 1}, {0: Rick Engles, 1: 1}, {0: Sammy Green, 1: 1}, {0: Sherman Smith, 1: 1}, {0: Steve Myer, 1: 1}, {0: Steve Niehaus, 1: 1}, {0: Steve Raible, 1: 1}]\n"
    },
    {
        "id": "54fcf7e323928b980e65dc883791ac09614cc113becf8557a80791fc9770420b",
        "db_name": "workshop_paper",
        "context_name": "WorkshopPaperContext",
        "question": "Show the date and venue of each workshop in ascending alphabetical order of the venue.",
        "sql": "SELECT Date ,  Venue FROM workshop ORDER BY Venue",
        "linq": "context.Workshops.OrderBy(row => row.Venue).Select(row => new { row.Date, row.Venue }).ToList();",
        "generated": "context.Workshops.OrderBy(row => row.Venue).Select(row => new { row.Date, row.Venue }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "26d8a6197aed6583b46ebac159460be52b974b8c9c75f69375275d0956cd57d8",
        "db_name": "workshop_paper",
        "context_name": "WorkshopPaperContext",
        "question": "List the authors who do not have submission to any workshop.",
        "sql": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
        "linq": "context.Submissions.Where(row => !context.Acceptances.Select(row => row.SubmissionId).Contains(row.SubmissionId)).Select(row => new { row.Author }).ToList();",
        "generated": "context.Submissions.Where(row =>!context.Acceptances.Select(row => row.SubmissionId).Contains(row.SubmissionId)).Select(row => new { row.Author }).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "f99a4d7f7e508a3fd9027df1cc8e5e496fb511032cc6195f5a688f2ab4d8066b",
        "db_name": "tracking_orders",
        "context_name": "TrackingOrdersContext",
        "question": "What is the name of the customer who has the largest number of orders?",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.CustomerName }).Take(1).ToList();",
        "generated": "context.Customers.OrderByDescending(row => row.Orders.Count).Select(row => new { row.CustomerName }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Jeramie}]\nLINQ Results: [{0: George}]\n"
    },
    {
        "id": "f2f816a15ca5122827f4c3e38ea5e7660767bf4e1d94892680c2a9b6145393c1",
        "db_name": "tracking_orders",
        "context_name": "TrackingOrdersContext",
        "question": "For each customer who has at least two orders, find the customer name and number of orders made.",
        "sql": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2",
        "linq": "context.Orders.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CustomerId }).Select(group => new { group.First().T2.CustomerName, Count = group.Count() }).Where(group => group.Count >= 2).ToList();",
        "generated": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Count() >= 2).Select(row => new { row.T1.CustomerName, row.T2.Count() }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,204): error CS0746: Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access. [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:01.85"
    },
    {
        "id": "72eb1928aeb4cb8470bca01728dab4544690753e0d786cd0cd31b308b5588e2d",
        "db_name": "tracking_orders",
        "context_name": "TrackingOrdersContext",
        "question": "Find the name of the customers who have at most two orders.",
        "sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2",
        "linq": "context.Orders.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CustomerId }).Where(group => group.Count() <= 2).Select(group => new { group.First().T2.CustomerName }).ToList();",
        "generated": "context.Customers.Where(row => row.Orders.Count <= 2).Select(row => new { row.CustomerName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Alberto}, {0: Leilani}, {0: Hadley}, {0: Violet}, {0: Parker}, {0: Devan}, {0: Beulah}, {0: Hershel}]\nLINQ Results: [{0: Savannah}, {0: Alberto}, {0: Leilani}, {0: Hadley}, {0: Chaz}, {0: Violet}, {0: Parker}, {0: Devan}, {0: Beulah}, {0: Hershel}, {0: Conrad}, {0: Samson}, {0: Mabelle}]\n"
    },
    {
        "id": "d540473d73afdf4bb2c08df5424ddcf4e0d65b4a9d44675a6b9d68c417f57a07",
        "db_name": "tracking_orders",
        "context_name": "TrackingOrdersContext",
        "question": "List the names of the customers who have once bought product \"food\".",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "linq": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.OrderItems, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Products, joined => joined.T3.ProductId, T4 => T4.ProductId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T4.ProductName == \"food\").GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 1).Select(group => new { group.First().T1.CustomerName }).ToList();",
        "generated": "context.Customers.Join(context.Orders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.OrderItems, joined => joined.t2.OrderId, t3 => t3.OrderId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.Products, joined => joined.t3.ProductId, t4 => t4.ProductId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t4.ProductName == \"food\").Select(row => new { row.t1.CustomerName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "396441f836d5cbed65dd5a39713b698d60546358dd91b678f6b55398f4685896",
        "db_name": "tracking_orders",
        "context_name": "TrackingOrdersContext",
        "question": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "linq": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).Join(context.OrderItems, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Products, joined => joined.T3.ProductId, T4 => T4.ProductId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T3.OrderItemStatus == \"Cancel\" && row.T4.ProductName == \"food\").GroupBy(row => new { row.T1.CustomerId }).Where(group => group.Count() >= 1).Select(group => new { group.First().T1.CustomerName }).ToList();",
        "generated": "context.Products.Join(context.OrderItems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Orders, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Customers, joined => joined.T3.CustomerId, T4 => T4.CustomerId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T2.OrderItemStatus == \"Cancel\" && row.T1.ProductName == \"food\").Select(row => new { row.T4.CustomerName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "9ecd21bcc3bc4ae494d9d62fef773da758de96b266804e6b297c92f69b25b4a4",
        "db_name": "company_office",
        "context_name": "CompanyOfficeContext",
        "question": "List the names of buildings that have no company office.",
        "sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)",
        "linq": "context.Buildings.Where(row => !context.OfficeLocations.Select(row => row.BuildingId).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
        "generated": "context.Buildings.Where(row =>!context.OfficeLocations.Select(row => row.BuildingId).Contains(row.Id)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "e685877664acb5c2791aadbcefd54753a4eb898c6b80953d618f0a2f0ea6b8a7",
        "db_name": "company_office",
        "context_name": "CompanyOfficeContext",
        "question": "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".",
        "sql": "SELECT Industry FROM Companies WHERE Headquarters  =  \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"China\"",
        "linq": "context.Companies.Where(row => row.Headquarters == \"USA\").Select(row => row.Industry).Intersect(context.Companies.Where(row => row.Headquarters == \"China\").Select(row => row.Industry)).ToList();",
        "generated": "context.Companies.Join(context.Companies, T1 => T1.Headquarters, T2 => T2.Headquarters, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Headquarters == \"USA\" || row.T2.Headquarters == \"China\").Select(row => new { row.T1.Industry }).Union(context.Companies.Join(context.Companies, T1 => T1.Headquarters, T2 => T2.Headquarters, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Headquarters == \"USA\" && row.T2.Headquarters == \"China\").Select(row => new { row.T2.Industry })).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Banking}, {0: Oil and gas}]\nLINQ Results: [{0: Banking}, {0: Conglomerate}, {0: Oil and gas}, {0: Retailing}, {0: Telecommunications}]\n"
    },
    {
        "id": "f221dc57e0f4eb5cba97c8ca5fc7f3495a6a85b08e0d9b92d18dc539aa0bdd31",
        "db_name": "company_office",
        "context_name": "CompanyOfficeContext",
        "question": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",",
        "sql": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"",
        "linq": "context.Companies.Where(row => row.Industry == \"Banking\" || row.Industry == \"Conglomerate\").Count();",
        "generated": "context.Companies.Where(row => row.Industry == \"Banking\" || row.Industry == \"Conglomerate\").Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "e81d7374abb0a1545c9bdf3d6d373c5a187a614042b07d4a11fc26bce463b463",
        "db_name": "company_office",
        "context_name": "CompanyOfficeContext",
        "question": "Show the headquarters shared by more than two companies.",
        "sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2",
        "linq": "context.Companies.GroupBy(row => new { row.Headquarters }).Where(group => group.Count() > 2).Select(group => new { group.Key.Headquarters }).ToList();",
        "generated": "context.Companies.Join(context.OfficeLocations, T1 => T1.Id, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).Join(context.Companies, joined => joined.T2.CompanyId, T3 => T3.Id, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.Headquarters }).Where(group => group.Count() > 2).Select(group => new { group.Key.Headquarters }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: China}, {0: USA}]\nLINQ Results: [{0: Brazil}, {0: France}, {0: USA}]\n"
    },
    {
        "id": "ee482d4a91bdecceb6d6dbbcaf036425d536cca03408aea0b2205990948cd695",
        "db_name": "coffee_shop",
        "context_name": "CoffeeShopContext",
        "question": "What are the id and address of the shops which have a happy hour in May?",
        "sql": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'",
        "linq": "context.Shops.Join(context.HappyHours, t1 => t1.ShopId, t2 => t2.ShopId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Month == \"May\").Select(row => new { row.t1.Address, row.t1.ShopId }).ToList();",
        "generated": "context.Shops.Join(context.HappyHours, T1 => T1.ShopId, T2 => T2.ShopId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Month == \"May\").Select(row => new { row.T1.ShopId, row.T1.Address }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1200 Main Street, 1: 1}, {0: 1200 Main Street, 1: 1}, {0: 1330 Baltimore Street, 1: 3}]\nLINQ Results: [{0: 1, 1: 1200 Main Street}, {0: 1, 1: 1200 Main Street}, {0: 3, 1: 1330 Baltimore Street}]\n"
    },
    {
        "id": "76de639a5e92a5fa9319cbb23c08250c12b9d6cb4dc469eee426d3e9c5f33f76",
        "db_name": "coffee_shop",
        "context_name": "CoffeeShopContext",
        "question": "which shop has happy hour most frequently? List its id and number of happy hours.",
        "sql": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.HappyHours.GroupBy(row => new { row.ShopId }).Select(group => new { group.Key.ShopId, Count = group.Count() }).OrderByDescending(group => group.Count).Take(1).ToList();",
        "generated": "context.Shops.Join(context.HappyHours, T1 => T1.ShopId, T2 => T2.ShopId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ShopId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ShopId, Count = group.Count() }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "dc4cf167227a3a689c1eb626cfb1bc735ce9abcc901a7ad28b84287894f8aa98",
        "db_name": "coffee_shop",
        "context_name": "CoffeeShopContext",
        "question": "Which month has the most happy hours?",
        "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.HappyHours.GroupBy(row => new { row.Month }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Month }).Take(1).ToList();",
        "generated": "context.HappyHours.GroupBy(row => new { row.Month }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Month }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "c8d1749d1e120f5769918b1c00bb0ba57888bf1295f6213d3babdaf8473a15f3",
        "db_name": "coffee_shop",
        "context_name": "CoffeeShopContext",
        "question": "Which months have more than 2 happy hours?",
        "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2",
        "linq": "context.HappyHours.GroupBy(row => new { row.Month }).Where(group => group.Count() > 2).Select(group => new { group.Key.Month }).ToList();",
        "generated": "context.HappyHours.GroupBy(row => new { row.Month }).Where(group => group.Count() > 2).Select(group => new { group.Key.Month }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "ad864294f993845517204cf599b8472d15f70fed4824464d577cc663635065d8",
        "db_name": "behavior_monitoring",
        "context_name": "BehaviorMonitoringContext",
        "question": "What are the line 1 of addresses shared by some students and some teachers?",
        "sql": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id",
        "linq": "context.Addresses.Join(context.Students, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Line1).Intersect(context.Addresses.Join(context.Teachers, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.Line1)).ToList();",
        "generated": "context.Addresses.Join(context.Students, T1 => T1.AddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Join(context.Teachers, joined => joined.T2.AddressId, T3 => T3.AddressId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => row.T1.Line1).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "9eedc3b3abd03d2dd8d5bbc0813891121f9f94dea9412eb4e57c1427dbda59df",
        "db_name": "theme_gallery",
        "context_name": "ThemeGalleryContext",
        "question": "Show all artist names who didn't have an exhibition in 2004.",
        "sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "linq": "context.Artists.Select(row => row.Name).Except(context.Exhibitions.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Year == 2004).Select(row => row.T2.Name)).ToList();",
        "generated": "context.Artists.Where(row =>!context.Exhibitions.Select(row => row.Year).Contains(2004) && row.Exhibitions.Count == 0).Select(row => new { row.Name }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Jeff Sluman}, {0: John Daly}, {0: Larry Nelson}, {0: Mark Brooks}, {0: Nick Price}, {0: Paul Azinger}]\nLINQ Results: []\n"
    },
    {
        "id": "9de242151aac0f7fc0d54f929f884c30f1815c816d346da061700bd9619bd7ac",
        "db_name": "theme_gallery",
        "context_name": "ThemeGalleryContext",
        "question": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.",
        "sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
        "linq": "context.ExhibitionRecords.Join(context.Exhibitions, T1 => T1.ExhibitionId, T2 => T2.ExhibitionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Attendance < 100).Select(row => row.T2.Theme).Intersect(context.ExhibitionRecords.Join(context.Exhibitions, T1 => T1.ExhibitionId, T2 => T2.ExhibitionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Attendance > 500).Select(row => row.T2.Theme)).ToList();",
        "generated": "context.Exhibitions.Join(context.ExhibitionRecords, T1 => T1.ExhibitionId, T2 => T2.ExhibitionId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Attendance < 100 || row.T2.Attendance > 500).Select(row => new { row.T1.Theme }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: []\nLINQ Results: [{0: Santa Claus}, {0: Santa Claus}, {0: Santa Claus}, {0: Christmas stocking}, {0: Christmas stocking}, {0: Christmas stocking}, {0: Santa Claus and Rudolph the Red-Nosed Reindeer}, {0: Santa Claus and Rudolph the Red-Nosed Reindeer}, {0: Santa Claus and Rudolph the Red-Nosed Reindeer}, {0: Christmas Tree}, {0: Spring}, {0: Spring}, {0: Spring}]\n"
    },
    {
        "id": "5be6aeca296304892293e96f6cdb3d955eeaf28412e7d566b2adda0283f6c761",
        "db_name": "theme_gallery",
        "context_name": "ThemeGalleryContext",
        "question": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?",
        "sql": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10",
        "linq": "context.ExhibitionRecords.Join(context.Exhibitions, T1 => T1.ExhibitionId, T2 => T2.ExhibitionId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Attendance > 100 || row.T2.TicketPrice < 10).Count();",
        "generated": "context.ExhibitionRecords.Where(row => row.Attendance > 100 || row.Exhibition.TicketPrice < 10).Select(row => row.ExhibitionId).Distinct().Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 13}]\nLINQ Results: [{0: 5}]\n"
    },
    {
        "id": "8e1b8119411fa3859e1b366903e42d49f926179b72559eb64a0851dd2507f362",
        "db_name": "theme_gallery",
        "context_name": "ThemeGalleryContext",
        "question": "Show all artist names with an average exhibition attendance over 200.",
        "sql": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200",
        "linq": "context.ExhibitionRecords.Join(context.Exhibitions, T1 => T1.ExhibitionId, T2 => T2.ExhibitionId, (T1, T2) => new { T1, T2 }).Join(context.Artists, joined => joined.T2.ArtistId, T3 => T3.ArtistId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.ArtistId }).Where(group => group.Average(row => row.T1.Attendance) > 200).Select(group => new { group.First().T3.Name }).ToList();",
        "generated": "context.Artists.Join(context.Exhibitions, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Join(context.ExhibitionRecords, joined => joined.T2.ExhibitionId, T3 => T3.ExhibitionId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.Name }).Select(group => new { group.Key.Name, AverageAttendance = group.Select(row => row.T3.Attendance).Average() }).Where(group => group.AverageAttendance > 200).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Vijay Singh}, {0: John Daly}, {0: Jeff Sluman}, {0: Nick Price}]\nLINQ Results: [{0: Jeff Sluman, 1: 3818.6666666666665}, {0: John Daly, 1: 4486.666666666667}, {0: Nick Price, 1: 14060.333333333334}, {0: Vijay Singh, 1: 2046.25}]\n"
    },
    {
        "id": "ea644d6da11c32f8ba57f68ad504e6afaf22bf5b901f768abcf5ac0454d6bceb",
        "db_name": "riding_club",
        "context_name": "RidingClubContext",
        "question": "List the names of players that do not have coaches.",
        "sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)",
        "linq": "context.Players.Where(row => !context.PlayerCoaches.Select(row => row.PlayerId).Contains(row.PlayerId)).Select(row => new { row.PlayerName }).ToList();",
        "generated": "context.Players.Where(row =>!context.PlayerCoaches.Select(row => row.PlayerId).Contains(row.PlayerId)).Select(row => new { row.PlayerName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "8706f7b9d2afa361bf9890cf819c66ab6c1ab9c7f5edb9cb0fb9d890eb60b33d",
        "db_name": "riding_club",
        "context_name": "RidingClubContext",
        "question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".",
        "sql": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"",
        "linq": "context.Players.Where(row => row.Gender == \"M\").Select(row => row.Residence).Intersect(context.Players.Where(row => row.Gender == \"F\").Select(row => row.Residence)).ToList();",
        "generated": "context.Players.Where(row => row.Gender == \"M\").Select(row => row.Residence).Distinct().Intersect(context.Players.Where(row => row.Gender == \"F\").Select(row => row.Residence)).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "31af625d9a9563e22a3b13359b07405c808a903b26b5ee3c84cc650079ce9ac9",
        "db_name": "riding_club",
        "context_name": "RidingClubContext",
        "question": "How many coaches does each club has? List the club id, name and the number of coaches.",
        "sql": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
        "linq": "context.Clubs.Join(context.Coaches, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClubId }).Select(group => new { group.Key.ClubId, group.First().T1.ClubName, Count = group.Count() }).ToList();",
        "generated": "context.Clubs.Join(context.Coaches, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClubId }).Select(group => new { group.Key.ClubId, group.First().T1.ClubName, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "617e15a7661c7a4e9de4c7a58b8dfb6494bc13f830b3694ee231b710ead3ba39",
        "db_name": "riding_club",
        "context_name": "RidingClubContext",
        "question": "How many gold medals has the club with the most coaches won?",
        "sql": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.MatchResults.Join(context.Coaches, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClubId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ClubId, group.First().T1.Gold }).Take(1).ToList();",
        "generated": "context.Clubs.Join(context.Coaches, T1 => T1.ClubId, T2 => T2.ClubId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ClubId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.ClubName, group.First().T2.Gold }).Where(row => row.Gold!= null).Select(row => new { row.Gold }).Distinct().ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,264): error CS1061: 'Coach' does not contain a definition for 'Gold' and no accessible extension method 'Gold' accepting a first argument of type 'Coach' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.60"
    },
    {
        "id": "0708585035520e8bf9853a5c3b87ada3c6f9e626ba96d79f4cb2d5395f85916b",
        "db_name": "assets_maintenance",
        "context_name": "AssetsMaintenanceContext",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "sql": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "linq": "context.Assets.OrderBy(row => row.AssetDisposedDate).Select(row => new { row.AssetMake, row.AssetModel, row.AssetDetails }).ToList();",
        "generated": "context.Assets.OrderByDescending(row => row.AssetDisposedDate).Select(row => new { row.AssetMake, row.AssetModel, row.AssetDetails }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "259ba46548da6294da754701be5c0f35afa70c55a986a27acd249bee24d9e779",
        "db_name": "assets_maintenance",
        "context_name": "AssetsMaintenanceContext",
        "question": "Which part has the least chargeable amount? List the part id and amount.",
        "sql": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "linq": "context.Parts.OrderBy(row => row.ChargeableAmount).Select(row => new { row.PartId, row.ChargeableAmount }).Take(1).ToList();",
        "generated": "context.Parts.OrderByDescending(row => row.ChargeableAmount).Select(row => new { row.PartId, row.ChargeableAmount }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1, 1: 4}]\nLINQ Results: [{0: 2, 1: 9}]\n"
    },
    {
        "id": "677e7f26d835d6e0ce99182b5e291b99e7733b0b9241b8ddf67780d62125e966",
        "db_name": "assets_maintenance",
        "context_name": "AssetsMaintenanceContext",
        "question": "Which company started the earliest the maintenance contract? Show the company name.",
        "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1",
        "linq": "context.ThirdPartyCompanies.Join(context.MaintenanceContracts, T1 => T1.CompanyId, T2 => T2.MaintenanceContractCompanyId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.ContractStartDate).Select(row => new { row.T1.CompanyName }).Take(1).ToList();",
        "generated": "context.Third_Party_Companies.OrderBy(row => row.ContractStartDate).Select(row => new { row.CompanyName }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,28): error CS1061: 'AssetsMaintenanceContext' does not contain a definition for 'Third_Party_Companies' and no accessible extension method 'Third_Party_Companies' accepting a first argument of type 'AssetsMaintenanceContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.53"
    },
    {
        "id": "9b17cfaeb95c7a6068aaad12a04aaf3b927eef42bf2909f8cd2485bfc78fc6cf",
        "db_name": "assets_maintenance",
        "context_name": "AssetsMaintenanceContext",
        "question": "Which gender makes up the majority of the staff?",
        "sql": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Staff.GroupBy(row => new { row.Gender }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Gender }).Take(1).ToList();",
        "generated": "context.Staff.GroupBy(row => new { row.Gender }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Gender }).Take(1);",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "ecbb1e2cff81ddefd96a996d0487772824d82da62d735b4d0b74a5668932e2bd",
        "db_name": "assets_maintenance",
        "context_name": "AssetsMaintenanceContext",
        "question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
        "sql": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name",
        "linq": "context.Staff.Join(context.EngineerVisits, T1 => T1.StaffId, T2 => T2.ContactStaffId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StaffName }).Select(group => new { group.Key.StaffName, Count = group.Count() }).ToList();",
        "generated": "context.Staff.Join(context.EngineerVisits, T1 => T1.StaffId, T2 => T2.ContactStaffId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StaffName }).Select(group => new { group.Key.StaffName, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "53e6a42e000bb09e127eec55f1c4e1ca43ab40a504294669d896af62d0978e45",
        "db_name": "assets_maintenance",
        "context_name": "AssetsMaintenanceContext",
        "question": "Which assets did not incur any fault log? List the asset model.",
        "sql": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)",
        "linq": "context.Assets.Where(row => !context.FaultLogs.Select(row => row.AssetId).Contains(row.AssetId)).Select(row => new { row.AssetModel }).ToList();",
        "generated": "context.Assets.Where(row =>!context.FaultLogs.Select(row => row.AssetId).Contains(row.AssetId)).Select(row => new { row.AssetModel }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "d3879c5adbd51f13d752805afd1ae81c966ffca7a8b5961788de7d26ec334bb3",
        "db_name": "wta_1",
        "context_name": "Wta1Context",
        "question": "Find the codes of countries that have more than 50 players.",
        "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "linq": "context.Players.GroupBy(row => new { row.CountryCode }).Where(group => group.Count() > 50).Select(group => new { group.Key.CountryCode }).ToList();",
        "generated": "context.Players.GroupBy(row => new { row.CountryCode }).Where(group => group.Count() > 50).Select(group => new { group.Key.CountryCode }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "161a4db5a3e1d4b886b18ddfda898bf27597770128753070a5847f39308df0eb",
        "db_name": "wta_1",
        "context_name": "Wta1Context",
        "question": "Find the total number of tours for each ranking date.",
        "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "linq": "context.Rankings.GroupBy(row => new { row.RankingDate }).Select(group => new { SumTours = group.Select(row => row.Tours).Sum(), group.Key.RankingDate }).ToList();",
        "generated": "context.Rankings.GroupBy(row => new { row.RankingDate }).Select(group => new { group.Key.RankingDate, TotalTours = group.Sum(row => row.Tours) }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 0, 1: 19870119}, {0: 0, 1: 19870126}, {0: 0, 1: 19870202}, {0: 0, 1: 19870209}, {0: 0, 1: 19870302}, {0: 0, 1: 19870330}, {0: 0, 1: 19870406}, {0: 0, 1: 19870413}, {0: 0, 1: 19870420}, {0: 0, 1: 19870427}, {0: 0, 1: 19870504}, {0: 0, 1: 19870511}, {0: 0, 1: 19870518}, {0: 0, 1: 19870525}, {0: 0, 1: 19870601}, {0: 0, 1: 19870608}, {0: 0, 1: 19870615}, {0: 0, 1: 19870622}, {0: 0, 1: 19870629}, {0: 0, 1: 19870706}, {0: 0, 1: 19870713}, {0: 0, 1: 19870720}, {0: 0, 1: 19870727}, {0: 0, 1: 19870803}, {0: 0, 1: 19870810}, {0: 0, 1: 19870817}, {0: 0, 1: 19870824}, {0: 0, 1: 19870831}, {0: 0, 1: 19870907}, {0: 0, 1: 19870914}, {0: 0, 1: 19870921}, {0: 0, 1: 19870928}, {0: 0, 1: 19871005}, {0: 0, 1: 19871012}, {0: 0, 1: 19871019}, {0: 0, 1: 19871026}, {0: 0, 1: 19871102}, {0: 0, 1: 19871109}, {0: 0, 1: 19871116}, {0: 0, 1: 19871123}, {0: 0, 1: 19871130}, {0: 0, 1: 19871207}, {0: 0, 1: 19871214}, {0: 0, 1: 19871221}, {0: 0, 1: 19871228}, {0: 0, 1: 19880101}, {0: 0, 1: 19880104}, {0: 0, 1: 19880111}, {0: 0, 1: 19880118}, {0: 0, 1: 19880125}, {0: 0, 1: 19880201}, {0: 0, 1: 19880208}, {0: 0, 1: 19880215}, {0: 0, 1: 19880222}, {0: 0, 1: 19880229}, {0: 0, 1: 19880307}, {0: 0, 1: 19880314}, {0: 0, 1: 19880321}, {0: 0, 1: 19880328}, {0: 0, 1: 19880404}, {0: 0, 1: 19880411}, {0: 0, 1: 19880418}, {0: 0, 1: 19880425}, {0: 0, 1: 19880502}, {0: 0, 1: 19880509}, {0: 0, 1: 19880516}, {0: 0, 1: 19880523}, {0: 0, 1: 19880530}, {0: 0, 1: 19880606}, {0: 0, 1: 19880613}, {0: 0, 1: 19880620}, {0: 0, 1: 19880627}, {0: 0, 1: 19880704}, {0: 0, 1: 19880711}, {0: 0, 1: 19880718}, {0: 0, 1: 19880725}, {0: 0, 1: 19880801}, {0: 0, 1: 19880808}, {0: 0, 1: 19880815}, {0: 0, 1: 19880822}, {0: 0, 1: 19880829}, {0: 0, 1: 19880905}, {0: 0, 1: 19880912}, {0: 0, 1: 19880919}, {0: 0, 1: 19880926}, {0: 0, 1: 19881003}, {0: 0, 1: 19881010}, {0: 0, 1: 19881017}, {0: 0, 1: 19881024}, {0: 0, 1: 19881031}, {0: 0, 1: 19881107}, {0: 0, 1: 19881114}, {0: 29, 1: 19881121}, {0: 29, 1: 19881128}, {0: 29, 1: 19881205}, {0: 29, 1: 19881212}, {0: 29, 1: 19881219}, {0: 29, 1: 19881226}, {0: 28, 1: 19890101}, {0: 29, 1: 19890102}, {0: 29, 1: 19890109}, {0: 29, 1: 19890116}, {0: 29, 1: 19890123}, {0: 29, 1: 19890130}, {0: 29, 1: 19890206}, {0: 0, 1: 19890213}, {0: 0, 1: 19890220}, {0: 0, 1: 19890227}, {0: 0, 1: 19890306}, {0: 29, 1: 19890313}, {0: 29, 1: 19890320}, {0: 0, 1: 19890327}, {0: 0, 1: 19890403}, {0: 29, 1: 19890410}, {0: 29, 1: 19890417}, {0: 29, 1: 19890424}, {0: 29, 1: 19890501}, {0: 29, 1: 19890508}, {0: 29, 1: 19890515}, {0: 29, 1: 19890522}, {0: 29, 1: 19890529}, {0: 29, 1: 19890605}, {0: 29, 1: 19890612}, {0: 29, 1: 19890619}, {0: 29, 1: 19890626}, {0: 29, 1: 19890703}, {0: 29, 1: 19890710}, {0: 29, 1: 19890717}, {0: 29, 1: 19890724}, {0: 29, 1: 19890731}, {0: 29, 1: 19890807}, {0: 29, 1: 19890814}, {0: 29, 1: 19890821}, {0: 29, 1: 19890828}, {0: 29, 1: 19890904}, {0: 29, 1: 19890911}, {0: 29, 1: 19890918}, {0: 29, 1: 19890925}, {0: 29, 1: 19891002}, {0: 29, 1: 19891009}, {0: 29, 1: 19891016}, {0: 29, 1: 19891023}, {0: 29, 1: 19891030}, {0: 29, 1: 19891106}, {0: 29, 1: 19891113}, {0: 29, 1: 19891120}, {0: 29, 1: 19891127}, {0: 29, 1: 19891204}, {0: 29, 1: 19891211}, {0: 29, 1: 19891218}, {0: 29, 1: 19891225}, {0: 28, 1: 19900101}, {0: 29, 1: 19900108}, {0: 29, 1: 19900115}, {0: 29, 1: 19900122}, {0: 29, 1: 19900129}, {0: 29, 1: 19900205}, {0: 29, 1: 19900212}, {0: 29, 1: 19900219}, {0: 29, 1: 19900226}, {0: 29, 1: 19900305}, {0: 29, 1: 19900312}, {0: 29, 1: 19900319}, {0: 29, 1: 19900326}, {0: 29, 1: 19900402}, {0: 29, 1: 19900409}, {0: 29, 1: 19900416}, {0: 29, 1: 19900423}, {0: 29, 1: 19900430}, {0: 29, 1: 19900507}, {0: 29, 1: 19900514}, {0: 29, 1: 19900521}, {0: 29, 1: 19900528}, {0: 29, 1: 19900604}, {0: 29, 1: 19900611}, {0: 30, 1: 19900618}, {0: 30, 1: 19900625}, {0: 30, 1: 19900702}, {0: 30, 1: 19900709}, {0: 30, 1: 19900716}, {0: 30, 1: 19900723}, {0: 30, 1: 19900730}, {0: 30, 1: 19900806}, {0: 30, 1: 19900813}, {0: 30, 1: 19900820}, {0: 30, 1: 19900827}, {0: 30, 1: 19900903}, {0: 30, 1: 19900910}, {0: 30, 1: 19900917}, {0: 30, 1: 19900924}, {0: 30, 1: 19901001}, {0: 30, 1: 19901008}, {0: 30, 1: 19901015}, {0: 30, 1: 19901022}, {0: 30, 1: 19901029}, {0: 30, 1: 19901105}, {0: 30, 1: 19901112}, {0: 30, 1: 19901119}, {0: 30, 1: 19901126}, {0: 30, 1: 19901203}, {0: 30, 1: 19901210}, {0: 30, 1: 19901217}, {0: 30, 1: 19901224}, {0: 30, 1: 19901231}, {0: 29, 1: 19910101}, {0: 30, 1: 19910107}, {0: 30, 1: 19910114}, {0: 30, 1: 19910121}, {0: 30, 1: 19910128}, {0: 30, 1: 19910204}, {0: 30, 1: 19910211}, {0: 30, 1: 19910218}, {0: 30, 1: 19910225}, {0: 30, 1: 19910304}, {0: 29, 1: 19910311}, {0: 29, 1: 19910318}, {0: 29, 1: 19910325}, {0: 29, 1: 19910401}, {0: 29, 1: 19910408}, {0: 29, 1: 19910415}, {0: 29, 1: 19910422}, {0: 29, 1: 19910429}, {0: 29, 1: 19910506}, {0: 29, 1: 19910513}, {0: 29, 1: 19910520}, {0: 29, 1: 19910527}, {0: 29, 1: 19910603}, {0: 29, 1: 19910610}, {0: 29, 1: 19910617}, {0: 29, 1: 19910624}, {0: 29, 1: 19910701}, {0: 30, 1: 19910708}, {0: 29, 1: 19910715}, {0: 29, 1: 19910722}, {0: 29, 1: 19910729}, {0: 29, 1: 19910805}, {0: 29, 1: 19910812}, {0: 29, 1: 19910819}, {0: 30, 1: 19910826}, {0: 30, 1: 19910902}, {0: 30, 1: 19910909}, {0: 30, 1: 19910916}, {0: 30, 1: 19910923}, {0: 30, 1: 19910930}, {0: 31, 1: 19911007}, {0: 31, 1: 19911014}, {0: 31, 1: 19911021}, {0: 31, 1: 19911028}, {0: 44, 1: 19911104}, {0: 44, 1: 19911111}, {0: 44, 1: 19911118}, {0: 44, 1: 19911125}, {0: 31, 1: 19911202}, {0: 44, 1: 19911209}, {0: 45, 1: 19911216}, {0: 45, 1: 19911223}, {0: 45, 1: 19911230}, {0: 44, 1: 19920101}, {0: 45, 1: 19920106}, {0: 45, 1: 19920113}, {0: 45, 1: 19920120}, {0: 45, 1: 19920127}, {0: 45, 1: 19920203}, {0: 29, 1: 19920210}, {0: 45, 1: 19920217}, {0: 45, 1: 19920224}, {0: 45, 1: 19920302}, {0: 45, 1: 19920309}, {0: 45, 1: 19920316}, {0: 45, 1: 19920323}, {0: 45, 1: 19920330}, {0: 45, 1: 19920406}, {0: 45, 1: 19920413}, {0: 45, 1: 19920420}, {0: 45, 1: 19920427}, {0: 45, 1: 19920504}, {0: 45, 1: 19920511}, {0: 45, 1: 19920518}, {0: 45, 1: 19920525}, {0: 45, 1: 19920601}, {0: 45, 1: 19920608}, {0: 45, 1: 19920615}, {0: 45, 1: 19920622}, {0: 45, 1: 19920629}, {0: 45, 1: 19920706}, {0: 46, 1: 19920713}, {0: 46, 1: 19920720}, {0: 45, 1: 19920727}, {0: 73, 1: 19920803}, {0: 73, 1: 19920810}, {0: 73, 1: 19920817}, {0: 119, 1: 19920824}, {0: 90, 1: 19920831}, {0: 90, 1: 19920907}, {0: 90, 1: 19920914}, {0: 90, 1: 19920921}, {0: 90, 1: 19920928}, {0: 62, 1: 19921005}, {0: 62, 1: 19921012}, {0: 62, 1: 19921019}, {0: 62, 1: 19921026}, {0: 62, 1: 19921102}, {0: 62, 1: 19921109}, {0: 62, 1: 19921116}, {0: 62, 1: 19921123}, {0: 62, 1: 19921130}, {0: 62, 1: 19921207}, {0: 62, 1: 19921214}, {0: 62, 1: 19921221}, {0: 45, 1: 19921228}, {0: 44, 1: 19930101}, {0: 45, 1: 19930104}, {0: 45, 1: 19930111}, {0: 45, 1: 19930118}, {0: 45, 1: 19930125}, {0: 45, 1: 19930201}, {0: 32, 1: 19930208}, {0: 45, 1: 19930215}, {0: 45, 1: 19930222}, {0: 45, 1: 19930301}, {0: 45, 1: 19930308}, {0: 45, 1: 19930315}, {0: 45, 1: 19930322}, {0: 45, 1: 19930329}, {0: 45, 1: 19930405}, {0: 62, 1: 19930412}, {0: 62, 1: 19930419}, {0: 62, 1: 19930426}, {0: 62, 1: 19930503}, {0: 62, 1: 19930510}, {0: 44, 1: 19930517}, {0: 44, 1: 19930524}, {0: 44, 1: 19930531}, {0: 44, 1: 19930607}, {0: 44, 1: 19930614}, {0: 44, 1: 19930621}, {0: 44, 1: 19930628}, {0: 62, 1: 19930705}, {0: 62, 1: 19930712}, {0: 62, 1: 19930719}, {0: 62, 1: 19930726}, {0: 43, 1: 19930802}, {0: 43, 1: 19930809}, {0: 43, 1: 19930816}, {0: 43, 1: 19930823}, {0: 43, 1: 19930830}, {0: 43, 1: 19930906}, {0: 43, 1: 19930913}, {0: 76, 1: 19930920}, {0: 75, 1: 19930927}, {0: 58, 1: 19931004}, {0: 58, 1: 19931011}, {0: 58, 1: 19931018}, {0: 58, 1: 19931025}, {0: 58, 1: 19931101}, {0: 58, 1: 19931108}, {0: 75, 1: 19931115}, {0: 75, 1: 19931122}, {0: 75, 1: 19931129}, {0: 75, 1: 19931206}, {0: 75, 1: 19931213}, {0: 75, 1: 19931220}, {0: 75, 1: 19931227}, {0: 73, 1: 19940101}, {0: 75, 1: 19940103}, {0: 75, 1: 19940110}, {0: 75, 1: 19940117}, {0: 75, 1: 19940124}, {0: 62, 1: 19940131}, {0: 63, 1: 19940207}, {0: 63, 1: 19940214}, {0: 63, 1: 19940221}, {0: 62, 1: 19940228}, {0: 62, 1: 19940307}, {0: 62, 1: 19940314}, {0: 62, 1: 19940321}, {0: 61, 1: 19940328}, {0: 62, 1: 19940404}, {0: 61, 1: 19940411}, {0: 44, 1: 19940418}, {0: 57, 1: 19940425}, {0: 57, 1: 19940502}, {0: 57, 1: 19940509}, {0: 57, 1: 19940516}, {0: 57, 1: 19940523}, {0: 57, 1: 19940530}, {0: 65, 1: 19940606}, {0: 65, 1: 19940613}, {0: 65, 1: 19940620}, {0: 65, 1: 19940627}, {0: 67, 1: 19940704}, {0: 67, 1: 19940711}, {0: 60, 1: 19940718}, {0: 60, 1: 19940725}, {0: 60, 1: 19940801}, {0: 60, 1: 19940808}, {0: 60, 1: 19940815}, {0: 60, 1: 19940822}, {0: 60, 1: 19940829}, {0: 60, 1: 19940905}, {0: 68, 1: 19940912}, {0: 68, 1: 19940919}, {0: 69, 1: 19940926}, {0: 69, 1: 19941003}, {0: 69, 1: 19941010}, {0: 69, 1: 19941017}, {0: 59, 1: 19941024}, {0: 59, 1: 19941031}, {0: 69, 1: 19941107}, {0: 69, 1: 19941114}, {0: 69, 1: 19941121}, {0: 69, 1: 19941128}, {0: 69, 1: 19941205}, {0: 69, 1: 19941212}, {0: 69, 1: 19941219}, {0: 69, 1: 19941226}, {0: 69, 1: 19950101}, {0: 69, 1: 19950102}, {0: 69, 1: 19950109}, {0: 69, 1: 19950116}, {0: 69, 1: 19950123}, {0: 69, 1: 19950130}, {0: 69, 1: 19950206}, {0: 69, 1: 19950213}, {0: 69, 1: 19950220}, {0: 69, 1: 19950227}, {0: 69, 1: 19950306}, {0: 69, 1: 19950313}, {0: 69, 1: 19950320}, {0: 69, 1: 19950327}, {0: 69, 1: 19950403}, {0: 69, 1: 19950410}, {0: 69, 1: 19950417}, {0: 69, 1: 19950424}, {0: 69, 1: 19950501}, {0: 69, 1: 19950508}, {0: 69, 1: 19950515}, {0: 69, 1: 19950522}, {0: 69, 1: 19950529}, {0: 69, 1: 19950605}, {0: 96, 1: 19950612}, {0: 96, 1: 19950619}, {0: 96, 1: 19950626}, {0: 96, 1: 19950703}, {0: 97, 1: 19950710}, {0: 118, 1: 19950717}, {0: 118, 1: 19950724}, {0: 118, 1: 19950731}, {0: 118, 1: 19950807}, {0: 118, 1: 19950814}, {0: 131, 1: 19950821}, {0: 131, 1: 19950828}, {0: 131, 1: 19950904}, {0: 131, 1: 19950911}, {0: 131, 1: 19950918}, {0: 131, 1: 19950925}, {0: 131, 1: 19951002}, {0: 131, 1: 19951009}, {0: 131, 1: 19951016}, {0: 131, 1: 19951023}, {0: 131, 1: 19951030}, {0: 131, 1: 19951106}, {0: 138, 1: 19951113}, {0: 138, 1: 19951120}, {0: 138, 1: 19951127}, {0: 138, 1: 19951204}, {0: 138, 1: 19951211}, {0: 138, 1: 19951218}, {0: 138, 1: 19951225}, {0: 138, 1: 19960101}, {0: 125, 1: 19960108}, {0: 125, 1: 19960115}, {0: 125, 1: 19960122}, {0: 125, 1: 19960129}, {0: 125, 1: 19960205}, {0: 125, 1: 19960212}, {0: 125, 1: 19960219}, {0: 147, 1: 19960226}, {0: 147, 1: 19960304}, {0: 147, 1: 19960311}, {0: 147, 1: 19960318}, {0: 147, 1: 19960325}, {0: 147, 1: 19960401}, {0: 147, 1: 19960408}, {0: 147, 1: 19960415}, {0: 147, 1: 19960422}, {0: 147, 1: 19960429}, {0: 147, 1: 19960506}, {0: 147, 1: 19960513}, {0: 147, 1: 19960520}, {0: 147, 1: 19960527}, {0: 147, 1: 19960603}, {0: 147, 1: 19960610}, {0: 147, 1: 19960617}, {0: 147, 1: 19960624}, {0: 147, 1: 19960701}, {0: 171, 1: 19960708}, {0: 171, 1: 19960715}, {0: 171, 1: 19960722}, {0: 171, 1: 19960729}, {0: 171, 1: 19960805}, {0: 171, 1: 19960812}, {0: 171, 1: 19960819}, {0: 171, 1: 19960826}, {0: 171, 1: 19960902}, {0: 194, 1: 19960909}, {0: 172, 1: 19960916}, {0: 172, 1: 19960923}, {0: 172, 1: 19960930}, {0: 172, 1: 19961007}, {0: 175, 1: 19961014}, {0: 175, 1: 19961021}, {0: 191, 1: 19961028}, {0: 191, 1: 19961104}, {0: 213, 1: 19961111}, {0: 213, 1: 19961118}, {0: 213, 1: 19961125}, {0: 213, 1: 19961202}, {0: 213, 1: 19961209}, {0: 213, 1: 19961216}, {0: 185, 1: 19961223}, {0: 185, 1: 19961230}, {0: 185, 1: 19970101}, {0: 185, 1: 19970106}, {0: 185, 1: 19970113}, {0: 185, 1: 19970120}, {0: 209, 1: 19970127}, {0: 209, 1: 19970203}, {0: 209, 1: 19970210}, {0: 209, 1: 19970217}, {0: 223, 1: 19970224}, {0: 223, 1: 19970303}, {0: 223, 1: 19970310}, {0: 223, 1: 19970317}, {0: 223, 1: 19970324}, {0: 223, 1: 19970331}, {0: 223, 1: 19970407}, {0: 225, 1: 19970414}, {0: 225, 1: 19970421}, {0: 225, 1: 19970428}, {0: 225, 1: 19970505}, {0: 225, 1: 19970512}, {0: 225, 1: 19970519}, {0: 225, 1: 19970526}, {0: 225, 1: 19970602}, {0: 225, 1: 19970609}, {0: 225, 1: 19970616}, {0: 225, 1: 19970623}, {0: 225, 1: 19970630}, {0: 164, 1: 19970707}, {0: 257, 1: 19970714}, {0: 257, 1: 19970721}, {0: 257, 1: 19970728}, {0: 273, 1: 19970804}, {0: 273, 1: 19970811}, {0: 273, 1: 19970818}, {0: 273, 1: 19970825}, {0: 273, 1: 19970901}, {0: 273, 1: 19970908}, {0: 273, 1: 19970915}, {0: 273, 1: 19970922}, {0: 273, 1: 19970929}, {0: 273, 1: 19971006}, {0: 299, 1: 19971013}, {0: 314, 1: 19971020}, {0: 314, 1: 19971027}, {0: 337, 1: 19971103}, {0: 337, 1: 19971110}, {0: 363, 1: 19971117}, {0: 363, 1: 19971124}, {0: 363, 1: 19971201}, {0: 394, 1: 19971208}, {0: 394, 1: 19971215}, {0: 394, 1: 19971222}, {0: 394, 1: 19971229}, {0: 394, 1: 19980101}, {0: 394, 1: 19980105}, {0: 394, 1: 19980112}, {0: 394, 1: 19980119}, {0: 394, 1: 19980126}, {0: 394, 1: 19980202}, {0: 394, 1: 19980209}, {0: 394, 1: 19980216}, {0: 394, 1: 19980223}, {0: 394, 1: 19980302}, {0: 394, 1: 19980309}, {0: 394, 1: 19980316}, {0: 394, 1: 19980323}, {0: 426, 1: 19980330}, {0: 426, 1: 19980406}, {0: 459, 1: 19980413}, {0: 459, 1: 19980420}, {0: 459, 1: 19980427}, {0: 459, 1: 19980504}, {0: 459, 1: 19980511}, {0: 459, 1: 19980518}, {0: 459, 1: 19980525}, {0: 459, 1: 19980601}, {0: 543, 1: 19980608}, {0: 569, 1: 19980615}, {0: 590, 1: 19980622}, {0: 590, 1: 19980629}, {0: 633, 1: 19980706}, {0: 633, 1: 19980713}, {0: 633, 1: 19980720}, {0: 634, 1: 19980727}, {0: 634, 1: 19980803}, {0: 634, 1: 19980810}, {0: 631, 1: 19980817}, {0: 631, 1: 19980824}, {0: 660, 1: 19980831}, {0: 660, 1: 19980907}, {0: 663, 1: 19980914}, {0: 663, 1: 19980921}, {0: 683, 1: 19980928}, {0: 688, 1: 19981005}, {0: 688, 1: 19981012}, {0: 696, 1: 19981019}, {0: 693, 1: 19981026}, {0: 693, 1: 19981102}, {0: 692, 1: 19981109}, {0: 692, 1: 19981116}, {0: 692, 1: 19981123}, {0: 709, 1: 19981130}, {0: 703, 1: 19981207}, {0: 703, 1: 19981214}, {0: 703, 1: 19981221}, {0: 703, 1: 19981228}, {0: 703, 1: 19990101}, {0: 722, 1: 19990104}, {0: 722, 1: 19990111}, {0: 722, 1: 19990118}, {0: 722, 1: 19990125}, {0: 728, 1: 19990201}, {0: 723, 1: 19990208}, {0: 723, 1: 19990215}, {0: 723, 1: 19990222}, {0: 723, 1: 19990301}, {0: 723, 1: 19990308}, {0: 728, 1: 19990315}, {0: 728, 1: 19990322}, {0: 728, 1: 19990329}, {0: 728, 1: 19990405}, {0: 728, 1: 19990412}, {0: 728, 1: 19990419}, {0: 752, 1: 19990426}, {0: 761, 1: 19990503}, {0: 761, 1: 19990510}, {0: 777, 1: 19990517}, {0: 777, 1: 19990524}, {0: 777, 1: 19990531}, {0: 804, 1: 19990607}, {0: 804, 1: 19990614}, {0: 804, 1: 19990621}, {0: 804, 1: 19990628}, {0: 804, 1: 19990705}, {0: 829, 1: 19990712}, {0: 829, 1: 19990719}, {0: 829, 1: 19990726}, {0: 829, 1: 19990802}, {0: 870, 1: 19990809}, {0: 873, 1: 19990816}, {0: 853, 1: 19990823}, {0: 861, 1: 19990830}, {0: 861, 1: 19990906}, {0: 879, 1: 19990913}, {0: 879, 1: 19990920}, {0: 899, 1: 19990927}, {0: 927, 1: 19991004}, {0: 941, 1: 19991011}, {0: 964, 1: 19991018}, {0: 941, 1: 19991025}, {0: 941, 1: 19991101}, {0: 941, 1: 19991108}, {0: 941, 1: 19991115}, {0: 941, 1: 19991122}, {0: 966, 1: 19991129}, {0: 966, 1: 19991206}, {0: 989, 1: 19991213}, {0: 989, 1: 19991220}, {0: 989, 1: 19991227}, {0: 989, 1: 20000101}, {0: 989, 1: 20000103}, {0: 989, 1: 20000110}, {0: 989, 1: 20000117}, {0: 989, 1: 20000124}, {0: 1013, 1: 20000131}, {0: 1038, 1: 20000207}, {0: 1038, 1: 20000214}, {0: 1038, 1: 20000221}, {0: 1038, 1: 20000228}, {0: 1065, 1: 20000306}, {0: 1065, 1: 20000313}, {0: 1065, 1: 20000320}, {0: 1065, 1: 20000327}, {0: 1065, 1: 20000403}, {0: 1093, 1: 20000410}, {0: 1093, 1: 20000417}, {0: 1093, 1: 20000424}, {0: 1122, 1: 20000501}, {0: 1122, 1: 20000508}, {0: 1106, 1: 20000515}, {0: 1106, 1: 20000522}, {0: 1106, 1: 20000529}, {0: 1106, 1: 20000605}, {0: 1160, 1: 20000612}, {0: 1160, 1: 20000619}, {0: 1188, 1: 20000626}, {0: 1188, 1: 20000703}, {0: 1204, 1: 20000710}, {0: 1205, 1: 20000717}, {0: 1212, 1: 20000724}, {0: 1276, 1: 20000731}, {0: 1276, 1: 20000807}, {0: 1224, 1: 20000814}, {0: 1224, 1: 20000821}, {0: 1224, 1: 20000828}, {0: 1224, 1: 20000904}, {0: 1241, 1: 20000911}, {0: 1265, 1: 20000918}, {0: 1231, 1: 20000925}, {0: 1223, 1: 20001002}, {0: 1232, 1: 20001009}, {0: 1253, 1: 20001016}, {0: 1245, 1: 20001023}, {0: 1247, 1: 20001030}, {0: 1173, 1: 20001106}, {0: 964, 1: 20001113}, {0: 961, 1: 20001120}, {0: 961, 1: 20001127}, {0: 961, 1: 20001204}, {0: 964, 1: 20001211}, {0: 964, 1: 20001218}, {0: 964, 1: 20001225}, {0: 964, 1: 20010101}, {0: 964, 1: 20010108}, {0: 964, 1: 20010115}, {0: 964, 1: 20010122}, {0: 977, 1: 20010129}, {0: 977, 1: 20010205}, {0: 1004, 1: 20010212}, {0: 1027, 1: 20010219}, {0: 1027, 1: 20010226}, {0: 1027, 1: 20010305}, {0: 1027, 1: 20010312}, {0: 1101, 1: 20010319}, {0: 1101, 1: 20010326}, {0: 914, 1: 20010402}, {0: 930, 1: 20010409}, {0: 952, 1: 20010416}, {0: 961, 1: 20010423}, {0: 988, 1: 20010430}, {0: 1011, 1: 20010507}, {0: 1011, 1: 20010514}, {0: 1029, 1: 20010521}, {0: 1067, 1: 20010528}, {0: 1067, 1: 20010604}, {0: 1094, 1: 20010611}, {0: 1094, 1: 20010618}, {0: 1073, 1: 20010625}, {0: 1073, 1: 20010702}, {0: 1113, 1: 20010709}, {0: 1135, 1: 20010716}, {0: 1149, 1: 20010723}, {0: 1149, 1: 20010730}, {0: 1175, 1: 20010806}, {0: 1175, 1: 20010813}, {0: 1175, 1: 20010820}, {0: 1201, 1: 20010827}, {0: 1201, 1: 20010903}, {0: 1228, 1: 20010910}, {0: 1231, 1: 20010917}, {0: 1263, 1: 20010924}, {0: 1287, 1: 20011001}, {0: 1267, 1: 20011008}, {0: 1288, 1: 20011015}, {0: 1291, 1: 20011022}, {0: 1312, 1: 20011029}, {0: 1312, 1: 20011105}, {0: 1412, 1: 20011112}, {0: 1412, 1: 20011119}, {0: 1437, 1: 20011126}, {0: 1437, 1: 20011203}, {0: 1437, 1: 20011210}, {0: 1430, 1: 20011217}, {0: 1430, 1: 20011224}, {0: 1430, 1: 20011231}, {0: 1430, 1: 20020101}, {0: 1430, 1: 20020107}, {0: 1430, 1: 20020114}, {0: 1430, 1: 20020121}, {0: 1430, 1: 20020128}, {0: 1422, 1: 20020204}, {0: 1422, 1: 20020211}, {0: 1422, 1: 20020218}, {0: 1424, 1: 20020225}, {0: 1424, 1: 20020304}, {0: 1424, 1: 20020311}, {0: 1448, 1: 20020318}, {0: 1448, 1: 20020325}, {0: 1573, 1: 20020401}, {0: 1574, 1: 20020408}, {0: 1574, 1: 20020415}, {0: 1574, 1: 20020422}, {0: 1577, 1: 20020429}, {0: 1730, 1: 20020506}, {0: 1577, 1: 20020513}, {0: 1577, 1: 20020520}, {0: 1577, 1: 20020527}, {0: 1577, 1: 20020603}, {0: 1783, 1: 20020610}, {0: 1803, 1: 20020617}, {0: 1783, 1: 20020624}, {0: 1783, 1: 20020701}, {0: 1834, 1: 20020708}, {0: 1835, 1: 20020715}, {0: 1828, 1: 20020722}, {0: 1853, 1: 20020729}, {0: 1853, 1: 20020805}, {0: 1925, 1: 20020812}, {0: 1915, 1: 20020819}, {0: 2111, 1: 20020826}, {0: 2111, 1: 20020902}, {0: 2451, 1: 20020909}, {0: 2457, 1: 20020916}, {0: 2462, 1: 20020923}, {0: 2496, 1: 20020930}, {0: 2526, 1: 20021007}, {0: 2520, 1: 20021014}, {0: 2505, 1: 20021021}, {0: 2505, 1: 20021028}, {0: 2498, 1: 20021104}, {0: 2497, 1: 20021111}, {0: 2497, 1: 20021118}, {0: 2497, 1: 20021125}, {0: 2497, 1: 20021202}, {0: 2497, 1: 20021209}, {0: 2497, 1: 20021216}, {0: 2497, 1: 20021223}, {0: 2497, 1: 20021230}, {0: 2497, 1: 20030101}, {0: 2497, 1: 20030106}, {0: 2497, 1: 20030113}, {0: 2497, 1: 20030120}, {0: 2497, 1: 20030127}, {0: 2517, 1: 20030203}, {0: 2507, 1: 20030210}, {0: 2490, 1: 20030217}, {0: 2528, 1: 20030224}, {0: 2549, 1: 20030303}, {0: 2549, 1: 20030310}, {0: 2571, 1: 20030317}, {0: 2571, 1: 20030324}, {0: 2614, 1: 20030331}, {0: 2587, 1: 20030407}, {0: 2587, 1: 20030414}, {0: 2608, 1: 20030421}, {0: 2719, 1: 20030428}, {0: 2652, 1: 20030505}, {0: 2671, 1: 20030512}, {0: 2728, 1: 20030519}, {0: 1860, 1: 20030526}, {0: 2728, 1: 20030602}, {0: 2753, 1: 20030609}, {0: 2753, 1: 20030616}, {0: 2731, 1: 20030623}, {0: 2731, 1: 20030630}, {0: 2730, 1: 20030707}, {0: 2755, 1: 20030714}, {0: 2759, 1: 20030721}, {0: 2777, 1: 20030728}, {0: 2732, 1: 20030804}, {0: 2734, 1: 20030811}, {0: 2755, 1: 20030818}, {0: 2801, 1: 20030825}, {0: 2801, 1: 20030901}, {0: 2798, 1: 20030908}, {0: 2847, 1: 20030915}, {0: 2862, 1: 20030922}, {0: 2930, 1: 20030929}, {0: 2961, 1: 20031006}, {0: 2966, 1: 20031013}, {0: 3035, 1: 20031020}, {0: 3020, 1: 20031027}, {0: 3038, 1: 20031103}, {0: 3052, 1: 20031110}, {0: 3065, 1: 20031117}, {0: 3092, 1: 20031124}, {0: 3120, 1: 20031201}, {0: 3190, 1: 20031208}, {0: 3211, 1: 20031215}, {0: 3211, 1: 20031222}, {0: 3214, 1: 20031229}, {0: 3214, 1: 20040101}, {0: 3206, 1: 20040105}, {0: 3206, 1: 20040112}, {0: 3206, 1: 20040119}, {0: 3206, 1: 20040126}, {0: 3257, 1: 20040202}, {0: 3265, 1: 20040209}, {0: 3282, 1: 20040216}, {0: 3282, 1: 20040223}, {0: 3279, 1: 20040301}, {0: 3286, 1: 20040308}, {0: 3286, 1: 20040315}, {0: 3286, 1: 20040322}, {0: 3286, 1: 20040329}, {0: 3277, 1: 20040405}, {0: 3286, 1: 20040412}, {0: 1489, 1: 20040419}, {0: 3379, 1: 20040426}, {0: 2613, 1: 20040503}, {0: 1187, 1: 20040510}, {0: 2361, 1: 20040517}, {0: 2955, 1: 20040524}, {0: 2535, 1: 20040531}, {0: 3433, 1: 20040607}, {0: 3456, 1: 20040614}, {0: 3492, 1: 20040621}, {0: 3492, 1: 20040628}, {0: 3498, 1: 20040705}, {0: 3516, 1: 20040712}, {0: 3587, 1: 20040719}, {0: 3592, 1: 20040726}, {0: 3592, 1: 20040802}, {0: 3645, 1: 20040809}, {0: 3647, 1: 20040816}, {0: 3661, 1: 20040823}, {0: 3705, 1: 20040830}, {0: 3705, 1: 20040906}, {0: 3785, 1: 20040913}, {0: 3831, 1: 20040920}, {0: 3913, 1: 20040927}, {0: 3957, 1: 20041004}, {0: 3986, 1: 20041011}, {0: 3987, 1: 20041018}, {0: 3968, 1: 20041025}, {0: 4011, 1: 20041101}, {0: 4071, 1: 20041108}, {0: 4124, 1: 20041115}, {0: 4145, 1: 20041122}, {0: 4147, 1: 20041129}, {0: 4160, 1: 20041206}, {0: 4160, 1: 20041213}, {0: 4160, 1: 20041220}, {0: 4160, 1: 20041227}, {0: 4160, 1: 20050101}, {0: 4160, 1: 20050103}, {0: 4160, 1: 20050110}, {0: 4160, 1: 20050117}, {0: 4160, 1: 20050124}, {0: 4198, 1: 20050131}, {0: 4198, 1: 20050207}, {0: 4211, 1: 20050214}, {0: 4286, 1: 20050221}, {0: 4286, 1: 20050228}, {0: 4313, 1: 20050307}, {0: 4313, 1: 20050314}, {0: 4333, 1: 20050321}, {0: 4333, 1: 20050328}, {0: 4362, 1: 20050404}, {0: 4371, 1: 20050411}, {0: 4379, 1: 20050418}, {0: 4379, 1: 20050425}, {0: 4379, 1: 20050502}, {0: 4470, 1: 20050509}, {0: 4489, 1: 20050516}, {0: 4522, 1: 20050523}, {0: 4522, 1: 20050530}, {0: 4682, 1: 20050606}, {0: 4705, 1: 20050613}, {0: 4727, 1: 20050620}, {0: 4727, 1: 20050627}, {0: 4792, 1: 20050704}, {0: 4816, 1: 20050711}, {0: 4847, 1: 20050718}, {0: 4859, 1: 20050725}, {0: 4926, 1: 20050801}, {0: 4982, 1: 20050808}, {0: 5020, 1: 20050815}, {0: 5090, 1: 20050822}, {0: 5100, 1: 20050829}, {0: 5100, 1: 20050905}, {0: 5187, 1: 20050912}, {0: 5173, 1: 20050919}, {0: 5175, 1: 20050926}, {0: 5215, 1: 20051003}, {0: 5249, 1: 20051010}, {0: 5237, 1: 20051017}, {0: 5257, 1: 20051024}, {0: 5331, 1: 20051031}, {0: 5362, 1: 20051107}, {0: 5357, 1: 20051114}, {0: 5391, 1: 20051121}, {0: 5401, 1: 20051128}, {0: 5452, 1: 20051205}, {0: 5452, 1: 20051212}, {0: 5452, 1: 20051219}, {0: 5452, 1: 20051226}, {0: 5452, 1: 20060101}, {0: 5452, 1: 20060102}, {0: 5452, 1: 20060109}, {0: 5452, 1: 20060116}, {0: 5452, 1: 20060123}, {0: 5441, 1: 20060130}, {0: 5425, 1: 20060206}, {0: 5441, 1: 20060213}, {0: 5478, 1: 20060220}, {0: 5528, 1: 20060227}, {0: 5548, 1: 20060306}, {0: 5548, 1: 20060313}, {0: 5559, 1: 20060320}, {0: 5559, 1: 20060327}, {0: 5626, 1: 20060403}, {0: 5626, 1: 20060410}, {0: 5644, 1: 20060417}, {0: 5658, 1: 20060424}, {0: 5656, 1: 20060501}, {0: 5654, 1: 20060508}, {0: 5683, 1: 20060515}, {0: 5721, 1: 20060522}, {0: 5798, 1: 20060529}, {0: 5798, 1: 20060605}, {0: 5862, 1: 20060612}, {0: 5897, 1: 20060619}, {0: 5944, 1: 20060626}, {0: 5944, 1: 20060703}, {0: 5983, 1: 20060710}, {0: 6026, 1: 20060717}, {0: 6065, 1: 20060724}, {0: 6133, 1: 20060731}, {0: 6151, 1: 20060807}, {0: 6226, 1: 20060814}, {0: 6289, 1: 20060821}, {0: 6284, 1: 20060828}, {0: 6284, 1: 20060904}, {0: 6304, 1: 20060911}, {0: 6347, 1: 20060918}, {0: 6376, 1: 20060925}, {0: 6436, 1: 20061002}, {0: 6520, 1: 20061009}, {0: 6629, 1: 20061016}, {0: 6730, 1: 20061023}, {0: 6808, 1: 20061030}, {0: 6816, 1: 20061106}, {0: 6807, 1: 20061113}, {0: 6893, 1: 20061120}, {0: 6896, 1: 20061127}, {0: 6931, 1: 20061204}, {0: 6953, 1: 20061211}, {0: 6953, 1: 20061218}, {0: 6953, 1: 20061225}, {0: 6953, 1: 20070101}, {0: 6926, 1: 20070108}, {0: 6926, 1: 20070115}, {0: 6926, 1: 20070122}, {0: 6925, 1: 20070129}, {0: 6925, 1: 20070205}, {0: 6930, 1: 20070212}, {0: 6942, 1: 20070219}, {0: 6988, 1: 20070226}, {0: 7017, 1: 20070305}, {0: 7017, 1: 20070312}, {0: 7058, 1: 20070319}, {0: 7058, 1: 20070326}, {0: 7139, 1: 20070402}, {0: 7175, 1: 20070409}, {0: 7197, 1: 20070416}, {0: 7197, 1: 20070423}, {0: 7197, 1: 20070430}, {0: 7233, 1: 20070507}, {0: 7317, 1: 20070514}, {0: 7341, 1: 20070521}, {0: 7365, 1: 20070528}, {0: 7365, 1: 20070604}, {0: 7448, 1: 20070611}, {0: 7448, 1: 20070618}, {0: 7473, 1: 20070625}, {0: 7473, 1: 20070702}, {0: 7495, 1: 20070709}, {0: 7478, 1: 20070716}, {0: 7470, 1: 20070723}, {0: 7528, 1: 20070730}, {0: 7522, 1: 20070806}, {0: 7527, 1: 20070813}, {0: 7503, 1: 20070820}, {0: 7504, 1: 20070827}, {0: 7504, 1: 20070903}, {0: 7602, 1: 20070910}, {0: 7643, 1: 20070917}, {0: 7686, 1: 20070924}, {0: 7697, 1: 20071001}, {0: 7707, 1: 20071008}, {0: 7687, 1: 20071015}, {0: 7638, 1: 20071022}, {0: 7711, 1: 20071029}, {0: 7677, 1: 20071105}, {0: 7664, 1: 20071112}, {0: 7666, 1: 20071119}, {0: 7674, 1: 20071126}, {0: 7650, 1: 20071203}, {0: 7659, 1: 20071210}, {0: 7659, 1: 20071217}, {0: 7682, 1: 20071224}, {0: 7682, 1: 20071231}, {0: 7682, 1: 20080101}, {0: 7682, 1: 20080107}, {0: 7711, 1: 20080114}, {0: 7711, 1: 20080121}, {0: 7691, 1: 20080128}, {0: 7716, 1: 20080204}, {0: 7743, 1: 20080211}, {0: 7742, 1: 20080218}, {0: 7731, 1: 20080225}, {0: 7761, 1: 20080303}, {0: 7790, 1: 20080310}, {0: 7790, 1: 20080317}, {0: 7832, 1: 20080324}, {0: 7832, 1: 20080331}, {0: 7873, 1: 20080407}, {0: 7889, 1: 20080414}, {0: 7917, 1: 20080421}, {0: 7917, 1: 20080428}, {0: 7929, 1: 20080505}, {0: 8002, 1: 20080512}, {0: 8022, 1: 20080519}, {0: 8090, 1: 20080526}, {0: 8090, 1: 20080602}, {0: 8030, 1: 20080609}, {0: 7970, 1: 20080616}, {0: 7966, 1: 20080623}, {0: 7966, 1: 20080630}, {0: 8089, 1: 20080707}, {0: 8113, 1: 20080714}, {0: 8235, 1: 20080721}, {0: 8280, 1: 20080728}, {0: 8325, 1: 20080804}, {0: 8372, 1: 20080811}, {0: 8387, 1: 20080818}, {0: 8417, 1: 20080825}, {0: 8417, 1: 20080901}, {0: 8527, 1: 20080908}, {0: 8639, 1: 20080915}, {0: 8690, 1: 20080922}, {0: 8731, 1: 20080929}, {0: 8762, 1: 20081006}, {0: 8794, 1: 20081013}, {0: 8836, 1: 20081020}, {0: 8898, 1: 20081027}, {0: 8956, 1: 20081103}, {0: 8996, 1: 20081110}, {0: 9003, 1: 20081117}, {0: 9019, 1: 20081124}, {0: 9050, 1: 20081201}, {0: 9076, 1: 20081208}, {0: 9077, 1: 20081215}, {0: 9070, 1: 20081222}, {0: 9070, 1: 20081229}, {0: 9070, 1: 20090101}, {0: 9064, 1: 20090105}, {0: 9064, 1: 20090112}, {0: 9064, 1: 20090119}, {0: 9064, 1: 20090126}, {0: 9087, 1: 20090202}, {0: 9087, 1: 20090209}, {0: 9059, 1: 20090216}, {0: 9063, 1: 20090223}, {0: 9063, 1: 20090302}, {0: 9053, 1: 20090309}, {0: 9053, 1: 20090316}, {0: 9057, 1: 20090323}, {0: 9057, 1: 20090330}, {0: 9066, 1: 20090406}, {0: 9121, 1: 20090413}, {0: 9110, 1: 20090420}, {0: 9111, 1: 20090427}, {0: 9094, 1: 20090504}, {0: 9143, 1: 20090511}, {0: 9140, 1: 20090518}, {0: 9153, 1: 20090525}, {0: 9153, 1: 20090601}, {0: 9203, 1: 20090608}, {0: 9239, 1: 20090615}, {0: 9255, 1: 20090622}, {0: 9255, 1: 20090629}, {0: 9310, 1: 20090706}, {0: 9376, 1: 20090713}, {0: 9474, 1: 20090720}, {0: 9589, 1: 20090727}, {0: 9611, 1: 20090803}, {0: 9598, 1: 20090810}, {0: 9642, 1: 20090817}, {0: 9682, 1: 20090824}, {0: 9682, 1: 20090831}, {0: 9682, 1: 20090907}, {0: 9808, 1: 20090914}, {0: 9856, 1: 20090921}, {0: 9918, 1: 20090928}, {0: 9929, 1: 20091005}, {0: 9925, 1: 20091012}, {0: 10003, 1: 20091019}, {0: 10025, 1: 20091026}, {0: 10061, 1: 20091102}, {0: 10116, 1: 20091109}, {0: 10137, 1: 20091116}, {0: 10204, 1: 20091123}, {0: 10238, 1: 20091130}, {0: 10221, 1: 20091207}, {0: 10272, 1: 20091214}, {0: 10272, 1: 20091221}, {0: 10318, 1: 20091228}, {0: 10318, 1: 20100101}, {0: 10318, 1: 20100104}, {0: 10320, 1: 20100111}, {0: 10329, 1: 20100118}, {0: 10329, 1: 20100125}, {0: 10373, 1: 20100201}, {0: 10372, 1: 20100208}, {0: 10389, 1: 20100215}, {0: 10404, 1: 20100222}, {0: 10430, 1: 20100301}, {0: 10442, 1: 20100308}, {0: 10442, 1: 20100315}, {0: 10412, 1: 20100322}, {0: 10412, 1: 20100329}, {0: 10481, 1: 20100405}, {0: 10515, 1: 20100412}, {0: 10543, 1: 20100419}, {0: 10580, 1: 20100426}, {0: 10590, 1: 20100503}, {0: 10576, 1: 20100510}, {0: 10593, 1: 20100517}, {0: 10634, 1: 20100524}, {0: 10634, 1: 20100531}, {0: 10613, 1: 20100607}, {0: 10630, 1: 20100614}, {0: 10634, 1: 20100621}, {0: 10634, 1: 20100628}, {0: 10685, 1: 20100705}, {0: 10726, 1: 20100712}, {0: 10756, 1: 20100719}, {0: 10817, 1: 20100726}, {0: 10835, 1: 20100802}, {0: 10937, 1: 20100809}, {0: 10999, 1: 20100816}, {0: 11026, 1: 20100823}, {0: 11125, 1: 20100830}, {0: 11125, 1: 20100906}, {0: 11256, 1: 20100913}, {0: 11290, 1: 20100920}, {0: 11339, 1: 20100927}, {0: 11460, 1: 20101004}, {0: 11566, 1: 20101011}, {0: 11594, 1: 20101018}, {0: 11617, 1: 20101025}, {0: 11687, 1: 20101101}, {0: 11735, 1: 20101108}, {0: 11814, 1: 20101115}, {0: 11845, 1: 20101122}, {0: 11877, 1: 20101129}, {0: 11888, 1: 20101206}, {0: 11907, 1: 20101213}, {0: 11913, 1: 20101220}, {0: 11904, 1: 20101227}, {0: 11904, 1: 20110101}, {0: 12060, 1: 20110103}, {0: 12067, 1: 20110110}, {0: 12094, 1: 20110117}, {0: 12094, 1: 20110124}, {0: 12143, 1: 20110131}, {0: 12181, 1: 20110207}, {0: 12204, 1: 20110214}, {0: 12201, 1: 20110221}, {0: 12254, 1: 20110228}, {0: 12267, 1: 20110307}, {0: 12267, 1: 20110314}, {0: 12303, 1: 20110321}, {0: 12303, 1: 20110328}, {0: 12343, 1: 20110404}, {0: 12398, 1: 20110411}, {0: 12434, 1: 20110418}, {0: 12422, 1: 20110425}, {0: 12438, 1: 20110502}, {0: 12482, 1: 20110509}, {0: 12467, 1: 20110516}, {0: 12522, 1: 20110523}, {0: 12522, 1: 20110530}, {0: 12659, 1: 20110606}, {0: 12682, 1: 20110613}, {0: 12686, 1: 20110620}, {0: 12686, 1: 20110627}, {0: 12867, 1: 20110704}, {0: 12895, 1: 20110711}, {0: 12927, 1: 20110718}, {0: 13006, 1: 20110725}, {0: 12999, 1: 20110801}, {0: 13081, 1: 20110808}, {0: 13129, 1: 20110815}, {0: 13140, 1: 20110822}, {0: 13174, 1: 20110829}, {0: 13174, 1: 20110905}, {0: 13299, 1: 20110912}, {0: 13342, 1: 20110919}, {0: 13382, 1: 20110926}, {0: 13372, 1: 20111003}, {0: 13382, 1: 20111010}, {0: 13411, 1: 20111017}, {0: 13443, 1: 20111024}, {0: 13465, 1: 20111031}, {0: 13443, 1: 20111107}, {0: 13482, 1: 20111114}, {0: 13518, 1: 20111121}, {0: 13517, 1: 20111128}, {0: 13542, 1: 20111205}, {0: 13536, 1: 20111212}, {0: 13565, 1: 20111219}, {0: 13603, 1: 20111226}, {0: 13603, 1: 20120101}, {0: 13610, 1: 20120102}, {0: 13628, 1: 20120109}, {0: 13618, 1: 20120116}, {0: 13618, 1: 20120123}, {0: 13667, 1: 20120130}, {0: 13666, 1: 20120206}, {0: 13674, 1: 20120213}, {0: 13719, 1: 20120220}, {0: 13788, 1: 20120227}, {0: 13791, 1: 20120305}, {0: 13791, 1: 20120312}, {0: 13818, 1: 20120319}, {0: 13818, 1: 20120326}, {0: 13881, 1: 20120402}, {0: 13902, 1: 20120409}, {0: 13938, 1: 20120416}, {0: 13964, 1: 20120423}, {0: 13983, 1: 20120430}, {0: 14016, 1: 20120507}, {0: 14015, 1: 20120514}, {0: 14034, 1: 20120521}, {0: 14087, 1: 20120528}, {0: 14087, 1: 20120604}, {0: 14072, 1: 20120611}, {0: 14138, 1: 20120618}, {0: 14172, 1: 20120625}, {0: 14172, 1: 20120702}, {0: 14180, 1: 20120709}, {0: 14223, 1: 20120716}, {0: 14250, 1: 20120723}, {0: 14264, 1: 20120730}, {0: 14286, 1: 20120806}, {0: 14331, 1: 20120813}, {0: 14361, 1: 20120820}, {0: 14389, 1: 20120827}, {0: 14389, 1: 20120903}, {0: 14389, 1: 20120910}, {0: 14402, 1: 20120917}, {0: 14438, 1: 20120924}, {0: 14472, 1: 20121001}, {0: 14480, 1: 20121008}, {0: 14513, 1: 20121015}, {0: 14525, 1: 20121022}, {0: 14547, 1: 20121029}, {0: 14585, 1: 20121105}, {0: 14621, 1: 20121112}, {0: 14624, 1: 20121119}, {0: 14612, 1: 20121126}, {0: 14610, 1: 20121203}, {0: 14639, 1: 20121210}, {0: 14633, 1: 20121217}, {0: 14649, 1: 20121224}, {0: 13949, 1: 20121231}, {0: 14648, 1: 20130101}, {0: 13966, 1: 20130107}, {0: 14667, 1: 20130114}, {0: 14667, 1: 20130121}, {0: 14667, 1: 20130128}, {0: 14652, 1: 20130204}, {0: 14651, 1: 20130211}, {0: 14649, 1: 20130218}, {0: 14554, 1: 20130225}, {0: 14695, 1: 20130304}, {0: 14727, 1: 20130311}, {0: 13048, 1: 20130318}, {0: 6790, 1: 20130401}, {0: 14591, 1: 20130408}, {0: 14449, 1: 20130415}, {0: 14451, 1: 20130422}, {0: 14462, 1: 20130429}, {0: 14487, 1: 20130506}, {0: 14516, 1: 20130513}, {0: 14531, 1: 20130520}, {0: 14545, 1: 20130527}, {0: 14545, 1: 20130603}, {0: 14553, 1: 20130610}, {0: 14569, 1: 20130617}, {0: 14650, 1: 20130624}, {0: 14651, 1: 20130708}, {0: 14689, 1: 20130715}, {0: 14751, 1: 20130722}, {0: 14766, 1: 20130729}, {0: 14679, 1: 20130805}, {0: 14599, 1: 20130812}, {0: 14740, 1: 20130819}, {0: 14714, 1: 20130826}, {0: 14796, 1: 20130902}, {0: 14820, 1: 20130909}, {0: 14866, 1: 20130916}, {0: 14878, 1: 20130923}, {0: 14885, 1: 20130930}, {0: 15028, 1: 20131007}, {0: 15072, 1: 20131014}, {0: 15025, 1: 20131021}, {0: 15071, 1: 20131028}, {0: 15098, 1: 20131104}, {0: 15101, 1: 20131111}, {0: 15151, 1: 20131118}, {0: 15337, 1: 20131125}, {0: 15334, 1: 20131202}, {0: 15512, 1: 20131209}, {0: 15540, 1: 20131216}, {0: 15701, 1: 20131223}, {0: 15708, 1: 20131230}, {0: 15703, 1: 20140106}, {0: 15637, 1: 20140113}, {0: 8585, 1: 20140120}, {0: 15646, 1: 20140127}, {0: 15632, 1: 20140203}, {0: 15637, 1: 20140210}, {0: 8565, 1: 20140217}, {0: 15659, 1: 20140224}, {0: 15557, 1: 20150302}, {0: 15578, 1: 20150406}, {0: 15545, 1: 20150413}, {0: 15568, 1: 20150420}, {0: 15475, 1: 20150427}, {0: 15710, 1: 20150511}, {0: 15623, 1: 20150518}, {0: 15741, 1: 20150525}, {0: 15741, 1: 20150608}, {0: 15810, 1: 20150622}, {0: 15761, 1: 20150803}, {0: 15776, 1: 20150810}, {0: 15908, 1: 20150824}, {0: 16184, 1: 20150831}, {0: 15832, 1: 20150914}, {0: 15800, 1: 20150921}, {0: 16178, 1: 20151005}, {0: 16191, 1: 20151012}, {0: 16138, 1: 20151019}, {0: 16293, 1: 20151102}, {0: 4812, 1: 20160111}, {0: 16518, 1: 20160118}, {0: 16629, 1: 20160201}, {0: 16586, 1: 20160208}, {0: 16529, 1: 20160215}, {0: 16454, 1: 20160222}, {0: 16515, 1: 20160229}, {0: 16517, 1: 20160307}, {0: 16446, 1: 20160411}, {0: 16454, 1: 20160418}, {0: 16489, 1: 20160425}, {0: 16388, 1: 20160502}, {0: 16374, 1: 20160509}, {0: 16351, 1: 20160523}, {0: 16361, 1: 20160606}, {0: 16314, 1: 20160620}, {0: 16293, 1: 20160627}, {0: 16325, 1: 20160815}, {0: 16316, 1: 20160919}, {0: 16305, 1: 20160926}, {0: 16233, 1: 20161010}, {0: 16349, 1: 20161031}, {0: 16364, 1: 20161107}, {0: 16249, 1: 20161114}, {0: 16345, 1: 20161121}, {0: 16294, 1: 20161128}, {0: 16336, 1: 20161205}, {0: 16387, 1: 20161212}, {0: 16372, 1: 20170102}, {0: 16406, 1: 20170109}, {0: 16379, 1: 20170116}, {0: 16305, 1: 20170213}, {0: 16207, 1: 20170220}, {0: 16111, 1: 20170306}, {0: 16230, 1: 20170320}, {0: 16270, 1: 20170417}, {0: 16226, 1: 20170424}, {0: 16303, 1: 20170501}, {0: 16124, 1: 20170508}, {0: 16204, 1: 20170515}, {0: 16290, 1: 20170522}, {0: 16649, 1: 20170529}, {0: 16157, 1: 20170612}, {0: 16189, 1: 20170619}, {0: 16184, 1: 20170626}, {0: 16597, 1: 20170703}, {0: 15983, 1: 20170717}, {0: 16138, 1: 20170724}, {0: 16145, 1: 20170731}, {0: 16147, 1: 20170807}, {0: 16268, 1: 20170814}, {0: 16279, 1: 20170821}, {0: 16301, 1: 20170828}, {0: 16161, 1: 20170911}]\nLINQ Results: [{0: 19870119, 1: 0}, {0: 19870126, 1: 0}, {0: 19870202, 1: 0}, {0: 19870209, 1: 0}, {0: 19870302, 1: 0}, {0: 19870330, 1: 0}, {0: 19870406, 1: 0}, {0: 19870413, 1: 0}, {0: 19870420, 1: 0}, {0: 19870427, 1: 0}, {0: 19870504, 1: 0}, {0: 19870511, 1: 0}, {0: 19870518, 1: 0}, {0: 19870525, 1: 0}, {0: 19870601, 1: 0}, {0: 19870608, 1: 0}, {0: 19870615, 1: 0}, {0: 19870622, 1: 0}, {0: 19870629, 1: 0}, {0: 19870706, 1: 0}, {0: 19870713, 1: 0}, {0: 19870720, 1: 0}, {0: 19870727, 1: 0}, {0: 19870803, 1: 0}, {0: 19870810, 1: 0}, {0: 19870817, 1: 0}, {0: 19870824, 1: 0}, {0: 19870831, 1: 0}, {0: 19870907, 1: 0}, {0: 19870914, 1: 0}, {0: 19870921, 1: 0}, {0: 19870928, 1: 0}, {0: 19871005, 1: 0}, {0: 19871012, 1: 0}, {0: 19871019, 1: 0}, {0: 19871026, 1: 0}, {0: 19871102, 1: 0}, {0: 19871109, 1: 0}, {0: 19871116, 1: 0}, {0: 19871123, 1: 0}, {0: 19871130, 1: 0}, {0: 19871207, 1: 0}, {0: 19871214, 1: 0}, {0: 19871221, 1: 0}, {0: 19871228, 1: 0}, {0: 19880101, 1: 0}, {0: 19880104, 1: 0}, {0: 19880111, 1: 0}, {0: 19880118, 1: 0}, {0: 19880125, 1: 0}, {0: 19880201, 1: 0}, {0: 19880208, 1: 0}, {0: 19880215, 1: 0}, {0: 19880222, 1: 0}, {0: 19880229, 1: 0}, {0: 19880307, 1: 0}, {0: 19880314, 1: 0}, {0: 19880321, 1: 0}, {0: 19880328, 1: 0}, {0: 19880404, 1: 0}, {0: 19880411, 1: 0}, {0: 19880418, 1: 0}, {0: 19880425, 1: 0}, {0: 19880502, 1: 0}, {0: 19880509, 1: 0}, {0: 19880516, 1: 0}, {0: 19880523, 1: 0}, {0: 19880530, 1: 0}, {0: 19880606, 1: 0}, {0: 19880613, 1: 0}, {0: 19880620, 1: 0}, {0: 19880627, 1: 0}, {0: 19880704, 1: 0}, {0: 19880711, 1: 0}, {0: 19880718, 1: 0}, {0: 19880725, 1: 0}, {0: 19880801, 1: 0}, {0: 19880808, 1: 0}, {0: 19880815, 1: 0}, {0: 19880822, 1: 0}, {0: 19880829, 1: 0}, {0: 19880905, 1: 0}, {0: 19880912, 1: 0}, {0: 19880919, 1: 0}, {0: 19880926, 1: 0}, {0: 19881003, 1: 0}, {0: 19881010, 1: 0}, {0: 19881017, 1: 0}, {0: 19881024, 1: 0}, {0: 19881031, 1: 0}, {0: 19881107, 1: 0}, {0: 19881114, 1: 0}, {0: 19881121, 1: 29}, {0: 19881128, 1: 29}, {0: 19881205, 1: 29}, {0: 19881212, 1: 29}, {0: 19881219, 1: 29}, {0: 19881226, 1: 29}, {0: 19890101, 1: 28}, {0: 19890102, 1: 29}, {0: 19890109, 1: 29}, {0: 19890116, 1: 29}, {0: 19890123, 1: 29}, {0: 19890130, 1: 29}, {0: 19890206, 1: 29}, {0: 19890213, 1: 0}, {0: 19890220, 1: 0}, {0: 19890227, 1: 0}, {0: 19890306, 1: 0}, {0: 19890313, 1: 29}, {0: 19890320, 1: 29}, {0: 19890327, 1: 0}, {0: 19890403, 1: 0}, {0: 19890410, 1: 29}, {0: 19890417, 1: 29}, {0: 19890424, 1: 29}, {0: 19890501, 1: 29}, {0: 19890508, 1: 29}, {0: 19890515, 1: 29}, {0: 19890522, 1: 29}, {0: 19890529, 1: 29}, {0: 19890605, 1: 29}, {0: 19890612, 1: 29}, {0: 19890619, 1: 29}, {0: 19890626, 1: 29}, {0: 19890703, 1: 29}, {0: 19890710, 1: 29}, {0: 19890717, 1: 29}, {0: 19890724, 1: 29}, {0: 19890731, 1: 29}, {0: 19890807, 1: 29}, {0: 19890814, 1: 29}, {0: 19890821, 1: 29}, {0: 19890828, 1: 29}, {0: 19890904, 1: 29}, {0: 19890911, 1: 29}, {0: 19890918, 1: 29}, {0: 19890925, 1: 29}, {0: 19891002, 1: 29}, {0: 19891009, 1: 29}, {0: 19891016, 1: 29}, {0: 19891023, 1: 29}, {0: 19891030, 1: 29}, {0: 19891106, 1: 29}, {0: 19891113, 1: 29}, {0: 19891120, 1: 29}, {0: 19891127, 1: 29}, {0: 19891204, 1: 29}, {0: 19891211, 1: 29}, {0: 19891218, 1: 29}, {0: 19891225, 1: 29}, {0: 19900101, 1: 28}, {0: 19900108, 1: 29}, {0: 19900115, 1: 29}, {0: 19900122, 1: 29}, {0: 19900129, 1: 29}, {0: 19900205, 1: 29}, {0: 19900212, 1: 29}, {0: 19900219, 1: 29}, {0: 19900226, 1: 29}, {0: 19900305, 1: 29}, {0: 19900312, 1: 29}, {0: 19900319, 1: 29}, {0: 19900326, 1: 29}, {0: 19900402, 1: 29}, {0: 19900409, 1: 29}, {0: 19900416, 1: 29}, {0: 19900423, 1: 29}, {0: 19900430, 1: 29}, {0: 19900507, 1: 29}, {0: 19900514, 1: 29}, {0: 19900521, 1: 29}, {0: 19900528, 1: 29}, {0: 19900604, 1: 29}, {0: 19900611, 1: 29}, {0: 19900618, 1: 30}, {0: 19900625, 1: 30}, {0: 19900702, 1: 30}, {0: 19900709, 1: 30}, {0: 19900716, 1: 30}, {0: 19900723, 1: 30}, {0: 19900730, 1: 30}, {0: 19900806, 1: 30}, {0: 19900813, 1: 30}, {0: 19900820, 1: 30}, {0: 19900827, 1: 30}, {0: 19900903, 1: 30}, {0: 19900910, 1: 30}, {0: 19900917, 1: 30}, {0: 19900924, 1: 30}, {0: 19901001, 1: 30}, {0: 19901008, 1: 30}, {0: 19901015, 1: 30}, {0: 19901022, 1: 30}, {0: 19901029, 1: 30}, {0: 19901105, 1: 30}, {0: 19901112, 1: 30}, {0: 19901119, 1: 30}, {0: 19901126, 1: 30}, {0: 19901203, 1: 30}, {0: 19901210, 1: 30}, {0: 19901217, 1: 30}, {0: 19901224, 1: 30}, {0: 19901231, 1: 30}, {0: 19910101, 1: 29}, {0: 19910107, 1: 30}, {0: 19910114, 1: 30}, {0: 19910121, 1: 30}, {0: 19910128, 1: 30}, {0: 19910204, 1: 30}, {0: 19910211, 1: 30}, {0: 19910218, 1: 30}, {0: 19910225, 1: 30}, {0: 19910304, 1: 30}, {0: 19910311, 1: 29}, {0: 19910318, 1: 29}, {0: 19910325, 1: 29}, {0: 19910401, 1: 29}, {0: 19910408, 1: 29}, {0: 19910415, 1: 29}, {0: 19910422, 1: 29}, {0: 19910429, 1: 29}, {0: 19910506, 1: 29}, {0: 19910513, 1: 29}, {0: 19910520, 1: 29}, {0: 19910527, 1: 29}, {0: 19910603, 1: 29}, {0: 19910610, 1: 29}, {0: 19910617, 1: 29}, {0: 19910624, 1: 29}, {0: 19910701, 1: 29}, {0: 19910708, 1: 30}, {0: 19910715, 1: 29}, {0: 19910722, 1: 29}, {0: 19910729, 1: 29}, {0: 19910805, 1: 29}, {0: 19910812, 1: 29}, {0: 19910819, 1: 29}, {0: 19910826, 1: 30}, {0: 19910902, 1: 30}, {0: 19910909, 1: 30}, {0: 19910916, 1: 30}, {0: 19910923, 1: 30}, {0: 19910930, 1: 30}, {0: 19911007, 1: 31}, {0: 19911014, 1: 31}, {0: 19911021, 1: 31}, {0: 19911028, 1: 31}, {0: 19911104, 1: 44}, {0: 19911111, 1: 44}, {0: 19911118, 1: 44}, {0: 19911125, 1: 44}, {0: 19911202, 1: 31}, {0: 19911209, 1: 44}, {0: 19911216, 1: 45}, {0: 19911223, 1: 45}, {0: 19911230, 1: 45}, {0: 19920101, 1: 44}, {0: 19920106, 1: 45}, {0: 19920113, 1: 45}, {0: 19920120, 1: 45}, {0: 19920127, 1: 45}, {0: 19920203, 1: 45}, {0: 19920210, 1: 29}, {0: 19920217, 1: 45}, {0: 19920224, 1: 45}, {0: 19920302, 1: 45}, {0: 19920309, 1: 45}, {0: 19920316, 1: 45}, {0: 19920323, 1: 45}, {0: 19920330, 1: 45}, {0: 19920406, 1: 45}, {0: 19920413, 1: 45}, {0: 19920420, 1: 45}, {0: 19920427, 1: 45}, {0: 19920504, 1: 45}, {0: 19920511, 1: 45}, {0: 19920518, 1: 45}, {0: 19920525, 1: 45}, {0: 19920601, 1: 45}, {0: 19920608, 1: 45}, {0: 19920615, 1: 45}, {0: 19920622, 1: 45}, {0: 19920629, 1: 45}, {0: 19920706, 1: 45}, {0: 19920713, 1: 46}, {0: 19920720, 1: 46}, {0: 19920727, 1: 45}, {0: 19920803, 1: 73}, {0: 19920810, 1: 73}, {0: 19920817, 1: 73}, {0: 19920824, 1: 119}, {0: 19920831, 1: 90}, {0: 19920907, 1: 90}, {0: 19920914, 1: 90}, {0: 19920921, 1: 90}, {0: 19920928, 1: 90}, {0: 19921005, 1: 62}, {0: 19921012, 1: 62}, {0: 19921019, 1: 62}, {0: 19921026, 1: 62}, {0: 19921102, 1: 62}, {0: 19921109, 1: 62}, {0: 19921116, 1: 62}, {0: 19921123, 1: 62}, {0: 19921130, 1: 62}, {0: 19921207, 1: 62}, {0: 19921214, 1: 62}, {0: 19921221, 1: 62}, {0: 19921228, 1: 45}, {0: 19930101, 1: 44}, {0: 19930104, 1: 45}, {0: 19930111, 1: 45}, {0: 19930118, 1: 45}, {0: 19930125, 1: 45}, {0: 19930201, 1: 45}, {0: 19930208, 1: 32}, {0: 19930215, 1: 45}, {0: 19930222, 1: 45}, {0: 19930301, 1: 45}, {0: 19930308, 1: 45}, {0: 19930315, 1: 45}, {0: 19930322, 1: 45}, {0: 19930329, 1: 45}, {0: 19930405, 1: 45}, {0: 19930412, 1: 62}, {0: 19930419, 1: 62}, {0: 19930426, 1: 62}, {0: 19930503, 1: 62}, {0: 19930510, 1: 62}, {0: 19930517, 1: 44}, {0: 19930524, 1: 44}, {0: 19930531, 1: 44}, {0: 19930607, 1: 44}, {0: 19930614, 1: 44}, {0: 19930621, 1: 44}, {0: 19930628, 1: 44}, {0: 19930705, 1: 62}, {0: 19930712, 1: 62}, {0: 19930719, 1: 62}, {0: 19930726, 1: 62}, {0: 19930802, 1: 43}, {0: 19930809, 1: 43}, {0: 19930816, 1: 43}, {0: 19930823, 1: 43}, {0: 19930830, 1: 43}, {0: 19930906, 1: 43}, {0: 19930913, 1: 43}, {0: 19930920, 1: 76}, {0: 19930927, 1: 75}, {0: 19931004, 1: 58}, {0: 19931011, 1: 58}, {0: 19931018, 1: 58}, {0: 19931025, 1: 58}, {0: 19931101, 1: 58}, {0: 19931108, 1: 58}, {0: 19931115, 1: 75}, {0: 19931122, 1: 75}, {0: 19931129, 1: 75}, {0: 19931206, 1: 75}, {0: 19931213, 1: 75}, {0: 19931220, 1: 75}, {0: 19931227, 1: 75}, {0: 19940101, 1: 73}, {0: 19940103, 1: 75}, {0: 19940110, 1: 75}, {0: 19940117, 1: 75}, {0: 19940124, 1: 75}, {0: 19940131, 1: 62}, {0: 19940207, 1: 63}, {0: 19940214, 1: 63}, {0: 19940221, 1: 63}, {0: 19940228, 1: 62}, {0: 19940307, 1: 62}, {0: 19940314, 1: 62}, {0: 19940321, 1: 62}, {0: 19940328, 1: 61}, {0: 19940404, 1: 62}, {0: 19940411, 1: 61}, {0: 19940418, 1: 44}, {0: 19940425, 1: 57}, {0: 19940502, 1: 57}, {0: 19940509, 1: 57}, {0: 19940516, 1: 57}, {0: 19940523, 1: 57}, {0: 19940530, 1: 57}, {0: 19940606, 1: 65}, {0: 19940613, 1: 65}, {0: 19940620, 1: 65}, {0: 19940627, 1: 65}, {0: 19940704, 1: 67}, {0: 19940711, 1: 67}, {0: 19940718, 1: 60}, {0: 19940725, 1: 60}, {0: 19940801, 1: 60}, {0: 19940808, 1: 60}, {0: 19940815, 1: 60}, {0: 19940822, 1: 60}, {0: 19940829, 1: 60}, {0: 19940905, 1: 60}, {0: 19940912, 1: 68}, {0: 19940919, 1: 68}, {0: 19940926, 1: 69}, {0: 19941003, 1: 69}, {0: 19941010, 1: 69}, {0: 19941017, 1: 69}, {0: 19941024, 1: 59}, {0: 19941031, 1: 59}, {0: 19941107, 1: 69}, {0: 19941114, 1: 69}, {0: 19941121, 1: 69}, {0: 19941128, 1: 69}, {0: 19941205, 1: 69}, {0: 19941212, 1: 69}, {0: 19941219, 1: 69}, {0: 19941226, 1: 69}, {0: 19950101, 1: 69}, {0: 19950102, 1: 69}, {0: 19950109, 1: 69}, {0: 19950116, 1: 69}, {0: 19950123, 1: 69}, {0: 19950130, 1: 69}, {0: 19950206, 1: 69}, {0: 19950213, 1: 69}, {0: 19950220, 1: 69}, {0: 19950227, 1: 69}, {0: 19950306, 1: 69}, {0: 19950313, 1: 69}, {0: 19950320, 1: 69}, {0: 19950327, 1: 69}, {0: 19950403, 1: 69}, {0: 19950410, 1: 69}, {0: 19950417, 1: 69}, {0: 19950424, 1: 69}, {0: 19950501, 1: 69}, {0: 19950508, 1: 69}, {0: 19950515, 1: 69}, {0: 19950522, 1: 69}, {0: 19950529, 1: 69}, {0: 19950605, 1: 69}, {0: 19950612, 1: 96}, {0: 19950619, 1: 96}, {0: 19950626, 1: 96}, {0: 19950703, 1: 96}, {0: 19950710, 1: 97}, {0: 19950717, 1: 118}, {0: 19950724, 1: 118}, {0: 19950731, 1: 118}, {0: 19950807, 1: 118}, {0: 19950814, 1: 118}, {0: 19950821, 1: 131}, {0: 19950828, 1: 131}, {0: 19950904, 1: 131}, {0: 19950911, 1: 131}, {0: 19950918, 1: 131}, {0: 19950925, 1: 131}, {0: 19951002, 1: 131}, {0: 19951009, 1: 131}, {0: 19951016, 1: 131}, {0: 19951023, 1: 131}, {0: 19951030, 1: 131}, {0: 19951106, 1: 131}, {0: 19951113, 1: 138}, {0: 19951120, 1: 138}, {0: 19951127, 1: 138}, {0: 19951204, 1: 138}, {0: 19951211, 1: 138}, {0: 19951218, 1: 138}, {0: 19951225, 1: 138}, {0: 19960101, 1: 138}, {0: 19960108, 1: 125}, {0: 19960115, 1: 125}, {0: 19960122, 1: 125}, {0: 19960129, 1: 125}, {0: 19960205, 1: 125}, {0: 19960212, 1: 125}, {0: 19960219, 1: 125}, {0: 19960226, 1: 147}, {0: 19960304, 1: 147}, {0: 19960311, 1: 147}, {0: 19960318, 1: 147}, {0: 19960325, 1: 147}, {0: 19960401, 1: 147}, {0: 19960408, 1: 147}, {0: 19960415, 1: 147}, {0: 19960422, 1: 147}, {0: 19960429, 1: 147}, {0: 19960506, 1: 147}, {0: 19960513, 1: 147}, {0: 19960520, 1: 147}, {0: 19960527, 1: 147}, {0: 19960603, 1: 147}, {0: 19960610, 1: 147}, {0: 19960617, 1: 147}, {0: 19960624, 1: 147}, {0: 19960701, 1: 147}, {0: 19960708, 1: 171}, {0: 19960715, 1: 171}, {0: 19960722, 1: 171}, {0: 19960729, 1: 171}, {0: 19960805, 1: 171}, {0: 19960812, 1: 171}, {0: 19960819, 1: 171}, {0: 19960826, 1: 171}, {0: 19960902, 1: 171}, {0: 19960909, 1: 194}, {0: 19960916, 1: 172}, {0: 19960923, 1: 172}, {0: 19960930, 1: 172}, {0: 19961007, 1: 172}, {0: 19961014, 1: 175}, {0: 19961021, 1: 175}, {0: 19961028, 1: 191}, {0: 19961104, 1: 191}, {0: 19961111, 1: 213}, {0: 19961118, 1: 213}, {0: 19961125, 1: 213}, {0: 19961202, 1: 213}, {0: 19961209, 1: 213}, {0: 19961216, 1: 213}, {0: 19961223, 1: 185}, {0: 19961230, 1: 185}, {0: 19970101, 1: 185}, {0: 19970106, 1: 185}, {0: 19970113, 1: 185}, {0: 19970120, 1: 185}, {0: 19970127, 1: 209}, {0: 19970203, 1: 209}, {0: 19970210, 1: 209}, {0: 19970217, 1: 209}, {0: 19970224, 1: 223}, {0: 19970303, 1: 223}, {0: 19970310, 1: 223}, {0: 19970317, 1: 223}, {0: 19970324, 1: 223}, {0: 19970331, 1: 223}, {0: 19970407, 1: 223}, {0: 19970414, 1: 225}, {0: 19970421, 1: 225}, {0: 19970428, 1: 225}, {0: 19970505, 1: 225}, {0: 19970512, 1: 225}, {0: 19970519, 1: 225}, {0: 19970526, 1: 225}, {0: 19970602, 1: 225}, {0: 19970609, 1: 225}, {0: 19970616, 1: 225}, {0: 19970623, 1: 225}, {0: 19970630, 1: 225}, {0: 19970707, 1: 164}, {0: 19970714, 1: 257}, {0: 19970721, 1: 257}, {0: 19970728, 1: 257}, {0: 19970804, 1: 273}, {0: 19970811, 1: 273}, {0: 19970818, 1: 273}, {0: 19970825, 1: 273}, {0: 19970901, 1: 273}, {0: 19970908, 1: 273}, {0: 19970915, 1: 273}, {0: 19970922, 1: 273}, {0: 19970929, 1: 273}, {0: 19971006, 1: 273}, {0: 19971013, 1: 299}, {0: 19971020, 1: 314}, {0: 19971027, 1: 314}, {0: 19971103, 1: 337}, {0: 19971110, 1: 337}, {0: 19971117, 1: 363}, {0: 19971124, 1: 363}, {0: 19971201, 1: 363}, {0: 19971208, 1: 394}, {0: 19971215, 1: 394}, {0: 19971222, 1: 394}, {0: 19971229, 1: 394}, {0: 19980101, 1: 394}, {0: 19980105, 1: 394}, {0: 19980112, 1: 394}, {0: 19980119, 1: 394}, {0: 19980126, 1: 394}, {0: 19980202, 1: 394}, {0: 19980209, 1: 394}, {0: 19980216, 1: 394}, {0: 19980223, 1: 394}, {0: 19980302, 1: 394}, {0: 19980309, 1: 394}, {0: 19980316, 1: 394}, {0: 19980323, 1: 394}, {0: 19980330, 1: 426}, {0: 19980406, 1: 426}, {0: 19980413, 1: 459}, {0: 19980420, 1: 459}, {0: 19980427, 1: 459}, {0: 19980504, 1: 459}, {0: 19980511, 1: 459}, {0: 19980518, 1: 459}, {0: 19980525, 1: 459}, {0: 19980601, 1: 459}, {0: 19980608, 1: 543}, {0: 19980615, 1: 569}, {0: 19980622, 1: 590}, {0: 19980629, 1: 590}, {0: 19980706, 1: 633}, {0: 19980713, 1: 633}, {0: 19980720, 1: 633}, {0: 19980727, 1: 634}, {0: 19980803, 1: 634}, {0: 19980810, 1: 634}, {0: 19980817, 1: 631}, {0: 19980824, 1: 631}, {0: 19980831, 1: 660}, {0: 19980907, 1: 660}, {0: 19980914, 1: 663}, {0: 19980921, 1: 663}, {0: 19980928, 1: 683}, {0: 19981005, 1: 688}, {0: 19981012, 1: 688}, {0: 19981019, 1: 696}, {0: 19981026, 1: 693}, {0: 19981102, 1: 693}, {0: 19981109, 1: 692}, {0: 19981116, 1: 692}, {0: 19981123, 1: 692}, {0: 19981130, 1: 709}, {0: 19981207, 1: 703}, {0: 19981214, 1: 703}, {0: 19981221, 1: 703}, {0: 19981228, 1: 703}, {0: 19990101, 1: 703}, {0: 19990104, 1: 722}, {0: 19990111, 1: 722}, {0: 19990118, 1: 722}, {0: 19990125, 1: 722}, {0: 19990201, 1: 728}, {0: 19990208, 1: 723}, {0: 19990215, 1: 723}, {0: 19990222, 1: 723}, {0: 19990301, 1: 723}, {0: 19990308, 1: 723}, {0: 19990315, 1: 728}, {0: 19990322, 1: 728}, {0: 19990329, 1: 728}, {0: 19990405, 1: 728}, {0: 19990412, 1: 728}, {0: 19990419, 1: 728}, {0: 19990426, 1: 752}, {0: 19990503, 1: 761}, {0: 19990510, 1: 761}, {0: 19990517, 1: 777}, {0: 19990524, 1: 777}, {0: 19990531, 1: 777}, {0: 19990607, 1: 804}, {0: 19990614, 1: 804}, {0: 19990621, 1: 804}, {0: 19990628, 1: 804}, {0: 19990705, 1: 804}, {0: 19990712, 1: 829}, {0: 19990719, 1: 829}, {0: 19990726, 1: 829}, {0: 19990802, 1: 829}, {0: 19990809, 1: 870}, {0: 19990816, 1: 873}, {0: 19990823, 1: 853}, {0: 19990830, 1: 861}, {0: 19990906, 1: 861}, {0: 19990913, 1: 879}, {0: 19990920, 1: 879}, {0: 19990927, 1: 899}, {0: 19991004, 1: 927}, {0: 19991011, 1: 941}, {0: 19991018, 1: 964}, {0: 19991025, 1: 941}, {0: 19991101, 1: 941}, {0: 19991108, 1: 941}, {0: 19991115, 1: 941}, {0: 19991122, 1: 941}, {0: 19991129, 1: 966}, {0: 19991206, 1: 966}, {0: 19991213, 1: 989}, {0: 19991220, 1: 989}, {0: 19991227, 1: 989}, {0: 20000101, 1: 989}, {0: 20000103, 1: 989}, {0: 20000110, 1: 989}, {0: 20000117, 1: 989}, {0: 20000124, 1: 989}, {0: 20000131, 1: 1013}, {0: 20000207, 1: 1038}, {0: 20000214, 1: 1038}, {0: 20000221, 1: 1038}, {0: 20000228, 1: 1038}, {0: 20000306, 1: 1065}, {0: 20000313, 1: 1065}, {0: 20000320, 1: 1065}, {0: 20000327, 1: 1065}, {0: 20000403, 1: 1065}, {0: 20000410, 1: 1093}, {0: 20000417, 1: 1093}, {0: 20000424, 1: 1093}, {0: 20000501, 1: 1122}, {0: 20000508, 1: 1122}, {0: 20000515, 1: 1106}, {0: 20000522, 1: 1106}, {0: 20000529, 1: 1106}, {0: 20000605, 1: 1106}, {0: 20000612, 1: 1160}, {0: 20000619, 1: 1160}, {0: 20000626, 1: 1188}, {0: 20000703, 1: 1188}, {0: 20000710, 1: 1204}, {0: 20000717, 1: 1205}, {0: 20000724, 1: 1212}, {0: 20000731, 1: 1276}, {0: 20000807, 1: 1276}, {0: 20000814, 1: 1224}, {0: 20000821, 1: 1224}, {0: 20000828, 1: 1224}, {0: 20000904, 1: 1224}, {0: 20000911, 1: 1241}, {0: 20000918, 1: 1265}, {0: 20000925, 1: 1231}, {0: 20001002, 1: 1223}, {0: 20001009, 1: 1232}, {0: 20001016, 1: 1253}, {0: 20001023, 1: 1245}, {0: 20001030, 1: 1247}, {0: 20001106, 1: 1173}, {0: 20001113, 1: 964}, {0: 20001120, 1: 961}, {0: 20001127, 1: 961}, {0: 20001204, 1: 961}, {0: 20001211, 1: 964}, {0: 20001218, 1: 964}, {0: 20001225, 1: 964}, {0: 20010101, 1: 964}, {0: 20010108, 1: 964}, {0: 20010115, 1: 964}, {0: 20010122, 1: 964}, {0: 20010129, 1: 977}, {0: 20010205, 1: 977}, {0: 20010212, 1: 1004}, {0: 20010219, 1: 1027}, {0: 20010226, 1: 1027}, {0: 20010305, 1: 1027}, {0: 20010312, 1: 1027}, {0: 20010319, 1: 1101}, {0: 20010326, 1: 1101}, {0: 20010402, 1: 914}, {0: 20010409, 1: 930}, {0: 20010416, 1: 952}, {0: 20010423, 1: 961}, {0: 20010430, 1: 988}, {0: 20010507, 1: 1011}, {0: 20010514, 1: 1011}, {0: 20010521, 1: 1029}, {0: 20010528, 1: 1067}, {0: 20010604, 1: 1067}, {0: 20010611, 1: 1094}, {0: 20010618, 1: 1094}, {0: 20010625, 1: 1073}, {0: 20010702, 1: 1073}, {0: 20010709, 1: 1113}, {0: 20010716, 1: 1135}, {0: 20010723, 1: 1149}, {0: 20010730, 1: 1149}, {0: 20010806, 1: 1175}, {0: 20010813, 1: 1175}, {0: 20010820, 1: 1175}, {0: 20010827, 1: 1201}, {0: 20010903, 1: 1201}, {0: 20010910, 1: 1228}, {0: 20010917, 1: 1231}, {0: 20010924, 1: 1263}, {0: 20011001, 1: 1287}, {0: 20011008, 1: 1267}, {0: 20011015, 1: 1288}, {0: 20011022, 1: 1291}, {0: 20011029, 1: 1312}, {0: 20011105, 1: 1312}, {0: 20011112, 1: 1412}, {0: 20011119, 1: 1412}, {0: 20011126, 1: 1437}, {0: 20011203, 1: 1437}, {0: 20011210, 1: 1437}, {0: 20011217, 1: 1430}, {0: 20011224, 1: 1430}, {0: 20011231, 1: 1430}, {0: 20020101, 1: 1430}, {0: 20020107, 1: 1430}, {0: 20020114, 1: 1430}, {0: 20020121, 1: 1430}, {0: 20020128, 1: 1430}, {0: 20020204, 1: 1422}, {0: 20020211, 1: 1422}, {0: 20020218, 1: 1422}, {0: 20020225, 1: 1424}, {0: 20020304, 1: 1424}, {0: 20020311, 1: 1424}, {0: 20020318, 1: 1448}, {0: 20020325, 1: 1448}, {0: 20020401, 1: 1573}, {0: 20020408, 1: 1574}, {0: 20020415, 1: 1574}, {0: 20020422, 1: 1574}, {0: 20020429, 1: 1577}, {0: 20020506, 1: 1730}, {0: 20020513, 1: 1577}, {0: 20020520, 1: 1577}, {0: 20020527, 1: 1577}, {0: 20020603, 1: 1577}, {0: 20020610, 1: 1783}, {0: 20020617, 1: 1803}, {0: 20020624, 1: 1783}, {0: 20020701, 1: 1783}, {0: 20020708, 1: 1834}, {0: 20020715, 1: 1835}, {0: 20020722, 1: 1828}, {0: 20020729, 1: 1853}, {0: 20020805, 1: 1853}, {0: 20020812, 1: 1925}, {0: 20020819, 1: 1915}, {0: 20020826, 1: 2111}, {0: 20020902, 1: 2111}, {0: 20020909, 1: 2451}, {0: 20020916, 1: 2457}, {0: 20020923, 1: 2462}, {0: 20020930, 1: 2496}, {0: 20021007, 1: 2526}, {0: 20021014, 1: 2520}, {0: 20021021, 1: 2505}, {0: 20021028, 1: 2505}, {0: 20021104, 1: 2498}, {0: 20021111, 1: 2497}, {0: 20021118, 1: 2497}, {0: 20021125, 1: 2497}, {0: 20021202, 1: 2497}, {0: 20021209, 1: 2497}, {0: 20021216, 1: 2497}, {0: 20021223, 1: 2497}, {0: 20021230, 1: 2497}, {0: 20030101, 1: 2497}, {0: 20030106, 1: 2497}, {0: 20030113, 1: 2497}, {0: 20030120, 1: 2497}, {0: 20030127, 1: 2497}, {0: 20030203, 1: 2517}, {0: 20030210, 1: 2507}, {0: 20030217, 1: 2490}, {0: 20030224, 1: 2528}, {0: 20030303, 1: 2549}, {0: 20030310, 1: 2549}, {0: 20030317, 1: 2571}, {0: 20030324, 1: 2571}, {0: 20030331, 1: 2614}, {0: 20030407, 1: 2587}, {0: 20030414, 1: 2587}, {0: 20030421, 1: 2608}, {0: 20030428, 1: 2719}, {0: 20030505, 1: 2652}, {0: 20030512, 1: 2671}, {0: 20030519, 1: 2728}, {0: 20030526, 1: 1860}, {0: 20030602, 1: 2728}, {0: 20030609, 1: 2753}, {0: 20030616, 1: 2753}, {0: 20030623, 1: 2731}, {0: 20030630, 1: 2731}, {0: 20030707, 1: 2730}, {0: 20030714, 1: 2755}, {0: 20030721, 1: 2759}, {0: 20030728, 1: 2777}, {0: 20030804, 1: 2732}, {0: 20030811, 1: 2734}, {0: 20030818, 1: 2755}, {0: 20030825, 1: 2801}, {0: 20030901, 1: 2801}, {0: 20030908, 1: 2798}, {0: 20030915, 1: 2847}, {0: 20030922, 1: 2862}, {0: 20030929, 1: 2930}, {0: 20031006, 1: 2961}, {0: 20031013, 1: 2966}, {0: 20031020, 1: 3035}, {0: 20031027, 1: 3020}, {0: 20031103, 1: 3038}, {0: 20031110, 1: 3052}, {0: 20031117, 1: 3065}, {0: 20031124, 1: 3092}, {0: 20031201, 1: 3120}, {0: 20031208, 1: 3190}, {0: 20031215, 1: 3211}, {0: 20031222, 1: 3211}, {0: 20031229, 1: 3214}, {0: 20040101, 1: 3214}, {0: 20040105, 1: 3206}, {0: 20040112, 1: 3206}, {0: 20040119, 1: 3206}, {0: 20040126, 1: 3206}, {0: 20040202, 1: 3257}, {0: 20040209, 1: 3265}, {0: 20040216, 1: 3282}, {0: 20040223, 1: 3282}, {0: 20040301, 1: 3279}, {0: 20040308, 1: 3286}, {0: 20040315, 1: 3286}, {0: 20040322, 1: 3286}, {0: 20040329, 1: 3286}, {0: 20040405, 1: 3277}, {0: 20040412, 1: 3286}, {0: 20040419, 1: 1489}, {0: 20040426, 1: 3379}, {0: 20040503, 1: 2613}, {0: 20040510, 1: 1187}, {0: 20040517, 1: 2361}, {0: 20040524, 1: 2955}, {0: 20040531, 1: 2535}, {0: 20040607, 1: 3433}, {0: 20040614, 1: 3456}, {0: 20040621, 1: 3492}, {0: 20040628, 1: 3492}, {0: 20040705, 1: 3498}, {0: 20040712, 1: 3516}, {0: 20040719, 1: 3587}, {0: 20040726, 1: 3592}, {0: 20040802, 1: 3592}, {0: 20040809, 1: 3645}, {0: 20040816, 1: 3647}, {0: 20040823, 1: 3661}, {0: 20040830, 1: 3705}, {0: 20040906, 1: 3705}, {0: 20040913, 1: 3785}, {0: 20040920, 1: 3831}, {0: 20040927, 1: 3913}, {0: 20041004, 1: 3957}, {0: 20041011, 1: 3986}, {0: 20041018, 1: 3987}, {0: 20041025, 1: 3968}, {0: 20041101, 1: 4011}, {0: 20041108, 1: 4071}, {0: 20041115, 1: 4124}, {0: 20041122, 1: 4145}, {0: 20041129, 1: 4147}, {0: 20041206, 1: 4160}, {0: 20041213, 1: 4160}, {0: 20041220, 1: 4160}, {0: 20041227, 1: 4160}, {0: 20050101, 1: 4160}, {0: 20050103, 1: 4160}, {0: 20050110, 1: 4160}, {0: 20050117, 1: 4160}, {0: 20050124, 1: 4160}, {0: 20050131, 1: 4198}, {0: 20050207, 1: 4198}, {0: 20050214, 1: 4211}, {0: 20050221, 1: 4286}, {0: 20050228, 1: 4286}, {0: 20050307, 1: 4313}, {0: 20050314, 1: 4313}, {0: 20050321, 1: 4333}, {0: 20050328, 1: 4333}, {0: 20050404, 1: 4362}, {0: 20050411, 1: 4371}, {0: 20050418, 1: 4379}, {0: 20050425, 1: 4379}, {0: 20050502, 1: 4379}, {0: 20050509, 1: 4470}, {0: 20050516, 1: 4489}, {0: 20050523, 1: 4522}, {0: 20050530, 1: 4522}, {0: 20050606, 1: 4682}, {0: 20050613, 1: 4705}, {0: 20050620, 1: 4727}, {0: 20050627, 1: 4727}, {0: 20050704, 1: 4792}, {0: 20050711, 1: 4816}, {0: 20050718, 1: 4847}, {0: 20050725, 1: 4859}, {0: 20050801, 1: 4926}, {0: 20050808, 1: 4982}, {0: 20050815, 1: 5020}, {0: 20050822, 1: 5090}, {0: 20050829, 1: 5100}, {0: 20050905, 1: 5100}, {0: 20050912, 1: 5187}, {0: 20050919, 1: 5173}, {0: 20050926, 1: 5175}, {0: 20051003, 1: 5215}, {0: 20051010, 1: 5249}, {0: 20051017, 1: 5237}, {0: 20051024, 1: 5257}, {0: 20051031, 1: 5331}, {0: 20051107, 1: 5362}, {0: 20051114, 1: 5357}, {0: 20051121, 1: 5391}, {0: 20051128, 1: 5401}, {0: 20051205, 1: 5452}, {0: 20051212, 1: 5452}, {0: 20051219, 1: 5452}, {0: 20051226, 1: 5452}, {0: 20060101, 1: 5452}, {0: 20060102, 1: 5452}, {0: 20060109, 1: 5452}, {0: 20060116, 1: 5452}, {0: 20060123, 1: 5452}, {0: 20060130, 1: 5441}, {0: 20060206, 1: 5425}, {0: 20060213, 1: 5441}, {0: 20060220, 1: 5478}, {0: 20060227, 1: 5528}, {0: 20060306, 1: 5548}, {0: 20060313, 1: 5548}, {0: 20060320, 1: 5559}, {0: 20060327, 1: 5559}, {0: 20060403, 1: 5626}, {0: 20060410, 1: 5626}, {0: 20060417, 1: 5644}, {0: 20060424, 1: 5658}, {0: 20060501, 1: 5656}, {0: 20060508, 1: 5654}, {0: 20060515, 1: 5683}, {0: 20060522, 1: 5721}, {0: 20060529, 1: 5798}, {0: 20060605, 1: 5798}, {0: 20060612, 1: 5862}, {0: 20060619, 1: 5897}, {0: 20060626, 1: 5944}, {0: 20060703, 1: 5944}, {0: 20060710, 1: 5983}, {0: 20060717, 1: 6026}, {0: 20060724, 1: 6065}, {0: 20060731, 1: 6133}, {0: 20060807, 1: 6151}, {0: 20060814, 1: 6226}, {0: 20060821, 1: 6289}, {0: 20060828, 1: 6284}, {0: 20060904, 1: 6284}, {0: 20060911, 1: 6304}, {0: 20060918, 1: 6347}, {0: 20060925, 1: 6376}, {0: 20061002, 1: 6436}, {0: 20061009, 1: 6520}, {0: 20061016, 1: 6629}, {0: 20061023, 1: 6730}, {0: 20061030, 1: 6808}, {0: 20061106, 1: 6816}, {0: 20061113, 1: 6807}, {0: 20061120, 1: 6893}, {0: 20061127, 1: 6896}, {0: 20061204, 1: 6931}, {0: 20061211, 1: 6953}, {0: 20061218, 1: 6953}, {0: 20061225, 1: 6953}, {0: 20070101, 1: 6953}, {0: 20070108, 1: 6926}, {0: 20070115, 1: 6926}, {0: 20070122, 1: 6926}, {0: 20070129, 1: 6925}, {0: 20070205, 1: 6925}, {0: 20070212, 1: 6930}, {0: 20070219, 1: 6942}, {0: 20070226, 1: 6988}, {0: 20070305, 1: 7017}, {0: 20070312, 1: 7017}, {0: 20070319, 1: 7058}, {0: 20070326, 1: 7058}, {0: 20070402, 1: 7139}, {0: 20070409, 1: 7175}, {0: 20070416, 1: 7197}, {0: 20070423, 1: 7197}, {0: 20070430, 1: 7197}, {0: 20070507, 1: 7233}, {0: 20070514, 1: 7317}, {0: 20070521, 1: 7341}, {0: 20070528, 1: 7365}, {0: 20070604, 1: 7365}, {0: 20070611, 1: 7448}, {0: 20070618, 1: 7448}, {0: 20070625, 1: 7473}, {0: 20070702, 1: 7473}, {0: 20070709, 1: 7495}, {0: 20070716, 1: 7478}, {0: 20070723, 1: 7470}, {0: 20070730, 1: 7528}, {0: 20070806, 1: 7522}, {0: 20070813, 1: 7527}, {0: 20070820, 1: 7503}, {0: 20070827, 1: 7504}, {0: 20070903, 1: 7504}, {0: 20070910, 1: 7602}, {0: 20070917, 1: 7643}, {0: 20070924, 1: 7686}, {0: 20071001, 1: 7697}, {0: 20071008, 1: 7707}, {0: 20071015, 1: 7687}, {0: 20071022, 1: 7638}, {0: 20071029, 1: 7711}, {0: 20071105, 1: 7677}, {0: 20071112, 1: 7664}, {0: 20071119, 1: 7666}, {0: 20071126, 1: 7674}, {0: 20071203, 1: 7650}, {0: 20071210, 1: 7659}, {0: 20071217, 1: 7659}, {0: 20071224, 1: 7682}, {0: 20071231, 1: 7682}, {0: 20080101, 1: 7682}, {0: 20080107, 1: 7682}, {0: 20080114, 1: 7711}, {0: 20080121, 1: 7711}, {0: 20080128, 1: 7691}, {0: 20080204, 1: 7716}, {0: 20080211, 1: 7743}, {0: 20080218, 1: 7742}, {0: 20080225, 1: 7731}, {0: 20080303, 1: 7761}, {0: 20080310, 1: 7790}, {0: 20080317, 1: 7790}, {0: 20080324, 1: 7832}, {0: 20080331, 1: 7832}, {0: 20080407, 1: 7873}, {0: 20080414, 1: 7889}, {0: 20080421, 1: 7917}, {0: 20080428, 1: 7917}, {0: 20080505, 1: 7929}, {0: 20080512, 1: 8002}, {0: 20080519, 1: 8022}, {0: 20080526, 1: 8090}, {0: 20080602, 1: 8090}, {0: 20080609, 1: 8030}, {0: 20080616, 1: 7970}, {0: 20080623, 1: 7966}, {0: 20080630, 1: 7966}, {0: 20080707, 1: 8089}, {0: 20080714, 1: 8113}, {0: 20080721, 1: 8235}, {0: 20080728, 1: 8280}, {0: 20080804, 1: 8325}, {0: 20080811, 1: 8372}, {0: 20080818, 1: 8387}, {0: 20080825, 1: 8417}, {0: 20080901, 1: 8417}, {0: 20080908, 1: 8527}, {0: 20080915, 1: 8639}, {0: 20080922, 1: 8690}, {0: 20080929, 1: 8731}, {0: 20081006, 1: 8762}, {0: 20081013, 1: 8794}, {0: 20081020, 1: 8836}, {0: 20081027, 1: 8898}, {0: 20081103, 1: 8956}, {0: 20081110, 1: 8996}, {0: 20081117, 1: 9003}, {0: 20081124, 1: 9019}, {0: 20081201, 1: 9050}, {0: 20081208, 1: 9076}, {0: 20081215, 1: 9077}, {0: 20081222, 1: 9070}, {0: 20081229, 1: 9070}, {0: 20090101, 1: 9070}, {0: 20090105, 1: 9064}, {0: 20090112, 1: 9064}, {0: 20090119, 1: 9064}, {0: 20090126, 1: 9064}, {0: 20090202, 1: 9087}, {0: 20090209, 1: 9087}, {0: 20090216, 1: 9059}, {0: 20090223, 1: 9063}, {0: 20090302, 1: 9063}, {0: 20090309, 1: 9053}, {0: 20090316, 1: 9053}, {0: 20090323, 1: 9057}, {0: 20090330, 1: 9057}, {0: 20090406, 1: 9066}, {0: 20090413, 1: 9121}, {0: 20090420, 1: 9110}, {0: 20090427, 1: 9111}, {0: 20090504, 1: 9094}, {0: 20090511, 1: 9143}, {0: 20090518, 1: 9140}, {0: 20090525, 1: 9153}, {0: 20090601, 1: 9153}, {0: 20090608, 1: 9203}, {0: 20090615, 1: 9239}, {0: 20090622, 1: 9255}, {0: 20090629, 1: 9255}, {0: 20090706, 1: 9310}, {0: 20090713, 1: 9376}, {0: 20090720, 1: 9474}, {0: 20090727, 1: 9589}, {0: 20090803, 1: 9611}, {0: 20090810, 1: 9598}, {0: 20090817, 1: 9642}, {0: 20090824, 1: 9682}, {0: 20090831, 1: 9682}, {0: 20090907, 1: 9682}, {0: 20090914, 1: 9808}, {0: 20090921, 1: 9856}, {0: 20090928, 1: 9918}, {0: 20091005, 1: 9929}, {0: 20091012, 1: 9925}, {0: 20091019, 1: 10003}, {0: 20091026, 1: 10025}, {0: 20091102, 1: 10061}, {0: 20091109, 1: 10116}, {0: 20091116, 1: 10137}, {0: 20091123, 1: 10204}, {0: 20091130, 1: 10238}, {0: 20091207, 1: 10221}, {0: 20091214, 1: 10272}, {0: 20091221, 1: 10272}, {0: 20091228, 1: 10318}, {0: 20100101, 1: 10318}, {0: 20100104, 1: 10318}, {0: 20100111, 1: 10320}, {0: 20100118, 1: 10329}, {0: 20100125, 1: 10329}, {0: 20100201, 1: 10373}, {0: 20100208, 1: 10372}, {0: 20100215, 1: 10389}, {0: 20100222, 1: 10404}, {0: 20100301, 1: 10430}, {0: 20100308, 1: 10442}, {0: 20100315, 1: 10442}, {0: 20100322, 1: 10412}, {0: 20100329, 1: 10412}, {0: 20100405, 1: 10481}, {0: 20100412, 1: 10515}, {0: 20100419, 1: 10543}, {0: 20100426, 1: 10580}, {0: 20100503, 1: 10590}, {0: 20100510, 1: 10576}, {0: 20100517, 1: 10593}, {0: 20100524, 1: 10634}, {0: 20100531, 1: 10634}, {0: 20100607, 1: 10613}, {0: 20100614, 1: 10630}, {0: 20100621, 1: 10634}, {0: 20100628, 1: 10634}, {0: 20100705, 1: 10685}, {0: 20100712, 1: 10726}, {0: 20100719, 1: 10756}, {0: 20100726, 1: 10817}, {0: 20100802, 1: 10835}, {0: 20100809, 1: 10937}, {0: 20100816, 1: 10999}, {0: 20100823, 1: 11026}, {0: 20100830, 1: 11125}, {0: 20100906, 1: 11125}, {0: 20100913, 1: 11256}, {0: 20100920, 1: 11290}, {0: 20100927, 1: 11339}, {0: 20101004, 1: 11460}, {0: 20101011, 1: 11566}, {0: 20101018, 1: 11594}, {0: 20101025, 1: 11617}, {0: 20101101, 1: 11687}, {0: 20101108, 1: 11735}, {0: 20101115, 1: 11814}, {0: 20101122, 1: 11845}, {0: 20101129, 1: 11877}, {0: 20101206, 1: 11888}, {0: 20101213, 1: 11907}, {0: 20101220, 1: 11913}, {0: 20101227, 1: 11904}, {0: 20110101, 1: 11904}, {0: 20110103, 1: 12060}, {0: 20110110, 1: 12067}, {0: 20110117, 1: 12094}, {0: 20110124, 1: 12094}, {0: 20110131, 1: 12143}, {0: 20110207, 1: 12181}, {0: 20110214, 1: 12204}, {0: 20110221, 1: 12201}, {0: 20110228, 1: 12254}, {0: 20110307, 1: 12267}, {0: 20110314, 1: 12267}, {0: 20110321, 1: 12303}, {0: 20110328, 1: 12303}, {0: 20110404, 1: 12343}, {0: 20110411, 1: 12398}, {0: 20110418, 1: 12434}, {0: 20110425, 1: 12422}, {0: 20110502, 1: 12438}, {0: 20110509, 1: 12482}, {0: 20110516, 1: 12467}, {0: 20110523, 1: 12522}, {0: 20110530, 1: 12522}, {0: 20110606, 1: 12659}, {0: 20110613, 1: 12682}, {0: 20110620, 1: 12686}, {0: 20110627, 1: 12686}, {0: 20110704, 1: 12867}, {0: 20110711, 1: 12895}, {0: 20110718, 1: 12927}, {0: 20110725, 1: 13006}, {0: 20110801, 1: 12999}, {0: 20110808, 1: 13081}, {0: 20110815, 1: 13129}, {0: 20110822, 1: 13140}, {0: 20110829, 1: 13174}, {0: 20110905, 1: 13174}, {0: 20110912, 1: 13299}, {0: 20110919, 1: 13342}, {0: 20110926, 1: 13382}, {0: 20111003, 1: 13372}, {0: 20111010, 1: 13382}, {0: 20111017, 1: 13411}, {0: 20111024, 1: 13443}, {0: 20111031, 1: 13465}, {0: 20111107, 1: 13443}, {0: 20111114, 1: 13482}, {0: 20111121, 1: 13518}, {0: 20111128, 1: 13517}, {0: 20111205, 1: 13542}, {0: 20111212, 1: 13536}, {0: 20111219, 1: 13565}, {0: 20111226, 1: 13603}, {0: 20120101, 1: 13603}, {0: 20120102, 1: 13610}, {0: 20120109, 1: 13628}, {0: 20120116, 1: 13618}, {0: 20120123, 1: 13618}, {0: 20120130, 1: 13667}, {0: 20120206, 1: 13666}, {0: 20120213, 1: 13674}, {0: 20120220, 1: 13719}, {0: 20120227, 1: 13788}, {0: 20120305, 1: 13791}, {0: 20120312, 1: 13791}, {0: 20120319, 1: 13818}, {0: 20120326, 1: 13818}, {0: 20120402, 1: 13881}, {0: 20120409, 1: 13902}, {0: 20120416, 1: 13938}, {0: 20120423, 1: 13964}, {0: 20120430, 1: 13983}, {0: 20120507, 1: 14016}, {0: 20120514, 1: 14015}, {0: 20120521, 1: 14034}, {0: 20120528, 1: 14087}, {0: 20120604, 1: 14087}, {0: 20120611, 1: 14072}, {0: 20120618, 1: 14138}, {0: 20120625, 1: 14172}, {0: 20120702, 1: 14172}, {0: 20120709, 1: 14180}, {0: 20120716, 1: 14223}, {0: 20120723, 1: 14250}, {0: 20120730, 1: 14264}, {0: 20120806, 1: 14286}, {0: 20120813, 1: 14331}, {0: 20120820, 1: 14361}, {0: 20120827, 1: 14389}, {0: 20120903, 1: 14389}, {0: 20120910, 1: 14389}, {0: 20120917, 1: 14402}, {0: 20120924, 1: 14438}, {0: 20121001, 1: 14472}, {0: 20121008, 1: 14480}, {0: 20121015, 1: 14513}, {0: 20121022, 1: 14525}, {0: 20121029, 1: 14547}, {0: 20121105, 1: 14585}, {0: 20121112, 1: 14621}, {0: 20121119, 1: 14624}, {0: 20121126, 1: 14612}, {0: 20121203, 1: 14610}, {0: 20121210, 1: 14639}, {0: 20121217, 1: 14633}, {0: 20121224, 1: 14649}, {0: 20121231, 1: 13949}, {0: 20130101, 1: 14648}, {0: 20130107, 1: 13966}, {0: 20130114, 1: 14667}, {0: 20130121, 1: 14667}, {0: 20130128, 1: 14667}, {0: 20130204, 1: 14652}, {0: 20130211, 1: 14651}, {0: 20130218, 1: 14649}, {0: 20130225, 1: 14554}, {0: 20130304, 1: 14695}, {0: 20130311, 1: 14727}, {0: 20130318, 1: 13048}, {0: 20130401, 1: 6790}, {0: 20130408, 1: 14591}, {0: 20130415, 1: 14449}, {0: 20130422, 1: 14451}, {0: 20130429, 1: 14462}, {0: 20130506, 1: 14487}, {0: 20130513, 1: 14516}, {0: 20130520, 1: 14531}, {0: 20130527, 1: 14545}, {0: 20130603, 1: 14545}, {0: 20130610, 1: 14553}, {0: 20130617, 1: 14569}, {0: 20130624, 1: 14650}, {0: 20130708, 1: 14651}, {0: 20130715, 1: 14689}, {0: 20130722, 1: 14751}, {0: 20130729, 1: 14766}, {0: 20130805, 1: 14679}, {0: 20130812, 1: 14599}, {0: 20130819, 1: 14740}, {0: 20130826, 1: 14714}, {0: 20130902, 1: 14796}, {0: 20130909, 1: 14820}, {0: 20130916, 1: 14866}, {0: 20130923, 1: 14878}, {0: 20130930, 1: 14885}, {0: 20131007, 1: 15028}, {0: 20131014, 1: 15072}, {0: 20131021, 1: 15025}, {0: 20131028, 1: 15071}, {0: 20131104, 1: 15098}, {0: 20131111, 1: 15101}, {0: 20131118, 1: 15151}, {0: 20131125, 1: 15337}, {0: 20131202, 1: 15334}, {0: 20131209, 1: 15512}, {0: 20131216, 1: 15540}, {0: 20131223, 1: 15701}, {0: 20131230, 1: 15708}, {0: 20140106, 1: 15703}, {0: 20140113, 1: 15637}, {0: 20140120, 1: 8585}, {0: 20140127, 1: 15646}, {0: 20140203, 1: 15632}, {0: 20140210, 1: 15637}, {0: 20140217, 1: 8565}, {0: 20140224, 1: 15659}, {0: 20150302, 1: 15557}, {0: 20150406, 1: 15578}, {0: 20150413, 1: 15545}, {0: 20150420, 1: 15568}, {0: 20150427, 1: 15475}, {0: 20150511, 1: 15710}, {0: 20150518, 1: 15623}, {0: 20150525, 1: 15741}, {0: 20150608, 1: 15741}, {0: 20150622, 1: 15810}, {0: 20150803, 1: 15761}, {0: 20150810, 1: 15776}, {0: 20150824, 1: 15908}, {0: 20150831, 1: 16184}, {0: 20150914, 1: 15832}, {0: 20150921, 1: 15800}, {0: 20151005, 1: 16178}, {0: 20151012, 1: 16191}, {0: 20151019, 1: 16138}, {0: 20151102, 1: 16293}, {0: 20160111, 1: 4812}, {0: 20160118, 1: 16518}, {0: 20160201, 1: 16629}, {0: 20160208, 1: 16586}, {0: 20160215, 1: 16529}, {0: 20160222, 1: 16454}, {0: 20160229, 1: 16515}, {0: 20160307, 1: 16517}, {0: 20160411, 1: 16446}, {0: 20160418, 1: 16454}, {0: 20160425, 1: 16489}, {0: 20160502, 1: 16388}, {0: 20160509, 1: 16374}, {0: 20160523, 1: 16351}, {0: 20160606, 1: 16361}, {0: 20160620, 1: 16314}, {0: 20160627, 1: 16293}, {0: 20160815, 1: 16325}, {0: 20160919, 1: 16316}, {0: 20160926, 1: 16305}, {0: 20161010, 1: 16233}, {0: 20161031, 1: 16349}, {0: 20161107, 1: 16364}, {0: 20161114, 1: 16249}, {0: 20161121, 1: 16345}, {0: 20161128, 1: 16294}, {0: 20161205, 1: 16336}, {0: 20161212, 1: 16387}, {0: 20170102, 1: 16372}, {0: 20170109, 1: 16406}, {0: 20170116, 1: 16379}, {0: 20170213, 1: 16305}, {0: 20170220, 1: 16207}, {0: 20170306, 1: 16111}, {0: 20170320, 1: 16230}, {0: 20170417, 1: 16270}, {0: 20170424, 1: 16226}, {0: 20170501, 1: 16303}, {0: 20170508, 1: 16124}, {0: 20170515, 1: 16204}, {0: 20170522, 1: 16290}, {0: 20170529, 1: 16649}, {0: 20170612, 1: 16157}, {0: 20170619, 1: 16189}, {0: 20170626, 1: 16184}, {0: 20170703, 1: 16597}, {0: 20170717, 1: 15983}, {0: 20170724, 1: 16138}, {0: 20170731, 1: 16145}, {0: 20170807, 1: 16147}, {0: 20170814, 1: 16268}, {0: 20170821, 1: 16279}, {0: 20170828, 1: 16301}, {0: 20170911, 1: 16161}]\n"
    },
    {
        "id": "6d577eb4be1233a91ac316d1ed60d300dd648e9213fcf38e51dc2c5c9d162431",
        "db_name": "wta_1",
        "context_name": "Wta1Context",
        "question": "Find the number of matches happened in each year.",
        "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "linq": "context.Matches.GroupBy(row => new { row.Year }).Select(group => new { Count = group.Count(), group.Key.Year }).ToList();",
        "generated": "context.Matches.Select(row => row.Year).Distinct().Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 12, 1: 2013}, {0: 158, 1: 2016}, {0: 108, 1: 2017}]\nLINQ Results: [{0: 3}]\n"
    },
    {
        "id": "529d65372a186530255b2009b80806077a7e9e1947038ff8495f77b6f5d9efff",
        "db_name": "wta_1",
        "context_name": "Wta1Context",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "linq": "context.Matches.Where(row => row.TourneyName == \"WTA Championships\" && row.WinnerHand == \"L\").Select(row => row.WinnerName).Distinct().Count();",
        "generated": "context.Players.Where(row => context.Matches.Where(row => row.TourneyName == \"WTA Championships\").Select(row => row.WinnerName).Contains(row.FirstName + \" \" + row.LastName)).Select(row => row.LastName).Distinct().Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 2}]\nLINQ Results: [{0: 7}]\n"
    },
    {
        "id": "b2d321efb61d5699fa699cfa6c30b47129b477d39284d1d8ebeed6d7d4515036",
        "db_name": "wta_1",
        "context_name": "Wta1Context",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "linq": "context.Players.Join(context.Matches, T1 => T1.PlayerId, T2 => T2.WinnerId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.WinnerRankPoints).Select(row => new { row.T1.FirstName, row.T1.CountryCode, row.T1.BirthDate }).Take(1).ToList();",
        "generated": "context.Rankings.OrderByDescending(row => row.RankingPoints).Select(row => new { row.Player.FirstName, row.Player.CountryCode, row.Player.BirthDate }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "e4629370353f20474c4e9d45b3fa4d923fd7487b696c3a47a88a6e922c18aaff",
        "db_name": "wta_1",
        "context_name": "Wta1Context",
        "question": "Find the number of players for each hand type.",
        "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "linq": "context.Players.GroupBy(row => new { row.Hand }).Select(group => new { Count = group.Count(), group.Key.Hand }).ToList();",
        "generated": "context.Players.GroupBy(row => new { row.Hand }).Select(group => new { Count = group.Count(), group.Key.Hand }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "c61f65167e223a3eda5630b865eea519885ad20264c12a61222623b35c01de9c",
        "db_name": "restaurants",
        "context_name": "RestaurantsContext",
        "question": "give me some restaurants good for french food in the yosemite and mono lake area ?",
        "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "linq": "context.Restaurants.Join(context.Geographics, t1 => t1.CityName, t2 => t2.CityName, (t1, t2) => new { t1, t2 }).Join(context.Locations, joined => joined.t1.Id, t3 => t3.RestaurantId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.Region == \"yosemite and mono lake area\" && row.t1.FoodType == \"french\" && row.t1.Rating > 2.5).Select(row => new { row.t3.HouseNumber, row.t1.Name }).ToList();",
        "generated": "context.Restaurants.Join(context.Geographics, T1 => T1.CityName, T2 => T2.CityName, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FoodType == \"french\" && row.T2.County == \"yosemite\").Select(row => new { row.T1.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "6553372e6d3aa7ad863ad7a58cb61131e8e80fd652cc406e4999d991f5cc13e8",
        "db_name": "restaurants",
        "context_name": "RestaurantsContext",
        "question": "where are some restaurants good for arabic food in mountain view ?",
        "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "linq": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"mountain view\" && row.t1.FoodType == \"arabic\" && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
        "generated": "context.Restaurants.Join(context.Geographics, T1 => T1.CityName, T2 => T2.CityName, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FoodType == \"Arabic\" && row.T2.Region == \"Mountain View\").Select(row => new { row.T1.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "e7a8b6a49760713c7d8c4a772d85148a63f5ffe9d961eb57d0f67d76fb3f7685",
        "db_name": "restaurants",
        "context_name": "RestaurantsContext",
        "question": "where can i find a jamerican cuisine in san francisco ?",
        "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";",
        "linq": "context.Restaurants.Join(context.Locations, t1 => t1.Id, t2 => t2.RestaurantId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.CityName == \"san francisco\" && row.t1.Name == \"jamerican cuisine\").Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
        "generated": "context.Restaurants.Join(context.Geographics, T1 => T1.CityName, T2 => T2.CityName, (T1, T2) => new { T1, T2 }).Where(row => row.T1.FoodType == \"Jamerican\" && row.T2.CityName == \"San Francisco\").Select(row => new { row.T1.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "e289c98500139e1b9508dd3ac878e46600fb77872a4a68d99f7b8575ce3c3ed4",
        "db_name": "restaurants",
        "context_name": "RestaurantsContext",
        "question": "where can we find some restaurants in the bay area ?",
        "sql": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
        "linq": "context.Locations.Join(context.Restaurants, t2 => t2.RestaurantId, t1 => t1.Id, (t2, t1) => new { t2, t1 }).Where(row => context.Geographics.Where(row => row.Region == \"bay area\").Select(row => row.CityName).Contains(row.t1.CityName)).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
        "generated": "context.Restaurants.Join(context.Geographics, T1 => T1.CityName, T2 => T2.CityName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Region == \"bay area\").Select(row => row.T1.Name).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "582f1ba751659189c62b4d095b980042e7dc394d51b73910a91327f136fec1a4",
        "db_name": "restaurants",
        "context_name": "RestaurantsContext",
        "question": "give me a good restaurant in the bay area ?",
        "sql": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
        "linq": "context.Locations.Join(context.Restaurants, t2 => t2.RestaurantId, t1 => t1.Id, (t2, t1) => new { t2, t1 }).Where(row => context.Geographics.Where(row => row.Region == \"region0\").Select(row => row.CityName).Contains(row.t1.CityName) && row.t1.Rating > 2.5).Select(row => new { row.t2.HouseNumber, row.t1.Name }).ToList();",
        "generated": "context.Restaurants.Where(row => row.Rating > 3 && row.CityName == \"bay area\").Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "f33b50e6a450f5a9d73e284a25bed37ef330a5aceb783317c172d7744776a7ee",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the capital of the largest state",
        "sql": "SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "linq": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => new { row.Capital }).ToList();",
        "generated": "context.States.OrderByDescending(row => row.Area).Select(row => new { row.Capital }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "28eca9fa2b90cd33bad8d76d2f0bd82be41b84e160ff1de46aca2c456667d443",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "how many cities are in texas",
        "sql": "SELECT COUNT ( city_name ) FROM city WHERE state_name  =  \"texas\";",
        "linq": "context.Cities.Where(row => row.StateName == \"texas\").Select(row => row.CityName).Count();",
        "generated": "context.Cities.Where(row => row.StateName == \"texas\").Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "4881fe691f386e1b357736ae939589a5873972b0d4efe754f4de5935b990bc47",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the area of the states",
        "sql": "SELECT area FROM state;",
        "linq": "context.States.Select(row => new { row.Area }).ToList();",
        "generated": "context.States.Select(row => new { row.Area }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "df2d496b5599113c2d24d2ae6446f24b4e13f4f1f2f00ae0c142a2de4a4e5008",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "how many states in the us does the shortest river run through",
        "sql": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH  =  ( SELECT MIN ( DISTINCT LENGTH ) FROM river );",
        "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Distinct().Min()).Select(row => row.Traverse).Distinct().Count();",
        "generated": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Min()).Select(row => row.Traverse).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "aa4c61132b1d059559d96ad662b8c3f0959d299e222d7dc4e36b6b8bdcb37d5b",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what are the major cities in the largest state",
        "sql": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "linq": "context.Cities.Where(row => row.Population > 150000 && row.StateName == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).First()).Select(row => new { row.CityName }).ToList();",
        "generated": "context.Cities.Join(context.States, T1 => T1.StateName, T2 => T2.StateName, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Area).Select(row => new { row.T1.CityName }).Take(10).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "6fd2dc8598e366ef3e7a5aec502845d12d3320a090fb5a0049d3c5b8b22364cc",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the area of the smallest state",
        "sql": "SELECT area FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "linq": "context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => new { row.Area }).ToList();",
        "generated": "context.States.OrderBy(row => row.Area).Select(row => new { row.Area }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "ebf4df3ef2c59eec6851a10e6a2fbcd8ff3a73fdc576110680a3229c78144590",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the population density of the state with the smallest population",
        "sql": "SELECT density FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
        "linq": "context.States.Where(row => row.Population == context.States.Select(row => row.Population).Min()).Select(row => new { row.Density }).ToList();",
        "generated": "context.States.OrderBy(row => row.Population).Select(row => row.Density).First();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.InvalidOperationException: Sequence contains no elements\n   at System.Linq.ThrowHelper.ThrowNoElementsException()\n   at lambda_method14(Closure, QueryContext)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at System.Linq.Queryable.First[TSource](IQueryable`1 source)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "2cd3983ec9873afcba635ae8fb9b110042c104a1c4d9e2c9835fdf39560b6b4a",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what states have a capital that is the highest point in the state",
        "sql": "SELECT t1.state_name FROM state AS t1 JOIN highlow AS t2 ON t1.capital  =  t2.highest_point;",
        "linq": "context.States.Join(context.Highlows, t1 => t1.Capital, t2 => t2.HighestPoint, (t1, t2) => new { t1, t2 }).Select(row => new { row.t1.StateName }).ToList();",
        "generated": "context.States.Where(row => row.Capital == row.HighestPoint).Select(row => new { row.StateName }).Distinct().ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,67): error CS1061: 'State' does not contain a definition for 'HighestPoint' and no accessible extension method 'HighestPoint' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.92"
    },
    {
        "id": "8e9509c094d2c8c2069c872b9e5b42a1c5eab1b56c570cdc545b0ddf28217207",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the population of the capital of the smallest state",
        "sql": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "linq": "context.Cities.Where(row => row.CityName == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Min()).Select(row => row.Capital).First()).Select(row => new { row.Population }).ToList();",
        "generated": "context.States.OrderBy(row => row.Area).Select(row => row.Capital).First();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.InvalidOperationException: Sequence contains no elements\n   at System.Linq.ThrowHelper.ThrowNoElementsException()\n   at lambda_method14(Closure, QueryContext)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "6bd2996fc273b3d013a89cff16aa60550cb178fe9f95e0b3eaf08e1af7bc7f43",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the population of the capital of the largest state",
        "sql": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "linq": "context.Cities.Where(row => row.CityName == context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.Capital).First()).Select(row => new { row.Population }).ToList();",
        "generated": "context.States.OrderByDescending(row => row.Area).Select(row => new { row.Capital, row.Population }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "d4dd017d69f0295e68d4652d4d01f225b48fbd45d2c2da392f261ec01128712b",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the lowest point of the state with the largest area",
        "sql": "SELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "linq": "context.States.Join(context.Highlows, t1 => t1.StateName, t2 => t2.StateName, (t1, t2) => new { t1, t2 }).Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.t1.StateName)).Select(row => new { row.t2.LowestPoint }).ToList();",
        "generated": "context.States.OrderByDescending(row => row.Area).Select(row => new { row.LowestElevation }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,94): error CS1061: 'State' does not contain a definition for 'LowestElevation' and no accessible extension method 'LowestElevation' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.80"
    },
    {
        "id": "c6b35dfb2475b848b362d2d51f9cc794d609f68d47c62c115c014eb1cd78b66e",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the size of the largest state in the usa",
        "sql": "SELECT MAX ( area ) FROM state;",
        "linq": "context.States.Select(row => row.Area).Max();",
        "generated": "context.States.Where(row => row.CountryName == \"usa\").OrderByDescending(row => row.Area).Select(row => new { row.Area }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "19a889e453ddce163d50e709cd9e771dc7c5d20991e4f7ba87f601f0a3d1640e",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "which capitals are not major cities",
        "sql": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name WHERE t1.population  <=  150000;",
        "linq": "context.States.Join(context.Cities, t2 => t2.Capital, t1 => t1.CityName, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Population <= 150000).Select(row => new { row.t2.Capital }).ToList();",
        "generated": "context.Cities.Join(context.States, T1 => T1.StateName, T2 => T2.StateName, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Population < 100000).Select(row => new { row.T2.Capital }).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "e4ef4f1d6798054b7e9d45e629763e20e013bfdb5fc2376e5f97322426d8bedf",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "give me the cities in usa",
        "sql": "SELECT city_name FROM city;",
        "linq": "context.Cities.Select(row => new { row.CityName }).ToList();",
        "generated": "context.Cities.Where(row => row.CountryName == \"USA\").Select(row => new { row.CityName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "319a16aea1c3df24e8a8f2fd52a7e86b6c740d3552fa3330c10bcdc976410657",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the highest point of the state with the largest area",
        "sql": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "linq": "context.States.Join(context.Highlows, t1 => t1.StateName, t2 => t2.StateName, (t1, t2) => new { t1, t2 }).Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.t1.StateName)).Select(row => new { row.t2.HighestPoint }).ToList();",
        "generated": "context.Highlows.Join(context.States, T1 => T1.StateName, T2 => T2.StateName, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Area).Select(row => row.T1.HighestPoint).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "1703666520a4bb0d97e96952a6b51e782243c47bd47b496f8860865e81c61635",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "where is massachusetts",
        "sql": "SELECT country_name FROM state WHERE state_name  =  \"massachusetts\";",
        "linq": "context.States.Where(row => row.StateName == \"massachusetts\").Select(row => new { row.CountryName }).ToList();",
        "generated": "context.States.Where(row => row.Capital == \"Boston\").Select(row => new { row.StateName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "3b7cd5b1025f51da91a55759ad6f95347501db109bb41440616eba8ecd3c82f2",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what state has the largest urban population",
        "sql": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) DESC LIMIT 1;",
        "linq": "context.Cities.GroupBy(row => new { row.StateName }).OrderByDescending(group => group.Sum(row => row.Population)).Select(group => new { group.Key.StateName }).Take(1).ToList();",
        "generated": "context.Cities.GroupBy(row => new { row.StateName }).OrderByDescending(group => group.Sum(row => row.Population)).Select(group => new { group.Key.StateName }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "eeba34f37f2d635f8e04aac642bf015cbf263676e8db8f62336172b101ed454d",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what are the major rivers in the us",
        "sql": "SELECT river_name FROM river;",
        "linq": "context.Rivers.Select(row => new { row.RiverName }).ToList();",
        "generated": "context.Rivers.Where(row => row.CountryName == \"USA\" && row.Length > 500).Select(row => new { row.RiverName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "9d8561d3ec8157b7796ef90e4c60894d8eb11dfc83377036d2eba6fdab77566f",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "how many cities named austin are there in the usa",
        "sql": "SELECT COUNT ( city_name ) FROM city WHERE city_name  =  \"austin\";",
        "linq": "context.Cities.Where(row => row.CityName == \"austin\").Select(row => row.CityName).Count();",
        "generated": "context.Cities.Where(row => row.CityName == \"austin\").Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "78e7e259f42f2f29a30d35a4df886c994eb2742c7e3a9b1811cabab96ce105e5",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the length of the colorado river in texas",
        "sql": "SELECT LENGTH FROM river WHERE river_name  =  \"colorado\" AND traverse  =  \"texas\";",
        "linq": "context.Rivers.Where(row => row.RiverName == \"colorado\" && row.Traverse == \"texas\").Select(row => new { row.Length }).ToList();",
        "generated": "context.Rivers.Where(row => row.RiverName == \"Colorado\" && row.Traverse == \"Texas\").Select(row => row.Length).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "c5b784b178f8fda8c3d1fbfe00b76347961b5037256d20fd30d185e4c9530b75",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the population density in the state with capital austin",
        "sql": "SELECT density FROM state WHERE capital  =  \"austin\";",
        "linq": "context.States.Where(row => row.Capital == \"austin\").Select(row => new { row.Density }).ToList();",
        "generated": "context.States.Where(row => row.Capital == \"austin\").Select(row => new { row.Density }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "82148714b6bc2e9484266a4443a2b2412629eebceffec21b407b9b2e34ebbf08",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "how long is the shortest river in the usa",
        "sql": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "linq": "context.Rivers.Where(row => row.Length == context.Rivers.Select(row => row.Length).Min()).Select(row => new { row.Length }).ToList();",
        "generated": "context.Rivers.Where(row => row.CountryName == \"USA\" && row.Length == context.Rivers.Select(row => row.Length).Min()).Select(row => row.Length).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "959a3c099eb048b988b51aae826ac75b6f05a906c56df31e7c4e68e61acb4d64",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the elevation of death valley",
        "sql": "SELECT lowest_elevation FROM highlow WHERE lowest_point  =  \"death valley\";",
        "linq": "context.Highlows.Where(row => row.LowestPoint == \"death valley\").Select(row => new { row.LowestElevation }).ToList();",
        "generated": "context.Highlows.Where(row => row.LowestPoint == \"Death Valley\").Select(row => row.LowestElevation).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "9151c739beee631ab8ba89a3d2d0ceda5152a070a22ffe8558539d467be1b9a2",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the average population of the us by state",
        "sql": "SELECT AVG ( population ) FROM state;",
        "linq": "context.States.Select(row => row.Population).Average();",
        "generated": "context.States.Where(row => row.CountryName == \"USA\").Select(row => new { row.Population }).Average();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,20): error CS1929: 'IQueryable<<anonymous type: int? Population>>' does not contain a definition for 'Average' and the best extension method overload 'Enumerable.Average(IEnumerable<decimal>)' requires a receiver of type 'System.Collections.Generic.IEnumerable<decimal>' [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.31"
    },
    {
        "id": "eabbdc3736148b54c362c943ea4d33a3eec8a3366faa9fd52d5411b41366fc51",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what rivers flow through the largest state",
        "sql": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "linq": "context.Rivers.Where(row => context.States.Where(row => row.Area == context.States.Select(row => row.Area).Max()).Select(row => row.StateName).Contains(row.Traverse)).Select(row => new { row.RiverName }).ToList();",
        "generated": "context.States.OrderByDescending(row => row.Area).Select(row => new { row.Rivers }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "47858f4f3d004a001a1f57d194310c34bde5e952d75577668bebf31502bc7e49",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what are the major cities in the states through which the major river in virginia runs",
        "sql": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );",
        "linq": "context.Cities.Where(row => row.Population > 150000 && context.Rivers.Where(row => context.Rivers.Where(row => row.Length > 750 && row.Traverse == \"virginia\").Select(row => row.RiverName).Contains(row.RiverName)).Select(row => row.Traverse).Contains(row.StateName)).Select(row => new { row.CityName }).ToList();",
        "generated": "context.Cities.Join(context.Rivers, t1 => t1.Traverse, t2 => t2.Traverse, (t1, t2) => new { t1, t2 }).Join(context.States, joined => joined.t2.StateName, t3 => t3.StateName, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.CountryName == \"USA\" && row.t2.Length > 1000).Select(row => new { row.t1.CityName }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,65): error CS1061: 'City' does not contain a definition for 'Traverse' and no accessible extension method 'Traverse' accepting a first argument of type 'City' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.48"
    },
    {
        "id": "c6856382120c305c08efcffa3e782505b8561bb801f723e15e5d3063e86b70ff",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "which state is the largest city in montana in",
        "sql": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"montana\" ) AND state_name  =  \"montana\";",
        "linq": "context.Cities.Where(row => row.Population == context.Cities.Where(row => row.StateName == \"montana\").Select(row => row.Population).Max() && row.StateName == \"montana\").Select(row => new { row.StateName }).ToList();",
        "generated": "context.Cities.Join(context.States, T1 => T1.StateName, T2 => T2.StateName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CountryName == \"USA\" && row.T1.MountainAltitude == 4000).OrderByDescending(row => row.T1.Population).Select(row => new { row.T2.StateName }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,175): error CS1061: 'City' does not contain a definition for 'MountainAltitude' and no accessible extension method 'MountainAltitude' accepting a first argument of type 'City' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.71"
    },
    {
        "id": "b1abe61dde5fa65454e80d91a1b83e02f02eceb566ac5e7d1d69386b3c9bb260",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is capital of the state with the lowest point",
        "sql": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) ;",
        "linq": "context.Highlows.Join(context.States, t2 => t2.StateName, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t2.LowestElevation == context.Highlows.Select(row => row.LowestElevation).Min()).Select(row => new { row.t1.Capital }).ToList();",
        "generated": "context.States.OrderBy(row => row.LowestPoint).Select(row => new { row.Capital }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,54): error CS1061: 'State' does not contain a definition for 'LowestPoint' and no accessible extension method 'LowestPoint' accepting a first argument of type 'State' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.25"
    },
    {
        "id": "08bc39cdc70fe3b284aa1bed280fd2c031fc59eb708113ce2ff4bcb41d6e2863",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the biggest american city in a state with a river",
        "sql": "SELECT DISTINCT t1.city_name FROM city AS t1 JOIN river AS t2 ON t2.traverse  =  t1.state_name WHERE t1.population  =  ( SELECT MAX ( t1.population ) FROM river AS t2 JOIN city AS t1 ON t2.traverse  =  t1.state_name );",
        "linq": "context.Cities.Join(context.Rivers, t1 => t1.StateName, t2 => t2.Traverse, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Population == context.Rivers.Join(context.Cities, t2 => t2.Traverse, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Select(row => row.t1.Population).Max()).Select(row => new { row.t1.CityName }).Distinct().ToList();",
        "generated": "context.Cities.Join(context.Rivers, T1 => T1.Traverse, T2 => T2.Traverse, (T1, T2) => new { T1, T2 }).Join(context.States, joined => joined.T2.CountryName, T3 => T3.CountryName, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CountryName == \"USA\").OrderByDescending(row => row.T1.Population).Select(row => new { row.T1.CityName }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,65): error CS1061: 'City' does not contain a definition for 'Traverse' and no accessible extension method 'Traverse' accepting a first argument of type 'City' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.43"
    },
    {
        "id": "e0079128a8e18f32e63c1ec0c615183f7316efa056b2b44806d4e9f7850c6b5d",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "how many rivers are in the state with the largest population",
        "sql": "SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "linq": "context.Rivers.Join(context.States, t2 => t2.Traverse, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t1.StateName == context.States.Where(row => row.Population == context.States.Select(row => row.Population).Max()).Select(row => row.StateName).First()).Select(row => row.t2.RiverName).Count();",
        "generated": "context.States.OrderByDescending(row => row.Population).Select(row => new { row.StateName, row.Rivers }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 0}]\nLINQ Results: []\n"
    },
    {
        "id": "e8afd13a08e59c7bd6e0ca2883a26fda4636889966029be8b692473782825a5f",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the capital of the state with the highest point",
        "sql": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "linq": "context.Highlows.Join(context.States, t2 => t2.StateName, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t2.HighestElevation == context.Highlows.Select(row => row.HighestElevation).Max()).Select(row => new { row.t1.Capital }).ToList();",
        "generated": "context.Mountains.Join(context.State, T1 => T1.StateName, T2 => T2.StateName, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.MountainAltitude).Select(row => new { row.T2.Capital }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,51): error CS1061: 'GeoContext' does not contain a definition for 'State' and no accessible extension method 'State' accepting a first argument of type 'GeoContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.76"
    },
    {
        "id": "e23d8f7cb39f873969e007e0d5b0ff80357787a962d7811d928ab1a3e5b8422f",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the highest point in the smallest state",
        "sql": "SELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MIN ( area ) FROM state );",
        "linq": "context.Highlows.Join(context.States, t2 => t2.StateName, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Area == context.States.Select(row => row.Area).Min()).Select(row => new { row.t2.HighestPoint }).ToList();",
        "generated": "context.Highlows.Join(context.States, T1 => T1.StateName, T2 => T2.StateName, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T2.Area).Select(row => new { row.T1.LowestPoint }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "8bbbe5ba845e1e6947b0c22bac89843685fa663e7550b416d2688eee90c4b770",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "how many rivers are in the state with the highest point.",
        "sql": "SELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "linq": "context.Highlows.Join(context.Rivers, t2 => t2.StateName, t1 => t1.Traverse, (t2, t1) => new { t2, t1 }).Where(row => row.t2.HighestElevation == context.Highlows.Select(row => row.HighestElevation).Max()).Select(row => row.t1.RiverName).Count();",
        "generated": "context.Mountains.Join(context.States, T1 => T1.StateName, T2 => T2.StateName, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.MountainAltitude).Select(row => new { row.T2.Rivers }).Distinct().Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.InvalidOperationException: Using 'Distinct' operation on a projection containing a collection is not supported.\n   at Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyDistinct()\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateDistinct(ShapedQueryExpression source)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "3512ce351fb779bc9edf6f9649ce4a32603d37348b7558583cc1a74dd6f8202b",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "how high is the highest point in the largest state",
        "sql": "SELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX ( area ) FROM state );",
        "linq": "context.Highlows.Join(context.States, t2 => t2.StateName, t1 => t1.StateName, (t2, t1) => new { t2, t1 }).Where(row => row.t1.Area == context.States.Select(row => row.Area).Max()).Select(row => new { row.t2.HighestElevation }).ToList();",
        "generated": "context.Highlows.Join(context.States, T1 => T1.StateName, T2 => T2.StateName, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.Area).Select(row => new { row.T1.HighestPoint }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "048ef28cba2db839e04196a6b22bae7e75e6cd3f09fcd30b5dd904501897ed03",
        "db_name": "geo",
        "context_name": "GeoContext",
        "question": "what is the longest river in the state with the highest point",
        "sql": "SELECT t1.river_name FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow ) ORDER BY t1.length DESC LIMIT 1;",
        "linq": "context.Highlows.Join(context.Rivers, t2 => t2.StateName, t1 => t1.Traverse, (t2, t1) => new { t2, t1 }).Where(row => row.t2.HighestElevation == context.Highlows.Select(row => row.HighestElevation).Max()).OrderByDescending(row => row.t1.Length).Select(row => new { row.t1.RiverName }).Take(1).ToList();",
        "generated": "context.Rivers.Join(context.Highlows, T1 => T1.Traverse, T2 => T2.StateName, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T1.Length).Select(row => new { row.T1.RiverName }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "4361f2d25826162ab180acd5ac59f3fde8cb03e263870caddff8dcab95a9aa11",
        "db_name": "flight_2",
        "context_name": "Flight2Context",
        "question": "Find all airlines that have fewer than 200 flights.",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "linq": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Airline1 }).Where(group => group.Count() < 200).Select(group => new { group.Key.Airline1 }).ToList();",
        "generated": "context.Flights.GroupBy(row => new { row.Airline }).Where(group => group.Count() < 200).Select(group => new { group.Key.Airline }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: AirTran Airways}, {0: Allegiant Air}, {0: American Airlines}, {0: Continental Airlines}, {0: Delta Airlines}, {0: Frontier Airlines}, {0: JetBlue Airways}, {0: Northwest Airlines}, {0: Southwest Airlines}, {0: US Airways}, {0: United Airlines}, {0: Virgin America}]\nLINQ Results: [{0: 1}, {0: 2}, {0: 3}, {0: 4}, {0: 5}, {0: 6}, {0: 7}, {0: 8}, {0: 9}, {0: 10}, {0: 11}, {0: 12}]\n"
    },
    {
        "id": "173039ded7cc4d0b76b6fc2ec4f13a759de8f73794e8f0d9cc9c513e7b49e238",
        "db_name": "flight_2",
        "context_name": "Flight2Context",
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "linq": "context.Flights.Join(context.Airlines, T1 => T1.Airline, T2 => T2.Uid, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Airline1 == \"United Airlines\").Select(row => new { row.T1.FlightNo }).ToList();",
        "generated": "context.Airlines.Join(context.Flights, T1 => T1.Uid, T2 => T2.Airline, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Airline1 == \"United Airlines\").Select(row => new { row.T2.FlightNo }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "0f24a35f2c1470374882d8a808417967eeaa6d2ded59d5bb8a1feae40f50cba2",
        "db_name": "flight_2",
        "context_name": "Flight2Context",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "linq": "context.Flights.Where(row => row.SourceAirport == \"APG\").Select(row => new { row.FlightNo }).ToList();",
        "generated": "context.Airports.Join(context.Flights, T1 => T1.AirportCode, T2 => T2.SourceAirport, (T1, T2) => new { T1, T2 }).Where(row => row.T1.AirportName == \"APG\").Select(row => new { row.T2.FlightNo }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "2782ee2ff937a6da788b84e8d7edcce5c37dd820ab76ef4693fbcc8ceac63e37",
        "db_name": "flight_2",
        "context_name": "Flight2Context",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "linq": "context.Flights.Where(row => row.DestAirport == \"APG\").Select(row => new { row.FlightNo }).ToList();",
        "generated": "context.Airports.Join(context.Flights, T1 => T1.AirportCode, T2 => T2.SourceAirport, (T1, T2) => new { T1, T2 }).Where(row => row.T1.AirportName == \"APG\").Select(row => new { row.T2.FlightNo }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "50dd2f7ea85b75da6f49bdaeca3c2d8f9adba360d61a8a54ccb18ff31fe46d66",
        "db_name": "flight_2",
        "context_name": "Flight2Context",
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "linq": "context.Flights.Join(context.Airports, T1 => T1.SourceAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City == \"Aberdeen\").Select(row => new { row.T1.FlightNo }).ToList();",
        "generated": "context.Flights.Where(row => row.SourceAirport == \"ABE\").Select(row => new { row.FlightNo }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "d9aa8fe6fd961334ce90c323f22f9cd9a0e50ab3bc7189b5d053d11e748572c4",
        "db_name": "flight_2",
        "context_name": "Flight2Context",
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "linq": "context.Flights.Join(context.Airports, T1 => T1.DestAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City == \"Aberdeen\").Select(row => new { row.T1.FlightNo }).ToList();",
        "generated": "context.Airports.Join(context.Flights, T1 => T1.AirportCode, T2 => T2.DestAirport, (T1, T2) => new { T1, T2 }).Where(row => row.T1.City == \"Aberdeen\").Select(row => row.T2.FlightNo).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "054f8f7f5ffebc68740578ad35c3693c406a6b7a36d47657a8071a906a667f46",
        "db_name": "flight_2",
        "context_name": "Flight2Context",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "linq": "context.Flights.Join(context.Airports, T1 => T1.DestAirport, T2 => T2.AirportCode, (T1, T2) => new { T1, T2 }).Where(row => row.T2.City == \"Aberdeen\" || row.T2.City == \"Abilene\").Count();",
        "generated": "context.Airports.Where(row => row.City == \"Aberdeen\" || row.City == \"Abilene\").Select(row => row.AirportCode).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "ec8d140313c4cf3e4b18df6a1c7a45eb5efa1ec14c17187a5c36fddafb4066e4",
        "db_name": "flight_2",
        "context_name": "Flight2Context",
        "question": "Find the name of airports which do not have any flight in and out.",
        "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "linq": "context.Airports.Where(row => !context.Flights.Select(row => row.SourceAirport).Union(context.Flights.Select(row => row.DestAirport)).Contains(row.AirportCode)).Select(row => new { row.AirportName }).ToList();",
        "generated": "context.Airports.Where(row =>!context.Flights.Select(row => row.SourceAirport).Contains(row.AirportCode) &&!context.Flights.Select(row => row.DestAirport).Contains(row.AirportCode)).Select(row => new { row.AirportName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "cd2ea5980256f17a5b067042ba518912a9fdb0a648fa5c2d86f625cd74a5ef9b",
        "db_name": "scholar",
        "context_name": "ScholarContext",
        "question": "What articles have been published since 2006 about the effects of juicing for cancer patients ?",
        "sql": "SELECT DISTINCT paperid  ,  title FROM paper WHERE title LIKE \"the effects of juicing for cancer patients\" AND YEAR  >  2006;",
        "linq": "context.Papers.Where(row => EF.Functions.Like(row.Title, \"the effects of juicing for cancer patients\") && row.Year > 2006).Select(row => new { row.PaperId, row.Title }).Distinct().ToList();",
        "generated": "context.Papers.Where(row => row.Year > 2006 && row.Title.Contains(\"juicing\") && row.Title.Contains(\"cancer\")).Select(row => new { row.Title }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "10056fede11ae015b3f81313860304a8d1ab10294f4d6d1c575c62a19a42886b",
        "db_name": "scholar",
        "context_name": "ScholarContext",
        "question": "the papers at eccv in 2014 using ImageNet dataset",
        "sql": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";",
        "linq": "context.PaperDatasets.Join(context.Datasets, t2 => t2.DatasetId, t1 => t1.DatasetId, (t2, t1) => new { t2, t1 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Join(context.Venues, joined => joined.t3.VenueId, t4 => t4.VenueId, (joined, t4) => new { joined.t2, joined.t1, joined.t3, t4 }).Where(row => row.t1.DatasetName == \"ImageNet\" && row.t3.Year == 2014 && row.t4.VenueName == \"eccv\").Select(row => new { row.t3.PaperId }).Distinct().ToList();",
        "generated": "context.Authors.Join(context.Papers, T1 => T1.AuthorId, T2 => T2.AuthorId, (T1, T2) => new { T1, T2 }).Join(context.Keyphrases, joined => joined.T2.PaperId, T3 => T3.PaperId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.PaperDatasets, joined => joined.T3.PaperId, T4 => T4.PaperId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Join(context.Datasets, joined => joined.T4.DatasetId, T5 => T5.DatasetId, (joined, T5) => new { joined.T1, joined.T2, joined.T3, joined.T4, T5 }).Where(row => row.T2.VenueId == 24 && row.T2.Year == 2014).Select(row => new { row.T2.Title }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,186): error CS1061: 'Keyphrase' does not contain a definition for 'PaperId' and no accessible extension method 'PaperId' accepting a first argument of type 'Keyphrase' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:02.21"
    },
    {
        "id": "81cd614d56685e776f8f4b61177f4589ca69037f7ed28d929623fe36a22ed0ac",
        "db_name": "student_transcripts_tracking",
        "context_name": "StudentTranscriptsTrackingContext",
        "question": "What is the last transcript release date?",
        "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "linq": "context.Transcripts.OrderByDescending(row => row.TranscriptDate).Select(row => new { row.TranscriptDate }).Take(1).ToList();",
        "generated": "context.Transcripts.OrderByDescending(row => row.TranscriptDate).Select(row => new { row.TranscriptDate }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "7777e8adc699e220d4d1dc18e319bb0f3bbb946a11f3e6e47ed607678a2e54ba",
        "db_name": "student_transcripts_tracking",
        "context_name": "StudentTranscriptsTrackingContext",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.TranscriptContents.GroupBy(row => new { row.StudentCourseId }).Select(group => new { Count = group.Count(), group.Key.StudentCourseId }).OrderByDescending(group => group.Count).Take(1).ToList();",
        "generated": "context.TranscriptContents.Select(row => row.StudentCourseId).Distinct().Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Parameter 'index')\n   at System.Linq.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument)\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 239\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\n"
    },
    {
        "id": "08c923c220f124df6295ac7ae4ae9709e855ceb9aae9f1e7c8bbe8242d9fbc58",
        "db_name": "student_transcripts_tracking",
        "context_name": "StudentTranscriptsTrackingContext",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "linq": "context.TranscriptContents.Join(context.Transcripts, T1 => T1.TranscriptId, T2 => T2.TranscriptId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.TranscriptId }).OrderBy(group => group.Count()).Select(group => new { group.First().T2.TranscriptDate, group.Key.TranscriptId }).Take(1).ToList();",
        "generated": "context.Transcripts.OrderByDescending(row => context.TranscriptContents.Count(row1 => row1.TranscriptId == row.TranscriptId)).Select(row => new { row.TranscriptId, row.TranscriptDate }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1975-10-28 15:16:51, 1: 2}]\nLINQ Results: [{0: 8, 1: 1975-05-06 12:04:47}]\n"
    },
    {
        "id": "ac466f4c1c9441d9ceb5fe3727945c8e766ffcbbd938e3f8e44a791dd7f424d0",
        "db_name": "student_transcripts_tracking",
        "context_name": "StudentTranscriptsTrackingContext",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "linq": "context.DegreePrograms.Join(context.StudentEnrolments, T1 => T1.DegreeProgramId, T2 => T2.DegreeProgramId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DegreeSummaryName == \"Master\").Select(row => row.T2.SemesterId).Distinct().Intersect(context.DegreePrograms.Join(context.StudentEnrolments, T1 => T1.DegreeProgramId, T2 => T2.DegreeProgramId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DegreeSummaryName == \"Bachelor\").Select(row => row.T2.SemesterId).Distinct()).ToList();",
        "generated": "context.DegreePrograms.Join(context.StudentEnrolments, T1 => T1.DegreeProgramId, T2 => T2.DegreeProgramId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.DegreeSummaryName == \"Master\" || row.T1.DegreeSummaryName == \"Bachelor\").Select(row => row.T2.SemesterId).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 13}]\nLINQ Results: [{0: 13}, {0: 2}, {0: 15}, {0: 1}, {0: 9}, {0: 5}, {0: 6}, {0: 12}, {0: 4}]\n"
    },
    {
        "id": "4642c93659b4a01a6dbf5c1a335144c4c9dfdd800ecffe590eda0314467329b7",
        "db_name": "student_transcripts_tracking",
        "context_name": "StudentTranscriptsTrackingContext",
        "question": "How many different addresses do the students currently live?",
        "sql": "SELECT count(DISTINCT current_address_id) FROM Students",
        "linq": "context.Students.Select(row => row.CurrentAddressId).Distinct().Count();",
        "generated": "context.Addresses.Select(row => row.Line1).Distinct().Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 9}]\nLINQ Results: [{0: 15}]\n"
    },
    {
        "id": "da5a21f2286099075a18e7f0344bfc3ddb2d723b60e0e9c9fd492c660a517172",
        "db_name": "student_transcripts_tracking",
        "context_name": "StudentTranscriptsTrackingContext",
        "question": "List all the student details in reversed lexicographical order.",
        "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "linq": "context.Students.OrderByDescending(row => row.OtherStudentDetails).Select(row => new { row.OtherStudentDetails }).ToList();",
        "generated": "context.Students.OrderByDescending(row => new { row.FirstName, row.MiddleName, row.LastName }).Select(row => new { row.FirstName, row.MiddleName, row.LastName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.InvalidOperationException: The LINQ expression 'DbSet<Student>()\n    .OrderByDescending(s => new { \n        FirstName = s.FirstName, \n        MiddleName = s.MiddleName, \n        LastName = s.LastName\n     })' could not be translated. Either rewrite the query in a form that can be translated, or switch to client evaluation explicitly by inserting a call to 'AsEnumerable', 'AsAsyncEnumerable', 'ToList', or 'ToListAsync'. See https://go.microsoft.com/fwlink/?linkid=2101038 for more information.\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.GetEnumerator()\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "0d0dda75e3702d63289a9749b73b9e6b0f5d38757640bf1e2905b9d36767cc9a",
        "db_name": "student_transcripts_tracking",
        "context_name": "StudentTranscriptsTrackingContext",
        "question": "Describe the section h.",
        "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "linq": "context.Sections.Where(row => row.SectionName == \"h\").Select(row => new { row.SectionDescription }).ToList();",
        "generated": "context.Sections.Join(context.Courses, T1 => T1.CourseId, T2 => T2.CourseId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CourseName == \"h\").Select(row => new { row.T1.SectionName, row.T1.SectionDescription }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: et}]\nLINQ Results: []\n"
    },
    {
        "id": "75307bbb5b9b45db33db4eb24d22da9442c156e3cf8ab3d16a361256bfafbe4e",
        "db_name": "student_transcripts_tracking",
        "context_name": "StudentTranscriptsTrackingContext",
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "linq": "context.Students.Join(context.Addresses, t1 => t1.PermanentAddressId, t2 => t2.AddressId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Country == \"haiti\" || row.t1.CellMobileNumber == \"09700166582\").Select(row => new { row.t1.FirstName }).ToList();",
        "generated": "context.Students.Join(context.Addresses, T1 => T1.PermanentAddressId, T2 => T2.AddressId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country == \"Haiti\" || row.T1.CellMobileNumber == \"09700166582\").Select(row => new { row.T1.FirstName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Jarvis}]\nLINQ Results: [{0: Hobart}, {0: Warren}, {0: Jarvis}, {0: Delaney}]\n"
    },
    {
        "id": "bb698611ea1938e609deed3d1ade1ef6a164cc9bf79f60ebad77579d32c4fcd8",
        "db_name": "farm",
        "context_name": "FarmContext",
        "question": "List the official names of cities that have not held any competition.",
        "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
        "linq": "context.Cities.Where(row => !context.FarmCompetitions.Select(row => row.HostCityId).Contains(row.CityId)).Select(row => new { row.OfficialName }).ToList();",
        "generated": "context.Cities.Where(row =>!context.FarmCompetitions.Select(row => row.HostCityId).Contains(row.CityId)).Select(row => new { row.OfficialName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "be8aadfa21fcbb42fa784d26bb71abe93edf2f396d7584331ebec4ca02a37d91",
        "db_name": "farm",
        "context_name": "FarmContext",
        "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
        "sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
        "linq": "context.Cities.Where(row => row.Population > 1500).Select(row => row.Status).Intersect(context.Cities.Where(row => row.Population < 500).Select(row => row.Status)).ToList();",
        "generated": "context.Cities.Where(row => row.Population > 1500 && row.Population < 500).Select(row => new { row.Status }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Village}]\nLINQ Results: []\n"
    },
    {
        "id": "65079377b913c23138ebd9fbae118575e73783aa6ee1d36fe4cc68dde95a6b7c",
        "db_name": "farm",
        "context_name": "FarmContext",
        "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.",
        "sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500",
        "linq": "context.Cities.Where(row => row.Population > 1500 || row.Population < 500).Select(row => new { row.OfficialName }).ToList();",
        "generated": "context.Cities.Where(row => row.Population > 1500 || row.Population < 500).Select(row => new { row.OfficialName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "5c944b0f676266845da06233e2817741183b475cf4dc661242b5aea66dfef233",
        "db_name": "farm",
        "context_name": "FarmContext",
        "question": "Show the census ranking of cities whose status are not \"Village\".",
        "sql": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
        "linq": "context.Cities.Where(row => row.Status != \"Village\").Select(row => new { row.CensusRanking }).ToList();",
        "generated": "context.Cities.Where(row => row.Status!= \"Village\").Select(row => new { row.CensusRanking }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "dbc59e99481dafee19771a848bb8b476c71455907e33b9c94e4788ebadad1fea",
        "db_name": "customers_and_invoices",
        "context_name": "CustomersAndInvoicesContext",
        "question": "What is the order id and order details for the order more than two invoices.",
        "sql": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",
        "linq": "context.Invoices.Join(context.Orders, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.OrderId }).Where(group => group.Count() > 2).Select(group => new { group.Key.OrderId, group.First().T2.OrderDetails }).ToList();",
        "generated": "context.Invoices.Join(context.Orders, T1 => T1.OrderId, T2 => T2.OrderId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.InvoiceNumber > 2).Select(row => new { row.T2.OrderId, row.T2.OrderDetails }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 3}, {0: 9}]\nLINQ Results: [{0: 3}, {0: 9}, {0: 13}, {0: 8}, {0: 10}, {0: 10}, {0: 12}, {0: 11}, {0: 5}, {0: 3}, {0: 3}, {0: 4}, {0: 14}]\n"
    },
    {
        "id": "a3bdd60b00b115193a98b8bda6eb403b8c9134f0e96f139a5326d994145a90d1",
        "db_name": "customers_and_invoices",
        "context_name": "CustomersAndInvoicesContext",
        "question": "What is the customer last name, id and phone number with most number of orders?",
        "sql": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Orders.Join(context.Customers, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T2.CustomerLastName, group.Key.CustomerId, group.First().T2.PhoneNumber }).Take(1).ToList();",
        "generated": "context.Customers.Join(context.Orders, T1 => T1.CustomerId, T2 => T2.CustomerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.CustomerId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.CustomerLastName, group.Key.CustomerId, group.First().T1.PhoneNumber }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "3516abbafdee3c603760afc660246d37890ebf88d87f35c3107e5044c817a235",
        "db_name": "customers_and_invoices",
        "context_name": "CustomersAndInvoicesContext",
        "question": "Show all product names without an order.",
        "sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "linq": "context.Products.Select(row => row.ProductName).Except(context.Products.Join(context.OrderItems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Select(row => row.T1.ProductName)).ToList();",
        "generated": "context.Products.Where(row =>!context.OrderItems.Select(row => row.ProductId).Contains(row.ProductId)).Select(row => new { row.ProductName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "7c10e1c2358f47123ff3488454d0c4f134f4eded8f1cc242e5728eb409d51f4a",
        "db_name": "customers_and_invoices",
        "context_name": "CustomersAndInvoicesContext",
        "question": "Show the order ids and the number of items in each order.",
        "sql": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "linq": "context.OrderItems.GroupBy(row => new { row.OrderId }).Select(group => new { group.Key.OrderId, Count = group.Count() }).ToList();",
        "generated": "context.OrderItems.GroupBy(row => new { row.OrderId }).Select(group => new { group.Key.OrderId, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "6f26e24ac076fc593b692111fb55f12657d6833827af4b313738f70024aec77f",
        "db_name": "customers_and_invoices",
        "context_name": "CustomersAndInvoicesContext",
        "question": "Show the product ids and the number of unique orders containing each product.",
        "sql": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "linq": "context.OrderItems.GroupBy(row => new { row.ProductId }).Select(group => new { group.Key.ProductId, CountDistinctOrderId = group.Select(row => row.OrderId).Distinct().Count() }).ToList();",
        "generated": "context.OrderItems.GroupBy(row => new { row.ProductId }).Select(group => new { group.Key.ProductId, Count = group.Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 3, 1: 1}, {0: 4, 1: 2}, {0: 5, 1: 2}, {0: 7, 1: 1}, {0: 9, 1: 1}, {0: 10, 1: 1}, {0: 12, 1: 1}, {0: 13, 1: 1}, {0: 14, 1: 3}, {0: 15, 1: 1}]\nLINQ Results: [{0: 3, 1: 1}, {0: 4, 1: 2}, {0: 5, 1: 2}, {0: 7, 1: 1}, {0: 9, 1: 1}, {0: 10, 1: 1}, {0: 12, 1: 1}, {0: 13, 1: 1}, {0: 14, 1: 4}, {0: 15, 1: 1}]\n"
    },
    {
        "id": "ff02ccd34ab7c7d96d1992f3f2c90087be8dca8a42ba6a22a0099b4a4be43186",
        "db_name": "customers_and_invoices",
        "context_name": "CustomersAndInvoicesContext",
        "question": "Show all product names and the number of customers having an order on each product.",
        "sql": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
        "linq": "context.OrderItems.Join(context.Products, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Orders, joined => joined.T1.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T2.ProductName }).Select(group => new { group.Key.ProductName, Count = group.Count() }).ToList();",
        "generated": "context.Products.Join(context.OrderItems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Orders, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Customers, joined => joined.T3.CustomerId, T4 => T4.CustomerId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).GroupBy(row => new { row.T1.ProductId }).Select(group => new { group.Key.ProductId, ProductName = group.Select(row => row.T1.ProductName).Distinct().First(), CountOfCustomers = group.Select(row => row.T4.CustomerId).Distinct().Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Arts, 1: 2}, {0: Beer Menus, 1: 1}, {0: Chocolate, 1: 1}, {0: Fans, 1: 1}, {0: Hard Drive, 1: 2}, {0: Harry Potter 2, 1: 1}, {0: Harry Potter 3, 1: 4}, {0: Harry Potter 4, 1: 1}, {0: Learning English, 1: 1}, {0: TV, 1: 1}]\nLINQ Results: [{0: 3, 1: Fans, 2: 1}, {0: 4, 1: Hard Drive, 2: 2}, {0: 5, 1: Arts, 2: 2}, {0: 7, 1: Learning English, 2: 1}, {0: 9, 1: Beer Menus, 2: 1}, {0: 10, 1: TV, 2: 1}, {0: 12, 1: Harry Potter 2, 2: 1}, {0: 13, 1: Chocolate, 2: 1}, {0: 14, 1: Harry Potter 3, 2: 3}, {0: 15, 1: Harry Potter 4, 2: 1}]\n"
    },
    {
        "id": "5baed72cb5b854b1518dc3c900ae63aae78135de5ecba6418d2425e2ee0b2842",
        "db_name": "customers_and_invoices",
        "context_name": "CustomersAndInvoicesContext",
        "question": "Show order ids and the number of products in each order.",
        "sql": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
        "linq": "context.OrderItems.GroupBy(row => new { row.OrderId }).Select(group => new { group.Key.OrderId, CountDistinctProductId = group.Select(row => row.ProductId).Distinct().Count() }).ToList();",
        "generated": "context.Products.Join(context.OrderItems, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Orders, joined => joined.T2.OrderId, T3 => T3.OrderId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T3.OrderId }).Select(group => new { group.Key.OrderId, CountOfProducts = group.Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1, 1: 2}, {0: 2, 1: 1}, {0: 4, 1: 3}, {0: 10, 1: 1}, {0: 12, 1: 1}, {0: 13, 1: 3}, {0: 14, 1: 1}, {0: 15, 1: 2}]\nLINQ Results: [{0: 1, 1: 2}, {0: 2, 1: 1}, {0: 4, 1: 3}, {0: 10, 1: 1}, {0: 12, 1: 1}, {0: 13, 1: 4}, {0: 14, 1: 1}, {0: 15, 1: 2}]\n"
    },
    {
        "id": "7038ae31c7055b5d002ba323511a7612745e4a6c1592ab98f5ef3e4f97466561",
        "db_name": "customers_and_invoices",
        "context_name": "CustomersAndInvoicesContext",
        "question": "How many products were not included in any order?",
        "sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "linq": "context.Products.Where(row => !context.OrderItems.Select(row => row.ProductId).Contains(row.ProductId)).Count();",
        "generated": "context.Products.Where(row =>!context.OrderItems.Select(row => row.ProductId).Contains(row.ProductId)).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "af74022b3829597cd5b3530afe1081261f8558a8cf19ff792663d40a5883b28e",
        "db_name": "music_1",
        "context_name": "Music1Context",
        "question": "Find the names and number of works of the three artists who have produced the most songs.",
        "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "linq": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ArtistName }).Select(group => new { group.First().T1.ArtistName, Count = group.Count() }).OrderByDescending(group => group.Count).Take(3).ToList();",
        "generated": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ArtistName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ArtistName, Count = group.Count() }).Take(3).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "5c2cc0a2eaf6fe5b3856e2ce78fbde21d1b99e3981cb75b4bd4ebe2e790c251b",
        "db_name": "music_1",
        "context_name": "Music1Context",
        "question": "Find the country of origin for the artist who made the least number of songs?",
        "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1",
        "linq": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.ArtistName }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.Country }).Take(1).ToList();",
        "generated": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ArtistName }).OrderBy(group => group.Count()).Select(group => new { group.First().T1.Country }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "5e861be99b4438ab7bff50fa24f65edefb7f0b72e256d8d9dc6bf1933a308791",
        "db_name": "music_1",
        "context_name": "Music1Context",
        "question": "What are the names of the songs whose rating is below the rating of all songs in English?",
        "sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
        "linq": "context.Songs.Where(row => row.Rating < context.Songs.Where(row => row.Languages == \"english\").Select(row => row.Rating).Min()).Select(row => new { row.SongName }).ToList();",
        "generated": "context.Songs.Where(row => row.Languages == \"English\").Select(row => new { row.SongName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Shukno patar nupur pae}]\nLINQ Results: []\n"
    },
    {
        "id": "ed54c9536249114f468f5f4fbc96c760472700b2c13e0d8ad01f8285cb863bce",
        "db_name": "music_1",
        "context_name": "Music1Context",
        "question": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?",
        "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
        "linq": "context.Songs.Where(row => row.Resolution > context.Songs.Where(row => row.Rating < 8).Select(row => row.Resolution).Max()).Select(row => new { row.FId }).ToList();",
        "generated": "context.Songs.Where(row => row.Resolution > context.Songs.Where(row => row.Rating < 8).Select(row => row.Resolution).Max()).Select(row => row.SongName).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "59cbf96a9aff9fdffc33e233ebd3cba00af66e1409801e92e70f873bd48b5db1",
        "db_name": "music_1",
        "context_name": "Music1Context",
        "question": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?",
        "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")",
        "linq": "context.Songs.Where(row => row.Resolution > context.Songs.Where(row => row.GenreIs == \"modern\").Select(row => row.Resolution).Average()).Select(row => new { row.FId }).ToList();",
        "generated": "context.Songs.Where(row => row.Resolution > context.Songs.Where(row => row.GenreIs == \"modern\").Select(row => row.Resolution).Average()).Select(row => row.SongName).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1}, {0: 2}, {0: 4}, {0: 5}]\nLINQ Results: [{0: Tumi robe nirobe}, {0: Shukno patar nupur pae}, {0: My love}, {0: Just beat it}]\n"
    },
    {
        "id": "4d381fe3312c7eca93c89d11e2ebde13c1d195794e5b6a5aa0ef3aa1b1f7d1da",
        "db_name": "music_1",
        "context_name": "Music1Context",
        "question": "Find the top 3 artists who have the largest number of songs works whose language is Bangla.",
        "sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "linq": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Languages == \"bangla\").GroupBy(row => new { row.T2.ArtistName }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.ArtistName }).Take(3).ToList();",
        "generated": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Languages == \"Bangla\").GroupBy(row => new { row.T1.ArtistName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ArtistName }).Take(3).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Topu}, {0: Shrikanta}, {0: Prity}]\nLINQ Results: []\n"
    },
    {
        "id": "26fb37b226c7b7b7e1c8a1d8ca9acd7b6feb0f5677d7549123f90d2ee3bfe0c9",
        "db_name": "music_1",
        "context_name": "Music1Context",
        "question": "List the id, genre and artist name of English songs ordered by rating.",
        "sql": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "linq": "context.Songs.Where(row => row.Languages == \"english\").OrderBy(row => row.Rating).Select(row => new { row.FId, row.GenreIs, row.ArtistName }).ToList();",
        "generated": "context.Songs.Where(row => row.Languages == \"English\").OrderBy(row => row.Rating).Select(row => new { row.FId, row.GenreIs, row.ArtistName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 4, 1: blues, 2: Enrique}, {0: 5, 1: pop, 2: Michel}]\nLINQ Results: []\n"
    },
    {
        "id": "d300ae58a174275606b657992b14288f1468be2509ffc78559a9f97a8c777fcd",
        "db_name": "music_1",
        "context_name": "Music1Context",
        "question": "List the duration, file size and format of songs whose genre is pop, ordered by title?",
        "sql": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name",
        "linq": "context.Files.Join(context.Songs, T1 => T1.FId, T2 => T2.FId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.GenreIs == \"pop\").OrderBy(row => row.T2.SongName).Select(row => new { row.T1.Duration, row.T1.FileSize, row.T1.Formats }).ToList();",
        "generated": "context.Files.Join(context.Artists, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Join(context.Songs, joined => joined.T1.FId, T3 => T3.FId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.GenreIs == \"pop\").OrderBy(row => row.T3.SongName).Select(row => new { row.T1.Duration, row.T1.FileSize, row.T1.Formats }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "74d71a870b22df74995fb4866f0af0e28d0cb4e6eb0063dad4e02a7eba323117",
        "db_name": "music_1",
        "context_name": "Music1Context",
        "question": "Find the names of the artists who have produced English songs but have never received rating higher than 8.",
        "sql": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "linq": "context.Songs.Where(row => row.Languages == \"english\").Select(row => row.ArtistName).Distinct().Except(context.Songs.Where(row => row.Rating > 8).Select(row => row.ArtistName).Distinct()).ToList();",
        "generated": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Languages == \"English\" && row.T2.Rating <= 8).Select(row => new { row.T1.ArtistName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Enrique}, {0: Michel}]\nLINQ Results: []\n"
    },
    {
        "id": "f310c77c7df2ce86935317815e10a98bd290e10254aef4c981f7ccbd0c0f4dc6",
        "db_name": "music_1",
        "context_name": "Music1Context",
        "question": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.",
        "sql": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "linq": "context.Artists.Where(row => row.Country == \"Bangladesh\").Select(row => row.ArtistName).Distinct().Except(context.Songs.Where(row => row.Rating > 7).Select(row => row.ArtistName).Distinct()).ToList();",
        "generated": "context.Artists.Join(context.Songs, T1 => T1.ArtistName, T2 => T2.ArtistName, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Country == \"Bangladesh\" && row.T2.Rating < 7).Select(row => row.T1.ArtistName).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Farida}, {0: Prity}]\nLINQ Results: [{0: Prity}]\n"
    },
    {
        "id": "48c2ebf6901d3957d37cc5a887f336b5cf6b56830389ad4e69502ec8399351ea",
        "db_name": "ship_1",
        "context_name": "Ship1Context",
        "question": "Find the name of the ships that have more than one captain.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1",
        "linq": "context.Ships.Join(context.Captains, t1 => t1.ShipId, t2 => t2.ShipId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.ShipId }).Where(group => group.Count() > 1).Select(group => new { group.First().t1.Name }).ToList();",
        "generated": "context.Captains.GroupBy(row => new { row.ShipId }).Where(group => group.Count() > 1).Select(group => new { group.Key.ShipId, ShipsName = context.Ships.Where(row => row.ShipId == group.Key.ShipId).Select(row => row.Name).FirstOrDefault() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: HMS Gorgon}, {0: HM Cutter Avenger}]\nLINQ Results: [{0: 2, 1: HMS Gorgon}, {0: 3, 1: HM Cutter Avenger}]\n"
    },
    {
        "id": "e385bf654181b2903dbc321380cd723ed4e063761b069b8f58b619f4da7f3669",
        "db_name": "ship_1",
        "context_name": "Ship1Context",
        "question": "what are the names and classes of the ships that do not have any captain yet?",
        "sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",
        "linq": "context.Ships.Where(row => !context.Captains.Select(row => row.ShipId).Contains(row.ShipId)).Select(row => new { row.Name, row.Class }).ToList();",
        "generated": "context.Ships.Where(row =>!context.Captains.Select(row => row.ShipId).Contains(row.ShipId)).Select(row => new { row.Name, row.Class }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "133a9c3bb500a3ad502eab01b196146b87af9da94e47eaf7d1ee4f1b56b5c159",
        "db_name": "ship_1",
        "context_name": "Ship1Context",
        "question": "Find the name of the ship that is steered by the youngest captain.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1",
        "linq": "context.Ships.Join(context.Captains, t1 => t1.ShipId, t2 => t2.ShipId, (t1, t2) => new { t1, t2 }).OrderBy(row => row.t2.Age).Select(row => new { row.t1.Name }).Take(1).ToList();",
        "generated": "context.Captains.Join(context.Ships, T1 => T1.ShipId, T2 => T2.ShipId, (T1, T2) => new { T1, T2 }).OrderBy(row => row.T1.Age).Select(row => new { row.T2.Name }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "47f6b5f646cf04aeda406fc39603466ded528aa61a65b5a44bf405a2937f7e91",
        "db_name": "ship_1",
        "context_name": "Ship1Context",
        "question": "Find the name and flag of ships that are not steered by any captain with Midshipman rank.",
        "sql": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')",
        "linq": "context.Ships.Where(row => !context.Captains.Where(row => row.Rank == \"Midshipman\").Select(row => row.ShipId).Contains(row.ShipId)).Select(row => new { row.Name, row.Flag }).ToList();",
        "generated": "context.Captains.Join(context.Ships, T1 => T1.ShipId, T2 => T2.ShipId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Rank!= \"Midshipman\").Select(row => new { row.T2.Name, row.T2.Flag }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: HMS Destiny, 1: Panama}, {0: HMS Trojan, 1: Panama}, {0: HM Sloop Sparrow, 1: Panama}, {0: HMS Phalarope, 1: Panama}, {0: HMS Undine, 1: Malta}]\nLINQ Results: [{0: HMS Destiny, 1: Panama}, {0: HMS Gorgon, 1: Panama}, {0: HM Cutter Avenger, 1: Panama}]\n"
    },
    {
        "id": "2b0e2e932c6b4a4a0498aa5d435c6fe197cbaad0ba10143f6d6cf3ca4d8b81c5",
        "db_name": "ship_1",
        "context_name": "Ship1Context",
        "question": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'",
        "linq": "context.Ships.Join(context.Captains, t1 => t1.ShipId, t2 => t2.ShipId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Rank == \"Midshipman\").Select(row => row.t1.Name).Intersect(context.Ships.Join(context.Captains, t1 => t1.ShipId, t2 => t2.ShipId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Rank == \"Lieutenant\").Select(row => row.t1.Name)).ToList();",
        "generated": "context.Captains.Join(context.Captains, T1 => T1.CaptainId, T2 => T2.CaptainId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Rank == \"Midshipman\" && row.T2.Rank == \"Lieutenant\").Select(row => row.T1.ShipName).Distinct().ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,222): error CS1061: 'Captain' does not contain a definition for 'ShipName' and no accessible extension method 'ShipName' accepting a first argument of type 'Captain' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.34"
    },
    {
        "id": "6ad61911bd7739c6966bcaff27c85113755b9e2898e84286f02c4456ae2cb049",
        "db_name": "solvency_ii",
        "context_name": "SolvencyIiContext",
        "question": "Show the names of products that are in at least two events.",
        "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2",
        "linq": "context.Products.Join(context.ProductsInEvents, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductName }).Where(group => group.Count() >= 2).Select(group => new { group.Key.ProductName }).ToList();",
        "generated": "context.Products.Join(context.ProductsInEvents, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductId }).Where(group => group.Count() >= 2).Select(group => new { group.First().T1.ProductName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "6febd29301833a85395c66548e1b467976d31bd3752079a8e735cacdab2e339e",
        "db_name": "solvency_ii",
        "context_name": "SolvencyIiContext",
        "question": "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
        "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name",
        "linq": "context.Products.Join(context.ProductsInEvents, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ProductName }).Where(group => group.Count() >= 2).OrderBy(group => group.First().T1.ProductName).Select(group => new { group.Key.ProductName }).ToList();",
        "generated": "context.Products.Join(context.ProductsInEvents, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Join(context.Events, joined => joined.T2.EventId, T3 => T3.EventId, (joined, T3) => new { joined.T1, joined.T2, T3 }).GroupBy(row => new { row.T1.ProductName }).Select(group => group.Key.ProductName).OrderBy(group => group).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Men suits}, {0: Special Dinning}, {0: TV Equipments}]\nLINQ Results: [{0: Conference Equipments}, {0: Dinning}, {0: Men suits}, {0: Special Dinning}, {0: TV Equipments}, {0: Trading Policy}, {0: Trading Policy B}]\n"
    },
    {
        "id": "dbdd27f51399b50f1495e08d706ac55961a47c4cedc13ed3d8de809b91a1905a",
        "db_name": "solvency_ii",
        "context_name": "SolvencyIiContext",
        "question": "List the names of products that are not in any event.",
        "sql": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)",
        "linq": "context.Products.Where(row => !context.ProductsInEvents.Select(row => row.ProductId).Contains(row.ProductId)).Select(row => new { row.ProductName }).ToList();",
        "generated": "context.Products.Where(row =>!context.ProductsInEvents.Select(row => row.ProductId).Contains(row.ProductId)).Select(row => new { row.ProductName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "a3f829f47ea11b5b3f9afc477477de5b5dfa16367656719977d698e144296f72",
        "db_name": "gas_company",
        "context_name": "GasCompanyContext",
        "question": "Show all locations where a gas station for company with market value greater than 100 is located.",
        "sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100",
        "linq": "context.StationCompanies.Join(context.Companies, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).Join(context.GasStations, joined => joined.T1.StationId, T3 => T3.StationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.MarketValue > 100).Select(row => new { row.T3.Location }).ToList();",
        "generated": "context.GasStations.Join(context.StationCompanies, t2 => t2.StationId, t1 => t1.StationId, (t2, t1) => new { t2, t1 }).Join(context.Companies, joined => joined.t1.CompanyId, t3 => t3.CompanyId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t3.MarketValue > 100).Select(row => new { row.t2.Location }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "d1796adeedb6c20824e5bb9d99f5e9707b217a6185483db084d44fcd3fe1c529",
        "db_name": "gas_company",
        "context_name": "GasCompanyContext",
        "question": "Show the manager name with most number of gas stations opened after 2000.",
        "sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.GasStations.Where(row => row.OpenYear > 2000).GroupBy(row => new { row.ManagerName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ManagerName }).Take(1).ToList();",
        "generated": "context.GasStations.Where(row => row.OpenYear > 2000).GroupBy(row => new { row.ManagerName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.ManagerName }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "6704d7997fa58ec851d5d3093622674f3f845bf66e8f29b69c9df5ba6a704334",
        "db_name": "gas_company",
        "context_name": "GasCompanyContext",
        "question": "order all gas station locations by the opening year.",
        "sql": "SELECT LOCATION FROM gas_station ORDER BY open_year",
        "linq": "context.GasStations.OrderBy(row => row.OpenYear).Select(row => new { row.Location }).ToList();",
        "generated": "context.GasStations.OrderBy(row => row.OpenYear).Select(row => new { row.Location }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b1a96e53a4bb82a1a408300c362d109323d9500a8da3f78f8970a6e811f4e561",
        "db_name": "gas_company",
        "context_name": "GasCompanyContext",
        "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
        "sql": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
        "linq": "context.Companies.Where(row => row.MainIndustry == \"Banking\").OrderBy(row => row.SalesBillion).ThenBy(row => row.ProfitsBillion).Select(row => new { row.Rank, row.Company1, row.MarketValue }).ToList();",
        "generated": "context.Companies.Where(row => row.MainIndustry == \"Banking\").OrderBy(row => row.SalesBillion).OrderBy(row => row.ProfitsBillion).Select(row => new { row.Rank, row.Company1, row.MarketValue }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b519d669cf631e985f39bba59db89ea916576f263691f57e93fc3a769bf05cb1",
        "db_name": "gas_company",
        "context_name": "GasCompanyContext",
        "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.",
        "sql": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
        "linq": "context.StationCompanies.Join(context.Companies, T1 => T1.CompanyId, T2 => T2.CompanyId, (T1, T2) => new { T1, T2 }).Join(context.GasStations, joined => joined.T1.StationId, T3 => T3.StationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).OrderByDescending(row => row.T2.AssetsBillion).Select(row => new { row.T3.Location, row.T3.RepresentativeName }).Take(3).ToList();",
        "generated": "context.Companies.OrderByDescending(row => row.AssetsBillion).Select(row => new { row.Company1, row.AssetsBillion }).Take(3).ToList().Select(row => context.StationCompanies.Where(row1 => row1.CompanyId == row.CompanyId).Select(row2 => new { row2.StationId, row2.RankOfTheYear }).Select(row3 => context.GasStations.Where(row4 => row3.StationId == row4.StationId).Select(row5 => new { row5.Location, row5.RepresentativeName })).ToList()[0]).Select(row => new { row.Location, row.RepresentativeName }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,229): error CS1061: '<anonymous type: string Company1, double? AssetsBillion>' does not contain a definition for 'CompanyId' and no accessible extension method 'CompanyId' accepting a first argument of type '<anonymous type: string Company1, double? AssetsBillion>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.41"
    },
    {
        "id": "0ffdb235bcdea7ff9ebabb02c049b2885512c0742ead1453b6d786df654ae7f3",
        "db_name": "network_2",
        "context_name": "Network2Context",
        "question": "Who has friends that are older than the average age? Print their friends and their ages as well",
        "sql": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
        "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Age > context.People.Select(row => row.Age).Average()).Select(row => new { row.T2.Name, row.T2.Friend, row.T1.Age }).Distinct().ToList();",
        "generated": "context.People.Join(context.PeopleFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Join(context.People, joined => joined.T2.Name, T3 => T3.Name, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Age < row.T1.Age).Select(row => new { row.T2.Friend, row.T1.Age }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,48): error CS1061: 'Network2Context' does not contain a definition for 'PeopleFriends' and no accessible extension method 'PeopleFriends' accepting a first argument of type 'Network2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.75"
    },
    {
        "id": "61509cfa91c0335de1be5f88a29b864eace8657de21bbfff8c38ee0ebc055f14",
        "db_name": "network_2",
        "context_name": "Network2Context",
        "question": "Who is the friend of Zach with longest year relationship?",
        "sql": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "linq": "context.PersonFriends.Where(row => row.Name == \"Zach\" && row.Year == context.PersonFriends.Where(row => row.Name == \"Zach\").Select(row => row.Year).Max()).Select(row => new { row.Friend }).ToList();",
        "generated": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Join(context.People, joined => joined.T2.Name, T3 => T3.Name, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Zach\").OrderByDescending(row => row.T2.Year).Select(row => new { row.T3.Name }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Dan}]\nLINQ Results: [{0: Bob}]\n"
    },
    {
        "id": "3e9583e9ab05c480694e5c4aede0eb3d731c1c46da8f606e85594a87c8e831a8",
        "db_name": "network_2",
        "context_name": "Network2Context",
        "question": "What is the age of the friend of Zach with longest year relationship?",
        "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Zach\" && row.T2.Year == context.PersonFriends.Where(row => row.Name == \"Zach\").Select(row => row.Year).Max()).Select(row => new { row.T1.Age }).ToList();",
        "generated": "context.People.Join(context.PersonFriends, t1 => t1.Name, t2 => t2.Friend, (t1, t2) => new { t1, t2 }).Join(context.People, joined => joined.t2.Name, t3 => t3.Name, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.Name == \"Zach\").OrderByDescending(row => row.t2.Year).Select(row => new { row.t3.Age }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 26}]\nLINQ Results: [{0: 35}]\n"
    },
    {
        "id": "1fc4776b60e6886318705f9c3d4bd0dfc3b14006d51a5a8d531d04c6b5b6eaae",
        "db_name": "network_2",
        "context_name": "Network2Context",
        "question": "Find the name of persons who are friends with Alice for the shortest years.",
        "sql": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "linq": "context.PersonFriends.Where(row => row.Friend == \"Alice\" && row.Year == context.PersonFriends.Where(row => row.Friend == \"Alice\").Select(row => row.Year).Min()).Select(row => new { row.Name }).ToList();",
        "generated": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Alice\").OrderBy(row => row.T2.Year).Select(row => new { row.T1.Name }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Zach}]\nLINQ Results: [{0: Alice}]\n"
    },
    {
        "id": "ced168f4645e9fb9ef9865f1496e08224c98d89d5b35b006b8660e5b2e9009ec",
        "db_name": "network_2",
        "context_name": "Network2Context",
        "question": "Find the name, age, and job title of persons who are friends with Alice for the longest years.",
        "sql": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Friend == \"Alice\" && row.T2.Year == context.PersonFriends.Where(row => row.Friend == \"Alice\").Select(row => row.Year).Max()).Select(row => new { row.T1.Name, row.T1.Age, row.T1.Job }).ToList();",
        "generated": "context.People.Join(context.PersonFriends, t1 => t1.Name, t2 => t2.Friend, (t1, t2) => new { t1, t2 }).Where(row => row.t2.Friend == \"Alice\").OrderByDescending(row => row.t2.Year).Select(row => new { row.t1.Name, row.t1.Age, row.t1.Job }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Zach, 1: 45, 2: doctor}]\nLINQ Results: [{0: Alice, 1: 25, 2: student}]\n"
    },
    {
        "id": "1160426c265eddc6a4d1a9dd1e390ca5c4abe865a3dd6d3a6b84e758017c9200",
        "db_name": "network_2",
        "context_name": "Network2Context",
        "question": "Who is the person that has no friend?",
        "sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
        "linq": "context.People.Select(row => row.Name).Except(context.PersonFriends.Select(row => row.Name)).ToList();",
        "generated": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Where(group => group.All(row => row.T2 == null)).Select(group => group.Key.Name).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.InvalidOperationException: Cannot translate the '==' on an expression of entity type 'PersonFriend' because it is a keyless entity. Consider using entity properties instead. For more information on keyless entity types, see https://go.microsoft.com/fwlink/?linkid=2141943.\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.<>c__DisplayClass63_0.<TryRewriteStructuralTypeEquality>g__TryRewriteEntityEquality|0(Expression& result)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.TryRewriteStructuralTypeEquality(ExpressionType nodeType, Expression left, Expression right, Boolean equalsMethod, Expression& result)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitBinary(BinaryExpression binaryExpression)\n   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlTranslatingExpressionVisitor.VisitBinary(BinaryExpression binaryExpression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.TranslateInternal(Expression expression, Boolean applyDefaultTypeMapping)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.Translate(Expression expression, Boolean applyDefaultTypeMapping)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateExpression(Expression expression, Boolean applyDefaultTypeMapping)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateLambdaExpression(ShapedQueryExpression shapedQueryExpression, LambdaExpression lambdaExpression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateAll(ShapedQueryExpression source, LambdaExpression predicate)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateSubquery(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.TranslateInternal(Expression expression, Boolean applyDefaultTypeMapping)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.Translate(Expression expression, Boolean applyDefaultTypeMapping)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateExpression(Expression expression, Boolean applyDefaultTypeMapping)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateLambdaExpression(ShapedQueryExpression shapedQueryExpression, LambdaExpression lambdaExpression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateWhere(ShapedQueryExpression source, LambdaExpression predicate)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.GetEnumerator()\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "7400abbc0ecdb9f879d4e7f5c3705d97fb1b76d5e34511531d6993b2c1f5292a",
        "db_name": "network_2",
        "context_name": "Network2Context",
        "question": "Which person whose friends have the oldest average age?",
        "sql": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1",
        "linq": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).Select(group => new { group.Key.Name, AverageAge = group.Select(row => row.T1.Age).Average() }).OrderByDescending(group => group.AverageAge).Take(1).ToList();",
        "generated": "context.People.Join(context.PeopleFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.Name }).OrderByDescending(group => group.Select(row => row.T1.Age).Average()).Select(group => new { group.Key.Name }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,48): error CS1061: 'Network2Context' does not contain a definition for 'PeopleFriends' and no accessible extension method 'PeopleFriends' accepting a first argument of type 'Network2Context' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.34"
    },
    {
        "id": "3c8619c1d837a5a5457971d052b60098c4604b5071e1fc09501896ccdf103aa3",
        "db_name": "network_2",
        "context_name": "Network2Context",
        "question": "What is the total number of people who has no friend living in the city of Austin.",
        "sql": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
        "linq": "context.PersonFriends.Where(row => !context.People.Where(row => row.City == \"Austin\").Select(row => row.Name).Contains(row.Friend)).Select(row => row.Name).Distinct().Count();",
        "generated": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Year == null).Select(row => row.T1.Name).Distinct().Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 3}]\nLINQ Results: [{0: 0}]\n"
    },
    {
        "id": "16ee22d1ebdc50e44d01fc6a61c41d98f0733e4a174c96a229fb139974ee06bd",
        "db_name": "network_2",
        "context_name": "Network2Context",
        "question": "Find Alice's friends of friends.",
        "sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'",
        "linq": "context.PersonFriends.Join(context.People, T1 => T1.Name, T2 => T2.Name, (T1, T2) => new { T1, T2 }).Join(context.PersonFriends, joined => joined.T1.Friend, T3 => T3.Name, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.PersonFriends, joined => joined.T3.Friend, T4 => T4.Name, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T2.Name == \"Alice\" && row.T4.Name != \"Alice\").Select(row => new { row.T4.Name }).Distinct().ToList();",
        "generated": "context.People.Join(context.PersonFriends, T1 => T1.Name, T2 => T2.Friend, (T1, T2) => new { T1, T2 }).Join(context.People, joined => joined.T2.Name, T3 => T3.Name, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Alice\").Select(row => new { row.T3.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "ae72e185e0f0e07a83700e01ea047be3588d562afcf86d909edca30c379be25a",
        "db_name": "hr_1",
        "context_name": "Hr1Context",
        "question": "display the department id and the total salary for those departments which contains at least two employees.",
        "sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2",
        "linq": "context.Employees.GroupBy(row => new { row.DepartmentId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.DepartmentId, SumSalary = group.Select(row => row.Salary).Sum() }).ToList();",
        "generated": "context.Employees.GroupBy(row => new { row.DepartmentId }).Where(group => group.Count() >= 2).Select(group => new { group.Key.DepartmentId, SumSalary = group.Select(row => row.Salary).Sum() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "190f108aebc53abe6bc1a22eb585ede91d50a9bfd562bd4233077cfe79276d5d",
        "db_name": "hr_1",
        "context_name": "Hr1Context",
        "question": "display the first and last name, department, city, and state province for each employee.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id",
        "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Locations, joined => joined.T2.LocationId, T3 => T3.LocationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.FirstName, row.T1.LastName, row.T2.DepartmentName, row.T3.City, row.T3.StateProvince }).ToList();",
        "generated": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Locations, joined => joined.T2.LocationId, T3 => T3.LocationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.FirstName, row.T1.LastName, row.T2.DepartmentName, row.T3.City, row.T3.StateProvince }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "76541c8b226fb8ac49b0fb0df071f968b19f9bb34e1d2e9077321bf858e08495",
        "db_name": "hr_1",
        "context_name": "Hr1Context",
        "question": "display those employees who contain a letter z to their first name and also display their last name, city.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'",
        "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Locations, joined => joined.T2.LocationId, T3 => T3.LocationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => EF.Functions.Like(row.T1.FirstName, \"%z%\")).Select(row => new { row.T1.FirstName, row.T1.LastName, row.T3.City }).ToList();",
        "generated": "context.Employees.Where(row => row.FirstName.Contains(\"z\")).Join(context.Locations, T1 => T1.ManagerId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.LastName, row.T2.City }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Mozhe, 1: Atkinson, 2: South San Francisco}, {0: Hazel, 1: Philtanker, 2: South San Francisco}, {0: Elizabeth, 1: Bates, 2: OX9 9ZB}]\nLINQ Results: []\n"
    },
    {
        "id": "cb69f14d3e1296cff3eb601850c7a769d20bd8a9ebfe7c0ff251915b4edd1601",
        "db_name": "hr_1",
        "context_name": "Hr1Context",
        "question": "display the department name, city, and state province for each department.",
        "sql": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id",
        "linq": "context.Departments.Join(context.Locations, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.DepartmentName, row.T2.City, row.T2.StateProvince }).ToList();",
        "generated": "context.Departments.Join(context.Locations, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Select(row => new { row.T1.DepartmentName, row.T2.City, row.T2.StateProvince }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b0a7270107f7f461d14846184459aa8d4390e6b31a8fbb8aef4d34044d7b6bc1",
        "db_name": "hr_1",
        "context_name": "Hr1Context",
        "question": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.",
        "sql": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Locations, joined => joined.T2.LocationId, T3 => T3.LocationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Countries, joined => joined.T3.CountryId, T4 => T4.CountryId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Select(row => new { row.T1.FirstName, row.T1.LastName, row.T1.EmployeeId, row.T4.CountryName }).ToList();",
        "generated": "context.Employees.Join(context.Locations, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1, T2 }).Join(context.Countries, joined => joined.T2.CountryId, T3 => T3.CountryId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Select(row => new { row.T1.FirstName, row.T1.LastName, row.T2.CountryName }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,71): error CS1061: 'Employee' does not contain a definition for 'LocationId' and no accessible extension method 'LocationId' accepting a first argument of type 'Employee' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.20"
    },
    {
        "id": "7f7acc6c799b80947208c8b2af3fbf742399387311a9d4ea63d22c21d7064732",
        "db_name": "hr_1",
        "context_name": "Hr1Context",
        "question": "display the department name and number of employees in each of the department.",
        "sql": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name",
        "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T2.DepartmentName }).Select(group => new { group.Key.DepartmentName, Count = group.Count() }).ToList();",
        "generated": "context.Departments.Join(context.Employees, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DepartmentId }).Select(group => new { group.Key.DepartmentId, DepartmentName = group.First().T1.DepartmentName, CountOfEmployees = group.Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Accounting, 1: 2}, {0: Administration, 1: 1}, {0: Executive, 1: 3}, {0: Finance, 1: 6}, {0: Human Resources, 1: 1}, {0: IT, 1: 5}, {0: Marketing, 1: 2}, {0: Public Relations, 1: 1}, {0: Purchasing, 1: 6}, {0: Sales, 1: 34}, {0: Shipping, 1: 45}]\nLINQ Results: [{0: 10, 1: Administration, 2: 1}, {0: 20, 1: Marketing, 2: 2}, {0: 30, 1: Purchasing, 2: 6}, {0: 40, 1: Human Resources, 2: 1}, {0: 50, 1: Shipping, 2: 45}, {0: 60, 1: IT, 2: 5}, {0: 70, 1: Public Relations, 2: 1}, {0: 80, 1: Sales, 2: 34}, {0: 90, 1: Executive, 2: 3}, {0: 100, 1: Finance, 2: 6}, {0: 110, 1: Accounting, 2: 2}]\n"
    },
    {
        "id": "ffad4102af6d0d2d44f2dc41270974e439aeea09008a4de6dcbe37fe1f097844",
        "db_name": "hr_1",
        "context_name": "Hr1Context",
        "question": "display the full name (first and last name), and salary of those employees who working in any department located in London.",
        "sql": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'",
        "linq": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Locations, joined => joined.T2.LocationId, T3 => T3.LocationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.City == \"London\").Select(row => new { row.T1.FirstName, row.T1.LastName, row.T1.Salary }).ToList();",
        "generated": "context.Employees.Join(context.Departments, T1 => T1.DepartmentId, T2 => T2.DepartmentId, (T1, T2) => new { T1, T2 }).Join(context.Locations, joined => joined.T2.LocationId, T3 => T3.LocationId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.City == \"London\").Select(row => new { row.T1.FirstName, row.T1.LastName, row.T1.Salary }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "bd35576dd9a0fa6a1f7a83124d3c85b305a97a3b50ec48bd76d4c9a46ca25db2",
        "db_name": "college_3",
        "context_name": "College3Context",
        "question": "Find the full names of faculties who are members of department with department number 520.",
        "sql": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
        "linq": "context.Faculties.Join(context.MemberOfs, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Dno == 520).Select(row => new { row.T1.Fname, row.T1.Lname }).ToList();",
        "generated": "context.Faculties.Join(context.MemberOfs, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Dno == 520).Select(row => new { row.T1.Lname, row.T1.Fname }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Richard, 1: Joseph}, {0: Jacob, 1: Khurgin}, {0: Lawrence, 1: Wolff}, {0: Andreas, 1: Andreou}, {0: William, 1: Brody}, {0: Gert, 1: Cauwenberghs}, {0: Oliver, 1: Collins}, {0: Frederic, 1: Davidson}, {0: John, 1: Goutsias}, {0: Brian, 1: Hughes}, {0: Pablo, 1: Iglesias}, {0: Frederick, 1: Jelinek}, {0: Alexander, 1: Kaplan}, {0: Gerard, 1: Meyer}, {0: Jerry, 1: Prince}, {0: Wilson, 1: Rugh}, {0: Thordur, 1: Runolfsson}, {0: Howard, 1: Weinert}, {0: Charles, 1: Westgate}, {0: William, 1: Byrne}, {0: Robert, 1: Glaser}]\nLINQ Results: [{0: Joseph, 1: Richard}, {0: Khurgin, 1: Jacob}, {0: Wolff, 1: Lawrence}, {0: Andreou, 1: Andreas}, {0: Brody, 1: William}, {0: Cauwenberghs, 1: Gert}, {0: Collins, 1: Oliver}, {0: Davidson, 1: Frederic}, {0: Goutsias, 1: John}, {0: Hughes, 1: Brian}, {0: Iglesias, 1: Pablo}, {0: Jelinek, 1: Frederick}, {0: Kaplan, 1: Alexander}, {0: Meyer, 1: Gerard}, {0: Prince, 1: Jerry}, {0: Rugh, 1: Wilson}, {0: Runolfsson, 1: Thordur}, {0: Weinert, 1: Howard}, {0: Westgate, 1: Charles}, {0: Byrne, 1: William}, {0: Glaser, 1: Robert}]\n"
    },
    {
        "id": "008eda8f9fd63397413f4ba7f26daa6ecc28706be6e3d262fa92471f0af3ed0e",
        "db_name": "college_3",
        "context_name": "College3Context",
        "question": "What are the first names and last names of the students that minor in the department with DNO 140.",
        "sql": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "linq": "context.MinorIns.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Dno == 140).Select(row => new { row.T2.Fname, row.T2.Lname }).ToList();",
        "generated": "context.Students.Join(context.MinorIns, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Dno, T3 => T3.Dno, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Dno == 140).Select(row => new { row.T1.Fname, row.T1.Lname }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "cbf1be80f73721947fb676125b909b710b363f369bcf1110629aaba918843e86",
        "db_name": "college_3",
        "context_name": "College3Context",
        "question": "Find the last names of faculties who are members of computer science department.",
        "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"",
        "linq": "context.Departments.Join(context.MemberOfs, T1 => T1.Dno, T3 => T3.Dno, (T1, T3) => new { T1, T3 }).Join(context.Faculties, joined => joined.T3.FacId, T2 => T2.FacId, (joined, T2) => new { joined.T1, joined.T3, T2 }).Where(row => row.T1.Dname == \"Computer Science\").Select(row => new { row.T2.Lname }).ToList();",
        "generated": "context.Faculties.Join(context.MemberOfs, T1 => T1.FacId, T2 => T2.FacId, (T1, T2) => new { T1, T2 }).Join(context.Departments, joined => joined.T2.Dno, T3 => T3.Dno, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Division == \"CS\").Select(row => new { row.T1.Lname }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Brill}, {0: Amir}, {0: Awerbuch}, {0: Goodrich}, {0: Kosaraju}, {0: Kumar}, {0: Masson}, {0: Salzberg}, {0: Smith}, {0: Taylor}, {0: Wolff}, {0: Yarowsky}, {0: Angelopoulou}, {0: Beach}, {0: Delcher}, {0: Jones}, {0: Giuliano}, {0: Houlahan}, {0: Brent}, {0: Jelinek}]\nLINQ Results: []\n"
    },
    {
        "id": "f58dc9943420254a3d9c396dc34b9dda5ba3bdb59afae99f31e93978616e72e0",
        "db_name": "college_3",
        "context_name": "College3Context",
        "question": "Find the average grade point of student whose last name is Smith.",
        "sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"",
        "linq": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Lname == \"Smith\").Select(row => (double) row.T2.Gradepoint).Average();",
        "generated": "context.EnrolledIns.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Lname == \"Smith\").Select(row => row.T1.Gradepoint).Average();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,182): error CS1061: 'EnrolledIn' does not contain a definition for 'Gradepoint' and no accessible extension method 'Gradepoint' accepting a first argument of type 'EnrolledIn' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.97"
    },
    {
        "id": "d25a08e233478e75e2c537daa002dd9c8e7e75466c1adbaf5f80d7b9ba6666f7",
        "db_name": "college_3",
        "context_name": "College3Context",
        "question": "What is the maximum and minimum grade point of students who live in NYC?",
        "sql": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"",
        "linq": "context.EnrolledIns.Join(context.Gradeconversions, T1 => T1.Grade, T2 => T2.Lettergrade, (T1, T2) => new { T1, T2 }).Join(context.Students, joined => joined.T1.StuId, T3 => T3.StuId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.CityCode == \"NYC\").GroupBy(row => 1).Select(group => new { MaxGradepointT2 = group.Select(row => row.T2.Gradepoint).Max(), MinGradepointT2 = group.Select(row => row.T2.Gradepoint).Min() }).ToList();",
        "generated": "context.EnrolledIns.Join(context.Students, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.CityCode == \"NYC\").Select(row => new { row.T1.Grade, row.T2.Age }).GroupBy(row => new { row.Age }).Select(group => new { group.Key.Age, MaxGrade = group.Select(row => row.Grade).Max(), MinGrade = group.Select(row => row.Grade).Min() }).OrderBy(group => group.Age).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 4, 1: 2}]\nLINQ Results: [{0: 19, 1: C, 2: A}, {0: 20, 1: B+, 2: A}, {0: 22, 1: A, 2: A}]\n"
    },
    {
        "id": "67849e243419afd2e4a44bcc8a56f7d2048a6eaef1524768b3d11cb258f1fae0",
        "db_name": "college_3",
        "context_name": "College3Context",
        "question": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.",
        "sql": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "linq": "context.Courses.Where(row => row.Credits == 3).Select(row => row.Cname).Union(context.Courses.Where(row => row.Credits == 1 && row.Hours == \"4\").Select(row => row.Cname)).ToList();",
        "generated": "context.Courses.Where(row => row.Credits == 3 || (row.Credits == 1 && row.Hours == \"4\")).Select(row => new { row.Cname }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: ACCOUNTING I}, {0: ACCOUNTING II}, {0: ALGORITHMS I}, {0: ANALOG AND DIGITAL VLSI SYSTEMS}, {0: BASIC COMMUNICATIONS}, {0: BUSINESS LAW I}, {0: BUSINESS LAW II}, {0: COMBINATORIAL ANALYSIS}, {0: COMP. MODELS OF SENTENCE PROCESSING}, {0: COMPUTATIONAL MODELS}, {0: COMPUTER LITERACY}, {0: COMPUTER SCIENCE INTERNSHIP}, {0: COMPUTER SYSTEM FUNDAMENTALS}, {0: COMPUTER SYSTEMS}, {0: COMPUTER VISION}, {0: CONTROL SYSTEMS}, {0: DATA STRUCTURES in JAVA}, {0: DATABASE SYSTEMS}, {0: DISTRIBUTED SYSTEMS}, {0: ECE LABORATORY}, {0: EXPLORING THE INTERNET}, {0: FIBER OPTICS AND PHOTONICS}, {0: FIELDS, MATTER AND WAVES}, {0: FORMAL METHODS IN COGNITIVE SCIENCE}, {0: FOUNDATIONS OF OPTIMIZATION}, {0: HIGH PERFORMANCE GRAPHICS AND MODELING}, {0: INTEGRATED ELECTRONICS}, {0: INTRO TO NATURAL LANGUAGE PROCESSING}, {0: INTRO TO PROGRAMMING IN C/C++}, {0: INTRO TO PROGRAMMING IN JAVA}, {0: INTRODUCTION TO ALGORITHMS}, {0: INTRODUCTION TO COMPUTER SCIENCE}, {0: INTRODUCTION TO ECE}, {0: INTRODUCTION TO NON-LINEAR SYSTEMS}, {0: ITERATIVE ALGORITHMS}, {0: JAVA PROGRAMMING}, {0: LANGUAGE AND MIND}, {0: LANGUAGE DEVELOPMENT}, {0: MICROPROCESSOR LAB I}, {0: MIND, BRAIN, COMPUTERS}, {0: MULTIMEDIA COMPUTING}, {0: NONLINEAR TECHNICAL IMAGE PROCESSING}, {0: NUMERICAL ANALYSIS}, {0: PERCOLATION THEORY}, {0: PROBABILITY THEORY I}, {0: PROCESSING AND RECOGNITION OF SPEECH}, {0: QUANTITATIVE MEDICAL COMPUTING}, {0: RANDOM SIGNAL ANALYSIS}, {0: SEMINAR ON COMPUTATIONAL GEOMETRY}, {0: SOLID STATE PHYSICS}, {0: SOUND STRUCTURES IN NATURAL LANGUAGE}, {0: STATISTICAL INFERENCE}, {0: STOCHASTIC PROCESSES II}, {0: THE HISTORY OF ROMANCE LANGUAGES}, {0: TOPICS IN MEDICAL IMAGING SYSTEMS}, {0: TOPICS IN OPERATIONS RESEARCH}, {0: UNIX SYSTEMS PROGRAMMING}]\nLINQ Results: [{0: COMPUTER LITERACY}, {0: INTRODUCTION TO COMPUTER SCIENCE}, {0: INTRO TO PROGRAMMING IN JAVA}, {0: INTRO TO PROGRAMMING IN C/C++}, {0: EXPLORING THE INTERNET}, {0: JAVA PROGRAMMING}, {0: UNIX SYSTEMS PROGRAMMING}, {0: DATA STRUCTURES in JAVA}, {0: MULTIMEDIA COMPUTING}, {0: COMPUTATIONAL MODELS}, {0: DATABASE SYSTEMS}, {0: COMPUTER SYSTEM FUNDAMENTALS}, {0: DISTRIBUTED SYSTEMS}, {0: INTRODUCTION TO ALGORITHMS}, {0: DATABASE SYSTEMS}, {0: COMPUTER SYSTEMS}, {0: DISTRIBUTED SYSTEMS}, {0: QUANTITATIVE MEDICAL COMPUTING}, {0: COMPUTER VISION}, {0: ALGORITHMS I}, {0: INTRO TO NATURAL LANGUAGE PROCESSING}, {0: COMPUTER SCIENCE INTERNSHIP}, {0: HIGH PERFORMANCE GRAPHICS AND MODELING}, {0: SEMINAR ON COMPUTATIONAL GEOMETRY}, {0: ACCOUNTING I}, {0: ACCOUNTING II}, {0: BUSINESS LAW I}, {0: BUSINESS LAW II}, {0: PROBABILITY THEORY I}, {0: STOCHASTIC PROCESSES II}, {0: STATISTICAL INFERENCE}, {0: FOUNDATIONS OF OPTIMIZATION}, {0: COMBINATORIAL ANALYSIS}, {0: NUMERICAL ANALYSIS}, {0: PERCOLATION THEORY}, {0: TOPICS IN OPERATIONS RESEARCH}, {0: INTRODUCTION TO ECE}, {0: FIELDS, MATTER AND WAVES}, {0: INTEGRATED ELECTRONICS}, {0: ECE LABORATORY}, {0: MICROPROCESSOR LAB I}, {0: CONTROL SYSTEMS}, {0: BASIC COMMUNICATIONS}, {0: FIBER OPTICS AND PHOTONICS}, {0: ITERATIVE ALGORITHMS}, {0: INTRODUCTION TO NON-LINEAR SYSTEMS}, {0: TOPICS IN MEDICAL IMAGING SYSTEMS}, {0: PROCESSING AND RECOGNITION OF SPEECH}, {0: ANALOG AND DIGITAL VLSI SYSTEMS}, {0: SOLID STATE PHYSICS}, {0: NONLINEAR TECHNICAL IMAGE PROCESSING}, {0: RANDOM SIGNAL ANALYSIS}, {0: LANGUAGE AND MIND}, {0: MIND, BRAIN, COMPUTERS}, {0: SOUND STRUCTURES IN NATURAL LANGUAGE}, {0: FORMAL METHODS IN COGNITIVE SCIENCE}, {0: LANGUAGE DEVELOPMENT}, {0: THE HISTORY OF ROMANCE LANGUAGES}, {0: FORMAL METHODS IN COGNITIVE SCIENCE}, {0: COMP. MODELS OF SENTENCE PROCESSING}]\n"
    },
    {
        "id": "3fdc6835dbc7f3968a6759f71cab8fc6021c1dc9f8539eb884fa2f987710d9ef",
        "db_name": "college_3",
        "context_name": "College3Context",
        "question": "Find the names of departments that are either in division AS or in division EN and in Building NEB.",
        "sql": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"",
        "linq": "context.Departments.Where(row => row.Division == \"AS\").Select(row => row.Dname).Union(context.Departments.Where(row => row.Division == \"EN\" && row.Building == \"NEB\").Select(row => row.Dname)).ToList();",
        "generated": "context.Departments.Where(row => row.Division == \"AS\" || row.Division == \"EN\" && row.Building == \"NEB\").Select(row => new { row.Dname }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "8f3d099756e5e71ad196abd9f9aea3f242f098025909abee6cae1bd6b0ae6541",
        "db_name": "college_3",
        "context_name": "College3Context",
        "question": "Find the first name of students not enrolled in any course.",
        "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
        "linq": "context.Students.Where(row => !context.EnrolledIns.Select(row => row.StuId).Contains(row.StuId)).Select(row => new { row.Fname }).ToList();",
        "generated": "context.Students.Where(row =>!context.EnrolledIns.Select(row => row.StuId).Contains(row.StuId)).Select(row => new { row.Fname }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "618af38d9b2b8d45ef99823f385620af995731798b7841bd1ed955c8c7dc891e",
        "db_name": "candidate_poll",
        "context_name": "CandidatePollContext",
        "question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "sql": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "linq": "context.Candidates.GroupBy(row => 1).Select(group => new { MaxSupportRate = group.Select(row => row.SupportRate).Max(), MinConsiderRate = group.Select(row => row.ConsiderRate).Min(), MinOpposeRate = group.Select(row => row.OpposeRate).Min() }).ToList();",
        "generated": "context.Candidates.OrderByDescending(row => row.SupportRate).Select(row => new { row.SupportRate }).Distinct().Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Parameter 'index')\n   at System.Linq.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument)\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 239\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\n"
    },
    {
        "id": "49f32228f3fa67dd019bc17113e2771ba21f4c0a80cce5b351290948d3c0e3a5",
        "db_name": "candidate_poll",
        "context_name": "CandidatePollContext",
        "question": "list all female (sex is F) candidate names in the alphabetical order.",
        "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name",
        "linq": "context.People.Join(context.Candidates, t1 => t1.PeopleId, t2 => t2.PeopleId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.Sex == \"F\").OrderBy(row => row.t1.Name).Select(row => new { row.t1.Name }).ToList();",
        "generated": "context.People.Where(row => row.Sex == \"F\").Select(row => new { row.Name }).OrderBy(row => row.Name).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: St\u00e9phane Antiga}]\nLINQ Results: [{0: Frantz Granvorka}, {0: St\u00e9phane Antiga}]\n"
    },
    {
        "id": "d417ce111ed62a2aa196291607d18529c032da99723ebe9aa408a4a32f1f3a67",
        "db_name": "candidate_poll",
        "context_name": "CandidatePollContext",
        "question": "find the name of people whose height is lower than the average.",
        "sql": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)",
        "linq": "context.People.Where(row => row.Height < context.People.Select(row => (double) row.Height).Average()).Select(row => new { row.Name }).ToList();",
        "generated": "context.People.Where(row => row.Height < context.People.Select(row => row.Height).Average()).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "3f60818823e6315785a9939c24ec67df3aac40725ffe6ee5b7effcf86073cba9",
        "db_name": "candidate_poll",
        "context_name": "CandidatePollContext",
        "question": "List all info about all people.",
        "sql": "SELECT * FROM people",
        "linq": "context.People.Select(row => new { row.PeopleId, row.Sex, row.Name, row.DateOfBirth, row.Height, row.Weight }).ToList();",
        "generated": "context.People.Select(row => new { row.PeopleId, row.Sex, row.Name, row.DateOfBirth, row.Height, row.Weight }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b4e47425f43c18ccce8ac7f9a474a131b9d553a986071ceb44cf739324fb8e20",
        "db_name": "wedding",
        "context_name": "WeddingContext",
        "question": "How many weddings are there in year 2016?",
        "sql": "SELECT count(*) FROM wedding WHERE YEAR  =  2016",
        "linq": "context.Weddings.Where(row => row.Year == 2016).Count();",
        "generated": "context.Weddings.Where(row => row.Year == 2016).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "cf47a8dc50e33338b935c863fc753d3396720f426f323ab47de87aef56d6cdc3",
        "db_name": "wedding",
        "context_name": "WeddingContext",
        "question": "Show the church names for the weddings of all people older than 30.",
        "sql": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30",
        "linq": "context.Weddings.Join(context.People, T1 => T1.MaleId, T2 => T2.PeopleId, (T1, T2) => new { T1, T2 }).Join(context.People, joined => joined.T1.FemaleId, T3 => T3.PeopleId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Join(context.Churches, joined => joined.T1.ChurchId, T4 => T4.ChurchId, (joined, T4) => new { joined.T1, joined.T2, joined.T3, T4 }).Where(row => row.T2.Age > 30 || row.T3.Age > 30).Select(row => new { row.T4.Name }).ToList();",
        "generated": "context.People.Where(row => row.Age > 30).Select(row => context.Weddings.Join(context.Churches, T1 => T1.ChurchId, T2 => T2.ChurchId, (T1, T2) => new { T1, T2 }).Select(row => row.T2.Name).ToList()).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.InvalidOperationException: Translating this query requires the SQL APPLY operation, which is not supported on SQLite.\n   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessor.ApplyValidatingVisitor.VisitExtension(Expression extensionExpression)\n   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessor.ApplyValidatingVisitor.VisitExtension(Expression extensionExpression)\n   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessor.Process(Expression query)\n   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.GetEnumerator()\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "800f7fa810fb417833b3278116cf90bd94e892b9868eb6b6553b1853cca1d7dc",
        "db_name": "wedding",
        "context_name": "WeddingContext",
        "question": "Show all countries and the number of people from each country.",
        "sql": "SELECT country ,  count(*) FROM people GROUP BY country",
        "linq": "context.People.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
        "generated": "context.People.GroupBy(row => new { row.Country }).Select(group => new { group.Key.Country, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "24249afe713a2d53eacb6a13768218d1573b1a4dacfaf7240fd3a84140aacd64",
        "db_name": "wedding",
        "context_name": "WeddingContext",
        "question": "How many churches have a wedding in year 2016?",
        "sql": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016",
        "linq": "context.Weddings.Where(row => row.Year == 2016).Select(row => row.ChurchId).Distinct().Count();",
        "generated": "context.People.Join(context.Weddings, T1 => T1.PeopleId, T2 => T2.FemaleId, (T1, T2) => new { T1, T2 }).Join(context.People, joined => joined.T1.PeopleId, T3 => T3.PeopleId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Year == 2016).Select(row => row.T1.Country).Distinct().Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 2}]\nLINQ Results: [{0: 1}]\n"
    },
    {
        "id": "b2d04c6a68fa73d87ec1bbde7b002cdb243e453556a55d89fbd1ca22a7f64edb",
        "db_name": "icfp_1",
        "context_name": "Icfp1Context",
        "question": "Find the last names of all the authors that have written a paper with title containing the word \"Monadic\".",
        "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"",
        "linq": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => EF.Functions.Like(row.t3.Title, \"%Monadic%\")).Select(row => new { row.t1.Lname }).ToList();",
        "generated": "context.Authors.Join(context.Authorships, t1 => t1.AuthId, t2 => t2.AuthId, (t1, t2) => new { t1, t2 }).Join(context.Papers, joined => joined.t2.PaperId, t3 => t3.PaperId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.Title.Contains(\"Monadic\")).Select(row => new { row.t1.Lname }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "6fbf911625d85f5d681fd204ff476847ffe1aa8b29c2a4ae85cc4f2ed20e272f",
        "db_name": "icfp_1",
        "context_name": "Icfp1Context",
        "question": "Retrieve the title of the paper that has the largest number of authors.",
        "sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)",
        "linq": "context.Authorships.Join(context.Papers, t1 => t1.PaperId, t2 => t2.PaperId, (t1, t2) => new { t1, t2 }).Where(row => row.t1.AuthOrder == context.Authorships.Select(row => row.AuthOrder).Max()).Select(row => new { row.t2.Title }).ToList();",
        "generated": "context.Papers.Join(context.Authorships, T1 => T1.PaperId, T2 => T2.PaperId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.PaperId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.Title }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "af86d1ed0d389d6816963650cf58d2e5cdb51914c668fa7fdefe0b519879220d",
        "db_name": "icfp_1",
        "context_name": "Icfp1Context",
        "question": "What is the first name of the author with last name \"Ueno\"?",
        "sql": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"",
        "linq": "context.Authors.Where(row => row.Lname == \"Ueno\").Select(row => new { row.Fname }).ToList();",
        "generated": "context.Authors.Where(row => row.Lname == \"Ueno\").Select(row => new { row.Fname }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "48e5a0d9aae1ddd1a01f16714c87716e4e326139501d9ff88e7927a921b86ae9",
        "db_name": "icfp_1",
        "context_name": "Icfp1Context",
        "question": "Find the last name of the author with first name \"Amal\".",
        "sql": "SELECT lname FROM authors WHERE fname  =  \"Amal\"",
        "linq": "context.Authors.Where(row => row.Fname == \"Amal\").Select(row => new { row.Lname }).ToList();",
        "generated": "context.Authors.OrderByDescending(row => row.AuthOrder).Select(row => new { row.Lname }).Take(1).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,65): error CS1061: 'Author' does not contain a definition for 'AuthOrder' and no accessible extension method 'AuthOrder' accepting a first argument of type 'Author' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.13"
    },
    {
        "id": "af933c33e282c953b82a6eeaa388a59244ab1775c88eca2fa0991f11b3714ac4",
        "db_name": "icfp_1",
        "context_name": "Icfp1Context",
        "question": "Find the first names of all the authors ordered in alphabetical order.",
        "sql": "SELECT fname FROM authors ORDER BY fname",
        "linq": "context.Authors.OrderBy(row => row.Fname).Select(row => new { row.Fname }).ToList();",
        "generated": "context.Authors.OrderBy(row => row.Fname).Select(row => new { row.Fname }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "2e58f38e76736fe8bf5a0562263e4b3100f31841949e59b4b01ed10da68ade7d",
        "db_name": "icfp_1",
        "context_name": "Icfp1Context",
        "question": "Retrieve all the last names of authors in alphabetical order.",
        "sql": "SELECT lname FROM authors ORDER BY lname",
        "linq": "context.Authors.OrderBy(row => row.Lname).Select(row => new { row.Lname }).ToList();",
        "generated": "context.Authors.OrderBy(row => row.Lname).Select(row => new { row.Lname }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "7f0c848728347ea82cbfddee42d935a76f44a6b60a31ceca9ed61ee9d8f3483e",
        "db_name": "icfp_1",
        "context_name": "Icfp1Context",
        "question": "Retrieve all the first and last names of authors in the alphabetical order of last names.",
        "sql": "SELECT fname ,  lname FROM authors ORDER BY lname",
        "linq": "context.Authors.OrderBy(row => row.Lname).Select(row => new { row.Fname, row.Lname }).ToList();",
        "generated": "context.Authors.OrderBy(row => row.Lname).Select(row => new { row.Lname, row.Fname }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Amal, 1: Ahmed}, {0: Matthias, 1: Blume}, {0: Jeremy, 1: Gibbons}, {0: Ralf, 1: Hinze}, {0: Daniel W. H., 1: James}, {0: Atsushi, 1: Ohori}, {0: Nicolas, 1: Pouillard}, {0: Tim, 1: Sheard}, {0: Olin, 1: Shivers}, {0: Aaron, 1: Turon}, {0: Katsuhiro, 1: Ueno}, {0: Stephanie, 1: Weirich}, {0: Brent, 1: Yorgey}]\nLINQ Results: [{0: Ahmed, 1: Amal}, {0: Blume, 1: Matthias}, {0: Gibbons, 1: Jeremy}, {0: Hinze, 1: Ralf}, {0: James, 1: Daniel W. H.}, {0: Ohori, 1: Atsushi}, {0: Pouillard, 1: Nicolas}, {0: Sheard, 1: Tim}, {0: Shivers, 1: Olin}, {0: Turon, 1: Aaron}, {0: Ueno, 1: Katsuhiro}, {0: Weirich, 1: Stephanie}, {0: Yorgey, 1: Brent}]\n"
    },
    {
        "id": "c916a718f6bb77d2d565a5f0cfcd7c63181d143f75c74878b72941f2a52a42a1",
        "db_name": "voter_2",
        "context_name": "Voter2Context",
        "question": "Report all majors that have less than 3 students.",
        "sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3",
        "linq": "context.Students.GroupBy(row => new { row.Major }).Where(group => group.Count() < 3).Select(group => new { group.Key.Major }).ToList();",
        "generated": "context.Students.GroupBy(row => new { row.Major }).Where(group => group.Count() < 3).Select(group => new { group.Key.Major }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b1924e0bb1f93ab8df217ba8900f5293430931a9fcb5fc34e5a041f7cd9c22b0",
        "db_name": "voter_2",
        "context_name": "Voter2Context",
        "question": "For each election cycle, report the number of voting records.",
        "sql": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",
        "linq": "context.VotingRecords.GroupBy(row => new { row.ElectionCycle }).Select(group => new { group.Key.ElectionCycle, Count = group.Count() }).ToList();",
        "generated": "context.VotingRecords.GroupBy(row => new { row.ElectionCycle }).Select(group => new { Count = group.Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Parameter 'index')\n   at System.Linq.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument)\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 239\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\n"
    },
    {
        "id": "c6b0effacaecd141b4c54ad353fca1fb07e01dd94919d47a87a670c7721fe795",
        "db_name": "voter_2",
        "context_name": "Voter2Context",
        "question": "Which major has the most students?",
        "sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Students.GroupBy(row => new { row.Major }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Major }).Take(1).ToList();",
        "generated": "context.Students.GroupBy(row => new { row.Major }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Major }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "902d89aa09661f7c5b7be76aa604aef00b7f2f36cf7f7c0161aec659b6fc27ba",
        "db_name": "voter_2",
        "context_name": "Voter2Context",
        "question": "What is the most common major among female (sex is F) students?",
        "sql": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Students.Where(row => row.Sex == \"F\").GroupBy(row => new { row.Major }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Major }).Take(1).ToList();",
        "generated": "context.Students.Where(row => row.Sex == \"F\").GroupBy(row => new { row.Major }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.Major }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "d7a148e0817fb635650ccd439b6a7562a9961ddd9461b1a6f4aab03ea2b4d73d",
        "db_name": "voter_2",
        "context_name": "Voter2Context",
        "question": "What is the city_code of the city that the most students live in?",
        "sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Students.GroupBy(row => new { row.CityCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CityCode }).Take(1).ToList();",
        "generated": "context.Students.GroupBy(row => new { row.CityCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.CityCode }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "2b59bc88fcdb065c1f7316f99bbcf1ca83c8ca943d30ecb10e4003613b4e8a7b",
        "db_name": "voter_2",
        "context_name": "Voter2Context",
        "question": "Report the distinct advisors who have more than 2 students.",
        "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2",
        "linq": "context.Students.GroupBy(row => new { row.Advisor }).Where(group => group.Count() > 2).Select(group => new { group.Key.Advisor }).ToList();",
        "generated": "context.Students.GroupBy(row => new { row.Advisor }).Where(group => group.Count() > 2).Select(group => new { group.Key.Advisor }).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "c9758c3f3ea934fc7d2823418a149ce8788b89f817b8ba822942a6d69206dd07",
        "db_name": "train_station",
        "context_name": "TrainStationContext",
        "question": "Show the name and service for all trains in order by time.",
        "sql": "SELECT name ,  service FROM train ORDER BY TIME",
        "linq": "context.Trains.OrderBy(row => row.Time).Select(row => new { row.Name, row.Service }).ToList();",
        "generated": "context.Trains.OrderBy(row => row.Time).Select(row => new { row.Name, row.Service }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "e5f03076614c6fbf789a2cc0c5dd0eb89613546e475f800111fafbbd95bde91e",
        "db_name": "train_station",
        "context_name": "TrainStationContext",
        "question": "Show all locations with only 1 station.",
        "sql": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1",
        "linq": "context.Stations.GroupBy(row => new { row.Location }).Where(group => group.Count() == 1).Select(group => new { group.Key.Location }).ToList();",
        "generated": "context.Stations.GroupBy(row => new { row.Location }).Where(group => group.Count() == 1).Select(group => new { group.Key.Location }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "3cccb565cd7c96cc56eae39ff69c854ec52faae0aca04b5b66d6d1238dfef54c",
        "db_name": "train_station",
        "context_name": "TrainStationContext",
        "question": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.",
        "sql": "SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges",
        "linq": "context.Stations.OrderBy(row => row.AnnualEntryExit).ThenBy(row => row.AnnualInterchanges).Select(row => new { row.Name, row.Location }).ToList();",
        "generated": "context.Stations.OrderByDescending(row => row.AnnualEntryExit).OrderByDescending(row => row.AnnualInterchanges).Select(row => new { row.Name, row.Location }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "1504ef77e672ca500c43c2f81f94e556760ddb578d8d6e08ddd822547dc170f9",
        "db_name": "customer_complaints",
        "context_name": "CustomerComplaintsContext",
        "question": "How many distinct complaint type codes are there in the database?",
        "sql": "SELECT count(DISTINCT complaint_type_code) FROM complaints",
        "linq": "context.Complaints.Select(row => row.ComplaintTypeCode).Distinct().Count();",
        "generated": "context.Complaints.Select(row => row.ComplaintTypeCode).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "aa583b9c794e8a766010a3fb51daa08f704b846f643e2832044d801b54282dd0",
        "db_name": "customer_complaints",
        "context_name": "CustomerComplaintsContext",
        "question": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".",
        "sql": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "linq": "context.Customers.Where(row => row.EmailAddress == \"vbogisich@example.org\").Select(row => new { row.AddressLine1, row.AddressLine2 }).ToList();",
        "generated": "context.Customers.Where(row => row.EmailAddress == \"vbogisich@example.org\").Select(row => new { row.AddressLine1, row.AddressLine2 }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "3368cc575dd974c5993a23017af8d618049f10c1465ec7ff09443a59d63082ca",
        "db_name": "customer_complaints",
        "context_name": "CustomerComplaintsContext",
        "question": "Find the number of complaints with Product Failure type for each complaint status.",
        "sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code",
        "linq": "context.Complaints.Where(row => row.ComplaintTypeCode == \"Product Failure\").GroupBy(row => new { row.ComplaintStatusCode }).Select(group => new { group.Key.ComplaintStatusCode, Count = group.Count() }).ToList();",
        "generated": "context.Complaints.Where(row => row.ComplaintTypeCode == \"Product Failure\").GroupBy(row => new { row.ComplaintStatusCode }).Select(group => new { group.Key.ComplaintStatusCode, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "1f31907593889f970fc37d3331f4c378122a5b4c591660735663b62fd20c2f2f",
        "db_name": "customer_complaints",
        "context_name": "CustomerComplaintsContext",
        "question": "What is first names of the top 5 staff who have handled the greatest number of complaints?",
        "sql": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5",
        "linq": "context.Staff.Join(context.Complaints, t1 => t1.StaffId, t2 => t2.StaffId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t2.StaffId }).OrderBy(group => group.Count()).Select(group => new { group.First().t1.FirstName }).Take(5).ToList();",
        "generated": "context.Staff.Join(context.Complaints, T1 => T1.StaffId, T2 => T2.StaffId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StaffId }).OrderByDescending(group => group.Count()).Select(group => new { group.First().T1.FirstName }).Take(5).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Dagmar}, {0: Bradly}, {0: Austin}, {0: Lucie}, {0: Mikel}]\nLINQ Results: [{0: Ward}, {0: Mikel}, {0: Lucie}, {0: Austin}, {0: Bradly}]\n"
    },
    {
        "id": "057e26a868de62d1cd3a9ba6ffd78dec7ece8410d3cb8775750bef42c030634c",
        "db_name": "customer_complaints",
        "context_name": "CustomerComplaintsContext",
        "question": "Which state has the most customers?",
        "sql": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
        "linq": "context.Customers.GroupBy(row => new { row.State }).OrderBy(group => group.Count()).Select(group => new { group.Key.State }).Take(1).ToList();",
        "generated": "context.Customers.GroupBy(row => new { row.State }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.State }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Colorado}]\nLINQ Results: [{0: Tennessee}]\n"
    },
    {
        "id": "32b9f6621b653d79a659e74ae24e42b21621cb43810e5e0c441ff74898406617",
        "db_name": "apartment_rentals",
        "context_name": "ApartmentRentalsContext",
        "question": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.",
        "sql": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
        "linq": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).Select(group => new { group.Key.AptTypeCode, Count = group.Count() }).OrderBy(group => group.Count).ToList();",
        "generated": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).Select(group => new { group.Key.AptTypeCode, count = group.Count() }).OrderBy(group => group.count).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "8da9c0c3ea371e9470aac11b1ed233eaad36dfe48b030eee3b5f4063514ff64e",
        "db_name": "apartment_rentals",
        "context_name": "ApartmentRentalsContext",
        "question": "Show the most common apartment type code.",
        "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AptTypeCode }).Take(1).ToList();",
        "generated": "context.Apartments.GroupBy(row => row.AptTypeCode).OrderByDescending(group => group.Count()).Select(group => new { group.Key }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "2528c970feabdf3de607ce6c61da8cff690cbf55f2d7421f57c532d83e3c9bb5",
        "db_name": "apartment_rentals",
        "context_name": "ApartmentRentalsContext",
        "question": "Show the most common apartment type code among apartments with more than 1 bathroom.",
        "sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "linq": "context.Apartments.Where(row => row.BathroomCount > 1).GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AptTypeCode }).Take(1).ToList();",
        "generated": "context.Apartments.Where(row => row.BathroomCount > 1).GroupBy(row => new { row.AptTypeCode }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.AptTypeCode }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "ddb4216a469fe8ef6a7f463c6aac234e0667457888afda6287f3d3fa2fc2a481",
        "db_name": "apartment_rentals",
        "context_name": "ApartmentRentalsContext",
        "question": "Show each apartment type code, and the maximum and minimum number of rooms for each type.",
        "sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code",
        "linq": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).Select(group => new { group.Key.AptTypeCode, MaxRoomCount = group.Select(row => row.RoomCount).Max(), MinRoomCount = group.Select(row => row.RoomCount).Min() }).ToList();",
        "generated": "context.Apartments.GroupBy(row => new { row.AptTypeCode }).Select(group => new { group.Key.AptTypeCode, MaxRoomCount = group.Select(row => row.RoomCount).Max(), MinRoomCount = group.Select(row => row.RoomCount).Min() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "72266f2f19e386fcae5e8cc32a5cfc3a5b55d980a5d06f2f6f529d164f4e3e24",
        "db_name": "apartment_rentals",
        "context_name": "ApartmentRentalsContext",
        "question": "Show each gender code and the corresponding count of guests sorted by the count in descending order.",
        "sql": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
        "linq": "context.Guests.GroupBy(row => new { row.GenderCode }).Select(group => new { group.Key.GenderCode, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
        "generated": "context.Guests.GroupBy(row => new { row.GenderCode }).Select(group => new { group.Key.GenderCode, Count = group.Count() }).OrderByDescending(group => group.Count).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "d4c82b4288ff8586f0076fc1a895c59d969ec92572b2a0e43b580baf94060034",
        "db_name": "apartment_rentals",
        "context_name": "ApartmentRentalsContext",
        "question": "How many apartments do not have any facility?",
        "sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
        "linq": "context.Apartments.Where(row => !context.ApartmentFacilities.Select(row => row.AptId).Contains(row.AptId)).Count();",
        "generated": "context.Apartments.Where(row =>!context.ApartmentFacilities.Select(row => row.AptId).Contains(row.AptId)).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "13e7702207b59277a5b63b69b99cf7d2d784f9404abe162474a428c1169f843f",
        "db_name": "apartment_rentals",
        "context_name": "ApartmentRentalsContext",
        "question": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"",
        "sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
        "linq": "context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Confirmed\").Select(row => row.T2.AptNumber).Intersect(context.ApartmentBookings.Join(context.Apartments, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Provisional\").Select(row => row.T2.AptNumber)).ToList();",
        "generated": "context.ApartmentBookings.Join(context.ApartmentFacilities, T1 => T1.AptBookingId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.BookingStatusCode == \"Provisional\" && row.T1.BookingStatusCode == \"Confirmed\").Select(row => new { row.T2.AptNumber }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,273): error CS1061: 'ApartmentFacility' does not contain a definition for 'AptNumber' and no accessible extension method 'AptNumber' accepting a first argument of type 'ApartmentFacility' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.63"
    },
    {
        "id": "f699113c93d8571e5ed0c55060154003f2ae54b3f767bcefd141b296ac6d9300",
        "db_name": "apartment_rentals",
        "context_name": "ApartmentRentalsContext",
        "question": "Show the apartment numbers of apartments with unit status availability of both 0 and 1.",
        "sql": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1",
        "linq": "context.Apartments.Join(context.ViewUnitStatuses, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AvailableYn == false).Select(row => row.T1.AptNumber).Intersect(context.Apartments.Join(context.ViewUnitStatuses, T1 => T1.AptId, T2 => T2.AptId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.AvailableYn == true).Select(row => row.T1.AptNumber)).ToList();",
        "generated": "context.ViewUnitStatuses.Where(row => row.AvailableYn == true || row.AvailableYn == false).Select(row => row.Apt.AptNumber).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Apt. 411}, {0: Apt. 837}]\nLINQ Results: [{0: Apt. 794}, {0: Suite 634}, {0: Apt. 187}, {0: Apt. 477}, {0: Apt. 411}, {0: Apt. 585}, {0: Apt. 837}, {0: Suite 307}, {0: Suite 645}, {0: Apt. 859}, {0: Apt. 940}, {0: Suite 749}]\n"
    },
    {
        "id": "ecbff3fe40f0d7fa9efb94cc8bfa8ca3655441fb2e14927f0e5904dbaf7eee3e",
        "db_name": "products_for_hire",
        "context_name": "ProductsForHireContext",
        "question": "What are the daily hire costs for the products with substring 'Book' in its name?",
        "sql": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'",
        "linq": "context.ProductsForHires.Where(row => EF.Functions.Like(row.ProductName, \"%Book%\")).Select(row => new { row.DailyHireCost }).ToList();",
        "generated": "context.ProductsForHires.Where(row => EF.Functions.Like(row.ProductName, \"%Book%\")).Select(row => new { row.DailyHireCost }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "4818a92d6108728c7ce8aa1a05f397bab06093b60ccf01bc013e01b2736f3fe9",
        "db_name": "products_for_hire",
        "context_name": "ProductsForHireContext",
        "question": "How many products are never booked with amount higher than 200?",
        "sql": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )",
        "linq": "context.ProductsForHires.Where(row => !context.ProductsBookeds.Where(row => row.BookedAmount > 200).Select(row => row.ProductId).Contains(row.ProductId)).Count();",
        "generated": "context.ProductsForHires.Join(context.ProductsBookeds, T1 => T1.ProductId, T2 => T2.ProductId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.BookedAmount < 200).Select(row => row.T1.ProductName).Distinct().Count();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1}]\nLINQ Results: [{0: 5}]\n"
    },
    {
        "id": "8be283c6e9db7a0dc3f6833cc78f401ca0611da38e6493991f4e9ea48fe08a43",
        "db_name": "products_for_hire",
        "context_name": "ProductsForHireContext",
        "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'",
        "sql": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'",
        "linq": "context.Payments.Where(row => row.AmountPaid > 300 || row.PaymentTypeCode == \"Check\").Select(row => new { row.PaymentDate }).ToList();",
        "generated": "context.Payments.Where(row => row.AmountPaid > 300 || row.PaymentTypeCode == \"Check\").Select(row => new { row.PaymentDate }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "1986bb7bf756e0c9bf19e296a50217bf12a07fa69c5d38cef4efb1a693934200",
        "db_name": "products_for_hire",
        "context_name": "ProductsForHireContext",
        "question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
        "sql": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20",
        "linq": "context.ProductsForHires.Where(row => row.ProductTypeCode == \"Cutlery\" && row.DailyHireCost < 20).Select(row => new { row.ProductName, row.ProductDescription }).ToList();",
        "generated": "context.ProductsForHires.Where(row => row.ProductTypeCode == \"Cutlery\" && row.DailyHireCost < 20).Select(row => new { row.ProductName, row.ProductDescription }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "bd85ac490c7b0b0d93e269c2bdb484f02e285abfff887794102766f3e57ff0ac",
        "db_name": "chinook_1",
        "context_name": "Chinook1Context",
        "question": "Please list all album titles in alphabetical order.",
        "sql": "SELECT Title FROM ALBUM ORDER BY Title",
        "linq": "context.Albums.OrderBy(row => row.Title).Select(row => new { row.Title }).ToList();",
        "generated": "context.Albums.OrderBy(row => row.Title).Select(row => new { row.Title }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "f6e52997e4bf3d10fe19f4f58044c35a290f20474013abbb151da0294fdd100e",
        "db_name": "chinook_1",
        "context_name": "Chinook1Context",
        "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "linq": "context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ArtistId }).Where(group => group.Count() >= 3).OrderBy(group => group.First().T2.Name).Select(group => new { group.First().T2.Name, group.Key.ArtistId }).ToList();",
        "generated": "context.Artists.Join(context.Albums, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.ArtistId }).Where(group => group.Count() >= 3).OrderBy(group => group.Key.ArtistId).Select(group => new { group.Key.ArtistId, group.First().T1.Name }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Audioslave, 1: 8}, {0: Berliner Philharmoniker & Herbert Von Karajan, 1: 248}, {0: Deep Purple, 1: 58}, {0: Eugene Ormandy, 1: 226}, {0: Faith No More, 1: 82}, {0: Foo Fighters, 1: 84}, {0: Gilberto Gil, 1: 27}, {0: Guns N' Roses, 1: 88}, {0: Iron Maiden, 1: 90}, {0: Jamiroquai, 1: 92}, {0: Led Zeppelin, 1: 22}, {0: Lost, 1: 149}, {0: Metallica, 1: 50}, {0: Miles Davis, 1: 68}, {0: Os Paralamas Do Sucesso, 1: 113}, {0: Ozzy Osbourne, 1: 114}, {0: Pearl Jam, 1: 118}, {0: Queen, 1: 51}, {0: R.E.M., 1: 124}, {0: Red Hot Chili Peppers, 1: 127}, {0: Santana, 1: 59}, {0: The Office, 1: 156}, {0: The Rolling Stones, 1: 142}, {0: U2, 1: 150}, {0: Van Halen, 1: 152}, {0: Various Artists, 1: 21}]\nLINQ Results: [{0: 8, 1: Audioslave}, {0: 21, 1: Various Artists}, {0: 22, 1: Led Zeppelin}, {0: 27, 1: Gilberto Gil}, {0: 50, 1: Metallica}, {0: 51, 1: Queen}, {0: 58, 1: Deep Purple}, {0: 59, 1: Santana}, {0: 68, 1: Miles Davis}, {0: 82, 1: Faith No More}, {0: 84, 1: Foo Fighters}, {0: 88, 1: Guns N' Roses}, {0: 90, 1: Iron Maiden}, {0: 92, 1: Jamiroquai}, {0: 113, 1: Os Paralamas Do Sucesso}, {0: 114, 1: Ozzy Osbourne}, {0: 118, 1: Pearl Jam}, {0: 124, 1: R.E.M.}, {0: 127, 1: Red Hot Chili Peppers}, {0: 142, 1: The Rolling Stones}, {0: 149, 1: Lost}, {0: 150, 1: U2}, {0: 152, 1: Van Halen}, {0: 156, 1: The Office}, {0: 226, 1: Eugene Ormandy}, {0: 248, 1: Berliner Philharmoniker & Herbert Von Karajan}]\n"
    },
    {
        "id": "55b7a23d167df516f5f42df9341176959bd8709a72c7f1089251f107d7d58b04",
        "db_name": "chinook_1",
        "context_name": "Chinook1Context",
        "question": "Find the names of artists that do not have any albums.",
        "sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "linq": "context.Artists.Select(row => row.Name).Except(context.Albums.Join(context.Artists, T1 => T1.ArtistId, T2 => T2.ArtistId, (T1, T2) => new { T1, T2 }).Select(row => row.T2.Name)).ToList();",
        "generated": "context.Artists.Where(row =>!context.Albums.Select(row => row.ArtistId).Contains(row.ArtistId)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "2c082c8507ac7b720354d2e2a2bfb0466967a8198101a602f06ebfc2e5a21ee7",
        "db_name": "chinook_1",
        "context_name": "Chinook1Context",
        "question": "What is the average unit price of rock tracks?",
        "sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "linq": "context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Rock\").Select(row => (double) row.T2.UnitPrice).Average();",
        "generated": "context.Tracks.Join(context.Genres, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Rock\").Select(row => row.T1.UnitPrice).Average();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.NotSupportedException: SQLite cannot apply aggregate operator 'Average' on expressions of type 'decimal'. Convert the values to a supported type, or use LINQ to Objects to aggregate the results on the client side.\n   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableAggregateMethodTranslator.Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList`1 arguments, IDiagnosticsLogger`1 logger)\n   at Microsoft.EntityFrameworkCore.Query.RelationalAggregateMethodCallTranslatorProvider.<>c__DisplayClass6_0.<Translate>b__0(IAggregateMethodCallTranslator t)\n   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()\n   at System.Linq.Enumerable.TryGetFirst[TSource](IEnumerable`1 source, Func`2 predicate, Boolean& found)\n   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)\n   at Microsoft.EntityFrameworkCore.Query.RelationalAggregateMethodCallTranslatorProvider.Translate(IModel model, MethodInfo method, EnumerableExpression source, IReadOnlyList`1 arguments, IDiagnosticsLogger`1 logger)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.TranslateAggregateMethod(EnumerableExpression enumerableExpression, MethodInfo method, List`1 scalarArguments)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.TryTranslateAggregateMethodCall(MethodCallExpression methodCallExpression, SqlExpression& translation)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.TranslateInternal(Expression expression, Boolean applyDefaultTypeMapping)\n   at Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.Translate(Expression expression, Boolean applyDefaultTypeMapping)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateAggregateWithSelector(ShapedQueryExpression source, LambdaExpression selectorLambda, Func`2 methodGenerator, Boolean throwWhenEmpty, Type resultType)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateAverage(ShapedQueryExpression source, LambdaExpression selector, Type resultType)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "424414efbc84553ebc3bafa669d33eaadc8e6891eaf0b91c86d2fab75afaa48e",
        "db_name": "chinook_1",
        "context_name": "Chinook1Context",
        "question": "What are the duration of the longest and shortest pop tracks in milliseconds?",
        "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "linq": "context.Genres.Join(context.Tracks, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Pop\").GroupBy(row => 1).Select(group => new { MaxMillisecondsT2 = group.Select(row => row.T2.Milliseconds).Max(), MinMillisecondsT2 = group.Select(row => row.T2.Milliseconds).Min() }).ToList();",
        "generated": "context.Tracks.Join(context.Genres, T1 => T1.GenreId, T2 => T2.GenreId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Name == \"Pop\").OrderBy(row => row.T1.Milliseconds).Select(row => new { row.T1.Milliseconds }).Distinct().Take(2).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 663426, 1: 129666}]\nLINQ Results: [{0: 205479}, {0: 198661}]\n"
    },
    {
        "id": "06c488e8c22c867829ffc9d2bd09cd0f626c3e6540b64d114aa128140c4d28c8",
        "db_name": "chinook_1",
        "context_name": "Chinook1Context",
        "question": "What are the birth dates of employees living in Edmonton?",
        "sql": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"",
        "linq": "context.Employees.Where(row => row.City == \"Edmonton\").Select(row => new { row.BirthDate }).ToList();",
        "generated": "context.Employees.Where(row => row.City == \"Edmonton\").Select(row => new { row.BirthDate }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "34129aab1da278ce422ac9da6c05d93d74f65a2cf0c5aa4b3a093d21616c33ca",
        "db_name": "chinook_1",
        "context_name": "Chinook1Context",
        "question": "What are the distinct unit prices of all tracks?",
        "sql": "SELECT distinct(UnitPrice) FROM TRACK",
        "linq": "context.Tracks.Select(row => new { row.UnitPrice }).Distinct().ToList();",
        "generated": "context.Tracks.Select(row => row.UnitPrice).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 0.99}, {0: 1.99}]\nLINQ Results: [{0: 2}, {0: 2}]\n"
    },
    {
        "id": "76911d5e35b5d0a27f288c0e69ec5bb25452521fc8fe55d06e9f3b1c056fa829",
        "db_name": "chinook_1",
        "context_name": "Chinook1Context",
        "question": "How many artists do not have any album?",
        "sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
        "linq": "context.Artists.Where(row => !context.Albums.Select(row => row.ArtistId).Contains(row.ArtistId)).Count();",
        "generated": "context.Artists.Where(row =>!context.Albums.Select(row => row.ArtistId).Contains(row.ArtistId)).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "290fec4a6bbe62c3ebcf60509abd30a525292f6cda2cc97dcb65dab458b53377",
        "db_name": "chinook_1",
        "context_name": "Chinook1Context",
        "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
        "sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
        "linq": "context.Albums.Join(context.Tracks, T1 => T1.AlbumId, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Genres, joined => joined.T2.GenreId, T3 => T3.GenreId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Reggae\").Select(row => row.T1.Title).Intersect(context.Albums.Join(context.Tracks, T1 => T1.AlbumId, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Genres, joined => joined.T2.GenreId, T3 => T3.GenreId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Rock\").Select(row => row.T1.Title)).ToList();",
        "generated": "context.Albums.Join(context.Tracks, T1 => T1.AlbumId, T2 => T2.AlbumId, (T1, T2) => new { T1, T2 }).Join(context.Genres, joined => joined.T2.GenreId, T3 => T3.GenreId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.Name == \"Reggae\" && row.T3.Name == \"Rock\").Select(row => row.T1.Title).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Greatest Hits}]\nLINQ Results: []\n"
    },
    {
        "id": "e1e3a348501362e7a602a0fb0e411595e67b8f748bed7c0bdcb8b5d098eca73c",
        "db_name": "university_basketball",
        "context_name": "UniversityBasketballContext",
        "question": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.",
        "sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation",
        "linq": "context.Universities.Where(row => row.Enrollment > 20000).GroupBy(row => new { row.Affiliation }).Select(group => new { Count = group.Count(), group.Key.Affiliation }).ToList();",
        "generated": "context.Universities.GroupBy(row => new { row.Affiliation }).Select(group => new { group.Key.Affiliation, Count = group.Count(row => row.Enrollment > 20000) }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 2, 1: Public}]\nLINQ Results: [{0: Private/Methodist, 1: 0}, {0: Public, 1: 2}]\n"
    },
    {
        "id": "0513697d673eec8c409560c17a0bd517d2145d86292514f23b0ef99f99e5aa84",
        "db_name": "university_basketball",
        "context_name": "UniversityBasketballContext",
        "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
        "sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "linq": "context.Universities.Where(row => row.Founded > 1850).GroupBy(row => new { row.Affiliation }).Select(group => new { SumEnrollment = group.Select(row => row.Enrollment).Sum(), group.Key.Affiliation }).ToList();",
        "generated": "context.Universities.Where(row => row.Founded > 1850).GroupBy(row => new { row.Affiliation }).Select(group => new { TotalEnrolled = group.Sum(row => row.Enrollment), group.Key.Affiliation }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "6fc2ff61649350295980a2b8c0cd5cec52a8558a6c5f315e57ddb6d40b8445fa",
        "db_name": "university_basketball",
        "context_name": "UniversityBasketballContext",
        "question": "What is the maximum enrollment across all schools?",
        "sql": "SELECT max(Enrollment) FROM university",
        "linq": "context.Universities.Select(row => row.Enrollment).Max();",
        "generated": "context.Universities.Select(row => row.Enrollment).Max();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "08b6cd6d30136175a51db055d2a626e361877450a800865e1e1a7b3af3ccdb23",
        "db_name": "university_basketball",
        "context_name": "UniversityBasketballContext",
        "question": "List all information regarding the basketball match.",
        "sql": "SELECT * FROM basketball_match",
        "linq": "context.BasketballMatches.Select(row => new { row.TeamId, row.SchoolId, row.TeamName, row.AccRegularSeason, row.AccPercent, row.AccHome, row.AccRoad, row.AllGames, row.AllGamesPercent, row.AllHome, row.AllRoad, row.AllNeutral }).ToList();",
        "generated": "context.BasketballMatches.Select(row => new { row.TeamId, row.TeamName, row.AccRegularSeason, row.AccPercent, row.AccHome, row.AccRoad, row.AllGames, row.AllGamesPercent, row.AllHome, row.AllRoad, row.AllNeutral, row.SchoolId }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1, 1: 1, 2: North Carolina, 3: 14\u20132, 4: .875, 5: 6\u20132, 6: 8\u20130, 7: 35\u20132, 8: 0.946, 9: 14\u20132, 10: 13\u20130, 11: 9\u20131}, {0: 2, 1: 2, 2: Duke, 3: 13\u20133, 4: .813, 5: 7\u20131, 6: 6\u20132, 7: 28\u20136, 8: 0.824, 9: 15\u20131, 10: 8\u20132, 11: 5\u20133}, {0: 3, 1: 4, 2: Clemson, 3: 10\u20136, 4: .625, 5: 7\u20131, 6: 3\u20135, 7: 24\u201310, 8: 0.706, 9: 14\u20132, 10: 6\u20135, 11: 4\u20133}, {0: 4, 1: 5, 2: Virginia Tech, 3: 9\u20137, 4: .563, 5: 6\u20132, 6: 3\u20135, 7: 21\u201314, 8: 0.6, 9: 14\u20133, 10: 4\u20138, 11: 3\u20133}]\nLINQ Results: [{0: 1, 1: North Carolina, 2: 14\u20132, 3: .875, 4: 6\u20132, 5: 8\u20130, 6: 35\u20132, 7: 0.946, 8: 14\u20132, 9: 13\u20130, 10: 9\u20131, 11: 1}, {0: 2, 1: Duke, 2: 13\u20133, 3: .813, 4: 7\u20131, 5: 6\u20132, 6: 28\u20136, 7: 0.824, 8: 15\u20131, 9: 8\u20132, 10: 5\u20133, 11: 2}, {0: 3, 1: Clemson, 2: 10\u20136, 3: .625, 4: 7\u20131, 5: 3\u20135, 6: 24\u201310, 7: 0.706, 8: 14\u20132, 9: 6\u20135, 10: 4\u20133, 11: 4}, {0: 4, 1: Virginia Tech, 2: 9\u20137, 3: .563, 4: 6\u20132, 5: 3\u20135, 6: 21\u201314, 7: 0.6, 8: 14\u20133, 9: 4\u20138, 10: 3\u20133, 11: 5}]\n"
    },
    {
        "id": "73331d9bb60c7a73f16e2954d23a15fe0f159e32d94724444514179fff6acafc",
        "db_name": "university_basketball",
        "context_name": "UniversityBasketballContext",
        "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
        "sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "linq": "context.BasketballMatches.OrderByDescending(row => row.AllHome).Select(row => new { row.TeamName }).ToList();",
        "generated": "context.BasketballMatches.OrderByDescending(row => row.AllHome).Select(row => new { row.TeamName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "12e341b8893992e8c5485f405f269b8629954caf53fa782222acd6a7451e9406",
        "db_name": "product_catalog",
        "context_name": "ProductCatalogContext",
        "question": "Find the name and capacity of products with price greater than 700 (in USD).",
        "sql": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "linq": "context.CatalogContents.Where(row => row.PriceInDollars > 700).Select(row => new { row.CatalogEntryName, row.Capacity }).ToList();",
        "generated": "context.CatalogContents.Join(context.CatalogContentsAdditionalAttributes, T1 => T1.CatalogEntryId, T2 => T2.CatalogEntryId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.PriceInDollars > 700).Select(row => new { row.T2.AttributeValue, row.T1.CatalogEntryName }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Vimto, 1: 6}, {0: Sprite Lemo, 1: 8}, {0: Dr Pepper, 1: 1}, {0: Diet Pepsi, 1: 9}, {0: Diet Mountain Dew, 1: 8}]\nLINQ Results: [{0: 0, 1: Diet Pepsi}, {0: 0, 1: Diet Mountain Dew}, {0: 1, 1: Diet Pepsi}]\n"
    },
    {
        "id": "fc7cc5f0aedd08606e40b5b0cf7a828a46c90c1676c695d80c90f9a059d9279c",
        "db_name": "product_catalog",
        "context_name": "ProductCatalogContext",
        "question": "Find the dates on which more than one revisions were made.",
        "sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "linq": "context.Catalogs.GroupBy(row => new { row.DateOfLatestRevision }).Where(group => group.Count() > 1).Select(group => new { group.Key.DateOfLatestRevision }).ToList();",
        "generated": "context.Catalogs.Join(context.CatalogStructures, T1 => T1.CatalogId, T2 => T2.CatalogId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.DateOfLatestRevision }).Where(group => group.Count() > 1).Select(group => group.Key.DateOfLatestRevision).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 2017-03-30 09:15:37}, {0: 2017-09-26 12:10:36}, {0: 2017-10-26 01:16:51}, {0: 2017-12-04 06:48:13}]\nLINQ Results: []\n"
    },
    {
        "id": "2fc1733673a1c4360599c8337876e13764450f480c46f1bb987f96df5dd4fdf9",
        "db_name": "product_catalog",
        "context_name": "ProductCatalogContext",
        "question": "How many products are there in the records?",
        "sql": "SELECT count(*) FROM catalog_contents",
        "linq": "context.CatalogContents.Count();",
        "generated": "context.CatalogContents.Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "899154f64e41dc0676f1298d37bb329d0d6de01d33a7bf149e205949a2429a80",
        "db_name": "product_catalog",
        "context_name": "ProductCatalogContext",
        "question": "Name all the products with next entry ID greater than 8.",
        "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "linq": "context.CatalogContents.Where(row => row.NextEntryId > 8).Select(row => new { row.CatalogEntryName }).ToList();",
        "generated": "context.CatalogContents.Where(row => row.NextEntryId > 8).Select(row => new { row.CatalogEntryName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "d4030429a9a243aa3545ee0a39585161545f851439fe472d06a9c1c17eeb01e1",
        "db_name": "film_rank",
        "context_name": "FilmRankContext",
        "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
        "sql": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
        "linq": "context.Films.Where(row => EF.Functions.Like(row.Studio, \"%Universal%\")).Select(row => new { row.Title, row.Studio }).ToList();",
        "generated": "context.Films.Where(row => row.Studio.Contains(\"Universal\")).Select(row => new { row.Title, row.Studio }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "89f434d1fa2c52ea496452be00bf9706598bf4616177d910aacb95915974cb20",
        "db_name": "film_rank",
        "context_name": "FilmRankContext",
        "question": "Show the studios that have not produced films with director \"Walter Hill\".",
        "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "linq": "context.Films.Select(row => row.Studio).Except(context.Films.Where(row => row.Director == \"Walter Hill\").Select(row => row.Studio)).ToList();",
        "generated": "context.Films.Where(row => row.Director!= \"Walter Hill\").Select(row => row.Studio).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 20th Century Fox}, {0: Columbia}, {0: Columbia / Rastar}, {0: MGM}, {0: Orion / Carolco}, {0: Paramount / Lorimar}, {0: United Artists}, {0: Universal}, {0: Universal / RKO}]\nLINQ Results: [{0: Universal}, {0: Columbia}, {0: Paramount / Lorimar}, {0: United Artists}, {0: 20th Century Fox}, {0: Paramount}, {0: MGM}, {0: Universal / RKO}, {0: Columbia / Rastar}, {0: Orion / Carolco}]\n"
    },
    {
        "id": "d4c7a5ad30fd1e26dd4fbf9d2a0b2d76dc7c517f12139bee61e4574b6c4a0fae",
        "db_name": "film_rank",
        "context_name": "FilmRankContext",
        "question": "List the studios which average gross is above 4500000.",
        "sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000",
        "linq": "context.Films.GroupBy(row => new { row.Studio }).Where(group => group.Average(row => row.GrossInDollar) >= 4500000).Select(group => new { group.Key.Studio }).ToList();",
        "generated": "context.Films.GroupBy(row => new { row.Studio }).Select(group => new { Studio = group.Key.Studio, AverageGross = group.Select(row => row.GrossInDollar).Average() }).Where(row => row.AverageGross > 4500000).Select(row => new { row.Studio }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "bf6c8f06c2c048c62eebc078491e281b512cd2d8b3e84aab893ab56f9f82240d",
        "db_name": "film_rank",
        "context_name": "FilmRankContext",
        "question": "What is the title of the film that has the highest high market estimation.",
        "sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1",
        "linq": "context.Films.Join(context.FilmMarketEstimations, T1 => T1.FilmId, T2 => T2.FilmId, (T1, T2) => new { T1, T2 }).OrderByDescending(row => row.T2.HighEstimate).Select(row => new { row.T1.Title }).Take(1).ToList();",
        "generated": "context.FilmMarketEstimations.OrderByDescending(row => row.HighEstimate).Select(row => new { row.Film.Title }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b05a583f6b8dfbdcf246f8c285a1ecf0ab84d8e81d1fde3a3d3445e6540d9219",
        "db_name": "film_rank",
        "context_name": "FilmRankContext",
        "question": "What are the titles and directors of the films were never presented in China?",
        "sql": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')",
        "linq": "context.Films.Where(row => !context.FilmMarketEstimations.Join(context.Markets, T1 => T1.MarketId, T2 => T2.MarketId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Country == \"China\").Select(row => row.T1.FilmId).Contains(row.FilmId)).Select(row => new { row.Title, row.Director }).ToList();",
        "generated": "context.Films.Where(row =>!context.FilmMarketEstimations.Select(row => row.MarketId).Contains(context.Markets.Find(2).MarketId)).Select(row => new { row.Title, row.Director }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: An Officer and a Gentleman, 1: Taylor Hackford}, {0: Porky's, 1: Bob Clark}, {0: Star Trek II: The Wrath of Khan, 1: Nicholas Meyer}, {0: 48 Hrs, 1: Walter Hill}, {0: Poltergeist, 1: Tobe Hooper}, {0: The Best Little Whorehouse in Texas, 1: Colin Higgins}, {0: Annie, 1: John Huston}, {0: The Verdict, 1: Sidney Lumet}, {0: Gandhi, 1: Richard Attenborough}, {0: First Blood, 1: Ted Kotcheff}]\nLINQ Results: []\n"
    },
    {
        "id": "3cd5fb0c99939770d42122c15c36792a78a3fe3277f58aeaf6a289372c28ae47",
        "db_name": "insurance_fnol",
        "context_name": "InsuranceFnolContext",
        "question": "Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"",
        "linq": "context.Customers.Join(context.FirstNotificationOfLosses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Services, joined => joined.t2.ServiceId, t3 => t3.ServiceId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.ServiceName == \"Close a policy\").Select(row => row.t1.CustomerName).Intersect(context.Customers.Join(context.FirstNotificationOfLosses, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.Services, joined => joined.t2.ServiceId, t3 => t3.ServiceId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t3.ServiceName == \"New policy application\").Select(row => row.t1.CustomerName)).ToList();",
        "generated": "context.Customers.Join(context.CustomersPolicies, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 }).Join(context.FirstNotificationOfLosses, joined => joined.t2.ServiceId, t3 => t3.ServiceId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Join(context.FirstNotificationOfLosses, joined => joined.t3.FnolId, t4 => t4.FnolId, (joined, t4) => new { joined.t1, joined.t2, joined.t3, t4 }).Where(row => row.t2.ServiceId == 1 && row.t4.ServiceId == 2).Select(row => new { row.t1.CustomerName }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,200): error CS1061: 'CustomersPolicy' does not contain a definition for 'ServiceId' and no accessible extension method 'ServiceId' accepting a first argument of type 'CustomersPolicy' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.63"
    },
    {
        "id": "3acafb4ffddfc0542033c8b2baad05246bc85987e58cc14a780dd3e007dd8c03",
        "db_name": "insurance_fnol",
        "context_name": "InsuranceFnolContext",
        "question": "Find the IDs of customers whose name contains \"Diana\".",
        "sql": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "linq": "context.Customers.Where(row => EF.Functions.Like(row.CustomerName, \"%Diana%\")).Select(row => new { row.CustomerId }).ToList();",
        "generated": "context.Customers.Where(row => row.CustomerName.Contains(\"Diana\")).Select(row => new { row.CustomerId }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "48409f3177e323da7c791174033d86755a173cad782b681b680d605bd1432b6c",
        "db_name": "insurance_fnol",
        "context_name": "InsuranceFnolContext",
        "question": "What are the maximum and minimum settlement amount on record?",
        "sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements",
        "linq": "context.Settlements.GroupBy(row => 1).Select(group => new { MaxSettlementAmount = group.Select(row => row.SettlementAmount).Max(), MinSettlementAmount = group.Select(row => row.SettlementAmount).Min() }).ToList();",
        "generated": "context.Settlements.Select(row => row.SettlementAmount).Max();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Parameter 'index')\n   at System.Linq.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument)\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 239\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\n"
    },
    {
        "id": "e9165a728b79dd53a772a33a128438458b69434733d1633d0cdd9644fa3c38c5",
        "db_name": "insurance_fnol",
        "context_name": "InsuranceFnolContext",
        "question": "List all the customers in increasing order of IDs.",
        "sql": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",
        "linq": "context.Customers.OrderBy(row => row.CustomerId).Select(row => new { row.CustomerId, row.CustomerName }).ToList();",
        "generated": "context.Customers.OrderBy(row => row.CustomerId).Select(row => new { row.CustomerId, row.CustomerName }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "62e496a9caf74f851f83ac228664e64ecc5562d399ac9981d90abadd13fc751c",
        "db_name": "pets_1",
        "context_name": "Pets1Context",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "linq": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StuId }).Select(group => new { Count = group.Count(), group.Key.StuId }).ToList();",
        "generated": "context.HasPets.GroupBy(row => new { row.StuId }).Select(group => new { group.Key.StuId, Count = group.Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1, 1: 1001}, {0: 2, 1: 1002}]\nLINQ Results: [{0: 1001, 1: 1}, {0: 1002, 1: 2}]\n"
    },
    {
        "id": "6b272336145ed8054b9ddae5f0db84d5fb7926a6c35bed5b10a12f29763d441b",
        "db_name": "pets_1",
        "context_name": "Pets1Context",
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "linq": "context.Students.Join(context.HasPets, t1 => t1.StuId, t2 => t2.StuId, (t1, t2) => new { t1, t2 }).GroupBy(row => new { row.t1.StuId }).Select(group => new { Count = group.Count(), group.Key.StuId }).ToList();",
        "generated": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StuId }).Select(group => new { group.Key.StuId, Count = group.Count() }).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: 1, 1: 1001}, {0: 2, 1: 1002}]\nLINQ Results: [{0: 1001, 1: 1}, {0: 1002, 1: 2}]\n"
    },
    {
        "id": "1d113389d9af6b8f6cf0e5fc1430f6d7bf67b0fd6170899f0440325ae036436e",
        "db_name": "pets_1",
        "context_name": "Pets1Context",
        "question": "Find the first name and gender of student who have more than one pet.",
        "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "linq": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StuId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Fname, group.First().T1.Sex }).ToList();",
        "generated": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.StuId }).Where(group => group.Count() > 1).Select(group => new { group.First().T1.Fname, group.First().T1.Sex }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "602d63143f0f98cbfe5eeb358c22b548d59e9492e2ecc580d15c51d49a1fade1",
        "db_name": "pets_1",
        "context_name": "Pets1Context",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "linq": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetAge == 3 && row.T3.PetType == \"cat\").Select(row => new { row.T1.Lname }).ToList();",
        "generated": "context.Students.Join(context.HasPets, T1 => T1.StuId, T2 => T2.StuId, (T1, T2) => new { T1, T2 }).Join(context.Pets, joined => joined.T2.PetId, T3 => T3.PetId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T3.PetType == \"Cat\" && row.T3.PetAge == 3).Select(row => new { row.T1.Lname }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: Smith}]\nLINQ Results: []\n"
    },
    {
        "id": "b7b547e196b30ad44a65b3fc395e6ae4e1ef7b58af1677a418f3c9c3a2185582",
        "db_name": "pets_1",
        "context_name": "Pets1Context",
        "question": "Find the average age of students who do not have any pet .",
        "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "linq": "context.Students.Where(row => !context.HasPets.Select(row => row.StuId).Contains(row.StuId)).Select(row => row.Age).Average();",
        "generated": "context.Students.Where(row =>!context.HasPets.Select(row => row.StuId).Contains(row.StuId)).Select(row => row.Age).Average();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "176df1cdc111cf1729ae8f53b6aec62b7a53852028d1547aec2f7c4af363e831",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "Find the number of reviews on businesses located in \" South Summerlin \" neighbourhood",
        "sql": "SELECT COUNT ( DISTINCT t3.text ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id JOIN review AS t3 ON t3.business_id  =  t2.business_id WHERE t1.neighbourhood_name  =  \"South Summerlin\";",
        "linq": "context.Neighbourhoods.Join(context.Businesses, t1 => t1.BusinessId, t2 => t2.BusinessId, (t1, t2) => new { t1, t2 }).Join(context.Reviews, joined => joined.t2.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t1.NeighbourhoodName == \"South Summerlin\").Select(row => row.t3.Text).Distinct().Count();",
        "generated": "context.Neighbourhood.Join(context.Businesses, T1 => T1.BusinessId, T2 => T2.BusinessId, (T1, T2) => new { T1, T2 }).Join(context.Reviews, joined => joined.T2.BusinessId, T3 => T3.BusinessId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.NeighbourhoodName == \"South Summerlin\").Select(row => row.T3.Rating).Distinct().Count();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,28): error CS1061: 'YelpContext' does not contain a definition for 'Neighbourhood' and no accessible extension method 'Neighbourhood' accepting a first argument of type 'YelpContext' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:02.29"
    },
    {
        "id": "22b34aad59ea2875fdd1463fb935773c61e23c8e98a69f70c8ec4ec718f66331",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "Find the number of users called Michelle",
        "sql": "SELECT COUNT ( DISTINCT name ) FROM USER WHERE name  =  \"Michelle\";",
        "linq": "context.Users.Where(row => row.Name == \"Michelle\").Select(row => row.Name).Distinct().Count();",
        "generated": "context.Users.Where(row => row.Name == \"Michelle\").Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "31f510fb460280d6e9f86a8c268b07afb771bd31ccbaebaa84c6aa2074d296c2",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "Return me the number of businesses that are restaurant .",
        "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.category_name  =  \"restaurant\";",
        "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.CategoryName == \"restaurant\").Select(row => row.t1.Name).Distinct().Count();",
        "generated": "context.Categories.Join(context.Businesses, T1 => T1.BusinessId, T2 => T2.BusinessId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CategoryName == \"Restaurant\").Select(row => row.T2.Name).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "0ec1ddef07a0f94a930645022f9fcfe6a60530e239496cb38296f08a1cfe6881",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "Return me the number of cities that has \" Panda Express \" .",
        "sql": "SELECT COUNT ( DISTINCT city ) FROM business WHERE name  =  \"Panda Express\";",
        "linq": "context.Businesses.Where(row => row.Name == \"Panda Express\").Select(row => row.City).Distinct().Count();",
        "generated": "context.Businesses.Select(row => row.City).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "124bd8d2381a7ca731bad86eb5085861f2abd7d22b86ca9ce9e68f3a516a3b5d",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "Return me the number of tips that are written by Michelle .",
        "sql": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";",
        "linq": "context.Users.Join(context.Tips, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Name == \"Michelle\").Select(row => row.t1.Text).Distinct().Count();",
        "generated": "context.Users.Join(context.Tips, T1 => T1.UserId, T2 => T2.UserId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.Text == \"Michelle\").Select(row => row.T2.Likes).Sum();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "2e9e0ce40af902f7380f92244f9aebdf8cc8e1e56aa5a9c95858315a471c1fa4",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "Find the total checkins in \" Brighton Heights \" neighbourhood",
        "sql": "SELECT SUM ( t3.count ) FROM checkin AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t2.neighbourhood_name  =  \"Brighton Heights\";",
        "linq": "context.Checkins.Join(context.Businesses, t3 => t3.BusinessId, t1 => t1.BusinessId, (t3, t1) => new { t3, t1 }).Join(context.Neighbourhoods, joined => joined.t1.BusinessId, t2 => t2.BusinessId, (joined, t2) => new { joined.t3, joined.t1, t2 }).Where(row => row.t2.NeighbourhoodName == \"Brighton Heights\").Select(row => row.t3.Count).Sum();",
        "generated": "context.Checkins.Join(context.Neighbourhoods, T1 => T1.BusinessId, T2 => T2.BusinessId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.NeighbourhoodName == \"Brighton Heights\").Select(row => row.T1.Count).Sum();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "5d44d8ae54d4a6955287d7fc056822ceba03d0ffc20d50e01a7d4427577b680f",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "Find the total number of reviews written in March",
        "sql": "SELECT COUNT ( DISTINCT text ) FROM review WHERE MONTH  =  \"March\";",
        "linq": "context.Reviews.Where(row => row.Month == \"March\").Select(row => row.Text).Distinct().Count();",
        "generated": "context.Reviews.Where(row => row.Month == \"March\").Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "ab1c0d1f6af27aa5ae702a1f2876e50b7654451c01acc1eb3d96ab7528e20dda",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "Find the number of tips written in each month",
        "sql": "SELECT COUNT ( DISTINCT text )  ,  MONTH FROM tip GROUP BY MONTH;",
        "linq": "context.Tips.GroupBy(row => new { row.Month }).Select(group => new { CountDistinctText = group.Select(row => row.Text).Distinct().Count(), group.Key.Month }).ToList();",
        "generated": "context.Tips.GroupBy(row => new { row.Month }).Select(group => new { group.Key.Month, Count = group.Count() }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "a8b3a8948593137aa81b108b20b0a59ec84901c8b8b2f590949a7cacd631f068",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "How many neighbourhoods have a business with rating 5 in Madison ?",
        "sql": "SELECT COUNT ( DISTINCT t1.neighbourhood_name ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  =  5;",
        "linq": "context.Neighbourhoods.Join(context.Businesses, t1 => t1.BusinessId, t2 => t2.BusinessId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.City == \"Madison\" && row.t2.Rating == 5).Select(row => row.t1.NeighbourhoodName).Distinct().Count();",
        "generated": "context.Categories.Join(context.Businesses, t1 => t1.BusinessId, t2 => t2.BusinessId, (t1, t2) => new { t1, t2 }).Join(context.Neighbourhoods, joined => joined.t2.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t1, joined.t2, t3 }).Where(row => row.t2.Rating == 5 && row.t3.NeighbourhoodName == \"Madison\").Select(row => row.t3.NeighbourhoodName).Distinct().Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "2956615712f54746c5657cdb1d0352536f32283be3a21f5f987d5d498018b49a",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "Give me all the Moroccan restaurant in Texas",
        "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\";",
        "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.State == \"Texas\" && row.t2.CategoryName == \"Moroccan\" && row.t3.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
        "generated": "context.Businesses.Join(context.Categories, T1 => T1.BusinessId, T2 => T2.BusinessId, (T1, T2) => new { T1, T2 }).Join(context.Neighbourhoods, joined => joined.T1.BusinessId, T3 => T3.BusinessId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T1.Name == \"Moroccan\" && row.T3.NeighbourhoodName == \"Texas\").Select(row => new { row.T1.BusinessId }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "bef171741442d562e3b1ccbc90c1b88753109b0d8cbd0b975be16d8c0a7f4dda",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "which business has the most number of checkins",
        "sql": "SELECT t1.name FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY SUM ( t2.count ) DESC LIMIT 1;",
        "linq": "context.Checkins.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).GroupBy(row => new { row.t1.Name }).OrderByDescending(group => group.Sum(row => row.t2.Count)).Select(group => new { group.Key.Name }).Take(1).ToList();",
        "generated": "context.Checkins.GroupBy(row => new { row.BusinessId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BusinessId }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "65735d7620f1ce54e75af15a948373675e3f11c7bc5becf4dfa2252dda879719",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "which neighbourhood has the most number of businesses in Madison",
        "sql": "SELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1;",
        "linq": "context.Neighbourhoods.Join(context.Businesses, t1 => t1.BusinessId, t2 => t2.BusinessId, (t1, t2) => new { t1, t2 }).Where(row => row.t2.City == \"Madison\").GroupBy(row => new { row.t1.NeighbourhoodName }).OrderByDescending(group => group.Count(row => row.t2.Name != null)).Select(group => new { group.Key.NeighbourhoodName }).Take(1).ToList();",
        "generated": "context.Neighbourhoods.Where(row => row.BusinessId == context.Businesses.Where(row => row.City == \"Madison\").Select(row => row.BusinessId).Distinct().ToList()[0]).GroupBy(row => new { row.NeighbourhoodName }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.NeighbourhoodName }).Take(1).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. System.ArgumentException: Expression of type 'System.Collections.Generic.List`1[System.String]' cannot be used for parameter of type 'System.Linq.IQueryable`1[System.String]' of method 'System.String ElementAt[String](System.Linq.IQueryable`1[System.String], Int32)' (Parameter 'arg0')\n   at System.Dynamic.Utils.ExpressionUtils.ValidateOneArgument(MethodBase method, ExpressionType nodeKind, Expression arguments, ParameterInfo pi, String methodParamName, String argumentParamName, Int32 index)\n   at System.Linq.Expressions.Expression.Call(Expression instance, MethodInfo method, Expression arg0, Expression arg1)\n   at System.Linq.Expressions.Expression.Call(Expression instance, MethodInfo method, IEnumerable`1 arguments)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryableMethodNormalizingExpressionVisitor.TryConvertEnumerableToQueryable(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryableMethodNormalizingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryableMethodNormalizingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at System.Linq.Expressions.ExpressionVisitor.VisitBinary(BinaryExpression node)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryableMethodNormalizingExpressionVisitor.VisitBinary(BinaryExpression binaryExpression)\n   at System.Linq.Expressions.ExpressionVisitor.VisitLambda[T](Expression`1 node)\n   at System.Linq.Expressions.ExpressionVisitor.VisitUnary(UnaryExpression node)\n   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\n   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryableMethodNormalizingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\n   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryableMethodNormalizingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\n   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryableMethodNormalizingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\n   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryableMethodNormalizingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\n   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryableMethodNormalizingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryableMethodNormalizingExpressionVisitor.Normalize(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.QueryTranslationPreprocessor.NormalizeQueryableMethod(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPreprocessor.NormalizeQueryableMethod(Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.QueryTranslationPreprocessor.Process(Expression query)\n   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.GetEnumerator()\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 10\n"
    },
    {
        "id": "4c83afe3ffb1deea3e3e8208d5fff24b0a04ec448b7240d0e98db9aaef9cc6bd",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "Find all Mexican restaurant in Dallas with at least 3.5 stars",
        "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";",
        "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"Dallas\" && row.t1.Rating > 3.5 && row.t2.CategoryName == \"Mexican\" && row.t3.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
        "generated": "context.Categories.Join(context.Businesses, T1 => T1.BusinessId, T2 => T2.BusinessId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.CategoryName == \"Mexican\" && row.T2.City == \"Dallas\" && row.T2.Rating >= 3.5).Select(row => new { row.T2.BusinessId }).Distinct().ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "2f6d3bca6bc3b87e671d20ed890595e526c1de8250105dd16fe2609a12c4317f",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "Find all restaurant with Valet Service in Dallas Texas",
        "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"Valet Service\" AND t3.category_name  =  \"restaurant\";",
        "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"Dallas\" && row.t1.State == \"Texas\" && row.t2.CategoryName == \"Valet Service\" && row.t3.CategoryName == \"restaurant\").Select(row => new { row.t1.Name }).ToList();",
        "generated": "context.Categories.Join(context.Businesses, T1 => T1.BusinessId, T2 => T2.BusinessId, (T1, T2) => new { T1, T2 }).Where(row => row.T2.IsOpen == 1 && row.T1.CategoryName == \"Restaurants\" && row.T2.City == \"Dallas\" && row.T2.State == \"Texas\").Select(row => new { row.T2.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "98012afe5d65e372955d7558c0241436715b721e8bb0584fba624b3adb7c46fd",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "Find all Italian restaurant in the Meadowood neighbourhood of Madison",
        "sql": "SELECT t1.name FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN category AS t4 ON t4.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Meadowood\";",
        "linq": "context.Categories.Join(context.Businesses, t3 => t3.BusinessId, t1 => t1.BusinessId, (t3, t1) => new { t3, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t4 => t4.BusinessId, (joined, t4) => new { joined.t3, joined.t1, t4 }).Join(context.Neighbourhoods, joined => joined.t1.BusinessId, t2 => t2.BusinessId, (joined, t2) => new { joined.t3, joined.t1, joined.t4, t2 }).Where(row => row.t1.City == \"Madison\" && row.t3.CategoryName == \"Italian\" && row.t4.CategoryName == \"restaurant\" && row.t2.NeighbourhoodName == \"Meadowood\").Select(row => new { row.t1.Name }).ToList();",
        "generated": "context.Categories.Join(context.Businesses, T1 => T1.BusinessId, T2 => T2.BusinessId, (T1, T2) => new { T1, T2 }).Join(context.Neighbourhoods, joined => joined.T2.BusinessId, T3 => T3.BusinessId, (joined, T3) => new { joined.T1, joined.T2, T3 }).Where(row => row.T2.Name == \"Italian\" && row.T3.NeighbourhoodName == \"Meadowood\" && row.T2.City == \"Madison\").Select(row => new { row.T2.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "935a6c2894eefa2f58dacedfc24d2841c7054aade03b36838fde98b73e9dd954",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "Find all Bars in \" Los Angeles \" with at least 30 reviews and average rating above 3 stars",
        "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t1.rating  >  3 AND t1.review_count  >  30 AND t2.category_name  =  \"Bars\";",
        "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.City == \"Los Angeles\" && row.t1.Rating > 3 && row.t1.ReviewCount > 30 && row.t2.CategoryName == \"Bars\").Select(row => new { row.t1.Name }).ToList();",
        "generated": "context.Businesses.Join(context.Categories, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t1.CategoryName == \"Bar\" && row.t2.City == \"Los Angeles\" && row.t2.ReviewCount >= 30 && row.t2.Rating > 3).Select(row => new { row.t2.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "0341ab8a17b4f32c313f81a8f0d01bfe4bb67b5e858d5aa0fa6eb20de91a55d7",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "How many Egyptian restaurant are there in Edinburgh ?",
        "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Edinburgh\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Egyptian\";",
        "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Join(context.Categories, joined => joined.t1.BusinessId, t3 => t3.BusinessId, (joined, t3) => new { joined.t2, joined.t1, t3 }).Where(row => row.t1.City == \"Edinburgh\" && row.t2.CategoryName == \"restaurant\" && row.t3.CategoryName == \"Egyptian\").Select(row => row.t1.Name).Distinct().Count();",
        "generated": "context.Businesses.Join(context.Categories, T1 => T1.BusinessId, T2 => T2.BusinessId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Name == \"Egyptian\" && row.T2.CategoryName == \"Restaurant\" && row.T1.City == \"Edinburgh\").Select(row => row.T1.Bid).Count();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "734729ff16cb88b3aa2226cdf5db777ebbe5896d2a9188283bc1d6a91294b7df",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "Find users whose average review rating is below 3",
        "sql": "SELECT t2.name FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id GROUP BY t2.name HAVING AVG ( t1.rating )  <  3;",
        "linq": "context.Users.Join(context.Reviews, t2 => t2.UserId, t1 => t1.UserId, (t2, t1) => new { t2, t1 }).GroupBy(row => new { row.t2.Name }).Where(group => group.Average(row => row.t1.Rating) < 3).Select(group => new { group.Key.Name }).ToList();",
        "generated": "context.Users.Join(context.Reviews, T1 => T1.UserId, T2 => T2.UserId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.UserId }).Select(group => new { AverageRating = group.Select(row => row.T2.Rating).Average(), UserId = group.Key.UserId }).Where(group => group.AverageRating < 3).Select(group => new { group.UserId }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "f00d154c3318acb21dd55f8f9710b9717e80d3ae6b38db5904a1e00276558f47",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "Find the business with the most number of reviews in April",
        "sql": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.month  =  \"April\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.text ) DESC LIMIT 1;",
        "linq": "context.Reviews.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).Where(row => row.t2.Month == \"April\").GroupBy(row => new { row.t1.Name }).OrderByDescending(group => group.Count(row => row.t2.Text != null)).Select(group => new { group.Key.Name }).Take(1).ToList();",
        "generated": "context.Reviews.Join(context.Businesses, T1 => T1.BusinessId, T2 => T2.BusinessId, (T1, T2) => new { T1, T2 }).Where(row => row.T1.Month == \"April\").GroupBy(row => new { row.T2.BusinessId }).OrderByDescending(group => group.Count()).Select(group => new { group.Key.BusinessId }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "53ab4f44a31aee41a0e48ea09d06f7ca1b3d5e53275ae862e574ae828b0c1315",
        "db_name": "yelp",
        "context_name": "YelpContext",
        "question": "Find the business which has the most number of categories",
        "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;",
        "linq": "context.Categories.Join(context.Businesses, t2 => t2.BusinessId, t1 => t1.BusinessId, (t2, t1) => new { t2, t1 }).GroupBy(row => new { row.t1.Name }).OrderByDescending(group => group.Count(row => row.t2.CategoryName != null)).Select(group => new { group.Key.Name }).Take(1).ToList();",
        "generated": "context.Categories.GroupBy(row => row.BusinessId).OrderByDescending(group => group.Count()).Select(group => new { group.Key }).Take(1).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "b103fe0a4ba3e35080e6b2a1d79c0c5ac5b6c7f13c45b21a59053104472234ec",
        "db_name": "singer",
        "context_name": "SingerContext",
        "question": "Show the names of singers that have more than one song.",
        "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "linq": "context.Singers.Join(context.Songs, T1 => T1.SingerId, T2 => T2.SingerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Where(group => group.Count() > 1).Select(group => new { group.Key.Name }).ToList();",
        "generated": "context.Singers.Join(context.Songs, T1 => T1.SingerId, T2 => T2.SingerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SingerId }).Where(group => group.Count() > 1).Select(group => new { group.Key.T1.Name }).ToList();",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(10,228): error CS1061: '<anonymous type: int SingerId>' does not contain a definition for 'T1' and no accessible extension method 'T1' accepting a first argument of type '<anonymous type: int SingerId>' could be found (are you missing a using directive or an assembly reference?) [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    2 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:01.84"
    },
    {
        "id": "9b219501eb300f030586753eb3558c9e6c8332def957881d5c10b7ee4d3c3f5d",
        "db_name": "singer",
        "context_name": "SingerContext",
        "question": "Show the names of singers and the total sales of their songs.",
        "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "linq": "context.Singers.Join(context.Songs, T1 => T1.SingerId, T2 => T2.SingerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.Name }).Select(group => new { group.Key.Name, SumSales = group.Select(row => row.T2.Sales).Sum() }).ToList();",
        "generated": "context.Singers.Join(context.Songs, T1 => T1.SingerId, T2 => T2.SingerId, (T1, T2) => new { T1, T2 }).GroupBy(row => new { row.T1.SingerId }).Select(group => new { SingerName = group.Select(row => row.T1.Name).Distinct().First(), TotalSales = group.Sum(row => row.T2.Sales) }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "dcf13724d7de09cb3fbbe78fc91aecc138f64c5280d1b7501b4e33be727c3945",
        "db_name": "singer",
        "context_name": "SingerContext",
        "question": "List the name of singers that do not have any song.",
        "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "linq": "context.Singers.Where(row => !context.Songs.Select(row => row.SingerId).Contains(row.SingerId)).Select(row => new { row.Name }).ToList();",
        "generated": "context.Singers.Where(row =>!context.Songs.Select(row => row.SingerId).Contains(row.SingerId)).Select(row => new { row.Name }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "593f3b7d0f7d0dd36d08b6b51f3f1ad1d1d243cb0d0942be0b0459c4dd7b8e83",
        "db_name": "singer",
        "context_name": "SingerContext",
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "linq": "context.Singers.Where(row => row.BirthYear < 1945).Select(row => row.Citizenship).Intersect(context.Singers.Where(row => row.BirthYear > 1955).Select(row => row.Citizenship)).ToList();",
        "generated": "context.Singers.Where(row => row.BirthYear < 1945 && row.BirthYear > 1955).Select(row => new { row.Citizenship }).Distinct().ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 193\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: United States}]\nLINQ Results: []\n"
    },
    {
        "id": "76bac25d96ce7de1d7a68886aa56a27f1fae0ab892416dc6d8c03a77672df08f",
        "db_name": "scholar",
        "context_name": "ScholarContext",
        "question": "What venues are for Neuroscience ?",
        "sql": "SELECT DISTINCT venueid FROM venue WHERE venuename  =  \"Neuroscience\";",
        "linq": "context.Venues.Where(row => row.VenueName == \"Neuroscience\").Select(row => new { row.VenueId }).Distinct().ToList();",
        "generated": "context.Venues.Where(row => row.Papers.Select(row => row.Keyphrases).SelectMany(row => row).SelectMany(row => row.Papers).SelectMany(row => row.Authors).SelectMany(row => row.Papers).SelectMany(row => row.Keyphrases).SelectMany(row => row.Papers).SelectMany(row => row.Authors).SelectMany(row => row.Papers).SelectMany(row => row.Authors).SelectMany(row => row.Papers).SelectMany(row => row.Authors).SelectMany(row => row.Papers).SelectMany(row => row.Authors).SelectMany(row => row.Papers).SelectMany(row => row.Authors).SelectMany(row => row.Papers).SelectMany(row => row.Authors).SelectMany(row => row.Papers).SelectMany(row => row.Authors).SelectMany(row => row.Papers).SelectMany(row => row.Authors).SelectMany(row => row.Papers).SelectMany(row => row.Authors).SelectMany(row => row.Papers).SelectMany(row => row.Authors).SelectMany(row => row.Papers).SelectMany(row => row.Authors).SelectMany(row => row.Papers).SelectMany(row => row.Authors).SelectMany(row => row.Papers",
        "status": "BuildFailed",
        "errors": "/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs(12,40): error CS1026: ) expected [/Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/entity-framework.csproj]\n    0 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:00.72"
    },
    {
        "id": "1388290c053b121d2026a762e598f4daf65f62a57a0882b7fd45f9421a6c024c",
        "db_name": "scholar",
        "context_name": "ScholarContext",
        "question": "What is the venue of Fracture of acrylic bone cement ?",
        "sql": "SELECT DISTINCT venueid FROM paper WHERE title  =  \"Fracture of acrylic bone cement\";",
        "linq": "context.Papers.Where(row => row.Title == \"Fracture of acrylic bone cement\").Select(row => new { row.VenueId }).Distinct().ToList();",
        "generated": "context.Papers.Where(row => row.Title == \"Fracture of acrylic bone cement\").Select(row => row.Venue).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "e69162abecbbdcf85cd40b733bf1ef2e2c9838f42e3e6e92577de84aef74ddd5",
        "db_name": "scholar",
        "context_name": "ScholarContext",
        "question": "What is the year of publication of \" A Switching Architecture For ISDN \" ?",
        "sql": "SELECT DISTINCT title  ,  YEAR FROM paper WHERE title  =  \"A Switching Architecture For ISDN\";",
        "linq": "context.Papers.Where(row => row.Title == \"A Switching Architecture For ISDN\").Select(row => new { row.Title, row.Year }).Distinct().ToList();",
        "generated": "context.Papers.Where(row => row.Title == \"A Switching Architecture For ISDN\").Select(row => new { row.Year }).ToList();",
        "status": "Passed",
        "errors": null
    },
    {
        "id": "4b9b3e372396a8d16911cd0ceed3d5eab9aa2c8753f502ae72015679888bdee3",
        "db_name": "real_estate_properties",
        "context_name": "RealEstatePropertiesContext",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "sql": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "linq": "context.Properties.Where(row => row.PropertyTypeCode == \"House\").Select(row => row.PropertyName).Union(context.Properties.Where(row => row.PropertyTypeCode == \"Apartment\" && row.RoomCount > 1).Select(row => row.PropertyName)).ToList();",
        "generated": "context.Properties.Where(row => row.RoomCount > 1).Select(row => new { row.PropertyName }).Union(context.Properties.Where(row => row.HseFeature1 == \"House\" || row.HseFeature1 == \"Apartment\").Select(row => new { row.PropertyName })).ToList();",
        "status": "CodeFailed",
        "errors": "Unhandled exception. ResultsAreNotEqualException: Results are not equal.\n   at Tester.CompareResults(List`1 linqResults, List`1 sqlResults) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 162\n   at Tester.Test(Object linqQuery, String sqlQuery, DbContext context) in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Tester.cs:line 327\n   at Program.Main() in /Users/qfl1ck32/Stuff/Facultate/disertatie/Text2ORM/entity-framework/Program.cs:line 12\nSQL Results: [{0: longacre}, {0: parc coliseum}, {0: parc east}, {0: park}, {0: renoir}, {0: ten tower}, {0: the cole}, {0: vogue}]\nLINQ Results: [{0: avalon}, {0: chelsea}, {0: high line}, {0: longacre}, {0: murray hill}, {0: parc coliseum}, {0: parc east}, {0: park}, {0: prism}, {0: renoir}, {0: riverside}, {0: ten tower}, {0: vogue}, {0: wall street}]\n"
    }
]