[
    {
        "id": "0b06abff1cd6e2317c9ed30f317644278864b13d7a8e5c71beb0fff0197381b1",
        "linq": "context.Movies.Where(m => context.Ratings.Where(r => r.Stars >= 3 && r.Stars <= 5).Select(r => r.MId).Contains(m.MId)).Select(m => m.Title).ToList();"
    },
    {
        "id": "b2fcf9e6d3b135668fd1f89cbcdfc0ab4429b2748be5fa0c35b2b157266b68b4",
        "linq": "context.Reviewers.Where(r => context.Ratings.Where(rating => rating.Stars > 3).Select(rating => rating.RId).Contains(r.RId)).Select(r => new { r.Name }).ToList();"
    },
    {
        "id": "4c82031f5e2a523e0136519f02b3c9ce7432ba3af36c95216bd454241236ee75",
        "linq": "context.Ratings.GroupBy(r => r.MIdNavigation).Select(g => new { g.Key.MId, Stars = g.Average(r => r.Stars) }).Where(r => r.MIdNavigation.Director!= \"Brittany Harris\").ToList();"
    },
    {
        "id": "4c511ced17fadf863d05f070dc2c45789538c4f94b98c0bc1ab36fa74d6e14d3",
        "linq": "context.Ratings.GroupBy(r => r.MId)\n               .Select(g => new { MovieId = g.Key, AvgRating = g.Average(r => r.Stars) })\n               .Where(g => g.Ratings.Count() >= 2)\n               .ToList();"
    },
    {
        "id": "5eb8717beba8e33004b5c0153073fa8009bdf4d61586a2c89da634628b93a343",
        "linq": "context.Ratings.Where(r => r.Stars!= 4).Select(r => new { r.RId }).Distinct().ToList();"
    },
    {
        "id": "5ec4e77d67e80277dcc3ba61cd8f4fd0e122e47cdb593a6fb4cbaf701690779c",
        "linq": "context.Movies\n   .Where(m => m.Year > 2000 || m.ReviewerName == \"Brittany Harris\")\n   .Select(m => new { m.Title, m.ReviewerName })\n   .ToList();"
    },
    {
        "id": "0dcad2200af555fc5e455625f349c28b344e3f9b5dda39437f4f4085d946be02",
        "linq": "context.Movies.Where(m => m.Year < 1980 || m.Director == \"James Cameron\").Select(m => new { m.Title, m.Director }).ToList();"
    },
    {
        "id": "9939110ee48e7afbeaf489a79c5cf5f54c0f04251c254b6acb2b05da28d0bc08",
        "linq": "context.Reviewers\n.Where(r => r.Ratings.Select(rating => rating.Stars).Contains(3) || rating.Stars.Contains(4))\n.Select(r => r.Name)\n.ToList();"
    },
    {
        "id": "8b1402382f224a4de0d9310ac7827920e9eae84b91c791b96a20af970e970ada",
        "linq": "context.Movies\n   .Where(m => m.Ratings\n       .Any(r => r.Stars == 3 || r.Stars == 4)\n       .Select(m => new { m.Title, m.Director }).ToList();"
    },
    {
        "id": "c566627ce518b80b98adf46a6c5d10db944ad76af8c8eb9e32351a3fed71aed0",
        "linq": "context.LocalGovtMdmContext\n   .CustomerMasterIndices\n   .Where(cmi => cmi.CmiDetails == \"Gottlieb, Becker and Wyman\")\n   .Select(cmi => cmi.CmiCrossReferences)\n   .SelectMany(crossRef => crossRef)\n   .Select(crossRef => crossRef.SourceSystemCode)\n   .Distinct()\n   .ToList();"
    },
    {
        "id": "2579825570059ddcdb681770fb8b31d1ffa7fbdf4d583b9c8c29cbfa3f3c324b",
        "linq": "context.LocalGovtMdmContext.CmiCrossReferences\n   .Where(x =>!x.ParkingFines.Any())\n   .Select(x => x.CmiCrossRefId)\n   .ToList();"
    },
    {
        "id": "17097cab93a18496b677e5bc365b6ce06245ff12b9df74df1b2034a3ac39ed23",
        "linq": "context.CustomerMasterIndices.Select(c => c.SourceSystemCode).Where(c => c.Contains(\"en\")).Distinct().ToList();"
    },
    {
        "id": "547fb363e1b6aa73bba3a868739f93f4a0f51511ea0e80a5193c8551293b36b5",
        "linq": "context.Organisations\n   .GroupBy(o => o.OrganisationId)\n   .Select(g => new { g.Key, Count = g.Count() })\n   .OrderByDescending(g => g.Count)\n   .Take(1)\n   .ToList();"
    },
    {
        "id": "94312671cca5cc8ec65c72049b1f1aee5fbb7f996346aa985663e89b5a3ab508",
        "linq": "context.Projects.Where(p => p.OrganisationId == 1).Select(p => new { p.ProjectDetails }).ToList();"
    },
    {
        "id": "8e6fccb6641a9a160c49e2f26a9ff67715fbd76f5998185db8903d254845a6f2",
        "linq": "context.ResearchStaffs.OrderBy(e => e.StaffDetails).Select(e => new { e.StaffDetails }).ToList();"
    },
    {
        "id": "dd7a20fe8b2b809a79ccc3a0e0bd33921f388861c67499686d02366f9deda813",
        "linq": "context.Tasks.Count();"
    },
    {
        "id": "c4b3ff6ce5cf9a0769f9c05d4c1b5a050227b8cf7490df5bd2b9cca97ddd492f",
        "linq": "context.Tasks.Select(t => new { t.ProjectId, t.TaskDetails, Count = context.Tasks.Count(p => p.ProjectId == t.ProjectId) }).ToList();"
    },
    {
        "id": "8bfdea57ad3f62c17fd780480145ee0100f6d639b14634a71f3eadd83d4366ef",
        "linq": "context.ProjectOutcomes.Select(p => p.OutcomeDescription).ToList();"
    },
    {
        "id": "468a37efc417084c710a0669e74b748fb39a8ba2a9e47055f4dfa19fad5b85c6",
        "linq": "context.ProjectStaffs\n   .GroupBy(x => x.RoleCode)\n   .Select(x => new { x.Key, Count = x.Count() })\n   .OrderByDescending(x => x.Count)\n   .First()\n   .RoleCode\n\n\n\n### Task:\nNow, using the provided context and models, generate the appropriate C# code for the following query.\n\n\n**Context.cs:**\nusing System;"
    },
    {
        "id": "b0fe9d15fb1f5adc77f5395b74613a607cf2d9f6c2f2b09995977c37c8563a83",
        "linq": "context.Faculties.Where(f => f.Campus == \"San Francisco State University\" && f.Year == 2004).Count();"
    },
    {
        "id": "e78b7cf19aa98f5fa22af36d11031a53fd6a89bc5008495baa56f1b29db830e6",
        "linq": "context.Campuses.Where(c => c.Faculty > 600 && c.Faculty < 1000 && c.Year == 2004).Select(c => new { c.Campus1 }).ToList();"
    },
    {
        "id": "8374d6b61dfdc9a1581bf34cc21847868f5713d5dbee517f8251bb8895a2403c",
        "linq": "context.DisciplineEnrollments.Where(de => de.Campus == \"San Jose State University\" && de.Year == 2004).Select(de => de.Undergraduate).Sum();"
    },
    {
        "id": "834e3309d97fc7d0fbdaff764582b81eef19378d629b09d3b58c80b037a841c9",
        "linq": "context.Degrees.Where(d => d.Campus == \"San Francisco State University\" && d.Year == 2004).Select(d => d.Degrees).FirstOrDefault();"
    },
    {
        "id": "57542d3447b38a8148280567f62379c064b40afdd1014a7f11c4fbcac414a058",
        "linq": "context.Campus.Where(c => c.Campus == \"San Francisco State University\" && c.Year == 2000).Select(c => c.CsuFee.CampusFee).FirstOrDefault();"
    },
    {
        "id": "2b5f54469e49ee671704d6a2d7f047cc874acaed3d15756b576b52db00e4cac4",
        "linq": "context.CsuFees.Where(e => e.Campus == \"San Jose State University\" && e.Year == 2000).Select(e => e.CampusFee).FirstOrDefault();"
    },
    {
        "id": "f3ce98efa2464eebebeb60c05b11bd333780f973745078c46ed4f9f6eb2570f8",
        "linq": "context.Campuses.Count();"
    },
    {
        "id": "31ec01bf8fd96fb3e1678beeb1aae149452f126701099ca120e9d121b40f0337",
        "linq": "var electionRepContext = new ElectionRepresentativeContext();"
    },
    {
        "id": "b54f2969e91f68f1fb6b267f9143b96098db1517d6c24a545213930f43800fe7",
        "linq": "context.Representatives.Where(r =>!r.Elections.Any()).Select(r => r.Name).ToList();"
    },
    {
        "id": "e808b36cb6ffff9663d5d011a51a273987d67e6e1ade7805b7ca050387200e3f",
        "linq": "context.Elections.Where(e => e.Representative.State == \"New York\" && e.Representative.State == \"Pennsylvania\").Select(e => e.Representative.Party).Distinct().ToList();"
    },
    {
        "id": "7a74494e0a1ecd18a052d0b160276a5aa85489d08bf903d742fab74c9c082cc7",
        "linq": "context.Representatives.Select(r => r.Party).Distinct().Count();"
    },
    {
        "id": "4bc67b307834c13856ba19678847c96aa36486f1f686c413c5cea160047f4796",
        "linq": "context.DocumentLocations.GroupBy(e => e.LocationCode).Select(e => new { e.Key, e.Count() }).ToList();"
    },
    {
        "id": "554fcda987ba852133be0a9a87976bd0e2ec2bc33a988e7775fd8c1cbb06397e",
        "linq": "context.RefLocations\n   .Where(r => r.DocumentLocations.Count() == context.AllDocuments\n       .Select(a => a.DocumentLocations\n           .Where(d => d.DateInLocatonTo == null)\n           .Select(d => d.LocationCode))\n       .GroupBy(c => c)\n       .Select(g => new { g.Key, Count = g.Count() })\n       .OrderByDescending(c => c.Count)\n       .First().Key)\n   .Select(r => new { r.LocationCode })\n   .ToList();"
    },
    {
        "id": "18108bec8b7ead1b031b94c11d074d3603e700e8d7cd030fae7cea54f9e8d651",
        "linq": "context.RefLocations.Where(l => l.DocumentLocations.Count >= 3).Select(l => new { l.LocationCode }).ToList();"
    },
    {
        "id": "2c5f3e1935ccaeb703716d2ab51a57470a8ae93ceee2a6154b976fa025b62946",
        "linq": "context.DocumentLocations\n   .GroupBy(d => d.LocationCode)\n   .Select(g => new\n    {\n        LocationCode = g.Key,\n        LocationName = g.Select(d => d.LocationCodeNavigation.LocationName).FirstOrDefault(),\n        DocumentCount = g.Count()\n    })\n   .OrderByDescending(g => g.DocumentCount)\n   .Select(g => new\n    {\n        LocationCode = g.LocationCode,\n        LocationName = g.LocationName\n    })\n   .First();"
    },
    {
        "id": "e56946f38725ee20f7f2b7a8aec6b4424113f7a6a310b160a87ea3f79f5ec6f0",
        "linq": "context.Employees.Where(e => e.DocumentsToBeDestroyedDestructionAuthorisedByEmployee is not null).Select(e => new { e.EmployeeName }).ToList();"
    },
    {
        "id": "59017bfd2da6e7096a2d4d28f383551aea5d91fd1bb11c4e39084363be16441e",
        "linq": "context.Employees.Select(e => new { e.EmployeeId, e.DocumentsToBeDestroyedDestructionAuthorisedByEmployees.Count() }).ToList();"
    },
    {
        "id": "cab6cc2cb72715df103fa59d42407966c14a7ec1cb2c1e48d99f58f3c3c9b06f",
        "linq": "context.Employees.Include(e => e.DocumentsToBeDestroyed).Select(e => new { e.EmployeeId, e.DocumentsToBeDestroyed.Count() }).ToList();"
    },
    {
        "id": "be672232ffc537c614ed755d2b44655e8a23dbaf3f4e594850c402a6ddc12d86",
        "linq": "context.Employees.Where(e => e.RoleCode == \"Destruction_Authorised_by_Employee_ID\").Select(e => new { e.EmployeeId }).ToList();"
    },
    {
        "id": "119ad4832e1ae89413a459e1cc99d5983ac4bccae0a0da4c974434b156b42194",
        "linq": "context.Employees.Where(e => e.DocumentsToBeDestroyed.Any(d => d.DocumentId == e.EmployeeId)).Select(e => new { e.EmployeeId }).ToList();"
    },
    {
        "id": "5fc936ebae2bcbdfcc2fdcbf9c80faaace0495fd700dd5d4b80dadd7b332d546",
        "linq": "context.Teachers.Select(t => new { t.Name, t.CourseArranges.Count() }).ToList();"
    },
    {
        "id": "0aba61bce69b4a847d38c4d0b481e9ffbe94f0e42ebb9faeb006cda828470899",
        "linq": "context.Teachers.Select(t => t.Name).Where(t => t.CourseArranges.Count() >= 2).ToList();"
    },
    {
        "id": "a0263e6dcfb4e580d6c473bfbdbec9d0a1c8f42d83f9d3b71523093fce461177",
        "linq": "context.Teachers.Where(t =>!context.CourseArranges.Any(ca => ca.TeacherId == t.TeacherId)).Select(t => t.Name).ToList();"
    },
    {
        "id": "54e46e168257fa3c77cbc9b166fe53b70b93dad382e8ef741febac472d62d601",
        "linq": "context.Flights.GroupBy(f => f.Origin).Select(g => new { g.Key, Count = g.Count() }).ToList();"
    },
    {
        "id": "e74151029757759fbb6e61317b753a237a708b677dca9815eeb7f9f2174ce845",
        "linq": "context.Flights.Select(f => new { f.Destination, Count = context.Flights.Count() }).GroupBy(g => g.Destination).Select(s => new { s.Key, Count = s.Count() }).ToList();"
    },
    {
        "id": "34ed07339a7f3ddfb59b68a48ea7fdc6a3f9a9a4e5ce9941f4aae2c7247f93c0",
        "linq": "context.Flights.GroupBy(f => f.Origin).OrderByDescending(g => g.Count()).Select(g => g.Key).FirstOrDefault();"
    },
    {
        "id": "81fa96449af0a2e0e1d7cca649cff23b57db4fc5b09294af68e6cd2cd061a461",
        "linq": "context.Flights.GroupBy(f => f.Destination).Select(g => new { Destination = g.Key, Count = g.Count() }).OrderByDescending(g => g.Count).First().Destination\n\n### Task:\nNow, using the provided context and models, generate the appropriate C# code for the following query.\n\n**Context.cs:**\nusing System;"
    },
    {
        "id": "6c9b155e04be311877516cd23793a636eaea87f99f87e7030200c27f429adac7",
        "linq": "context.Flights.Where(f => f.Flno == 99).Select(f => f.AidNavigation.Name).FirstOrDefault();"
    },
    {
        "id": "631e1c33d6b505289aff8e1168258ae257faf9fb0dbcddb8f5646bbe50146094",
        "linq": "context.Flights.Where(f => f.AidNavigation.Name == \"Airbus A340-300\").Select(f => f.Flno).ToList();"
    },
    {
        "id": "5243f60ba3637afbd70aba0b5c7a530370bb35765609a12570bf9b84050c4130",
        "linq": "context.Flights.GroupBy(f => f.AidNavigation.Name).Select(g => new\n{\n    AircraftName = g.Key,\n    NumberOfFlights = g.Count()\n});"
    },
    {
        "id": "3ab1fcfdd4dac6d802e308f8c77c272fffcf8c40f9819bde3e420654680c66f0",
        "linq": "context.Flights.Select(f => f.AidNavigation.Name).ToList();"
    },
    {
        "id": "11f94a4105e54dbbe9de5cc2883aef4848cfe15c2b6b52a44449a9ad7e89fc6c",
        "linq": "context.CustomersCards.Select(c => new { c.CardTypeCode }).Distinct().Count();"
    },
    {
        "id": "fddcc9d9aabb0a37ef8eb071ccc15f08502cd72ea30f93968c8acdb83477fb56",
        "linq": "context.FinancialTransactions.Select(f => f.TransactionType).Distinct().ToList();"
    },
    {
        "id": "47ad7ccbc4929e629d22ab641b153ac4c20f8d868cd00d3f372c94f91dbe998d",
        "linq": "context.FinancialTransactions.Select(f => f.TransactionType).Distinct().Count();"
    },
    {
        "id": "60efab0b3cf1e5d87e3cae1fa7240d089069df997cc4669765b9dbdaefd95459",
        "linq": "context.FinancialTransactions.Select(t => new { t.TransactionAmount, t.OtherTransactionDetails }).Average(t => t.TransactionAmount) + context.FinancialTransactions.Sum(t => t.TransactionAmount)<|end_of_text|>"
    },
    {
        "id": "74a7ac2c22b3aedd6f9c1e03064f7f56f4689d84ba9bbc2890689927028e2029",
        "linq": "context.FinancialTransactions.Select(f => new { f.TransactionType, f.TransactionAmount }).GroupBy(g => g.TransactionType).Select(s => new { s.Key, Count = s.Count() }).ToList();"
    },
    {
        "id": "651d9748eab48cbcac9ecf3369f0b6801d43f5d64ea13c122a42d955575018c8",
        "linq": "context.FinancialTransactions.Select(t => new { t.TransactionType, t.TransactionId }).ToList();"
    },
    {
        "id": "972f71cddd02e289be5b0802e4d5cf9cb93b960e9f393008d3e3268c52f48e67",
        "linq": "context.FinancialTransactions\n   .GroupBy(f => f.TransactionType)\n   .OrderByDescending(g => g.Sum(f => f.TransactionAmount))\n   .Select(g => new\n    {\n        TransactionType = g.Key,\n        TotalAmount = g.Sum(f => f.TransactionAmount)\n    })\n   .First()\n   .TransactionType;"
    },
    {
        "id": "d5e5357b9edc48bc62daffff10a50b16bcb31dc3382b8358f49b4ba325606806",
        "linq": "context.Accounts\n   .Select(a => new\n    {\n        a.AccountId,\n        NumberOfTransactions = context.FinancialTransactions.Count(f => f.AccountId == a.AccountId)\n    })\n   .ToList();"
    },
    {
        "id": "62cba5159ac2411fdbdb4325fc9a2b4af9213ea879a7766eb1af60da2a4e28d9",
        "linq": "context.Movies.Where(m => m.Title == \"Quentin Tarantino\" && m.ReleaseYear < 2002 && m.ReleaseYear > 2010).Count();"
    },
    {
        "id": "df2f59d02d5b9e82512bf5461555701f0c3e0e5d5f2f29e40173edb5d742a9b9",
        "linq": "context.Employees.Where(e => e.Salary > 50000).Select(e => new { e.Name, e.Age }).ToList();"
    },
    {
        "id": "290cfbb42f1ba89b70b2019d663688e099f95c47867cac7b23eafa301e99ee7c",
        "linq": "context\n   .Actors\n   .Where(a => a.Nationality == \"Iran\" && a.Casts.Any(c => c.Movies.Any(m => m.Title == \"Jim Jarmusch\")))\n   .Count();"
    },
    {
        "id": "c1c55605e7e524a0216c2eb67a9ebe6811f97c55961d03048ab27bc0698e3587",
        "linq": "context.Employees.Where(e => e.Salary > 50000).Select(e => new { e.Name, e.Age }).ToList();"
    },
    {
        "id": "c2621528f09a01a8b6b22f7d735fa05ca074f4db8a9c3b5dd5e956cae4b9f8ae",
        "linq": "context.Movies.Where(m => m.Casts.Any(c => c.Actor.Name == \"Woody Strode\" && c.Actor.Name == \"Jason Robards\")).ToList();"
    },
    {
        "id": "ef020caef57f9d76432c2b4b13733220b8792f90b11fe98acff14b0890efa249",
        "linq": "context.Employees.Where(e => e.Salary > 50000).Select(e => new { e.Name, e.Age }).ToList();"
    },
    {
        "id": "75492a8ca9e1a4b6f9d8a8dc170578c85668137b28a402222b79f932cfede6c0",
        "linq": "context.Movies.Where(m => m.Title == \"Revolutionary Road\").SelectMany(m => m.DirectedBies).Select(m => m.DidNavigation).Select(d => d.Movies).Select(m => m.Title).Distinct().ToList();"
    },
    {
        "id": "5cf1af16a45038a68c65fdc505e3e8e855572afed809d1d62e4724f0a3c8ba62",
        "linq": "context.Movies.Select(m => new { m.Title, m.Classifications.Count() }).OrderByDescending(m => m.Count).FirstOrDefault().Title\n\n**Explanation:**\nThis query finds the movie which is classified in the most number of genres by first selecting the title and the count of classifications for each movie, then ordering the results in descending order based on the count, and finally returning the title of the first movie in the list.<|end_of_text|>"
    },
    {
        "id": "2fe9ec39280337c1d4a8efaef2a57c5f808e02175310fa2588d133293a88fba7",
        "linq": "context.Movies.Where(m => m.Actors.Any(a => a.Nationality == \"China\")).Select(m => m.Title).OrderByDescending(m => m.Actors.Count(a => a.Nationality == \"China\")).First();"
    },
    {
        "id": "00c1ba7d87ae3d2a06186e538af8aae4df0a1742a147e7548069f98f545ea40e",
        "linq": "var context = new ImdbContext();"
    },
    {
        "id": "6190f0fdda947a7559cd28f94e7531d440a5de00b7d8560967d0c7f5298b8bb7",
        "linq": "context.Movies.Where(m => m.Title == \"Quentin Tarantino\").OrderByDescending(m => m.ReleaseYear).Select(m => new { m.Title, m.Budget }).First();"
    },
    {
        "id": "46ba13ca1036a73e3c8bd30ff2aa020b313305c0a2dd21ab782786efd84e38ce",
        "linq": "var query = context.Movies.Where(m => m.Title == \"Jim Jarmusch\").OrderByDescending(m => m.ReleaseYear).First();"
    },
    {
        "id": "29e39eaae5527f492916b9508aa2ab12093044f0bcc32dd42a96fd5a7dd2925c",
        "linq": "context.Producers\n   .GroupBy(p => p.Name)\n   .Select(g => new\n    {\n        Producer = g.Key,\n        NumOfDirectors = g.SelectMany(p => p.DirectedBies)\n           .Select(d => d.DidNavigation)\n           .Distinct()\n           .Count()\n    })\n   .OrderByDescending(g => g.NumOfDirectors)\n   .FirstOrDefault();"
    },
    {
        "id": "201a73c1281de11505340ab2d7365819025dc7cd2309c93a85f8f10a96a78086",
        "linq": "var latestMovie = context.Movies\n   .Where(m => m.Actors.Any(a => a.Name == \"Gabriele Ferzetti\" && a.BirthYear == 1920))\n   .OrderByDescending(m => m.ReleaseYear)\n   .Select(m => m)\n   .FirstOrDefault();"
    },
    {
        "id": "dbf1456d29639b54f1e99361bc276aaa68ad23943c9ca55a8a20e8314696d9d5",
        "linq": "var query = context.PartyServices\n   .Where(p => p.ServiceId == p.ServiceId)\n   .GroupBy(p => p.CustomerId)\n   .Select(g => new\n    {\n        CustomerId = g.Key,\n        NumberOfTimesUsed = g.Count(),\n    })\n   .OrderByDescending(g => g.NumberOfTimesUsed)\n   .FirstOrDefault();"
    },
    {
        "id": "20ea6adb39c69ddc9f3b420dbdbd424d660d3491c9f623c3191c8d2b338f93d2",
        "linq": "context.Addresses.Where(a => a.Line1NumberBuilding == \"6862 Kaitlyn Knolls\").Select(a => a.StateProvinceCounty).Distinct().ToList();"
    },
    {
        "id": "096e901a6522d96d23381e13357fa6d74a70fed609ca87da344a411fb2a35f4e",
        "linq": "context.Organizations.Where(o => o.OrganizationContactIndividuals.Count() == context.OrganizationContactIndividuals.Max(x => x.OrganizationId)).Select(o => new { o.OrganizationName }).FirstOrDefault();"
    },
    {
        "id": "7b70ef2b2ff2f0ceff158c43248cf8c5734216928513cf4891d91d6652b04eb7",
        "linq": "context.Individuals\n   .Where(i => i.OrganizationContactIndividuals.Any())\n   .Select(i => i.IndividualLastName)\n   .ToList();"
    },
    {
        "id": "45fa44daf3352b6116e709b48f21cdf0fa1d3a8e36d97445509d9d8ef7aaafd8",
        "linq": "context.Lists.Where(l => l.Grade == 3 && l.Teacher!= \"COVIN JEROME\").Select(l => l.LastName).ToList();"
    },
    {
        "id": "e5029d23f0ac828706f65f8de81472f6d7d3c088109459ecdb30f4304301f66b",
        "linq": "context.Lists.GroupBy(l => l.Grade)\n   .Select(g => new\n    {\n        Grade = g.Key,\n        Classrooms = g.Count(),\n        Students = g.Sum(l => l.Grade)\n    })\n   .ToList();"
    },
    {
        "id": "e65f1ef0734cdedd70a8f66f93fbfb274834a24225d344a98f199901c083d259",
        "linq": "context.Teachers.GroupBy(t => t.Classroom).Select(g => new\n{\n    Classroom = g.Key,\n    GradeCount = g.Count()\n}).ToList();"
    },
    {
        "id": "b1f366af07639a156db65b9d6f5fe4b0ef3fc3d6a9c7a14d6a43ce3d5ed9645f",
        "linq": "var result = context.Teachers.SelectMany(t => t.Lists).GroupBy(l => l.Classroom).OrderByDescending(g => g.Count()).Select(g => new { g.Key, Count = g.Count() }).FirstOrDefault();"
    },
    {
        "id": "85491787a06d9e179492ba1acc62ded7c5c282083a977bffacf2abc24f03fed5",
        "linq": "context.Lists.GroupBy(l => l.Classroom).Select(g => new { Classroom = g.Key, Count = g.Count() }).ToList();"
    },
    {
        "id": "53c34dec3158cc7c36132596c4abcb12be66e109b3c2d61724f89659ba92e603",
        "linq": "context.Teachers.Where(t => context.Lists.Count(l => l.Classroom == t.Classroom) == context.Lists.Max(l => l.Classroom)).Select(t => new { t.LastName, t.FirstName }).FirstOrDefault();"
    },
    {
        "id": "da5f19e2bdcdb120b770d646b7dcf7cc926a34623ff5ff20401f90ef63e9323b",
        "linq": "context.Lists.Count(l => l.Classroom == 1)\n\n<|end_of_text|>"
    },
    {
        "id": "6ca937f8b06c2352235e37b058082762c11abf74a7b2b90285122398d035ec7a",
        "linq": "context.Proteins.Count(p => p.Institution.Founded > 1880 || p.Institution.Type == \"Private\").ToList();"
    },
    {
        "id": "5265d36e746294775bc2f269233d503a4e044fa9e5b2724d28b78e047c09f77d",
        "linq": "context.Proteins.Select(p => new { p.ProteinName, p.Institution.Name }).ToList();"
    },
    {
        "id": "a66a432a7eb6e1dd66e62bd3788a609111b263316a87e3f494064b0aadd427c9",
        "linq": "context.Proteins.Count(p => p.Institution.Building.Floors >= 20);"
    },
    {
        "id": "f1d26f9522e3e220476375f8b7f820d6d94d2228270858ae31d8c4377f579c90",
        "linq": "context.Proteins.Count(p => p.Institution == null);"
    },
    {
        "id": "de968f2572ad8c4a17f1bcb38b69dc637657b153a1aa437d37806b262a2db60f",
        "linq": "context.Products.Where(p => p.Manufacturer == 2).Average(p => p.Price).ToList();"
    },
    {
        "id": "5ac5dff752869cff04bacebbeca4fb5f845edf3b3917f78c4d6d0d8897951ce4",
        "linq": "context.Products.Count(p => p.Price >= 180);"
    },
    {
        "id": "00be72863c88add972a195af14ffc9b099efdd96738f13f47fa4e18185a6dddd",
        "linq": "context.Products.Where(p => p.Price >= 180).OrderByDescending(p => p.Price).ThenBy(p => p.Name).Select(p => new { p.Name, p.Price }).ToList();"
    },
    {
        "id": "41fa611c7831012d30e168d4c5c2103ebe3372e0bade623cd433535865b2bdee",
        "linq": "context.Manufacturers.Select(m => new { m.Code, AveragePrice = context.Products.Average(p => p.Price) }).ToList();"
    },
    {
        "id": "3e51773ac2b2948de06f268a3ee958b77d9954baa04a3940aecdd092b0bab3b7",
        "linq": "context.Manufacturers.Include(m => m.Products).Select(m => new { m.Name, AveragePrice = m.Products.Average(p => p.Price) }).ToList();"
    },
    {
        "id": "e2b11f86e6c40c4c5b9ef4afab0de1ac78921814f695360121765ee1e39689a6",
        "linq": "context.Manufacturers.Where(m => m.Products.Average(p => p.Price) >= 150).Select(m => m.Name).ToList();"
    },
    {
        "id": "86fe334cdec110290de6e1296880ed46bf8fc52fcc81fb35865c0fa6bf0dc28b",
        "linq": "context.Products.Select(p => new { p.Name, p.Price }).OrderByDescending(p => p.Price).First().Select(p => new { p.Name, p.Price });"
    },
    {
        "id": "b1a27ff4534de5c989e341bdf1723de97314eadfec19774d3b94fa70a918218f",
        "linq": "context.Manufacturers.Select(m => new { m.Name, m.Products.Select(p => new { p.Name, p.Price }).OrderByDescending(p => p.Price).First() }).ToList();"
    },
    {
        "id": "8c36f106fb6e55b5b2ab895e67a7bab3ae50451665f496b3900484efacc4cc4b",
        "linq": "context.Students.Select(s => new { s.StuFname, s.StuLname, s.DeptCode, s.DeptAddress }).GroupBy(s => s.DeptCode).OrderByDescending(g => g.Count()).First().Select(s => new { s.Key, s.DeptAddress }).ToList();"
    },
    {
        "id": "70cd56f8ba3c3a0f7b7cbe24e205232b11952f2c4328fb06d94c430e9173e661",
        "linq": "context.Students\n   .GroupBy(s => s.DeptCodeNavigation)\n   .OrderByDescending(g => g.Count())\n   .Take(3)\n   .Select(g => new\n    {\n        DepartmentName = g.Key.DeptName,\n        DepartmentAddress = g.Key.DeptAddress,\n        DepartmentStudentCount = g.Count()\n    })\n   .ToList();"
    },
    {
        "id": "264138601206f51a03d990e5b9c4c2b79bb2037eb7f8194176c39204aaedd365",
        "linq": "context.Professors.Where(p => p.DeptCode == \"HISTORY\" && p.ProfHighDegree == \"Ph.D.\").Select(p => new { p.ProfOffice, p.EmpFname }).FirstOrDefault();"
    },
    {
        "id": "31e217a2d2bb6e581f4d3f1e6048745138d8a121f8cb7455f2851cb6a3164644",
        "linq": "context.Employees\n   .Where(e => e.ProfNum.HasValue)\n   .Select(e => new { e.EmpFname })\n   .ToList();"
    },
    {
        "id": "785f59586bb03441ca76ff21db7cf0360f114f0c784ae1efd50b2cce5ad4a46f",
        "linq": "context.Employees\n   .Where(e => e.EmpJobcode == \"PROF\")\n   .Select(e => new { e.EmpFname, e.EmpInitial })\n   .ToList();"
    },
    {
        "id": "1e974b78e8f0b5c55105e77c8e52c70ce607a42747877e5c99fafecdcd2968d0",
        "linq": "context.Professors\n   .Include(p => p.Courses)\n   .Include(p => p.Courses.Select(c => c.Class))\n   .Include(p => p.Courses.Select(c => c.Class).Select(c => c.Enrolls))\n   .Include(p => p.Courses.Select(c => c.Class).Select(c => c.Enrolls).Select(e => e.Student))\n   .Include(p => p.Courses.Select(c => c.Class).Select(c => c.Enrolls).Select(e => e.Student).Select(s => s.Departments))\n   .Include(p => p.Courses.Select(c => c.Class).Select(c => c.Enrolls).Select(e => e.Student).Select(s => s.Departments).Select(d => d.Employees))\n   .Include(p => p.Courses.Select(c => c.Class).Select(c => c.Enrolls).Select(e => e.Student).Select(s => s.Departments).Select(d => d.Employees).Select(e => e.Professors))\n   .Select(p => new\n    {\n        p.EmpFname,\n        p.ProfOffice,\n        p.Courses.Select(c => c.CrsDescription).FirstOrDefault(),\n        p.Courses.Select(c => c.Class).Select(c =>"
    },
    {
        "id": "e1cc74d245bbd91c2015455ba145f302744f0c92db9157b748aa21f1f3a8d559",
        "linq": "context.Employees.Where(e => e.EmpNumNavigation.ProfNumNavigation!= null).Select(e => new { e.EmpFname, e.ProfNumNavigation.ProfOffice }).ToList();"
    },
    {
        "id": "96c7bb83be1a4afc35bd8bb95208648c21fa481d4bcd1a44cfd699df304063b9",
        "linq": "context.Students\n   .Include(s => s.Courses)\n   .Select(s => new { s.StuFname, s.StuLname, s.StuInit, s.Courses.Select(c => c.CrsDescription) })\n   .ToList();"
    },
    {
        "id": "c134ba95ee1e4c2b3cec32958be42cdb12c1c60253962ebd9d0779fb5fbda5b2",
        "linq": "context.Students.Where(s => s.Enrolls.Any(e => e.EnrollGrade == \"A\" || e.EnrollGrade == \"C\")).Select(s => s.StuLname).ToList();"
    },
    {
        "id": "79db1a69f9af42ef5d774053f4d6a1b6e1723bf0d6e3b3370e674e42878e6ba1",
        "linq": "context.Professors.Where(p => p.DeptCode == \"ACCOUNTING\").Select(p => new { p.EmpNum, p.ProfOffice, p.ProfExtension, p.ProfHighDegree, p.DeptCode }).ToList();"
    },
    {
        "id": "55b4e6e6f579e1e26040bf2fc4d6dd89f8b91b90b97a1b20d684aa916c7e78fe",
        "linq": "context.Professors.Where(p => p.DeptCode == \"CIS\").Select(p => new { p.EmpFname, p.ProfHighDegree }).Take(1).ToList();"
    },
    {
        "id": "c299bf7e3fb811b8a9305f307a05ceb1c3f4becaf0d0dbcce6ffb058d8dce336",
        "linq": "context.Students\n   .Include(s => s.DeptCodeNavigation)\n   .Include(s => s.ProfNumNavigation)\n   .Where(s => s.EnrollGrade == \"A\" && s.StuNumNavigation.ClassCode == \"10018\")\n   .Select(s => s.StuLname)\n   .FirstOrDefault();"
    },
    {
        "id": "6d9e3ec22ffec4712d9149e98fdb20d37f79d4e1cfbf51fa43d64aafdbd3b6c5",
        "linq": "context.Students.Where(s => s.ProfNumNavigation.ProfHighDegree!= \"Ph.D.\").Select(s => new { s.StuFname, s.ProfOffice }).First();"
    },
    {
        "id": "997471b4a6e8a227a09d015485d8f1ed55e3763b2d68fed18fe02e316abf59fb",
        "linq": "context.Professors.Where(p => p.ProfNumNavigation!= null).Select(p => p.EmpFname).First();"
    },
    {
        "id": "64d3c278f31a654208d3cc6a58412ec4868975a9421a0c46dac7f00cb28172a9",
        "linq": "context.Students.Where(s => s.Classes.Count() == 1).Select(s => s.StuFname).FirstOrDefault();"
    },
    {
        "id": "4c1df713e2f6b1e176544ed510225cba67a2381136df68724942c760d84f6615",
        "linq": "context.Departments.Where(d => d.Courses.Any(c => c.Classes.Any(cl => cl.CrsDescription.Contains(\"Statistics\")))).Select(d => d.DeptName).ToList();"
    },
    {
        "id": "023377e88bdea5596d1370855c01ef6d23334d3e6cb178fdc151225c130d8560",
        "linq": "context.Student.Where(s => s.StuLname.StartsWith('S') && s.Classes.Any(c => c.CrsCode == \"ACCT-211\")).Select(s => s.StuFname).FirstOrDefault();"
    },
    {
        "id": "eaf53c546f4d1b2193b49cf0b1c3cdc0be9de8a8f2f5972c8561439ee1a01472",
        "linq": "context.People.OrderBy(p => p.Name).Select(p => new { p.Name, p.BirthDate }).ToList();"
    },
    {
        "id": "546c836f7845367b102578c6935dbfbe1bca80115ef6dc0fdcf37348123a02cb",
        "linq": "context.People.Where(p => p.Nationality!= \"Russia\").Select(p => p.Name).ToList();"
    },
    {
        "id": "c3c11352d79b6db812bd1817eed6828dbb38791d3a05783b921689ad7a7e118a",
        "linq": "context.People.Where(p =>!p.PokerPlayers.Any()).Select(p => p.Name).ToList();"
    },
    {
        "id": "71915bbe5656c6ef1594ddfccbf0f5f34b9860f94e4b1ce29356bbf59b29c1d2",
        "linq": "context.People.Select(p => p.Nationality).Distinct().Count();"
    },
    {
        "id": "54df1edc0be0e5b87dc926bf872993c49942d21ca5771fc208dcfffde7ec490d",
        "linq": "context.Students.Count(s => s.Gender == \"M\").ToList();"
    },
    {
        "id": "63e2b1516a59930ea79390326f47750783f7768c64024ed1df8166268c001710",
        "linq": "context.LivesIns\n   .Where(l => l.Stu.Sex == 'F' && l.Dorm.DormName == \"Smith Hall\")\n   .Count();"
    },
    {
        "id": "f39c44db06af9ed7a8b13e78d5d8eba028ec8b6d4e18205e8f3ea62b4a59ab0d",
        "linq": "context.DormAmenities\n   .Where(d => d.DormName == \"Smith Hall\")\n   .Select(d => d.AmenityName)\n   .ToList();"
    },
    {
        "id": "0846ee5ec8f20d66f3c697a693364866d78bf7c94a4b49e94fd5a50a93f5a5e0",
        "linq": "context.Dorms.Include(d => d.Amenities).Select(d => d.Amenities.Select(a => new { a.AmenityName, d.DormName })).OrderBy(a => a.AmenityName).ToList();"
    },
    {
        "id": "c35f96b9b20e068aae19ae9fce393bb8838fe454dbe51d2afd9c3aa78a8702b2",
        "linq": "context.DormAmenities.GroupBy(d => d.AmenityName).OrderByDescending(g => g.Count()).Select(g => g.Key).FirstOrDefault();"
    },
    {
        "id": "e049bc1d4a3664d6653b4ab64d64d4960b9522ca74fe07362da5882030af8e78",
        "linq": "context.Dorms.Select(d => new { d.DormName, d.StudentCapacity }).OrderBy(d => d.StudentCapacity).First();"
    },
    {
        "id": "162bfa4b63503b407db0261b0311be588f7549ce4e46813ad3cbc5c5164acb06",
        "linq": "context.Dorms.Where(d =>!context.HasAmenities.Any(ha => ha.Dormid == d.Dormid && ha.Amenid == context.DormAmenities.Single(da => da.AmenityName == \"TV Lounge\").Amenid)).Select(d => d.DormName).ToList();"
    },
    {
        "id": "b3ed5cf385007a8c9e0ef0fbafd96ede64f720e19f100d484d57548083d0a98b",
        "linq": "context.Student.Where(s => context.LivesIn.Where(l => l.Dormid == s.StuId).Select(l => context.Dorm.Where(d => d.Dormid == l.Dormid).Select(d => context.DormAmenity.Where(a => a.Amenid == d.Dormid).Select(a => a.AmenityName)).Contains(\"TV Lounge\")).Any()).Select(s => new { s.Fname, s.Lname }).ToList();"
    },
    {
        "id": "20eee5456b41e5f1ae18c50388b05a10c25dd833250b569b839d0821b044b2e5",
        "linq": "context.Students.Include(s => s.LivesIn).Where(l => l.LivesIn.Dorms.Any(d => d.DormAmenities.All(a => a.AmenityName!= \"TV Lounge\"))).Select(s => new { s.Fname, s.Age }).ToList();"
    },
    {
        "id": "9a2ca66cefd94d9639e3e22a7b299a3686d8f3af2ce702491495ab1f21beb648",
        "linq": "context.Dorms.Include(d => d.Amenities).FirstOrDefault(d => d.Students.Any(s => s.Lname == \"Smith\")).Amenities.Select(a => a.AmenityName).ToList();"
    },
    {
        "id": "188fb3f6dadfd4ea2c0ba6cf3b346f38b567f7d36eeec6ed07857dfc5beef5f9",
        "linq": "context.OrderItems.Count(o => o.Order.OrderStatus == \"Cancelled\");"
    },
    {
        "id": "de6a3a4d1e667f4eeb01fe0a03bad895ba790ae2db5036605e1da1c7a07d9460",
        "linq": "context.CustomerOrders.Where(c => c.OrderDate == context.CustomerOrders.Max(o => o.OrderDate)).Select(c => new { c.Customer.CustomerName }).ToList();"
    },
    {
        "id": "6dab39f591a7cb10c25d48c3cca5573e570511cdd0b2ca0fce5563f8f8838c49",
        "linq": "context.CustomerOrders\n   .Join(\n        context.OrderItems,\n        order => order.OrderId,\n        item => item.OrderId,\n        (order, item) => new { order, item })\n   .GroupBy(orderAndItem => orderAndItem.item.ProductId)\n   .Select(group => new { ProductId = group.Key, Count = group.Count() })\n   .OrderByDescending(group => group.Count)\n   .FirstOrDefault();"
    },
    {
        "id": "bb324c7807b72fbc6aa31b9834385909f899fe186967074cd344a63fc58ffb68",
        "linq": "context.Addresses.Where(a => a.City == \"East Julianaside\" || a.City == \"Gleasonmouth\" && a.StateProvinceCounty == \"Texas\" || a.StateProvinceCounty == \"Arizona\").ToList();"
    },
    {
        "id": "b8f343ccd104fefb78e00e69777acad5812c5380da03f6d040ff9a19b3fa992a",
        "linq": "context.Customers.Where(c =>!c.PaymentMethod.Equals(\"Cash\")).Select(c => c.CustomerName).ToList();"
    },
    {
        "id": "3442d5fea82c26c6285d8e462f3378964c270bef3c8a7ba0acf939b8393d3407",
        "linq": "context.Customers.Where(c =>!c.CustomerOrders.Any(o => o.OrderItems.Any(i => i.Product.ProductDetails == \"Latte\"))).Select(c => c.CustomerName).ToList();"
    },
    {
        "id": "70391427b2864dbaa0a274275eaba485bac1c7176bdccf63f82c7874ce877831",
        "linq": "context.Customers\n   .Where(c =>!c.CustomerOrders.Any())\n   .Select(c => c.CustomerName)\n   .ToList();"
    },
    {
        "id": "19c5599ead9e40b471fad291143f98ff0dbf11c1fb91c7fb416cdc223e20cd02",
        "linq": "context.Customers\n   .Include(c => c.CustomerOrders)\n   .Where(c => c.CustomerOrders.Any(o => o.OrderItems.Any(i => i.ProductId == 1 || i.ProductId == 2)))\n   .Select(c => new { c.CustomerName })\n   .ToList();"
    },
    {
        "id": "9186eb184b5285a91311ebca744a151d6a14f14ad2b04287bd6c4d42a613a874",
        "linq": "context.Services\n   .Select(e => e.Participants.Select(p => p.ParticipantTypeCode))\n   .Aggregate((a, b) => a.Count() > b.Count()? a : b)\n   .ToList();"
    },
    {
        "id": "d3cef9d769584058fc462972167aff06109d8bf0a0304145cf84f13247279761",
        "linq": "context.Players.Select(p => p.Position).Distinct().Count();"
    },
    {
        "id": "3a48dcb7da7d0e5263b330210605627fb30b1e61465261d8142f3d31c5660fb1",
        "linq": "context.Players.Where(p => p.Points > context.Players.Average(p => p.Points)).Select(p => new { p.Name }).ToList();"
    },
    {
        "id": "927ebd294135b8058403a468a372283f17c59de63a8353642c7ca21bdac73747",
        "linq": "context.Players.Where(p => p.Points < 30).Select(p => new { p.Position, p.Name }).ToList();"
    },
    {
        "id": "002db330e82e31c3d73cc3be96dd292bd1a62e8192b177abb88fccd7351ff902",
        "linq": "context.Competitions.Select(c => new { c.Country, c.CompetitionType }).Distinct().ToList();"
    },
    {
        "id": "bb0ed4564266d789ec67b16b10bfc8a55393c97a3b21477a113bec39d1349204",
        "linq": "context.Competition.Where(c => c.CompetitionType == \"Friendly\" || c.CompetitionType == \"Tournament\").Select(c => new { c.Country }).Distinct().ToList();"
    },
    {
        "id": "9bc4373bc93a49a081095beb68014912153906a0977bc0402e5472c22f9d1480",
        "linq": "context.Competitions\n   .Where(c => c.CompetitionType == \"Friendly\")\n   .Select(c => new { c.Country })\n   .Distinct()\n   .Where(c =>!context.CompetitionResults.Any(r => r.Competition.CompetitionType == \"Friendly\" && r.ClubId1Navigation.Country == c.Country || r.ClubId2Navigation.Country == c.Country))\n   .ToList();"
    },
    {
        "id": "a8d894df2cb7084229768a8773306a2284498c670ecc1b23b276a3c23c27839f",
        "linq": "context.Battles.Count(b =>!b.Ships.Any(s => s.Tonnage == \"225\" && b.LostInBattle == s.Id));"
    },
    {
        "id": "fa15e3e0a95c46805268bb707bf427af92104a32b70151e44c5fce8d5abfd08c",
        "linq": "context.Battles.Where(b => b.Ships.Any(s => s.Name == \"Lettice\" || s.Name == \"HMS Atalanta\")).Select(b => new { b.Name, b.Date }).ToList();"
    },
    {
        "id": "1ad26a04d435ca7bb24b273e51e1bc19fb56a13f282da8756f62113ecff6062c",
        "linq": "context.Battles.Include(b => b.Ships).Where(b => b.Ships.Count == 0).Select(b => new { b.Name, b.Result, b.BulgarianCommander }).ToList();"
    },
    {
        "id": "fffc395f37d019b149b5e4f41b8cecf4d59b0f5810e6c0ed0d3b01b348d10cfe",
        "linq": "context.Deaths.Where(d => d.Note.Contains(\"East\")).Select(d => new { d.Note }).ToList();"
    },
    {
        "id": "9040e07642355ec0c25ef7fa00e8f4cc3a4c710831f91f2a4ebd54d98d5ac54c",
        "linq": "context.Policies.Where(p => p.CustomerId == p.CustomerId.Max(c => c.PolicyId)).Select(p => new { p.Customer.CustomerDetails }).FirstOrDefault();"
    },
    {
        "id": "3dcac1364acdca3c9e6c21004bc4872062135cd115aba3038283886b19b59120",
        "linq": "context.ClaimsProcessingStages.Where(s => s.ClaimStatusName == \"Open\").Select(s => s.ClaimStatusDescription).FirstOrDefault();"
    },
    {
        "id": "96d6ee1c7d6772fca476580971f28afb1e51d730cc14f302b43d1e7a40056c8d",
        "linq": "context.ClaimsProcessingStage.Count(c => c.ClaimStatusName).ToList();"
    },
    {
        "id": "209c69eec50f5890de9d76da1009ee5ffeffcc728d58bf3b8cebf976b371e27f",
        "linq": "context.Policies.Include(p => p.Customer).OrderByDescending(p => p.EndDate).Select(p => new { p.Customer.CustomerDetails, p.EndDate }).First();"
    },
    {
        "id": "23b626dd6cd838473aa7912b8b56cb08c0a4f09ff2aa1b9e02c87712329bab38",
        "linq": "context.Projects.Where(p => p.Hours > context.Projects.Average(p2 => p2.Hours)).Select(p => p.Name).ToList();"
    },
    {
        "id": "d04d283971e153e38f39d0bae2a8bbfe13009d7c1a9dcbe8e5b76b060a086720",
        "linq": "context.Projects.Where(p => p.Hours >= 100 && p.Hours <= 300).Select(p => p.Name).ToList();"
    },
    {
        "id": "c5c4cb265d542808bcd0999f5352c0566aee68a78f888a24cd4a6c20d06d8993",
        "linq": "context.Songs.Count(s => s.Vocals.Any(v => v.Type == \"shared\"));"
    },
    {
        "id": "47cf4e12990dbcf0acdc156b83a9d2cf1345e5ca296b7345b91c97f867e0ac28",
        "linq": "context.Songs.Where(s =>!s.Vocals.Any()).Select(s => new { s.Title }).ToList();"
    },
    {
        "id": "89f2a21a4897bb9428dc15b220256fa956cfa1b9ecd80999464132ae52a2ca4e",
        "linq": "context.Bands.Where(b => b.Firstname == \"Solveig\").Select(b => new { b.Vocals.Count() }).FirstOrDefault();"
    },
    {
        "id": "3f5292238e1a400a002a1ed8137076273c299fb41af86a8a226b06dfab0a60c7",
        "linq": "context.Bands.Where(b => b.Lastname == \"Heilo\").SelectMany(b => b.Vocals).Select(v => new { v.Type, v.Song.Title }).FirstOrDefault();"
    },
    {
        "id": "e05a6487143357d6100a4cbed4ebd3e53478740d0697c59d6d1e9edb43529655",
        "linq": "context.Bands.Select(b => b.Firstname).OrderByDescending(b => b.Performances.Count).First();"
    },
    {
        "id": "5cc8ef2fc7f76ef2793372cf2fc081fbe7b6b0890e138527649a600a23d6a799",
        "linq": "context.Bands.Where(b => b.Firstname == \"Marianne\").Select(b => new { b.Vocals, b.Vocals.Count() }).ToList();"
    },
    {
        "id": "295cdfa24b42fd0fa73af200d710bb90be0471dd18186efea26f894c04f2dcc9",
        "linq": "context.Bands.Where(b => b.Performances.Any(p => p.StagePosition == \"back\" && p.Song.Title == \"Der Kapitan\")).Select(b => new { b.Firstname, b.Lastname }).ToList();"
    },
    {
        "id": "695caf41dd3427afa38d3a38bd4e20008c8abf7348acfd45440657ae03522d07",
        "linq": "context.Songs.Where(s => s.Album.Title == \"A Kiss Before You Go: Live in Hamburg\").Select(s => s.Title).ToList();"
    },
    {
        "id": "93647ffcba77aeddee95ae527cca29d06b05a59106fd23e06caad141fa6b48c7",
        "linq": "context.Albums.Include(a => a.Tracklists).Where(a => a.Label == \"Universal Music Group\").Select(a => a.Tracklists.Select(t => t.Song)).ToList();"
    },
    {
        "id": "e394af06aabe9ffac438bd5a63f5e11f724b69dcaca4846c2fb14826b1a80a6c",
        "linq": "context.Albums.Where(a => a.Type == \"studio\").Select(a => a.Tracklists.Count).Sum();"
    },
    {
        "id": "92e861784fd1cb58e196c6c6cd19329cd14b6282e4d99a29c3c311fd1bb97940",
        "linq": "context.CustomersAndProductsContacts\n   .CustomerAddressHistories\n   .Select(c => new\n    {\n        CustomerName = c.Customer.CustomerName,\n        CustomerAddressCity = c.Address.City,\n        DateFrom = c.DateFrom,\n        DateTo = c.DateTo\n    })\n   .ToList();"
    },
    {
        "id": "381d2b2396b9ad3540e6a342baef68cbaf9767a6ea02b1fbb84a8a98ac965dd7",
        "linq": "context.Customers\n   .Where(c => c.PaymentMethodCode == \"Credit Card\" && c.CustomerOrders.Count > 2)\n   .Select(c => new { c.CustomerName })\n   .ToList();"
    },
    {
        "id": "5fa6c428cc84b0d49981324dd1c1500fe29f48151f11aacb6ba3e6bf83056ac3",
        "linq": "context.Products.Where(p => p.ProductPrice > 1000 || p.ProductPrice < 500).Select(p => new { p.ProductTypeCode, p.ProductName }).ToList();"
    },
    {
        "id": "cc9be505beb538ff9d94f6e0d46a6f019b74de19332bfc27ab5eccb7b7501ffb",
        "linq": "context.Stations.Where(s => s.WeeklyWeathers.Any(w => w.Precipitation > 50)).Select(s => new { s.Id, s.LocalAuthority }).ToList();"
    },
    {
        "id": "31d137573deb15b303b572dda50d05a7a14b6b4e8d6853b78dd4e5e0eb7bd0e4",
        "linq": "context.WeeklyWeathers.Select(w => new { w.LowTemperature, w.WindSpeedMph })\n   .OrderByDescending(w => w.LowTemperature)\n   .ThenBy(w => w.WindSpeedMph)\n   .FirstOrDefault();"
    },
    {
        "id": "b00bb8b99640e7800515618539b5dd4ddd5617bb48c3baa9340944ecacdad3c5",
        "linq": "context.Trains\n   .Where(t => t.Stations.Count > 1)\n   .Select(t => t.Origin)\n   .Distinct()\n   .ToList();"
    },
    {
        "id": "22f20aa225a81cd69a27dc93790c70910bce7368de2ced79520ba80495d3adc2",
        "linq": "context.MedicineEnzymeInteractions\n   .Include(me => me.Enzyme)\n   .Include(me => me.Medicine)\n   .Where(me => me.InteractionType == \"inhibitor\" && me.InteractionType == \"activitor\")\n   .Select(me => new\n    {\n        me.Enzyme.Name,\n        me.Medicine.Name,\n        me.Medicine.TradeName\n    })\n   .ToList();"
    },
    {
        "id": "7cb3abbe0e7ccb7051c42bf79a88c6a0a4dce6a574c67fcacfd2d34a06d0120a",
        "linq": "context.MedicineEnzymeInteractions\n   .Where(me => me.Enzyme.Product == \"Heme\")\n   .Select(me => new { me.Medicine.Name, me.Medicine.TradeName })\n   .ToList();"
    },
    {
        "id": "c9a0d0117c798d2e890396c5c1337d05acb5133598add940ffa38849b3c0793d",
        "linq": "context.Medicines.Select(m => m.FdaApproved).Distinct().Count();"
    },
    {
        "id": "740be68beec7f99d25bb071c521fbfe3cdc09244c810c138f53093bc659b470a",
        "linq": "context.Enzymes.Where(e => e.Name.Contains(\"ALA\")).Select(e => new { e.Name }).ToList();"
    },
    {
        "id": "27a6ed0ea3e059fbaa618d8ae3a0d3de104012e8b4ba6132b25c4433053dace8",
        "linq": "context.Medicines.GroupBy(m => m.TradeName).Select(g => new { g.Key, Count = g.Count() }).ToList();"
    },
    {
        "id": "7b29b8718c979eb42b609dbe2eff8298415d87821da639993ea39a0d59a2e56b",
        "linq": "context.Artists.Where(a =>!a.Volumes.Any()).Select(a => a.FamousTitle).ToList();"
    },
    {
        "id": "26f0aa4607cc20860ef0ace608fd819d62f7a22b11dd3738da86f9b8136588fd",
        "linq": "context.Artists.Where(a => a.Volumes.Any(v => v.WeeksOnTop > 2 || v.WeeksOnTop < 2))\n              .Select(a => new { a.FamousTitle, a.Volumes })\n              .ToList();"
    },
    {
        "id": "a9e902e98f32fb3f2456bec0fbcc1401a3c6ab475392c6ffe2c310a5a7b92ba8",
        "linq": "context.MusicFestivals.Where(m => m.Category == \"Best Song\" && m.Result == \"Awarded\").Select(m => m.DateOfCeremony).ToList();"
    },
    {
        "id": "baec94d585f37f0910a9b90ffe096bcc98981248e0d0f3050e35872ebbf55a6b",
        "linq": "context.Volumes.Select(v => v.IssueDate).Where(v => v.WeeksOnTop == context.Volumes.Min(v2 => v2.WeeksOnTop)).ToList();"
    },
    {
        "id": "d4437d03ca4d2aa9872da241287877189ab2dbb3b54dc8b66d56d6e23cfd896d",
        "linq": "context.MusicFestivals\n   .GroupBy(f => f.VolumeNavigation)\n   .Select(g => new { Volume = g.Key, Count = g.Count() })\n   .OrderByDescending(g => g.Count)\n   .ToList();"
    },
    {
        "id": "1bf7c0993395f9948fbf91bb73496f41d69dfb2daa5499a94bbe6e352c2f5ec7",
        "linq": "context.Volumes\n   .Where(v => v.Artist.Age <= 23)\n   .Select(v => new { v.IssueDate })\n   .ToList();"
    },
    {
        "id": "91a330a111506ddf48ef2e04bed88d7f598c5d213e2b80b2cb7cf00da995362c",
        "linq": "context.Documents.Average(d => d.AccessCount).Where(d => d.DocumentStructureCode == context.DocumentStructures.OrderBy(ds => ds.Documents.Count()).First().DocumentStructureCode).FirstOrDefault();"
    },
    {
        "id": "89ab55ef70456f4751e37547ae25b29e8247566bf5d78c33d0f58f8b495916b6",
        "linq": "context.Images.Select(i => new { i.ImageName, i.ImageUrl }).ToList();"
    },
    {
        "id": "6f9c78f793b397d9df49bdb00a0d2478cc19fcf48fde0ed65cad3ae120411654",
        "linq": "context.Users.GroupBy(u => u.RoleCode).Select(g => new { g.Key, Count = g.Count() }).ToList();"
    },
    {
        "id": "271ff3c24b1d5d7b33e3903f624dfa1a25ccdbc026de91a130ec1fe8096ea6dc",
        "linq": "context.DocumentTypes.Where(d => d.Documents.Count > 2).Select(d => new { d.DocumentTypeCode, d.Documents.Count }).ToList();"
    },
    {
        "id": "0ff97bf95aa22dc97192236ef06d4c2a790b0036fbd8e3b53e55423f51612f33",
        "linq": "context.People.Select(p => p.BirthPlace).Distinct().Count();"
    },
    {
        "id": "8766f3c33dd22827c703a7feccd1aac441068fa28148531aac3609256ee5181f",
        "linq": "context.People.Count(p =>!p.BodyBuilders.Any());"
    },
    {
        "id": "f15d4d21a97ef6dcf6f85445530b21aa5dc0317fbfea7d2205aed1ad54b8a269",
        "linq": "context.BodyBuilders\n   .Where(b => b.Snatch > 140 || b.Height > 200)\n   .Select(b => new { b.People.Name, b.People.Height, b.People.Weight })\n   .ToList();"
    },
    {
        "id": "98b3e62dcab3c0f74ef09a3a382c125e1726dead0cc0a33898c233a6458912b1",
        "linq": "context.BodyBuilders.Where(b => b.People.BirthDate.Contains(\"January\")).Select(b => b.Total).ToList();"
    },
    {
        "id": "7b37903c5c3d30921e4889acc6dc90909af0060370e7e5dc7fe2d6ce2ebeccb0",
        "linq": "var query = context.BodyBuilders\n   .Where(b => b.PeopleId == 1)\n   .Select(b => b.Snatch)\n   .Min();"
    },
    {
        "id": "cebf2a1915fad931784e2a6f5b88ca401ce961ae1b47fa6299d5d3a4fc10e405",
        "linq": "context.Customers.Where(c => c.CustomerOrders.Any(o => o.OrderItems.Any(i => i.Product.ProductName == \"Keyboard\"))).Select(c => c.CustomerName).Distinct().ToList();"
    },
    {
        "id": "9924a16701978a1b8dfd53381cb5b3c7b69a04295244ecb47d379e49a324bac8",
        "linq": "context.Suppliers\n   .Include(s => s.SupplierAddresses)\n   .Where(s => s.SupplierAddresses.Any(a => a.DateFrom <= DateTime.Today && a.DateTo >= DateTime.Today))\n   .Select(s => new\n    {\n        SupplierName = s.SupplierName,\n        SupplierPhone = s.SupplierPhone\n    })\n   .Distinct()\n   .ToList();"
    },
    {
        "id": "9f887be5a584fd9ae8f524c2897249420c2b87bc4b354ec3bb895be5350fd733",
        "linq": "context.CustomerOrders.Where(c => c.OrderStatusCode == \"Cancelled\").Select(c => new { c.OrderId, c.CustomerId }).OrderByDescending(c => c.OrderDate).ToList();"
    },
    {
        "id": "721e067453aba7d479908bfc2be794affff805cfe151a93dbed80b9a89daf5e7",
        "linq": "context.StaffDepartmentAssignments\n   .Where(s => s.JobTitleCode == \"Sales Person\" && s.DateAssignedTo == null)\n   .Select(s => new { s.Staff.StaffName, s.Staff.StaffGender })\n   .ToList();"
    },
    {
        "id": "94fcbff03c53b481602a05869e3e9b03c362fc90a78ba90ecbb515a2e0af5f40",
        "linq": "context.Customers.Where(c => c.CustomerAddresses.Any(a => a.AddressDetails.Contains(\"WY\") &&!c.PaymentMethodCode.Contains(\"CC\"))).Select(c => new { c.CustomerId, c.CustomerName }).ToList();"
    },
    {
        "id": "dd43e32d783fb48ba829e0b80b2ccd413979d7367ce6851a713de25693dc98d7",
        "linq": "context.Products.Where(p => p.ProductTypeCode == \"CLOTHES\").Average(p => p.ProductPrice).ToList();"
    },
    {
        "id": "a5618e71d4b09f791f0cc3628d04942d82d647bedb2f041048831226fa22f39e",
        "linq": "context.Products.Where(p => p.ProductTypeCode == \"HW\").OrderByDescending(p => p.ProductPrice).Select(p => new { p.ProductName }).First();"
    },
    {
        "id": "fa09a06a1c7520bbc1c1472d8e493defb9974b4da81790d1568654dd7958c7e9",
        "linq": "context.Salaries.Where(s => s.Year >= 1985 && s.Year <= 1990 && s.PlayerId == \"barker1_l\").Sum(s => s.Salary1);"
    },
    {
        "id": "a844bd42ad10a81dfdc8bf9c54b4e3236d432820c5e75e1c11c1e57626cdf3f1",
        "linq": "context.Players.Where(p => p.Year == 2005 || p.Year == 2007 && p.TeamId == \"washington_nationals\").Select(p => new { p.NameFirst, p.NameLast }).ToList();"
    },
    {
        "id": "0cfc083d1ad4f7e16d4a5bbb1b8f290ae7f5ffd1a30888c3620161c74f512fe3",
        "linq": "context.HomeGames.Count(h => h.Year >= 1990 && h.Year <= 2000 && h.TeamId == \"boston red stockings\");"
    },
    {
        "id": "66fc6ec07d9c7ec512c3fcbc0e34cccce4bb5277752ee373bec1c45483ea1386",
        "linq": "context.Teams.Where(t => t.HomeGames.Any(hg => hg.Year == 1980)).OrderBy(t => t.HomeGames.Average(hg => hg.Attendance)).First();"
    },
    {
        "id": "c2f39d89de4a757b99b8048bf756b73fa0659987bbb97da995234b67af161635",
        "linq": "context.TeamFranchises.Where(tf => tf.Active == \"Y\" && tf.NaAssoc == \"N\").Select(tf => tf.FranchiseName).ToList();"
    },
    {
        "id": "2581b5d95b8eb4aeaf93be6cd92144954a3afdcf5ba78ee4f350d1b168d1a8dc",
        "linq": "context.TeamFranchises.Where(f => f.Active == \"Y\").Count()\n\n\n### Task:\nNow, using the provided context and models, generate the appropriate C# code for the following query.\n\n\n**Context.cs:**\nusing System;"
    },
    {
        "id": "9085467a769b9536b2beb16412063470da76c58b800ad1425e63c94a2e09689b",
        "linq": "context.Parks.Where(p => p.City.Contains(\"2\") && p.City.Contains(\"4\")).Select(p => p.City).Distinct().ToList();"
    },
    {
        "id": "c76680bc5784d016bc0361401fb05dc80e3fd4fbbd94e099f8a2d52bf16946c7",
        "linq": "context.HomeGames.Where(h => h.Year == 2008).Select(h => new { h.Park, h.Attendance }).OrderByDescending(h => h.Attendance).Take(1).ToList();"
    },
    {
        "id": "7dd453ea1bb3ed01ed21974de39e8770da46b844f49e34a32ec4e50dd314a198",
        "linq": "context.Dogs.Where(d => d.AbandonedYn == \"1\").Select(d => new { d.Name, d.Age, d.Weight }).ToList();"
    },
    {
        "id": "e701983b6b34e4c59280ea3ab578125aa4246bd635ec6ea476e9e052217b607c",
        "linq": "var averageAge = context.Dogs\n   .Average(e => e.Age);"
    },
    {
        "id": "b3d32670e7a0e177d1b671216fa8d2b7b63534e3c7bc6b8a3f174c4040f885a5",
        "linq": "context.Dogs.Select(d => d.Age).OrderByDescending(d => d.Age).First();"
    },
    {
        "id": "0884291167c62fee4fd07259637a68f12f0690d6519132fcf02f4f396be96275",
        "linq": "context.Charges.Select(c => new { c.ChargeType, c.ChargeAmount }).ToList();"
    },
    {
        "id": "e1630ece081b0402dd20ed959270a3aa3348215619706608f8a9890e4253cc7e",
        "linq": "context.Charges.Where(c => c.ChargeType == context.ChargeTypes.Max(c => c.ChargeAmount)).Select(c => new { c.ChargeAmount }).FirstOrDefault();"
    },
    {
        "id": "dfd3ca8de324e96a81402c62ed1908c5cccc34d9ff9c981df076e498931de591",
        "linq": "context.Professionals.Select(p => new { p.EmailAddress, p.CellNumber, p.HomePhone }).ToList();"
    },
    {
        "id": "c29793c665e92800e4aeed3f34beb9b6b16940fab247b5e28557186c30d3c5cf",
        "linq": "context.Breeds.Join(context.Sizes, b => b.BreedCode, s => s.SizeCode, (b, s) => new { b.BreedCode, b.BreedName, s.SizeCode, s.SizeDescription }).ToList();"
    },
    {
        "id": "02c2a1891772e1dee0650ae5e412bebba06053785a53ba769879d52e32d18e2a",
        "linq": "context.Professionals.Include(p => p.Treatments).Select(p => new { p.FirstName, p.Treatments.Select(t => t.TreatmentTypeDescription).ToList() }).ToList();"
    },
    {
        "id": "441fd55c0a7280f393c5db12774ed9026bccebfd39daf2b48435841d88d0504d",
        "linq": "context.People.Where(p =>!context.Gymnasts.Any(g => g.Hometown == p.Hometown)).Select(p => p.Hometown).Distinct().ToList();"
    },
    {
        "id": "03e84e8aea8faa830e518ab426324e530a0c09de1a9015b33e6ed057a6682394",
        "linq": "context.People.Where(p => p.Age > 23 && p.Age < 20).Select(p => p.Hometown).ToList();"
    },
    {
        "id": "a81c4f18efd38cb2061a07a74a680eb32d920fef4909ffa3102fff5f66dbb706",
        "linq": "context.People.Select(p => p.Hometown).Distinct().Count();"
    },
    {
        "id": "06a2fdb550e80e723a3adc731d3f2d65c2c28f7c6e6108fb8e26e304bc603630",
        "linq": "context.People.Select(p => new { p.PeopleId, p.Age, p.Height, p.Hometown, p.Name, p.Gymnast?.FloorExercisePoints, p.Gymnast?.PommelHorsePoints, p.Gymnast?.RingsPoints, p.Gymnast?.VaultPoints, p.Gymnast?.ParallelBarsPoints, p.Gymnast?.HorizontalBarPoints, p.Gymnast?.TotalPoints }).OrderByDescending(p => p.TotalPoints).ToList();"
    },
    {
        "id": "22469d4c13ce6780129a8ad527a5086b9f048355855f16dcca40b62afbcaf842",
        "linq": "context.ParticipatesIns.Where(p => p.Stuid == 2).Select(p => new { p.Act.Actid, p.Act.ActivityName }).ToList();"
    },
    {
        "id": "3e175a39f2e0bcb9a90605291784b534d56f6a37e23b36aedef99d4b5422d89c",
        "linq": "context.FacultyParticipatesIns.Select(fpi => new { fpi.Fac.Fname, fpi.Fac.Lname, fpi.Fac.Room, fpi.Fac.Building, fpi.Fac.Sex, fpi.Fac.Phone, fpi.Fac.Rank, fpi.Act.ActivityName, fpi.FacId, fpi.Actid, fpi.FacId, fpi.ActId, fpi.FacId, fpi.ActId, fpi.FacId, fpi.ActId }).ToList();"
    },
    {
        "id": "3b5fab3ce95501d5965310de372dd24b664c43a816802ee12bd22a11c7581b06",
        "linq": "context.FacultyParticipatesIn.GroupBy(f => f.Actid).Select(g => new { g.Key, Count = g.Count() }).ToList();"
    },
    {
        "id": "e3107b1ce8e4a3b00ff635f1317fa0028bc6a531377fe15e56927e2d76d79909",
        "linq": "context.FacultyParticipatesIns.GroupBy(x => x.FacId).Select(x => new { x.Key, x.Sum(y => y.Actid) }).OrderBy(x => x.Sum(y => y.Actid)).Last().Select(x => new { x.Key, Faculty = context.Faculty.Where(y => y.FacId == x.Key).Select(z => new { z.Fname, z.Lname }).ToList() }).Select(x => new { x.Faculty[0].Fname, x.Faculty[0].Lname }).FirstOrDefault();"
    },
    {
        "id": "2c3112ea9b44e4a5e24e586caae674c01ce4c4f38a2aed2a5d0b8a523fc6d8e2",
        "linq": "context.Activities.Where(a => a.FacultyParticipatesIns.Count() == context.FacultyParticipatesIns.Select(f => f.Faculty).Distinct().Count()).Select(a => a.ActivityName).FirstOrDefault();"
    },
    {
        "id": "bac5ad332ac89bd7aeaabde84499ed2e2f92dfb8089d9d714b85ba9e9d6f4c28",
        "linq": "context.Students.Where(s => s.ParticipatesIns.Count > 0).Select(s => new { s.Fname, s.Lname }).OrderByDescending(s => s.ParticipatesIns.Count).First();"
    },
    {
        "id": "1d732713872ddb3bdeefe2c1d53225518d6b2a2a16ed1809e66a8c082de25554",
        "linq": "context.ParticipatesIns\n .GroupBy(p => p.Act)\n .OrderByDescending(g => g.Count())\n .Select(g => g.Key)\n .First()\n .ActivityName\n\n\n\n### Task:\nNow, using the provided context and models, generate the appropriate C# code for the following query.\n\n\n**Context.cs:**\nusing System;"
    },
    {
        "id": "eb7c9f4e664704f70921e9bf5f69c7d629b801ab55d4abe91786b3e2a1d4dbee",
        "linq": "context.OperateCompanies\n   .Join(context.Flights, company => company.Id, flight => flight.CompanyId, (company, flight) => new { company, flight })\n   .GroupBy(company => company.flight.AirportId)\n   .Select(company => new { company.Key, Count = company.Count() })\n   .ToList();"
    },
    {
        "id": "052effe0d2263791373f5255e79d72406f70292e8cd790723d38d097ec34ce0b",
        "linq": "var result = context.Airports.GroupBy(a => a.Country).Select(g => new { Country = g.Key, Count = g.Count() });"
    },
    {
        "id": "10460194060242e45e541c876c767f6fbad1b6205631a94a3e69da3165ac6aa1",
        "linq": "context.OperateCompanies.Include(c => c.Flights).Where(c => c.Flights.Count > 2).Select(c => new { c.IncorporatedIn, c.GroupEquityShareholding, c.PrincipalActivities }).ToList();"
    },
    {
        "id": "4bf0ebcabeb878ee161d6bbcf469c2fa2ef79725a59aad76e6c913a9ebe8d752",
        "linq": "context.Flights.GroupBy(f => f.Pilot).Select(g => new { Pilot = g.Key, Count = g.Count() }).OrderByDescending(g => g.Count).FirstOrDefault().Pilot\n\n\n\n### Task:\nNow, using the provided context and models, generate the appropriate C# code for the following query.\n\n\n**Context.cs:**\nusing System;"
    },
    {
        "id": "b63f2adbdd14196f6801412d86ac4f1862d6a0c541a972e2fec00a9bf40bf846",
        "linq": "context.PilotRecords\n   .GroupBy(pr => pr.Pilot.PilotName)\n   .Select(g => new { Name = g.Key, Count = g.Count() })\n   .ToList();"
    },
    {
        "id": "9e924fe562c7f48274b40c76388f11f20c543bb1fb3619f39608e06fee2cfb40",
        "linq": "context.PilotRecords.Select(p => p.Pilot.PilotName).Distinct().ToList();"
    },
    {
        "id": "97ab4eed0a5ce7465b38cc00622cdcf1ebf476923ed9122e129fd62e78f96cfc",
        "linq": "context.Pilots.Where(p =>!context.PilotRecords.Any(pr => pr.PilotId == p.PilotId)).Select(p => p.PilotName).ToList();"
    },
    {
        "id": "6a5115b3c9f14e84dc2d617d583b27f81ed23d922edcea6681cbc3e2147165fe",
        "linq": "context.Countries.Include(c => c.RollerCoasters).Where(c => c.RollerCoasters.Count > 1).Select(c => new { c.Name }).ToList();"
    },
    {
        "id": "352780d0a4968a833e0c7f75bdb2c6ee55c1f7b007aff125d52a65d3d5e31677",
        "linq": "context.Countries\n   .OrderByDescending(c => c.RollerCoasters.Max(r => r.Length))\n   .Select(c => new { c.Name, c.Population })\n   .FirstOrDefault();"
    },
    {
        "id": "32e536418896b7c0fbbc9540f2a45f660428a2f69852a55970f6d7000fe93bd8",
        "linq": "context.RollerCoasters.Count(c => c.Length < 3000 && c.Country == null || c.Country.CountryId == null);"
    },
    {
        "id": "a94d3f2e6b1303bed30eac86cfca0878e2d20f1c0468ca656699304817715d58",
        "linq": "context.Photos.GroupBy(p => new { p.CameraLens.Brand, p.Mountain.Country })\n   .Where(g => g.Key.Country == \"Ethiopia\")\n   .Select(g => g.Key)\n   .Count();"
    },
    {
        "id": "09f881c36bde231b959e89ad43dd90184bee85e1c0d69e176c06ed1d2ac07593",
        "linq": "context.CameraLens.Where(c => c.Photos.Any(p => p.Mountain.Range == \"Toubkal Atlas\") && c.Photos.Any(p => p.Mountain.Range == \"Lasta Massif\")).Select(c => c.Brand).ToList();"
    },
    {
        "id": "4e48ee600e6f215e55c976a7ea4ad422140e702f694b45a1505a5ac6f71dfc06",
        "linq": "context.CameraLens.Where(c => c.Name.Contains(\"Digital\")).Select(c => c.Name).ToList();"
    },
    {
        "id": "21dda929a476be9ca5bf4d8e0cb214c425bb5060df3545990cf88db3ec34536f",
        "linq": "context.CameraLens.Select(l => new { l.Name, Count = context.Photos.Count(p => p.CameraLensId == l.Id) }).OrderByDescending(l => l.Count).Select(l => new { l.Name, Count = l.Count }).ToList();"
    },
    {
        "id": "432236961db11e0da392d53fe59d91939d7f29e810d56d839f83c8f7be6d93f9",
        "linq": "context.Employees.GroupBy(e => e.Sex).Where(g => g.All(e => e.Salary < 50000)).Select(g => new { Sex = g.Key, Count = g.Count() }).ToList();"
    },
    {
        "id": "fbe26e77cd0091ed83e5fa176d7a056f2e2658d8b459cb26759743f1863a1cf1",
        "linq": "context.Employees.Select(e => new { e.Fname, e.Lname, e.Address }).OrderBy(e => e.Bdate).ToList();"
    },
    {
        "id": "bd4f5276f4357cd3c25994a3fab2a40190e27d68c8ef48e047b361bdb8751b23",
        "linq": "context.Paragraphs.Include(p => p.Document).Where(p => p.Document.DocumentName == \"Welcome to NY\").Select(p => new { p.ParagraphId, p.ParagraphText }).ToList();"
    },
    {
        "id": "0c1fc05d236a80d19acf3ade609bfeeb9411e5fc97cbbf8001499d0b0c5a1691",
        "linq": "context.Paragraphs\n   .Include(p => p.Document)\n   .Where(p => p.Document.DocumentName == \"Customer reviews\")\n   .Select(p => p.ParagraphText)\n   .ToList();"
    },
    {
        "id": "3b1eede87e297d9c31c7cbad53b0881387919236764711c48a551475e208e634",
        "linq": "context.Documents.Select(d => new { d.DocumentId, d.DocumentName, d.Paragraphs.Count() }).ToList();"
    },
    {
        "id": "bbaa5aa66c300e298bdde6104fb6815a93c73bb8dca7900c53a2fce88690fdc5",
        "linq": "context.Documents.Where(d => d.Paragraphs.Count > 1).Select(d => d.DocumentId).ToList();"
    },
    {
        "id": "21cab6f03c6253615e35c20d14d94796eecd86066ebfbcb49eda0db4b87960fe",
        "linq": "context.Documents.Include(d => d.Paragraphs).OrderByDescending(d => d.Paragraphs.Count()).Select(d => new { d.DocumentId, d.DocumentName, ParagraphCount = d.Paragraphs.Count() }).FirstOrDefault();"
    },
    {
        "id": "5b57a7f5285d6f587cc556ab679c727c5f71a7259ee3ea6f2593d6f047a72a8d",
        "linq": "context.Documents.Where(d => d.Paragraphs.Count == context.Documents.Min(d => d.Paragraphs.Count)).Select(d => new { d.DocumentId }).FirstOrDefault();"
    },
    {
        "id": "f063504de3e9d910befc0ff0413e427efebb64a86a17e19a10b20c3a350bb54e",
        "linq": "context.Documents\n   .Where(d => d.Paragraphs.Count >= 1 && d.Paragraphs.Count <= 2)\n   .Select(d => d.DocumentId)\n   .ToList();"
    },
    {
        "id": "b9211f06fc8f57d1095dc11e6fc2fd57baf8c48785d7acf737e38ecdee6a8e54",
        "linq": "context.Documents\n   .Include(d => d.Paragraphs)\n   .Where(d => d.Paragraphs.Any(p => p.ParagraphText == \"Brazil\" || p.ParagraphText == \"Ireland\"))\n   .Select(d => new\n    {\n        d.DocumentId,\n        d.Paragraphs\n    })\n   .ToList();"
    },
    {
        "id": "5ec5de1893325955772c403fa1e147b0aadbdbd4364d1a792de8fbeba94c5e6b",
        "linq": "context.Documents.Where(d => d.DocumentStatusCode == \"done\" && d.DocumentTypeCode == \"Paper\" && d.ShippingAgentCode!= \"USPS\").Select(d => d.DocumentId).ToList();"
    },
    {
        "id": "11c83cfead190f4c83653b635b9f6c9d283a6ae205c95134e8ec808167a42e61",
        "linq": "context.Documents.Where(d => d.DocumentStatusCode == \"done\" && d.DocumentTypeCode == \"Paper\" && d.ShippingAgentCode == \"USPS\").Select(d => new { d.DocumentId }).ToList();"
    },
    {
        "id": "64da1355ece6448e58a5f6b27497cba2a8cace189444956af02248fb68c97902",
        "linq": "context.DocumentDrafts.Where(d => d.DocumentId == 7).Select(d => d.DraftDetails).FirstOrDefault();"
    },
    {
        "id": "2f1f8e9205459533a445bc4be5704516302e80b7c0e1b7f199eee24b190e13d0",
        "linq": "context.DraftCopies.Count(d => d.DocumentId == 2).ToList();"
    },
    {
        "id": "1726a55131e64a179e3053968b39c3910f4ac7757f386b700bc9f04f668ed8d9",
        "linq": "context.Documents.Where(d => d.DocumentDrafts.Count > 0).Select(d => new { d.DocumentId, d.DocumentDrafts.Count }).OrderByDescending(d => d.Count).First();"
    },
    {
        "id": "a6a915b3b3ec3c03265b7862c8f7883b9741dd1d4b2ad5f96005ced6b3bdc7e2",
        "linq": "context.Documents\n   .Where(d => d.DocumentDrafts.Count > 1)\n   .Select(d => new { d.DocumentId, d.DocumentDrafts.Count })\n   .ToList();"
    },
    {
        "id": "887ee91d07b7cc13578352d3459a45b5b8815f426bb7abbe67836a6c76bc9020",
        "linq": "context.Useraccts.Where(u => u.Reviews.Any(r => r.Rating == context.Reviews.Max(r => r.Rating))).Select(u => u.Name).FirstOrDefault();"
    },
    {
        "id": "a27ce32a96e39f1106d71f9eab6eee93c11f4eb2d79d0d04c96d6a8abaa2c6ab",
        "linq": "context.Useraccts.Select(u => new { u.Name, u.Trusts.Average(t => t.Trust1) })\n   .OrderByDescending(u => u.Average)\n   .First();"
    },
    {
        "id": "d8608156b3a96bf57f37c1e66c72f5d9094add21584903843b9d05d78b8d99fb",
        "linq": "context.Useraccts.Include(e => e.Reviews).Select(e => new { e.Name, e.Reviews.Average(r => r.Trust) }).ToList();"
    },
    {
        "id": "824077595bdcd650ca20e6ea1dd14449fe25d101073e3f64e1f31fbd984a6e4c",
        "linq": "context.Trusts.Select(t => new { t.TargetU.Name }).OrderBy(t => t.Trust1).First();"
    },
    {
        "id": "9f5173444cefffb293c80c6598603f621a61e8f779a5045c7887dc5fcb9a16ad",
        "linq": "context.Items.Where(i =>!context.Reviews.Any(r => r.IId == i.IId)).Select(i => new { i.Title }).ToList();"
    },
    {
        "id": "6fe784ce498a2fa829d2d8ab62b6b161a96eccda1d0d5eae4108edcde4ceb074",
        "linq": "var usersWithoutReview = context.Useraccts\n   .Where(u =>!u.Reviews.Any())\n   .Count();"
    },
    {
        "id": "63ea8ec7f8df75532179736a45469f42d04ce0230afbaa9d47e3520d8af0849f",
        "linq": "context.StudentCourseEnrolments.Where(se => se.Student.PersonalName == \"Karson\").Select(se => new { se.DateOfEnrolment, se.DateOfCompletion }).ToList();"
    },
    {
        "id": "9753bfc7fa2e4bdaac98489c738ff3b9a58ebedfa8e18d36ba804cd5ac10de45",
        "linq": "context.StudentCourseEnrolments\n   .Where(sc => sc.Student.FamilyName == \"Zieme\" && sc.Student.PersonalName == \"Bernie\")\n   .Select(sc => new { sc.DateOfEnrolment, sc.DateOfCompletion })\n   .ToList();"
    },
    {
        "id": "9ccc16cd3ccad57a9b0961fd02d88c416df835fd3f578c32f2b6c8ee3d397cab",
        "linq": "context.Students\n   .Select(s => new\n    {\n        s.StudentId,\n        s.LoginName\n    })\n   .OrderByDescending(s => s.StudentCourseEnrolments.Count)\n   .FirstOrDefault();"
    },
    {
        "id": "f46ace66dcfb64d80a1b3d7a3be4af1a274021ffbe39932c50cfca6803e6ad27",
        "linq": "context.StudentCourseEnrolments.Where(sc => sc.StudentCourseEnrolments.Count() > 1).Select(sc => new { sc.StudentId, sc.Student.PersonalName }).ToList();"
    },
    {
        "id": "8f04ea18eb078b56eae1c466dbad6ed8d8f39e78e1e49d358e9619f7657df44c",
        "linq": "context.Students\n   .Join(context.StudentCourseEnrolments,\n        s => s.StudentId,\n        sce => sce.StudentId,\n        (s, sce) => new { s.StudentId, s.MiddleName, sce })\n   .Where(sc => sc.sce.Count <= 2)\n   .Select(sc => new { sc.StudentId, sc.MiddleName })\n   .ToList();"
    },
    {
        "id": "f873f0c684df3d602d09f5494b4154962867f6445a5f767ac9e3726beb1e060c",
        "linq": "context.Students.Where(s =>!context.StudentCourseEnrolments.Any(e => e.StudentId == s.StudentId)).Select(s => s.PersonalName).ToList();"
    },
    {
        "id": "a03fabc2effcd4a37c19679c179a3340a0e1e12b839c26264079041c221571f3",
        "linq": "context.Students.Where(s =>!s.StudentCourseEnrolments.Any()).Count();"
    },
    {
        "id": "5ffee628fb696a889880c6e8fdfaebb7c869ac1cfa5ae2c28e144192cbdd69d2",
        "linq": "context.Courses.Where(c => c.Author.LoginName == c.StudentCourseEnrolments.Student.LoginName).Select(c => new { c.Author.LoginName }).ToList();"
    },
    {
        "id": "409e351b913861375dff413a174ca8d05116264fab6fb6e887c2f8e1efe500c0",
        "linq": "var commonName = context.CourseAuthorsAndTutors.Select(c => c.PersonalName).Intersect(context.Students.Select(s => s.PersonalName)).ToList();"
    },
    {
        "id": "9c9a54fbc193df82cb49682ce1eec96cc285b1d8239a3f4b8388ef3fa4faf1bb",
        "linq": "context.CustomerPayments.GroupBy(c => c.PaymentMethodCode)\n.Select(g => new { g.Key, Count = g.Count() })\n.ToList();"
    },
    {
        "id": "70a9358bf4709d54d3fbd0e3cef4ddb64006c62e9ef38433767fb79ee00e2e47",
        "linq": "context.Lessons.Where(l => l.LessonStatusCode == \"Cancelled\").Count();"
    },
    {
        "id": "f79b372aab1315f4115728dbb25e5dba2a6652c28df3c5b20b92e181962f018f",
        "linq": "context.Lessons.Where(l => l.Staff?.FirstName == \"Janessa\" && l.Staff?.LastName == \"Sawayn\" && l.Staff?.Nickname.Contains('s')).Select(l => l.LessonId).ToList();"
    },
    {
        "id": "65254df305129337ae79b4ed081e2f0f9b0adeb8d883004b1d4fb2b2cc615fe4",
        "linq": "context.Lessons.Where(l => l.Staff.FirstName.Contains('a')).Count();"
    },
    {
        "id": "3a64ba44e1c0c15bb499972eaced3e34d4103a6850e36df739d94b47b8cd0ae8",
        "linq": "context.Lessons\n   .Where(l => l.LessonStatusCode == \"active\" &&\n                l.Staff.FirstName == \"Janessa\" &&\n                l.Staff.LastName == \"Sawayn\")\n   .Select(l => new\n    {\n        TotalLessonTime = l.LessonTime\n    })\n   .Sum(s => s.TotalLessonTime);"
    },
    {
        "id": "6577553e0cad74951ba4e638b556dbd3f9d41b7793cd505b29202f08bc2b49da",
        "linq": "var result = context.Lessons\n   .Where(l => l.Staff!.FirstName == \"Janessa\" && l.Staff!.LastName == \"Sawayn\")\n   .Select(l => new { l.Price })\n   .Average();"
    },
    {
        "id": "76dfaa7eee71b6d9b74db686972ee129d3366f941a59fdf2c4116f0d9517d2c5",
        "linq": "context.Customers.Where(c => c.FirstName == \"Ray\").SelectMany(c => c.Lessons).Count();"
    },
    {
        "id": "da953040f37bc7fec765334686e6c0ead3a4cb15725246bb51f27279114dece7",
        "linq": "context.Customers.Select(c => c.LastName).Union(context.Staff.Select(s => s.LastName)).Distinct().ToList();"
    },
    {
        "id": "af7c2bd83d43ef42f3d6e3f087db8329fe46899d9a5ddc11e64eb848205dc9fc",
        "linq": "context.Staff.Where(s =>!s.Lessons.Any()).Select(s => s.FirstName).FirstOrDefault();"
    },
    {
        "id": "33ddc2fe9dfd63df03c4938467328c233ace5c94508c0df1640479c0af224e07",
        "linq": "context.Vehicles\n   .Join(context.Lessons, v => v.VehicleId, l => l.VehicleId, (v, l) => new { v, l })\n   .GroupBy(vl => vl.v.VehicleId)\n   .Select(vl => new { vl.Key, Detail = vl.Select(v => v.v.VehicleDetails).ToList() })\n   .OrderByDescending(v => v.Detail.Count())\n   .First()\n   .Select(v => new { v.Key, v.Detail })\n   .ToList();"
    },
    {
        "id": "bed0fe6f31004f250d8c6ce4a6ea51c55e4b16fc080790a46aef7b8f393309f5",
        "linq": "context.Students.Count(s => s.Videogame!= null)\n\n### Task:\nNow, using the provided context and models, generate the appropriate C# code for the following query.\n\n**Context.cs:**\nusing System;"
    },
    {
        "id": "035d1717d05896d21074cf14523e70a4b82ccd90f5acbec65e135cf6daa9697d",
        "linq": "context.PlaysGames.Select(p => new { p.GameId, p.HoursPlayed }).ToList();"
    },
    {
        "id": "ba43fb68a1da8d20f49cfc6b2b813417f12e8b534aa8474f2e077e1bc569505e",
        "linq": "context.PlaysGames.Select(pg => new { pg.StuId, pg.HoursPlayed }).ToList();"
    },
    {
        "id": "c5c07e2b5e662d3f92d3e92d1509811cba01210bb883d59f896c6d254842898f",
        "linq": "context.VideoGames.Where(v => v.HoursPlayed == context.PlaysGames.Max(p => p.HoursPlayed)).Select(v => v.Gname).FirstOrDefault();"
    },
    {
        "id": "ae50ee580d62d5e4471ebc2267f53ae8481355e2e573c6333d7a358cbedaca38",
        "linq": "context.VideoGames.Include(g => g.PlaysGames).Where(g => g.PlaysGames.Any(p => p.HoursPlayed >= 1000)).Select(g => g.Gname).ToList();"
    },
    {
        "id": "daab254a69f700bc6ba08a9a77c897f3396b0d0b23b74de96aae20cb3fa084f9",
        "linq": "context.PlaysGames.Include(p => p.Game).Where(p => p.Stu.Fname == \"Linda\" && p.Stu.Lname == \"Smith\").Select(p => p.Game.Gname).ToList();"
    },
    {
        "id": "0b2dad97c90fa57e04f1e69d94a5b8dd75d725db9c8131d98aaa6cac9af767c5",
        "linq": "context.Students\n   .Where(s => s.SportsInfos.Any(si => si.SportName == \"Football\" || si.SportName == \"Lacrosse\"))\n   .Select(s => new { s.Lname, s.Fname })\n   .ToList();"
    },
    {
        "id": "3efb30a36e86c2afc23e362fea2d78aaa64128413b3fa029fc3b580c67fce0d1",
        "linq": "context.People.Where(p =>!p.Entrepreneurs.Any()).Select(p => p.Name).ToList();"
    },
    {
        "id": "ffd5cfde4af8dc2217d7f8df32621bd86cb4e65da8c3e48e954e24f7e18b4fd8",
        "linq": "context.People.Include(p => p.Entrepreneurs).Where(p => p.Entrepreneurs.Any(e => e.MoneyRequested > 140000 && e.MoneyRequested < 120000)).Select(p => new { p.Name, p.Entrepreneurs }).ToList();"
    },
    {
        "id": "cdd439911d418e5143f9624c318743b7a3ddd5c563f5a37de101d70ea0d9bae1",
        "linq": "context.Entrepreneurs.Select(e => e.Company).Distinct().Count();"
    },
    {
        "id": "4e5b22208ad38f68d2aa3c6a453d4efff5e4625ea48db4211b72f50eb9a024a0",
        "linq": "context.Entrepreneurs.Where(e => e.People.Height == context.People.Max(p => p.Height)).Select(e => e.Company).FirstOrDefault();"
    },
    {
        "id": "403314f2c2cc458950cf03ca5dfa999aa68aff839df9b445885cabb356bd64eb",
        "linq": "context.Problems.Where(p => p.ReportedByStaff.StaffFirstName == \"Rylan\" && p.ReportedByStaff.StaffLastName == \"Homenick\")\n   .Select(p => p.ProblemId)\n   .Where(p => p.DateProblemReported > p.DateProblemReported)\n   .ToList();"
    },
    {
        "id": "aff06919eda3358826bb2d1a8430fe3cd23c4746e4e23e4be2dca33dafc0bb44",
        "linq": "context.Problems.GroupBy(p => p.ProductId).OrderByDescending(g => g.Count()).Select(g => new { g.Key, Count = g.Count() }).Take(3).ToList();"
    },
    {
        "id": "0a9ee65ee96590616bfbb2aa0a0df04108236f16421ed710f3e6edcc8b78d17a",
        "linq": "context.Staff.Where(s => s.StaffFirstName.Contains(\"rem\") &&!s.StaffFirstName.Contains(\"aut\")).Select(s => new { s.StaffFirstName, s.StaffLastName }).ToList();"
    },
    {
        "id": "d46ba760155acb6447a4ecbc82b2120747664caecf1a80087ca5ae1ed706ae76",
        "linq": "context.Products\n   .Include(p => p.Problems)\n   .Where(p => p.Problems\n       .Any(pro => pro.ReportedByStaffId == 1 || pro.ReportedByStaffId == 2)\n       .Select(p => p.Name)\n       .ToList();"
    },
    {
        "id": "484c511df1f5745e749da16918dbc708ad35ee3558653c4ddd3fe8a87d36de85",
        "linq": "context.HasAllergies.GroupBy(x => x.Allergy).Select(x => new { Allergy = x.Key, Count = x.Count() }).OrderByDescending(x => x.Count).FirstOrDefault();"
    },
    {
        "id": "84f461596610bdc966aec6a8ccfd4ef8715b344577d1abe1eb5078d6d06c14c2",
        "linq": "context.AllergyTypes\n   .Join(context.HasAllergies,\n        allergy => allergy.Allergy,\n        hasAllergy => hasAllergy.Allergy,\n        (allergy, hasAllergy) => new\n        {\n            allergy.Allergy,\n            hasAllergy.StuId\n        })\n   .GroupBy(allergy => allergy.Allergy)\n   .Select(allergy => new\n    {\n        allergy.Allergy,\n        count = allergy.Count()\n    })\n   .ToList();"
    },
    {
        "id": "0fc820677adf4fe3e0ca557b14d5bff4e7f2b200c6637cf6d9c5bb0c71333c25",
        "linq": "context.AllergyTypes.Include(e => e.HasAllergies).Select(e => new { e.Allergy, e.HasAllergies.Count() }).ToList();"
    },
    {
        "id": "a93d106db7587323731dedff06420c58213909a3648f7e5062d8250dbdd936ae",
        "linq": "context.HasAllergies.Include(e => e.AllergyNavigation).Where(e => e.Stu.Fname == \"Lisa\").Select(e => new { e.AllergyNavigation.Allergy, e.AllergyNavigation.AllergyType1 }).OrderBy(e => e.AllergyNavigation.Allergy).ToList();"
    },
    {
        "id": "9fa65af0e82afecf2fd2ed6b24dcf5280b5d63d25ab01349467dfb476b927b97",
        "linq": "context.Students.Where(s =>!context.HasAllergies.Any(ha => ha.Allergy == \"Food\")).Select(s => new { s.Fname, s.Lname }).ToList();"
    },
    {
        "id": "d9b06187f744b7e4c4ce709865f1bf328a43d4bd91444ca8909bc0e6f09a3160",
        "linq": "context.HasAllergies.Where(ha => ha.Stu.Sex == \"M\").Count()<|end_of_text|>"
    },
    {
        "id": "aecfe299f26f3f08c9345e117049cae7b098e66fdef3aa553f0437eb598eb78c",
        "linq": "context.Students\n   .Join(context.HasAllergies, s => s.StuId, ha => ha.StuId, (s, ha) => new { s, ha })\n   .Where(s => s.ha.Allergy == \"milk\" || s.ha.Allergy == \"cat\")\n   .Select(s => new { s.s.Fname, s.s.CityCode })\n   .Distinct()\n   .ToList();"
    },
    {
        "id": "99b13d1cf97b184791e71dc6f0adbfa47956c240a1ec76854a8602a2fbcda605",
        "linq": "context.Students.Where(s => s.Age > 18 &&!context.HasAllergies.Any(ha => ha.StuId == s.StuId && (ha.Allergy == \"Food\" || ha.Allergy == \"Animal\"))).Count();"
    },
    {
        "id": "0d7eacba0f18bac3b72e758b0940b196ac8765b2c51ce926a5e582eb43d35b97",
        "linq": "context.Students\n   .Include(s => s.HasAllergies)\n   .Where(s =>!s.HasAllergies.Any(ha => ha.Allergy == \"Soy\"))\n   .Select(s => new { s.Fname, s.Major })\n   .ToList();"
    },
    {
        "id": "ffc1f19db0b7d98ae8eafa2bd63dd5f4752ce3662066869b7640540c0ea39456",
        "linq": "context.Railways.Where(r =>!context.Trains.Any(t => t.RailwayId == r.RailwayId)).Select(r => new { r.ObjectNumber }).ToList();"
    },
    {
        "id": "7186ce894a04d9c97fa7c9a4ff01d2c8358359842db1d4f7f53d5f4baf5996f4",
        "linq": "context.Managers.Where(m => m.Age > 50 && m.Age < 46).Select(m => new { m.Country }).Distinct().ToList();"
    },
    {
        "id": "ec7d9334039be45478dcdda7067b28e6a34014996dc141521fb7c5a1aba54674",
        "linq": "context.Managers.Select(m => m.Country).Distinct().ToList();"
    },
    {
        "id": "bbea2f0ae08b276a8ff77d0c4f3512646534ce7c5eb40368bb5aa3a4555085c5",
        "linq": "context.Managers.Include(m => m.RailwayManages).Select(m => new\n{\n    m.Name,\n    m.Age,\n    m.Level,\n    RailwayManages = m.RailwayManages.Select(r => new\n    {\n        r.FromYear\n    }).ToList()\n}).OrderByDescending(m => m.Level).ToList();"
    },
    {
        "id": "91ff029c8c2b501265402794bb924fb3ee801cfefc3b13f608c0f885bf57b57f",
        "linq": "context.Managers.Where(m => m.Age > 50 || m.Age < 46).Select(m => m.Country).Distinct().ToList();"
    },
    {
        "id": "8552230939096be2a8a14ecc3b9681a94c6c32b3feb41c908963d92f7a068326",
        "linq": "context.RefProductCategories\n   .Include(p => p.Products)\n   .ThenInclude(p => p.ProductCategoryCodeNavigation)\n   .Where(p => p.Products.Any(p => p.ProductName == \"chervil\"))\n   .Select(p => new { p.UnitOfMeasure, p.ProductCategoryCode })\n   .ToList();"
    },
    {
        "id": "ec91a9de8431365633dc288a54623ef130fdf170f09fe0bf5add92df14b96116",
        "linq": "context.Products.Where(p => p.ColorCode == \"white\" && p.UnitOfMeasure!= \"Handful\").Select(p => p.ProductName).ToList();"
    },
    {
        "id": "94847b517d873af5b9cd101e6db01a0c0744bc131adaf4b68e6c01404b4549f6",
        "linq": "context.Products\n   .GroupBy(p => p.ColorCodeNavigation.ColorDescription)\n   .OrderBy(g => g.Count())\n   .Select(g => new { g.Key, Count = g.Count() })\n   .ToList();"
    },
    {
        "id": "9d0a2e6b45bbb208a0a5f16a857a1d8909107e21d7ce20557b5ed5cedc121a02",
        "linq": "context.Products\n   .GroupBy(p => p.ColorCodeNavigation.ColorDescription)\n   .Select(g => new { g.Key, Count = g.Count() })\n   .OrderByDescending(g => g.Count)\n   .FirstOrDefault()\n   .Key;"
    },
    {
        "id": "40ec0c8b1616799503149e7b97928aaa3a0b9ab750a408c2008b7a2879b9574f",
        "linq": "context.Products.Select(p => p.Characteristics.Select(c => c.CharacteristicName).Distinct().OrderByDescending(x => x.Count()).First()).ToList();"
    },
    {
        "id": "f36fcdc6003889fee0afb369879ca385579236f4b576d56184f750247f7e80f9",
        "linq": "context.Characteristics.Where(c =>!context.ProductCharacteristics.Any(pc => pc.CharacteristicId == c.CharacteristicId)).Select(c => new { c.CharacteristicName, c.CharacteristicDataType, c.OtherCharacteristicDetails }).ToList();"
    },
    {
        "id": "90c5acc08e1a9e0dd769b93836422279ba63cd2c055c86f6d3828f5f7e2f86c7",
        "linq": "context.ProductsGenCharacteristicsContext.ProductCharacteristics\n   .GroupBy(pc => pc.CharacteristicName)\n   .Where(group => group.Count() >= 2)\n   .Select(group => group.Key)\n   .ToList();"
    },
    {
        "id": "21df223fceb6d232965d5af2ed6379847bed7f0df2f203ae6a30561fe91a4070",
        "linq": "context.References.Count(e => e.ColorCodeNavigation.Products.Count == 0);"
    },
    {
        "id": "b4edd2f7f639e219af7a51a35db074763f66f857dda1bc9385adbd4b57aa05a2",
        "linq": "context.TvChannels.Where(c => c.Cartoons.Any(cartoon => cartoon.WrittenBy == \"Todd Casey\")).Select(c => new { c.Country }).Distinct().ToList();"
    },
    {
        "id": "c609fd810dc23964fc83c0e3f1d33e0bcbd40363912eb481bd897bd3283ff3a3",
        "linq": "context.TvChannels.Where(c =>!c.Cartoons.Any(cartoon => cartoon.WrittenBy == \"Todd Casey\")).Select(c => new { c.Country }).Distinct().ToList();"
    },
    {
        "id": "bcf80ee8bba55a7e9e5fce1392889ef36408f78709238e0125552f828f940ef1",
        "linq": "context.TvSeries.Where(s => s.ChannelNavigation.SeriesName == \"Cartoons Directed By Ben Jones And Michael Chang\").Select(s => new { s.SeriesName, s.ChannelNavigation.Country }).ToList();"
    },
    {
        "id": "95958bb4a13b92e5b18ceb06650e96a1b84b6644ecf0fd1f54a168ec80d77aea",
        "linq": "context.TvChannels.Where(c => c.Language!= \"English\").Select(c => new { c.PixelAspectRatioPar, c.Country }).ToList();"
    },
    {
        "id": "f8a726ddc29472744603c6b874578ef962e16e6d850dbaf8b785fa6b2649528a",
        "linq": "context.TvChannels.Where(c => c.Country.Count() > 2).Select(c => c.Id).ToList();"
    },
    {
        "id": "023dfb036b16d6c13242eb26893d6a19ee5b94d064f186190753a721d4ef7262",
        "linq": "context.TvChannels.Where(c =>!c.Cartoons.Any()).Select(c => c.Id).ToList();"
    },
    {
        "id": "b7b6ce87e1e5539ee9bc01ac79f9bfc34a8f7f35ad2846af548cc5c3da06c2a1",
        "linq": "context.TvChannels.Where(c =>!context.Cartoons.Any(x => x.DirectedBy == \"Ben Jones\")).Select(c => c.PackageOption).ToList();"
    },
    {
        "id": "fa5e5a28a0401ac3b34e9cc511c8bde050d7ea2a5d711edb7fe8ba635dbbeab4",
        "linq": "context.WebClientAccelerators.Where(w =>!context.AcceleratorCompatibleBrowsers.Any(a => a.Browser.Name == \"Opera\")).Select(w => new { w.Name, w.OperatingSystem }).ToList();"
    },
    {
        "id": "897d5bee9d8075234b5f3521d458d1571485b7c8a6b4575499ea36ce09fe89d3",
        "linq": "context.AcceleratorCompatibleBrowsers.Where(acb => acb.Accelerator.Name.Contains(\"Opera\")).Select(acb => new { acb.Accelerator.Name, acb.Browser.Name }).ToList();"
    },
    {
        "id": "705325f50b5ff7c531abf7e21d66dd95c855d3ab07327e1a0382a80ea37d864e",
        "linq": "context.WebClientAccelerators.GroupBy(wca => wca.OperatingSystem).Select(g => new { OperatingSystem = g.Key, Count = g.Count() }).ToList();"
    },
    {
        "id": "c80f65d6494fbff755370224daf5b06d7e0d93b31185e59db8aaa41738f43a41",
        "linq": "var query = context.AcceleratorCompatibleBrowsers\n                   .Select(acb => new\n                    {\n                        acb.Accelerator.Name,\n                        acb.Browser.Name,\n                        acb.CompatibleSinceYear\n                    })\n                   .OrderByDescending(acb => acb.CompatibleSinceYear)\n                   .ToList();"
    },
    {
        "id": "66b6be49364c3cb237db82daf56d276a3cc08c762560ba6537a4a3ff6114c53f",
        "linq": "context.Rooms.OrderByDescending(r => r.BasePrice).Take(3).Select(r => new { r.RoomId, r.RoomName }).ToList();"
    },
    {
        "id": "cb92cf1d6a59be43961762b3fcfcb36fd55ac51610dfef4e62d218f187797153",
        "linq": "context.Rooms.Where(r => r.BasePrice > context.Rooms.Average(r => r.BasePrice)).Select(r => r.RoomName).ToList();"
    },
    {
        "id": "1c40f69f5bba617de8e1cda21a012995adbd18bf22cf01f7f55f74b27a03b6b5",
        "linq": "context.Rooms.Count(r =>!r.Reservations.Any());"
    },
    {
        "id": "f3b6d05df10c01e8d7a3d06ed898e880dee341fe7e7774173086037449213791",
        "linq": "context.Reservations.GroupBy(r => r.RoomNavigation.RoomId).Select(g => new { RoomId = g.Key, Count = g.Count() }).ToList();"
    },
    {
        "id": "9634b5bc852ec567ed3ce0b42d774c4325b1b8ddc380baa237e60663f3068522",
        "linq": "context.Rooms.Where(r => r.Reservations.Count() > 60).Select(r => r.RoomName).ToList();"
    },
    {
        "id": "38000ce710cf11e98ea60a72ba8d9f6ed975899e6fc23fdfdf7db4410de84047",
        "linq": "context.Rooms.Where(r => r.BasePrice >= 120 && r.BasePrice <= 150).Select(r => r.RoomName).ToList();"
    },
    {
        "id": "bfb3d9adabe13ffe4009e16d2482f5b3dc4fa34ae92f3d54c5e98572b75733f1",
        "linq": "context.Reservations\n   .Where(r => r.FirstName.Contains(\"ROY\"))\n   .Select(r => r.RoomNavigation.RoomName)\n   .ToList();"
    },
    {
        "id": "380fd76e690a22be738618d449ba26f2d92934e05a67899dd603a39748e6bbac",
        "linq": "context.Musicals.Where(m => m.Nominee!= null).Select(m => new { m.Name, m.Year, m.Award, m.Category, m.Nominee, m.Result }).ToList();"
    },
    {
        "id": "4a1416c1172d4e0033b811df7030485a109b059646a1fd505b28cd1a21366224",
        "linq": "context.Musicals.Where(m =>!m.Actors.Any()).Select(m => new { m.Name }).ToList();"
    },
    {
        "id": "168e863ad9f6bf4fb0d2646ab7f8332259f5f1f1891449a796a1429173dc3a82",
        "linq": "context.Musicals.Where(m => m.Award == \"Tony Award\" || m.Award == \"Drama Desk Award\").Select(m => new { m.Nominee }).ToList();"
    },
    {
        "id": "f30ff547ce13eddbfbe01727d38d494af5178524ad655588f6288c05d4ef1fb5",
        "linq": "context.Musicals.Include(m => m.Actors).Where(m => m.Award == \"Bob Fosse\" || m.Award == \"Cleavant Derricks\").Select(m => new { m.Nominee, m.Result }).ToList();"
    },
    {
        "id": "a185644f50455a54924ab039906c8bdce276d7ac229062dabb5e79dcd93b299c",
        "linq": "context.Settlements.Count();"
    },
    {
        "id": "99151fefea0177e380b04a97176a761fc11d42a33f4f441d8a4379eccacb3680",
        "linq": "context.Customers.Where(c =>!c.CustomerPolicies.Any()).Select(c => new { c.CustomerId, c.CustomerDetails }).ToList();"
    },
    {
        "id": "099e4f329f3158d9e29103c45de29c26a9a668336ba893ef9e92962b5f62e7f2",
        "linq": "context.Claims.Sum(c => c.AmountClaimed);"
    },
    {
        "id": "a8f55bfb996620d1131524d1f30eb703f4f3c0901636aea38f49bc5723bac549",
        "linq": "context.Missions.Select(m => m.Fate).Distinct().Where(f => f.StartsWith(\"United States\")).ToList();"
    },
    {
        "id": "b5982a9d28fe0446c66b6e74473a29fdd85910bada08caec156fe2109167a76b",
        "linq": "context.Ships.Where(s =>!s.Missions.Any()).Select(s => s.Name).ToList();"
    },
    {
        "id": "a15b6a4bc8bba992d77032a68f46aa5c0d92efd4c8deebcf99b4b2f8673a304d",
        "linq": "context.Missions.Where(m => m.Ship.Tonnage > 6000 && m.Ship.Tonnage < 4000).Select(m => m.Ship.Type).Distinct().ToList();"
    },
    {
        "id": "ad0adbec7f13bf4433ca87cf1f9bc717780ff119818b5608c6f98a1c407c61e6",
        "linq": "context.Schools.Where(s =>!context.Players.Any(p => p.SchoolId == s.SchoolId)).Select(s => s.Location).ToList();"
    },
    {
        "id": "b481afba47ddcb51f8b8a2d9a35ad07f6dcc097f88ca8e64059450c1046e5b51",
        "linq": "context.Schools.Where(s => s.Founded < 1890 || s.Founded > 1900).Select(s => new { s.Denomination }).ToList();"
    },
    {
        "id": "f64f23f04d323e72bce61a71a36b572566abafbc2ed9db0241d5e69ae8eb6454",
        "linq": "context.Schools.Where(s => s.Division!= \"1\").Select(s => s.Nickname).ToList();"
    },
    {
        "id": "247ac3a49e5b88e5760a091f48617e863226bcc03b723f3ec2e23e1c0c3babc8",
        "linq": "context.Schools\n.Where(s => s.Denomination!= null)\n.GroupBy(s => s.Denomination)\n.Having(g => g.Count() > 1)\n.Select(s => new { s.Denomination })\n.ToList();"
    },
    {
        "id": "ca444523f7bfd4d2e07f5defbdecf01f43531f699378ac252dade9a4fc585180",
        "linq": "context.Transactions\n   .GroupBy(t => t.TransactionTypeCode)\n   .Select(g => new { g.Key, Count = g.Count() })\n   .OrderByDescending(g => g.Count)\n   .First()\n   .Select(t => t.Key)\n   .Select(t => context.RefTransactionTypes\n       .Where(r => r.TransactionTypeCode == t)\n       .Select(r => r.TransactionTypeDescription))\n   .Single();"
    },
    {
        "id": "3c31c347d3b990dd6053e050cf5a07ba47c6e0df094dce0edfe8b3ab8620b110",
        "linq": "context.Investors.Select(i => new { i.Id, i.Details }).OrderByDescending(i => i.Transactions.Count).FirstOrDefault().ToList();"
    },
    {
        "id": "2aabe9c37f838c117ca7de98408902639d6a26b9dfe366a36624e47fb43c8277",
        "linq": "context.Investors.Include(i => i.Transactions)\n                 .Where(i => i.Transactions.Count() >= 3)\n                 .Select(i => new { i.Id, i.Details })\n                 .ToList();"
    },
    {
        "id": "d90aab2c296abd5f5d4c44de6dda887c8f829abd5880b3b04c45fa4a1aa4afec",
        "linq": "context.Investors\n   .Where(i => i.Transactions.Count >= 2)\n   .Select(i => i.InvestorId)\n   .ToList();"
    },
    {
        "id": "2a7ed54ba5bc4b464bba0b8051e724b2f0c95a7c07aa5f4179c918f214632cbc",
        "linq": "context.Investors.Where(i => i.Transactions.Count > 1 && i.Transactions.Any(t => t.TransactionTypeCode == \"SALE\")).Select(i => new { i.InvestorId, i.InvestorDetails }).ToList();"
    },
    {
        "id": "dfe31293d1d1c0e8b1a57cb1299d599b775bb200863f069ddb13fe235de4c7a2",
        "linq": "context.Transactions.Where(t => t.TransactionTypeCode == \"SALE\" || t.TransactionTypeCode == \"PURCHASE\")\n                   .Select(t => new { t.DateOfTransaction, t.AmountOfTransaction, t.OtherDetails })\n                   .ToList();"
    },
    {
        "id": "f5f21c0b839c090ff609fedb65429274cba9bc8b48c71def6ec506bac4aaf322",
        "linq": "context.Lots.Where(l =>!context.TransactionsLots.Any(tl => tl.LotId == l.LotId)).Select(l => new { l.LotId, l.LotDetails }).ToList();"
    },
    {
        "id": "c31e7fa56385f1600a1b5ff134f813a837e8be82698cd901faf7e90b72542467",
        "linq": "context.MatchSeasons.GroupBy(x => x.Position).OrderByDescending(g => g.Count()).Select(g => new { g.Key, Count = g.Count() }).FirstOrDefault();"
    },
    {
        "id": "474d8c5dd71d926e6e600fa0c2a3ff9f8456eaf85ca4ef09aaf5ff07adbb1512",
        "linq": "context.MatchSeasons\n   .GroupBy(ms => ms.College)\n   .OrderByDescending(g => g.Count())\n   .Take(3)\n   .Select(g => new { College = g.Key, Count = g.Count() })\n   .ToList();"
    },
    {
        "id": "14474358f42bda0bca715708210f5f7878c9df9f8ea41ae7cf51663b628f7400",
        "linq": "context.MatchSeasons.GroupBy(x => x.College).Where(g => g.Count() > 1).Select(g => g.Key).ToList();"
    },
    {
        "id": "65c841fea841b514e667905599c89db28e0e2ab959d9010c9905e3823d3cd588",
        "linq": "context.Teams.Where(t =>!context.MatchSeasons.Any(m => m.Team == t.TeamId)).Select(t => t.Name).ToList();"
    },
    {
        "id": "38ba4b805e75f9551802fcd21050ff436fa5931deac4bff306cbae1549516c0f",
        "linq": "context.Countries.Where(c => c.MatchSeasons.Any(ms => ms.Position == \"forward\" || ms.Position == \"defender\")).Select(c => new { c.CountryName }).ToList();"
    },
    {
        "id": "66bca96db63dff308609056be43e8f5fbd4ce05ec23cd427e0a37ae8c330b517",
        "linq": "context.MatchSeasons\n   .Where(ms => ms.Position == \"midfielder\")\n   .Select(ms => ms.College)\n   .Union(\n        context.MatchSeasons\n           .Where(ms => ms.Position == \"defender\")\n           .Select(ms => ms.College))\n   .Distinct()\n   .ToList();"
    },
    {
        "id": "a0fa010fc41639bcd00820a302459e4cf7e9b60e0782a3360db8a6546050f0bd",
        "linq": "context.Products.Where(p => p.Product1.Contains(\"Scanner\")).Select(p => new { p.Product1 }).ToList();"
    },
    {
        "id": "b7e93bcca3e89c47f46b99e84ececd71cb982aceb41a2ae9867bf784d8c4e329",
        "linq": "context.StoreDistricts.Select(s => s.Store.Products.Select(p => p.MaxPageSize)).Max();"
    },
    {
        "id": "53a5ae92f4226c67797d42101d462e5cda82309742ac61823f00a61e1c5b691f",
        "linq": "context.Products.Where(p => p.MaxPageSize!= \"A4\").Select(p => new { p.Product1 }).ToList();"
    },
    {
        "id": "941d5114601730dae782925fcc5436d0d9ff8ce3e456af698b4cc4db3d401d61",
        "linq": "context.StoreDistricts\n   .Where(s => s.Store.AreaSize > context.Districts.Average(d => d.CityArea))\n   .Select(s => new { s.District.CityPopulation })\n   .Sum();"
    },
    {
        "id": "c066bc0ffdc9b6cf1e737edd6d616cc4b73a576cf8bd23c1252b5731f2a16607",
        "linq": "context.StoreDistricts\n   .Where(s => s.Store.Type == \"city mall\" || s.Store.Type == \"village\")\n   .Select(s => s.District.DistrictName)\n   .ToList();"
    },
    {
        "id": "e47d5ed090cf3f87acd6f99915196097fdbd9888b9137d3ac5c21348ec36f949",
        "linq": "context.Cities.GroupBy(c => c.District).Select(g => new\n{\n    District = g.Key,\n    NumberOfCities = g.Count(),\n    AveragePopulation = g.Average(c => c.Population)\n}).ToList();"
    },
    {
        "id": "bb61e809f33770b27fd77c6d2a77619b07b9690e22beadb7d282d78fffe27ef1",
        "linq": "context.Countries.Where(c => c.LifeExpectancy > 72).Select(c => new { c.GovernmentForm, c.Population }).GroupBy(g => g.GovernmentForm).Select(g => new { GovernmentForm = g.Key, TotalPopulation = g.Sum(p => p.Population) }).ToList();"
    },
    {
        "id": "90b318347a41b72ea00cb9138d94b555e6bd6aacded8c10344ebda2b6182a0f8",
        "linq": "context.Countries.Select(c => new { c.Name, c.SurfaceArea }).OrderByDescending(c => c.SurfaceArea).Take(5).ToList();"
    },
    {
        "id": "7de5587a5d418d718c23cdd2e8e1f5cfbf97870a9ebd032233c308345975bf6e",
        "linq": "context.Countries.Where(c => c.Population > 100000000).OrderByDescending(c => c.Population).Select(c => c.Name).Take(3).ToList();"
    },
    {
        "id": "c465c2b00a90dcf9b3df9c1d62fdbdfaf8f08738f66fe29af66ca5a6e4dc5f5e",
        "linq": "context.Countries.Where(c => c.Population < 1000000).OrderByDescending(c => c.Population).Select(c => new { c.Name }).ToList();"
    },
    {
        "id": "3b44475f6342097676041f0c4c2fe7a43cef0b6a28c05174896ef12e6d9f04f6",
        "linq": "context.Countries.Where(c => c.Continent == \"Asia\").Count();"
    },
    {
        "id": "379e06c7d947d2fbd8780ab06710ac44965d69554caa26e651b41591e99b1077",
        "linq": "context.Countries.Where(c => c.Continent == \"North America\" && c.SurfaceArea > 3000).Select(c => new { c.Population, c.SurfaceArea }).Aggregate((a, b) => a + b).ToList();"
    },
    {
        "id": "99acca0ad73b36d076aed63876cb377392b0b1110470bf0994210660eb217995",
        "linq": "context.Cities.Where(c => c.Population >= 160000 && c.Population <= 900000).Select(c => new { c.Name, c.Population }).ToList();"
    },
    {
        "id": "3722a015deee9da81391930571553c06e080c4a36b5c741094744e103ce9e778",
        "linq": "context.Cities.Where(c => c.Population >= 160000 && c.Population <= 900000).Select(c => c.Name).ToList();"
    },
    {
        "id": "1ddf2b3f1d176a077d5801b95e13904b20c8a5db5bfff2a73e038f77fedc2a8a",
        "linq": "context.Countrylanguages.Where(c => c.Percentage > 0).GroupBy(l => l.Language).Select(g => new { Language = g.Key, Count = g.Count() }).OrderByDescending(c => c.Count).FirstOrDefault();"
    },
    {
        "id": "6cd4027cab6d8a09048057d186ce34d5d289f7bd8715047a5864ed88676428d8",
        "linq": "context.Countries\n .Where(c => c.Countrylanguage\n   .Any(cl => cl.Language == \"Spanish\" && cl.Percentage > c.Countrylanguage.Max(cl => cl.Percentage)))\n .Count();"
    },
    {
        "id": "63df7b6e56c6bf5a1bf438478436003473857f9de58b1c6e35da900debffe79f",
        "linq": "context.Countrylanguages.Where(cl => cl.Language == \"Spanish\" && cl.Percentage > 0).Select(cl => new { cl.CountryCode }).Distinct().ToList();"
    },
    {
        "id": "7cc845a1129ded855adc0ce90f115e06f68fb1a962dc00ab255b3f0b6d2ea45d",
        "linq": "context.Highschoolers.Select(h => h.Grade).GroupBy(g => g).Select(g => new { g.Key, Count = g.Count() }).OrderByDescending(g => g.Count).FirstOrDefault().Key\n\n\n\n### Task:\nNow, using the provided context and models, generate the appropriate C# code for the following query.\n\n\n**Context.cs:**\nusing System;"
    },
    {
        "id": "4486127b06e9a6aa6818f44e529c37ef64b0bb46ca070a34040c8e9ab384551e",
        "linq": "context.Highschoolers\n   .GroupBy(e => e.Grade)\n   .Where(g => g.Count() >= 4)\n   .Select(g => g.Key)\n   .ToList();"
    },
    {
        "id": "6414195c001df50650497f9b4e70299334d2b69c753ff8b77856f10d5b142a0f",
        "linq": "context.Head.Select(h => h.Age).Distinct().ToList();"
    },
    {
        "id": "47d85f2ed732df36fecbe7952953ade60dad3aa2f43b55f3b55e2fcc6f000e05",
        "linq": "context.Departments.Where(d => d.Name == \"Treasury\" || d.Name == \"Homeland Security\").Select(d => d.BornState).Distinct().ToList();"
    },
    {
        "id": "a759f3cacf2a7c6bdf479d064de18a83834a91816c1a01896c9ea7e376dfaeed",
        "linq": "context.Departments.Where(d => d.Managements.Count > 1).Select(d => new { d.DepartmentId, d.Name, d.Managements.Count }).ToList();"
    },
    {
        "id": "896da07c63c7a450ed85d4b1fa572a59a3a1523d182325466f96431c9fa3effb",
        "linq": "var query = context.Managements\n                   .Where(m => m.Head.Name.Contains(\"Ha\"))\n                   .Select(m => new { m.DepartmentId, m.Head.Name })\n                   .ToList();"
    },
    {
        "id": "9c0f7927c0c17dec2f92868acbe882af177ae2d343a8c9fddc5e8ca8eeed10d4",
        "linq": "context.Stadia.Where(s => s.Games.Any(g => g.InjuryAccidents.Any(a => a.Player == \"Walter Samuel\" || a.Player == \"Thiago Motta\"))).Select(s => s.Name).ToList();"
    },
    {
        "id": "ee1a69b0ddf9cdcd13cc7faa72d173bd5dd8bfd7ba92932414650bcc85bd9e05",
        "linq": "context.Stadia.Where(s => s.Name.Contains(\"Bank\")).Select(s => new { s.Name }).ToList();"
    },
    {
        "id": "c1385a0fe0cbfaa8bd1c37af6d55d2933c348be56a2cb8e591270c707e0a11f6",
        "linq": "context.Stadiums.Select(s => new { s.Name, s.HomeGames }).ToList();"
    },
    {
        "id": "244566e0fcb3ee5c95e93fa08e986846befaea28967208d8d0d02f75c15b9485",
        "linq": "context.InjuryAccidents.Include(i => i.Game).Select(i => new\n{\n    i.Game.Date,\n    i.Player\n}).OrderByDescending(i => i.Game.Season).ToList();"
    },
    {
        "id": "8d825ef9c617b48c1adfffa01cf2a4dbb9d7f201b9a38e67d146293dd05523ca",
        "linq": "context.StudentAddresses.Where(s => s.Student.Address.StateProvinceCounty == \"Texas\").Select(s => s.MonthlyRental).ToList();"
    },
    {
        "id": "9957e5cf78945de4abaa4a90a6c120df9258517dbe7e29d64bf4c776548f571d",
        "linq": "context.Students.Where(s => s.Address.StateProvinceCounty == \"Wisconsin\").Select(s => new { s.FirstName, s.LastName }).ToList();"
    },
    {
        "id": "9901b0da2cf330515aac3a3502e02369bb15b14a512e5edfd70c6d9b96a6357b",
        "linq": "context.StudentAddresses.Select(sa => new { sa.Line1, sa.MonthlyRental }).ToList();"
    },
    {
        "id": "6abd25ae44cbb08f0a6b877d1a5e35a8e9da6c58dc92ba80f16776f5ae89edb8",
        "linq": "context.Teachers\n   .Where(t => t.FirstName == \"Lyla\")\n   .Select(t => t.Address.ZipPostcode)\n   .FirstOrDefault();"
    },
    {
        "id": "9926d504d3b9cb5b2cf47e77a7c492b35204da36fb7641324f9f6213fe514cf4",
        "linq": "context.Teachers.Where(t => t.Address.ZipPostcode == \"918\").Select(t => t.EmailAddress).ToList();"
    },
    {
        "id": "33f1bf30ed5bebf32b87b35fad8f260944467c74235d687fc28e2bbed5dd806c",
        "linq": "context.Students.Where(s =>!context.BehaviorIncidents.Any(i => i.StudentId == s.StudentId)).Count();"
    },
    {
        "id": "8a6c0695398e947fb1175667ff3542227814d761a90ee16343c5d722d78b8949",
        "linq": "context.Teachers.Where(t =>!context.StudentsInDetentions.Any(s => s.TeacherId == t.TeacherId)).Select(t => t.LastName).ToList();"
    },
    {
        "id": "ad864294f993845517204cf599b8472d15f70fed4824464d577cc663635065d8",
        "linq": "context.Addresses.Where(a => context.Students.Any(s => s.AddressId == a.AddressId) && context.Teachers.Any(t => t.AddressId == a.AddressId)).Select(a => a.Line1).ToList();"
    },
    {
        "id": "4361f2d25826162ab180acd5ac59f3fde8cb03e263870caddff8dcab95a9aa11",
        "linq": "var result = context.Airlines.Where(a => a.Flights.Count() < 200).Select(a => new { a.Uid, a.Airline1, a.Abbreviation, a.Country }).ToList();"
    },
    {
        "id": "173039ded7cc4d0b76b6fc2ec4f13a759de8f73794e8f0d9cc9c513e7b49e238",
        "linq": "context.Flights.Where(f => f.Airline == \"United Airlines\").Select(f => f.FlightNo).ToList();"
    },
    {
        "id": "0f24a35f2c1470374882d8a808417967eeaa6d2ded59d5bb8a1feae40f50cba2",
        "linq": "context.Flights.Where(f => f.SourceAirport == \"APG\").Select(f => f.FlightNo).ToList();"
    },
    {
        "id": "2782ee2ff937a6da788b84e8d7edcce5c37dd820ab76ef4693fbcc8ceac63e37",
        "linq": "context.Flights.Where(f => f.DestAirport == \"APG\").Select(f => f.FlightNo).ToList();"
    },
    {
        "id": "50dd2f7ea85b75da6f49bdaeca3c2d8f9adba360d61a8a54ccb18ff31fe46d66",
        "linq": "context.Flights.Where(f => f.SourceAirport == \"Aberdeen\").Select(f => f.FlightNo).ToList();"
    },
    {
        "id": "d9aa8fe6fd961334ce90c323f22f9cd9a0e50ab3bc7189b5d053d11e748572c4",
        "linq": "context.Flights.Where(f => f.SourceAirport == \"Aberdeen\").Select(f => f.FlightNo).ToList();"
    },
    {
        "id": "054f8f7f5ffebc68740578ad35c3693c406a6b7a36d47657a8071a906a667f46",
        "linq": "context.Flights.Count(f => f.DestAirportNavigation.City == \"Aberdeen\" || f.DestAirportNavigation.City == \"Abilene\");"
    },
    {
        "id": "ec8d140313c4cf3e4b18df6a1c7a45eb5efa1ec14c17187a5c36fddafb4066e4",
        "linq": "context.Airports.Where(a =>!context.Flights.Any(f => f.SourceAirport == a.AirportCode || f.DestAirport == a.AirportCode)).Select(a => a.AirportName).ToList();"
    },
    {
        "id": "d94ac84616b475cc01824d596bd048d375ffc02662ba1ccd572d121ef9a1d01d",
        "linq": "context.Swimmers.Where(s =>!context.Records.Any(r => r.SwimmerId == s.Id)).Select(s => s.Name).ToList();"
    },
    {
        "id": "243a3f0db81ff21537ab6d85070a5d7d540f1af52d35add73099fdf1da9770b0",
        "linq": "context.Swimmers.Where(s => s.Records.Any(r => r.Result == \"win\" || r.Result == \"loss\")).Select(s => s.Name).ToList();"
    },
    {
        "id": "66428ad32905dc67ed33a1d059afd03920cb64aaf7230191f3796ff3a5c7711e",
        "linq": "context.Stadia.Where(s => s.Events.Any(e => e.Records.Any(r => r.Swimmer.Nationality == \"Australia\"))).Select(s => s.Name).ToList();"
    },
    {
        "id": "51c848a3678563a663ea73efa0f2d4fe4525ff3a03063c1a381ca82f83da4c6f",
        "linq": "context.Stadia\n   .Include(s => s.Events)\n   .ThenInclude(e => e.Records)\n   .ThenInclude(r => r.Swimmer)\n   .Where(s => s.Events.Any(e => e.Records.Any(r => r.Swimmer!= null)))\n   .Select(s => new { s.Name })\n   .ToList();"
    },
    {
        "id": "86e226a3317544b544c8cbe8f634526dc25b5fd4c1528af6d6fe30dbd70cbf5c",
        "linq": "context.Swimmers.Select(s => new { s.Id, s.Name, s.Nationality, s.Meter100, s.Meter200, s.Meter300, s.Meter400, s.Meter500, s.Meter600, s.Meter700, s.Time }).ToList();"
    },
    {
        "id": "0d8fdc806a728f821fd858e5c1688735c789b3c81152d351a66a9f9f1d602eed",
        "linq": "var result = context.Stadia.Where(s => s.OpeningYear == 2005).Select(s => new { s.Capacity }).Average();"
    },
    {
        "id": "d3879c5adbd51f13d752805afd1ae81c966ffca7a8b5961788de7d26ec334bb3",
        "linq": "context.Players.Where(p => p.CountryCode!= null && p.CountryCode!= \"\").Select(p => new { p.CountryCode }).Distinct().Where(p => p.Count() > 50).ToList();"
    },
    {
        "id": "161a4db5a3e1d4b886b18ddfda898bf27597770128753070a5847f39308df0eb",
        "linq": "context.Rankings.Select(r => new { r.RankingDate, r.Tours }).GroupBy(r => r.RankingDate).Select(g => new { g.Key, Total = g.Sum(r => r.Tours) }).ToList();"
    },
    {
        "id": "6d577eb4be1233a91ac316d1ed60d300dd648e9213fcf38e51dc2c5c9d162431",
        "linq": "context.Matches.Select(m => m.Year).GroupBy(y => y).Select(g => new { Year = g.Key, Count = g.Count() }).ToList();"
    },
    {
        "id": "529d65372a186530255b2009b80806077a7e9e1947038ff8495f77b6f5d9efff",
        "linq": "context.Matches\n   .Where(m => m.WinnerHand == \"left\")\n   .GroupBy(m => m.WinnerName)\n   .Select(g => new { Winner = g.Key, Count = g.Count() })\n   .Where(w => w.Count == 1)\n   .Select(w => w.Winner)\n   .Distinct()\n   .Count()<|end_of_text|>"
    },
    {
        "id": "b2d321efb61d5699fa699cfa6c30b47129b477d39284d1d8ebeed6d7d4515036",
        "linq": "context.Matches\n   .Where(m => m.WinnerRank == m.WinnerRankPoints.Max())\n   .Select(m => new { m.WinnerName, m.WinnerIoc, m.WinnerBirthDate })\n   .FirstOrDefault();"
    },
    {
        "id": "e4629370353f20474c4e9d45b3fa4d923fd7487b696c3a47a88a6e922c18aaff",
        "linq": "context.Players.GroupBy(p => p.Hand).Select(g => new { Hand = g.Key, Count = g.Count() }).ToList();"
    },
    {
        "id": "333a937d96492b36d1d706b24b6eb40109f9e60a466f765ec0a1e24030d5a03f",
        "linq": "context.CountyPublicSafeties.Where(c =>!context.Cities.Any()).Select(c => c.Name).ToList();"
    },
    {
        "id": "7fa4900237500cabf2b668e34639f8694bc30fa7ee8fa21c6538c1624808f53f",
        "linq": "context.CountyPublicSafeties.Where(c => c.Location == \"East\" || c.Location == \"West\").Select(c => new { c.PoliceForce }).ToList();"
    },
    {
        "id": "e0272e9f1b0b857180da5b4d0861a5ab479a30a51d7a24a812cb3988d4a2864e",
        "linq": "context.CountyPublicSafeties\n   .Where(c => c.CrimeRate < 100)\n   .Select(c => c.Cities.Select(city => city.Name))\n   .ToList();"
    },
    {
        "id": "8e11104598919385d40ae6ec0e4b93aa9cfb0265f102113ca31eb8ce5e6259c2",
        "linq": "context.CountyPublicSafeties.Select(c => new { c.CountyId, c.Population, c.CaseBurden }).OrderByDescending(c => c.Population).ToList();"
    },
    {
        "id": "f0107c731ad1d672f19b49e0530dd50431680cbac700d3de60b759e580916ab1",
        "linq": "context.Schedules.Select(s => new { s.Cinema.Name, s.Film.Title, s.Date, s.Price }).ToList();"
    },
    {
        "id": "546c944ad17178f708398a111ea08b3ac344291c82385f07cd71dc5ae2866726",
        "linq": "context.Films\n   .Where(f => f.Schedules.Count == 0)\n   .Select(f => new { f.Title, f.DirectedBy })\n   .ToList();"
    },
    {
        "id": "c8646fc337cb1ad71396cdcac3eb03c9cc10215ba8c525430a3c7bf3051a7410",
        "linq": "context.Films.Where(f => f.DirectedBy == \"director with the largest number of show times in total\").Select(f => new { f.DirectedBy, f.NumberInSeason, f.ShowTimesPerDay }).ToList();"
    },
    {
        "id": "77d550b533006953f78d64929a6be77a5a1c2a5595e522fb80a63e3aa6e2294d",
        "linq": "context.Cinemas.Where(c => c.Schedules.Any(s => s.ShowTimesPerDay > 300)).Select(c => new { c.Location }).Distinct().ToList();"
    },
    {
        "id": "56a214321dca89f12254279f6eac1ff75b0bfeaf9e8a2c281b3119c25386489e",
        "linq": "context.Films.Count(f => f.Title.Contains(\"Dummy\"));"
    },
    {
        "id": "3697552a5f47056a8bbb8cb2e1eabc01c621ae62bcea81dd138b8f2a1301b950",
        "linq": "context.TouristAttractions.GroupBy(ta => ta.HowToGetThere).Select(g => new\n{\n    HowToGetThere = g.Key,\n    Count = g.Count()\n}).ToList();"
    },
    {
        "id": "76c78528b5b616254989d42089c60e36c5fd1e32c228056801862024369fff87",
        "linq": "context.TouristAttractions.Select(a => new { a.Name, a.TouristAttractionId, a.Visits.Count() }).ToList();"
    },
    {
        "id": "40c162a8896971760690ed0a3cce14ec1e981e5fb8d4bd0d7d9536ed4a54cdd8",
        "linq": "context.Visits.GroupBy(v => v.TouristAttractionId)\n   .Select(g => new { g.Key, Count = g.Count() })\n   .Where(g => g.Count >= 2)\n   .Select(g => new { g.Key, Name = context.TouristAttractions\n       .Where(t => t.TouristAttractionId == g.Key)\n       .Select(t => t.Name)\n       .FirstOrDefault() })\n   .ToList();"
    },
    {
        "id": "4fa59725b23095b103e09eb95927dae86b52a9ebd62fd0109f0364977bf9d3f9",
        "linq": "context.TouristAttractions\n   .GroupBy(t => t.TouristAttractionId)\n   .Where(g => g.Count() == 1)\n   .Select(t => new { t.Key, t.Name })\n   .ToList();"
    },
    {
        "id": "33131076abae0581c9d98d887da9d6535f898cbfc4b623a58b6b5c9c0f323afb",
        "linq": "context.TouristAttractions\n   .Where(ta => ta.HowToGetThere == \"walk\" || ta.Address == \"660 Shea Crescent\")\n   .Select(ta => ta.Name)\n   .ToList();"
    },
    {
        "id": "9afcfce8aaf3f8ca6121e3b594a259a6db91b99aad9e94defd9aae436ca5770e",
        "linq": "context.TouristAttractions.Where(ta => ta.HowToGetThere == \"Bus\" || ta.Location.Address == \"254 Ottilie Junction\").Select(ta => new { ta.Name }).ToList();"
    },
    {
        "id": "5e8767e24a9ec9eade2c847720b9e75bf807e0d98b52ef54d7a28138cb9bfcbe",
        "linq": "context.Visits\n   .Include(v => v.TouristAttraction)\n   .Where(v => v.TouristId == 2 || v.TouristId == 3)\n   .Select(v => v.TouristAttraction.Name)\n   .ToList();"
    },
    {
        "id": "fba68a4b5d3cb573cd8061638fa634ffe47b68bfa01ab355610f263a683c5f13",
        "linq": "context.Visits.Where(v => v.TouristId == 3 &&!v.Visits.Any(vv => vv.TouristId == 4)).Select(v => new { v.TouristAttraction.Name }).ToList();"
    },
    {
        "id": "ea6121eb6416967cecf94a3e6a316a9bec2873410cdd6b9afa993b5557498b93",
        "linq": "context.Visitors.Where(v => v.Visits.Count == 0).Count();"
    },
    {
        "id": "a4a2175e95cb64803791783135ca6fd4e86ca32dee39f2353599a575b42fb905",
        "linq": "context.CustomerEvents.Select(c => new { c.CustomerEventId, c.DateMovedIn, c.PropertyId }).ToList();"
    },
    {
        "id": "05bc10fd1fcfa8d3cc28cd662a74a84e6dd845c60d1db1580fdccbfb42a9e760",
        "linq": "context.Customers.Where(c =>!c.CustomerEvents.Any()).Count()\n\n<|end_of_text|>"
    },
    {
        "id": "00756d572ab46299a7b2eba41ce142193f95ec9f6e506b1216a86bea906cf611",
        "linq": "context.Residents.Select(r => r.DateMovedIn).Distinct().ToList();"
    },
    {
        "id": "a3beb3a7ca895105e907ce21ff695c5840bf17c1c7bee62cc67f5a4381baf4e7",
        "linq": "context.Members.Select(m => m.Name).Where(m => m.RankInRound > 3).ToList();"
    },
    {
        "id": "8069c2e091b6b6f4bc44fb7c884c1a9f5738bd0eda6adedcd25dd915be2c6497",
        "linq": "context.Rounds.Select(r => r.Member.Name).OrderBy(r => r.RankInRound).ToList();"
    },
    {
        "id": "b48845beaad0d363ad1964532938150c5ed8f265c677c9ce399bb57eedc54c01",
        "linq": "context.Members.Where(m =>!m.Rounds.Any()).Select(m => m.Name).ToList();"
    },
    {
        "id": "9ecd21bcc3bc4ae494d9d62fef773da758de96b266804e6b297c92f69b25b4a4",
        "linq": "context.Buildings.Where(b =>!b.OfficeLocations.Any()).Select(b => b.Name).ToList();"
    },
    {
        "id": "e685877664acb5c2791aadbcefd54753a4eb898c6b80953d618f0a2f0ea6b8a7",
        "linq": "context.OfficeLocations.Join(\n    context.OfficeLocations,\n    l => l.BuildingId,\n    r => r.BuildingId,\n    (l, r) => new\n    {\n        l.CompanyId,\n        r.CompanyId\n    })\n.Where(\n    x =>\n        x.l.CompanyId == x.r.CompanyId &&\n        x.l.MoveInYear == x.r.MoveInYear &&\n        x.l.BuildingId == x.r.BuildingId &&\n        x.l.CompanyId == 1 &&\n        x.r.CompanyId == 2)\n.Select(\n    x =>\n        new\n        {\n            x.l.CompanyId,\n            x.r.CompanyId,\n            x.l.MoveInYear,\n            x.r.MoveInYear,\n            x.l.BuildingId,\n            x.r.BuildingId,\n            x.l.BuildingId,\n            x.r.BuildingId\n        })\n.ToList();"
    },
    {
        "id": "f221dc57e0f4eb5cba97c8ca5fc7f3495a6a85b08e0d9b92d18dc539aa0bdd31",
        "linq": "context.Companies.Where(c => c.Industry == \"Banking\" || c.Industry == \"Conglomerate\").Count();"
    },
    {
        "id": "e81d7374abb0a1545c9bdf3d6d373c5a187a614042b07d4a11fc26bce463b463",
        "linq": "context.Companies.GroupBy(c => c.Headquarters)\n   .Where(g => g.Count() > 2)\n   .Select(c => new { c.Key, Count = c.Count() })\n   .OrderByDescending(c => c.Count)\n   .ToList();"
    },
    {
        "id": "6001d4c2153a65e06b47159250a45e2dc9efde772192c6d47b08dff67b6137f1",
        "linq": "context.Customers.Select(c => c.PaymentMethod).GroupBy(m => m).OrderByDescending(g => g.Count()).Select(g => g.Key).First();"
    },
    {
        "id": "320af40724a24c3a3cdc987f83987081f96c47456a7592cac232398663df64d2",
        "linq": "context.DeliveryRoutes.OrderBy(r => r.RouteName).Select(r => r.RouteName).ToList();"
    },
    {
        "id": "0a70e21fd2bd2424d742699e7308f6799a78f42d223e88c5ec4ab52d50324b90",
        "linq": "context.DeliveryRoutes\n   .Include(d => d.DeliveryRouteLocations)\n   .Include(d => d.DeliveryRouteLocations.Select(l => l.LocationAddress))\n   .Where(d => d.DeliveryRouteLocations.Count() == context.OrderDeliveries.Count(d => d.LocationCodeNavigation.LocationCode == d.LocationCodeNavigation.LocationCode))\n   .Select(d => new { d.RouteName })\n   .FirstOrDefault();"
    },
    {
        "id": "3a7fc21b5d7c7aba77d9c99b144a215e51986baa624ee5775aac083772922f9a",
        "linq": "context.CustomerAddresses\n   .Select(ca => new { ca.Address.StateProvinceCounty, ca.Customer.CustomerName })\n   .GroupBy(ca => ca.Address.StateProvinceCounty)\n   .Select(g => new { g.Key, Count = g.Count() })\n   .ToList();"
    },
    {
        "id": "abc368623990e4975a7712cbdd9269d345e77fb412f980acb400b6352e83b54e",
        "linq": "context.Acceptances\n   .GroupBy(a => a.Submission.Author)\n   .Select(g => new { g.Key, Count = g.Count() })\n   .ToList();"
    },
    {
        "id": "54fcf7e323928b980e65dc883791ac09614cc113becf8557a80791fc9770420b",
        "linq": "context.Workshops.OrderBy(w => w.Venue).Select(w => new { w.Date, w.Venue }).ToList();"
    },
    {
        "id": "26d8a6197aed6583b46ebac159460be52b974b8c9c75f69375275d0956cd57d8",
        "linq": "context.Workshops.Select(w => w.Acceptances.Select(a => a.Submission).Where(s => s.Author == null)).ToList();"
    },
    {
        "id": "9eedc3b3abd03d2dd8d5bbc0813891121f9f94dea9412eb4e57c1427dbda59df",
        "linq": "context.Artists\n   .Where(a =>!context.Exhibitions.Any(e => e.Year == 2004 && e.ArtistId == a.ArtistId))\n   .Select(a => a.Name)\n   .ToList();"
    },
    {
        "id": "9de242151aac0f7fc0d54f929f884c30f1815c816d346da061700bd9619bd7ac",
        "linq": "context.Exhibitions.Where(e => e.ExhibitionRecords.Any(er => er.Attendance < 100 || er.Attendance > 500)).Select(e => new { e.Theme }).ToList();"
    },
    {
        "id": "5be6aeca296304892293e96f6cdb3d955eeaf28412e7d566b2adda0283f6c761",
        "linq": "context.ExhibitionRecords.Where(e => e.Attendance > 100 || e.TicketPrice < 10).Select(e => new { e.ExhibitionId, e.Date, e.Attendance, e.TicketPrice }).ToList();"
    },
    {
        "id": "8e1b8119411fa3859e1b366903e42d49f926179b72559eb64a0851dd2507f362",
        "linq": "context.Artists.Select(a => new { a.Name, avgAttendance = context.ExhibitionRecords.Where(er => er.ExhibitionId == a.ArtistId).Average(er => er.Attendance) }).Where(a => avgAttendance > 200).ToList();"
    },
    {
        "id": "81cd614d56685e776f8f4b61177f4589ca69037f7ed28d929623fe36a22ed0ac",
        "linq": "context.Transcripts.Select(t => t.TranscriptDate).OrderByDescending(t => t).FirstOrDefault().Value;"
    },
    {
        "id": "7777e8adc699e220d4d1dc18e319bb0f3bbb946a11f3e6e47ed607678a2e54ba",
        "linq": "context.Transcripts.SelectMany(t => t.TranscriptContents).Select(c => c.StudentCourse.StudentEnrolmentCourse.StudentEnrolment.StudentEnrolmentCourses.Select(e => e.CourseId)).Distinct().Count()<|end_of_text|>"
    },
    {
        "id": "08c923c220f124df6295ac7ae4ae9709e855ceb9aae9f1e7c8bbe8242d9fbc58",
        "linq": "context.Transcripts.OrderBy(t => t.TranscriptContents.Count).Select(t => new { t.TranscriptId, t.TranscriptDate }).FirstOrDefault();"
    },
    {
        "id": "ac466f4c1c9441d9ceb5fe3727945c8e766ffcbbd938e3f8e44a791dd7f424d0",
        "linq": "context.Semesters.Where(s => s.StudentEnrolments.Any(e => e.DegreePrograms.Any(d => d.DegreeSummaryName == \"Master\")) && s.StudentEnrolments.Any(e => e.DegreePrograms.Any(d => d.DegreeSummaryName == \"Bachelor\"))).Select(s => new { s.SemesterName }).ToList();"
    },
    {
        "id": "4642c93659b4a01a6dbf5c1a335144c4c9dfdd800ecffe590eda0314467329b7",
        "linq": "context.Addresses.Count(a => a.StudentCurrentAddresses.Count > 0);"
    },
    {
        "id": "da5a21f2286099075a18e7f0344bfc3ddb2d723b60e0e9c9fd492c660a517172",
        "linq": "context.Student.Select(s => new { s.FirstName, s.MiddleName, s.LastName }).OrderByDescending(s => s.LastName).ThenByDescending(s => s.FirstName).ThenByDescending(s => s.MiddleName).ToList();"
    },
    {
        "id": "0d0dda75e3702d63289a9749b73b9e6b0f5d38757640bf1e2905b9d36767cc9a",
        "linq": "context.Sections.Where(s => s.SectionName == \"h\").Select(s => new { s.SectionName, s.SectionDescription }).ToList();"
    },
    {
        "id": "75307bbb5b9b45db33db4eb24d22da9442c156e3cf8ab3d16a361256bfafbe4e",
        "linq": "context.Students.Where(s => s.PermanentAddress.Country == \"Haiti\" || s.CellMobileNumber == \"09700166582\").Select(s => s.FirstName).ToList();"
    },
    {
        "id": "ff28dfa5f2cf2729d457f1cf4d73c04bf97e2ac4c76b36af518e5bf7103ebdc5",
        "linq": "context.Books.Where(b =>!b.Publications.Any()).Select(b => b.Title).ToList();"
    },
    {
        "id": "379907210a2c5e2b6b35fdb085c6fc95e1cab94af6fda081bc0ca9d9836377ac",
        "linq": "context.Publications.Where(p => p.Price > 10000000 && p.Price < 5000000).Select(p => new { p.Publisher, p.PublicationDate, p.Price }).ToList();"
    },
    {
        "id": "1fd938c5c7816244e0668ab5c1737d2573812d1c7b77524d3090ef5141fb7416",
        "linq": "context.Publications.Select(p => p.PublicationDate).Distinct().Count();"
    },
    {
        "id": "81cc060f19911490dc3fca9ba83b915a63b4168ea256e522436e6203cbe2d23c",
        "linq": "context.Publications.Where(p => p.Publisher == \"Person\" || p.Publisher == \"Wiley\").Select(p => p.Price).ToList();"
    },
    {
        "id": "4d49ca1ae669d6f4903370899c8aae2d9f3ff3c95f781fb2e63aa7148ed1ace6",
        "linq": "context.Shops.Where(s =>!context.Stocks.Any(s => s.DeviceId == null)).Select(s => new { s.ShopName }).ToList();"
    },
    {
        "id": "535a6e9498c60856dd8cac06c0949995d9bcd3f86c8b649b13eecab983576983",
        "linq": "context.Shops.Where(s => s.OpenYear > 2012 || s.OpenYear < 2008).Select(s => s.Location).Distinct().ToList();"
    },
    {
        "id": "e08cebbf3b947a126b5422f6e9f3eee6d90dce7298740a94a6a994e2a401dd54",
        "linq": "context.Stocks.Where(s => s.Quantity == null).Select(s => s.Device.Carrier).Distinct().ToList();"
    },
    {
        "id": "a1feff1602dc2313ee17fa6e2bf32b8db0794a41ddb9df469f5283992b856b38",
        "linq": "context.Devices.Join(context.Stocks, d => d.DeviceId, s => s.DeviceId, (d, s) => new { d.Carrier, s.Quantity }).Where(s => s.Quantity > 1).Select(s => new { s.Carrier }).Distinct().ToList();"
    },
    {
        "id": "ee482d4a91bdecceb6d6dbbcaf036425d536cca03408aea0b2205990948cd695",
        "linq": "context.Shops.Include(s => s.HappyHours).Where(h => h.HappyHours.Any(hh => hh.Month == \"May\")).Select(s => new { s.ShopId, s.Address }).ToList();"
    },
    {
        "id": "76de639a5e92a5fa9319cbb23c08250c12b9d6cb4dc469eee426d3e9c5f33f76",
        "linq": "context.Shops.Where(s => s.HappyHours.Count() > 0).Select(s => new { s.ShopId, s.HappyHours.Count() }).OrderByDescending(s => s.HappyHours.Count()).Take(1).ToList();"
    },
    {
        "id": "dc4cf167227a3a689c1eb626cfb1bc735ce9abcc901a7ad28b84287894f8aa98",
        "linq": "context.Shops.Select(s => s.HappyHours.Select(h => h.Month)).GroupBy(m => m).OrderByDescending(g => g.Count()).First().Key\n\n\n\n### Task:\nNow, using the provided context and models, generate the appropriate C# code for the following query.\n\n\n**Context.cs:**\nusing System;"
    },
    {
        "id": "c8d1749d1e120f5769918b1c00bb0ba57888bf1295f6213d3babdaf8473a15f3",
        "linq": "context.Shops.Where(s => s.HappyHours.Count() > 2).Select(s => s.Month).Distinct().ToList();"
    },
    {
        "id": "fbcb1f7909ab9982cb442fbba8c9fedd484490f1b64e5b7eca00581fe8f264e1",
        "linq": "context.Artworks.GroupBy(e => e.Type).OrderByDescending(g => g.Count()).Select(g => new { g.Key, Count = g.Count() }).ToList();"
    },
    {
        "id": "319b162b4a0d9c38c8854836fdbb4ca345388880fed065496193eebad4df9099",
        "linq": "context.FestivalDetails.GroupBy(f => f.Year).Where(g => g.Count() > 1).Select(f => new { f.Year }).ToList();"
    },
    {
        "id": "b9087b7581537ee82e997cbee8c0224e60e8a055b584f6f7e7ade5545bdd5151",
        "linq": "context.Artworks.Where(a =>!context.Nominations.Any(n => n.ArtworkId == a.ArtworkId)).Select(a => a.Name).ToList();"
    },
    {
        "id": "9667828666e3ac5c849111b83dd74abc15077397a5a8e4c4af721cf9be99cd1d",
        "linq": "context.FestivalDetails.Where(fd => fd.Year == 2008 || fd.Year == 2010).Select(fd => fd.NumOfAudience).ToList();"
    },
    {
        "id": "21f48184054d219331a2b2452a7c1b72a464f1180594c28b73772727ed6b5618",
        "linq": "context.FestivalDetails.Sum(f => f.NumOfAudience).GetValueOrDefault();"
    },
    {
        "id": "0708585035520e8bf9853a5c3b87ada3c6f9e626ba96d79f4cb2d5395f85916b",
        "linq": "context.Assets\n   .OrderBy(e => e.AssetDisposedDate)\n   .Select(e => new { e.AssetMake, e.AssetModel, e.AssetDetails })\n   .ToList();"
    },
    {
        "id": "259ba46548da6294da754701be5c0f35afa70c55a986a27acd249bee24d9e779",
        "linq": "context.Parts.Where(p => p.ChargeableAmount!= null).OrderBy(p => p.ChargeableAmount).Select(p => new { p.PartId, p.ChargeableAmount }).ToList();"
    },
    {
        "id": "677e7f26d835d6e0ce99182b5e291b99e7733b0b9241b8ddf67780d62125e966",
        "linq": "context.ThirdPartyCompanies.Where(c => c.MaintenanceContracts.Any(m => m.ContractStartDate == context.MaintenanceContracts.Min(m => m.ContractStartDate))).Select(c => new { c.CompanyName }).ToList();"
    },
    {
        "id": "9b17cfaeb95c7a6068aaad12a04aaf3b927eef42bf2909f8cd2485bfc78fc6cf",
        "linq": "context.Staff.Select(s => new { s.Gender, s.StaffName }).GroupBy(s => s.Gender).Select(g => new { g.Key, g.Count() }).OrderByDescending(g => g.Count()).First().Key\n\n\n\n### Task:\nNow, using the provided context and models, generate the appropriate C# code for the following query.\n\n\n**Context.cs:**\nusing System;"
    },
    {
        "id": "ecbb1e2cff81ddefd96a996d0487772824d82da62d735b4d0b74a5668932e2bd",
        "linq": "context.Staff.Join(context.EngineerVisits, s => s.StaffId, e => e.ContactStaffId, (s, e) => new { s.StaffName, e.EngineerId })\n   .GroupBy(s => s.StaffName)\n   .Select(g => new { g.Key, Engineers = g.Count() })\n   .OrderByDescending(g => g.Engineers)\n   .ToList();"
    },
    {
        "id": "53e6a42e000bb09e127eec55f1c4e1ca43ab40a504294669d896af62d0978e45",
        "linq": "context.Assets.Where(a =>!a.FaultLogs.Any()).Select(a => new { a.AssetModel }).ToList();"
    },
    {
        "id": "968d3749dc9f63d3418a4d8e6311aa5066dc54f993f0a754634bed6ccacf449d",
        "linq": "context.DocumentsWithExpenses.Select(d => new { d.BudgetTypeCode, d.DocumentDetails }).ToList();"
    },
    {
        "id": "5a4862edec22b89bd46f0f15d1bd9c8e3e308c835aab4cf4945eb1a55eb36fa9",
        "linq": "context.DocumentsWithExpenses.Where(dwe => dwe.BudgetTypeCode == \"Government\").Select(dwe => new { dwe.DocumentId }).ToList();"
    },
    {
        "id": "1f59f3fe3b460edc141f94413315c9b9e0a55c7f6f3c5f80710260e5b9f984ac",
        "linq": "context.DocumentsWithExpenses\n   .GroupBy(dwe => dwe.BudgetTypeCode)\n   .Select(g => new\n    {\n        BudgetTypeCode = g.Key,\n        Count = g.Count()\n    })\n   .ToList();"
    },
    {
        "id": "036ff8437c9d60b1dcdaad8c5042f95a4e59cfa0b8e59edb65277905fce18cdc",
        "linq": "context.DocumentsWithExpenses.Select(d => d.BudgetTypeCode).GroupBy(b => b).OrderByDescending(g => g.Count()).FirstOrDefault().Key<|end_of_text|>"
    },
    {
        "id": "64c77ed2291414186d1db8b8b03e5a79d67d001fe7e17b7b3c92905225938d7e",
        "linq": "context.Documents.Select(d => d.DocumentId).Where(d =>!context.DocumentsWithExpenses.Any(e => e.DocumentId == d.DocumentId)).ToList();"
    },
    {
        "id": "5a24ee698bc1d00162ed2e1b19c64fa6691d5b302d6dfb6f276b1486e4bf4eb1",
        "linq": "context.Documents.Select(d => d.DocumentId).Where(d => d.DocumentTypeCode == \"CV\" &&!d.DocumentsWithExpenses.Any()).ToList();"
    },
    {
        "id": "660321487b6fced1e5b366ceebd1f6dfe7b3c62acc0d3e50814bfb71b1046f0c",
        "linq": "context.DocumentsWithExpenses.Where(d => d.DocumentDetails.Contains('s')).Select(d => d.DocumentId).ToList();"
    },
    {
        "id": "feece921bdeb285b835fe2c3c4d38d43bec41ad56ab02834b4f462ccf2c7c30e",
        "linq": "context.DocumentsWithExpenses.Count(d =>!d.Expense.Any());"
    },
    {
        "id": "8677c16143e5c23fff670dab55e2533c4d3f36deec03176a4af2331f63468502",
        "linq": "context.DocumentsWithExpenses\n   .Where(d => d.BudgetTypeCode == \"GV\" || d.BudgetTypeCode == \"SF\")\n   .Select(d => d.DocumentDate)\n   .Distinct()\n   .ToList();"
    },
    {
        "id": "a3cc5efc46b13bed4f7496bc5af48b39f9dbe7fb24e5e89a65ee847cdecc3cc6",
        "linq": "context.Mountains.Where(m =>!context.Climbers.Any(c => c.MountainId == m.MountainId)).Select(m => m.Name).ToList();"
    },
    {
        "id": "51fe82ddd8ab8090dd16d211a71b9bdc45501ea74065ca3d496bb0a5656c943e",
        "linq": "context.Mountains.Where(m => m.Height > 5600).Select(m => new { m.Country }).Union(context.Mountains.Where(m => m.Height < 5200).Select(m => new { m.Country })).Distinct().ToList();"
    },
    {
        "id": "506b96e91b042941b666848240e783fe2a02bdd0fd45ccdb5c40ada6f6bb9f14",
        "linq": "context.Mountains.GroupBy(m => m.Range).OrderByDescending(g => g.Count()).Select(g => g.Key).FirstOrDefault();"
    },
    {
        "id": "f02abc504dea45bfeb1f3c34bcc71cd94477353a2366e209476886bb4ac630ac",
        "linq": "context.Mountains.Where(m => m.Height > 5000 || m.Prominence > 1000).Select(m => m.Name).ToList();"
    },
    {
        "id": "b4e1fa0c226bd2ca3f99d6c1893456ba702c58174b9fd1ebab396ccbe41e9b1a",
        "linq": "context.Colleges.Select(c => new { c.State }).Where(c => c.Tryouts.Any(t => t.PPos == \"Goalie\" || t.PPos == \"Mid\")).Select(c => c.State).Distinct().ToList();"
    },
    {
        "id": "9eb4c921430c3508146ced2cc8b0fc719ec46f842097a6ba92872c31bea0bde6",
        "linq": "context.Colleges.Count(c => c.Tryouts.Any(t => t.Decision == \"GP\" && t.PPos == \"Goalie\" || t.PPos == \"Mid\"));"
    },
    {
        "id": "deff87356aa7e57f1e37da357baf04e13d89136159c98370a50ce6bc9f7766fc",
        "linq": "context.Tryouts.Where(t => t.PPos == \"mid\" &&!t.PPos == \"goalie\").Select(t => new { t.CName }).Distinct().ToList();"
    },
    {
        "id": "b84e9b02c896ace420b1be93938397fd6a9aae4abbc31f863f26d1d5f13e4450",
        "linq": "context.Colleges\n   .Include(c => c.Tryouts)\n   .Where(c => c.Tryouts.Any(t => t.PPos == \"Mid\" && t.Decision!= \"Goalie\"))\n   .Select(c => new { c.State })\n   .ToList();"
    },
    {
        "id": "64cd30ab6c6e5b16df9a4ce1e0431593808d08c1529012dbe72f19a966297ab8",
        "linq": "context.Colleges.Where(c => c.Tryouts.Any(t => t.PPos == \"mid\" &&!t.Tryouts.Any(t => t.PPos == \"goalie\"))).Select(c => new { c.State }).Distinct().Count();"
    },
    {
        "id": "43e01ccb425bf171e0442f9ee11169e3bacf1ad0eb82a5c803df7959c9b33c39",
        "linq": "context.Colleges.Where(c => c.Enr < context.Colleges.Max(c => c.Enr)).Select(c => c.State).Distinct().ToList();"
    },
    {
        "id": "ecc728dd380ff41fdd5d2b401590a1e7b3aa40b2af99517c31cf8525a08e6e86",
        "linq": "context.Colleges.Where(c => c.Enr > context.Colleges.Where(c => c.State == \"FL\").Select(c => c.Enr).FirstOrDefault()).Select(c => c.CName).ToList();"
    },
    {
        "id": "f12bbe163534a6402b718f816bbc51c4d7faaf8074252d04cd6127f8cefd130e",
        "linq": "context.Colleges\n.Where(c => c.Enr > context.Colleges\n.Where(c => c.State == \"FL\")\n.Select(c => c.Enr)\n.Min())\n.Select(c => c.CName)\n.ToList();"
    },
    {
        "id": "ff79a875523741dbf1fed7f80071824cc12046aa672a35823263569f6895fc99",
        "linq": "context.Colleges\n   .Where(c =>!context.Players.Any(p => p.PPos == \"Goalie\" && p.CName == c.CName))\n   .Sum(c => c.Enr)\n\n<|end_of_text|>"
    },
    {
        "id": "4a2ee5bd7a09e13d1f7cc74742575190b9c851b44131319712acc5e040f1bc6e",
        "linq": "context.Colleges.GroupBy(c => c.State).Select(g => new { State = g.Key, Enr = g.Average(c => c.Enr) }).Where(g => g.Enr > context.Colleges.Average(c => c.Enr)).Count();"
    },
    {
        "id": "2ceca2886f38b8b9bdcf9d81d18b8bff5851b785dba7699d206cf9a961df8b64",
        "linq": "context.Colleges.Where(c => c.Enr < context.Colleges.Average(c => c.Enr)).Select(c => new { c.State }).Distinct().Count();"
    },
    {
        "id": "f33b50e6a450f5a9d73e284a25bed37ef330a5aceb783317c172d7744776a7ee",
        "linq": "context.States\n   .Where(s => s.Area == context.States.Select(s => s.Area).Max())\n   .Select(s => new { s.Capital })\n   .FirstOrDefault();"
    },
    {
        "id": "28eca9fa2b90cd33bad8d76d2f0bd82be41b84e160ff1de46aca2c456667d443",
        "linq": "context.Cities.Count(c => c.StateName == \"texas\");"
    },
    {
        "id": "4881fe691f386e1b357736ae939589a5873972b0d4efe754f4de5935b990bc47",
        "linq": "context.States.Select(s => s.Area).ToList();"
    },
    {
        "id": "df2d496b5599113c2d24d2ae6446f24b4e13f4f1f2f00ae0c142a2de4a4e5008",
        "linq": "context.States.Where(s => s.Rivers.Any(r => r.Traverse == \"Shortest\")).Count();"
    },
    {
        "id": "aa4c61132b1d059559d96ad662b8c3f0959d299e222d7dc4e36b6b8bdcb37d5b",
        "linq": "context.Cities.Where(c => c.StateName == context.States.OrderBy(s => s.Area).First().StateName).Select(c => new { c.CityName }).ToList();"
    },
    {
        "id": "6fd2dc8598e366ef3e7a5aec502845d12d3320a090fb5a0049d3c5b8b22364cc",
        "linq": "context.States.OrderBy(s => s.Area).First().Area\n\n\n<|end_of_text|>"
    },
    {
        "id": "ebf4df3ef2c59eec6851a10e6a2fbcd8ff3a73fdc576110680a3229c78144590",
        "linq": "context.State.Where(s => s.Population == context.State.Min(s => s.Population)).Select(s => s.Density).FirstOrDefault();"
    },
    {
        "id": "2cd3983ec9873afcba635ae8fb9b110042c104a1c4d9e2c9835fdf39560b6b4a",
        "linq": "context.States.Where(s => s.Capital == s.Highlow.HighestPoint).Select(s => s.StateName).ToList();"
    },
    {
        "id": "8e9509c094d2c8c2069c872b9e5b42a1c5eab1b56c570cdc545b0ddf28217207",
        "linq": "context.States.Where(s => s.Capital == \"capital\" && s.Population == 1).Select(s => s.Population).First();"
    },
    {
        "id": "6bd2996fc273b3d013a89cff16aa60550cb178fe9f95e0b3eaf08e1af7bc7f43",
        "linq": "context.State.Where(s => s.Capital == \"Largest State\").Select(s => s.Population).FirstOrDefault();"
    },
    {
        "id": "d4dd017d69f0295e68d4652d4d01f225b48fbd45d2c2da392f261ec01128712b",
        "linq": "context.State.Where(s => s.Area == context.State.Select(s => s.Area).Max()).Select(s => s.LowestPoint).FirstOrDefault();"
    },
    {
        "id": "c6b35dfb2475b848b362d2d51f9cc794d609f68d47c62c115c014eb1cd78b66e",
        "linq": "context.States\n   .OrderByDescending(s => s.Area)\n   .First()\n   .Area;"
    },
    {
        "id": "19a889e453ddce163d50e709cd9e771dc7c5d20991e4f7ba87f601f0a3d1640e",
        "linq": "context.States.Where(s =>!s.Cities.Any(c => c.Population > 500000)).Select(s => s.Capital).ToList();"
    },
    {
        "id": "e4ef4f1d6798054b7e9d45e629763e20e013bfdb5fc2376e5f97322426d8bedf",
        "linq": "context.Cities.Where(c => c.StateName == \"usa\").Select(c => c.CityName).ToList();"
    },
    {
        "id": "319a16aea1c3df24e8a8f2fd52a7e86b6c740d3552fa3330c10bcdc976410657",
        "linq": "var result = context.States.Where(s => s.Area == context.States.Max(s2 => s2.Area)).Select(s => new { s.HighestElevation, s.LowestPoint, s.HighestPoint, s.LowestElevation }).First();"
    },
    {
        "id": "1703666520a4bb0d97e96952a6b51e782243c47bd47b496f8860865e81c61635",
        "linq": "context.States.Where(s => s.StateName == \"Massachusetts\").Select(s => new { s.StateName }).ToList();"
    },
    {
        "id": "3b7cd5b1025f51da91a55759ad6f95347501db109bb41440616eba8ecd3c82f2",
        "linq": "context.States.OrderByDescending(s => s.Population).Where(s => s.Cities.Any(c => c.Population > 500000)).Select(s => new { s.StateName, s.Population }).First();"
    },
    {
        "id": "eeba34f37f2d635f8e04aac642bf015cbf263676e8db8f62336172b101ed454d",
        "linq": "context.Rivers.Where(r => r.CountryName == \"US\").Select(r => new { r.RiverName, r.Length, r.Traverse }).ToList();"
    },
    {
        "id": "9d8561d3ec8157b7796ef90e4c60894d8eb11dfc83377036d2eba6fdab77566f",
        "linq": "var result = context.Cities.Where(c => c.CityName == \"austin\").Count();"
    },
    {
        "id": "78e7e259f42f2f29a30d35a4df886c994eb2742c7e3a9b1811cabab96ce105e5",
        "linq": "context.Rivers.Where(r => r.CountryName == \"US\" && r.RiverName == \"Colorado\" && r.Traverse == \"Texas\").Select(r => r.Length).First();"
    },
    {
        "id": "c5b784b178f8fda8c3d1fbfe00b76347961b5037256d20fd30d185e4c9530b75",
        "linq": "context.States.Where(s => s.Capital == \"austin\").Select(s => s.Density).FirstOrDefault();"
    },
    {
        "id": "82148714b6bc2e9484266a4443a2b2412629eebceffec21b407b9b2e34ebbf08",
        "linq": "var query = context.Rivers\n   .Where(r => r.CountryName == \"USA\" && r.Length < 100)\n   .Select(r => new\n    {\n        r.RiverName,\n        r.Length,\n        r.Traverse\n    })\n   .OrderByDescending(r => r.Length)\n   .ThenBy(r => r.RiverName)\n   .First();"
    },
    {
        "id": "959a3c099eb048b988b51aae826ac75b6f05a906c56df31e7c4e68e61acb4d64",
        "linq": "var context = new GeoContext();"
    },
    {
        "id": "9151c739beee631ab8ba89a3d2d0ceda5152a070a22ffe8558539d467be1b9a2",
        "linq": "context.States.Average(s => s.Population).ToString();"
    },
    {
        "id": "eabbdc3736148b54c362c943ea4d33a3eec8a3366faa9fd52d5411b41366fc51",
        "linq": "context.Rivers.Where(r => r.StateName == context.States.Max(s => s.Area)).Select(r => r.RiverName).ToList();"
    },
    {
        "id": "47858f4f3d004a001a1f57d194310c34bde5e952d75577668bebf31502bc7e49",
        "linq": "context.States.Where(s => s.Rivers.Any(r => r.Traverse == \"Virginia\"))\n               .Select(s => new { s.Cities, s.Rivers })\n               .ToList();"
    },
    {
        "id": "c6856382120c305c08efcffa3e782505b8561bb801f723e15e5d3063e86b70ff",
        "linq": "var largestCityInMontana = context.States.Where(s => s.Borders.Any(b => b.StateName == \"Montana\"))\n   .Select(s => new\n    {\n        StateName = s.StateName,\n        LargestCity = s.Cities\n           .OrderByDescending(c => c.Population)\n           .First()\n           .CityName\n    })\n   .FirstOrDefault();"
    },
    {
        "id": "b1abe61dde5fa65454e80d91a1b83e02f02eceb566ac5e7d1d69386b3c9bb260",
        "linq": "context.States\n   .Include(s => s.Highlow)\n   .Where(s => s.Highlow.LowestPoint == context.Highlows\n       .Select(h => h.LowestPoint)\n       .OrderBy(h => h)\n       .First())\n   .Select(s => new\n    {\n        s.Capital\n    })\n   .First();"
    },
    {
        "id": "08bc39cdc70fe3b284aa1bed280fd2c031fc59eb708113ce2ff4bcb41d6e2863",
        "linq": "context.Cities\n   .Where(c => c.StateName == \"american\")\n   .Where(c => c.Rivers.Any(r => r.CountryName == \"usa\"))\n   .OrderByDescending(c => c.Population)\n   .Select(c => new { c.CityName, c.Population })\n   .FirstOrDefault();"
    },
    {
        "id": "e0079128a8e18f32e63c1ec0c615183f7316efa056b2b44806d4e9f7850c6b5d",
        "linq": "context.States.Where(s => s.Population == context.States.Select(s => s.Population).Max()).SelectMany(s => s.Rivers).Count();"
    },
    {
        "id": "e8afd13a08e59c7bd6e0ca2883a26fda4636889966029be8b692473782825a5f",
        "linq": "context.State.Where(s => s.Mountains.Max(m => m.MountainAltitude) == s.Mountains.Max(m => m.MountainAltitude)).Select(s => s.Capital).FirstOrDefault();"
    },
    {
        "id": "e23d8f7cb39f873969e007e0d5b0ff80357787a962d7811d928ab1a3e5b8422f",
        "linq": "var query = context.Highlows\n   .Where(h => h.LowestElevation == context.States\n       .OrderByDescending(s => s.Area)\n       .Select(s => s.LowestElevation)\n       .First())\n   .OrderByDescending(h => h.HighestElevation)\n   .Select(h => h.HighestPoint)\n   .First();"
    },
    {
        "id": "8bbbe5ba845e1e6947b0c22bac89843685fa663e7550b416d2688eee90c4b770",
        "linq": "context.State.Where(s => s.Mountains.Any(m => m.MountainAltitude == s.Mountains.Max(m => m.MountainAltitude))).Select(s => new { s.Rivers.Count() }).FirstOrDefault();"
    },
    {
        "id": "3512ce351fb779bc9edf6f9649ce4a32603d37348b7558583cc1a74dd6f8202b",
        "linq": "context.Highlows.Where(h => h.HighestPoint == context.Mountains.Max(m => m.MountainAltitude) && h.StateName == context.States.Max(s => s.Area)).Select(h => h.LowestElevation).FirstOrDefault();"
    },
    {
        "id": "048ef28cba2db839e04196a6b22bae7e75e6cd3f09fcd30b5dd904501897ed03",
        "linq": "var query = context.Rivers\n                   .Where(r => r.StateName == \"highest point\")\n                   .OrderByDescending(r => r.Length)\n                   .Select(r => new { r.RiverName, r.Length });"
    },
    {
        "id": "6c57046010c884e4aefaa246b480f8a48b719f6ae2eb85c8b185a03ba6d59f40",
        "linq": "context.Clubs.Where(c => context.MemberOfClubs.Any(mc => mc.Position == \"member\" && mc.Stu.CityCode == \"HOU\")).Select(c => c.ClubName).ToList();"
    },
    {
        "id": "d5d3ec306be503feff48fbd82c263c541c60e421de6afdaabdb7832f7ce3db8a",
        "linq": "context.Student\n   .Where(s => s.Fname == \"Eric\" && s.Lname == \"Tai\")\n   .Select(s => new\n    {\n        Count = context.MemberOfClubs\n           .Where(m => m.StuId == s.StuId)\n           .Count()\n    })\n   .FirstOrDefault();"
    },
    {
        "id": "263bb094416fda40351e3ab91d2c0595b81890f00afeec398b4e5bab0fe9ac2c",
        "linq": "context.Clubs.Where(c => c.Members.Any(m => m.Name == \"Davis Steven\")).Select(c => new { c.ClubName }).ToList();"
    },
    {
        "id": "5bf11c4070a095f7ab738a06fca69ec266971c3043a106673264ede2810698b0",
        "linq": "var query = context.Clubs\n   .Include(c => c.MemberOfClubs)\n   .Where(c => c.MemberOfClubs.Any(m => m.Advisor == \"1121\"));"
    },
    {
        "id": "1aace32925bf236f7f27619fe9ae1762e237b135f13eb171b3398715e3f431e5",
        "linq": "var query = context.Clubs.Where(c => c.ClubName == \"Bootup Baltimore\")\n   .SelectMany(c => c.MemberOfClubs)\n   .Select(m => new { m.Student.Fname, m.Student.Lname, m.Student.Age })\n   .Average(m => m.Age);"
    },
    {
        "id": "78fc542ec970f862fa91711dcb31e3b443a196f52f5b16bc14cced3a3859c5b2",
        "linq": "context.Student.Average(s => s.Age).Where(m => m.Position == \"Hopkins Student Enterprises\").Select(e => new { e.Name, e.Age }).ToList();"
    },
    {
        "id": "3b596dab54cf29bccbbf2a80973651d588e600757593dcc7a0ee910a8447ae00",
        "linq": "context.MemberOfClubs.Where(m => m.Club.ClubName == \"Tennis Club\").Select(m => m.Student.Age).Average();"
    },
    {
        "id": "c61f65167e223a3eda5630b865eea519885ad20264c12a61222623b35c01de9c",
        "linq": "context.Restaurants.Where(r => r.FoodType == \"French\" && r.CityName == \"Yosemite\" || r.CityName == \"Mono Lake\").Select(r => new { r.Name, r.Rating }).ToList();"
    },
    {
        "id": "6553372e6d3aa7ad863ad7a58cb61131e8e80fd652cc406e4999d991f5cc13e8",
        "linq": "var context = new RestaurantsContext();"
    },
    {
        "id": "e7a8b6a49760713c7d8c4a772d85148a63f5ffe9d961eb57d0f67d76fb3f7685",
        "linq": "context.Restaurants.Where(r => r.FoodType == \"jamerican\" && r.CityName == \"San Francisco\").Select(r => new { r.Name, r.Rating }).ToList();"
    },
    {
        "id": "e289c98500139e1b9508dd3ac878e46600fb77872a4a68d99f7b8575ce3c3ed4",
        "linq": "context.Restaurants.Where(r => r.CityName == \"bay area\").Select(r => new { r.Name, r.Rating }).ToList();"
    },
    {
        "id": "582f1ba751659189c62b4d095b980042e7dc394d51b73910a91327f136fec1a4",
        "linq": "var context = new RestaurantsContext();"
    },
    {
        "id": "e85fe8c16bcc0dc1aafccca0fa969272c5055b1d98656ab2c885dbe684e0df6e",
        "linq": "context.NewsReports.GroupBy(n => n.JournalistId).Where(g => g.Count() > 1).Select(g => new { g.Key, g.Select(n => n.Journalist.Name).ToList() }).ToList();"
    },
    {
        "id": "08f31b0ebb7cc9d968d1aa95db757a0f507b86b12f6f1ec144781e4b54fd5e26",
        "linq": "context.Journalists.Where(j =>!context.NewsReports.Any(nr => nr.JournalistId == j.JournalistId)).Select(j => j.Name).ToList();"
    },
    {
        "id": "4dd923194fa6e518574df91310cc78e16a597b7808c970459498cb569b8f7507",
        "linq": "context.Events.Average(e => e.EventAttendance).Max(e => e.EventAttendance).ToList();"
    },
    {
        "id": "0b87c20c9f92e0260f378e36bc6befb6a7fb7ed1a0979b6a6cf08af4628d20e5",
        "linq": "context.Events.Where(e => e.EventAttendance > 1000).Select(e => new { e.Venue, e.Name }).OrderByDescending(e => e.EventAttendance).Take(2).ToList();"
    },
    {
        "id": "52dc53650f9e8c413e09b7e3f20abbb719c3035974e281c10c091542fad2ef8b",
        "linq": "context.Programs.Where(p => p.Origin!= \"Beijing\").Select(p => p.Name).ToList();"
    },
    {
        "id": "ddd59e3705d8240770c3c7032fee1c73847bcc70a429dd32fc0e6670a4636a6c",
        "linq": "context.Channels.Where(c => c.Owner == \"CCTV\" || c.Owner == \"HBS\").Select(c => c.Name).ToList();"
    },
    {
        "id": "7c30b092057642281b16d728e71e6e4fe4d323f6543562c4d8f2b70dd080d6f8",
        "linq": "context.Channels.Select(c => new { c.Owner, c.RatingInPercent }).GroupBy(c => c.Owner).Select(g => new { Owner = g.Key, RatingRatio = g.Sum(c => c.RatingInPercent) }).ToList();"
    },
    {
        "id": "0eaf9ee9600095eae2996f04364abf9edd62eb540c8824d96e8cb976aa732987",
        "linq": "context.Program.Where(p => p.BroadcastShares.Count() == context.BroadcastShares.Max(bs => bs.ShareInPercent)).Select(p => p.Name).FirstOrDefault();"
    },
    {
        "id": "836d4e431821c35d8f96d22ea886139bb2b5638bdaf61cc1dfe6e9d29094027c",
        "linq": "context.People.Where(p =>!context.Perpetrators.Any(p => p.PeopleId == p.PeopleId)).Select(p => p.Name).ToList();"
    },
    {
        "id": "c39fdba903229d15466e90e1525edd1efdf9b43b74b8d0caadd33fda54a2a54c",
        "linq": "context.People.Where(p => p.Perpetrators.Any(pe => pe.Injured > 50) && p.Perpetrators.Any(pe => pe.Injured < 20)).Select(p => new { p.Country }).Distinct().ToList();"
    },
    {
        "id": "3f2ca213396d263714f4b5bb79adb4679d323d6145285d8ca47b0799c1815aad",
        "linq": "context.People.Select(p => new { p.Location }).Distinct().Count();"
    },
    {
        "id": "1a636b1853501e0cc715caaf857cf3d47aef4b6bc7e416ec0f15663e0f7c0aee",
        "linq": "context.People\n   .Where(p => p.Perpetrators.Any(pe => pe.Killed == 0 && pe.Injured == 0))\n   .OrderByDescending(p => p.Height)\n   .Select(p => p.Date)\n   .FirstOrDefault();"
    },
    {
        "id": "b5c3548d0c52fd1046debc298147f25ff507b11198e916857cd0223e11afaff1",
        "linq": "context.Perpetrators.OrderByDescending(p => p.Year).First().Year\n\n\n### Task:\nNow, using the provided context and models, generate the appropriate C# code for the following query.\n\n\n**Context.cs:**\nusing System;"
    },
    {
        "id": "f0e36835362a506f377a04ab63ee34df9db71b41c4141d67567f56f59f59f59e",
        "linq": "context.JournalCommittees.GroupBy(j => j.EditorId)\n   .Select(g => new { EditorId = g.Key, Name = g.Select(j => j.Editor.Name).First(), NumberOfJournalCommittees = g.Count() })\n   .ToList();"
    },
    {
        "id": "fe3ec84f4f745092d34ecb134eb2e878d677c2490f8e7e277ae52624efbf1eb3",
        "linq": "var editors = context.JournalCommittees\n   .GroupBy(j => j.EditorId)\n   .Where(g => g.Count() >= 2)\n   .Select(g => g.Key)\n   .Select(e => context.Editors\n       .Where(ed => ed.EditorId == e)\n       .Select(ed => new { ed.Name })\n       .ToList());"
    },
    {
        "id": "2662724da4012c9b2133b3cde99c14a286617c15839a3f41f25e277d047a21df",
        "linq": "context.Editors.Where(e =>!context.JournalCommittees.Any(jc => jc.EditorId == e.EditorId)).Select(e => e.Name).ToList();"
    },
    {
        "id": "a1c19ba96d08b7191a81d1fb494998139a3baca4f6942970cbe82d97c0094e69",
        "linq": "var result = context.JournalCommittees\n   .Where(jc => jc.WorkType == \"Photo\")\n   .Select(jc => new\n    {\n        AverageSales = context.Journals\n           .Where(j => jc.JournalId == j.JournalId)\n           .Average(j => j.Sales)\n    })\n   .ToList();"
    },
    {
        "id": "f99a4d7f7e508a3fd9027df1cc8e5e496fb511032cc6195f5a688f2ab4d8066b",
        "linq": "context.Customers\n   .Include(c => c.Orders)\n   .Where(c => c.Orders.Count() == context.Orders.Max(o => o.CustomerId))\n   .Select(c => new { c.CustomerName })\n   .FirstOrDefault();"
    },
    {
        "id": "f2f816a15ca5122827f4c3e38ea5e7660767bf4e1d94892680c2a9b6145393c1",
        "linq": "context.Customers.Where(c => c.Orders.Count() >= 2).Select(c => new { c.CustomerName, OrdersCount = c.Orders.Count() }).ToList();"
    },
    {
        "id": "72eb1928aeb4cb8470bca01728dab4544690753e0d786cd0cd31b308b5588e2d",
        "linq": "context.Customers.Where(c => c.Orders.Count <= 2).Select(c => c.CustomerName).ToList();"
    },
    {
        "id": "d540473d73afdf4bb2c08df5424ddcf4e0d65b4a9d44675a6b9d68c417f57a07",
        "linq": "context.Customers.Where(c => c.Orders.Any(o => o.OrderItems.Any(oi => oi.Product.ProductName == \"food\"))).Select(c => c.CustomerName).ToList();"
    },
    {
        "id": "396441f836d5cbed65dd5a39713b698d60546358dd91b678f6b55398f4685896",
        "linq": "context.Customers\n   .Include(c => c.Orders)\n   .Include(c => c.Orders.Select(o => o.OrderItems))\n   .Where(c => c.Orders.Any(o => o.OrderItems.Any(oi => oi.ProductName == \"food\" && oi.OrderItemStatus == \"Cancel\")))\n   .Select(c => new { c.CustomerName })\n   .ToList();"
    },
    {
        "id": "a1b32109efaead55354b3edc7ef42414435f7b6a857fbfdd498cdbe782d4b489",
        "linq": "context.Storms.Where(s => s.NumberDeaths < 10).Select(s => s.Name).ToList();"
    },
    {
        "id": "36c51af596f7a74bb4c18d8ce44084a2775522b9b9f6f5c95ecd305d9281f366",
        "linq": "context.Storms.Where(s => s.Name.Contains(\"Denmark\")).Select(s => new { s.Name }).ToList();"
    },
    {
        "id": "7f0e59ec4ab93b5fa8e405c43e186d71e84cf75dcb41b0925f2496a15f836b91",
        "linq": "context.Regions.Where(r => r.AffectedRegions.Count() >= 2).Select(r => new { r.RegionName }).ToList();"
    },
    {
        "id": "34fbc5dcf33b45e5653d8987efa55bc3e11d6f707fe7487c32a76c6d172220ff",
        "linq": "context.Storms.Where(s => s.NumberDeaths == context.Storms.Max(st => st.NumberDeaths)).Select(s => new { s.Name, s.AffectedRegions.Select(ar => ar.Region.Name) }).ToList();"
    },
    {
        "id": "bd478c5cf9b72d30f2fa69d8c3c9a01bc5f0b95d40f53565ed46bbbf720f2d12",
        "linq": "context.Storms.Where(s => s.AffectedRegions.Any(ar => ar.Region.RegionCode == \"Afghanistan\" || ar.Region.RegionCode == \"Albania\")).Select(s => s.Name).ToList();"
    },
    {
        "id": "c465cbf0d850a68dad116e61a62f259976b418cff7032322ae32266513eb30cc",
        "linq": "context.Manufacturers.Select(m => new\n{\n    Manufacturer = m.Name,\n    NumOfFurnitureTypes = context.FurnitureManufactes.Count(f => f.ManufacturerId == m.ManufacturerId),\n}).ToList();"
    },
    {
        "id": "b34fa678959f95d337500f848847899c6cb6569b6bc628943055783d509b40c6",
        "linq": "var result = context.FurnitureManufactes\n   .Select(fm => new\n    {\n        Name = fm.Furniture.Name,\n        Price = fm.PriceInDollar,\n    })\n   .ToList();"
    },
    {
        "id": "96f6d286632cb9fc0e372cfa305556c944080b275a6fc8b0634228a99a200a23",
        "linq": "context.FurnitureManufactes\n               .Where(f =>!context.FurnitureManufactes.Any(fm => fm.FurnitureId == f.FurnitureId))\n               .Select(f => new { f.Furniture.Name, f.Furniture.MarketRate })\n               .ToList();"
    },
    {
        "id": "3cbf8983a1358d0c1d85ac392367d68c2d8cd4be89340d1448567fbc4f9373ae",
        "linq": "context.Manufacturer.Where(m => m.FurnitureManufactes.Any(f => f.Furniture.NumOfComponent < 6) && m.FurnitureManufactes.Any(f => f.Furniture.NumOfComponent > 10)).Select(m => m.Name).ToList();"
    },
    {
        "id": "c974d652f686362c17ca527ae4f471ffc6d88e1413275c81f77b740210813c98",
        "linq": "context.Parties.Select(p => new { p.Party1 }).Distinct().ToList();"
    },
    {
        "id": "89c2683dfff029a591121f31b9ee7f13bf2c40abb65bd5aaaad9969583dbd2bf",
        "linq": "var query = context.Elections\n   .GroupBy(e => e.PartyNavigation)\n   .OrderByDescending(g => g.Count())\n   .Select(g => new { Party = g.Key, Delegates = g.Count() })\n   .FirstOrDefault();"
    },
    {
        "id": "1f7f00451ea2926f9ebad8a5185308061812b7e3447ed10f64cb659883516f15",
        "linq": "context.Parties.GroupBy(p => p.Governor).Select(g => new { Governor = g.Key, Count = g.Count() }).OrderByDescending(g => g.Count).First().Governor\n\n\n\n### Task:\nNow, using the provided context and models, generate the appropriate C# code for the following query.\n\n\n**Context.cs:**\nusing System;"
    },
    {
        "id": "fa80aa18a87c08d7040da0e1d3bc3813f6fe4a63bfe65420f38b350bbdb34b33",
        "linq": "context.Elections\n   .GroupBy(e => e.Comptroller)\n   .Select(g => new { Comptroller = g.Key, Count = g.Count() })\n   .OrderByDescending(g => g.Count)\n   .ThenBy(g => g.Comptroller)\n   .Take(5)\n   .ToList();"
    },
    {
        "id": "58e1b75eda5e8417e9b043e8803960753dac61aad0e685a14186022d38443013",
        "linq": "context.Election.Where(e => e.Delegate == null).Select(e => new { e.Party }).Distinct().ToList();"
    },
    {
        "id": "ca0548a21fb7f85e39cfb0c20b3955a8fca631f09abc912daaad0cf26e0c024b",
        "linq": "context.Party.Where(p => p.Committee == \"Appropriations\").Select(p => new { p.Name }).ToList();"
    },
    {
        "id": "70eff40bbdc549d9822734bd7618de8b8facdbe20b93b1a9d0c21ce8d1a0e7b8",
        "linq": "context.Elections.Where(e => e.CountiesRepresented == \"Both democratic party and liberal party\").Select(e => new { e.CountiesRepresented, e.District, e.Delegate, e.Party, e.FirstElected, e.Committee }).ToList();"
    },
    {
        "id": "8849fd6a4301c2bd94712f27b841c6b39c817d46564f9e56ef0613a1c48f6b2c",
        "linq": "context.Stations.Join(context.Trips, s => s.Id, t => t.StartStationId, (s, t) => new { s.Long, t.Duration }).GroupBy(s => s.Long).Select(g => new { g.Key, AverageDuration = g.Average(s => s.Duration) }).ToList();"
    },
    {
        "id": "c059842821c07576d9aaa84e0255a35feacd2881fa9686f9bedcb43f7e1b8ad3",
        "linq": "context.Stations.Select(s => new { s.Lat, s.DocksAvailable }).ToList();"
    },
    {
        "id": "8bbb475ee3e8d21970454b3efd748ec939b9b5e45b19373f0e44fd61ac3adbf6",
        "linq": "context.Stations.Where(s => context.Trips.Any(t => t.StartStationName == s.Name && t.Duration < 100)).Select(s => new { s.Name }).Distinct().ToList();"
    },
    {
        "id": "b7b46a57339e6d7a370a0a312a7acfc22c902bd2848e414bf30d9835cb5f7fe2",
        "linq": "context.Trips.Where(t => t.Duration >= context.Weathers.Average(w => w.MaxTemperatureF)).Select(t => t.Id).ToList();"
    },
    {
        "id": "11299f6d4fc416b1d6215da33780ad2f9a86c882c1148b913c32f615a6102663",
        "linq": "context.Stations.Where(s => s.BikesAvailable > 12).Select(s => new { s.Id, s.Name }).ToList();"
    },
    {
        "id": "d62d8e4ea22f37da31de947b4a7f36795fa69e4a2bc9d64749090f337330129a",
        "linq": "context.Stations.Where(s => s.City == \"Palo Alto\" && s.Id!= context.Trips.Where(t => t.EndStationName == s.Name).Select(t => t.EndStationId).Distinct().Count()).Select(s => s.Name).ToList();"
    },
    {
        "id": "7d95d2b5c0f99f5d8d19a1eaf879062c94df8f8c8e27fe4387f8955e72523a25",
        "linq": "context.Trips.Where(t => t.StartStationName == \"Mountain View\" && t.EndStationName == \"Palo Alto\").Count();"
    },
    {
        "id": "6d27a779ef8af65d2d75589c58378db4f22b639d4d0ff5fd3dd92727e4a818a2",
        "linq": "context.Trips.Average(t => t.StartLat).Select(t => new { t.StartLat, t.StartLong }).ToList();"
    },
    {
        "id": "b50ca2c9b70ffebd4956a79b9ee1afc70438d3a7f0fd9fffcc4ab4c2e7426d34",
        "linq": "context.Wines.Where(w => w.Winery == \"Brander\" && w.Year < context.Wines.Min(w => w.Year)).Select(w => w.Name).ToList();"
    },
    {
        "id": "0327284b61d111a04904374454d02110c4c234a76da1aab4cd1aedc9a4daf31c",
        "linq": "context.Wines.Where(w => w.Year < 2006).Select(w => w.Name).ToList();"
    },
    {
        "id": "ebf75b837efbbb970548c9053d65f291d2e30fa34ebbefe37ef4a273ff1ab0f2",
        "linq": "var result = context.Wines\n   .GroupBy(w => new { w.Winery, w.Grape })\n   .Where(g => g.Key.Grape == \"white\")\n   .OrderByDescending(g => g.Count())\n   .Take(3)\n   .Select(g => new { g.Key.Winery, g.Count() })\n   .ToList();"
    },
    {
        "id": "5efdb7f2930b439b39a2490f572d72210e289feda07eb26ab309649353b10c29",
        "linq": "context.Wines.Where(w => w.Price > 100).OrderBy(w => w.Year).Select(w => new { w.Grape, w.Winery, w.Year }).ToList();"
    },
    {
        "id": "3378ae486017c0abaca91efa686f0bcd87dd6ec961e1695fab9eb1d62c07bd1a",
        "linq": "context.Wines.Include(w => w.GrapeNavigation).Include(w => w.AppelationNavigation).Where(w => w.Score > 93).Select(w => new { w.Grape, w.AppelationNavigation.Appelation, w.Name }).OrderByDescending(w => w.Name).ToList();"
    },
    {
        "id": "f811633da433a2bb5af5656cda380ec421afcf450f38d9e27c837e59ffbb87fa",
        "linq": "context.Wines.Where(w => w.Year > 2008 && w.Appelation!= \"Central Coast\").Select(w => w.Appelation).Distinct().ToList();"
    },
    {
        "id": "e71b75be7918a8bfbbd969be94a1decd1bd2c66bcde41ed234cae9920be73b43",
        "linq": "context.Wines.Where(w => w.State!= \"Sonoma\").Average(w => w.Price).ToList();"
    },
    {
        "id": "f558f0fbb76ca996ff7980dd08d135c1d29d6de6da1040fb823dcd2c08f7bf17",
        "linq": "context.Wines\n   .GroupBy(w => w.County)\n   .Select(g => new { g.Key, Count = g.Sum(w => w.Score) })\n   .OrderByDescending(g => g.Count)\n   .Where(g => g.Count > 90)\n   .Select(g => new { g.Key, Count = g.Count })\n   .ToList();"
    },
    {
        "id": "a5cb47ff8b63bfd2be04d7572a0413a3ff77ae5519e76951e3d2b59ca1e77fff",
        "linq": "context.CustomerAddresses\n   .Select(d => d.AddressTypeCode)\n   .Distinct()\n   .ToList();"
    },
    {
        "id": "89130ecfd759f72dcdd620ffb935c5e3e50befab6cc0330e736426c2bf3c8156",
        "linq": "context.CustomerOrders\n   .Where(o => o.OrderStatusCode == \"Cancelled\" || o.OrderStatusCode == \"Paid\")\n   .Select(o => new { o.OrderShippingCharges, o.CustomerId })\n   .ToList();"
    },
    {
        "id": "04a6f528ee5aee1f5418a5461cadc702416636c2cd645da1325bd01d55fada39",
        "linq": "context.Customers.Where(c => c.CustomerOrders.Any(o => o.OrderShippingCharges == \"FedEx\" && o.OrderStatusCode == \"Paid\")).Select(c => c.CustomerName).ToList();"
    },
    {
        "id": "3ef2656789927bf7ee4e8e0814673060bd74feab00994dae6e04a36f57052d34",
        "linq": "context.Procedures.Where(p => p.TrainedIns.Any(t => t.Physician == \"John Wen\")).Select(p => p.Name).ToList();"
    },
    {
        "id": "3341bc5962be922357f41c4405f4c282699c5f43b3fe622a2be423ae243e3866",
        "linq": "context.Procedures.Where(p => p.Cost > 1000 || p.TrainedIns.Any(t => t.Physician == \"John Wen\")).ToList();"
    },
    {
        "id": "6ecf8bcc2a5f164dd303f63dba0b18e01c6337c53160848f875eb85c5a300ab2",
        "linq": "context.Procedures.Where(p => p.Cost > 1000 &&!context.TrainedIns.Any(t => t.Physician == 1 && t.Treatment == p)).Select(p => new { p.Name }).ToList();"
    },
    {
        "id": "ab5be97444b8277b42ec887b1b7a82f2b8030dd2f9f4a79dd7239eb0c313e78d",
        "linq": "context.Procedures.Where(p => p.Cost < 5000 && p.TrainedIns.Any(t => t.Physician == \"John Wen\")).Select(p => p.Name).ToList();"
    },
    {
        "id": "6a262e77ae220a438a3a5fbbda31adc3279c2a3c86b4d6a4e9d57f6a0654d505",
        "linq": "context.Physicians.Where(p => p.AffiliatedWiths.Any(a => a.Department == 1 && a.Department == 2)).Select(p => new { p.Name }).ToList();"
    },
    {
        "id": "792552fb730d53fa4957e218ac8ec6bb5d02913271ba9b19e6dc4de8202b51d7",
        "linq": "context.Physicians.Where(p => p.AffiliatedWiths.Any(a => a.Department == \"Surgery\" || a.Department == \"Psychiatry\")).Select(p => p.Name).ToList();"
    },
    {
        "id": "03e90e42ee94c38d2d3d76571c09d11040d649da9f0a02ab19016b0385cb5b83",
        "linq": "context.Patients.Where(p =>!context.Prescribes.Any(prescribe => prescribe.Medication == \"Procrastin-X\" && prescribe.Patient == p.Ssn)).Select(p => new { p.Name }).ToList();"
    },
    {
        "id": "ff18b5d7776c8b9d136d76ea72193515d7a4e66611ec8cde1a7f4290c127fab5",
        "linq": "context.Employees.Count(e => e.Name == \"Procrastin-X\" &&!e.Age > 50);"
    },
    {
        "id": "fef4f359f7c6798aa58803b7bd7ef0fde57de4d99e5a1221ff883d474413c7b2",
        "linq": "context.Appointments.Count();"
    },
    {
        "id": "4a3597f4e3f717005a8fc76663fe1ff7a0f0f13acb67e1511d4997f8e670a716",
        "linq": "context.Nurses.Select(n => n.Name).Where(n => n.OnCall).Select(n => new { n.Name }).ToList();"
    },
    {
        "id": "ea644d6da11c32f8ba57f68ad504e6afaf22bf5b901f768abcf5ac0454d6bceb",
        "linq": "context.Players.Where(p => p.PlayerCoaches.Count == 0).Select(p => p.PlayerName).ToList();"
    },
    {
        "id": "8706f7b9d2afa361bf9890cf819c66ab6c1ab9c7f5edb9cb0fb9d890eb60b33d",
        "linq": "context.Clubs.Include(c => c.Players).Select(c => new { c.Residence }).Where(r => r.Players.Any(p => p.Gender == \"M\") && r.Players.Any(p => p.Gender == \"F\")).ToList();"
    },
    {
        "id": "31af625d9a9563e22a3b13359b07405c808a903b26b5ee3c84cc650079ce9ac9",
        "linq": "context.Clubs.Include(c => c.Coaches).Select(c => new { c.ClubId, c.ClubName, c.Coaches.Count() }).ToList();"
    },
    {
        "id": "617e15a7661c7a4e9de4c7a58b8dfb6494bc13f830b3694ee231b710ead3ba39",
        "linq": "context.Clubs\n   .Where(c => c.Coaches.Count() == context.Coaches.Max(c => c.Coaches.Count()))\n   .Select(c => new { c.Gold })\n   .Sum();"
    },
    {
        "id": "cd2ea5980256f17a5b067042ba518912a9fdb0a648fa5c2d86f625cd74a5ef9b",
        "linq": "context.Papers.Where(p => p.Year >= 2006 && p.Title.Contains(\"juicing for cancer patients\")).Select(p => new { p.Title, p.Year }).ToList();"
    },
    {
        "id": "10056fede11ae015b3f81313860304a8d1ab10294f4d6d1c575c62a19a42886b",
        "linq": "var papers = context.Papers.Where(p => p.VenueId == 4 && p.Year == 2014 && p.PaperDatasets.Any(pd => pd.DatasetId == 5)).ToList();"
    },
    {
        "id": "76bac25d96ce7de1d7a68886aa56a27f1fae0ab892416dc6d8c03a77672df08f",
        "linq": "context.Venues.Where(v => v.VenueName.Contains(\"Neuroscience\")).Select(v => new { v.VenueName }).ToList();"
    },
    {
        "id": "1388290c053b121d2026a762e598f4daf65f62a57a0882b7fd45f9421a6c024c",
        "linq": "context.Venues.Where(v => v.VenueName == \"Fracture of acrylic bone cement\").Select(v => v.VenueName).ToList();"
    },
    {
        "id": "e69162abecbbdcf85cd40b733bf1ef2e2c9838f42e3e6e92577de84aef74ddd5",
        "linq": "context.Papers.Where(p => p.Title == \"A Switching Architecture For ISDN\").Select(p => p.Year).FirstOrDefault();"
    },
    {
        "id": "d4030429a9a243aa3545ee0a39585161545f851439fe472d06a9c1c17eeb01e1",
        "linq": "context.Films.Where(f => f.Studio.Contains(\"Universal\")).Select(f => new { f.Title, f.Studio }).ToList();"
    },
    {
        "id": "89f434d1fa2c52ea496452be00bf9706598bf4616177d910aacb95915974cb20",
        "linq": "context.FilmMarketEstimations.Where(e => e.Film.Director == \"Walter Hill\").Select(e => e.Film.Studio).Distinct().ToList();"
    },
    {
        "id": "d4c7a5ad30fd1e26dd4fbf9d2a0b2d76dc7c517f12139bee61e4574b6c4a0fae",
        "linq": "context.FilmMarketEstimations\n   .GroupBy(f => f.Film.Studio)\n   .Select(g => new\n    {\n        Studio = g.Key,\n        AvgGross = g.Average(f => f.GrossInDollar)\n    })\n   .Where(e => e.AvgGross > 4500000)\n   .OrderBy(e => e.AvgGross)\n   .Select(e => e.Studio)\n   .ToList();"
    },
    {
        "id": "bf6c8f06c2c048c62eebc078491e281b512cd2d8b3e84aab893ab56f9f82240d",
        "linq": "context.FilmMarketEstimations.OrderByDescending(e => e.HighEstimate).Select(e => e.Film.Title).FirstOrDefault();"
    },
    {
        "id": "b05a583f6b8dfbdcf246f8c285a1ecf0ab84d8e81d1fde3a3d3445e6540d9219",
        "linq": "context.FilmMarketEstimations.Where(x => x.MarketId == 1).Select(x => new { x.Film.Title, x.Film.Director }).ToList();"
    },
    {
        "id": "4b9b3e372396a8d16911cd0ceed3d5eab9aa2c8753f502ae72015679888bdee3",
        "linq": "context.Properties.Where(p => p.RoomCount > 1 || p.PropertyTypeCode == \"HSE\" || p.PropertyTypeCode == \"APT\").Select(p => new { p.PropertyName }).ToList();"
    },
    {
        "id": "6ad61911bd7739c6966bcaff27c85113755b9e2898e84286f02c4456ae2cb049",
        "linq": "context.ProductsInEvents\n   .GroupBy(pie => pie.ProductId)\n   .Where(group => group.Count() >= 2)\n   .Select(pie => pie.Key)\n   .Select(product => new { product.ProductId, product.ProductName })\n   .ToList();"
    },
    {
        "id": "6febd29301833a85395c66548e1b467976d31bd3752079a8e735cacdab2e339e",
        "linq": "context.Products\n   .Include(p => p.ProductsInEvents)\n   .ThenInclude(pe => pe.Event)\n   .Where(p => p.ProductsInEvents.Count > 1)\n   .OrderBy(p => p.ProductName)\n   .Select(p => new { p.ProductName })\n   .ToList();"
    },
    {
        "id": "dbdd27f51399b50f1495e08d706ac55961a47c4cedc13ed3d8de809b91a1905a",
        "linq": "context.Products.Where(p =>!context.ProductsInEvents.Any(pi => pi.ProductId == p.ProductId)).Select(p => p.ProductName).ToList();"
    },
    {
        "id": "bb698611ea1938e609deed3d1ade1ef6a164cc9bf79f60ebad77579d32c4fcd8",
        "linq": "context.Cities.Where(c =>!context.FarmCompetitions.Any(fc => fc.HostCityId == c.CityId)).Select(c => c.OfficialName).ToList();"
    },
    {
        "id": "be8aadfa21fcbb42fa784d26bb71abe93edf2f396d7584331ebec4ca02a37d91",
        "linq": "context.Cities.Where(c => c.Population > 1500 && c.Population < 500).Select(c => c.Status).ToList();"
    },
    {
        "id": "65079377b913c23138ebd9fbae118575e73783aa6ee1d36fe4cc68dde95a6b7c",
        "linq": "context.Cities.Where(c => c.Population > 1500 || c.Population < 500).Select(c => c.OfficialName).ToList();"
    },
    {
        "id": "5c944b0f676266845da06233e2817741183b475cf4dc661242b5aea66dfef233",
        "linq": "context.Cities.Where(c => c.Status!= \"Village\").Select(c => new { c.CensusRanking }).ToList();"
    },
    {
        "id": "ae72e185e0f0e07a83700e01ea047be3588d562afcf86d909edca30c379be25a",
        "linq": "context.Departments\n   .Where(d => d.Employees.Count > 1)\n   .Select(d => new { d.DepartmentId, TotalSalary = d.Employees.Sum(e => e.Salary) })\n   .ToList();"
    },
    {
        "id": "190f108aebc53abe6bc1a22eb585ede91d50a9bfd562bd4233077cfe79276d5d",
        "linq": "context.Employees.Select(e => new { e.FirstName, e.LastName, e.Department.DepartmentName, e.Department.Location.City, e.Department.Location.StateProvince }).ToList();"
    },
    {
        "id": "76541c8b226fb8ac49b0fb0df071f968b19f9bb34e1d2e9077321bf858e08495",
        "linq": "context.Employees.Where(e => e.FirstName.Contains('z')).Select(e => new { e.LastName, e.City }).ToList();"
    },
    {
        "id": "cb69f14d3e1296cff3eb601850c7a769d20bd8a9ebfe7c0ff251915b4edd1601",
        "linq": "context.Departments.Select(d => new\n{\n    DepartmentName = d.DepartmentName,\n    City = context.Locations.Where(l => l.LocationId == d.LocationId).Select(l => l.City),\n    StateProvince = context.Locations.Where(l => l.LocationId == d.LocationId).Select(l => l.StateProvince)\n}).ToList();"
    },
    {
        "id": "b0a7270107f7f461d14846184459aa8d4390e6b31a8fbb8aef4d34044d7b6bc1",
        "linq": "context.Employees\n   .Select(e => new { e.EmployeeId, e.FirstName, e.LastName, e.Department.DepartmentName, e.Job.JobTitle, e.Job.JobId, e.JobHistories.Select(jh => jh.Department.DepartmentName), e.JobHistories.Select(jh => jh.Job.JobTitle), e.JobHistories.Select(jh => jh.Job.JobId), e.JobHistories.Select(jh => jh.StartDate), e.JobHistories.Select(jh => jh.EndDate), e.JobHistories.Select(jh => jh.Location.City), e.JobHistories.Select(jh => jh.Location.StateProvince), e.JobHistories.Select(jh => jh.Location.Country.CountryId), e.JobHistories.Select(jh => jh.Location.Country.CountryName), e.JobHistories.Select(jh => jh.Location.Country.Region.RegionName), e.JobHistories.Select(jh => jh.Location.StreetAddress), e.JobHistories.Select(jh => jh.Location.PostalCode), e.JobHistories.Select(jh => jh.Location.City), e.JobHistories.Select(jh => jh.Location.StateProvince), e.JobHistories.Select(jh => jh.Location.Country.CountryId), e.JobHistories.Select(j"
    },
    {
        "id": "7f7acc6c799b80947208c8b2af3fbf742399387311a9d4ea63d22c21d7064732",
        "linq": "context.Departments.Select(d => new { d.DepartmentName, d.Employees.Count() }).ToList();"
    },
    {
        "id": "ffad4102af6d0d2d44f2dc41270974e439aeea09008a4de6dcbe37fe1f097844",
        "linq": "var employees = context.Employees\n   .Where(e => e.Department.Location.City == \"London\")\n   .Select(e => new\n    {\n        e.FirstName,\n        e.LastName,\n        e.Salary\n    })\n   .ToList();"
    },
    {
        "id": "c916a718f6bb77d2d565a5f0cfcd7c63181d143f75c74878b72941f2a52a42a1",
        "linq": "context.VotingRecords\n   .Where(r => r.StuId == 1)\n   .Select(r => new { r.StuId, r.Major, r.Age })\n   .ToList();"
    },
    {
        "id": "b1924e0bb1f93ab8df217ba8900f5293430931a9fcb5fc34e5a041f7cd9c22b0",
        "linq": "context.VotingRecords.GroupBy(r => r.ElectionCycle).Select(g => new { ElectionCycle = g.Key, Count = g.Count() }).ToList();"
    },
    {
        "id": "c6b0effacaecd141b4c54ad353fca1fb07e01dd94919d47a87a670c7721fe795",
        "linq": "context.Students.GroupBy(s => s.Major).Select(g => new { Major = g.Key, Count = g.Count() }).OrderByDescending(g => g.Count).First();"
    },
    {
        "id": "902d89aa09661f7c5b7be76aa604aef00b7f2f36cf7f7c0161aec659b6fc27ba",
        "linq": "context.Students.Where(s => s.Sex == \"F\").Select(s => s.Major).GroupBy(m => m).OrderByDescending(g => g.Count()).First().Key;"
    },
    {
        "id": "d7a148e0817fb635650ccd439b6a7562a9961ddd9461b1a6f4aab03ea2b4d73d",
        "linq": "context.Students.Select(s => s.CityCode).OrderByDescending(s => s.Count()).First();"
    },
    {
        "id": "2b59bc88fcdb065c1f7316f99bbcf1ca83c8ca943d30ecb10e4003613b4e8a7b",
        "linq": "context.Students.GroupBy(s => s.Advisor).Where(g => g.Count() > 2).Select(g => g.Key).Distinct().ToList();"
    },
    {
        "id": "3cd5fb0c99939770d42122c15c36792a78a3fe3277f58aeaf6a289372c28ae47",
        "linq": "context.CustomersPolicies.Where(cp => cp.DateOpened == DateTime.Now && cp.DateClosed == null).Select(cp => new { cp.Customer.CustomerName }).ToList();"
    },
    {
        "id": "3acafb4ffddfc0542033c8b2baad05246bc85987e58cc14a780dd3e007dd8c03",
        "linq": "context.Customers.Where(c => c.CustomerName.Contains(\"Diana\")).Select(c => c.CustomerId).ToList();"
    },
    {
        "id": "48409f3177e323da7c791174033d86755a173cad782b681b680d605bd1432b6c",
        "linq": "context.Settlements.Max(s => s.SettlementAmount),\ncontext.Settlements.Min(s => s.SettlementAmount);"
    },
    {
        "id": "e9165a728b79dd53a772a33a128438458b69434733d1633d0cdd9644fa3c38c5",
        "linq": "context.Customers.OrderBy(c => c.CustomerId).ToList();"
    },
    {
        "id": "b4e47425f43c18ccce8ac7f9a474a131b9d553a986071ceb44cf739324fb8e20",
        "linq": "context.Weddings.Count(w => w.Year == 2016);"
    },
    {
        "id": "cf47a8dc50e33338b935c863fc753d3396720f426f323ab47de87aef56d6cdc3",
        "linq": "context.Weddings\n   .Include(w => w.Church)\n   .Include(w => w.Female)\n   .Include(w => w.Male)\n   .Where(w => w.Year > 30)\n   .Select(w => new { w.Church.Name, w.Female.Name, w.Male.Name })\n   .ToList();"
    },
    {
        "id": "800f7fa810fb417833b3278116cf90bd94e892b9868eb6b6553b1853cca1d7dc",
        "linq": "context.People.Select(p => new { p.Country, p.PeopleId.Count() }).ToList();"
    },
    {
        "id": "24249afe713a2d53eacb6a13768218d1573b1a4dacfaf7240fd3a84140aacd64",
        "linq": "context.Weddings.Count(w => w.Year == 2016);"
    },
    {
        "id": "176df1cdc111cf1729ae8f53b6aec62b7a53852028d1547aec2f7c4af363e831",
        "linq": "context.Businesses\n   .Include(b => b.Neighbourhoods)\n   .Where(b => b.Neighbourhoods.Any(n => n.NeighbourhoodName == \"South Summerlin\"))\n   .SelectMany(b => b.Reviews)\n   .Count();"
    },
    {
        "id": "22b34aad59ea2875fdd1463fb935773c61e23c8e98a69f70c8ec4ec718f66331",
        "linq": "context.Users.Count(u => u.Name == \"Michelle\").ToString();"
    },
    {
        "id": "31f510fb460280d6e9f86a8c268b07afb771bd31ccbaebaa84c6aa2074d296c2",
        "linq": "context.Businesses.Count(b => b.CategoryName == \"restaurant\");"
    },
    {
        "id": "0ec1ddef07a0f94a930645022f9fcfe6a60530e239496cb38296f08a1cfe6881",
        "linq": "context.Businesses.Where(b => b.Name == \"Panda Express\").Select(b => new { b.City }).Distinct().Count();"
    },
    {
        "id": "124bd8d2381a7ca731bad86eb5085861f2abd7d22b86ca9ce9e68f3a516a3b5d",
        "linq": "context.Tips.Where(t => t.UserId == \"Michelle\").Count();"
    },
    {
        "id": "2e9e0ce40af902f7380f92244f9aebdf8cc8e1e56aa5a9c95858315a471c1fa4",
        "linq": "context.Checkins.Where(c => c.Day == \"Brighton Heights\").Sum(c => c.Count).ToList();"
    },
    {
        "id": "5d44d8ae54d4a6955287d7fc056822ceba03d0ffc20d50e01a7d4427577b680f",
        "linq": "context.Reviews.Count(r => r.Month == \"March\");"
    },
    {
        "id": "ab1c0d1f6af27aa5ae702a1f2876e50b7654451c01acc1eb3d96ab7528e20dda",
        "linq": "context.Tips.GroupBy(t => t.Month).Select(g => new { g.Key, Count = g.Count() }).ToList();"
    },
    {
        "id": "a8b3a8948593137aa81b108b20b0a59ec84901c8b8b2f590949a7cacd631f068",
        "linq": "context.Businesses.Where(b => b.Rating == 5 && b.City == \"Madison\").Select(b => new { b.Neighbourhoods.Count() }).FirstOrDefault();"
    },
    {
        "id": "2956615712f54746c5657cdb1d0352536f32283be3a21f5f987d5d498018b49a",
        "linq": "context.Businesses\n   .Where(b => b.City == \"Texas\" && b.CategoryName == \"Moroccan\")\n   .Select(b => new { b.Name, b.City })\n   .ToList();"
    },
    {
        "id": "bef171741442d562e3b1ccbc90c1b88753109b0d8cbd0b975be16d8c0a7f4dda",
        "linq": "context.Businesses.Where(b => b.Checkins.Count > 0).Select(b => new { b.Name, b.Checkins.Count }).OrderByDescending(b => b.Checkins.Count).First();"
    },
    {
        "id": "65735d7620f1ce54e75af15a948373675e3f11c7bc5becf4dfa2252dda879719",
        "linq": "context.Businesses.GroupBy(b => b.Neighbourhood).Select(g => new { g.Key, Count = g.Count() }).OrderByDescending(g => g.Count).First();"
    },
    {
        "id": "4c83afe3ffb1deea3e3e8208d5fff24b0a04ec448b7240d0e98db9aaef9cc6bd",
        "linq": "context.Businesses\n   .Where(b => b.Categories.Any(c => c.CategoryName == \"Mexican\"))\n   .Where(b => b.Reviews.Any(r => r.Rating >= 3.5))\n   .Where(b => b.City == \"Dallas\")\n   .Select(b => b)\n   .ToList();"
    },
    {
        "id": "2f6d3bca6bc3b87e671d20ed890595e526c1de8250105dd16fe2609a12c4317f",
        "linq": "context.Businesses.Include(b => b.Categories).Where(b => b.City == \"Dallas\" && b.State == \"Texas\" && b.Categories.Any(c => c.CategoryName == \"Valet Service\")).Select(b => new { b.Name, b.Categories }).ToList();"
    },
    {
        "id": "98012afe5d65e372955d7558c0241436715b721e8bb0584fba624b3adb7c46fd",
        "linq": "context.Businesses.Where(b => b.Name == \"Italian Restaurant\" && b.Neighbourhoods.Any(n => n.NeighbourhoodName == \"Meadowood\" && n.Businesses.Any(b2 => b2.BusinessId == b.BusinessId))).ToList();"
    },
    {
        "id": "935a6c2894eefa2f58dacedfc24d2841c7054aade03b36838fde98b73e9dd954",
        "linq": "var query = context.Businesses\n   .Include(b => b.Reviews)\n   .Where(b => b.CategoryName == \"Bars\")\n   .Where(b => b.City == \"Los Angeles\")\n   .Where(b => b.Reviews.Count >= 30)\n   .Where(b => b.Reviews.Average(r => r.Rating) > 3)\n   .Select(b => new { b.BusinessId, b.Name, b.Reviews });"
    },
    {
        "id": "0341ab8a17b4f32c313f81a8f0d01bfe4bb67b5e858d5aa0fa6eb20de91a55d7",
        "linq": "var query = context.Businesses\n               .Where(b => b.BusinessId == \"egyptian\" && b.City == \"Edinburgh\")\n               .Select(b => new { b.BusinessId, b.Name })\n               .ToList();"
    },
    {
        "id": "734729ff16cb88b3aa2226cdf5db777ebbe5896d2a9188283bc1d6a91294b7df",
        "linq": "context.Users.Where(u => u.Reviews.Average(r => r.Rating) < 3).Select(u => new { u.UserId, u.Name }).ToList();"
    },
    {
        "id": "f00d154c3318acb21dd55f8f9710b9717e80d3ae6b38db5904a1e00276558f47",
        "linq": "context.Businesses.Where(b => b.ReviewCount > 0 && b.Month == \"April\").OrderByDescending(b => b.ReviewCount).First();"
    },
    {
        "id": "53ab4f44a31aee41a0e48ea09d06f7ca1b3d5e53275ae862e574ae828b0c1315",
        "linq": "context.Businesses\n   .GroupBy(b => b.CategoryName)\n   .OrderByDescending(g => g.Count())\n   .Select(g => g.Key)\n   .First();"
    },
    {
        "id": "48c2ebf6901d3957d37cc5a887f336b5cf6b56830389ad4e69502ec8399351ea",
        "linq": "context.Ship1.Captains.GroupBy(c => c.ShipId).Where(g => g.Count() > 1).Select(s => new { s.Key, s.GroupBy(c => c.ShipId).Select(g => g.Key) }).ToList();"
    },
    {
        "id": "e385bf654181b2903dbc321380cd723ed4e063761b069b8f58b619f4da7f3669",
        "linq": "context.Ship.Where(s =>!context.Captain.Any(c => c.ShipId == s.ShipId)).Select(s => new { s.Name, s.Class }).ToList();"
    },
    {
        "id": "133a9c3bb500a3ad502eab01b196146b87af9da94e47eaf7d1ee4f1b56b5c159",
        "linq": "context.Captains.Include(c => c.Ship).Where(c => c.Age == context.Captains.Min(c => c.Age)).Select(c => c.Ship.Name).FirstOrDefault();"
    },
    {
        "id": "47f6b5f646cf04aeda406fc39603466ded528aa61a65b5a44bf405a2937f7e91",
        "linq": "context.Ships.Where(s =>!context.Captains.Any(c => c.Rank == \"Midshipman\" && c.ShipId == s.ShipId)).Select(s => new { s.Name, s.Flag }).ToList();"
    },
    {
        "id": "2b0e2e932c6b4a4a0498aa5d435c6fe197cbaad0ba10143f6d6cf3ca4d8b81c5",
        "linq": "context.Captains\n   .Where(c => c.Rank == \"Midshipman\" || c.Rank == \"Lieutenant\")\n   .Select(c => c.Ship.Name)\n   .Distinct()\n   .ToList();"
    },
    {
        "id": "0ffdb235bcdea7ff9ebabb02c049b2885512c0742ead1453b6d786df654ae7f3",
        "linq": "context.People.Join(context.People, p => p.Name, f => f.Friend, (p, f) => new { p, f })\n   .Where(x => x.f.Year > context.People.Average(p => p.Age))\n   .Select(x => new { x.p.Name, x.f.Name, x.f.Year })\n   .ToList();"
    },
    {
        "id": "61509cfa91c0335de1be5f88a29b864eace8657de21bbfff8c38ee0ebc055f14",
        "linq": "context.People.Join(context.PersonFriends, p => p.Name, pf => pf.Friend, (p, pf) => new { p.Name, p.Age, p.City, p.Gender, p.Job, pf.Year }).Where(friend => friend.Name == \"Zach\").OrderByDescending(friend => friend.Year).Select(friend => friend.Name).First();"
    },
    {
        "id": "3e9583e9ab05c480694e5c4aede0eb3d731c1c46da8f606e85594a87c8e831a8",
        "linq": "context.PersonFriends.Where(p => p.Name == \"Zach\").Select(p => p.FriendNavigation.Age).FirstOrDefault();"
    },
    {
        "id": "1fc4776b60e6886318705f9c3d4bd0dfc3b14006d51a5a8d531d04c6b5b6eaae",
        "linq": "context.People.Join(context.PersonFriends, p => p.Name, pf => pf.Name, (p, pf) => new { p.Name, pf.Friend, pf.Year })\n.Where(f => f.Friend == \"Alice\")\n.Select(f => f.Name)\n.ToList();"
    },
    {
        "id": "ced168f4645e9fb9ef9865f1496e08224c98d89d5b35b006b8660e5b2e9009ec",
        "linq": "context.People.Include(p => p.PersonFriends).Where(p => p.Name == \"Alice\").Select(p => new { p.Name, p.Age, p.Job }).ToList();"
    },
    {
        "id": "1160426c265eddc6a4d1a9dd1e390ca5c4abe865a3dd6d3a6b84e758017c9200",
        "linq": "context.People\n   .Select(p => new { p.Name, p.Friends })\n   .Where(p => p.Friends.Count == 0)\n   .Select(p => p.Name)\n   .ToList();"
    },
    {
        "id": "7400abbc0ecdb9f879d4e7f5c3705d97fb1b76d5e34511531d6993b2c1f5292a",
        "linq": "context.People\n   .Join(context.PersonFriends, p => p.Name, pf => pf.Name, (p, pf) => new { p, pf })\n   .GroupBy(g => g.p.Name)\n   .Select(g => new\n    {\n        Person = g.Key,\n        AverageAge = g.Average(f => f.pf.Year),\n    })\n   .OrderByDescending(o => o.AverageAge)\n   .First();"
    },
    {
        "id": "3c8619c1d837a5a5457971d052b60098c4604b5071e1fc09501896ccdf103aa3",
        "linq": "context.People.Count(p => p.PersonFriends.All(f => f.City!= \"Austin\"));"
    },
    {
        "id": "16ee22d1ebdc50e44d01fc6a61c41d98f0733e4a174c96a229fb139974ee06bd",
        "linq": "context.People.Join(context.People, a => a.Name, b => b.Friend, (a, b) => new { a.Name, b.Name }).Where(e => e.Name == \"Alice\").Select(e => e.B.Name).ToList();"
    },
    {
        "id": "1504ef77e672ca500c43c2f81f94e556760ddb578d8d6e08ddd822547dc170f9",
        "linq": "context.Complaints\n   .Select(c => c.ComplaintTypeCode)\n   .Distinct()\n   .Count();"
    },
    {
        "id": "aa583b9c794e8a766010a3fb51daa08f704b846f643e2832044d801b54282dd0",
        "linq": "context.Customers\n   .Where(c => c.EmailAddress == \"vbogisich@example.org\")\n   .Select(c => new\n    {\n        c.AddressLine1,\n        c.AddressLine2\n    })\n   .FirstOrDefault();"
    },
    {
        "id": "3368cc575dd974c5993a23017af8d618049f10c1465ec7ff09443a59d63082ca",
        "linq": "context.Complaints\n   .GroupBy(c => new { c.ComplaintStatus, c.ComplaintTypeCode })\n   .Select(g => new\n    {\n        ComplaintStatus = g.Key.ComplaintStatus,\n        ComplaintTypeCode = g.Key.ComplaintTypeCode,\n        Count = g.Count()\n    })\n   .ToList();"
    },
    {
        "id": "1f31907593889f970fc37d3331f4c378122a5b4c591660735663b62fd20c2f2f",
        "linq": "context.Staff\n   .GroupBy(s => s.FirstName)\n   .OrderByDescending(g => g.Count())\n   .Take(5)\n   .Select(g => g.Key)\n   .ToList();"
    },
    {
        "id": "057e26a868de62d1cd3a9ba6ffd78dec7ece8410d3cb8775750bef42c030634c",
        "linq": "context.Customers.GroupBy(c => c.State).Select(g => new { g.Key, Count = g.Count() }).OrderByDescending(g => g.Count).First().Key\n\n\n\n### Task:\nNow, using the provided context and models, generate the appropriate C# code for the following query.\n\n\n**Context.cs:**\nusing System;"
    },
    {
        "id": "dbc59e99481dafee19771a848bb8b476c71455907e33b9c94e4788ebadad1fea",
        "linq": "context.Orders.Where(o => o.Invoices.Count > 2).Select(o => new { o.OrderId, o.OrderDetails }).ToList();"
    },
    {
        "id": "a3bdd60b00b115193a98b8bda6eb403b8c9134f0e96f139a5326d994145a90d1",
        "linq": "var customer = context.Customers\n   .Where(c => c.Orders.Count() == context.Customers.Max(c => c.Orders.Count()))\n   .Select(c => new { c.CustomerLastName, c.CustomerId, c.PhoneNumber })\n   .FirstOrDefault();"
    },
    {
        "id": "3516abbafdee3c603760afc660246d37890ebf88d87f35c3107e5044c817a235",
        "linq": "context.Products.Where(p =>!p.OrderItems.Any()).Select(p => p.ProductName).ToList();"
    },
    {
        "id": "7c10e1c2358f47123ff3488454d0c4f134f4eded8f1cc242e5728eb409d51f4a",
        "linq": "context.Orders.Select(o => new { o.OrderId, o.OrderItems.Count() }).ToList();"
    },
    {
        "id": "6f26e24ac076fc593b692111fb55f12657d6833827af4b313738f70024aec77f",
        "linq": "context.Products.Select(p => new { p.ProductId, Count = context.Orders.Where(o => o.OrderItems.Any(oi => oi.ProductId == p.ProductId)).Select(o => o.OrderId).Distinct().Count() }).ToList();"
    },
    {
        "id": "ff02ccd34ab7c7d96d1992f3f2c90087be8dca8a42ba6a22a0099b4a4be43186",
        "linq": "context.Products\n   .Join(context.OrderItems, p => p.ProductId, oi => oi.ProductId, (p, oi) => new { p.ProductName, oi.OrderId })\n   .GroupBy(o => o.OrderId)\n   .Select(g => new { g.Key, CustomerCount = g.Count() })\n   .ToList();"
    },
    {
        "id": "5baed72cb5b854b1518dc3c900ae63aae78135de5ecba6418d2425e2ee0b2842",
        "linq": "context.Orders.Select(o => new { o.OrderId, o.OrderItems.Count() }).ToList();"
    },
    {
        "id": "7038ae31c7055b5d002ba323511a7612745e4a6c1592ab98f5ef3e4f97466561",
        "linq": "context.Products.Count(p =>!p.OrderItems.Any());"
    },
    {
        "id": "12e341b8893992e8c5485f405f269b8629954caf53fa782222acd6a7451e9406",
        "linq": "context.ProductCatalogContext.CatalogContents.Where(c => c.PriceInDollars > 700).Select(c => new { c.CatalogEntryName, c.Capacity }).ToList();"
    },
    {
        "id": "fc7cc5f0aedd08606e40b5b0cf7a828a46c90c1676c695d80c90f9a059d9279c",
        "linq": "context.CatalogContents\n   .GroupBy(c => c.DateOfLatestRevision)\n   .Where(g => g.Count() > 1)\n   .Select(g => g.Key)\n   .ToList();"
    },
    {
        "id": "2fc1733673a1c4360599c8337876e13764450f480c46f1bb987f96df5dd4fdf9",
        "linq": "context.Catalogs.Count();"
    },
    {
        "id": "899154f64e41dc0676f1298d37bb329d0d6de01d33a7bf149e205949a2429a80",
        "linq": "context.CatalogContents\n.Where(c => c.NextEntryId > 8)\n.Select(c => c.CatalogEntryName)\n.ToList();"
    },
    {
        "id": "618af38d9b2b8d45ef99823f385620af995731798b7841bd1ed955c8c7dc891e",
        "linq": "var candidates = context.Candidates.Select(c => new\n{\n    c.SupportRate,\n    c.ConsiderRate,\n    c.OpposeRate,\n    c.PeopleId,\n    c.PollSource\n}).ToList();"
    },
    {
        "id": "49f32228f3fa67dd019bc17113e2771ba21f4c0a80cce5b351290948d3c0e3a5",
        "linq": "context.Candidates.Where(c => c.Sex == \"F\").OrderBy(c => c.Name).Select(c => c.Name).ToList();"
    },
    {
        "id": "d417ce111ed62a2aa196291607d18529c032da99723ebe9aa408a4a32f1f3a67",
        "linq": "var context = new CandidatePollContext();"
    },
    {
        "id": "3f60818823e6315785a9939c24ec67df3aac40725ffe6ee5b7effcf86073cba9",
        "linq": "context.People.Select(p => new { p.PeopleId, p.Sex, p.Name, p.DateOfBirth, p.Height, p.Weight }).ToList();"
    },
    {
        "id": "32b9f6621b653d79a659e74ae24e42b21621cb43810e5e0c441ff74898406617",
        "linq": "context.Apartments\n   .GroupBy(e => e.AptTypeCode)\n   .Select(e => new\n    {\n        e.Key,\n        NumberOfApartments = e.Count()\n    })\n   .OrderBy(e => e.NumberOfApartments)\n   .ToList();"
    },
    {
        "id": "8da9c0c3ea371e9470aac11b1ed233eaad36dfe48b030eee3b5f4063514ff64e",
        "linq": "context.Apartments.GroupBy(a => a.AptTypeCode).Select(g => new { g.Key, Count = g.Count() }).OrderByDescending(g => g.Count).First().Key\n\n\n\n### Task:\nNow, using the provided context and models, generate the appropriate C# code for the following query.\n\n\n**Context.cs:**\nusing System;"
    },
    {
        "id": "2528c970feabdf3de607ce6c61da8cff690cbf55f2d7421f57c532d83e3c9bb5",
        "linq": "context.Apartments.Where(a => a.BathroomCount > 1).GroupBy(a => a.AptTypeCode).Select(g => new { g.Key, Count = g.Count() }).OrderByDescending(g => g.Count).First().Key;"
    },
    {
        "id": "ddb4216a469fe8ef6a7f463c6aac234e0667457888afda6287f3d3fa2fc2a481",
        "linq": "context.Apartments.GroupBy(a => a.AptTypeCode)\n   .Select(g => new\n    {\n        TypeCode = g.Key,\n        MaxRooms = g.Max(a => a.RoomCount),\n        MinRooms = g.Min(a => a.RoomCount),\n    })\n   .ToList();"
    },
    {
        "id": "72266f2f19e386fcae5e8cc32a5cfc3a5b55d980a5d06f2f6f529d164f4e3e24",
        "linq": "context.Guests.GroupBy(g => g.GenderCode).Select(g => new { g.Key, Count = g.Count() }).OrderByDescending(g => g.Count).ToList();"
    },
    {
        "id": "d4c82b4288ff8586f0076fc1a895c59d969ec92572b2a0e43b580baf94060034",
        "linq": "context.ApartmentBuildings.Count(a => a.ApartmentFacilities.Count == 0)\n<|end_of_text|>"
    },
    {
        "id": "13e7702207b59277a5b63b69b99cf7d2d784f9404abe162474a428c1169f843f",
        "linq": "context.Apartments\n   .Include(a => a.ApartmentBookings)\n   .Where(ab => ab.ApartmentBookings\n       .Any(booking => booking.BookingStatusCode == \"Provisional\" && booking.BookingStatusCode == \"Confirmed\"))\n   .Select(a => a.AptNumber)\n   .ToList();"
    },
    {
        "id": "f699113c93d8571e5ed0c55060154003f2ae54b3f767bcefd141b296ac6d9300",
        "linq": "context.ViewUnitStatuses\n   .Where(s => s.AvailableYn == true || s.AvailableYn == false)\n   .Select(s => s.AptNumber)\n   .ToList();"
    },
    {
        "id": "ecbff3fe40f0d7fa9efb94cc8bfa8ca3655441fb2e14927f0e5904dbaf7eee3e",
        "linq": "context.ProductsForHires.Where(p => p.ProductName.Contains(\"Book\")).Select(p => p.DailyHireCost).ToList();"
    },
    {
        "id": "4818a92d6108728c7ce8aa1a05f397bab06093b60ccf01bc013e01b2736f3fe9",
        "linq": "context.ProductsForHire.Where(p => p.DailyHireCost > 200 &&!p.ProductsBookeds.Any()).Count();"
    },
    {
        "id": "8be283c6e9db7a0dc3f6833cc78f401ca0611da38e6493991f4e9ea48fe08a43",
        "linq": "context.Payments.Where(p => p.AmountPaid > 300 || p.PaymentTypeCode == \"Check\").Select(p => new { p.PaymentDate }).ToList();"
    },
    {
        "id": "1986bb7bf756e0c9bf19e296a50217bf12a07fa69c5d38cef4efb1a693934200",
        "linq": "context.ProductsForHires.Where(p => p.ProductTypeCode == \"Cutlery\" && p.DailyHireCost < 20).Select(p => new { p.ProductName, p.ProductDescription }).ToList();"
    },
    {
        "id": "e1e3a348501362e7a602a0fb0e411595e67b8f748bed7c0bdcb8b5d098eca73c",
        "linq": "context.Universities.GroupBy(u => u.Affiliation)\n                   .Select(g => new\n                    {\n                        Affiliation = g.Key,\n                        Universities = g.Count()\n                    })\n                   .ToList();"
    },
    {
        "id": "0513697d673eec8c409560c17a0bd517d2145d86292514f23b0ef99f99e5aa84",
        "linq": "var query = context.Universities\n   .Where(u => u.Founded > 1850)\n   .GroupBy(u => u.Affiliation)\n   .Select(g => new { g.Key, Count = g.Sum(u => u.Enrollment) })\n   .ToList();"
    },
    {
        "id": "6fc2ff61649350295980a2b8c0cd5cec52a8558a6c5f315e57ddb6d40b8445fa",
        "linq": "context.Universities.Select(u => u.Enrollment).Max();"
    },
    {
        "id": "08b6cd6d30136175a51db055d2a626e361877450a800865e1e1a7b3af3ccdb23",
        "linq": "context.BasketballMatches.Select(e => new\n{\n    e.TeamId,\n    e.AccRegularSeason,\n    e.AccPercent,\n    e.AccHome,\n    e.AccRoad,\n    e.AllGames,\n    e.AllGamesPercent,\n    e.AllHome,\n    e.AllRoad,\n    e.AllNeutral,\n    e.SchoolId,\n    e.TeamName,\n    School = context.Universities.Find(e.SchoolId)\n}).ToList();"
    },
    {
        "id": "73331d9bb60c7a73f16e2954d23a15fe0f159e32d94724444514179fff6acafc",
        "linq": "context.University.Include(u => u.BasketballMatches).OrderByDescending(u => u.BasketballMatches.Sum(b => b.AllHome)).Select(u => u.School).ToList();"
    },
    {
        "id": "af74022b3829597cd5b3530afe1081261f8558a8cf19ff792663d40a5883b28e",
        "linq": "context.Artists\n   .Include(a => a.Files)\n   .Include(a => a.Songs)\n   .Where(a => a.Songs.Count() == 3)\n   .Select(a => new\n    {\n        a.Name,\n        Works = a.Songs.Count()\n    })\n   .ToList();"
    },
    {
        "id": "5c2cc0a2eaf6fe5b3856e2ce78fbde21d1b99e3981cb75b4bd4ebe2e790c251b",
        "linq": "context.Songs\n   .GroupBy(s => s.Country)\n   .OrderBy(g => g.Count())\n   .Select(g => new { g.Key, g.Count() })\n   .FirstOrDefault()\n   .Key;"
    },
    {
        "id": "5e861be99b4438ab7bff50fa24f65edefb7f0b72e256d8d9dc6bf1933a308791",
        "linq": "context.Songs.Where(s => s.Rating < context.Songs.Where(s1 => s1.Languages == \"English\").Select(s2 => s2.Rating).FirstOrDefault()).Select(s => s.SongName).ToList();"
    },
    {
        "id": "ed54c9536249114f468f5f4fbc96c760472700b2c13e0d8ad01f8285cb863bce",
        "linq": "context.Songs.Where(s => s.Resolution > context.Songs.Where(s => s.Rating < 8).Select(s => s.Resolution).Max()).Select(s => s.Id).ToList();"
    },
    {
        "id": "59cbf96a9aff9fdffc33e233ebd3cba00af66e1409801e92e70f873bd48b5db1",
        "linq": "context.Songs.Where(s => s.Resolution > context.Genres.Average(g => g.Resolution)).Select(s => s.Id).ToList();"
    },
    {
        "id": "4d381fe3312c7eca93c89d11e2ebde13c1d195794e5b6a5aa0ef3aa1b1f7d1da",
        "linq": "context.Artists\n   .Include(a => a.Files)\n   .ThenInclude(f => f.Songs)\n   .Where(a => a.Files.Any(f => f.Songs.Any(s => s.Languages == \"Bangla\")))\n   .OrderByDescending(a => a.Files.Count(f => f.Songs.Any(s => s.Languages == \"Bangla\")))\n   .Select(a => new { a.ArtistName, a.Files.Count(f => f.Songs.Any(s => s.Languages == \"Bangla\")) })\n   .Take(3)\n   .ToList();"
    },
    {
        "id": "26fb37b226c7b7b7e1c8a1d8ca9acd7b6feb0f5677d7549123f90d2ee3bfe0c9",
        "linq": "context.Songs.Where(s => s.Languages == \"English\").Select(s => new { s.SongName, s.ArtistName, s.GenreIs }).OrderByDescending(s => s.Rating).ToList();"
    },
    {
        "id": "d300ae58a174275606b657992b14288f1468be2509ffc78559a9f97a8c777fcd",
        "linq": "context.Songs\n   .Where(s => s.GenreIs == \"pop\")\n   .OrderBy(s => s.SongName)\n   .Select(s => new { s.Duration, s.FileSize, s.Formats })\n   .ToList();"
    },
    {
        "id": "74d71a870b22df74995fb4866f0af0e28d0cb4e6eb0063dad4e02a7eba323117",
        "linq": "context.Artists\n   .Where(a => a.Songs\n       .Any(s => s.Languages == \"English\" && s.Rating < 8))\n   .Select(a => a.Name)\n   .ToList();"
    },
    {
        "id": "f310c77c7df2ce86935317815e10a98bd290e10254aef4c981f7ccbd0c0f4dc6",
        "linq": "context.Artists.Where(a => a.Country == \"Bangladesh\" && a.PreferredGenre == null).Select(a => a.ArtistName).ToList();"
    },
    {
        "id": "bd35576dd9a0fa6a1f7a83124d3c85b305a97a3b50ec48bd76d4c9a46ca25db2",
        "linq": "context.Faculties.Where(f => f.MemberOfs.Any(m => m.Dno == 520)).Select(f => new { f.Fname, f.Lname }).ToList();"
    },
    {
        "id": "008eda8f9fd63397413f4ba7f26daa6ecc28706be6e3d262fa92471f0af3ed0e",
        "linq": "context.Students.Where(s => s.MinorIns.Any(m => m.Dno == 140)).Select(s => new { s.Fname, s.Lname }).ToList();"
    },
    {
        "id": "cbf1be80f73721947fb676125b909b710b363f369bcf1110629aaba918843e86",
        "linq": "context.Faculties.Where(f => f.Department.Name == \"Computer Science\").Select(f => f.Lname).ToList();"
    },
    {
        "id": "f58dc9943420254a3d9c396dc34b9dda5ba3bdb59afae99f31e93978616e72e0",
        "linq": "context.Student.Average(s => s.Grade).Where(s => s.Lname == \"Smith\").ToList();"
    },
    {
        "id": "d25a08e233478e75e2c537daa002dd9c8e7e75466c1adbaf5f80d7b9ba6666f7",
        "linq": "var result = context.Students\n   .Where(s => s.CityCode == \"NYC\")\n   .Select(s => new { s.Lname, s.Fname, s.Age, s.Sex, s.Major, s.Advisor, s.CityCode, s.GradePoint })\n   .OrderByDescending(s => s.GradePoint)\n   .ThenBy(s => s.Lname)\n   .First();"
    },
    {
        "id": "67849e243419afd2e4a44bcc8a56f7d2048a6eaef1524768b3d11cb258f1fae0",
        "linq": "context.Courses.Where(c => c.Credits == 3 || c.Credits == 1 && c.Hours == 4).Select(c => c.Cname).ToList();"
    },
    {
        "id": "3fdc6835dbc7f3968a6759f71cab8fc6021c1dc9f8539eb884fa2f987710d9ef",
        "linq": "context.Departments.Where(d => d.Division == \"AS\" || d.Division == \"EN\" && d.Building == \"NEB\").Select(d => new { d.Dname }).ToList();"
    },
    {
        "id": "8f3d099756e5e71ad196abd9f9aea3f242f098025909abee6cae1bd6b0ae6541",
        "linq": "context.Students.Where(s =>!context.EnrolledIns.Any(e => e.StuId == s.StuId)).Select(s => s.Fname).First();"
    },
    {
        "id": "a3f829f47ea11b5b3f9afc477477de5b5dfa16367656719977d698e144296f72",
        "linq": "context.GasStations.Include(s => s.StationCompanies).Where(s => s.StationCompanies.Any(sc => sc.Company.MarketValue > 100)).Select(s => new { s.Location }).ToList();"
    },
    {
        "id": "d1796adeedb6c20824e5bb9d99f5e9707b217a6185483db084d44fcd3fe1c529",
        "linq": "context.GasStations.Where(g => g.OpenYear > 2000).GroupBy(g => g.ManagerName).OrderByDescending(g => g.Count()).Select(g => new { g.Key, g.Count() }).ToList();"
    },
    {
        "id": "6704d7997fa58ec851d5d3093622674f3f845bf66e8f29b69c9df5ba6a704334",
        "linq": "context.GasStations.OrderBy(s => s.OpenYear).Select(s => s.Location).ToList();"
    },
    {
        "id": "b1a96e53a4bb82a1a408300c362d109323d9500a8da3f78f8970a6e811f4e561",
        "linq": "context.Companies.Include(c => c.StationCompanies).Where(c => c.MainIndustry == \"Banking\").Select(c => new { c.Rank, c.Company1, c.MarketValue }).OrderBy(c => c.SalesBillion).ThenBy(c => c.ProfitsBillion).ToList();"
    },
    {
        "id": "b519d669cf631e985f39bba59db89ea916576f263691f57e93fc3a769bf05cb1",
        "linq": "context.StationCompanies.Where(s => s.RankOfTheYear == 3).Select(s => new { s.Station.Location, s.RepresentativeName }).ToList();"
    },
    {
        "id": "b103fe0a4ba3e35080e6b2a1d79c0c5ac5b6c7f13c45b21a59053104472234ec",
        "linq": "context.Singers.Where(s => s.Songs.Count > 1).Select(s => s.Name).ToList();"
    },
    {
        "id": "9b219501eb300f030586753eb3558c9e6c8332def957881d5c10b7ee4d3c3f5d",
        "linq": "context.Singers.Include(s => s.Songs).Select(s => new { s.Name, s.Songs.Sum(s => s.Sales) }).ToList();"
    },
    {
        "id": "dcf13724d7de09cb3fbbe78fc91aecc138f64c5280d1b7501b4e33be727c3945",
        "linq": "context.Singers.Where(s =>!context.Songs.Any(s => s.SingerId == s.SingerId)).Select(s => new { s.Name }).ToList();"
    },
    {
        "id": "593f3b7d0f7d0dd36d08b6b51f3f1ad1d1d243cb0d0942be0b0459c4dd7b8e83",
        "linq": "context.Singers\n   .Where(s => s.BirthYear < 1945 && s.BirthYear > 1955)\n   .Select(s => s.Citizenship)\n   .Distinct()\n   .ToList();"
    },
    {
        "id": "62e496a9caf74f851f83ac228664e64ecc5562d399ac9981d90abadd13fc751c",
        "linq": "context.HasPets\n   .Where(hp => hp.StuId!= null && hp.PetId!= null)\n   .GroupBy(hp => hp.StuId)\n   .Select(g => new\n    {\n        StudentId = g.Key,\n        NumberOfPets = g.Count()\n    })\n   .ToList();"
    },
    {
        "id": "6b272336145ed8054b9ddae5f0db84d5fb7926a6c35bed5b10a12f29763d441b",
        "linq": "context.Students.Join(context.HasPets, stu => stu.StuId, hasPet => hasPet.StuId, (stu, hasPet) => new { stu.StuId, stu.Fname, stu.Lname, hasPet.PetId, hasPet.PetType }).GroupBy(g => g.StuId).Select(s => new { s.Key, s.Count() }).ToList();"
    },
    {
        "id": "1d113389d9af6b8f6cf0e5fc1430f6d7bf67b0fd6170899f0440325ae036436e",
        "linq": "context.Students.Where(s => s.HasPets.Count > 1).Select(s => new { s.Fname, s.Sex }).First();"
    },
    {
        "id": "602d63143f0f98cbfe5eeb358c22b548d59e9492e2ecc580d15c51d49a1fade1",
        "linq": "context.Students\n   .Where(s => s.HasPets.Any(h => h.PetType == \"Cat\" && h.PetAge == 3))\n   .Select(s => s.Lname)\n   .FirstOrDefault();"
    },
    {
        "id": "b7b547e196b30ad44a65b3fc395e6ae4e1ef7b58af1677a418f3c9c3a2185582",
        "linq": "context.Students.Where(s =>!context.HasPets.Any(h => h.StuId == s.StuId)).Select(s => new { s.Age }).Average();"
    },
    {
        "id": "bd85ac490c7b0b0d93e269c2bdb484f02e285abfff887794102766f3e57ff0ac",
        "linq": "context.Albums.OrderBy(a => a.Title).Select(a => a.Title).ToList();"
    },
    {
        "id": "f6e52997e4bf3d10fe19f4f58044c35a290f20474013abbb151da0294fdd100e",
        "linq": "context.Artists.Where(a => a.Albums.Count >= 3).OrderBy(a => a.Name).Select(a => new { a.Name, a.ArtistId }).ToList();"
    },
    {
        "id": "55b7a23d167df516f5f42df9341176959bd8709a72c7f1089251f107d7d58b04",
        "linq": "context.Artists.Where(a =>!a.Albums.Any()).Select(a => a.Name).ToList();"
    },
    {
        "id": "2c082c8507ac7b720354d2e2a2bfb0466967a8198101a602f06ebfc2e5a21ee7",
        "linq": "context.Tracks\n   .Where(t => t.Genre.Name == \"Rock\")\n   .Average(t => t.UnitPrice);"
    },
    {
        "id": "424414efbc84553ebc3bafa669d33eaadc8e6891eaf0b91c86d2fab75afaa48e",
        "linq": "context.Tracks\n   .Where(t => t.MediaTypeId == 1 && t.GenreId == 3)\n   .OrderBy(t => t.Milliseconds)\n   .Select(t => new { t.Name, t.Milliseconds })\n   .ToList();"
    },
    {
        "id": "06c488e8c22c867829ffc9d2bd09cd0f626c3e6540b64d114aa128140c4d28c8",
        "linq": "context.Employees.Where(e => e.City == \"Edmonton\").Select(e => e.BirthDate).ToList();"
    },
    {
        "id": "34129aab1da278ce422ac9da6c05d93d74f65a2cf0c5aa4b3a093d21616c33ca",
        "linq": "context.Tracks.Select(t => t.UnitPrice).Distinct().ToList();"
    },
    {
        "id": "76911d5e35b5d0a27f288c0e69ec5bb25452521fc8fe55d06e9f3b1c056fa829",
        "linq": "context.Artists.Count(a =>!a.Albums.Any());"
    },
    {
        "id": "290fec4a6bbe62c3ebcf60509abd30a525292f6cda2cc97dcb65dab458b53377",
        "linq": "context.Tracks\n   .Where(t => t.Genre.Name == \"Reggae\" || t.Genre.Name == \"Rock\")\n   .Select(t => t.Album.Title)\n   .Distinct()\n   .ToList();"
    },
    {
        "id": "b2d04c6a68fa73d87ec1bbde7b002cdb243e453556a55d89fbd1ca22a7f64edb",
        "linq": "context.Authors.Where(a => a.Authorships.Any(as => as.Paper.Title.Contains(\"Monadic\"))).Select(a => a.Lname).ToList();"
    },
    {
        "id": "6fbf911625d85f5d681fd204ff476847ffe1aa8b29c2a4ae85cc4f2ed20e272f",
        "linq": "context.Papers.Select(p => p.Title).OrderByDescending(p => p.Authorships.Count).First();"
    },
    {
        "id": "af86d1ed0d389d6816963650cf58d2e5cdb51914c668fa7fdefe0b519879220d",
        "linq": "context.Authors.Where(a => a.Lname == \"Ueno\").Select(a => a.Fname).First();"
    },
    {
        "id": "48e5a0d9aae1ddd1a01f16714c87716e4e326139501d9ff88e7927a921b86ae9",
        "linq": "context.Authors.Where(a => a.Fname == \"Amal\").Select(a => a.Lname).Last();"
    },
    {
        "id": "af933c33e282c953b82a6eeaa388a59244ab1775c88eca2fa0991f11b3714ac4",
        "linq": "context.Authors.Select(a => a.Fname).OrderBy(a => a.Fname).ToList();"
    },
    {
        "id": "2e58f38e76736fe8bf5a0562263e4b3100f31841949e59b4b01ed10da68ade7d",
        "linq": "context.Authors.Select(a => a.Lname).OrderBy(a => a).ToList();"
    },
    {
        "id": "7f0c848728347ea82cbfddee42d935a76f44a6b60a31ceca9ed61ee9d8f3483e",
        "linq": "context.Authors.OrderBy(a => a.Lname).Select(a => new { a.Fname, a.Lname }).ToList();"
    },
    {
        "id": "c9758c3f3ea934fc7d2823418a149ce8788b89f817b8ba822942a6d69206dd07",
        "linq": "context.Trains.Include(t => t.Stations).Select(t => new { t.Name, t.Service, t.Stations }).OrderBy(t => t.Time).ToList();"
    },
    {
        "id": "e5f03076614c6fbf789a2cc0c5dd0eb89613546e475f800111fafbbd95bde91e",
        "linq": "context.Stations\n   .GroupBy(s => s.Location)\n   .Where(g => g.Count() == 1)\n   .Select(g => g.Key)\n   .ToList();"
    },
    {
        "id": "3cccb565cd7c96cc56eae39ff69c854ec52faae0aca04b5b66d6d1238dfef54c",
        "linq": "context.Stations\n   .OrderByDescending(s => s.AnnualEntryExit)\n   .ThenBy(s => s.AnnualInterchanges)\n   .Select(s => new { s.Name, s.Location })\n   .ToList();"
    }
]