[
    {
        "id": "31e0b6995b1944590a27586b0970cdea24dfe4419721c8a3a7d186175f8808bd",
        "linq": "context.People.Select(p => p.BirthPlace).Distinct().Count();"
    },
    {
        "id": "eb6c91d414de92da6b85b94c1475aea48660a5435551095e959b559d49a1d80b",
        "linq": "context.People.Count(p =>!context.BodyBuilders.Any(bb => bb.PeopleId == p.PeopleId));"
    },
    {
        "id": "45dc41b0bd6268900ab3ec532febe5b2608a1b27003dd8ff25e6252456df6286",
        "linq": "context.BodyBuilders\n   .Include(b => b.People)\n   .Where(b => b.Snatch > 140 || b.People.Height > 200)\n   .Select(b => b.People.Weight)\n   .ToList();"
    },
    {
        "id": "7b30b26548b3398edd8036a21b8e59ebf5a23a29eccede9ecac731b0b97de6f1",
        "linq": "context.BodyBuilders.Join(context.People, b => b.PeopleId, p => p.PeopleId, (b, p) => new { b.Total, p.BirthDate }).Where(x => x.BirthDate.Contains(\"January\")).Select(x => x.Total).ToList();"
    },
    {
        "id": "554d200951eac5fbd1f623eb524121e73a892018aa56bd626e63fcc099d68d74",
        "linq": "context.BodyBuilders.Select(x => x.Snatch).Min();"
    },
    {
        "id": "a74936f51df91b526fb493767ae63a7f90952011bd796e7a89e1ad28338bb078",
        "linq": "context.Members.Where(m => m.Rounds.Any(r => r.RankInRound > 3)).Select(m => m.Name).ToList();"
    },
    {
        "id": "2b4b1adb5d4890a17b13c505598499668cb8e6ca21751585a937083368eb8542",
        "linq": "context.Members.Join(context.Rounds, m => m.MemberId, r => r.MemberId, (m, r) => new { m.Name, r.RankInRound }).OrderByDescending(x => x.RankInRound).Select(x => x.Name).ToList();"
    },
    {
        "id": "aa92a1d72ecc5c0ab53cf2c97794ef2bfee73b97e890e2c6dc18d34c68973500",
        "linq": "context.Members.Where(m =>!context.Rounds.Any(r => r.MemberId == m.MemberId)).Select(m => m.Name).ToList();"
    },
    {
        "id": "eb7f3196c681b4af4e73ff9c6f8f097008da698921a3da5d0395aa1b74490471",
        "linq": "context.Films.Where(f => f.Studio.Contains(\"Universal\")).Select(f => new { f.Title, f.Studio }).ToList();"
    },
    {
        "id": "5fc4fcb5f18cbd7f70ce7d712dadaa181a77e41cc14e716d1bb59e8c8ce14650",
        "linq": "context.Film.Where(f => f.Title!= \"The Warriors\").Select(f => f.Studio).ToList();"
    },
    {
        "id": "0e5ea380e0077d7b399d3ac6a15c81b859faf95ae91e259de8ffd0a52a0e63f6",
        "linq": "context.Film.GroupBy(f => f.Studio).Where(g => g.Average(e => e.GrossInDollar) >= 4500000).Select(g => g.Key).ToList();"
    },
    {
        "id": "9e243aae45d0a4817481afff943386ea7176775f9757c905ce0d17e5ecef83da",
        "linq": "context.FilmMarketEstimations\n   .Include(x => x.Film)\n   .Where(x => x.HighEstimate == context.FilmMarketEstimations.Max(y => y.HighEstimate))\n   .Select(x => x.Film.Title)\n   .FirstOrDefault();"
    },
    {
        "id": "bd84cb383c840a5021d079c7ebb363b6c1399540c60ee4092e4c5ae4a9095e29",
        "linq": "context.Films.Select(f => new { f.Title, f.Director })\n           .Where(f =>!context.FilmMarketEstimations.Any(e => e.FilmId == f.FilmId && e.Market.Country == \"China\"))\n           .ToList();"
    },
    {
        "id": "f3d79b68212e77ea1570441215bac88f368b7928b4576f5801dfccf4c90c0546",
        "linq": "context.Singers.Join(context.Songs, t1 => t1.SingerId, t2 => t2.SingerId, (t1, t2) => new { t1.Name, t2.SingerId })\n   .GroupBy(t => t.Name)\n   .Where(g => g.Count() > 1)\n   .Select(t => t.Key)\n   .ToList();"
    },
    {
        "id": "627fde0ff136bbfa0d6be4687a4835ca48cca17d7bbc860fe9737824040a44ce",
        "linq": "context.Singers.Select(s => new { s.Name, SumSales = context.Songs.Where(s => s.SingerId == s.SingerId).Sum(s => s.Sales) }).ToList();"
    },
    {
        "id": "d345f1c05b5ce76412e12c9465dbbea229c2b77728e57519e128a399c2c23c5c",
        "linq": "context.Singers.Where(s =>!context.Songs.Any(s2 => s.SingerId == s2.SingerId)).Select(s => s.Name).ToList();"
    },
    {
        "id": "8ac068cecbcf1b1a8244a01b5c478a94611ea557163fd0b57a0ec3bbeb44adbf",
        "linq": "context.Singers.Where(s => s.BirthYear < 1945).Select(s => s.Citizenship).Intersect(context.Singers.Where(s => s.BirthYear > 1955).Select(s => s.Citizenship)).ToList();"
    },
    {
        "id": "a2dc1d9367aa026fb96ede260127812f58ff138afea3277615eaea3a793c81a1",
        "linq": "context.Artists.Join(context.Songs, a => a.ArtistName, s => s.ArtistName, (a, s) => new { ArtistName = a.ArtistName, Count = s.Count() })\n.GroupBy(x => x.ArtistName)\n.OrderByDescending(x => x.Count)\n.Take(3)\n.Select(x => new { ArtistName = x.Key, Count = x.Count() })\n.ToList();"
    },
    {
        "id": "79b13e9cab3962e4e164a88a7abed10b30565ddb86335c6a430d02fc15c4e091",
        "linq": "context.Artists.Where(e => e.Country == \"USA\").Select(e => e.Country).ToList();"
    },
    {
        "id": "5a72f4fa7d9430812da188c351cef2ea305f26129b4ea1582204bb2ab28dce1e",
        "linq": "context.Songs.Select(s => s.SongName).Where(s => s.Rating < context.Songs.Min(s => s.Rating).Where(s => s.Languages == \"english\")).ToList();"
    },
    {
        "id": "d4f0d30a7e0aef6acf8d535c2b4d0f4fcd76c2cdd7c254c07fbbb1228bc66b38",
        "linq": "context.Songs.Where(s => s.Resolution > context.Songs.Max(s => s.Resolution) && s.Rating < 8).Select(s => s.FId).ToList();"
    },
    {
        "id": "2bac434891e62305135697b126e8e301e5b0c3cdbe26238f5a8d6b54f94ce3c4",
        "linq": "context.Songs.Select(s => s.FIdNavigation).Where(s => s.Resolution > context.Songs.Average(s => s.Resolution)).Where(s => s.GenreIsNavigation.GName == \"modern\").Select(s => s.FId).ToList();"
    },
    {
        "id": "bbd719630a012734fa8899792abc1dc4b07a086a288a2cc8a4ea397f7c1b516e",
        "linq": "context.Artists.Select(a => a.ArtistName).FromQuery(\"SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = 'bangla' GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3\").ToList();"
    },
    {
        "id": "124716ebfb3bb174ed6084c349e4c05c7311a98ee2d498bf50de5d0d8ac1f03e",
        "linq": "context.Songs\n   .Where(s => s.Languages == \"english\")\n   .OrderBy(s => s.Rating)\n   .Select(s => new { s.FId, s.GenreIs, s.ArtistName })\n   .ToList();"
    },
    {
        "id": "60c1a8535e44e141c60a81a2e20723ba5b405530ee2f4e74b530aadce016129b",
        "linq": "context.Files.Join(x => x.Songs, y => y.FId, z => z.FId, (x, y, z) => new { x.Duration, x.FileSize, x.Formats })\n   .Where(x => x.Songs.GenreIs == \"pop\")\n   .OrderBy(x => x.Songs.SongName)\n   .Select(x => new { x.Duration, x.FileSize, x.Formats })\n   .ToList();"
    },
    {
        "id": "ab12bca39e19decca5acfb707c8e608c4548f3d1cc9b27c4ac9cdbcb3cb366d7",
        "linq": "context.Songs.Select(s => s.ArtistNameNavigation.ArtistName).Distinct().Where(s => s.Languages == \"english\").Except(context.Songs.Select(s => s.ArtistNameNavigation.ArtistName).Distinct().Where(s => s.Rating > 8)).ToList();"
    },
    {
        "id": "7670c63e876139a3ec0f011ba4427616d223e084c699d0cca4b4b0230fa9618e",
        "linq": "context.Artists.Where(a => a.Country == \"Bangladesh\").Select(a => a.ArtistName).Distinct().Except(context.Songs.Where(s => s.Rating > 7).Select(s => s.ArtistName).Distinct()).ToList();"
    },
    {
        "id": "230beb34c67afeb051e748993e3c796122229270f84cd39039828021699f8e74",
        "linq": "context.Trains.Select(t => new\n{\n    Name = t.Name,\n    Service = t.Service\n})\n.OrderBy(t => t.Time)\n.ToList();"
    },
    {
        "id": "ff44934796624024fc6f3ec70cdd483c657d09b701804429e8fadc1c86f8ef73",
        "linq": "context.Stations.GroupBy(s => s.Location).Where(g => g.Count() == 1).Select(g => g.Key).ToList();"
    },
    {
        "id": "4be64796fb4ad4649606b83f122c29ad00d1af5bfcf517020ac1812b4da572e7",
        "linq": "context.Stations.OrderBy(s => s.AnnualEntryExit).ThenBy(s => s.AnnualInterchanges).Select(s => new { s.Name, s.Location }).ToList();"
    },
    {
        "id": "21b593a9c7c72cffbbe6aa813619013bb35daeaf94d263e2629a1fd5925eb5e5",
        "linq": "context.Students\n   .GroupBy(e => e.DeptCode)\n   .OrderByDescending(g => g.Count())\n   .Select(g => new { g.Key, g.Count() })\n   .First()\n   .ToList();"
    },
    {
        "id": "90f609e0b28feb2f5e4f53b0da9329f89a1f76a4cb290726e169947973a9dcaf",
        "linq": "context.Students.GroupBy(s => s.DeptCode).OrderByDescending(g => g.Count()).Select(g => new { g.Key, Count = g.Count() }).Take(3).ToList();"
    },
    {
        "id": "d37e333930f58b8440590513c24fbde7af99291a8bc4e546f155afcf9a0d6212",
        "linq": "context.Employees.Join(context.Professors, e => e.EmpNum, p => p.EmpNum, (e, p) => new { e.EmpFname, p.ProfOffice })\n.Join(context.Departments, d => d.DeptCode, p => p.DeptCode, (d, p) => new { e.EmpFname, p.ProfOffice })\n.Where(d => d.DeptName == \"History\" && d.ProfHighDegree == \"Ph.D.\")\n.Select(d => new { d.EmpFname, d.ProfOffice })\n.ToList();"
    },
    {
        "id": "6384c5f9c6dde1d18b86cb719d0b5f0b48cdead294fd686ae3660c334055bf10",
        "linq": "context.Classes.Join(context.Employees, e => e.ProfNum, p => p.EmpNum, (e, p) => new { e.CrsCode, p.EmpFname }).Select(x => new { x.CrsCode, x.EmpFname }).ToList();"
    },
    {
        "id": "ebdefa5b37127864ce18d59ba52809eb6f12538079f49401d3a87f2c11d94c18",
        "linq": "context.Students.Select(s => s.EmpFname).ToList();"
    },
    {
        "id": "73ef25c14288d35b4de96d9afbca2f10e9734b0dd0a8806a73ed4d7acd543a26",
        "linq": "context.Students.Join(context.Departments, s => s.DeptCode, d => d.DeptCode, (s, d) => new { s.StuFname, d.DeptName })\n   .Join(context.Employees, s => s.StuNum, e => e.EmpNum, (s, e) => new { s.StuFname, e.EmpFname })\n   .Join(context.Classes, s => s.StuNum, c => c.StuNum, (s, c) => new { s.StuFname, c.ClassRoom })\n   .Join(context.Professors, s => s.StuNum, p => p.EmpNum, (s, p) => new { s.StuFname, p.ProfOffice })\n   .Join(context.Courses, s => s.StuNum, c => c.StuNum, (s, c) => new { s.StuFname, c.CrsDescription })\n   .ToList();"
    },
    {
        "id": "cfbcb94e33e1132487842ac5df2bb871f07f1218012cab067e8a51502ea8fb58",
        "linq": "context.Classes.Join(e => e.ProfNumNavigation, p => p.EmpNum).Join(e => e.CrsCodeNavigation, c => c.DeptCodeNavigation, d => d.DeptCode).SelectMany(e => e.ProfNumNavigation).SelectMany(e => e.CrsCodeNavigation).SelectMany(e => e.DeptCodeNavigation).SelectMany(e => e.ProfNumNavigation).SelectMany(e => e.CrsCodeNavigation).SelectMany(e => e.DeptCodeNavigation).SelectMany(e => e.ProfNumNavigation).SelectMany(e => e.CrsCodeNavigation).SelectMany(e => e.DeptCodeNavigation).SelectMany(e => e.ProfNumNavigation).SelectMany(e => e.CrsCodeNavigation).SelectMany(e => e.DeptCodeNavigation).SelectMany(e => e.ProfNumNavigation).SelectMany(e => e.CrsCodeNavigation).SelectMany(e => e.DeptCodeNavigation).SelectMany(e => e.ProfNumNavigation).SelectMany(e => e.CrsCodeNavigation).SelectMany(e => e.DeptCodeNavigation).SelectMany(e => e.ProfNumNavigation).SelectMany(e => e.CrsCodeNavigation).SelectMany(e => e.DeptCodeNavigation).SelectMany(e =>"
    },
    {
        "id": "8b2b109e42ee8dbfffa0f59a804a722763c270d931467624f332582968230389",
        "linq": "context.Students.Join(context.Enrolls, s => s.StuNum, e => e.StuNum, (s, e) => new { s, e })\n   .Join(context.Classes, e => e.e.ClassCode, c => c.ClassCode, (e, c) => new { e, c })\n   .Join(context.Courses, c => c.c.CrsCode, crs => crs.CrsCode, (c, crs) => new { c, crs })\n   .Select(e => new { e.c.s.StuFname, e.c.s.StuLname, crs.CrsDescription })\n   .ToList();"
    },
    {
        "id": "2b972e2e15677269e4fcad26968f1eb2057a02850791fb1b9220721f8008840d",
        "linq": "context.Students\n   .Join(context.Enrolls, student => student.StuNum, enroll => enroll.StuNum, (student, enroll) => new { student.StuFname, student.StuLname, enroll.EnrollGrade })\n   .Where(enroll => enroll.EnrollGrade == \"C\" || enroll.EnrollGrade == \"A\")\n   .Select(enroll => new { student.StuFname, student.StuLname })\n   .ToList();"
    },
    {
        "id": "d44b7ef4710a6b36f35d180c54ae2f9ce12526d86fed20261db166fef69263a3",
        "linq": "context.Employees.Where(e => e.EmpNum == 1).Select(e => e.EmpFname).ToList();"
    },
    {
        "id": "88eafe7b6c186bbc7238354d690734a12ddd0643c29df64256015113367caa75",
        "linq": "context.Employees.Select(e => e.EmpFname).Distinct().ToList();"
    },
    {
        "id": "735dc4839e527421f753eb3e8c2e71a7f68016e7962e0f68dc09449381df6b44",
        "linq": "context.Students.Where(s => s.StuNum == 10018).Select(s => s.StuLname).ToList();"
    },
    {
        "id": "e15f734d8086703bff29325c2ad715436b4a7ef864444c80680b8b063d9110c6",
        "linq": "context.Students\n   .Where(s => s.DeptCode == \"History\")\n   .Select(s => new { s.StuFname, s.StuLname, s.StuInit, s.StuDob, s.StuHrs, s.StuClass, s.StuGpa, s.StuPhone, s.StuTransfer, s.ProfNum, s.DeptCode, s.StuClass, s.StuInit, s.StuFname, s.StuLname, s.StuDob, s.StuHrs, s.StuGpa, s.StuTransfer, s.StuPhone, s.ProfNum, s.DeptCode, s.StuClass, s.StuInit, s.StuFname, s.StuLname, s.StuDob, s.StuHrs, s.StuGpa, s.StuTransfer, s.StuPhone, s.ProfNum, s.DeptCode, s.StuClass, s.StuInit, s.StuFname, s.StuLname, s.StuDob, s.StuHrs, s.StuGpa, s.StuTransfer, s.StuPhone, s.ProfNum,"
    },
    {
        "id": "49d76d4f37689932260468dadd77ddf79925c8f1c290d1a1e675b0697fc08b42",
        "linq": "context.Employees.GroupBy(e => e.EmpNum).Where(g => g.Count() > 1).Select(g => g.Key).SelectMany(k => k.Employees).Select(e => e.EmpFname).Distinct().ToList();"
    },
    {
        "id": "5beb2608d0721815ace3685c4e1858794dee9f9bad9717ff1c9b8f9fce335daa",
        "linq": "context.Students.Select(s => s.StuFname).Where(s => s.Count() == 1).ToList();"
    },
    {
        "id": "7ba33f485c867894f2523176d38ced51160bdebaa5f0d3f53da580434b527e67",
        "linq": "context.Courses.Join(context.Departments, c => c.DeptCode, d => d.DeptCode, (c, d) => new { c, d }).Where(e => e.c.CrsDescription.Contains(\"Statistics\")).Select(e => e.d.DeptName).ToList();"
    },
    {
        "id": "6177e896a2854c906d1e1ccec6bb2493bbaf4d4c60b836c02f098aca2d022928",
        "linq": "context.Students\n   .Join(context.Enrolls, s => s.StuNum, e => e.StuNum, (s, e) => new { s, e })\n   .Join(context.Classes, se => se.e.ClassCode, c => c.ClassCode, (se, c) => new { se, c })\n   .Where(sc => sc.c.CrsCode == \"ACCT-211\" && sc.se.s.StuLname.StartsWith(\"S\"))\n   .Select(sc => sc.se.s.StuFname)\n   .ToList();"
    },
    {
        "id": "dc5b414c8db68ce1ceefc4670c5c8a94754c2ffb6974d46073f2f862c4789d11",
        "linq": "context.Employees\n   .GroupBy(e => e.DepartmentId)\n   .Where(g => g.Count() >= 2)\n   .Select(g => new { g.Key, TotalSalary = g.Sum(e => e.Salary) })\n   .ToList();"
    },
    {
        "id": "a39cc81b6a3fa03212b22825fc9882b9fdfeeae4404560f7ef894756d012fe15",
        "linq": "context.Employees\n   .Join(context.Departments, e => e.DepartmentId, d => d.DepartmentId, (e, d) => new { e, d })\n   .Join(context.Locations, (e, d) => new { e, d }, l => l.LocationId, (e, d, l) => new { e, d, l })\n   .Select(e => new\n    {\n        FirstName = e.e.FirstName,\n        LastName = e.e.LastName,\n        DepartmentName = e.d.DepartmentName,\n        City = e.l.City,\n        StateProvince = e.l.StateProvince\n    })\n   .ToList();"
    },
    {
        "id": "e28079c617c7a61e298acf6b1a33bdbc3e500caf32e06a7abb5d815b14e1d2c7",
        "linq": "context.Employees\n.Join(context.Departments, e => e.DepartmentId, d => d.DepartmentId, (e, d) => new { e, d })\n.Join(context.Locations, (e, d) => new { e, d }, l => l.LocationId, e => e.DepartmentId, (e, l) => new { e, l })\n.Where(e => e.e.first_name.Contains('z'))\n.Select(e => new { e.e.first_name, e.e.last_name, e.l.city })\n.ToList();"
    },
    {
        "id": "af7c395f8c61539dcdf8386ab0235e8bce93ffb51939a4d0f9687c2d283f38ef",
        "linq": "context.Departments.Join(context.Locations, T1 => T1.LocationId, T2 => T2.LocationId, (T1, T2) => new { T1.department_name, T2.city, T2.state_province }).Select(x => new { x.department_name, x.city, x.state_province }).ToList();"
    },
    {
        "id": "4d6e04af4cd5a61ff8ef800a073cdd899f76c15cfbad80b6502b14617173d6d5",
        "linq": "context.Employees.Join(context.Departments, e => e.DepartmentId, d => d.DepartmentId, (e, d) => new { e, d })\n   .Join(context.Locations, j => j.d.LocationId, l => l.LocationId, (j, l) => new { j, l })\n   .Join(context.Countries, j => j.l.CountryId, c => c.CountryId, (j, c) => new { j, c })\n   .Select(x => new\n    {\n        x.j.e.FirstName,\n        x.j.e.LastName,\n        x.j.e.EmployeeId,\n        x.c.CountryName\n    })\n   .ToList();"
    },
    {
        "id": "1e262dd0af5f1b640f4efdc38bb9ac02a4dd1274841590ec266df0f2099016d3",
        "linq": "context.Employees.GroupBy(e => e.Department.DepartmentName).Select(g => new { g.Key, Count = g.Count() }).ToList();"
    },
    {
        "id": "f381c744eb77bbe9b33f2bb6c83f72faa38498410a5547c444a3e8cd0697c977",
        "linq": "context.Employees\n   .Join(context.Departments, e => e.DepartmentId, d => d.DepartmentId, (e, d) => new { e, d })\n   .Join(context.Locations, e => e.d.LocationId, l => l.LocationId, (e, l) => new { e, l })\n   .Where(e => e.l.City == \"London\")\n   .Select(e => new { e.e.FirstName, e.e.LastName, e.e.Salary })\n   .ToList();"
    },
    {
        "id": "19823612ac6956f30e82c72101ea8d2e3cc2634035d24170e58a493e4ecf6ca8",
        "linq": "context.Students\n   .GroupBy(s => s.StuId)\n   .Select(g => new\n    {\n        Count = g.Count(),\n        StuId = g.Key\n    })\n   .ToList();"
    },
    {
        "id": "1972de18467b1a6535f3c40bf6f8ef473d9ed4b9b3a0afb3ad48c6230a3fee22",
        "linq": "context.Students.Select(s => new { Count = context.HasPets.Count(h => h.StuId == s.StuId), StudentId = s.StuId }).ToList();"
    },
    {
        "id": "0010b88d3e59f79e090346244c72fc31f88fa1fb92f0c5ea4b4e0a28a57b6acc",
        "linq": "context.Student.Join(context.HasPet, t1 => t1.StuId, t2 => t2.StuId, (t1, t2) => new { t1.Fname, t1.Sex }).GroupBy(x => x.StuId).Where(g => g.Count() > 1).SelectMany(x => x).ToList();"
    },
    {
        "id": "f37c5add7ed3a4aa3e60288597d926d4b8ea7a77b6dd839d0dbf9bf696986036",
        "linq": "context.Students\n   .Join(context.HasPets, s => s.StuId, hp => hp.StuId, (s, hp) => new { Student = s, HasPet = hp })\n   .Join(context.Pets, h => h.HasPet.PetId, p => p.PetId, (h, p) => new { Student = h.Student, HasPet = h.HasPet, Pet = p })\n   .Where((e) => e.Pet.PetAge == 3 && e.Pet.PetType == \"cat\")\n   .Select(e => e.Student.Lname)\n   .ToList();"
    },
    {
        "id": "ca88acbeb9ce3f09ba6cdbeda963bb9e254b5c08ab0ce48417978c555639a2b2",
        "linq": "context.Students.Average(s => s.Age).Where(s =>!context.HasPets.Any(h => h.StuId == s.StuId)).ToList();"
    },
    {
        "id": "c6c73e4a20346c83e9e02e05ab4caad45991bd5ae458ddfb64a0796ec560fe22",
        "linq": "context.RollerCoasters.GroupBy(r => r.Country.Name).Where(g => g.Count() > 1).Select(g => g.Key).ToList();"
    },
    {
        "id": "01406ba008dd700884c46baa534b0385ac95a547a626fcce5abf9299e873ab06",
        "linq": "context.Set<Country>().Include(c => c.RollerCoasters).Where(c => c.CountryId == context.Set<RollerCoaster>().Select(r => r.CountryId).First()).Select(c => new { Name = c.Name, Population = c.Population }).OrderByDescending(c => c.Height).Take(1).ToList();"
    },
    {
        "id": "eadfeee63dcd0b479d8755eb29c33a3a25e1c5e929e1813c79d08ca6d6c7d429",
        "linq": "context.RollerCoasters.Count(e => e.Length > 3000).ToList();"
    },
    {
        "id": "6a7b3d6367b2228495890653057240b0f970b6e0b57e7e00922d0ee53d8c9f72",
        "linq": "context.MedicineEnzymeInteractions.Where(m => m.InteractionType == \"inhibitor\").SelectMany(m => m.Medicine).Select(m => new { m.Name, m.TradeName }).ToList();"
    },
    {
        "id": "f8d7549c34699c40ed73e5f323f808ef61ff90bb75b324522f7beb97c8ec9196",
        "linq": "context.Medicines\n   .Except(\n        context.MedicineEnzymeInteractions\n           .Join(\n                context.Medicines,\n                t2 => t2.MedicineId,\n                t1 => t1.Id,\n                (t2, t1) => new { t2, t1 })\n           .Join(\n                context.Enzymes,\n                t3 => t3.t2.EnzymeId,\n                t4 => t4.Id,\n                (t3, t4) => new { t3, t4 })\n           .Where(t5 => t5.t4.Product == \"Protoporphyrinogen IX\")\n           .Select(t6 => new { t6.t5.t1.Name, t6.t5.t1.TradeName }))\n   .ToList();"
    },
    {
        "id": "fde8b69d3fa74d35d9c26c2f00249fb0a345a3a90bb42dd6e350111fef386c05",
        "linq": "context.Medicines.Count(e => e.FdaApproved == true).ToList();"
    },
    {
        "id": "6858f69c37e244d5eec9ce975cedaf9d21ed36ddf0e68a19bc4d01307f871076",
        "linq": "context.Enzymes.Where(e => e.Name.Contains(\"ALA\")).Select(e => e.Name).ToList();"
    },
    {
        "id": "48fee8085b64d4cd06744d2e86c7b1681c844b73291d08f579eefee9b431bcff",
        "linq": "context.Medicines.Select(m => m.TradeName).GroupBy(m => m).Select(g => new { TradeName = g.Key, Count = g.Count() }).ToList();"
    },
    {
        "id": "23416cf12d9525f56ac40bebf25d067d3b736d968b2101398a1be8c7845098f3",
        "linq": "context.Mountains.Where(m =>!context.Climbers.Any(c => c.MountainId == m.MountainId)).Select(m => m.Name).ToList();"
    },
    {
        "id": "9c080c9cd29686e8550b01af76b6332bacd2fc3897d24abad8091fdbd948d095",
        "linq": "context.Mountains.Where(m => m.Height > 5600).Select(m => m.Country).Intersect(context.Mountains.Where(m => m.Height < 5200).Select(m => m.Country)).ToList();"
    },
    {
        "id": "12490f6074c21f3aaa55c034a9b40bb496f469ae9a360809c9880fe647ac01de",
        "linq": "context.Mountains.GroupBy(m => m.Range).OrderByDescending(g => g.Count()).Select(g => g.Key).First();"
    },
    {
        "id": "8d654745b8032cdb4b49830ea59c525793ec618ac1b194eaaf1a4f31d819cd60",
        "linq": "context.Mountains.Where(m => m.Height > 5000 || m.Prominence > 1000).Select(m => m.Name).ToList();"
    },
    {
        "id": "4358f1441fce57d7bd318ad89c539c6571891641dd2544af6a785161a4e8f72b",
        "linq": "context.CustomerMasterIndices\n   .Join(\n        context.CmiCrossReferences,\n        cm => cm.MasterCustomerId,\n        cr => cr.MasterCustomerId,\n        (cm, cr) => new { cm, cr })\n   .Where(x => x.cm.CmiDetails == \"Gottlieb, Becker and Wyman\")\n   .Select(x => x.cr.SourceSystemCode)\n   .Distinct()\n   .ToList();"
    },
    {
        "id": "f1b6cc584b884b24f040875e7b2026b4286544845b97d6252074e9ed1f407ffb",
        "linq": "context.LocalGovtMdmContext\n   .CmiCrossReferences\n   .Where(x =>!x.ParkingFines.Any())\n   .Select(x => x.CmiCrossRefId)\n   .ToList();"
    },
    {
        "id": "1e46371a8e4c284a381b0c6d2c50032dd3b8df27830ce2a2bfda723b68d8682f",
        "linq": "context.LocalGovtMdmContext.Set<CmiCrossReference>().Where(r => r.SourceSystemCode.Contains(\"en\")).Select(r => r.SourceSystemCode).Distinct().ToList();"
    },
    {
        "id": "44cb7724cf633f4ed54ee6faa32b0da12d521b8b96f7889480371b4e00d72581",
        "linq": "context.Players.Select(p => p.Position).Distinct().Count();"
    },
    {
        "id": "557ed1316186731a605ec6631d57044c4a0ab372d7391b086e7354eddee427f4",
        "linq": "context.Players.Where(p => p.Points > context.Players.Average(p => p.Points)).Select(p => p.Name).ToList();"
    },
    {
        "id": "49bc6bca55a797a661da099a8189ea1fb49cba0bd9d7b025cf1f7679861ac73a",
        "linq": "context.Players.GroupBy(p => p.Position).Where(g => g.Count() < 30).Select(g => new { Count = g.Key, Position = g.Sum(p => p.Points) }).ToList();"
    },
    {
        "id": "d35ae3bf126280c09eaed0c2ba62b55d9d7e5c56461fa595652d600370ba287e",
        "linq": "context.Competition.Where(c => c.CompetitionType == \"Tournament\").GroupBy(c => c.Country).OrderByDescending(g => g.Count()).Select(g => g.Key).First();"
    },
    {
        "id": "7ac66773be84d90be8f857ec63a057b739d17af67f8571ce97f3790f1c221607",
        "linq": "context.Competitions.Where(c => c.CompetitionType == \"Friendly\" && c.CompetitionType == \"Tournament\").Select(c => c.Country).Distinct().ToList();"
    },
    {
        "id": "12f0c1f37c2e970af1e39f5e08f2b11e1e6539d6cfaa5129f278d428688f6404",
        "linq": "context.Competition.Where(c => c.CompetitionType!= \"Friendly\").Select(c => c.Country).Distinct().ToList();"
    },
    {
        "id": "8fe3f7958e3f2e735fb3d4710f36482c5d9c00fe0935623b68c833fb4214c0b7",
        "linq": "context.Rooms.Where(r => r.BasePrice > context.Rooms.Average(r => r.BasePrice)).Select(r => r.RoomName).ToList();"
    },
    {
        "id": "c6de4a6a5d5555de50c598ce53dba9e5894bece08c21816e941dfb123cec623e",
        "linq": "context.Rooms.Count(r =>!context.Reservations.Select(r => r.Room).Distinct().Contains(r.RoomId));"
    },
    {
        "id": "2a639aafe96549e6d477a508afc50a1176b867dee3ee4fd1683d2e0db9dee225",
        "linq": "context.Reservations\n   .GroupBy(x => x.RoomNavigation!.RoomName)\n   .Select(x => new\n    {\n        RoomName = x.Key,\n        Count = x.Count(),\n        Room = x.Select(y => y.RoomNavigation).FirstOrDefault()\n    })\n   .ToList();"
    },
    {
        "id": "a8a396a4d8917ac6b9b9106f2f7d2af77216326836a0a341609662817dcbf9ac",
        "linq": "context.Reservations.GroupBy(r => r.Room).Where(g => g.Count() > 60).Select(g => g.Key).SelectMany(r => context.Rooms.Where(r => r.RoomId == r.Room)).Select(r => r.RoomName).ToList();"
    },
    {
        "id": "a65af6231058403736b67ef534ae2af90affdda3af72a83ba8dff894bccac6f4",
        "linq": "context.Rooms.Where(r => r.BasePrice >= 120 && r.BasePrice <= 150).Select(r => r.RoomName).ToList();"
    },
    {
        "id": "8250d1a55a6140d1e5fd1023b3bc3d2a034d6f3e9ec59abed55deb61c97dbe4f",
        "linq": "context.Reservations.Where(r => r.FirstName.Contains(\"ROY\")).Select(r => r.RoomNavigation.RoomName).ToList();"
    },
    {
        "id": "7dca9310978c1f528ead6a098bc9402de3327086478c6041d36d8f37dbfa9271",
        "linq": "context.Reservations.Join(context.Rooms, t1 => t1.Room, t2 => t2.RoomId, (t1, t2) => new { t1.firstname, t1.lastname }).Where(x => x.Rate - x.basePrice > 0).Select(x => new { x.firstname, x.lastname }).ToList();"
    },
    {
        "id": "b70d7724f139873e746bba0908344d486d305361bc9aedc4f164c451b0958fe3",
        "linq": "context.CustomersCampaignsEcommerceContext.CustomerAddresses.Select(c => c.AddressTypeCode).Distinct().ToList();"
    },
    {
        "id": "f5b3c964d5db13cedda2d0154e701cae08a57b6fac2e07280bce2cf3114a4522",
        "linq": "context.CustomerOrders.Where(o => o.OrderStatusCode == \"Cancelled\" || o.OrderStatusCode == \"Paid\").Select(o => new { o.OrderShippingCharges, o.CustomerId }).ToList();"
    },
    {
        "id": "efa8b664d7c097d5323c8b3edfafb3a2281e018f584f8933cc0062233c6b2d47",
        "linq": "context.Customers\n   .Join(context.CustomerOrders, t1 => t1.CustomerId, t2 => t2.CustomerId, (t1, t2) => new { t1, t2 })\n   .Where(t => t.t2.ShippingMethodCode == \"FedEx\" && t.t2.OrderStatusCode == \"Paid\")\n   .Select(t => t.t1.CustomerName)\n   .ToList();"
    },
    {
        "id": "40aa291e56316e30891dbe8c6fbfdb7335fb2924ad20917e122fdbff52609326",
        "linq": "context.Ship1.Captains\n   .GroupBy(c => c.Ship)\n   .Where(g => g.Count() > 1)\n   .Select(g => g.Key.Name)\n   .ToList();"
    },
    {
        "id": "7a9ebb07a64a45ffb453f683edaf35336d1dd0c9300cff5d6d0f31c5cf2c37d0",
        "linq": "context.Ships.Where(s =>!context.Captains.Any(c => c.ShipId == s.ShipId)).Select(s => new { s.Name, s.Class }).ToList();"
    },
    {
        "id": "d508cc540852e392486ced320728e2216e794a43aab62cc7e6d35298979540c3",
        "linq": "context.Ships\n.Join(context.Captains, s => s.ShipId, c => c.ShipId, (s, c) => new { s, c })\n.OrderBy(c => c.c.Age)\n.Select(c => c.s.Name)\n.FirstOrDefault();"
    },
    {
        "id": "c0564eb24bbfddcb4e6a946044b3a8be0f9f06cc11231e611fb9d57a78d03c2f",
        "linq": "context.Ships.Where(s =>!context.Captains.Any(c => c.Rank == \"Midshipman\" && c.ShipId == s.ShipId)).Select(s => new { s.Name, s.Flag }).ToList();"
    },
    {
        "id": "27223f992622391510bcfadd4e72b847a8e7ba52c50d56ffeb900d62415b4993",
        "linq": "context.Ships.Join(context.Captains, s => s.ShipId, c => c.ShipId, (s, c) => new { s, c })\n   .Where(x => x.c.Rank == \"Midshipman\" || x.c.Rank == \"Lieutenant\")\n   .Select(x => x.s.Name)\n   .ToList();"
    },
    {
        "id": "d0d2ac43732c822feeac344d84fe7f41f39a02757d949dcce32e33a2f57bea94",
        "linq": "context.Products.Where(p => p.Manufacturer == 2).Select(p => p.Price).Average();"
    },
    {
        "id": "138de6e80b9b0facb1e1605fc758e51f00d6120aebb9c256779a621cda9e523b",
        "linq": "context.Products.Count(p => p.Price >= 180);"
    },
    {
        "id": "cd6897b816281ac4231f03c6b7ee45c3ed2edcf2de261a2fa3cd4e6e1ad50c09",
        "linq": "context.Products.Where(p => p.Price >= 180).OrderByDescending(p => p.Price).ThenBy(p => p.Name).Select(p => new { p.Name, p.Price }).ToList();"
    },
    {
        "id": "0a30e765e13fb381c9f5219d0a2d4e1b254f86a5a4f49eda2e48a9aae7dbd7ae",
        "linq": "context.Products\n.GroupBy(p => p.Manufacturer)\n.Average(p => p.Price)\n.Select(g => new { Manufacturer = g.Key, AveragePrice = g.Average() });"
    },
    {
        "id": "518288520e0171acc3af9e6e9fba3923c89dbc6715676997c90e3c84811a2d5e",
        "linq": "context.Products.Average(p => p.Price), context.Manufacturers.Select(m => m.Name).GroupBy(g => g.Key).Select(s => new { s.Key, AvgPrice = s.Average(p => p.Price) }).ToList();"
    },
    {
        "id": "ad11454284d1b4297c7084cbe03fb7f328bf14c7a72f6345ac9454f5b1b539d3",
        "linq": "context.Products.GroupBy(p => p.ManufacturerNavigation.Name).Select(g => new { Name = g.Key, AvgPrice = g.Average(p => p.Price) }).Where(x => x.AvgPrice >= 150).Select(x => x.Name).ToList();"
    },
    {
        "id": "864e9f84880ecb51acb20d5b8a9d4591c6f561d8d99cc06d7b9e78f09c5ef9d5",
        "linq": "context.Products.Select(p => new { p.Name, p.Price }).OrderByDescending(p => p.Price).FirstOrDefault();"
    },
    {
        "id": "59eaf94c97fdba4f1a422b0f5b7ed01e327606b1cb152103d99d3459ab89a9bd",
        "linq": "context.Manufacturers.Join(context.Products, m => m.Code, p => p.Manufacturer, (m, p) => new { m.Name, p.Price })\n   .GroupBy(x => x.Name)\n   .Select(x => new { x.Key, MaxPrice = x.Max(y => y.Price) })\n   .ToList();"
    },
    {
        "id": "df741b7e4f361c33f45541781fff5700fd25a480801acac39a8e6b9d819de889",
        "linq": "context.Representatives.GroupBy(r => r.State).Where(g => g.Count() >= 2).Select(g => g.Key).ToList();"
    },
    {
        "id": "6fce04a9712b9f5af239b5c2a83d2c81a39f4649ebd54e41cb8f3a0486770335",
        "linq": "context.Representatives.Select(r => r.Name).Where(r =>!context.Elections.Any(e => e.RepresentativeId == r.RepresentativeId)).ToList();"
    },
    {
        "id": "9a6c2fd06536a702c5e3b17419d8ede1f19d2b0b5603247bb59b0deb04ae0b5f",
        "linq": "context.Representatives.Where(r => r.State == \"New York\").Select(r => r.Party).Intersect(context.Representatives.Where(r => r.State == \"Pennsylvania\").Select(r => r.Party)).ToList();"
    },
    {
        "id": "e64b9388acbb705f503df974c7278264f9e5ea7b361a0abb743da618a2934ea0",
        "linq": "context.Representatives.Count();"
    }
]